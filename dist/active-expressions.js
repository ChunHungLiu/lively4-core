(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("active-expressions", [], factory);
	else if(typeof exports === 'object')
		exports["active-expressions"] = factory();
	else
		root["active-expressions"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _interpretationActiveExpressions = __webpack_require__(1);
	
	Object.defineProperty(exports, 'aexpr', {
	  enumerable: true,
	  get: function get() {
	    return _interpretationActiveExpressions.aexpr;
	  }
	});
	
	/*istanbul ignore next*/var _baseActiveExpressions = __webpack_require__(126);
	
	Object.defineProperty(exports, 'BaseActiveExpression', {
	  enumerable: true,
	  get: function get() {
	    return _baseActiveExpressions.BaseActiveExpression;
	  }
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ActiveExpressionInterpreter = undefined;
	
	var _keys = __webpack_require__(2);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _get2 = __webpack_require__(37);
	
	var _get3 = _interopRequireDefault(_get2);
	
	var _set = __webpack_require__(47);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _getPrototypeOf = __webpack_require__(38);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _createClass2 = __webpack_require__(85);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(89);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(105);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _classCallCheck2 = __webpack_require__(113);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	exports.aexpr = aexpr;
	
	var /*istanbul ignore next*/_interpreter = __webpack_require__(114);
	
	/*istanbul ignore next*/var _interpreter2 = _interopRequireDefault(_interpreter);
	
	var /*istanbul ignore next*/_stackEs2015Modules = __webpack_require__(122);
	
	/*istanbul ignore next*/var _stackEs2015Modules2 = _interopRequireDefault(_stackEs2015Modules);
	
	var /*istanbul ignore next*/_listener = __webpack_require__(123);
	
	var /*istanbul ignore next*/_baseActiveExpressions = __webpack_require__(126);
	
	/*istanbul ignore next*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AEXPR_STACK = new /*istanbul ignore next*/_stackEs2015Modules2.default();
	
	/*istanbul ignore next*/var Handler = function /*istanbul ignore next*/Handler() {
	    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Handler);
	};
	
	/*istanbul ignore next*/var InterpreterActiveExpression = function (_BaseActiveExpression) {
	    (0, _inherits3.default)(InterpreterActiveExpression, _BaseActiveExpression);
	
	    function /*istanbul ignore next*/InterpreterActiveExpression(func, scope) {
	        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, InterpreterActiveExpression);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(InterpreterActiveExpression).call(this, func));
	
	        /*istanbul ignore next*/_this.scope = scope;
	        /*istanbul ignore next*/_this.propertyAccessors = new /*istanbul ignore next*/_set2.default();
	
	        /*istanbul ignore next*/_this.installListeners();
	        /*istanbul ignore next*/return _this;
	    }
	
	    // TODO: remove indirection
	
	
	    (0, _createClass3.default)(InterpreterActiveExpression, [{
	        key: 'propertyAssigned',
	        value: function propertyAssigned() {
	            this.checkAndNotify();
	        }
	    }, {
	        key: 'revoke',
	        value: function revoke() {
	            this.removeListeners();
	        }
	    }, {
	        key: 'installListeners',
	        value: function installListeners() {
	            /*istanbul ignore next*/var _this2 = this;
	
	            AEXPR_STACK.withElement(this, function () {
	                ActiveExpressionInterpreter.runAndReturn( /*istanbul ignore next*/_this2.func, /*istanbul ignore next*/_this2.scope);
	            });
	        }
	    }, {
	        key: 'removeListeners',
	        value: function removeListeners() {
	            this.propertyAccessors.forEach(function (propertyAccessor) {
	                propertyAccessor.selectionItems.delete(this);
	            }, this);
	            this.propertyAccessors.clear();
	        }
	    }]);
	    return InterpreterActiveExpression;
	}(_baseActiveExpressions.BaseActiveExpression);
	
	function aexpr(func, scope) {
	    return new InterpreterActiveExpression(func, scope);
	}
	
	/*istanbul ignore next*/var ActiveExpressionInterpreter = exports.ActiveExpressionInterpreter = function (_Interpreter) {
	    (0, _inherits3.default)(ActiveExpressionInterpreter, _Interpreter);
	
	    function ActiveExpressionInterpreter() {
	        (0, _classCallCheck3.default)(this, ActiveExpressionInterpreter);
	        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ActiveExpressionInterpreter).apply(this, arguments));
	    }
	
	    (0, _createClass3.default)(ActiveExpressionInterpreter, [{
	        key: 'getProperty',
	        value: function getProperty(obj, name) {
	            var object = obj.valueOf(),
	                prop = name.valueOf();
	
	            /*istanbul ignore next*/_listener.Listener.watchProperty(object, prop).addHandler(AEXPR_STACK.top());
	
	            return (/*istanbul ignore next*/(0, _get3.default)((0, _getPrototypeOf2.default)(ActiveExpressionInterpreter.prototype), 'getProperty', this).call(this, obj, name)
	            );
	        }
	    }, {
	        key: 'stepCallExpression',
	        value: function stepCallExpression() {
	            if (this.stateStack[0].arguments > 0) {
	                console.log('call expression');
	                debugger;
	            }
	            var stateStack = this.stateStack,
	                state = stateStack[0],
	                node = state.node,
	                func = state.func_;
	
	            return (/*istanbul ignore next*/(0, _get3.default)((0, _getPrototypeOf2.default)(ActiveExpressionInterpreter.prototype), 'stepCallExpression', this).call(this)
	            );
	        }
	    }], [{
	        key: 'runAndReturn',
	        value: function runAndReturn(func, optScope) {
	            var scope = optScope || {};
	            var i = new ActiveExpressionInterpreter( /*istanbul ignore next*/'var returnValue = (' + func.toString() + ')();', function (self, rootScope) {
	                console.log('scope', scope);
	                /*istanbul ignore next*/(0, _keys2.default)(scope).forEach(function (k) {
	                    var value = scope[k];
	                    console.log(k, value);
	                    self.setProperty(rootScope, k, self.createPseudoObject(value));
	                });
	                // TODO: delete as the relevant global objects can be inferred by analysing the local scope
	                // ["__lvVarRecorder", "jQuery", "$", "_", "lively"].forEach((k) => {
	                //     self.setProperty(rootScope, k, self.createPseudoObject(window[k]));
	                // });
	            });
	            i.run();
	            return i.stateStack[0].scope.properties.returnValue.valueOf();
	        }
	    }]);
	    return ActiveExpressionInterpreter;
	}(_interpreter2.default);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(3), __esModule: true };

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	module.exports = __webpack_require__(24).Object.keys;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(5)
	  , $keys    = __webpack_require__(7);
	
	__webpack_require__(22)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(6);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(8)
	  , enumBugKeys = __webpack_require__(21);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(9)
	  , toIObject    = __webpack_require__(10)
	  , arrayIndexOf = __webpack_require__(13)(false)
	  , IE_PROTO     = __webpack_require__(17)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(11)
	  , defined = __webpack_require__(6);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(12);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 12 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(10)
	  , toLength  = __webpack_require__(14)
	  , toIndex   = __webpack_require__(16);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(15)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(15)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(18)('keys')
	  , uid    = __webpack_require__(20);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(19)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 19 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 20 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(23)
	  , core    = __webpack_require__(24)
	  , fails   = __webpack_require__(33);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(19)
	  , core      = __webpack_require__(24)
	  , ctx       = __webpack_require__(25)
	  , hide      = __webpack_require__(27)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 24 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(26);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(28)
	  , createDesc = __webpack_require__(36);
	module.exports = __webpack_require__(32) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(29)
	  , IE8_DOM_DEFINE = __webpack_require__(31)
	  , toPrimitive    = __webpack_require__(35)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(32) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(30);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(32) && !__webpack_require__(33)(function(){
	  return Object.defineProperty(__webpack_require__(34)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(33)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(30)
	  , document = __webpack_require__(19).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(30);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _getPrototypeOf = __webpack_require__(38);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _getOwnPropertyDescriptor = __webpack_require__(42);
	
	var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);
	
	  if (desc === undefined) {
	    var parent = (0, _getPrototypeOf2.default)(object);
	
	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;
	
	    if (getter === undefined) {
	      return undefined;
	    }
	
	    return getter.call(receiver);
	  }
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(39), __esModule: true };

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(40);
	module.exports = __webpack_require__(24).Object.getPrototypeOf;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(5)
	  , $getPrototypeOf = __webpack_require__(41);
	
	__webpack_require__(22)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(9)
	  , toObject    = __webpack_require__(5)
	  , IE_PROTO    = __webpack_require__(17)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(43), __esModule: true };

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(44);
	var $Object = __webpack_require__(24).Object;
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $Object.getOwnPropertyDescriptor(it, key);
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(10)
	  , $getOwnPropertyDescriptor = __webpack_require__(45).f;
	
	__webpack_require__(22)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(46)
	  , createDesc     = __webpack_require__(36)
	  , toIObject      = __webpack_require__(10)
	  , toPrimitive    = __webpack_require__(35)
	  , has            = __webpack_require__(9)
	  , IE8_DOM_DEFINE = __webpack_require__(31)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(32) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 46 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(48), __esModule: true };

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(49);
	__webpack_require__(50);
	__webpack_require__(62);
	__webpack_require__(66);
	__webpack_require__(82);
	module.exports = __webpack_require__(24).Set;

/***/ },
/* 49 */
/***/ function(module, exports) {



/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(51)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(52)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(15)
	  , defined   = __webpack_require__(6);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(53)
	  , $export        = __webpack_require__(23)
	  , redefine       = __webpack_require__(54)
	  , hide           = __webpack_require__(27)
	  , has            = __webpack_require__(9)
	  , Iterators      = __webpack_require__(55)
	  , $iterCreate    = __webpack_require__(56)
	  , setToStringTag = __webpack_require__(60)
	  , getPrototypeOf = __webpack_require__(41)
	  , ITERATOR       = __webpack_require__(61)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(27);

/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(57)
	  , descriptor     = __webpack_require__(36)
	  , setToStringTag = __webpack_require__(60)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(27)(IteratorPrototype, __webpack_require__(61)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(29)
	  , dPs         = __webpack_require__(58)
	  , enumBugKeys = __webpack_require__(21)
	  , IE_PROTO    = __webpack_require__(17)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(34)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(59).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(28)
	  , anObject = __webpack_require__(29)
	  , getKeys  = __webpack_require__(7);
	
	module.exports = __webpack_require__(32) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(19).document && document.documentElement;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(28).f
	  , has = __webpack_require__(9)
	  , TAG = __webpack_require__(61)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(18)('wks')
	  , uid        = __webpack_require__(20)
	  , Symbol     = __webpack_require__(19).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(63);
	var global        = __webpack_require__(19)
	  , hide          = __webpack_require__(27)
	  , Iterators     = __webpack_require__(55)
	  , TO_STRING_TAG = __webpack_require__(61)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(64)
	  , step             = __webpack_require__(65)
	  , Iterators        = __webpack_require__(55)
	  , toIObject        = __webpack_require__(10);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(52)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(67);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(77)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(28).f
	  , create      = __webpack_require__(57)
	  , redefineAll = __webpack_require__(68)
	  , ctx         = __webpack_require__(25)
	  , anInstance  = __webpack_require__(69)
	  , defined     = __webpack_require__(6)
	  , forOf       = __webpack_require__(70)
	  , $iterDefine = __webpack_require__(52)
	  , step        = __webpack_require__(65)
	  , setSpecies  = __webpack_require__(75)
	  , DESCRIPTORS = __webpack_require__(32)
	  , fastKey     = __webpack_require__(76).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(27);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 69 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(25)
	  , call        = __webpack_require__(71)
	  , isArrayIter = __webpack_require__(72)
	  , anObject    = __webpack_require__(29)
	  , toLength    = __webpack_require__(14)
	  , getIterFn   = __webpack_require__(73)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(29);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(55)
	  , ITERATOR   = __webpack_require__(61)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(74)
	  , ITERATOR  = __webpack_require__(61)('iterator')
	  , Iterators = __webpack_require__(55);
	module.exports = __webpack_require__(24).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(12)
	  , TAG = __webpack_require__(61)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(19)
	  , core        = __webpack_require__(24)
	  , dP          = __webpack_require__(28)
	  , DESCRIPTORS = __webpack_require__(32)
	  , SPECIES     = __webpack_require__(61)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(20)('meta')
	  , isObject = __webpack_require__(30)
	  , has      = __webpack_require__(9)
	  , setDesc  = __webpack_require__(28).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(33)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(19)
	  , $export        = __webpack_require__(23)
	  , meta           = __webpack_require__(76)
	  , fails          = __webpack_require__(33)
	  , hide           = __webpack_require__(27)
	  , redefineAll    = __webpack_require__(68)
	  , forOf          = __webpack_require__(70)
	  , anInstance     = __webpack_require__(69)
	  , isObject       = __webpack_require__(30)
	  , setToStringTag = __webpack_require__(60)
	  , dP             = __webpack_require__(28).f
	  , each           = __webpack_require__(78)(0)
	  , DESCRIPTORS    = __webpack_require__(32);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    C = wrapper(function(target, iterable){
	      anInstance(target, C, NAME, '_c');
	      target._c = new Base;
	      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
	        anInstance(this, C, KEY);
	        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    if('size' in proto)dP(C.prototype, 'size', {
	      get: function(){
	        return this._c.size;
	      }
	    });
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(25)
	  , IObject  = __webpack_require__(11)
	  , toObject = __webpack_require__(5)
	  , toLength = __webpack_require__(14)
	  , asc      = __webpack_require__(79);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(80);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(30)
	  , isArray  = __webpack_require__(81)
	  , SPECIES  = __webpack_require__(61)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(12);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(23);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(83)('Set')});

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(74)
	  , from    = __webpack_require__(84);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(70);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(86);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(87), __esModule: true };

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(88);
	var $Object = __webpack_require__(24).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(23);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(32), 'Object', {defineProperty: __webpack_require__(28).f});

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(90);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(91);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(94);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(92), __esModule: true };

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(50);
	__webpack_require__(62);
	module.exports = __webpack_require__(93).f('iterator');

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(61);

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(95), __esModule: true };

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(96);
	__webpack_require__(49);
	__webpack_require__(103);
	__webpack_require__(104);
	module.exports = __webpack_require__(24).Symbol;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(19)
	  , has            = __webpack_require__(9)
	  , DESCRIPTORS    = __webpack_require__(32)
	  , $export        = __webpack_require__(23)
	  , redefine       = __webpack_require__(54)
	  , META           = __webpack_require__(76).KEY
	  , $fails         = __webpack_require__(33)
	  , shared         = __webpack_require__(18)
	  , setToStringTag = __webpack_require__(60)
	  , uid            = __webpack_require__(20)
	  , wks            = __webpack_require__(61)
	  , wksExt         = __webpack_require__(93)
	  , wksDefine      = __webpack_require__(97)
	  , keyOf          = __webpack_require__(98)
	  , enumKeys       = __webpack_require__(99)
	  , isArray        = __webpack_require__(81)
	  , anObject       = __webpack_require__(29)
	  , toIObject      = __webpack_require__(10)
	  , toPrimitive    = __webpack_require__(35)
	  , createDesc     = __webpack_require__(36)
	  , _create        = __webpack_require__(57)
	  , gOPNExt        = __webpack_require__(101)
	  , $GOPD          = __webpack_require__(45)
	  , $DP            = __webpack_require__(28)
	  , $keys          = __webpack_require__(7)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(102).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(46).f  = $propertyIsEnumerable;
	  __webpack_require__(100).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(53)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(27)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(19)
	  , core           = __webpack_require__(24)
	  , LIBRARY        = __webpack_require__(53)
	  , wksExt         = __webpack_require__(93)
	  , defineProperty = __webpack_require__(28).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(7)
	  , toIObject = __webpack_require__(10);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(7)
	  , gOPS    = __webpack_require__(100)
	  , pIE     = __webpack_require__(46);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 100 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(10)
	  , gOPN      = __webpack_require__(102).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(8)
	  , hiddenKeys = __webpack_require__(21).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(97)('asyncIterator');

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(97)('observable');

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(106);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(110);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(90);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(107), __esModule: true };

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(108);
	module.exports = __webpack_require__(24).Object.setPrototypeOf;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(23);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(109).set});

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(30)
	  , anObject = __webpack_require__(29);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(25)(Function.call, __webpack_require__(45).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(111), __esModule: true };

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(112);
	var $Object = __webpack_require__(24).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(23)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(57)});

/***/ },
/* 113 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * JavaScript Interpreter
	 *
	 * Copyright 2013 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	/**
	 * @fileoverview Interpreting JavaScript in JavaScript.
	 * @author fraser@google.com (Neil Fraser)
	 */
	'use strict';
	
	/**
	 * Create a new interpreter.
	 * @param {string|!Object} code Raw JavaScript text or AST.
	 * @param {Function} opt_initFunc Optional initialization function.  Used to
	 *     define APIs.  When called it is passed the interpreter object and the
	 *     global scope object.
	 * @constructor
	 */
	
	/*istanbul ignore next*/Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _create = __webpack_require__(110);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _stringify = __webpack_require__(115);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _typeof2 = __webpack_require__(90);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _map = __webpack_require__(117);
	
	var _map2 = _interopRequireDefault(_map);
	
	var _classCallCheck2 = __webpack_require__(113);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(85);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var /*istanbul ignore next*/_acornEs = __webpack_require__(121);
	
	/*istanbul ignore next*/var acorn = _interopRequireWildcard(_acornEs);
	
	/*istanbul ignore next*/function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Interpreter = function () {
	  function /*istanbul ignore next*/Interpreter(code, opt_initFunc) {
	    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Interpreter);
	
	    if (typeof code == 'string') {
	      code = acorn.parse(code);
	    }
	    this.objectMap = new /*istanbul ignore next*/_map2.default();
	    this.ast = code;
	    this.initFunc_ = opt_initFunc;
	    this.paused_ = false;
	    // Predefine some common primitives for performance.
	    this.UNDEFINED = new Interpreter.Primitive(undefined, this);
	    this.NULL = new Interpreter.Primitive(null, this);
	    this.TRUE = new Interpreter.Primitive(true, this);
	    this.FALSE = new Interpreter.Primitive(false, this);
	    this.NUMBER_ZERO = new Interpreter.Primitive(0, this);
	    this.NUMBER_ONE = new Interpreter.Primitive(1, this);
	    this.STRING_EMPTY = new Interpreter.Primitive('', this);
	    var scope = this.createScope(this.ast, null);
	    // Fix the parent properties now that the global scope exists.
	    //this.UNDEFINED.parent = undefined;
	    //this.NULL.parent = undefined;
	    this.TRUE.parent = this.BOOLEAN;
	    this.FALSE.parent = this.BOOLEAN;
	    this.NUMBER_ZERO.parent = this.NUMBER;
	    this.NUMBER_ONE.parent = this.NUMBER;
	    this.STRING_EMPTY.parent = this.STRING;
	    this.stateStack = [{
	      node: this.ast,
	      scope: scope,
	      thisExpression: scope,
	      done: false
	    }];
	  }
	
	  /**
	   * Add more code to the interpreter.
	   * @param {string|!Object} code Raw JavaScript text or AST.
	   */
	
	
	  (0, _createClass3.default)(Interpreter, [{
	    key: 'appendCode',
	    value: function appendCode(code) {
	      var state = this.stateStack[this.stateStack.length - 1];
	      if (!state || state.node.type != 'Program') {
	        throw Error('Expecting original AST to start with a Program node.');
	      }
	      if (typeof code == 'string') {
	        code = acorn.parse(code);
	      }
	      if (!code || code.type != 'Program') {
	        throw Error('Expecting new AST to start with a Program node.');
	      }
	      // Append the new program to the old one.
	      for (var i = 0, node; node = code.body[i]; i++) {
	        state.node.body.push(node);
	      }
	      state.done = false;
	    }
	
	    /**
	     * Execute one step of the interpreter.
	     * @return {boolean} True if a step was executed, false if no more instructions.
	     */
	
	  }, {
	    key: 'step',
	    value: function step() {
	      var state = this.stateStack[0];
	      if (!state || state.node.type == 'Program' && state.done) {
	        return false;
	      } else if (this.paused_) {
	        return true;
	      }
	      this['step' + state.node.type]();
	      return true;
	    }
	
	    /**
	     * Execute the interpreter to program completion.  Vulnerable to infinite loops.
	     * @return {boolean} True if a execution is asynchonously blocked,
	     *     false if no more instructions.
	     */
	
	  }, {
	    key: 'run',
	    value: function run() {
	      while (!this.paused_ && this.step()) {}
	      return this.paused_;
	    }
	
	    /**
	     * Initialize the global scope with buitin properties and functions.
	     * @param {!Object} scope Global scope.
	     */
	
	  }, {
	    key: 'initGlobalScope',
	    value: function initGlobalScope(scope) {
	      // Initialize uneditable global properties.
	      this.setProperty(scope, 'Infinity', this.createPrimitive(Infinity), true);
	      this.setProperty(scope, 'NaN', this.createPrimitive(NaN), true);
	      this.setProperty(scope, 'undefined', this.UNDEFINED, true);
	      this.setProperty(scope, 'window', scope, true);
	      this.setProperty(scope, 'self', scope, false); // Editable.
	
	      // Initialize global objects.
	      this.initFunction(scope);
	      this.initObject(scope);
	      // Unable to set scope's parent prior (this.OBJECT did not exist).
	      scope.parent = this.OBJECT;
	      this.initArray(scope);
	      this.initNumber(scope);
	      this.initString(scope);
	      this.initBoolean(scope);
	      this.initDate(scope);
	      this.initMath(scope);
	      this.initRegExp(scope);
	      this.initJSON(scope);
	      this.initError(scope);
	
	      // Initialize global functions.
	      var thisInterpreter = this;
	      var wrapper;
	      wrapper = function /*istanbul ignore next*/wrapper(num) {
	        num = num || thisInterpreter.UNDEFINED;
	        return thisInterpreter.createPrimitive(isNaN(num.toNumber()));
	      };
	      this.setProperty(scope, 'isNaN', this.createNativeFunction(wrapper));
	      wrapper = function /*istanbul ignore next*/wrapper(num) {
	        num = num || thisInterpreter.UNDEFINED;
	        return thisInterpreter.createPrimitive(isFinite(num.toNumber()));
	      };
	      this.setProperty(scope, 'isFinite', this.createNativeFunction(wrapper));
	      wrapper = function /*istanbul ignore next*/wrapper(str) {
	        str = str || thisInterpreter.UNDEFINED;
	        return thisInterpreter.createPrimitive(parseFloat(str.toNumber()));
	      };
	      this.setProperty(scope, 'parseFloat', this.createNativeFunction(wrapper));
	      wrapper = function /*istanbul ignore next*/wrapper(str, radix) {
	        str = str || thisInterpreter.UNDEFINED;
	        radix = radix || thisInterpreter.UNDEFINED;
	        return thisInterpreter.createPrimitive(parseInt(str.toString(), radix.toNumber()));
	      };
	      this.setProperty(scope, 'parseInt', this.createNativeFunction(wrapper));
	
	      var func = this.createObject(this.FUNCTION);
	      func.eval = true;
	      this.setProperty(func, 'length', this.NUMBER_ONE, true);
	      this.setProperty(scope, 'eval', func);
	
	      var strFunctions = [[escape, 'escape'], [unescape, 'unescape'], [decodeURI, 'decodeURI'], [decodeURIComponent, 'decodeURIComponent'], [encodeURI, 'encodeURI'], [encodeURIComponent, 'encodeURIComponent']];
	      for (var i = 0; i < strFunctions.length; i++) {
	        wrapper = function (nativeFunc) {
	          return function (str) {
	            str = (str || thisInterpreter.UNDEFINED).toString();
	            try {
	              str = nativeFunc(str);
	            } catch (e) {
	              // decodeURI('%xy') will throw an error.  Catch and rethrow.
	              thisInterpreter.throwException(thisInterpreter.URI_ERROR, e.message);
	            }
	            return thisInterpreter.createPrimitive(str);
	          };
	        }(strFunctions[i][0]);
	        this.setProperty(scope, strFunctions[i][1], this.createNativeFunction(wrapper));
	      }
	
	      // Run any user-provided initialization.
	      if (this.initFunc_) {
	        this.initFunc_(this, scope);
	      }
	    }
	
	    /**
	     * Initialize the Function class.
	     * @param {!Object} scope Global scope.
	     */
	
	  }, {
	    key: 'initFunction',
	    value: function initFunction(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Function constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        if (this.parent == thisInterpreter.FUNCTION) {
	          // Called with new.
	          var newFunc = this;
	        } else {
	          var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
	        }
	        if (arguments.length) {
	          var code = arguments[arguments.length - 1].toString();
	        } else {
	          var code = '';
	        }
	        var args = [];
	        for (var i = 0; i < arguments.length - 1; i++) {
	          args.push(arguments[i].toString());
	        }
	        args = args.join(', ');
	        if (args.indexOf(')') != -1) {
	          throw SyntaxError('Function arg string contains parenthesis');
	        }
	        // Interestingly, the scope for constructed functions is the global scope,
	        // even if they were constructed in some other scope.
	        newFunc.parentScope = thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;
	        var ast = acorn.parse('$ = function(' + args + ') {' + code + '}');
	        newFunc.node = ast.body[0].expression.right;
	        thisInterpreter.setProperty(newFunc, 'length', thisInterpreter.createPrimitive(newFunc.node.length), true);
	        return newFunc;
	      };
	      this.FUNCTION = this.createObject(null);
	      this.setProperty(scope, 'Function', this.FUNCTION);
	      // Manually setup type and prototype because createObj doesn't recognize
	      // this object as a function (this.FUNCTION did not exist).
	      this.FUNCTION.type = 'function';
	      this.setProperty(this.FUNCTION, 'prototype', this.createObject(null));
	      this.FUNCTION.nativeFunc = wrapper;
	
	      // Create stub functions for apply and call.
	      // These are processed as special cases in stepCallExpression.
	      var node = {
	        type: 'FunctionApply_',
	        params: [],
	        id: null,
	        body: null,
	        start: 0,
	        end: 0
	      };
	      this.setProperty(this.FUNCTION.properties.prototype, 'apply', this.createFunction(node, {}), false, true);
	      node = {
	        type: 'FunctionCall_',
	        params: [],
	        id: null,
	        body: null,
	        start: 0,
	        end: 0
	      };
	      this.setProperty(this.FUNCTION.properties.prototype, 'call', this.createFunction(node, {}), false, true);
	
	      // Function has no parent to inherit from, so it needs its own mandatory
	      // toString and valueOf functions.
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        return thisInterpreter.createPrimitive(this.toString());
	      };
	      this.setProperty(this.FUNCTION.properties.prototype, 'toString', this.createNativeFunction(wrapper), false, true);
	      this.setProperty(this.FUNCTION, 'toString', this.createNativeFunction(wrapper), false, true);
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        return thisInterpreter.createPrimitive(this.valueOf());
	      };
	      this.setProperty(this.FUNCTION.properties.prototype, 'valueOf', this.createNativeFunction(wrapper), false, true);
	      this.setProperty(this.FUNCTION, 'valueOf', this.createNativeFunction(wrapper), false, true);
	    }
	
	    /**
	     * Initialize the Object class.
	     * @param {!Object} scope Global scope.
	     */
	
	  }, {
	    key: 'initObject',
	    value: function initObject(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Object constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        if (this.parent == thisInterpreter.OBJECT) {
	          // Called with new.
	          var newObj = this;
	        } else {
	          var newObj = thisInterpreter.createObject(thisInterpreter.OBJECT);
	        }
	        return newObj;
	      };
	      this.OBJECT = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'Object', this.OBJECT);
	
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        return thisInterpreter.createPrimitive(this.toString());
	      };
	      this.setProperty(this.OBJECT.properties.prototype, 'toString', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        return thisInterpreter.createPrimitive(this.valueOf());
	      };
	      this.setProperty(this.OBJECT.properties.prototype, 'valueOf', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(prop) {
	        prop = (prop || thisInterpreter.UNDEFINED).toString();
	        for (var key in this.properties) {
	          if (key == prop) {
	            return thisInterpreter.TRUE;
	          }
	        }
	        return thisInterpreter.FALSE;
	      };
	      this.setProperty(this.OBJECT.properties.prototype, 'hasOwnProperty', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(key) {
	        key = (key || thisInterpreter.UNDEFINED).toString();
	        return thisInterpreter.createPrimitive(!(key in this.nonenumerable));
	      };
	      this.setProperty(this.OBJECT.properties.prototype, 'propertyIsEnumerable', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(obj) {
	        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        var i = 0;
	        for (var key in obj.properties) {
	          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));
	          i++;
	        }
	        return pseudoList;
	      };
	      this.setProperty(this.OBJECT, 'getOwnPropertyNames', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(obj) {
	        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        var i = 0;
	        for (var key in obj.properties) {
	          if (key in obj.nonenumerable) {
	            continue;
	          }
	          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));
	          i++;
	        }
	        return pseudoList;
	      };
	      this.setProperty(this.OBJECT, 'keys', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(obj, prop, descriptor) {
	        prop = (prop || thisInterpreter.UNDEFINED).toString();
	        if (!(descriptor instanceof Interpreter.Object)) {
	          throw Error('Property description must be an object.');
	        }
	        return obj;
	      };
	      this.setProperty(this.OBJECT, 'defineProperty', this.createNativeFunction(wrapper), false, true);
	    }
	
	    /**
	     * Initialize the Array class.
	     * @param {!Object} scope Global scope.
	     */
	
	  }, {
	    key: 'initArray',
	    value: function initArray(scope) {
	      var thisInterpreter = this;
	      var getInt = function getInt(obj, def) {
	        // Return an integer, or the default.
	        var n = obj ? Math.floor(obj.toNumber()) : def;
	        if (isNaN(n)) {
	          n = def;
	        }
	        return n;
	      };
	      var strictComp = function strictComp(a, b) {
	        // Strict === comparison.
	        if (a.isPrimitive && b.isPrimitive) {
	          return a.data === b.data;
	        }
	        return a === b;
	      };
	      var wrapper;
	      // Array constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        if (this.parent == thisInterpreter.ARRAY) {
	          // Called with new.
	          var newArray = this;
	        } else {
	          var newArray = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        }
	        var first = arguments[0];
	        if (first && first.type == 'number') {
	          if (isNaN(thisInterpreter.arrayIndex(first))) {
	            thisInterpreter.throwException(thisInterpreter.RANGE_ERROR, 'Invalid array length');
	          }
	          newArray.length = first.data;
	        } else {
	          for (var i = 0; i < arguments.length; i++) {
	            newArray.properties[i] = arguments[i];
	          }
	          newArray.length = i;
	        }
	        return newArray;
	      };
	      this.ARRAY = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'Array', this.ARRAY);
	
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        if (this.length) {
	          var value = this.properties[this.length - 1];
	          delete this.properties[this.length - 1];
	          this.length--;
	        } else {
	          var value = thisInterpreter.UNDEFINED;
	        }
	        return value;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'pop', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        for (var i = 0; i < arguments.length; i++) {
	          this.properties[this.length] = arguments[i];
	          this.length++;
	        }
	        return thisInterpreter.createPrimitive(this.length);
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'push', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        if (this.length) {
	          var value = this.properties[0];
	          for (var i = 1; i < this.length; i++) {
	            this.properties[i - 1] = this.properties[i];
	          }
	          this.length--;
	          delete this.properties[this.length];
	        } else {
	          var value = thisInterpreter.UNDEFINED;
	        }
	        return value;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'shift', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        for (var i = this.length - 1; i >= 0; i--) {
	          this.properties[i + arguments.length] = this.properties[i];
	        }
	        this.length += arguments.length;
	        for (var i = 0; i < arguments.length; i++) {
	          this.properties[i] = arguments[i];
	        }
	        return thisInterpreter.createPrimitive(this.length);
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'unshift', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        for (var i = 0; i < this.length / 2; i++) {
	          var tmp = this.properties[this.length - i - 1];
	          this.properties[this.length - i - 1] = this.properties[i];
	          this.properties[i] = tmp;
	        }
	        return thisInterpreter.UNDEFINED;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'reverse', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(index, howmany, var_args) {
	        index = getInt(index, 0);
	        if (index < 0) {
	          index = Math.max(this.length + index, 0);
	        } else {
	          index = Math.min(index, this.length);
	        }
	        howmany = getInt(howmany, Infinity);
	        howmany = Math.min(howmany, this.length - index);
	        var removed = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        // Remove specified elements.
	        for (var i = index; i < index + howmany; i++) {
	          removed.properties[removed.length++] = this.properties[i];
	          this.properties[i] = this.properties[i + howmany];
	        }
	        // Move other element to fill the gap.
	        for (var i = index + howmany; i < this.length - howmany; i++) {
	          this.properties[i] = this.properties[i + howmany];
	        }
	        // Delete superfluous properties.
	        for (var i = this.length - howmany; i < this.length; i++) {
	          delete this.properties[i];
	        }
	        this.length -= howmany;
	        // Insert specified items.
	        for (var i = this.length - 1; i >= index; i--) {
	          this.properties[i + arguments.length - 2] = this.properties[i];
	        }
	        this.length += arguments.length - 2;
	        for (var i = 2; i < arguments.length; i++) {
	          this.properties[index + i - 2] = arguments[i];
	        }
	        return removed;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'splice', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(opt_begin, opt_end) {
	        var list = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        var begin = getInt(opt_begin, 0);
	        if (begin < 0) {
	          begin = this.length + begin;
	        }
	        begin = Math.max(0, Math.min(begin, this.length));
	        var end = getInt(opt_end, this.length);
	        if (end < 0) {
	          end = this.length + end;
	        }
	        end = Math.max(0, Math.min(end, this.length));
	        var length = 0;
	        for (var i = begin; i < end; i++) {
	          var element = thisInterpreter.getProperty(this, i);
	          thisInterpreter.setProperty(list, length++, element);
	        }
	        return list;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'slice', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(opt_separator) {
	        if (!opt_separator || opt_separator.data === undefined) {
	          var sep = undefined;
	        } else {
	          var sep = opt_separator.toString();
	        }
	        var text = [];
	        for (var i = 0; i < this.length; i++) {
	          text[i] = this.properties[i];
	        }
	        return thisInterpreter.createPrimitive(text.join(sep));
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'join', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        var list = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        var length = 0;
	        // Start by copying the current array.
	        for (var i = 0; i < this.length; i++) {
	          var element = thisInterpreter.getProperty(this, i);
	          thisInterpreter.setProperty(list, length++, element);
	        }
	        // Loop through all arguments and copy them in.
	        for (var i = 0; i < arguments.length; i++) {
	          var value = arguments[i];
	          if (thisInterpreter.isa(value, thisInterpreter.ARRAY)) {
	            for (var j = 0; j < value.length; j++) {
	              var element = thisInterpreter.getProperty(value, j);
	              thisInterpreter.setProperty(list, length++, element);
	            }
	          } else {
	            thisInterpreter.setProperty(list, length++, value);
	          }
	        }
	        return list;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'concat', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(searchElement, opt_fromIndex) {
	        searchElement = searchElement || thisInterpreter.UNDEFINED;
	        var fromIndex = getInt(opt_fromIndex, 0);
	        if (fromIndex < 0) {
	          fromIndex = this.length + fromIndex;
	        }
	        fromIndex = Math.max(0, fromIndex);
	        for (var i = fromIndex; i < this.length; i++) {
	          var element = thisInterpreter.getProperty(this, i);
	          if (strictComp(element, searchElement)) {
	            return thisInterpreter.createPrimitive(i);
	          }
	        }
	        return thisInterpreter.createPrimitive(-1);
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'indexOf', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(searchElement, opt_fromIndex) {
	        searchElement = searchElement || thisInterpreter.UNDEFINED;
	        var fromIndex = getInt(opt_fromIndex, this.length);
	        if (fromIndex < 0) {
	          fromIndex = this.length + fromIndex;
	        }
	        fromIndex = Math.min(fromIndex, this.length - 1);
	        for (var i = fromIndex; i >= 0; i--) {
	          var element = thisInterpreter.getProperty(this, i);
	          if (strictComp(element, searchElement)) {
	            return thisInterpreter.createPrimitive(i);
	          }
	        }
	        return thisInterpreter.createPrimitive(-1);
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'lastIndexOf', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(opt_compFunc) {
	        var jsList = [];
	        for (var i = 0; i < this.length; i++) {
	          jsList[i] = this.properties[i];
	        }
	        // TODO: Add custom sort comparison function(opt_compFunc).
	        jsList.sort();
	        for (var i = 0; i < jsList.length; i++) {
	          thisInterpreter.setProperty(this, i, jsList[i]);
	        }
	        return this;
	      };
	      this.setProperty(this.ARRAY.properties.prototype, 'sort', this.createNativeFunction(wrapper), false, true);
	    }
	  }, {
	    key: 'initNumber',
	
	
	    /**
	     * Initialize the Number class.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initNumber(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Number constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(value) {
	        value = value ? value.toNumber() : 0;
	        if (this.parent != thisInterpreter.NUMBER) {
	          // Called as Number().
	          return thisInterpreter.createPrimitive(value);
	        }
	        // Called as new Number().
	        this.data = value;
	        return this;
	      };
	      this.NUMBER = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'Number', this.NUMBER);
	
	      var numConsts = ['MAX_VALUE', 'MIN_VALUE', 'NaN', 'NEGATIVE_INFINITY', 'POSITIVE_INFINITY'];
	      for (var i = 0; i < numConsts.length; i++) {
	        this.setProperty(this.NUMBER, numConsts[i], this.createPrimitive(Number[numConsts[i]]));
	      }
	
	      wrapper = function /*istanbul ignore next*/wrapper(fractionDigits) {
	        fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;
	        var n = this.toNumber();
	        return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));
	      };
	      this.setProperty(this.NUMBER.properties.prototype, 'toExponential', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(digits) {
	        digits = digits ? digits.toNumber() : undefined;
	        var n = this.toNumber();
	        return thisInterpreter.createPrimitive(n.toFixed(digits));
	      };
	      this.setProperty(this.NUMBER.properties.prototype, 'toFixed', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(precision) {
	        precision = precision ? precision.toNumber() : undefined;
	        var n = this.toNumber();
	        return thisInterpreter.createPrimitive(n.toPrecision(precision));
	      };
	      this.setProperty(this.NUMBER.properties.prototype, 'toPrecision', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(radix) {
	        radix = radix ? radix.toNumber() : 10;
	        var n = this.toNumber();
	        return thisInterpreter.createPrimitive(n.toString(radix));
	      };
	      this.setProperty(this.NUMBER.properties.prototype, 'toString', this.createNativeFunction(wrapper), false, true);
	    }
	  }, {
	    key: 'initString',
	
	
	    /**
	     * Initialize the String class.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initString(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // String constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(value) {
	        value = value ? value.toString() : '';
	        if (this.parent != thisInterpreter.STRING) {
	          // Called as String().
	          return thisInterpreter.createPrimitive(value);
	        }
	        // Called as new String().
	        this.data = value;
	        return this;
	      };
	      this.STRING = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'String', this.STRING);
	
	      var functions = ['toLowerCase', 'toUpperCase', 'toLocaleLowerCase', 'toLocaleUpperCase'];
	      for (var i = 0; i < functions.length; i++) {
	        wrapper = function (nativeFunc) {
	          return function () {
	            return thisInterpreter.createPrimitive(nativeFunc.apply(this));
	          };
	        }(String.prototype[functions[i]]);
	        this.setProperty(this.STRING.properties.prototype, functions[i], this.createNativeFunction(wrapper), false, true);
	      }
	
	      // Trim function may not exist in host browser.  Write them from scratch.
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        var str = this.toString();
	        return thisInterpreter.createPrimitive(str.replace(/^\s+|\s+$/g, ''));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'trim', this.createNativeFunction(wrapper), false, true);
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        var str = this.toString();
	        return thisInterpreter.createPrimitive(str.replace(/^\s+/g, ''));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'trimLeft', this.createNativeFunction(wrapper), false, true);
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        var str = this.toString();
	        return thisInterpreter.createPrimitive(str.replace(/\s+$/g, ''));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'trimRight', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(num) {
	        var str = this.toString();
	        num = (num || thisInterpreter.UNDEFINED).toNumber();
	        return thisInterpreter.createPrimitive(str.charAt(num));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'charAt', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(num) {
	        var str = this.toString();
	        num = (num || thisInterpreter.UNDEFINED).toNumber();
	        return thisInterpreter.createPrimitive(str.charCodeAt(num));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'charCodeAt', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(searchValue, fromIndex) {
	        var str = this.toString();
	        searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();
	        fromIndex = fromIndex ? fromIndex.toNumber() : undefined;
	        return thisInterpreter.createPrimitive(str.indexOf(searchValue, fromIndex));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'indexOf', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(searchValue, fromIndex) {
	        var str = this.toString();
	        searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();
	        fromIndex = fromIndex ? fromIndex.toNumber() : undefined;
	        return thisInterpreter.createPrimitive(str.lastIndexOf(searchValue, fromIndex));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'lastIndexOf', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(compareString) {
	        var str = this.toString();
	        compareString = (compareString || thisInterpreter.UNDEFINED).toString();
	        return thisInterpreter.createPrimitive(str.localeCompare(compareString));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'localeCompare', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(separator, limit) {
	        var str = this.toString();
	        if (separator) {
	          separator = thisInterpreter.isa(separator, thisInterpreter.REGEXP) ? separator.data : separator.toString();
	        } else {
	          // is this really necessary?
	          separator = undefined;
	        }
	        limit = limit ? limit.toNumber() : undefined;
	        var jsList = str.split(separator, limit);
	        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        for (var i = 0; i < jsList.length; i++) {
	          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(jsList[i]));
	        }
	        return pseudoList;
	      };
	      this.setProperty(this.STRING.properties.prototype, 'split', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(indexA, indexB) {
	        var str = this.toString();
	        indexA = indexA ? indexA.toNumber() : undefined;
	        indexB = indexB ? indexB.toNumber() : undefined;
	        return thisInterpreter.createPrimitive(str.substring(indexA, indexB));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'substring', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(start, length) {
	        var str = this.toString();
	        start = start ? start.toNumber() : undefined;
	        length = length ? length.toNumber() : undefined;
	        return thisInterpreter.createPrimitive(str.substr(start, length));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'substr', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        var str = this.toString();
	        for (var i = 0; i < arguments.length; i++) {
	          str += arguments[i].toString();
	        }
	        return thisInterpreter.createPrimitive(str);
	      };
	      this.setProperty(this.STRING.properties.prototype, 'concat', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(beginSlice, endSlice) {
	        var str = this.toString();
	        beginSlice = beginSlice ? beginSlice.toNumber() : undefined;
	        endSlice = endSlice ? endSlice.toNumber() : undefined;
	        return thisInterpreter.createPrimitive(str.slice(beginSlice, endSlice));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'slice', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(regexp) {
	        var str = this.toString();
	        regexp = regexp ? regexp.data : undefined;
	        var match = str.match(regexp);
	        if (match === null) {
	          return thisInterpreter.NULL;
	        }
	        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
	        for (var i = 0; i < match.length; i++) {
	          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(match[i]));
	        }
	        return pseudoList;
	      };
	      this.setProperty(this.STRING.properties.prototype, 'match', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(regexp) {
	        var str = this.toString();
	        regexp = regexp ? regexp.data : undefined;
	        return thisInterpreter.createPrimitive(str.search(regexp));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'search', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(substr, newSubStr) {
	        var str = this.toString();
	        substr = (substr || thisInterpreter.UNDEFINED).valueOf();
	        newSubStr = (newSubStr || thisInterpreter.UNDEFINED).toString();
	        return thisInterpreter.createPrimitive(str.replace(substr, newSubStr));
	      };
	      this.setProperty(this.STRING.properties.prototype, 'replace', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
	        for (var i = 0; i < arguments.length; i++) {
	          arguments[i] = arguments[i].toNumber();
	        }
	        return thisInterpreter.createPrimitive(String.fromCharCode.apply(String, arguments));
	      };
	      this.setProperty(this.STRING, 'fromCharCode', this.createNativeFunction(wrapper), false, true);
	    }
	  }, {
	    key: 'initBoolean',
	
	
	    /**
	     * Initialize the Boolean class.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initBoolean(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Boolean constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(value) {
	        value = value ? value.toBoolean() : false;
	        if (this.parent != thisInterpreter.BOOLEAN) {
	          // Called as Boolean().
	          return thisInterpreter.createPrimitive(value);
	        }
	        // Called as new Boolean().
	        this.data = value;
	        return this;
	      };
	      this.BOOLEAN = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'Boolean', this.BOOLEAN);
	    }
	  }, {
	    key: 'initDate',
	
	
	    /**
	     * Initialize the Date class.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initDate(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Date constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(a, b, c, d, e, f, h) {
	        if (this.parent == thisInterpreter.DATE) {
	          // Called with new.
	          var newDate = this;
	        } else {
	          var newDate = thisInterpreter.createObject(thisInterpreter.DATE);
	        }
	        if (!arguments.length) {
	          newDate.data = new Date();
	        } else if (arguments.length == 1 && (a.type == 'string' || thisInterpreter.isa(a, thisInterpreter.STRING))) {
	          newDate.data = new Date(a.toString());
	        } else {
	          var args = [null];
	          for (var i = 0; i < arguments.length; i++) {
	            args[i + 1] = arguments[i] ? arguments[i].toNumber() : undefined;
	          }
	          newDate.data = new (Function.prototype.bind.apply(Date, args))();
	        }
	        return newDate;
	      };
	      this.DATE = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'Date', this.DATE);
	
	      // Static methods on Date.
	      wrapper = function /*istanbul ignore next*/wrapper() {
	        return thisInterpreter.createPrimitive(new Date().getTime());
	      };
	      this.setProperty(this.DATE, 'now', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(dateString) {
	        dateString = dateString ? dateString.toString() : undefined;
	        return thisInterpreter.createPrimitive(Date.parse(dateString));
	      };
	      this.setProperty(this.DATE, 'parse', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(a, b, c, d, e, f, h) {
	        var args = [];
	        for (var i = 0; i < arguments.length; i++) {
	          args[i] = arguments[i] ? arguments[i].toNumber() : undefined;
	        }
	        return thisInterpreter.createPrimitive(Date.UTC.apply(Date, args));
	      };
	      this.setProperty(this.DATE, 'UTC', this.createNativeFunction(wrapper), false, true);
	
	      // Getter methods.
	      var getFunctions = ['getDate', 'getDay', 'getFullYear', 'getHours', 'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime', 'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth', 'getUTCSeconds', 'getYear'];
	      for (var i = 0; i < getFunctions.length; i++) {
	        wrapper = function (nativeFunc) {
	          return function () {
	            return thisInterpreter.createPrimitive(this.data[nativeFunc]());
	          };
	        }(getFunctions[i]);
	        this.setProperty(this.DATE.properties.prototype, getFunctions[i], this.createNativeFunction(wrapper), false, true);
	      }
	
	      // Setter methods.
	      var setFunctions = ['setDate', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds', 'setYear'];
	      for (var i = 0; i < setFunctions.length; i++) {
	        wrapper = function (nativeFunc) {
	          return function (var_args) {
	            var args = [];
	            for (var i = 0; i < arguments.length; i++) {
	              args[i] = arguments[i] ? arguments[i].toNumber() : undefined;
	            }
	            return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data, args));
	          };
	        }(setFunctions[i]);
	        this.setProperty(this.DATE.properties.prototype, setFunctions[i], this.createNativeFunction(wrapper), false, true);
	      }
	
	      // Conversion getter methods.
	      getFunctions = ['toDateString', 'toISOString', 'toGMTString', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toTimeString', 'toUTCString'];
	      for (var i = 0; i < getFunctions.length; i++) {
	        wrapper = function (nativeFunc) {
	          return function () {
	            return thisInterpreter.createPrimitive(this.data[nativeFunc]());
	          };
	        }(getFunctions[i]);
	        this.setProperty(this.DATE.properties.prototype, getFunctions[i], this.createNativeFunction(wrapper), false, true);
	      }
	    }
	  }, {
	    key: 'initMath',
	
	
	    /**
	     * Initialize Math object.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initMath(scope) {
	      var thisInterpreter = this;
	      var myMath = this.createObject(this.OBJECT);
	      this.setProperty(scope, 'Math', myMath);
	      var mathConsts = ['E', 'LN2', 'LN10', 'LOG2E', 'LOG10E', 'PI', 'SQRT1_2', 'SQRT2'];
	      for (var i = 0; i < mathConsts.length; i++) {
	        this.setProperty(myMath, mathConsts[i], this.createPrimitive(Math[mathConsts[i]]), false, true);
	      }
	      var numFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'max', 'min', 'pow', 'random', 'round', 'sin', 'sqrt', 'tan'];
	      for (var i = 0; i < numFunctions.length; i++) {
	        var wrapper = function (nativeFunc) {
	          return function () {
	            for (var j = 0; j < arguments.length; j++) {
	              arguments[j] = arguments[j].toNumber();
	            }
	            return thisInterpreter.createPrimitive(nativeFunc.apply(Math, arguments));
	          };
	        }(Math[numFunctions[i]]);
	        this.setProperty(myMath, numFunctions[i], this.createNativeFunction(wrapper), false, true);
	      }
	    }
	  }, {
	    key: 'initRegExp',
	
	
	    /**
	     * Initialize Regular Expression object.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initRegExp(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Regex constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(pattern, flags) {
	        if (this.parent == thisInterpreter.REGEXP) {
	          // Called with new.
	          var rgx = this;
	        } else {
	          var rgx = thisInterpreter.createObject(thisInterpreter.REGEXP);
	        }
	        pattern = pattern ? pattern.toString() : '';
	        flags = flags ? flags.toString() : '';
	        thisInterpreter.createRegExp(rgx, new RegExp(pattern, flags));
	        return rgx;
	      };
	      this.REGEXP = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'RegExp', this.REGEXP);
	
	      wrapper = function /*istanbul ignore next*/wrapper(str) {
	        str = str.toString();
	        return thisInterpreter.createPrimitive(this.data.test(str));
	      };
	      this.setProperty(this.REGEXP.properties.prototype, 'test', this.createNativeFunction(wrapper), false, true);
	
	      wrapper = function /*istanbul ignore next*/wrapper(str) {
	        str = str.toString();
	        // Get lastIndex from wrapped regex, since this is settable.
	        this.data.lastIndex = thisInterpreter.getProperty(this, 'lastIndex').toNumber();
	        var match = this.data.exec(str);
	        thisInterpreter.setProperty(this, 'lastIndex', thisInterpreter.createPrimitive(this.data.lastIndex));
	
	        if (match) {
	          var result = thisInterpreter.createObject(thisInterpreter.ARRAY);
	          for (var i = 0; i < match.length; i++) {
	            thisInterpreter.setProperty(result, i, thisInterpreter.createPrimitive(match[i]));
	          }
	          // match has additional properties.
	          thisInterpreter.setProperty(result, 'index', thisInterpreter.createPrimitive(match.index));
	          thisInterpreter.setProperty(result, 'input', thisInterpreter.createPrimitive(match.input));
	          return result;
	        }
	        return thisInterpreter.NULL;
	      };
	      this.setProperty(this.REGEXP.properties.prototype, 'exec', this.createNativeFunction(wrapper), false, true);
	    }
	  }, {
	    key: 'createPseudoObject',
	
	
	    /**
	     * Converts from native JS value to a JS interpreter object.
	     * @param {*} nativeObj The native JS object to be converted.
	     * @return {!Object} The equivalent this.OBJECT.
	     */
	    value: function createPseudoObject(nativeObj) {
	      var pseudoObject = this.objectMap.get(nativeObj);
	      if (pseudoObject) {
	        return pseudoObject;
	      } else if (typeof nativeObj === 'function') {
	        pseudoObject = this.createNativeFunction(nativeObj);
	      } else if ( /*istanbul ignore next*/(typeof nativeObj === 'undefined' ? 'undefined' : (0, _typeof3.default)(nativeObj)) !== 'object') {
	        return this.createPrimitive(nativeObj);
	      } else if (nativeObj instanceof Array) {
	        // Array.
	        pseudoObject = this.createObject(this.ARRAY);
	        for (var i = 0; i < nativeObj.length; i++) {
	          this.setProperty(pseudoObject, i, this.createPseudoObject(nativeObj[i]));
	        }
	      } else {
	        // Object.
	        pseudoObject = this.createObject(this.OBJECT);
	        pseudoObject.isInitialized = false;
	      }
	      this.objectMap.set(nativeObj, pseudoObject);
	      pseudoObject.data = nativeObj;
	      return pseudoObject;
	    }
	
	    /**
	     * Initialize JSON object.
	     * @param {!Object} scope Global scope.
	     */
	
	  }, {
	    key: 'initJSON',
	    value: function initJSON(scope) {
	      var thisInterpreter = this;
	      var myJSON = thisInterpreter.createObject(this.OBJECT);
	      this.setProperty(scope, 'JSON', myJSON);
	
	      var wrapper = function (nativeFunc) {
	        return function () {
	          var arg = arguments[0].data;
	          var nativeObj = nativeFunc.call(JSON, arg);
	          return thisInterpreter.createPseudoObject(nativeObj);
	        };
	      }(JSON.parse);
	      this.setProperty(myJSON, 'parse', this.createNativeFunction(wrapper));
	
	      /**
	       * Converts from this.OBJECT object to native JS object.
	       * @param {!Object} obj The this.OBJECT object to be converted.
	       * @return {*} The equivalent native JS object or value.
	       */
	      function toNativeObject(obj) {
	        if (obj.isPrimitive) {
	          return obj.data;
	        }
	
	        var nativeObj;
	        if (obj.length) {
	          // Array.
	          nativeObj = [];
	          for (var i = 0; i < obj.length; i++) {
	            nativeObj[i] = toNativeObject(obj.properties[i]);
	          }
	        } else {
	          // Object.
	          nativeObj = {};
	          for (var key in obj.properties) {
	            nativeObj[key] = toNativeObject(obj.properties[key]);
	          }
	        }
	
	        return nativeObj;
	      }
	
	      wrapper = function (nativeFunc) {
	        return function () {
	          var arg = toNativeObject(arguments[0]);
	          return thisInterpreter.createPrimitive(nativeFunc.call(JSON, arg));
	        };
	      }( /*istanbul ignore next*/_stringify2.default);
	      this.setProperty(myJSON, 'stringify', this.createNativeFunction(wrapper));
	    }
	  }, {
	    key: 'initError',
	
	
	    /**
	     * Initialize the Error class.
	     * @param {!Object} scope Global scope.
	     */
	    value: function initError(scope) {
	      var thisInterpreter = this;
	      var wrapper;
	      // Error constructor.
	      wrapper = function /*istanbul ignore next*/wrapper(opt_message) {
	        if (this.parent == thisInterpreter.ERROR) {
	          // Called with new.
	          var newError = this;
	        } else {
	          var newError = thisInterpreter.createObject(thisInterpreter.ERROR);
	        }
	        if (opt_message) {
	          thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), false, true);
	        }
	        return newError;
	      };
	      this.ERROR = this.createNativeFunction(wrapper);
	      this.setProperty(scope, 'Error', this.ERROR);
	      this.setProperty(this.ERROR.properties.prototype, 'message', this.STRING_EMPTY, false, true);
	      this.setProperty(this.ERROR.properties.prototype, 'name', this.createPrimitive('Error'), false, true);
	
	      // Create half a dozen error subclasses.
	      var errors = {
	        EVAL_ERROR: 'EvalError',
	        RANGE_ERROR: 'RangeError',
	        REFERENCE_ERROR: 'ReferenceError',
	        SYNTAX_ERROR: 'SyntaxError',
	        TYPE_ERROR: 'TypeError',
	        URI_ERROR: 'URIError'
	      };
	      for (var constName in errors) {
	        var errorName = errors[constName];
	        //EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError
	        wrapper = function /*istanbul ignore next*/wrapper(name) {
	          return function (opt_message) {
	            if (thisInterpreter.isa(this.parent, thisInterpreter.ERROR)) {
	              // Called with new.
	              var newError = this;
	            } else {
	              var newError = thisInterpreter.createObject(thisInterpreter[name]);
	            }
	            if (opt_message) {
	              thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), false, true);
	            }
	            return newError;
	          };
	        };
	        this[constName] = this.createNativeFunction(wrapper(constName));
	        this.setProperty(this[constName], 'prototype', this.createObject(this.ERROR));
	        this.setProperty(this[constName].properties.prototype, 'name', this.createPrimitive(errorName), false, true);
	        this.setProperty(scope, errorName, this[constName]);
	      }
	    }
	  }, {
	    key: 'isa',
	
	
	    /**
	     * Is an object of a certain class?
	     * @param {Object} child Object to check.
	     * @param {Object} parent Constructor of object.
	     * @return {boolean} True if object is the class or inherits from it.
	     *     False otherwise.
	     */
	    value: function isa(child, parent) {
	      if (!child || !parent) {
	        return false;
	      }
	      while (child.parent != parent) {
	        if (!child.parent || !child.parent.properties.prototype) {
	          return false;
	        }
	        child = child.parent.properties.prototype;
	      }
	      return true;
	    }
	  }, {
	    key: 'comp',
	
	
	    /**
	     * Compares two objects against each other.
	     * @param {!Object} a First object.
	     * @param {!Object} b Second object.
	     * @return {number} -1 if a is smaller, 0 if a == b, 1 if a is bigger,
	     *     NaN if they are not comparable.
	     */
	    value: function comp(a, b) {
	      if (a.isPrimitive && typeof a == 'number' && isNaN(a.data) || b.isPrimitive && typeof b == 'number' && isNaN(b.data)) {
	        return NaN;
	      }
	      if (a.isPrimitive && b.isPrimitive) {
	        a = a.data;
	        b = b.data;
	      } else {
	        // TODO: Handle other types.
	        return NaN;
	      }
	      if (a < b) {
	        return -1;
	      } else if (a > b) {
	        return 1;
	      }
	      return 0;
	    }
	  }, {
	    key: 'arrayIndex',
	
	
	    /**
	     * Is a value a legal integer for an array?
	     * @param {*} n Value to check.
	     * @return {number} Zero, or a positive integer if the value can be
	     *     converted to such.  NaN otherwise.
	     */
	    value: function arrayIndex(n) {
	      n = Number(n);
	      if (!isFinite(n) || n != Math.floor(n) || n < 0) {
	        return NaN;
	      }
	      return n;
	    }
	  }, {
	    key: 'createPrimitive',
	
	
	    /**
	     * Create a new data object for a primitive.
	     * @param {number|string|boolean|null|undefined|RegExp} data Data to
	     *     encapsulate.
	     * @return {!Object} New data object.
	     */
	    value: function createPrimitive(data) {
	      // Reuse a predefined primitive constant if possible.
	      if (data === undefined) {
	        return this.UNDEFINED;
	      } else if (data === null) {
	        return this.NULL;
	      } else if (data === true) {
	        return this.TRUE;
	      } else if (data === false) {
	        return this.FALSE;
	      } else if (data === 0) {
	        return this.NUMBER_ZERO;
	      } else if (data === 1) {
	        return this.NUMBER_ONE;
	      } else if (data === '') {
	        return this.STRING_EMPTY;
	      } else if (data instanceof RegExp) {
	        return this.createRegExp(this.createObject(this.REGEXP), data);
	      }
	      return new Interpreter.Primitive(data, this);
	    }
	  }, {
	    key: 'createObject',
	
	
	    /**
	     * Create a new data object.
	     * @param {Object} parent Parent constructor function.
	     * @return {!Object} New data object.
	     */
	    value: function createObject(parent) {
	      var obj = new Interpreter.Object(parent);
	      // Functions have prototype objects.
	      if (this.isa(obj, this.FUNCTION)) {
	        obj.type = 'function';
	        this.setProperty(obj, 'prototype', this.createObject(this.OBJECT || null));
	      }
	      // Arrays have length.
	      if (this.isa(obj, this.ARRAY)) {
	        obj.length = 0;
	        obj.toString = function () {
	          var strs = [];
	          for (var i = 0; i < this.length; i++) {
	            strs[i] = this.properties[i] == undefined || this.properties[i] == null ? '' : this.properties[i].toString();
	          }
	          return strs.join(',');
	        };
	      }
	      return obj;
	    }
	  }, {
	    key: 'createRegExp',
	
	
	    /**
	     * Creates a new regular expression object.
	     * @param {Object} obj The existing object to set.
	     * @param {Object} data The native regular expression.
	     * @return {!Object} New regular expression object.
	     */
	    value: function createRegExp(obj, data) {
	      obj.data = data;
	      // lastIndex is settable, all others are read-only attributes
	      this.setProperty(obj, 'lastIndex', this.createPrimitive(obj.data.lastIndex), false, true);
	      this.setProperty(obj, 'source', this.createPrimitive(obj.data.source), true, true);
	      this.setProperty(obj, 'global', this.createPrimitive(obj.data.global), true, true);
	      this.setProperty(obj, 'ignoreCase', this.createPrimitive(obj.data.ignoreCase), true, true);
	      this.setProperty(obj, 'multiline', this.createPrimitive(obj.data.multiline), true, true);
	      // Override a couple of Object's conversion functions.
	      obj.toString = function () {
	        return String(this.data);
	      };
	      obj.valueOf = function () {
	        return this.data;
	      };
	      return obj;
	    }
	  }, {
	    key: 'createFunction',
	
	
	    /**
	     * Create a new function.
	     * @param {Object} node AST node defining the function.
	     * @param {Object} opt_scope Optional parent scope.
	     * @return {!Object} New function.
	     */
	    value: function createFunction(node, opt_scope) {
	      var func = this.createObject(this.FUNCTION);
	      func.parentScope = opt_scope || this.getScope();
	      func.node = node;
	      this.setProperty(func, 'length', this.createPrimitive(func.node.params.length), true);
	      return func;
	    }
	  }, {
	    key: 'createNativeFunction',
	
	
	    /**
	     * Create a new native function.
	     * @param {!Function} nativeFunc JavaScript function.
	     * @return {!Object} New function.
	     */
	    value: function createNativeFunction(nativeFunc) {
	      var func = this.createObject(this.FUNCTION);
	      func.nativeFunc = nativeFunc;
	      this.setProperty(func, 'length', this.createPrimitive(nativeFunc.length), true);
	      return func;
	    }
	  }, {
	    key: 'createAsyncFunction',
	
	
	    /**
	     * Create a new native asynchronous function.
	     * @param {!Function} asyncFunc JavaScript function.
	     * @return {!Object} New function.
	     */
	    value: function createAsyncFunction(asyncFunc) {
	      var func = this.createObject(this.FUNCTION);
	      func.asyncFunc = asyncFunc;
	      this.setProperty(func, 'length', this.createPrimitive(asyncFunc.length), true);
	      return func;
	    }
	  }, {
	    key: 'getProperty',
	
	
	    /**
	     * Fetch a property value from a data object.
	     * @param {!Object} obj Data object.
	     * @param {*} name Name of property.
	     * @return {!Object} Property value (may be UNDEFINED).
	     */
	    value: function getProperty(obj, name) {
	      name = name.toString();
	      if (obj == this.UNDEFINED || obj == this.NULL) {
	        this.throwException(this.TYPE_ERROR, "Cannot read property '" + name + "' of " + obj);
	      }
	      // Special cases for magic length property.
	      if (this.isa(obj, this.STRING)) {
	        if (name == 'length') {
	          return this.createPrimitive(obj.data.length);
	        }
	        var n = this.arrayIndex(name);
	        if (!isNaN(n) && n < obj.data.length) {
	          return this.createPrimitive(obj.data[n]);
	        }
	      } else if (this.isa(obj, this.ARRAY) && name == 'length') {
	        return this.createPrimitive(obj.length);
	      }
	      while (true) {
	        if (obj.isInitialized === false) {
	          // lazy wrapping
	          var nativeObject = obj.data;
	          for (var key in nativeObject) {
	            this.setProperty(obj, key, this.createPseudoObject(nativeObject[key]));
	          }
	          obj.isInitialized = true;
	        }
	        if (obj.properties && name in obj.properties) {
	          return obj.properties[name];
	        }
	        if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
	          obj = obj.parent.properties.prototype;
	        } else {
	          // No parent, reached the top.
	          break;
	        }
	      }
	      return this.UNDEFINED;
	    }
	  }, {
	    key: 'hasProperty',
	
	
	    /**
	     * Does the named property exist on a data object.
	     * @param {!Object} obj Data object.
	     * @param {*} name Name of property.
	     * @return {boolean} True if property exists.
	     */
	    value: function hasProperty(obj, name) {
	      name = name.toString();
	      if (obj.isPrimitive) {
	        throw TypeError('Primitive data type has no properties');
	      }
	      if (name == 'length' && (this.isa(obj, this.STRING) || this.isa(obj, this.ARRAY))) {
	        return true;
	      }
	      if (this.isa(obj, this.STRING)) {
	        var n = this.arrayIndex(name);
	        if (!isNaN(n) && n < obj.data.length) {
	          return true;
	        }
	      }
	      while (true) {
	        if (obj.properties && name in obj.properties) {
	          return true;
	        }
	        if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
	          obj = obj.parent.properties.prototype;
	        } else {
	          // No parent, reached the top.
	          break;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: 'setProperty',
	
	
	    /**
	     * Set a property value on a data object.
	     * @param {!Object} obj Data object.
	     * @param {*} name Name of property.
	     * @param {!Object} value New property value.
	     * @param {boolean} opt_fixed Unchangeable property if true.
	     * @param {boolean} opt_nonenum Non-enumerable property if true.
	     */
	    value: function setProperty(obj, name, value, opt_fixed, opt_nonenum) {
	      name = name.toString();
	      if ( /*istanbul ignore next*/(typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) != 'object') {
	        throw Error('Failure to wrap a value: ' + value);
	      }
	      if (obj == this.UNDEFINED || obj == this.NULL) {
	        this.throwException(this.TYPE_ERROR, "Cannot set property '" + name + "' of " + obj);
	      }
	      if (obj.isPrimitive || obj.fixed[name]) {
	        return;
	      }
	      if (this.isa(obj, this.STRING)) {
	        var n = this.arrayIndex(name);
	        if (name == 'length' || !isNaN(n) && n < obj.data.length) {
	          // Can't set length or letters on Strings.
	          return;
	        }
	      }
	      if (this.isa(obj, this.ARRAY)) {
	        // Arrays have a magic length variable that is bound to the elements.
	        var i;
	        if (name == 'length') {
	          // Delete elements if length is smaller.
	          var newLength = this.arrayIndex(value.toNumber());
	          if (isNaN(newLength)) {
	            this.throwException(this.RANGE_ERROR, 'Invalid array length');
	          }
	          if (newLength < obj.length) {
	            for (i in obj.properties) {
	              i = this.arrayIndex(i);
	              if (!isNaN(i) && newLength <= i) {
	                delete obj.properties[i];
	              }
	            }
	          }
	          obj.length = newLength;
	          return; // Don't set a real length property.
	        } else if (!isNaN(i = this.arrayIndex(name))) {
	          // Increase length if this index is larger.
	          obj.length = Math.max(obj.length, i + 1);
	        }
	      }
	      // Set the property.
	      obj.properties[name] = value;
	      if (opt_fixed) {
	        obj.fixed[name] = true;
	      }
	      if (opt_nonenum) {
	        obj.nonenumerable[name] = true;
	      }
	    }
	  }, {
	    key: 'deleteProperty',
	
	
	    /**
	     * Delete a property value on a data object.
	     * @param {!Object} obj Data object.
	     * @param {*} name Name of property.
	     * @return {boolean} True if deleted, false if undeletable.
	     */
	    value: function deleteProperty(obj, name) {
	      name = name.toString();
	      if (obj.isPrimitive || obj.fixed[name]) {
	        return false;
	      }
	      if (name == 'length' && this.isa(obj, this.ARRAY)) {
	        return false;
	      }
	      return delete obj.properties[name];
	    }
	  }, {
	    key: 'getScope',
	
	
	    /**
	     * Returns the current scope from the stateStack.
	     * @return {!Object} Current scope dictionary.
	     */
	    value: function getScope() {
	      for (var i = 0; i < this.stateStack.length; i++) {
	        if (this.stateStack[i].scope) {
	          return this.stateStack[i].scope;
	        }
	      }
	      throw Error('No scope found.');
	    }
	  }, {
	    key: 'createScope',
	
	
	    /**
	     * Create a new scope dictionary.
	     * @param {!Object} node AST node defining the scope container
	     *     (e.g. a function).
	     * @param {Object} parentScope Scope to link to.
	     * @return {!Object} New scope.
	     */
	    value: function createScope(node, parentScope) {
	      var scope = this.createObject(null);
	      scope.parentScope = parentScope;
	      if (!parentScope) {
	        this.initGlobalScope(scope);
	      }
	      this.populateScope_(node, scope);
	
	      // Determine if this scope starts with 'use strict'.
	      scope.strict = false;
	      if (parentScope && parentScope.strict) {
	        scope.strict = true;
	      } else {
	        var firstNode = node.body && node.body[0];
	        if (firstNode && firstNode.expression && firstNode.expression.type == 'Literal' && firstNode.expression.value == 'use strict') {
	          scope.strict = true;
	        }
	      }
	      return scope;
	    }
	  }, {
	    key: 'createSpecialScope',
	
	
	    /**
	     * Create a new special scope dictionary. Similar to createScope(), but
	     * doesn't assume that the scope is for a function body. This is used for
	     * the catch clause and with statement.
	     * @param {!Object} parentScope Scope to link to.
	     * @param {Object=} opt_scope Optional object to transform into scope.
	     * @return {!Object} New scope.
	     */
	    value: function createSpecialScope(parentScope, opt_scope) {
	      if (!parentScope) {
	        throw Error('parentScope required');
	      }
	      var scope = opt_scope || this.createObject(null);
	      scope.parentScope = parentScope;
	      scope.strict = parentScope.strict;
	      return scope;
	    }
	  }, {
	    key: 'getValueFromScope',
	
	
	    /**
	     * Retrieves a value from the scope chain.
	     * @param {!Object} name Name of variable.
	     * @return {!Object} The value.
	     */
	    value: function getValueFromScope(name) {
	      var scope = this.getScope();
	      var nameStr = name.toString();
	      while (scope) {
	        if (nameStr in scope.properties) {
	          return scope.properties[nameStr];
	        }
	        scope = scope.parentScope;
	      }
	      /**
	       * Lazy lookup for global variables
	       */
	      // TODO: support other js environments like service worker and node by checking what the global scope is
	      if (nameStr in window) {
	        return this.createPseudoObject(window[nameStr]);
	      }
	      console.log(nameStr, this);
	      this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');
	      return this.UNDEFINED;
	    }
	  }, {
	    key: 'setValueToScope',
	
	
	    /**
	     * Sets a value to the current scope.
	     * @param {!Object} name Name of variable.
	     * @param {!Object} value Value.
	     */
	    value: function setValueToScope(name, value) {
	      var scope = this.getScope();
	      var strict = scope.strict;
	      var nameStr = name.toString();
	      while (scope) {
	        if (nameStr in scope.properties || !strict && !scope.parentScope) {
	          if (!scope.fixed[nameStr]) {
	            scope.properties[nameStr] = value;
	          }
	          return;
	        }
	        scope = scope.parentScope;
	      }
	      this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');
	    }
	  }, {
	    key: 'populateScope_',
	
	
	    /**
	     * Create a new scope for the given node.
	     * @param {!Object} node AST node (program or function).
	     * @param {!Object} scope Scope dictionary to populate.
	     * @private
	     */
	    value: function populateScope_(node, scope) {
	      if (node.type == 'VariableDeclaration') {
	        for (var i = 0; i < node.declarations.length; i++) {
	          this.setProperty(scope, node.declarations[i].id.name, this.UNDEFINED);
	        }
	      } else if (node.type == 'FunctionDeclaration') {
	        this.setProperty(scope, node.id.name, this.createFunction(node, scope));
	        return; // Do not recurse into function.
	      } else if (node.type == 'FunctionExpression') {
	        return; // Do not recurse into function.
	      }
	      var thisIterpreter = this;
	      function recurse(child) {
	        if (child.constructor == thisIterpreter.ast.constructor) {
	          thisIterpreter.populateScope_(child, scope);
	        }
	      }
	      for (var name in node) {
	        var prop = node[name];
	        if (prop && /*istanbul ignore next*/(typeof prop === 'undefined' ? 'undefined' : (0, _typeof3.default)(prop)) == 'object') {
	          if (typeof prop.length == 'number' && prop.splice) {
	            // Prop is an array.
	            for (var i = 0; i < prop.length; i++) {
	              recurse(prop[i]);
	            }
	          } else {
	            recurse(prop);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'getValue',
	
	
	    /**
	     * Gets a value from the scope chain or from an object property.
	     * @param {!Object|!Array} left Name of variable or object/propname tuple.
	     * @return {!Object} Value.
	     */
	    value: function getValue(left) {
	      if (left.length) {
	        var obj = left[0];
	        var prop = left[1];
	        return this.getProperty(obj, prop);
	      } else {
	        return this.getValueFromScope(left);
	      }
	    }
	  }, {
	    key: 'setValue',
	
	
	    /**
	     * Sets a value to the scope chain or to an object property.
	     * @param {!Object|!Array} left Name of variable or object/propname tuple.
	     * @param {!Object} value Value.
	     */
	    value: function setValue(left, value) {
	      if (left.length) {
	        var obj = left[0];
	        var prop = left[1];
	        this.setProperty(obj, prop, value);
	      } else {
	        this.setValueToScope(left, value);
	      }
	    }
	  }, {
	    key: 'throwException',
	
	
	    /**
	     * Throw an exception in the interpreter that can be handled by a
	     * interpreter try/catch statement.  If unhandled, a real exception will
	     * be thrown.  Can be called with either an error class and a message, or
	     * with an actual object to be thrown.
	     * @param {!Object} errorClass Type of error (if message is provided) or the
	     *   value to throw (if no message).
	     * @param {string} opt_message Message being thrown.
	     */
	    value: function throwException(errorClass, opt_message) {
	      if (this.stateStack[0].interpreter) {
	        // This is the wrong interpreter, we are spinning on an eval.
	        try {
	          this.stateStack[0].interpreter.throwException(errorClass, opt_message);
	          return;
	        } catch (e) {
	          // The eval threw an error and did not catch it.
	          // Continue to see if this level can catch it.
	        }
	      }
	      if (opt_message === undefined) {
	        var error = errorClass;
	      } else {
	        var error = this.createObject(errorClass);
	        this.setProperty(error, 'message', this.createPrimitive(opt_message), false, true);
	      }
	      // Search for a try statement.
	      do {
	        var state = this.stateStack.shift();
	      } while (state && state.node.type !== 'TryStatement');
	      if (state) {
	        // Error is being trapped.
	        this.stateStack.unshift({
	          node: state.node.handler,
	          throwValue: error
	        });
	      } else {
	        // Throw a real error.
	        var realError;
	        if (this.isa(error, this.ERROR)) {
	          var errorTable = {
	            'EvalError': EvalError,
	            'RangeError': RangeError,
	            'ReferenceError': ReferenceError,
	            'SyntaxError': SyntaxError,
	            'TypeError': TypeError,
	            'URIError': URIError
	          };
	          var type = errorTable[this.getProperty(error, 'name')] || Error;
	          realError = type(this.getProperty(error, 'message'));
	        } else {
	          realError = error.toString();
	        }
	        throw realError;
	      }
	    }
	  }, {
	    key: 'stepArrayExpression',
	
	
	    // Functions to handle each node type.
	
	    value: function stepArrayExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      var n = state.n || 0;
	      if (!state.array) {
	        state.array = this.createObject(this.ARRAY);
	      } else {
	        this.setProperty(state.array, n - 1, state.value);
	      }
	      if (node.elements[n]) {
	        state.n = n + 1;
	        this.stateStack.unshift({ node: node.elements[n] });
	      } else {
	        state.array.length = state.n || 0;
	        this.stateStack.shift();
	        this.stateStack[0].value = state.array;
	      }
	    }
	  }, {
	    key: 'stepAssignmentExpression',
	    value: function stepAssignmentExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneLeft) {
	        state.doneLeft = true;
	        this.stateStack.unshift({ node: node.left, components: true });
	      } else if (!state.doneRight) {
	        state.doneRight = true;
	        state.leftSide = state.value;
	        this.stateStack.unshift({ node: node.right });
	      } else {
	        this.stateStack.shift();
	        var leftSide = state.leftSide;
	        var rightSide = state.value;
	        var value;
	        if (node.operator == '=') {
	          value = rightSide;
	        } else {
	          var leftValue = this.getValue(leftSide);
	          var rightValue = rightSide;
	          var leftNumber = leftValue.toNumber();
	          var rightNumber = rightValue.toNumber();
	          if (node.operator == '+=') {
	            var left, right;
	            if (leftValue.type == 'string' || rightValue.type == 'string') {
	              left = leftValue.toString();
	              right = rightValue.toString();
	            } else {
	              left = leftNumber;
	              right = rightNumber;
	            }
	            value = left + right;
	          } else if (node.operator == '-=') {
	            value = leftNumber - rightNumber;
	          } else if (node.operator == '*=') {
	            value = leftNumber * rightNumber;
	          } else if (node.operator == '/=') {
	            value = leftNumber / rightNumber;
	          } else if (node.operator == '%=') {
	            value = leftNumber % rightNumber;
	          } else if (node.operator == '<<=') {
	            value = leftNumber << rightNumber;
	          } else if (node.operator == '>>=') {
	            value = leftNumber >> rightNumber;
	          } else if (node.operator == '>>>=') {
	            value = leftNumber >>> rightNumber;
	          } else if (node.operator == '&=') {
	            value = leftNumber & rightNumber;
	          } else if (node.operator == '^=') {
	            value = leftNumber ^ rightNumber;
	          } else if (node.operator == '|=') {
	            value = leftNumber | rightNumber;
	          } else {
	            throw SyntaxError('Unknown assignment expression: ' + node.operator);
	          }
	          value = this.createPrimitive(value);
	        }
	        this.setValue(leftSide, value);
	        this.stateStack[0].value = value;
	      }
	    }
	  }, {
	    key: 'stepBinaryExpression',
	    value: function stepBinaryExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneLeft) {
	        state.doneLeft = true;
	        this.stateStack.unshift({ node: node.left });
	      } else if (!state.doneRight) {
	        state.doneRight = true;
	        state.leftValue = state.value;
	        this.stateStack.unshift({ node: node.right });
	      } else {
	        this.stateStack.shift();
	        var leftSide = state.leftValue;
	        var rightSide = state.value;
	        var value;
	        var comp = this.comp(leftSide, rightSide);
	        if (node.operator == '==' || node.operator == '!=') {
	          if (leftSide.isPrimitive && rightSide.isPrimitive) {
	            value = leftSide.data == rightSide.data;
	          } else {
	            value = comp === 0;
	          }
	          if (node.operator == '!=') {
	            value = !value;
	          }
	        } else if (node.operator == '===' || node.operator == '!==') {
	          if (leftSide.isPrimitive && rightSide.isPrimitive) {
	            value = leftSide.data === rightSide.data;
	          } else {
	            value = leftSide === rightSide;
	          }
	          if (node.operator == '!==') {
	            value = !value;
	          }
	        } else if (node.operator == '>') {
	          value = comp == 1;
	        } else if (node.operator == '>=') {
	          value = comp == 1 || comp === 0;
	        } else if (node.operator == '<') {
	          value = comp == -1;
	        } else if (node.operator == '<=') {
	          value = comp == -1 || comp === 0;
	        } else if (node.operator == '+') {
	          if (leftSide.type == 'string' || rightSide.type == 'string') {
	            var leftValue = leftSide.toString();
	            var rightValue = rightSide.toString();
	          } else {
	            var leftValue = leftSide.toNumber();
	            var rightValue = rightSide.toNumber();
	          }
	          value = leftValue + rightValue;
	        } else if (node.operator == 'in') {
	          value = this.hasProperty(rightSide, leftSide);
	        } else if (node.operator == 'instanceof') {
	          if (!this.isa(rightSide, this.FUNCTION)) {
	            this.throwException(this.TYPE_ERROR, 'Expecting a function in instanceof check');
	          }
	          value = this.isa(leftSide, rightSide);
	        } else {
	          var leftValue = leftSide.toNumber();
	          var rightValue = rightSide.toNumber();
	          if (node.operator == '-') {
	            value = leftValue - rightValue;
	          } else if (node.operator == '*') {
	            value = leftValue * rightValue;
	          } else if (node.operator == '/') {
	            value = leftValue / rightValue;
	          } else if (node.operator == '%') {
	            value = leftValue % rightValue;
	          } else if (node.operator == '&') {
	            value = leftValue & rightValue;
	          } else if (node.operator == '|') {
	            value = leftValue | rightValue;
	          } else if (node.operator == '^') {
	            value = leftValue ^ rightValue;
	          } else if (node.operator == '<<') {
	            value = leftValue << rightValue;
	          } else if (node.operator == '>>') {
	            value = leftValue >> rightValue;
	          } else if (node.operator == '>>>') {
	            value = leftValue >>> rightValue;
	          } else {
	            throw SyntaxError('Unknown binary operator: ' + node.operator);
	          }
	        }
	        this.stateStack[0].value = this.createPrimitive(value);
	      }
	    }
	  }, {
	    key: 'stepBlockStatement',
	    value: function stepBlockStatement() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      var n = state.n_ || 0;
	      if (node.body[n]) {
	        state.done = false;
	        state.n_ = n + 1;
	        this.stateStack.unshift({ node: node.body[n] });
	      } else {
	        state.done = true;
	        if (state.node.type != 'Program') {
	          // Leave the root scope on the tree in case the program is appended to.
	          this.stateStack.shift();
	        }
	      }
	    }
	  }, {
	    key: 'stepBreakStatement',
	    value: function stepBreakStatement() {
	      var state = this.stateStack.shift();
	      var node = state.node;
	      var label = null;
	      if (node.label) {
	        label = node.label.name;
	      }
	      state = this.stateStack.shift();
	      while (state && state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
	        if (label ? label == state.label : state.isLoop || state.isSwitch) {
	          return;
	        }
	        state = this.stateStack.shift();
	      }
	      // Syntax error, do not allow this error to be trapped.
	      throw SyntaxError('Illegal break statement');
	    }
	  }, {
	    key: 'stepCallExpression',
	    value: function stepCallExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneCallee_) {
	        state.doneCallee_ = true;
	        this.stateStack.unshift({ node: node.callee, components: true });
	      } else {
	        if (!state.func_) {
	          // Determine value of the function.
	          if (state.value.type == 'function') {
	            state.func_ = state.value;
	          } else {
	            if (state.value.length) {
	              state.member_ = state.value[0];
	            }
	            state.func_ = this.getValue(state.value);
	            if (!state.func_ || state.func_.type != 'function') {
	              this.throwException(this.TYPE_ERROR, (state.value && state.value.type) + ' is not a function');
	              return;
	            }
	          }
	          // Determine value of 'this' in function.
	          if (state.node.type == 'NewExpression') {
	            state.funcThis_ = this.createObject(state.func_);
	            state.isConstructor_ = true;
	          } else if (state.value.length) {
	            state.funcThis_ = state.value[0];
	          } else {
	            state.funcThis_ = this.stateStack[this.stateStack.length - 1].thisExpression;
	          }
	          state.arguments = [];
	          var n = 0;
	        } else {
	          var n = state.n_;
	          if (state.arguments.length != node.arguments.length) {
	            state.arguments[n - 1] = state.value;
	          }
	        }
	        if (node.arguments[n]) {
	          state.n_ = n + 1;
	          this.stateStack.unshift({ node: node.arguments[n] });
	        } else if (!state.doneExec) {
	          this.executeFunction();
	        } else {
	          this.stateStack.shift();
	          if (state.isConstructor_ && state.value.type !== 'object') {
	            this.stateStack[0].value = state.funcThis_;
	          } else {
	            this.stateStack[0].value = state.value;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'executeFunction',
	    value: function executeFunction() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      state.doneExec = true;
	      if (state.func_.node && (state.func_.node.type == 'FunctionApply_' || state.func_.node.type == 'FunctionCall_')) {
	        state.funcThis_ = state.arguments.shift();
	        if (state.func_.node.type == 'FunctionApply_') {
	          // Unpack all the arguments from the provided array.
	          var argsList = state.arguments.shift();
	          if (argsList && this.isa(argsList, this.ARRAY)) {
	            state.arguments = [];
	            for (var i = 0; i < argsList.length; i++) {
	              state.arguments[i] = this.getProperty(argsList, i);
	            }
	          } else {
	            state.arguments = [];
	          }
	        }
	        state.func_ = state.member_;
	      }
	      if (state.func_.node) {
	        var scope = this.createScope(state.func_.node.body, state.func_.parentScope);
	        // Add all arguments.
	        for (var i = 0; i < state.func_.node.params.length; i++) {
	          var paramName = this.createPrimitive(state.func_.node.params[i].name);
	          var paramValue = state.arguments.length > i ? state.arguments[i] : this.UNDEFINED;
	          this.setProperty(scope, paramName, paramValue);
	        }
	        // Build arguments variable.
	        var argsList = this.createObject(this.ARRAY);
	        for (var i = 0; i < state.arguments.length; i++) {
	          this.setProperty(argsList, this.createPrimitive(i), state.arguments[i]);
	        }
	        this.setProperty(scope, 'arguments', argsList);
	        var funcState = {
	          node: state.func_.node.body,
	          scope: scope,
	          thisExpression: state.funcThis_
	        };
	        this.stateStack.unshift(funcState);
	        state.value = this.UNDEFINED; // Default value if no explicit return.
	      } else if (state.func_.nativeFunc) {
	        state.value = state.func_.nativeFunc.apply(state.funcThis_, state.arguments);
	      } else if (state.func_.asyncFunc) {
	        var thisInterpreter = this;
	        var callback = function callback(value) {
	          state.value = value || thisInterpreter.UNDEFINED;
	          thisInterpreter.paused_ = false;
	        };
	        var argsWithCallback = state.arguments.concat(callback);
	        state.func_.asyncFunc.apply(state.funcThis_, argsWithCallback);
	        this.paused_ = true;
	        return;
	      } else if (state.func_.eval) {
	        var code = state.arguments[0];
	        if (!code) {
	          state.value = this.UNDEFINED;
	        } else if (!code.isPrimitive) {
	          // JS does not parse String objects:
	          // eval(new String('1 + 1')) -> '1 + 1'
	          state.value = code;
	        } else {
	          var evalInterpreter = new Interpreter(code.toString());
	          evalInterpreter.stateStack[0].scope.parentScope = this.getScope();
	          state = {
	            node: { type: 'Eval_' },
	            interpreter: evalInterpreter
	          };
	          this.stateStack.unshift(state);
	        }
	      } else {
	        throw TypeError('function not a function (huh?)');
	      }
	    }
	  }, {
	    key: 'stepCatchClause',
	    value: function stepCatchClause() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneBody) {
	        state.doneBody = true;
	        var scope;
	        if (node.param) {
	          scope = this.createSpecialScope(this.getScope());
	          // Add the argument.
	          var paramName = this.createPrimitive(node.param.name);
	          this.setProperty(scope, paramName, state.throwValue);
	        }
	        this.stateStack.unshift({ node: node.body, scope: scope });
	      } else {
	        this.stateStack.shift();
	      }
	    }
	  }, {
	    key: 'stepConditionalExpression',
	    value: function stepConditionalExpression() {
	      var state = this.stateStack[0];
	      if (!state.done) {
	        if (!state.test) {
	          state.test = true;
	          this.stateStack.unshift({ node: state.node.test });
	        } else {
	          state.done = true;
	          if (state.value.toBoolean() && state.node.consequent) {
	            this.stateStack.unshift({ node: state.node.consequent });
	          } else if (!state.value.toBoolean() && state.node.alternate) {
	            this.stateStack.unshift({ node: state.node.alternate });
	          }
	        }
	      } else {
	        this.stateStack.shift();
	        if (state.node.type == 'ConditionalExpression') {
	          this.stateStack[0].value = state.value;
	        }
	      }
	    }
	  }, {
	    key: 'stepContinueStatement',
	    value: function stepContinueStatement() {
	      var node = this.stateStack[0].node;
	      var label = null;
	      if (node.label) {
	        label = node.label.name;
	      }
	      var state = this.stateStack[0];
	      while (state && state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
	        if (state.isLoop) {
	          if (!label || label == state.label) {
	            return;
	          }
	        }
	        this.stateStack.shift();
	        state = this.stateStack[0];
	      }
	      // Syntax error, do not allow this error to be trapped.
	      throw SyntaxError('Illegal continue statement');
	    }
	  }, {
	    key: 'stepDoWhileStatement',
	    value: function stepDoWhileStatement() {
	      var state = this.stateStack[0];
	      state.isLoop = true;
	      if (state.node.type == 'DoWhileStatement' && state.test === undefined) {
	        // First iteration of do/while executes without checking test.
	        state.value = this.TRUE;
	        state.test = true;
	      }
	      if (!state.test) {
	        state.test = true;
	        this.stateStack.unshift({ node: state.node.test });
	      } else {
	        state.test = false;
	        if (!state.value.toBoolean()) {
	          this.stateStack.shift();
	        } else if (state.node.body) {
	          this.stateStack.unshift({ node: state.node.body });
	        }
	      }
	    }
	  }, {
	    key: 'stepEmptyStatement',
	    value: function stepEmptyStatement() {
	      this.stateStack.shift();
	    }
	  }, {
	    key: 'stepEval_',
	    value: function stepEval_() {
	      var state = this.stateStack[0];
	      if (!state.interpreter.step()) {
	        this.stateStack.shift();
	        this.stateStack[0].value = state.interpreter.value || this.UNDEFINED;
	      }
	    }
	  }, {
	    key: 'stepExpressionStatement',
	    value: function stepExpressionStatement() {
	      var state = this.stateStack[0];
	      if (!state.done) {
	        state.done = true;
	        this.stateStack.unshift({ node: state.node.expression });
	      } else {
	        this.stateStack.shift();
	        // Save this value to the interpreter for use as a return value if
	        // this code is inside an eval function.
	        this.value = state.value;
	      }
	    }
	  }, {
	    key: 'stepForInStatement',
	    value: function stepForInStatement() {
	      var state = this.stateStack[0];
	      state.isLoop = true;
	      var node = state.node;
	      if (!state.doneVariable_) {
	        state.doneVariable_ = true;
	        var left = node.left;
	        if (left.type == 'VariableDeclaration') {
	          // Inline variable declaration: for (var x in y)
	          left = left.declarations[0].id;
	        }
	        this.stateStack.unshift({ node: left, components: true });
	      } else if (!state.doneObject_) {
	        state.doneObject_ = true;
	        state.variable = state.value;
	        this.stateStack.unshift({ node: node.right });
	      } else {
	        if (typeof state.iterator == 'undefined') {
	          // First iteration.
	          state.object = state.value;
	          state.iterator = 0;
	        }
	        var name = null;
	        done: do {
	          var i = state.iterator;
	          for (var prop in state.object.properties) {
	            if (prop in state.object.nonenumerable) {
	              continue;
	            }
	            if (i == 0) {
	              name = prop;
	              break done;
	            }
	            i--;
	          }
	          state.object = state.object.parent && state.object.parent.properties.prototype;
	          state.iterator = 0;
	        } while (state.object);
	        state.iterator++;
	        if (name === null) {
	          this.stateStack.shift();
	        } else {
	          this.setValueToScope(state.variable, this.createPrimitive(name));
	          if (node.body) {
	            this.stateStack.unshift({ node: node.body });
	          }
	        }
	      }
	    }
	  }, {
	    key: 'stepForStatement',
	    value: function stepForStatement() {
	      var state = this.stateStack[0];
	      state.isLoop = true;
	      var node = state.node;
	      var mode = state.mode || 0;
	      if (mode == 0) {
	        state.mode = 1;
	        if (node.init) {
	          this.stateStack.unshift({ node: node.init });
	        }
	      } else if (mode == 1) {
	        state.mode = 2;
	        if (node.test) {
	          this.stateStack.unshift({ node: node.test });
	        }
	      } else if (mode == 2) {
	        state.mode = 3;
	        if (node.test && state.value && !state.value.toBoolean()) {
	          // Loop complete.  Bail out.
	          this.stateStack.shift();
	        } else if (node.body) {
	          this.stateStack.unshift({ node: node.body });
	        }
	      } else if (mode == 3) {
	        state.mode = 1;
	        if (node.update) {
	          this.stateStack.unshift({ node: node.update });
	        }
	      }
	    }
	  }, {
	    key: 'stepFunctionDeclaration',
	    value: function stepFunctionDeclaration() {
	      this.stateStack.shift();
	    }
	  }, {
	    key: 'stepFunctionExpression',
	    value: function stepFunctionExpression() {
	      var state = this.stateStack.shift();
	      this.stateStack[0].value = this.createFunction(state.node);
	    }
	  }, {
	    key: 'stepIdentifier',
	    value: function stepIdentifier() {
	      var state = this.stateStack.shift();
	      var name = this.createPrimitive(state.node.name);
	      this.stateStack[0].value = state.components ? name : this.getValueFromScope(name);
	    }
	  }, {
	    key: 'stepIfStatement',
	    value: function stepIfStatement() {
	      return this.stepConditionalExpression();
	    }
	  }, {
	    key: 'stepLabeledStatement',
	    value: function stepLabeledStatement() {
	      // No need to hit this node again on the way back up the stack.
	      var state = this.stateStack.shift();
	      this.stateStack.unshift({ node: state.node.body,
	        label: state.node.label.name });
	    }
	  }, {
	    key: 'stepLiteral',
	    value: function stepLiteral() {
	      var state = this.stateStack.shift();
	      this.stateStack[0].value = this.createPrimitive(state.node.value);
	    }
	  }, {
	    key: 'stepLogicalExpression',
	    value: function stepLogicalExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (node.operator != '&&' && node.operator != '||') {
	        throw SyntaxError('Unknown logical operator: ' + node.operator);
	      }
	      if (!state.doneLeft_) {
	        state.doneLeft_ = true;
	        this.stateStack.unshift({ node: node.left });
	      } else if (!state.doneRight_) {
	        if (node.operator == '&&' && !state.value.toBoolean() || node.operator == '||' && state.value.toBoolean()) {
	          // Shortcut evaluation.
	          this.stateStack.shift();
	          this.stateStack[0].value = state.value;
	        } else {
	          state.doneRight_ = true;
	          this.stateStack.unshift({ node: node.right });
	        }
	      } else {
	        this.stateStack.shift();
	        this.stateStack[0].value = state.value;
	      }
	    }
	  }, {
	    key: 'stepMemberExpression',
	    value: function stepMemberExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneObject_) {
	        state.doneObject_ = true;
	        this.stateStack.unshift({ node: node.object });
	      } else if (!state.doneProperty_) {
	        state.doneProperty_ = true;
	        state.object = state.value;
	        this.stateStack.unshift({
	          node: node.property,
	          components: !node.computed
	        });
	      } else {
	        this.stateStack.shift();
	        if (state.components) {
	          this.stateStack[0].value = [state.object, state.value];
	        } else {
	          this.stateStack[0].value = this.getProperty(state.object, state.value);
	        }
	      }
	    }
	  }, {
	    key: 'stepNewExpression',
	    value: function stepNewExpression() {
	      return this.stepCallExpression();
	    }
	  }, {
	    key: 'stepObjectExpression',
	    value: function stepObjectExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      var valueToggle = state.valueToggle;
	      var n = state.n || 0;
	      if (!state.object) {
	        state.object = this.createObject(this.OBJECT);
	      } else {
	        if (valueToggle) {
	          state.key = state.value;
	        } else {
	          this.setProperty(state.object, state.key, state.value);
	        }
	      }
	      if (node.properties[n]) {
	        if (valueToggle) {
	          state.n = n + 1;
	          this.stateStack.unshift({ node: node.properties[n].value });
	        } else {
	          this.stateStack.unshift({ node: node.properties[n].key, components: true });
	        }
	        state.valueToggle = !valueToggle;
	      } else {
	        this.stateStack.shift();
	        this.stateStack[0].value = state.object;
	      }
	    }
	  }, {
	    key: 'stepProgram',
	    value: function stepProgram() {
	      return this.stepBlockStatement();
	    }
	  }, {
	    key: 'stepReturnStatement',
	    value: function stepReturnStatement() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (node.argument && !state.done) {
	        state.done = true;
	        this.stateStack.unshift({ node: node.argument });
	      } else {
	        var value = state.value || this.UNDEFINED;
	        do {
	          this.stateStack.shift();
	          if (this.stateStack.length == 0) {
	            // Syntax error, do not allow this error to be trapped.
	            throw SyntaxError('Illegal return statement');
	          }
	          state = this.stateStack[0];
	        } while (state.node.type != 'CallExpression' && state.node.type != 'NewExpression');
	        state.value = value;
	      }
	    }
	  }, {
	    key: 'stepSequenceExpression',
	    value: function stepSequenceExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      var n = state.n || 0;
	      if (node.expressions[n]) {
	        state.n = n + 1;
	        this.stateStack.unshift({ node: node.expressions[n] });
	      } else {
	        this.stateStack.shift();
	        this.stateStack[0].value = state.value;
	      }
	    }
	  }, {
	    key: 'stepSwitchStatement',
	    value: function stepSwitchStatement() {
	      var state = this.stateStack[0];
	      state.checked = state.checked || [];
	      state.isSwitch = true;
	
	      if (!state.test) {
	        state.test = true;
	        this.stateStack.unshift({ node: state.node.discriminant });
	      } else {
	        if (!state.switchValue) {
	          // Preserve switch value between case tests.
	          state.switchValue = state.value;
	        }
	
	        var index = state.index || 0;
	        var currentCase = state.node.cases[index];
	        if (currentCase) {
	          if (!state.done && !state.checked[index] && currentCase.test) {
	            state.checked[index] = true;
	            this.stateStack.unshift({ node: currentCase.test });
	          } else {
	            // Test on the default case will be null.
	            if (state.done || !currentCase.test || this.comp(state.value, state.switchValue) == 0) {
	              state.done = true;
	              var n = state.n || 0;
	              if (currentCase.consequent[n]) {
	                this.stateStack.unshift({ node: currentCase.consequent[n] });
	                state.n = n + 1;
	                return;
	              }
	            }
	            state.n = 0;
	            state.index = index + 1;
	          }
	        } else {
	          this.stateStack.shift();
	        }
	      }
	    }
	  }, {
	    key: 'stepThisExpression',
	    value: function stepThisExpression() {
	      this.stateStack.shift();
	      for (var i = 0; i < this.stateStack.length; i++) {
	        if (this.stateStack[i].thisExpression) {
	          this.stateStack[0].value = this.stateStack[i].thisExpression;
	          return;
	        }
	      }
	      throw Error('No this expression found.');
	    }
	  }, {
	    key: 'stepThrowStatement',
	    value: function stepThrowStatement() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.argument) {
	        state.argument = true;
	        this.stateStack.unshift({ node: node.argument });
	      } else {
	        this.throwException(state.value);
	      }
	    }
	  }, {
	    key: 'stepTryStatement',
	    value: function stepTryStatement() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneBlock) {
	        state.doneBlock = true;
	        this.stateStack.unshift({ node: node.block });
	      } else if (!state.doneFinalizer && node.finalizer) {
	        state.doneFinalizer = true;
	        this.stateStack.unshift({ node: node.finalizer });
	      } else {
	        this.stateStack.shift();
	      }
	    }
	  }, {
	    key: 'stepUnaryExpression',
	    value: function stepUnaryExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.done) {
	        state.done = true;
	        var nextState = { node: node.argument };
	        if (node.operator == 'delete') {
	          nextState.components = true;
	        }
	        this.stateStack.unshift(nextState);
	      } else {
	        this.stateStack.shift();
	        var value;
	        if (node.operator == '-') {
	          value = -state.value.toNumber();
	        } else if (node.operator == '+') {
	          value = state.value.toNumber();
	        } else if (node.operator == '!') {
	          value = !state.value.toBoolean();
	        } else if (node.operator == '~') {
	          value = ~state.value.toNumber();
	        } else if (node.operator == 'typeof') {
	          value = state.value.type;
	        } else if (node.operator == 'delete') {
	          if (state.value.length) {
	            var obj = state.value[0];
	            var name = state.value[1];
	          } else {
	            var obj = this.getScope();
	            var name = state.value;
	          }
	          value = this.deleteProperty(obj, name);
	        } else if (node.operator == 'void') {
	          value = undefined;
	        } else {
	          throw SyntaxError('Unknown unary operator: ' + node.operator);
	        }
	        this.stateStack[0].value = this.createPrimitive(value);
	      }
	    }
	  }, {
	    key: 'stepUpdateExpression',
	    value: function stepUpdateExpression() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.done) {
	        state.done = true;
	        this.stateStack.unshift({ node: node.argument, components: true });
	      } else {
	        this.stateStack.shift();
	        var leftSide = state.value;
	        var leftValue = this.getValue(leftSide).toNumber();
	        var changeValue;
	        if (node.operator == '++') {
	          changeValue = this.createPrimitive(leftValue + 1);
	        } else if (node.operator == '--') {
	          changeValue = this.createPrimitive(leftValue - 1);
	        } else {
	          throw SyntaxError('Unknown update expression: ' + node.operator);
	        }
	        this.setValue(leftSide, changeValue);
	        this.stateStack[0].value = node.prefix ? changeValue : this.createPrimitive(leftValue);
	      }
	    }
	  }, {
	    key: 'stepVariableDeclaration',
	    value: function stepVariableDeclaration() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      var n = state.n || 0;
	      if (node.declarations[n]) {
	        state.n = n + 1;
	        this.stateStack.unshift({ node: node.declarations[n] });
	      } else {
	        this.stateStack.shift();
	      }
	    }
	  }, {
	    key: 'stepVariableDeclarator',
	    value: function stepVariableDeclarator() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (node.init && !state.done) {
	        state.done = true;
	        this.stateStack.unshift({ node: node.init });
	      } else {
	        if (!this.hasProperty(this, node.id.name) || node.init) {
	          var value = node.init ? state.value : this.UNDEFINED;
	          this.setValue(this.createPrimitive(node.id.name), value);
	        }
	        this.stateStack.shift();
	      }
	    }
	  }, {
	    key: 'stepWithStatement',
	    value: function stepWithStatement() {
	      var state = this.stateStack[0];
	      var node = state.node;
	      if (!state.doneObject) {
	        state.doneObject = true;
	        this.stateStack.unshift({ node: node.object });
	      } else if (!state.doneBody) {
	        state.doneBody = true;
	        var scope = this.createSpecialScope(this.getScope(), state.value);
	        this.stateStack.unshift({ node: node.body, scope: scope });
	      } else {
	        this.stateStack.shift();
	      }
	    }
	  }, {
	    key: 'stepWhileStatement',
	    value: function stepWhileStatement() {
	      return this.stepDoWhileStatement();
	    }
	  }]);
	  return Interpreter;
	}();
	
	/**
	 * Class for a number, string, boolean, null, or undefined.
	 * @param {number|string|boolean|null|undefined} data Primitive value.
	 * @param {!Interpreter} interpreter The JS Interpreter to bind to.
	 * @constructor
	 */
	
	
	/*istanbul ignore next*/exports.default = Interpreter;
	
	/*istanbul ignore next*/var Primitive = function () {
	  function /*istanbul ignore next*/Primitive(data, interpreter) {
	    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Primitive);
	
	    var type = /*istanbul ignore next*/typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);
	    this.data = data;
	    this.type = type;
	    if (type == 'number') {
	      this.parent = interpreter.NUMBER;
	    } else if (type == 'string') {
	      this.parent = interpreter.STRING;
	    } else if (type == 'boolean') {
	      this.parent = interpreter.BOOLEAN;
	    }
	    this.isPrimitive = true;
	  }
	
	  (0, _createClass3.default)(Primitive, [{
	    key: 'toBoolean',
	
	
	    /**
	     * Convert this primitive into a boolean.
	     * @return {boolean} Boolean value.
	     */
	    value: function toBoolean() {
	      return Boolean(this.data);
	    }
	  }, {
	    key: 'toNumber',
	
	
	    /**
	     * Convert this primitive into a number.
	     * @return {number} Number value.
	     */
	    value: function toNumber() {
	      return Number(this.data);
	    }
	  }, {
	    key: 'toString',
	
	
	    /**
	     * Convert this primitive into a string.
	     * @return {string} String value.
	     */
	    value: function toString() {
	      return String(this.data);
	    }
	  }, {
	    key: 'valueOf',
	
	
	    /**
	     * Return the primitive value.
	     * @return {number|string|boolean|null|undefined} Primitive value.
	     */
	    value: function valueOf() {
	      return this.data;
	    }
	  }]);
	  return Primitive;
	}();
	
	/**
	 * Class for an object.
	 * @param {Object} parent Parent constructor function.
	 * @constructor
	 */
	
	
	/*istanbul ignore next*/var InterpreterObject = function () {
	  function /*istanbul ignore next*/InterpreterObject(parent) {
	    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, InterpreterObject);
	
	    this.fixed = /*istanbul ignore next*/(0, _create2.default)(null);
	    this.nonenumerable = /*istanbul ignore next*/(0, _create2.default)(null);
	    this.properties = /*istanbul ignore next*/(0, _create2.default)(null);
	    this.parent = parent;
	    this.type = 'object';
	    this.isPrimitive = false;
	  }
	
	  (0, _createClass3.default)(InterpreterObject, [{
	    key: 'toBoolean',
	
	
	    /**
	     * Convert this object into a boolean.
	     * @return {boolean} Boolean value.
	     */
	    value: function toBoolean() {
	      return true;
	    }
	  }, {
	    key: 'toNumber',
	
	
	    /**
	     * Convert this object into a number.
	     * @return {number} Number value.
	     */
	    value: function toNumber() {
	      return Number(this.data === undefined ? this.toString() : this.data);
	    }
	  }, {
	    key: 'toString',
	
	
	    /**
	     * Convert this object into a string.
	     * @return {string} String value.
	     */
	    value: function toString() {
	      return this.data === undefined ? '[' + this.type + ']' : String(this.data);
	    }
	  }, {
	    key: 'valueOf',
	
	
	    /**
	     * Return the object value.
	     * @return {!Object} Value.
	     */
	    value: function valueOf() {
	      return this.data === undefined ? this : this.data;
	    }
	  }]);
	  return InterpreterObject;
	}();
	
	Interpreter.Primitive = Primitive;
	Interpreter.Object = InterpreterObject;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(116), __esModule: true };

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(24)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(118), __esModule: true };

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(49);
	__webpack_require__(50);
	__webpack_require__(62);
	__webpack_require__(119);
	__webpack_require__(120);
	module.exports = __webpack_require__(24).Map;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(67);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(77)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(23);
	
	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(83)('Map')});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.lineBreakG=exports.lineBreak=exports.isNewLine=exports.Token=exports.isIdentifierStart=exports.isIdentifierChar=exports.tokContexts=exports.TokContext=exports.tokTypes=exports.TokenType=exports.Node=exports.getLineInfo=exports.SourceLocation=exports.Position=exports.defaultOptions=exports.plugins=exports.Parser=exports.tokenizer=exports.parseExpressionAt=exports.parse=exports.version=undefined;var _iterator=__webpack_require__(91);var _iterator2=_interopRequireDefault(_iterator);var _symbol=__webpack_require__(94);var _symbol2=_interopRequireDefault(_symbol);var _typeof2=__webpack_require__(90);var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// Reserved word lists for various dialects of the language
	var reservedWords={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",7:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"};// And the keywords
	var ecma5AndLessKeywords="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";var keywords={5:ecma5AndLessKeywords,6:ecma5AndLessKeywords+" const class extends export import super"};// ## Character categories
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `bin/generate-identifier-regex.js`.
	var nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";var nonASCIIidentifierChars="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";var nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]");var nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by bin/generate-identifier-regex.js
	var astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541];var astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code,set){var pos=0x10000;for(var i=0;i<set.length;i+=2){pos+=set[i];if(pos>code)return false;pos+=set[i+1];if(pos>=code)return true;}}// Test whether a given character code starts an identifier.
	function isIdentifierStart(code,astral){if(code<65)return code===36;if(code<91)return true;if(code<97)return code===95;if(code<123)return true;if(code<=0xffff)return code>=0xaa&&nonASCIIidentifierStart.test(String.fromCharCode(code));if(astral===false)return false;return isInAstralSet(code,astralIdentifierStartCodes);}// Test whether a given character is part of an identifier.
	function isIdentifierChar(code,astral){if(code<48)return code===36;if(code<58)return true;if(code<65)return false;if(code<91)return true;if(code<97)return code===95;if(code<123)return true;if(code<=0xffff)return code>=0xaa&&nonASCIIidentifier.test(String.fromCharCode(code));if(astral===false)return false;return isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes);}// ## Token types
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// The `startsExpr` property is used to check if the token ends a
	// `yield` expression. It is set on all token types that either can
	// directly start an expression (like a quotation mark) or can
	// continue an expression (like the body of a string).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.
	var TokenType=function TokenType(label,conf){if(conf===void 0)conf={};this.label=label;this.keyword=conf.keyword;this.beforeExpr=!!conf.beforeExpr;this.startsExpr=!!conf.startsExpr;this.isLoop=!!conf.isLoop;this.isAssign=!!conf.isAssign;this.prefix=!!conf.prefix;this.postfix=!!conf.postfix;this.binop=conf.binop||null;this.updateContext=null;};function binop(name,prec){return new TokenType(name,{beforeExpr:true,binop:prec});}var beforeExpr={beforeExpr:true};var startsExpr={startsExpr:true};// Map keyword names to token types.
	var keywordTypes={};// Succinct definitions of keyword token types
	function kw(name,options){if(options===void 0)options={};options.keyword=name;return keywordTypes[name]=new TokenType(name,options);}var tt={num:new TokenType("num",startsExpr),regexp:new TokenType("regexp",startsExpr),string:new TokenType("string",startsExpr),name:new TokenType("name",startsExpr),eof:new TokenType("eof"),// Punctuation token types.
	bracketL:new TokenType("[",{beforeExpr:true,startsExpr:true}),bracketR:new TokenType("]"),braceL:new TokenType("{",{beforeExpr:true,startsExpr:true}),braceR:new TokenType("}"),parenL:new TokenType("(",{beforeExpr:true,startsExpr:true}),parenR:new TokenType(")"),comma:new TokenType(",",beforeExpr),semi:new TokenType(";",beforeExpr),colon:new TokenType(":",beforeExpr),dot:new TokenType("."),question:new TokenType("?",beforeExpr),arrow:new TokenType("=>",beforeExpr),template:new TokenType("template"),ellipsis:new TokenType("...",beforeExpr),backQuote:new TokenType("`",startsExpr),dollarBraceL:new TokenType("${",{beforeExpr:true,startsExpr:true}),// Operators. These carry several kinds of properties to help the
	// parser use them properly (the presence of these properties is
	// what categorizes them as operators).
	//
	// `binop`, when present, specifies that this operator is a binary
	// operator, and will refer to its precedence.
	//
	// `prefix` and `postfix` mark the operator as a prefix or postfix
	// unary operator.
	//
	// `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	// binary operators with a very low precedence, that should result
	// in AssignmentExpression nodes.
	eq:new TokenType("=",{beforeExpr:true,isAssign:true}),assign:new TokenType("_=",{beforeExpr:true,isAssign:true}),incDec:new TokenType("++/--",{prefix:true,postfix:true,startsExpr:true}),prefix:new TokenType("prefix",{beforeExpr:true,prefix:true,startsExpr:true}),logicalOR:binop("||",1),logicalAND:binop("&&",2),bitwiseOR:binop("|",3),bitwiseXOR:binop("^",4),bitwiseAND:binop("&",5),equality:binop("==/!=",6),relational:binop("</>",7),bitShift:binop("<</>>",8),plusMin:new TokenType("+/-",{beforeExpr:true,binop:9,prefix:true,startsExpr:true}),modulo:binop("%",10),star:binop("*",10),slash:binop("/",10),starstar:new TokenType("**",{beforeExpr:true}),// Keyword token types.
	_break:kw("break"),_case:kw("case",beforeExpr),_catch:kw("catch"),_continue:kw("continue"),_debugger:kw("debugger"),_default:kw("default",beforeExpr),_do:kw("do",{isLoop:true,beforeExpr:true}),_else:kw("else",beforeExpr),_finally:kw("finally"),_for:kw("for",{isLoop:true}),_function:kw("function",startsExpr),_if:kw("if"),_return:kw("return",beforeExpr),_switch:kw("switch"),_throw:kw("throw",beforeExpr),_try:kw("try"),_var:kw("var"),_const:kw("const"),_while:kw("while",{isLoop:true}),_with:kw("with"),_new:kw("new",{beforeExpr:true,startsExpr:true}),_this:kw("this",startsExpr),_super:kw("super",startsExpr),_class:kw("class"),_extends:kw("extends",beforeExpr),_export:kw("export"),_import:kw("import"),_null:kw("null",startsExpr),_true:kw("true",startsExpr),_false:kw("false",startsExpr),_in:kw("in",{beforeExpr:true,binop:7}),_instanceof:kw("instanceof",{beforeExpr:true,binop:7}),_typeof:kw("typeof",{beforeExpr:true,prefix:true,startsExpr:true}),_void:kw("void",{beforeExpr:true,prefix:true,startsExpr:true}),_delete:kw("delete",{beforeExpr:true,prefix:true,startsExpr:true})};// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.
	var lineBreak=/\r\n?|\n|\u2028|\u2029/;var lineBreakG=new RegExp(lineBreak.source,"g");function isNewLine(code){return code===10||code===13||code===0x2028||code==0x2029;}var nonASCIIwhitespace=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;var skipWhiteSpace=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;function isArray(obj){return Object.prototype.toString.call(obj)==="[object Array]";}// Checks if an object has a property.
	function has(obj,propName){return Object.prototype.hasOwnProperty.call(obj,propName);}// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.
	var Position=function Position(line,col){this.line=line;this.column=col;};Position.prototype.offset=function offset(n){return new Position(this.line,this.column+n);};var SourceLocation=function SourceLocation(p,start,end){this.start=start;this.end=end;if(p.sourceFile!==null)this.source=p.sourceFile;};// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.
	function getLineInfo(input,offset){for(var line=1,cur=0;;){lineBreakG.lastIndex=cur;var match=lineBreakG.exec(input);if(match&&match.index<offset){++line;cur=match.index+match[0].length;}else{return new Position(line,offset-cur);}}}// A second optional argument can be given to further configure
	// the parser process. These options are recognized:
	var defaultOptions={// `ecmaVersion` indicates the ECMAScript version to parse. Must
	// be either 3, or 5, or 6. This influences support for strict
	// mode, the set of reserved words, support for getters and
	// setters and other features. The default is 6.
	ecmaVersion:6,// Source type ("script" or "module") for different semantics
	sourceType:"script",// `onInsertedSemicolon` can be a callback that will be called
	// when a semicolon is automatically inserted. It will be passed
	// th position of the comma as an offset, and if `locations` is
	// enabled, it is given the location as a `{line, column}` object
	// as second argument.
	onInsertedSemicolon:null,// `onTrailingComma` is similar to `onInsertedSemicolon`, but for
	// trailing commas.
	onTrailingComma:null,// By default, reserved words are only enforced if ecmaVersion >= 5.
	// Set `allowReserved` to a boolean value to explicitly turn this on
	// an off. When this option has the value "never", reserved words
	// and keywords can also not be used as property names.
	allowReserved:null,// When enabled, a return at the top level is not considered an
	// error.
	allowReturnOutsideFunction:false,// When enabled, import/export statements are not constrained to
	// appearing at the top of the program.
	allowImportExportEverywhere:false,// When enabled, hashbang directive in the beginning of file
	// is allowed and treated as a line comment.
	allowHashBang:false,// When `locations` is on, `loc` properties holding objects with
	// `start` and `end` properties in `{line, column}` form (with
	// line being 1-based and column 0-based) will be attached to the
	// nodes.
	locations:false,// A function can be passed as `onToken` option, which will
	// cause Acorn to call that function with object in the same
	// format as tokens returned from `tokenizer().getToken()`. Note
	// that you are not allowed to call the parser from the
	// callback—that will corrupt its internal state.
	onToken:null,// A function can be passed as `onComment` option, which will
	// cause Acorn to call that function with `(block, text, start,
	// end)` parameters whenever a comment is skipped. `block` is a
	// boolean indicating whether this is a block (`/* */`) comment,
	// `text` is the content of the comment, and `start` and `end` are
	// character offsets that denote the start and end of the comment.
	// When the `locations` option is on, two more parameters are
	// passed, the full `{line, column}` locations of the start and
	// end of the comments. Note that you are not allowed to call the
	// parser from the callback—that will corrupt its internal state.
	onComment:null,// Nodes have their start and end characters offsets recorded in
	// `start` and `end` properties (directly on the node, rather than
	// the `loc` object, which holds line/column data. To also add a
	// [semi-standardized][range] `range` property holding a `[start,
	// end]` array with the same numbers, set the `ranges` option to
	// `true`.
	//
	// [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
	ranges:false,// It is possible to parse multiple files into a single AST by
	// passing the tree produced by parsing the first file as
	// `program` option in subsequent parses. This will add the
	// toplevel forms of the parsed file to the `Program` (top) node
	// of an existing parse tree.
	program:null,// When `locations` is on, you can pass this to record the source
	// file in every node's `loc` object.
	sourceFile:null,// This value, if given, is stored in every node, whether
	// `locations` is on or off.
	directSourceFile:null,// When enabled, parenthesized expressions are represented by
	// (non-standard) ParenthesizedExpression nodes
	preserveParens:false,plugins:{}};// Interpret and default an options object
	function getOptions(opts){var options={};for(var opt in defaultOptions)/*istanbul ignore next*/{options[opt]=opts&&has(opts,opt)?opts[opt]:defaultOptions[opt];}if(options.allowReserved==null)options.allowReserved=options.ecmaVersion<5;if(isArray(options.onToken)){var tokens=options.onToken;options.onToken=function(token){return tokens.push(token);};}if(isArray(options.onComment))options.onComment=pushComment(options,options.onComment);return options;}function pushComment(options,array){return function(block,text,start,end,startLoc,endLoc){var comment={type:block?'Block':'Line',value:text,start:start,end:end};if(options.locations)comment.loc=new SourceLocation(this,startLoc,endLoc);if(options.ranges)comment.range=[start,end];array.push(comment);};}// Registered plugins
	var plugins={};function keywordRegexp(words){return new RegExp("^("+words.replace(/ /g,"|")+")$");}var Parser=function Parser(options,input,startPos){this.options=options=getOptions(options);this.sourceFile=options.sourceFile;this.keywords=keywordRegexp(keywords[options.ecmaVersion>=6?6:5]);var reserved=options.allowReserved?"":reservedWords[options.ecmaVersion]+(options.sourceType=="module"?" await":"");this.reservedWords=keywordRegexp(reserved);var reservedStrict=(reserved?reserved+" ":"")+reservedWords.strict;this.reservedWordsStrict=keywordRegexp(reservedStrict);this.reservedWordsStrictBind=keywordRegexp(reservedStrict+" "+reservedWords.strictBind);this.input=String(input);// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.
	this.containsEsc=false;// Load plugins
	this.loadPlugins(options.plugins);// Set up token state
	// The current position of the tokenizer in the input.
	if(startPos){this.pos=startPos;this.lineStart=Math.max(0,this.input.lastIndexOf("\n",startPos));this.curLine=this.input.slice(0,this.lineStart).split(lineBreak).length;}else{this.pos=this.lineStart=0;this.curLine=1;}// Properties of the current token:
	// Its type
	this.type=tt.eof;// For tokens that include more information than their type, the value
	this.value=null;// Its start and end offset
	this.start=this.end=this.pos;// And, if locations are used, the {line, column} object
	// corresponding to those offsets
	this.startLoc=this.endLoc=this.curPosition();// Position information for the previous token
	this.lastTokEndLoc=this.lastTokStartLoc=null;this.lastTokStart=this.lastTokEnd=this.pos;// The context stack is used to superficially track syntactic
	// context to predict whether a regular expression is allowed in a
	// given position.
	this.context=this.initialContext();this.exprAllowed=true;// Figure out if it's a module code.
	this.strict=this.inModule=options.sourceType==="module";// Used to signify the start of a potential arrow function
	this.potentialArrowAt=-1;// Flags to track whether we are in a function, a generator.
	this.inFunction=this.inGenerator=false;// Labels in scope.
	this.labels=[];// If enabled, skip leading hashbang line.
	if(this.pos===0&&options.allowHashBang&&this.input.slice(0,2)==='#!')this.skipLineComment(2);};// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them
	Parser.prototype.isKeyword=function isKeyword(word){return this.keywords.test(word);};Parser.prototype.isReservedWord=function isReservedWord(word){return this.reservedWords.test(word);};Parser.prototype.extend=function extend(name,f){this[name]=f(this[name]);};Parser.prototype.loadPlugins=function loadPlugins(pluginConfigs){var this$1=this;for(var name in pluginConfigs){var plugin=plugins[name];if(!plugin)throw new Error("Plugin '"+name+"' not found");plugin(this$1,pluginConfigs[name]);}};Parser.prototype.parse=function parse(){var node=this.options.program||this.startNode();this.nextToken();return this.parseTopLevel(node);};var pp=Parser.prototype;// ## Parser utilities
	// Test whether a statement node is the string literal `"use strict"`.
	pp.isUseStrict=function(stmt){return this.options.ecmaVersion>=5&&stmt.type==="ExpressionStatement"&&stmt.expression.type==="Literal"&&stmt.expression.raw.slice(1,-1)==="use strict";};// Predicate that tests whether the next token is of the given
	// type, and if yes, consumes it as a side effect.
	pp.eat=function(type){if(this.type===type){this.next();return true;}else{return false;}};// Tests whether parsed token is a contextual keyword.
	pp.isContextual=function(name){return this.type===tt.name&&this.value===name;};// Consumes contextual keyword if possible.
	pp.eatContextual=function(name){return this.value===name&&this.eat(tt.name);};// Asserts that following token is given contextual keyword.
	pp.expectContextual=function(name){if(!this.eatContextual(name))this.unexpected();};// Test whether a semicolon can be inserted at the current position.
	pp.canInsertSemicolon=function(){return this.type===tt.eof||this.type===tt.braceR||lineBreak.test(this.input.slice(this.lastTokEnd,this.start));};pp.insertSemicolon=function(){if(this.canInsertSemicolon()){if(this.options.onInsertedSemicolon)this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc);return true;}};// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.
	pp.semicolon=function(){if(!this.eat(tt.semi)&&!this.insertSemicolon())this.unexpected();};pp.afterTrailingComma=function(tokType){if(this.type==tokType){if(this.options.onTrailingComma)this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc);this.next();return true;}};// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.
	pp.expect=function(type){this.eat(type)||this.unexpected();};// Raise an unexpected token error.
	pp.unexpected=function(pos){this.raise(pos!=null?pos:this.start,"Unexpected token");};var DestructuringErrors=function DestructuringErrors(){this.shorthandAssign=0;this.trailingComma=0;};pp.checkPatternErrors=function(refDestructuringErrors,andThrow){var trailing=refDestructuringErrors&&refDestructuringErrors.trailingComma;if(!andThrow)return!!trailing;if(trailing)this.raise(trailing,"Comma is not permitted after the rest element");};pp.checkExpressionErrors=function(refDestructuringErrors,andThrow){var pos=refDestructuringErrors&&refDestructuringErrors.shorthandAssign;if(!andThrow)return!!pos;if(pos)this.raise(pos,"Shorthand property assignments are valid only in destructuring patterns");};var pp$1=Parser.prototype;// ### Statement parsing
	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.
	pp$1.parseTopLevel=function(node){var this$1=this;var first=true;if(!node.body)node.body=[];while(this.type!==tt.eof){var stmt=this$1.parseStatement(true,true);node.body.push(stmt);if(first){if(this$1.isUseStrict(stmt))this$1.setStrict(true);first=false;}}this.next();if(this.options.ecmaVersion>=6){node.sourceType=this.options.sourceType;}return this.finishNode(node,"Program");};var loopLabel={kind:"loop"};var switchLabel={kind:"switch"};pp$1.isLet=function(){if(this.type!==tt.name||this.options.ecmaVersion<6||this.value!="let")return false;skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(nextCh===91||nextCh==123)return true;// '{' and '['
	if(isIdentifierStart(nextCh,true)){for(var pos=next+1;isIdentifierChar(this.input.charCodeAt(pos),true);++pos){}var ident=this.input.slice(next,pos);if(!this.isKeyword(ident))return true;}return false;};// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.
	pp$1.parseStatement=function(declaration,topLevel){var starttype=this.type,node=this.startNode(),kind;if(this.isLet()){starttype=tt._var;kind="let";}// Most types of statements are recognized by the keyword they
	// start with. Many are trivial to parse, some require a bit of
	// complexity.
	switch(starttype){case tt._break:case tt._continue:return this.parseBreakContinueStatement(node,starttype.keyword);case tt._debugger:return this.parseDebuggerStatement(node);case tt._do:return this.parseDoStatement(node);case tt._for:return this.parseForStatement(node);case tt._function:if(!declaration&&this.options.ecmaVersion>=6)this.unexpected();return this.parseFunctionStatement(node);case tt._class:if(!declaration)this.unexpected();return this.parseClass(node,true);case tt._if:return this.parseIfStatement(node);case tt._return:return this.parseReturnStatement(node);case tt._switch:return this.parseSwitchStatement(node);case tt._throw:return this.parseThrowStatement(node);case tt._try:return this.parseTryStatement(node);case tt._const:case tt._var:kind=kind||this.value;if(!declaration&&kind!="var")this.unexpected();return this.parseVarStatement(node,kind);case tt._while:return this.parseWhileStatement(node);case tt._with:return this.parseWithStatement(node);case tt.braceL:return this.parseBlock();case tt.semi:return this.parseEmptyStatement(node);case tt._export:case tt._import:if(!this.options.allowImportExportEverywhere){if(!topLevel)this.raise(this.start,"'import' and 'export' may only appear at the top level");if(!this.inModule)this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'");}return starttype===tt._import?this.parseImport(node):this.parseExport(node);// If the statement does not start with a statement keyword or a
	// brace, it's an ExpressionStatement or LabeledStatement. We
	// simply start parsing an expression, and afterwards, if the
	// next token is a colon and the expression was a simple
	// Identifier node, we switch to interpreting it as a label.
	default:var maybeName=this.value,expr=this.parseExpression();if(starttype===tt.name&&expr.type==="Identifier"&&this.eat(tt.colon))return this.parseLabeledStatement(node,maybeName,expr);else return this.parseExpressionStatement(node,expr);}};pp$1.parseBreakContinueStatement=function(node,keyword){var this$1=this;var isBreak=keyword=="break";this.next();if(this.eat(tt.semi)||this.insertSemicolon())node.label=null;else if(this.type!==tt.name)this.unexpected();else{node.label=this.parseIdent();this.semicolon();}// Verify that there is an actual destination to break or
	// continue to.
	for(var i=0;i<this.labels.length;++i){var lab=this$1.labels[i];if(node.label==null||lab.name===node.label.name){if(lab.kind!=null&&(isBreak||lab.kind==="loop"))break;if(node.label&&isBreak)break;}}if(i===this.labels.length)this.raise(node.start,"Unsyntactic "+keyword);return this.finishNode(node,isBreak?"BreakStatement":"ContinueStatement");};pp$1.parseDebuggerStatement=function(node){this.next();this.semicolon();return this.finishNode(node,"DebuggerStatement");};pp$1.parseDoStatement=function(node){this.next();this.labels.push(loopLabel);node.body=this.parseStatement(false);this.labels.pop();this.expect(tt._while);node.test=this.parseParenExpression();if(this.options.ecmaVersion>=6)this.eat(tt.semi);else this.semicolon();return this.finishNode(node,"DoWhileStatement");};// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.
	pp$1.parseForStatement=function(node){this.next();this.labels.push(loopLabel);this.expect(tt.parenL);if(this.type===tt.semi)return this.parseFor(node,null);var isLet=this.isLet();if(this.type===tt._var||this.type===tt._const||isLet){var init$1=this.startNode(),kind=isLet?"let":this.value;this.next();this.parseVar(init$1,true,kind);this.finishNode(init$1,"VariableDeclaration");if((this.type===tt._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&init$1.declarations.length===1&&!(kind!=="var"&&init$1.declarations[0].init))return this.parseForIn(node,init$1);return this.parseFor(node,init$1);}var refDestructuringErrors=new DestructuringErrors();var init=this.parseExpression(true,refDestructuringErrors);if(this.type===tt._in||this.options.ecmaVersion>=6&&this.isContextual("of")){this.checkPatternErrors(refDestructuringErrors,true);this.toAssignable(init);this.checkLVal(init);return this.parseForIn(node,init);}else{this.checkExpressionErrors(refDestructuringErrors,true);}return this.parseFor(node,init);};pp$1.parseFunctionStatement=function(node){this.next();return this.parseFunction(node,true);};pp$1.parseIfStatement=function(node){this.next();node.test=this.parseParenExpression();node.consequent=this.parseStatement(false);node.alternate=this.eat(tt._else)?this.parseStatement(false):null;return this.finishNode(node,"IfStatement");};pp$1.parseReturnStatement=function(node){if(!this.inFunction&&!this.options.allowReturnOutsideFunction)this.raise(this.start,"'return' outside of function");this.next();// In `return` (and `break`/`continue`), the keywords with
	// optional arguments, we eagerly look for a semicolon or the
	// possibility to insert one.
	if(this.eat(tt.semi)||this.insertSemicolon())node.argument=null;else{node.argument=this.parseExpression();this.semicolon();}return this.finishNode(node,"ReturnStatement");};pp$1.parseSwitchStatement=function(node){var this$1=this;this.next();node.discriminant=this.parseParenExpression();node.cases=[];this.expect(tt.braceL);this.labels.push(switchLabel);// Statements under must be grouped (by label) in SwitchCase
	// nodes. `cur` is used to keep the node that we are currently
	// adding statements to.
	for(var cur,sawDefault=false;this.type!=tt.braceR;){if(this$1.type===tt._case||this$1.type===tt._default){var isCase=this$1.type===tt._case;if(cur)this$1.finishNode(cur,"SwitchCase");node.cases.push(cur=this$1.startNode());cur.consequent=[];this$1.next();if(isCase){cur.test=this$1.parseExpression();}else{if(sawDefault)this$1.raiseRecoverable(this$1.lastTokStart,"Multiple default clauses");sawDefault=true;cur.test=null;}this$1.expect(tt.colon);}else{if(!cur)this$1.unexpected();cur.consequent.push(this$1.parseStatement(true));}}if(cur)this.finishNode(cur,"SwitchCase");this.next();// Closing brace
	this.labels.pop();return this.finishNode(node,"SwitchStatement");};pp$1.parseThrowStatement=function(node){this.next();if(lineBreak.test(this.input.slice(this.lastTokEnd,this.start)))this.raise(this.lastTokEnd,"Illegal newline after throw");node.argument=this.parseExpression();this.semicolon();return this.finishNode(node,"ThrowStatement");};// Reused empty array added for node fields that are always empty.
	var empty=[];pp$1.parseTryStatement=function(node){this.next();node.block=this.parseBlock();node.handler=null;if(this.type===tt._catch){var clause=this.startNode();this.next();this.expect(tt.parenL);clause.param=this.parseBindingAtom();this.checkLVal(clause.param,true);this.expect(tt.parenR);clause.body=this.parseBlock();node.handler=this.finishNode(clause,"CatchClause");}node.finalizer=this.eat(tt._finally)?this.parseBlock():null;if(!node.handler&&!node.finalizer)this.raise(node.start,"Missing catch or finally clause");return this.finishNode(node,"TryStatement");};pp$1.parseVarStatement=function(node,kind){this.next();this.parseVar(node,false,kind);this.semicolon();return this.finishNode(node,"VariableDeclaration");};pp$1.parseWhileStatement=function(node){this.next();node.test=this.parseParenExpression();this.labels.push(loopLabel);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,"WhileStatement");};pp$1.parseWithStatement=function(node){if(this.strict)this.raise(this.start,"'with' in strict mode");this.next();node.object=this.parseParenExpression();node.body=this.parseStatement(false);return this.finishNode(node,"WithStatement");};pp$1.parseEmptyStatement=function(node){this.next();return this.finishNode(node,"EmptyStatement");};pp$1.parseLabeledStatement=function(node,maybeName,expr){var this$1=this;for(var i=0;i<this.labels.length;++i)/*istanbul ignore next*/{if(this$1.labels[i].name===maybeName)this$1.raise(expr.start,"Label '"+maybeName+"' is already declared");}var kind=this.type.isLoop?"loop":this.type===tt._switch?"switch":null;for(var i$1=this.labels.length-1;i$1>=0;i$1--){var label=this$1.labels[i$1];if(label.statementStart==node.start){label.statementStart=this$1.start;label.kind=kind;}else break;}this.labels.push({name:maybeName,kind:kind,statementStart:this.start});node.body=this.parseStatement(true);this.labels.pop();node.label=expr;return this.finishNode(node,"LabeledStatement");};pp$1.parseExpressionStatement=function(node,expr){node.expression=expr;this.semicolon();return this.finishNode(node,"ExpressionStatement");};// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).
	pp$1.parseBlock=function(allowStrict){var this$1=this;var node=this.startNode(),first=true,oldStrict;node.body=[];this.expect(tt.braceL);while(!this.eat(tt.braceR)){var stmt=this$1.parseStatement(true);node.body.push(stmt);if(first&&allowStrict&&this$1.isUseStrict(stmt)){oldStrict=this$1.strict;this$1.setStrict(this$1.strict=true);}first=false;}if(oldStrict===false)this.setStrict(false);return this.finishNode(node,"BlockStatement");};// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.
	pp$1.parseFor=function(node,init){node.init=init;this.expect(tt.semi);node.test=this.type===tt.semi?null:this.parseExpression();this.expect(tt.semi);node.update=this.type===tt.parenR?null:this.parseExpression();this.expect(tt.parenR);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,"ForStatement");};// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.
	pp$1.parseForIn=function(node,init){var type=this.type===tt._in?"ForInStatement":"ForOfStatement";this.next();node.left=init;node.right=this.parseExpression();this.expect(tt.parenR);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,type);};// Parse a list of variable declarations.
	pp$1.parseVar=function(node,isFor,kind){var this$1=this;node.declarations=[];node.kind=kind;for(;;){var decl=this$1.startNode();this$1.parseVarId(decl);if(this$1.eat(tt.eq)){decl.init=this$1.parseMaybeAssign(isFor);}else if(kind==="const"&&!(this$1.type===tt._in||this$1.options.ecmaVersion>=6&&this$1.isContextual("of"))){this$1.unexpected();}else if(decl.id.type!="Identifier"&&!(isFor&&(this$1.type===tt._in||this$1.isContextual("of")))){this$1.raise(this$1.lastTokEnd,"Complex binding patterns require an initialization value");}else{decl.init=null;}node.declarations.push(this$1.finishNode(decl,"VariableDeclarator"));if(!this$1.eat(tt.comma))break;}return node;};pp$1.parseVarId=function(decl){decl.id=this.parseBindingAtom();this.checkLVal(decl.id,true);};// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).
	pp$1.parseFunction=function(node,isStatement,allowExpressionBody){this.initFunction(node);if(this.options.ecmaVersion>=6)node.generator=this.eat(tt.star);var oldInGen=this.inGenerator;this.inGenerator=node.generator;if(isStatement||this.type===tt.name)node.id=this.parseIdent();this.parseFunctionParams(node);this.parseFunctionBody(node,allowExpressionBody);this.inGenerator=oldInGen;return this.finishNode(node,isStatement?"FunctionDeclaration":"FunctionExpression");};pp$1.parseFunctionParams=function(node){this.expect(tt.parenL);node.params=this.parseBindingList(tt.parenR,false,false,true);};// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).
	pp$1.parseClass=function(node,isStatement){var this$1=this;this.next();this.parseClassId(node,isStatement);this.parseClassSuper(node);var classBody=this.startNode();var hadConstructor=false;classBody.body=[];this.expect(tt.braceL);while(!this.eat(tt.braceR)){if(this$1.eat(tt.semi))continue;var method=this$1.startNode();var isGenerator=this$1.eat(tt.star);var isMaybeStatic=this$1.type===tt.name&&this$1.value==="static";this$1.parsePropertyName(method);method.static=isMaybeStatic&&this$1.type!==tt.parenL;if(method.static){if(isGenerator)this$1.unexpected();isGenerator=this$1.eat(tt.star);this$1.parsePropertyName(method);}method.kind="method";var isGetSet=false;if(!method.computed){var key=method.key;if(!isGenerator&&key.type==="Identifier"&&this$1.type!==tt.parenL&&(key.name==="get"||key.name==="set")){isGetSet=true;method.kind=key.name;key=this$1.parsePropertyName(method);}if(!method.static&&(key.type==="Identifier"&&key.name==="constructor"||key.type==="Literal"&&key.value==="constructor")){if(hadConstructor)this$1.raise(key.start,"Duplicate constructor in the same class");if(isGetSet)this$1.raise(key.start,"Constructor can't have get/set modifier");if(isGenerator)this$1.raise(key.start,"Constructor can't be a generator");method.kind="constructor";hadConstructor=true;}}this$1.parseClassMethod(classBody,method,isGenerator);if(isGetSet){var paramCount=method.kind==="get"?0:1;if(method.value.params.length!==paramCount){var start=method.value.start;if(method.kind==="get")this$1.raiseRecoverable(start,"getter should have no params");else this$1.raiseRecoverable(start,"setter should have exactly one param");}if(method.kind==="set"&&method.value.params[0].type==="RestElement")this$1.raise(method.value.params[0].start,"Setter cannot use rest params");}}node.body=this.finishNode(classBody,"ClassBody");return this.finishNode(node,isStatement?"ClassDeclaration":"ClassExpression");};pp$1.parseClassMethod=function(classBody,method,isGenerator){method.value=this.parseMethod(isGenerator);classBody.body.push(this.finishNode(method,"MethodDefinition"));};pp$1.parseClassId=function(node,isStatement){node.id=this.type===tt.name?this.parseIdent():isStatement?this.unexpected():null;};pp$1.parseClassSuper=function(node){node.superClass=this.eat(tt._extends)?this.parseExprSubscripts():null;};// Parses module export declaration.
	pp$1.parseExport=function(node){var this$1=this;this.next();// export * from '...'
	if(this.eat(tt.star)){this.expectContextual("from");node.source=this.type===tt.string?this.parseExprAtom():this.unexpected();this.semicolon();return this.finishNode(node,"ExportAllDeclaration");}if(this.eat(tt._default)){// export default ...
	var parens=this.type==tt.parenL;var expr=this.parseMaybeAssign();var needsSemi=true;if(!parens&&(expr.type=="FunctionExpression"||expr.type=="ClassExpression")){needsSemi=false;if(expr.id){expr.type=expr.type=="FunctionExpression"?"FunctionDeclaration":"ClassDeclaration";}}node.declaration=expr;if(needsSemi)this.semicolon();return this.finishNode(node,"ExportDefaultDeclaration");}// export var|const|let|function|class ...
	if(this.shouldParseExportStatement()){node.declaration=this.parseStatement(true);node.specifiers=[];node.source=null;}else{// export { x, y as z } [from '...']
	node.declaration=null;node.specifiers=this.parseExportSpecifiers();if(this.eatContextual("from")){node.source=this.type===tt.string?this.parseExprAtom():this.unexpected();}else{// check for keywords used as local names
	for(var i=0;i<node.specifiers.length;i++){if(this$1.keywords.test(node.specifiers[i].local.name)||this$1.reservedWords.test(node.specifiers[i].local.name)){this$1.unexpected(node.specifiers[i].local.start);}}node.source=null;}this.semicolon();}return this.finishNode(node,"ExportNamedDeclaration");};pp$1.shouldParseExportStatement=function(){return this.type.keyword||this.isLet();};// Parses a comma-separated list of module exports.
	pp$1.parseExportSpecifiers=function(){var this$1=this;var nodes=[],first=true;// export { x, y as z } [from '...']
	this.expect(tt.braceL);while(!this.eat(tt.braceR)){if(!first){this$1.expect(tt.comma);if(this$1.afterTrailingComma(tt.braceR))break;}else first=false;var node=this$1.startNode();node.local=this$1.parseIdent(this$1.type===tt._default);node.exported=this$1.eatContextual("as")?this$1.parseIdent(true):node.local;nodes.push(this$1.finishNode(node,"ExportSpecifier"));}return nodes;};// Parses import declaration.
	pp$1.parseImport=function(node){this.next();// import '...'
	if(this.type===tt.string){node.specifiers=empty;node.source=this.parseExprAtom();}else{node.specifiers=this.parseImportSpecifiers();this.expectContextual("from");node.source=this.type===tt.string?this.parseExprAtom():this.unexpected();}this.semicolon();return this.finishNode(node,"ImportDeclaration");};// Parses a comma-separated list of module imports.
	pp$1.parseImportSpecifiers=function(){var this$1=this;var nodes=[],first=true;if(this.type===tt.name){// import defaultObj, { x, y as z } from '...'
	var node=this.startNode();node.local=this.parseIdent();this.checkLVal(node.local,true);nodes.push(this.finishNode(node,"ImportDefaultSpecifier"));if(!this.eat(tt.comma))return nodes;}if(this.type===tt.star){var node$1=this.startNode();this.next();this.expectContextual("as");node$1.local=this.parseIdent();this.checkLVal(node$1.local,true);nodes.push(this.finishNode(node$1,"ImportNamespaceSpecifier"));return nodes;}this.expect(tt.braceL);while(!this.eat(tt.braceR)){if(!first){this$1.expect(tt.comma);if(this$1.afterTrailingComma(tt.braceR))break;}else first=false;var node$2=this$1.startNode();node$2.imported=this$1.parseIdent(true);if(this$1.eatContextual("as")){node$2.local=this$1.parseIdent();}else{node$2.local=node$2.imported;if(this$1.isKeyword(node$2.local.name))this$1.unexpected(node$2.local.start);if(this$1.reservedWordsStrict.test(node$2.local.name))this$1.raise(node$2.local.start,"The keyword '"+node$2.local.name+"' is reserved");}this$1.checkLVal(node$2.local,true);nodes.push(this$1.finishNode(node$2,"ImportSpecifier"));}return nodes;};var pp$2=Parser.prototype;// Convert existing expression atom to assignable pattern
	// if possible.
	pp$2.toAssignable=function(node,isBinding){var this$1=this;if(this.options.ecmaVersion>=6&&node){switch(node.type){case"Identifier":case"ObjectPattern":case"ArrayPattern":break;case"ObjectExpression":node.type="ObjectPattern";for(var i=0;i<node.properties.length;i++){var prop=node.properties[i];if(prop.kind!=="init")this$1.raise(prop.key.start,"Object pattern can't contain getter or setter");this$1.toAssignable(prop.value,isBinding);}break;case"ArrayExpression":node.type="ArrayPattern";this.toAssignableList(node.elements,isBinding);break;case"AssignmentExpression":if(node.operator==="="){node.type="AssignmentPattern";delete node.operator;// falls through to AssignmentPattern
	}else{this.raise(node.left.end,"Only '=' operator can be used for specifying default value.");break;}case"AssignmentPattern":if(node.right.type==="YieldExpression")this.raise(node.right.start,"Yield expression cannot be a default value");break;case"ParenthesizedExpression":node.expression=this.toAssignable(node.expression,isBinding);break;case"MemberExpression":if(!isBinding)break;default:this.raise(node.start,"Assigning to rvalue");}}return node;};// Convert list of expression atoms to binding list.
	pp$2.toAssignableList=function(exprList,isBinding){var this$1=this;var end=exprList.length;if(end){var last=exprList[end-1];if(last&&last.type=="RestElement"){--end;}else if(last&&last.type=="SpreadElement"){last.type="RestElement";var arg=last.argument;this.toAssignable(arg,isBinding);if(arg.type!=="Identifier"&&arg.type!=="MemberExpression"&&arg.type!=="ArrayPattern")this.unexpected(arg.start);--end;}if(isBinding&&last&&last.type==="RestElement"&&last.argument.type!=="Identifier")this.unexpected(last.argument.start);}for(var i=0;i<end;i++){var elt=exprList[i];if(elt)this$1.toAssignable(elt,isBinding);}return exprList;};// Parses spread element.
	pp$2.parseSpread=function(refDestructuringErrors){var node=this.startNode();this.next();node.argument=this.parseMaybeAssign(false,refDestructuringErrors);return this.finishNode(node,"SpreadElement");};pp$2.parseRest=function(allowNonIdent){var node=this.startNode();this.next();// RestElement inside of a function parameter must be an identifier
	if(allowNonIdent)node.argument=this.type===tt.name?this.parseIdent():this.unexpected();else node.argument=this.type===tt.name||this.type===tt.bracketL?this.parseBindingAtom():this.unexpected();return this.finishNode(node,"RestElement");};// Parses lvalue (assignable) atom.
	pp$2.parseBindingAtom=function(){if(this.options.ecmaVersion<6)return this.parseIdent();switch(this.type){case tt.name:return this.parseIdent();case tt.bracketL:var node=this.startNode();this.next();node.elements=this.parseBindingList(tt.bracketR,true,true);return this.finishNode(node,"ArrayPattern");case tt.braceL:return this.parseObj(true);default:this.unexpected();}};pp$2.parseBindingList=function(close,allowEmpty,allowTrailingComma,allowNonIdent){var this$1=this;var elts=[],first=true;while(!this.eat(close)){if(first)first=false;else this$1.expect(tt.comma);if(allowEmpty&&this$1.type===tt.comma){elts.push(null);}else if(allowTrailingComma&&this$1.afterTrailingComma(close)){break;}else if(this$1.type===tt.ellipsis){var rest=this$1.parseRest(allowNonIdent);this$1.parseBindingListItem(rest);elts.push(rest);if(this$1.type===tt.comma)this$1.raise(this$1.start,"Comma is not permitted after the rest element");this$1.expect(close);break;}else{var elem=this$1.parseMaybeDefault(this$1.start,this$1.startLoc);this$1.parseBindingListItem(elem);elts.push(elem);}}return elts;};pp$2.parseBindingListItem=function(param){return param;};// Parses assignment pattern around given atom if possible.
	pp$2.parseMaybeDefault=function(startPos,startLoc,left){left=left||this.parseBindingAtom();if(this.options.ecmaVersion<6||!this.eat(tt.eq))return left;var node=this.startNodeAt(startPos,startLoc);node.left=left;node.right=this.parseMaybeAssign();return this.finishNode(node,"AssignmentPattern");};// Verify that a node is an lval — something that can be assigned
	// to.
	pp$2.checkLVal=function(expr,isBinding,checkClashes){var this$1=this;switch(expr.type){case"Identifier":if(this.strict&&this.reservedWordsStrictBind.test(expr.name))this.raiseRecoverable(expr.start,(isBinding?"Binding ":"Assigning to ")+expr.name+" in strict mode");if(checkClashes){if(has(checkClashes,expr.name))this.raiseRecoverable(expr.start,"Argument name clash");checkClashes[expr.name]=true;}break;case"MemberExpression":if(isBinding)this.raiseRecoverable(expr.start,(isBinding?"Binding":"Assigning to")+" member expression");break;case"ObjectPattern":for(var i=0;i<expr.properties.length;i++)/*istanbul ignore next*/{this$1.checkLVal(expr.properties[i].value,isBinding,checkClashes);}break;case"ArrayPattern":for(var i$1=0;i$1<expr.elements.length;i$1++){var elem=expr.elements[i$1];if(elem)this$1.checkLVal(elem,isBinding,checkClashes);}break;case"AssignmentPattern":this.checkLVal(expr.left,isBinding,checkClashes);break;case"RestElement":this.checkLVal(expr.argument,isBinding,checkClashes);break;case"ParenthesizedExpression":this.checkLVal(expr.expression,isBinding,checkClashes);break;default:this.raise(expr.start,(isBinding?"Binding":"Assigning to")+" rvalue");}};var pp$3=Parser.prototype;// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.
	pp$3.checkPropClash=function(prop,propHash){if(this.options.ecmaVersion>=6&&(prop.computed||prop.method||prop.shorthand))return;var key=prop.key;var name;switch(key.type){case"Identifier":name=key.name;break;case"Literal":name=String(key.value);break;default:return;}var kind=prop.kind;if(this.options.ecmaVersion>=6){if(name==="__proto__"&&kind==="init"){if(propHash.proto)this.raiseRecoverable(key.start,"Redefinition of __proto__ property");propHash.proto=true;}return;}name="$"+name;var other=propHash[name];if(other){var isGetSet=kind!=="init";if((this.strict||isGetSet)&&other[kind]||!(isGetSet^other.init))this.raiseRecoverable(key.start,"Redefinition of property");}else{other=propHash[name]={init:false,get:false,set:false};}other[kind]=true;};// ### Expression parsing
	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function(s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.
	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).
	pp$3.parseExpression=function(noIn,refDestructuringErrors){var this$1=this;var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeAssign(noIn,refDestructuringErrors);if(this.type===tt.comma){var node=this.startNodeAt(startPos,startLoc);node.expressions=[expr];while(this.eat(tt.comma))/*istanbul ignore next*/{node.expressions.push(this$1.parseMaybeAssign(noIn,refDestructuringErrors));}return this.finishNode(node,"SequenceExpression");}return expr;};// Parse an assignment expression. This includes applications of
	// operators like `+=`.
	pp$3.parseMaybeAssign=function(noIn,refDestructuringErrors,afterLeftParse){if(this.inGenerator&&this.isContextual("yield"))return this.parseYield();var ownDestructuringErrors=false;if(!refDestructuringErrors){refDestructuringErrors=new DestructuringErrors();ownDestructuringErrors=true;}var startPos=this.start,startLoc=this.startLoc;if(this.type==tt.parenL||this.type==tt.name)this.potentialArrowAt=this.start;var left=this.parseMaybeConditional(noIn,refDestructuringErrors);if(afterLeftParse)left=afterLeftParse.call(this,left,startPos,startLoc);if(this.type.isAssign){this.checkPatternErrors(refDestructuringErrors,true);if(!ownDestructuringErrors)DestructuringErrors.call(refDestructuringErrors);var node=this.startNodeAt(startPos,startLoc);node.operator=this.value;node.left=this.type===tt.eq?this.toAssignable(left):left;refDestructuringErrors.shorthandAssign=0;// reset because shorthand default was used correctly
	this.checkLVal(left);this.next();node.right=this.parseMaybeAssign(noIn);return this.finishNode(node,"AssignmentExpression");}else{if(ownDestructuringErrors)this.checkExpressionErrors(refDestructuringErrors,true);}return left;};// Parse a ternary conditional (`?:`) operator.
	pp$3.parseMaybeConditional=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprOps(noIn,refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors))return expr;if(this.eat(tt.question)){var node=this.startNodeAt(startPos,startLoc);node.test=expr;node.consequent=this.parseMaybeAssign();this.expect(tt.colon);node.alternate=this.parseMaybeAssign(noIn);return this.finishNode(node,"ConditionalExpression");}return expr;};// Start the precedence parser.
	pp$3.parseExprOps=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeUnary(refDestructuringErrors,false);if(this.checkExpressionErrors(refDestructuringErrors))return expr;return this.parseExprOp(expr,startPos,startLoc,-1,noIn);};// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.
	pp$3.parseExprOp=function(left,leftStartPos,leftStartLoc,minPrec,noIn){var prec=this.type.binop;if(prec!=null&&(!noIn||this.type!==tt._in)){if(prec>minPrec){var logical=this.type===tt.logicalOR||this.type===tt.logicalAND;var op=this.value;this.next();var startPos=this.start,startLoc=this.startLoc;var right=this.parseExprOp(this.parseMaybeUnary(null,false),startPos,startLoc,prec,noIn);var node=this.buildBinary(leftStartPos,leftStartLoc,left,right,op,logical);return this.parseExprOp(node,leftStartPos,leftStartLoc,minPrec,noIn);}}return left;};pp$3.buildBinary=function(startPos,startLoc,left,right,op,logical){var node=this.startNodeAt(startPos,startLoc);node.left=left;node.operator=op;node.right=right;return this.finishNode(node,logical?"LogicalExpression":"BinaryExpression");};// Parse unary operators, both prefix and postfix.
	pp$3.parseMaybeUnary=function(refDestructuringErrors,sawUnary){var this$1=this;var startPos=this.start,startLoc=this.startLoc,expr;if(this.type.prefix){var node=this.startNode(),update=this.type===tt.incDec;node.operator=this.value;node.prefix=true;this.next();node.argument=this.parseMaybeUnary(null,true);this.checkExpressionErrors(refDestructuringErrors,true);if(update)this.checkLVal(node.argument);else if(this.strict&&node.operator==="delete"&&node.argument.type==="Identifier")this.raiseRecoverable(node.start,"Deleting local variable in strict mode");else sawUnary=true;expr=this.finishNode(node,update?"UpdateExpression":"UnaryExpression");}else{expr=this.parseExprSubscripts(refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors))return expr;while(this.type.postfix&&!this.canInsertSemicolon()){var node$1=this$1.startNodeAt(startPos,startLoc);node$1.operator=this$1.value;node$1.prefix=false;node$1.argument=expr;this$1.checkLVal(expr);this$1.next();expr=this$1.finishNode(node$1,"UpdateExpression");}}if(!sawUnary&&this.eat(tt.starstar))return this.buildBinary(startPos,startLoc,expr,this.parseMaybeUnary(null,false),"**",false);else return expr;};// Parse call, dot, and `[]`-subscript expressions.
	pp$3.parseExprSubscripts=function(refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprAtom(refDestructuringErrors);var skipArrowSubscripts=expr.type==="ArrowFunctionExpression"&&this.input.slice(this.lastTokStart,this.lastTokEnd)!==")";if(this.checkExpressionErrors(refDestructuringErrors)||skipArrowSubscripts)return expr;return this.parseSubscripts(expr,startPos,startLoc);};pp$3.parseSubscripts=function(base,startPos,startLoc,noCalls){var this$1=this;for(;;){if(this$1.eat(tt.dot)){var node=this$1.startNodeAt(startPos,startLoc);node.object=base;node.property=this$1.parseIdent(true);node.computed=false;base=this$1.finishNode(node,"MemberExpression");}else if(this$1.eat(tt.bracketL)){var node$1=this$1.startNodeAt(startPos,startLoc);node$1.object=base;node$1.property=this$1.parseExpression();node$1.computed=true;this$1.expect(tt.bracketR);base=this$1.finishNode(node$1,"MemberExpression");}else if(!noCalls&&this$1.eat(tt.parenL)){var node$2=this$1.startNodeAt(startPos,startLoc);node$2.callee=base;node$2.arguments=this$1.parseExprList(tt.parenR,false);base=this$1.finishNode(node$2,"CallExpression");}else if(this$1.type===tt.backQuote){var node$3=this$1.startNodeAt(startPos,startLoc);node$3.tag=base;node$3.quasi=this$1.parseTemplate();base=this$1.finishNode(node$3,"TaggedTemplateExpression");}else{return base;}}};// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.
	pp$3.parseExprAtom=function(refDestructuringErrors){var node,canBeArrow=this.potentialArrowAt==this.start;switch(this.type){case tt._super:if(!this.inFunction)this.raise(this.start,"'super' outside of function or class");case tt._this:var type=this.type===tt._this?"ThisExpression":"Super";node=this.startNode();this.next();return this.finishNode(node,type);case tt.name:var startPos=this.start,startLoc=this.startLoc;var id=this.parseIdent(this.type!==tt.name);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(tt.arrow))return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id]);return id;case tt.regexp:var value=this.value;node=this.parseLiteral(value.value);node.regex={pattern:value.pattern,flags:value.flags};return node;case tt.num:case tt.string:return this.parseLiteral(this.value);case tt._null:case tt._true:case tt._false:node=this.startNode();node.value=this.type===tt._null?null:this.type===tt._true;node.raw=this.type.keyword;this.next();return this.finishNode(node,"Literal");case tt.parenL:return this.parseParenAndDistinguishExpression(canBeArrow);case tt.bracketL:node=this.startNode();this.next();node.elements=this.parseExprList(tt.bracketR,true,true,refDestructuringErrors);return this.finishNode(node,"ArrayExpression");case tt.braceL:return this.parseObj(false,refDestructuringErrors);case tt._function:node=this.startNode();this.next();return this.parseFunction(node,false);case tt._class:return this.parseClass(this.startNode(),false);case tt._new:return this.parseNew();case tt.backQuote:return this.parseTemplate();default:this.unexpected();}};pp$3.parseLiteral=function(value){var node=this.startNode();node.value=value;node.raw=this.input.slice(this.start,this.end);this.next();return this.finishNode(node,"Literal");};pp$3.parseParenExpression=function(){this.expect(tt.parenL);var val=this.parseExpression();this.expect(tt.parenR);return val;};pp$3.parseParenAndDistinguishExpression=function(canBeArrow){var this$1=this;var startPos=this.start,startLoc=this.startLoc,val;if(this.options.ecmaVersion>=6){this.next();var innerStartPos=this.start,innerStartLoc=this.startLoc;var exprList=[],first=true;var refDestructuringErrors=new DestructuringErrors(),spreadStart,innerParenStart;while(this.type!==tt.parenR){first?first=false:this$1.expect(tt.comma);if(this$1.type===tt.ellipsis){spreadStart=this$1.start;exprList.push(this$1.parseParenItem(this$1.parseRest()));break;}else{if(this$1.type===tt.parenL&&!innerParenStart){innerParenStart=this$1.start;}exprList.push(this$1.parseMaybeAssign(false,refDestructuringErrors,this$1.parseParenItem));}}var innerEndPos=this.start,innerEndLoc=this.startLoc;this.expect(tt.parenR);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(tt.arrow)){this.checkPatternErrors(refDestructuringErrors,true);if(innerParenStart)this.unexpected(innerParenStart);return this.parseParenArrowList(startPos,startLoc,exprList);}if(!exprList.length)this.unexpected(this.lastTokStart);if(spreadStart)this.unexpected(spreadStart);this.checkExpressionErrors(refDestructuringErrors,true);if(exprList.length>1){val=this.startNodeAt(innerStartPos,innerStartLoc);val.expressions=exprList;this.finishNodeAt(val,"SequenceExpression",innerEndPos,innerEndLoc);}else{val=exprList[0];}}else{val=this.parseParenExpression();}if(this.options.preserveParens){var par=this.startNodeAt(startPos,startLoc);par.expression=val;return this.finishNode(par,"ParenthesizedExpression");}else{return val;}};pp$3.parseParenItem=function(item){return item;};pp$3.parseParenArrowList=function(startPos,startLoc,exprList){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList);};// New's precedence is slightly tricky. It must allow its argument to
	// be a `[]` or dot subscript expression, but not a call — at least,
	// not without wrapping it in parentheses. Thus, it uses the noCalls
	// argument to parseSubscripts to prevent it from consuming the
	// argument list.
	var empty$1=[];pp$3.parseNew=function(){var node=this.startNode();var meta=this.parseIdent(true);if(this.options.ecmaVersion>=6&&this.eat(tt.dot)){node.meta=meta;node.property=this.parseIdent(true);if(node.property.name!=="target")this.raiseRecoverable(node.property.start,"The only valid meta property for new is new.target");if(!this.inFunction)this.raiseRecoverable(node.start,"new.target can only be used in functions");return this.finishNode(node,"MetaProperty");}var startPos=this.start,startLoc=this.startLoc;node.callee=this.parseSubscripts(this.parseExprAtom(),startPos,startLoc,true);if(this.eat(tt.parenL))node.arguments=this.parseExprList(tt.parenR,false);else node.arguments=empty$1;return this.finishNode(node,"NewExpression");};// Parse template expression.
	pp$3.parseTemplateElement=function(){var elem=this.startNode();elem.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,'\n'),cooked:this.value};this.next();elem.tail=this.type===tt.backQuote;return this.finishNode(elem,"TemplateElement");};pp$3.parseTemplate=function(){var this$1=this;var node=this.startNode();this.next();node.expressions=[];var curElt=this.parseTemplateElement();node.quasis=[curElt];while(!curElt.tail){this$1.expect(tt.dollarBraceL);node.expressions.push(this$1.parseExpression());this$1.expect(tt.braceR);node.quasis.push(curElt=this$1.parseTemplateElement());}this.next();return this.finishNode(node,"TemplateLiteral");};// Parse an object literal or binding pattern.
	pp$3.parseObj=function(isPattern,refDestructuringErrors){var this$1=this;var node=this.startNode(),first=true,propHash={};node.properties=[];this.next();while(!this.eat(tt.braceR)){if(!first){this$1.expect(tt.comma);if(this$1.afterTrailingComma(tt.braceR))break;}else first=false;var prop=this$1.startNode(),isGenerator,startPos,startLoc;if(this$1.options.ecmaVersion>=6){prop.method=false;prop.shorthand=false;if(isPattern||refDestructuringErrors){startPos=this$1.start;startLoc=this$1.startLoc;}if(!isPattern)isGenerator=this$1.eat(tt.star);}this$1.parsePropertyName(prop);this$1.parsePropertyValue(prop,isPattern,isGenerator,startPos,startLoc,refDestructuringErrors);this$1.checkPropClash(prop,propHash);node.properties.push(this$1.finishNode(prop,"Property"));}return this.finishNode(node,isPattern?"ObjectPattern":"ObjectExpression");};pp$3.parsePropertyValue=function(prop,isPattern,isGenerator,startPos,startLoc,refDestructuringErrors){if(this.eat(tt.colon)){prop.value=isPattern?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(false,refDestructuringErrors);prop.kind="init";}else if(this.options.ecmaVersion>=6&&this.type===tt.parenL){if(isPattern)this.unexpected();prop.kind="init";prop.method=true;prop.value=this.parseMethod(isGenerator);}else if(this.options.ecmaVersion>=5&&!prop.computed&&prop.key.type==="Identifier"&&(prop.key.name==="get"||prop.key.name==="set")&&this.type!=tt.comma&&this.type!=tt.braceR){if(isGenerator||isPattern)this.unexpected();prop.kind=prop.key.name;this.parsePropertyName(prop);prop.value=this.parseMethod(false);var paramCount=prop.kind==="get"?0:1;if(prop.value.params.length!==paramCount){var start=prop.value.start;if(prop.kind==="get")this.raiseRecoverable(start,"getter should have no params");else this.raiseRecoverable(start,"setter should have exactly one param");}if(prop.kind==="set"&&prop.value.params[0].type==="RestElement")this.raiseRecoverable(prop.value.params[0].start,"Setter cannot use rest params");}else if(this.options.ecmaVersion>=6&&!prop.computed&&prop.key.type==="Identifier"){if(this.keywords.test(prop.key.name)||(this.strict?this.reservedWordsStrictBind:this.reservedWords).test(prop.key.name)||this.inGenerator&&prop.key.name=="yield")this.raiseRecoverable(prop.key.start,"'"+prop.key.name+"' can not be used as shorthand property");prop.kind="init";if(isPattern){prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key);}else if(this.type===tt.eq&&refDestructuringErrors){if(!refDestructuringErrors.shorthandAssign)refDestructuringErrors.shorthandAssign=this.start;prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key);}else{prop.value=prop.key;}prop.shorthand=true;}else this.unexpected();};pp$3.parsePropertyName=function(prop){if(this.options.ecmaVersion>=6){if(this.eat(tt.bracketL)){prop.computed=true;prop.key=this.parseMaybeAssign();this.expect(tt.bracketR);return prop.key;}else{prop.computed=false;}}return prop.key=this.type===tt.num||this.type===tt.string?this.parseExprAtom():this.parseIdent(true);};// Initialize empty function node.
	pp$3.initFunction=function(node){node.id=null;if(this.options.ecmaVersion>=6){node.generator=false;node.expression=false;}};// Parse object or class method.
	pp$3.parseMethod=function(isGenerator){var node=this.startNode(),oldInGen=this.inGenerator;this.inGenerator=isGenerator;this.initFunction(node);this.expect(tt.parenL);node.params=this.parseBindingList(tt.parenR,false,false);if(this.options.ecmaVersion>=6)node.generator=isGenerator;this.parseFunctionBody(node,false);this.inGenerator=oldInGen;return this.finishNode(node,"FunctionExpression");};// Parse arrow function expression with given parameters.
	pp$3.parseArrowExpression=function(node,params){var oldInGen=this.inGenerator;this.inGenerator=false;this.initFunction(node);node.params=this.toAssignableList(params,true);this.parseFunctionBody(node,true);this.inGenerator=oldInGen;return this.finishNode(node,"ArrowFunctionExpression");};// Parse function body and check parameters.
	pp$3.parseFunctionBody=function(node,isArrowFunction){var isExpression=isArrowFunction&&this.type!==tt.braceL;if(isExpression){node.body=this.parseMaybeAssign();node.expression=true;}else{// Start a new scope with regard to labels and the `inFunction`
	// flag (restore them to their old value afterwards).
	var oldInFunc=this.inFunction,oldLabels=this.labels;this.inFunction=true;this.labels=[];node.body=this.parseBlock(true);node.expression=false;this.inFunction=oldInFunc;this.labels=oldLabels;}// If this is a strict mode function, verify that argument names
	// are not repeated, and it does not try to bind the words `eval`
	// or `arguments`.
	var useStrict=!isExpression&&node.body.body.length&&this.isUseStrict(node.body.body[0])?node.body.body[0]:null;if(this.strict||useStrict){var oldStrict=this.strict;this.strict=true;if(node.id)this.checkLVal(node.id,true);this.checkParams(node,useStrict);this.strict=oldStrict;}else if(isArrowFunction){this.checkParams(node,useStrict);}};// Checks function params for various disallowed patterns such as using "eval"
	// or "arguments" and duplicate parameters.
	pp$3.checkParams=function(node,useStrict){var this$1=this;var nameHash={};for(var i=0;i<node.params.length;i++){if(useStrict&&this$1.options.ecmaVersion>=7&&node.params[i].type!=="Identifier")this$1.raiseRecoverable(useStrict.start,"Illegal 'use strict' directive in function with non-simple parameter list");this$1.checkLVal(node.params[i],true,nameHash);}};// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).
	pp$3.parseExprList=function(close,allowTrailingComma,allowEmpty,refDestructuringErrors){var this$1=this;var elts=[],first=true;while(!this.eat(close)){if(!first){this$1.expect(tt.comma);if(allowTrailingComma&&this$1.afterTrailingComma(close))break;}else first=false;var elt;if(allowEmpty&&this$1.type===tt.comma)elt=null;else if(this$1.type===tt.ellipsis){elt=this$1.parseSpread(refDestructuringErrors);if(this$1.type===tt.comma&&refDestructuringErrors&&!refDestructuringErrors.trailingComma){refDestructuringErrors.trailingComma=this$1.lastTokStart;}}else elt=this$1.parseMaybeAssign(false,refDestructuringErrors);elts.push(elt);}return elts;};// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.
	pp$3.parseIdent=function(liberal){var node=this.startNode();if(liberal&&this.options.allowReserved=="never")liberal=false;if(this.type===tt.name){if(!liberal&&(this.strict?this.reservedWordsStrict:this.reservedWords).test(this.value)&&(this.options.ecmaVersion>=6||this.input.slice(this.start,this.end).indexOf("\\")==-1))this.raiseRecoverable(this.start,"The keyword '"+this.value+"' is reserved");if(!liberal&&this.inGenerator&&this.value==="yield")this.raiseRecoverable(this.start,"Can not use 'yield' as identifier inside a generator");node.name=this.value;}else if(liberal&&this.type.keyword){node.name=this.type.keyword;}else{this.unexpected();}this.next();return this.finishNode(node,"Identifier");};// Parses yield expression inside generator.
	pp$3.parseYield=function(){var node=this.startNode();this.next();if(this.type==tt.semi||this.canInsertSemicolon()||this.type!=tt.star&&!this.type.startsExpr){node.delegate=false;node.argument=null;}else{node.delegate=this.eat(tt.star);node.argument=this.parseMaybeAssign();}return this.finishNode(node,"YieldExpression");};var pp$4=Parser.prototype;// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.
	pp$4.raise=function(pos,message){var loc=getLineInfo(this.input,pos);message+=" ("+loc.line+":"+loc.column+")";var err=new SyntaxError(message);err.pos=pos;err.loc=loc;err.raisedAt=this.pos;throw err;};pp$4.raiseRecoverable=pp$4.raise;pp$4.curPosition=function(){if(this.options.locations){return new Position(this.curLine,this.pos-this.lineStart);}};var Node=function Node(parser,pos,loc){this.type="";this.start=pos;this.end=0;if(parser.options.locations)this.loc=new SourceLocation(parser,loc);if(parser.options.directSourceFile)this.sourceFile=parser.options.directSourceFile;if(parser.options.ranges)this.range=[pos,0];};// Start an AST node, attaching a start offset.
	var pp$5=Parser.prototype;pp$5.startNode=function(){return new Node(this,this.start,this.startLoc);};pp$5.startNodeAt=function(pos,loc){return new Node(this,pos,loc);};// Finish an AST node, adding `type` and `end` properties.
	function finishNodeAt(node,type,pos,loc){node.type=type;node.end=pos;if(this.options.locations)node.loc.end=loc;if(this.options.ranges)node.range[1]=pos;return node;}pp$5.finishNode=function(node,type){return finishNodeAt.call(this,node,type,this.lastTokEnd,this.lastTokEndLoc);};// Finish node at given position
	pp$5.finishNodeAt=function(node,type,pos,loc){return finishNodeAt.call(this,node,type,pos,loc);};var TokContext=function TokContext(token,isExpr,preserveSpace,override){this.token=token;this.isExpr=!!isExpr;this.preserveSpace=!!preserveSpace;this.override=override;};var types={b_stat:new TokContext("{",false),b_expr:new TokContext("{",true),b_tmpl:new TokContext("${",true),p_stat:new TokContext("(",false),p_expr:new TokContext("(",true),q_tmpl:new TokContext("`",true,true,function(p){return p.readTmplToken();}),f_expr:new TokContext("function",true)};var pp$6=Parser.prototype;pp$6.initialContext=function(){return[types.b_stat];};pp$6.braceIsBlock=function(prevType){if(prevType===tt.colon){var parent=this.curContext();if(parent===types.b_stat||parent===types.b_expr)return!parent.isExpr;}if(prevType===tt._return)return lineBreak.test(this.input.slice(this.lastTokEnd,this.start));if(prevType===tt._else||prevType===tt.semi||prevType===tt.eof||prevType===tt.parenR)return true;if(prevType==tt.braceL)return this.curContext()===types.b_stat;return!this.exprAllowed;};pp$6.updateContext=function(prevType){var update,type=this.type;if(type.keyword&&prevType==tt.dot)this.exprAllowed=false;else if(update=type.updateContext)update.call(this,prevType);else this.exprAllowed=type.beforeExpr;};// Token-specific context update code
	tt.parenR.updateContext=tt.braceR.updateContext=function(){if(this.context.length==1){this.exprAllowed=true;return;}var out=this.context.pop();if(out===types.b_stat&&this.curContext()===types.f_expr){this.context.pop();this.exprAllowed=false;}else if(out===types.b_tmpl){this.exprAllowed=true;}else{this.exprAllowed=!out.isExpr;}};tt.braceL.updateContext=function(prevType){this.context.push(this.braceIsBlock(prevType)?types.b_stat:types.b_expr);this.exprAllowed=true;};tt.dollarBraceL.updateContext=function(){this.context.push(types.b_tmpl);this.exprAllowed=true;};tt.parenL.updateContext=function(prevType){var statementParens=prevType===tt._if||prevType===tt._for||prevType===tt._with||prevType===tt._while;this.context.push(statementParens?types.p_stat:types.p_expr);this.exprAllowed=true;};tt.incDec.updateContext=function(){// tokExprAllowed stays unchanged
	};tt._function.updateContext=function(prevType){if(prevType.beforeExpr&&prevType!==tt.semi&&prevType!==tt._else&&!((prevType===tt.colon||prevType===tt.braceL)&&this.curContext()===types.b_stat))this.context.push(types.f_expr);this.exprAllowed=false;};tt.backQuote.updateContext=function(){if(this.curContext()===types.q_tmpl)this.context.pop();else this.context.push(types.q_tmpl);this.exprAllowed=false;};// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.
	var Token=function Token(p){this.type=p.type;this.value=p.value;this.start=p.start;this.end=p.end;if(p.options.locations)this.loc=new SourceLocation(p,p.startLoc,p.endLoc);if(p.options.ranges)this.range=[p.start,p.end];};// ## Tokenizer
	var pp$7=Parser.prototype;// Are we running under Rhino?
	var isRhino=/*istanbul ignore next*/(typeof Packages==="undefined"?"undefined":(0,_typeof3.default)(Packages))=="object"&&Object.prototype.toString.call(Packages)=="[object JavaPackage]";// Move to the next token
	pp$7.next=function(){if(this.options.onToken)this.options.onToken(new Token(this));this.lastTokEnd=this.end;this.lastTokStart=this.start;this.lastTokEndLoc=this.endLoc;this.lastTokStartLoc=this.startLoc;this.nextToken();};pp$7.getToken=function(){this.next();return new Token(this);};// If we're in an ES6 environment, make parsers iterable
	if(typeof/*istanbul ignore next*/_symbol2.default!=="undefined")pp$7[/*istanbul ignore next*/_iterator2.default]=function(){var self=this;return{next:function/*istanbul ignore next*/next(){var token=self.getToken();return{done:token.type===tt.eof,value:token};}};};// Toggle strict mode. Re-reads the next number or string to please
	// pedantic tests (`"use strict"; 010;` should fail).
	pp$7.setStrict=function(strict){var this$1=this;this.strict=strict;if(this.type!==tt.num&&this.type!==tt.string)return;this.pos=this.start;if(this.options.locations){while(this.pos<this.lineStart){this$1.lineStart=this$1.input.lastIndexOf("\n",this$1.lineStart-2)+1;--this$1.curLine;}}this.nextToken();};pp$7.curContext=function(){return this.context[this.context.length-1];};// Read a single token, updating the parser object's token-related
	// properties.
	pp$7.nextToken=function(){var curContext=this.curContext();if(!curContext||!curContext.preserveSpace)this.skipSpace();this.start=this.pos;if(this.options.locations)this.startLoc=this.curPosition();if(this.pos>=this.input.length)return this.finishToken(tt.eof);if(curContext.override)return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());};pp$7.readToken=function(code){// Identifier or keyword. '\uXXXX' sequences are allowed in
	// identifiers, so '\' also dispatches to that.
	if(isIdentifierStart(code,this.options.ecmaVersion>=6)||code===92/* '\' */)return this.readWord();return this.getTokenFromCode(code);};pp$7.fullCharCodeAtPos=function(){var code=this.input.charCodeAt(this.pos);if(code<=0xd7ff||code>=0xe000)return code;var next=this.input.charCodeAt(this.pos+1);return(code<<10)+next-0x35fdc00;};pp$7.skipBlockComment=function(){var this$1=this;var startLoc=this.options.onComment&&this.curPosition();var start=this.pos,end=this.input.indexOf("*/",this.pos+=2);if(end===-1)this.raise(this.pos-2,"Unterminated comment");this.pos=end+2;if(this.options.locations){lineBreakG.lastIndex=start;var match;while((match=lineBreakG.exec(this.input))&&match.index<this.pos){++this$1.curLine;this$1.lineStart=match.index+match[0].length;}}if(this.options.onComment)this.options.onComment(true,this.input.slice(start+2,end),start,this.pos,startLoc,this.curPosition());};pp$7.skipLineComment=function(startSkip){var this$1=this;var start=this.pos;var startLoc=this.options.onComment&&this.curPosition();var ch=this.input.charCodeAt(this.pos+=startSkip);while(this.pos<this.input.length&&ch!==10&&ch!==13&&ch!==8232&&ch!==8233){++this$1.pos;ch=this$1.input.charCodeAt(this$1.pos);}if(this.options.onComment)this.options.onComment(false,this.input.slice(start+startSkip,this.pos),start,this.pos,startLoc,this.curPosition());};// Called at the start of the parse and after every token. Skips
	// whitespace and comments, and.
	pp$7.skipSpace=function(){var this$1=this;loop:while(this.pos<this.input.length){var ch=this$1.input.charCodeAt(this$1.pos);switch(ch){case 32:case 160:// ' '
	++this$1.pos;break;case 13:if(this$1.input.charCodeAt(this$1.pos+1)===10){++this$1.pos;}case 10:case 8232:case 8233:++this$1.pos;if(this$1.options.locations){++this$1.curLine;this$1.lineStart=this$1.pos;}break;case 47:// '/'
	switch(this$1.input.charCodeAt(this$1.pos+1)){case 42:// '*'
	this$1.skipBlockComment();break;case 47:this$1.skipLineComment(2);break;default:break loop;}break;default:if(ch>8&&ch<14||ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))){++this$1.pos;}else{break loop;}}}};// Called at the end of every token. Sets `end`, `val`, and
	// maintains `context` and `exprAllowed`, and skips the space after
	// the token, so that the next one's `start` will point at the
	// right position.
	pp$7.finishToken=function(type,val){this.end=this.pos;if(this.options.locations)this.endLoc=this.curPosition();var prevType=this.type;this.type=type;this.value=val;this.updateContext(prevType);};// ### Token reading
	// This is the function that is called to fetch the next token. It
	// is somewhat obscure, because it works in character codes rather
	// than characters, and because operator parsing has been inlined
	// into it.
	//
	// All in the name of speed.
	//
	pp$7.readToken_dot=function(){var next=this.input.charCodeAt(this.pos+1);if(next>=48&&next<=57)return this.readNumber(true);var next2=this.input.charCodeAt(this.pos+2);if(this.options.ecmaVersion>=6&&next===46&&next2===46){// 46 = dot '.'
	this.pos+=3;return this.finishToken(tt.ellipsis);}else{++this.pos;return this.finishToken(tt.dot);}};pp$7.readToken_slash=function(){// '/'
	var next=this.input.charCodeAt(this.pos+1);if(this.exprAllowed){++this.pos;return this.readRegexp();}if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(tt.slash,1);};pp$7.readToken_mult_modulo_exp=function(code){// '%*'
	var next=this.input.charCodeAt(this.pos+1);var size=1;var tokentype=code===42?tt.star:tt.modulo;// exponentiation operator ** and **=
	if(this.options.ecmaVersion>=7&&next===42){++size;tokentype=tt.starstar;next=this.input.charCodeAt(this.pos+2);}if(next===61)return this.finishOp(tt.assign,size+1);return this.finishOp(tokentype,size);};pp$7.readToken_pipe_amp=function(code){// '|&'
	var next=this.input.charCodeAt(this.pos+1);if(next===code)return this.finishOp(code===124?tt.logicalOR:tt.logicalAND,2);if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(code===124?tt.bitwiseOR:tt.bitwiseAND,1);};pp$7.readToken_caret=function(){// '^'
	var next=this.input.charCodeAt(this.pos+1);if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(tt.bitwiseXOR,1);};pp$7.readToken_plus_min=function(code){// '+-'
	var next=this.input.charCodeAt(this.pos+1);if(next===code){if(next==45&&this.input.charCodeAt(this.pos+2)==62&&lineBreak.test(this.input.slice(this.lastTokEnd,this.pos))){// A `-->` line comment
	this.skipLineComment(3);this.skipSpace();return this.nextToken();}return this.finishOp(tt.incDec,2);}if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(tt.plusMin,1);};pp$7.readToken_lt_gt=function(code){// '<>'
	var next=this.input.charCodeAt(this.pos+1);var size=1;if(next===code){size=code===62&&this.input.charCodeAt(this.pos+2)===62?3:2;if(this.input.charCodeAt(this.pos+size)===61)return this.finishOp(tt.assign,size+1);return this.finishOp(tt.bitShift,size);}if(next==33&&code==60&&this.input.charCodeAt(this.pos+2)==45&&this.input.charCodeAt(this.pos+3)==45){if(this.inModule)this.unexpected();// `<!--`, an XML-style comment that should be interpreted as a line comment
	this.skipLineComment(4);this.skipSpace();return this.nextToken();}if(next===61)size=2;return this.finishOp(tt.relational,size);};pp$7.readToken_eq_excl=function(code){// '=!'
	var next=this.input.charCodeAt(this.pos+1);if(next===61)return this.finishOp(tt.equality,this.input.charCodeAt(this.pos+2)===61?3:2);if(code===61&&next===62&&this.options.ecmaVersion>=6){// '=>'
	this.pos+=2;return this.finishToken(tt.arrow);}return this.finishOp(code===61?tt.eq:tt.prefix,1);};pp$7.getTokenFromCode=function(code){switch(code){// The interpretation of a dot depends on whether it is followed
	// by a digit or another two dots.
	case 46:// '.'
	return this.readToken_dot();// Punctuation tokens.
	case 40:++this.pos;return this.finishToken(tt.parenL);case 41:++this.pos;return this.finishToken(tt.parenR);case 59:++this.pos;return this.finishToken(tt.semi);case 44:++this.pos;return this.finishToken(tt.comma);case 91:++this.pos;return this.finishToken(tt.bracketL);case 93:++this.pos;return this.finishToken(tt.bracketR);case 123:++this.pos;return this.finishToken(tt.braceL);case 125:++this.pos;return this.finishToken(tt.braceR);case 58:++this.pos;return this.finishToken(tt.colon);case 63:++this.pos;return this.finishToken(tt.question);case 96:// '`'
	if(this.options.ecmaVersion<6)break;++this.pos;return this.finishToken(tt.backQuote);case 48:// '0'
	var next=this.input.charCodeAt(this.pos+1);if(next===120||next===88)return this.readRadixNumber(16);// '0x', '0X' - hex number
	if(this.options.ecmaVersion>=6){if(next===111||next===79)return this.readRadixNumber(8);// '0o', '0O' - octal number
	if(next===98||next===66)return this.readRadixNumber(2);// '0b', '0B' - binary number
	}// Anything else beginning with a digit is an integer, octal
	// number, or float.
	case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:// 1-9
	return this.readNumber(false);// Quotes produce strings.
	case 34:case 39:// '"', "'"
	return this.readString(code);// Operators are parsed inline in tiny state machines. '=' (61) is
	// often referred to. `finishOp` simply skips the amount of
	// characters it is given as second argument, and returns a token
	// of the type given by its first argument.
	case 47:// '/'
	return this.readToken_slash();case 37:case 42:// '%*'
	return this.readToken_mult_modulo_exp(code);case 124:case 38:// '|&'
	return this.readToken_pipe_amp(code);case 94:// '^'
	return this.readToken_caret();case 43:case 45:// '+-'
	return this.readToken_plus_min(code);case 60:case 62:// '<>'
	return this.readToken_lt_gt(code);case 61:case 33:// '=!'
	return this.readToken_eq_excl(code);case 126:// '~'
	return this.finishOp(tt.prefix,1);}this.raise(this.pos,"Unexpected character '"+codePointToString(code)+"'");};pp$7.finishOp=function(type,size){var str=this.input.slice(this.pos,this.pos+size);this.pos+=size;return this.finishToken(type,str);};// Parse a regular expression. Some context-awareness is necessary,
	// since a '/' inside a '[]' set does not end the expression.
	function tryCreateRegexp(src,flags,throwErrorAt,parser){try{return new RegExp(src,flags);}catch(e){if(throwErrorAt!==undefined){if(e instanceof SyntaxError)parser.raise(throwErrorAt,"Error parsing regular expression: "+e.message);throw e;}}}var regexpUnicodeSupport=!!tryCreateRegexp("￿","u");pp$7.readRegexp=function(){var this$1=this;var escaped,inClass,start=this.pos;for(;;){if(this$1.pos>=this$1.input.length)this$1.raise(start,"Unterminated regular expression");var ch=this$1.input.charAt(this$1.pos);if(lineBreak.test(ch))this$1.raise(start,"Unterminated regular expression");if(!escaped){if(ch==="[")inClass=true;else if(ch==="]"&&inClass)inClass=false;else if(ch==="/"&&!inClass)break;escaped=ch==="\\";}else escaped=false;++this$1.pos;}var content=this.input.slice(start,this.pos);++this.pos;// Need to use `readWord1` because '\uXXXX' sequences are allowed
	// here (don't ask).
	var mods=this.readWord1();var tmp=content,tmpFlags="";if(mods){var validFlags=/^[gim]*$/;if(this.options.ecmaVersion>=6)validFlags=/^[gimuy]*$/;if(!validFlags.test(mods))this.raise(start,"Invalid regular expression flag");if(mods.indexOf("u")>=0){if(regexpUnicodeSupport){tmpFlags="u";}else{// Replace each astral symbol and every Unicode escape sequence that
	// possibly represents an astral symbol or a paired surrogate with a
	// single ASCII symbol to avoid throwing on regular expressions that
	// are only valid in combination with the `/u` flag.
	// Note: replacing with the ASCII symbol `x` might cause false
	// negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	// perfectly valid pattern that is equivalent to `[a-b]`, but it would
	// be replaced by `[x-b]` which throws an error.
	tmp=tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g,function(_match,code,offset){code=Number("0x"+code);if(code>0x10FFFF)this$1.raise(start+offset+3,"Code point out of bounds");return"x";});tmp=tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"x");tmpFlags=tmpFlags.replace("u","");}}}// Detect invalid regular expressions.
	var value=null;// Rhino's regular expression parser is flaky and throws uncatchable exceptions,
	// so don't do detection if we are running under Rhino
	if(!isRhino){tryCreateRegexp(tmp,tmpFlags,start,this);// Get a regular expression object for this pattern-flag pair, or `null` in
	// case the current environment doesn't support the flags it uses.
	value=tryCreateRegexp(content,mods);}return this.finishToken(tt.regexp,{pattern:content,flags:mods,value:value});};// Read an integer in the given radix. Return null if zero digits
	// were read, the integer value otherwise. When `len` is given, this
	// will return `null` unless the integer has exactly `len` digits.
	pp$7.readInt=function(radix,len){var this$1=this;var start=this.pos,total=0;for(var i=0,e=len==null?Infinity:len;i<e;++i){var code=this$1.input.charCodeAt(this$1.pos),val;if(code>=97)val=code-97+10;// a
	else if(code>=65)val=code-65+10;// A
	else if(code>=48&&code<=57)val=code-48;// 0-9
	else val=Infinity;if(val>=radix)break;++this$1.pos;total=total*radix+val;}if(this.pos===start||len!=null&&this.pos-start!==len)return null;return total;};pp$7.readRadixNumber=function(radix){this.pos+=2;// 0x
	var val=this.readInt(radix);if(val==null)this.raise(this.start+2,"Expected number in radix "+radix);if(isIdentifierStart(this.fullCharCodeAtPos()))this.raise(this.pos,"Identifier directly after number");return this.finishToken(tt.num,val);};// Read an integer, octal integer, or floating-point number.
	pp$7.readNumber=function(startsWithDot){var start=this.pos,isFloat=false,octal=this.input.charCodeAt(this.pos)===48;if(!startsWithDot&&this.readInt(10)===null)this.raise(start,"Invalid number");var next=this.input.charCodeAt(this.pos);if(next===46){// '.'
	++this.pos;this.readInt(10);isFloat=true;next=this.input.charCodeAt(this.pos);}if(next===69||next===101){// 'eE'
	next=this.input.charCodeAt(++this.pos);if(next===43||next===45)++this.pos;// '+-'
	if(this.readInt(10)===null)this.raise(start,"Invalid number");isFloat=true;}if(isIdentifierStart(this.fullCharCodeAtPos()))this.raise(this.pos,"Identifier directly after number");var str=this.input.slice(start,this.pos),val;if(isFloat)val=parseFloat(str);else if(!octal||str.length===1)val=parseInt(str,10);else if(/[89]/.test(str)||this.strict)this.raise(start,"Invalid number");else val=parseInt(str,8);return this.finishToken(tt.num,val);};// Read a string value, interpreting backslash-escapes.
	pp$7.readCodePoint=function(){var ch=this.input.charCodeAt(this.pos),code;if(ch===123){if(this.options.ecmaVersion<6)this.unexpected();var codePos=++this.pos;code=this.readHexChar(this.input.indexOf('}',this.pos)-this.pos);++this.pos;if(code>0x10FFFF)this.raise(codePos,"Code point out of bounds");}else{code=this.readHexChar(4);}return code;};function codePointToString(code){// UTF-16 Decoding
	if(code<=0xFFFF)return String.fromCharCode(code);code-=0x10000;return String.fromCharCode((code>>10)+0xD800,(code&1023)+0xDC00);}pp$7.readString=function(quote){var this$1=this;var out="",chunkStart=++this.pos;for(;;){if(this$1.pos>=this$1.input.length)this$1.raise(this$1.start,"Unterminated string constant");var ch=this$1.input.charCodeAt(this$1.pos);if(ch===quote)break;if(ch===92){// '\'
	out+=this$1.input.slice(chunkStart,this$1.pos);out+=this$1.readEscapedChar(false);chunkStart=this$1.pos;}else{if(isNewLine(ch))this$1.raise(this$1.start,"Unterminated string constant");++this$1.pos;}}out+=this.input.slice(chunkStart,this.pos++);return this.finishToken(tt.string,out);};// Reads template string tokens.
	pp$7.readTmplToken=function(){var this$1=this;var out="",chunkStart=this.pos;for(;;){if(this$1.pos>=this$1.input.length)this$1.raise(this$1.start,"Unterminated template");var ch=this$1.input.charCodeAt(this$1.pos);if(ch===96||ch===36&&this$1.input.charCodeAt(this$1.pos+1)===123){// '`', '${'
	if(this$1.pos===this$1.start&&this$1.type===tt.template){if(ch===36){this$1.pos+=2;return this$1.finishToken(tt.dollarBraceL);}else{++this$1.pos;return this$1.finishToken(tt.backQuote);}}out+=this$1.input.slice(chunkStart,this$1.pos);return this$1.finishToken(tt.template,out);}if(ch===92){// '\'
	out+=this$1.input.slice(chunkStart,this$1.pos);out+=this$1.readEscapedChar(true);chunkStart=this$1.pos;}else if(isNewLine(ch)){out+=this$1.input.slice(chunkStart,this$1.pos);++this$1.pos;switch(ch){case 13:if(this$1.input.charCodeAt(this$1.pos)===10)++this$1.pos;case 10:out+="\n";break;default:out+=String.fromCharCode(ch);break;}if(this$1.options.locations){++this$1.curLine;this$1.lineStart=this$1.pos;}chunkStart=this$1.pos;}else{++this$1.pos;}}};// Used to read escaped characters
	pp$7.readEscapedChar=function(inTemplate){var ch=this.input.charCodeAt(++this.pos);++this.pos;switch(ch){case 110:return"\n";// 'n' -> '\n'
	case 114:return"\r";// 'r' -> '\r'
	case 120:return String.fromCharCode(this.readHexChar(2));// 'x'
	case 117:return codePointToString(this.readCodePoint());// 'u'
	case 116:return"\t";// 't' -> '\t'
	case 98:return"\b";// 'b' -> '\b'
	case 118:return"\u000b";// 'v' -> '\u000b'
	case 102:return"\f";// 'f' -> '\f'
	case 13:if(this.input.charCodeAt(this.pos)===10)++this.pos;// '\r\n'
	case 10:// ' \n'
	if(this.options.locations){this.lineStart=this.pos;++this.curLine;}return"";default:if(ch>=48&&ch<=55){var octalStr=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0];var octal=parseInt(octalStr,8);if(octal>255){octalStr=octalStr.slice(0,-1);octal=parseInt(octalStr,8);}if(octalStr!=="0"&&(this.strict||inTemplate)){this.raise(this.pos-2,"Octal literal in strict mode");}this.pos+=octalStr.length-1;return String.fromCharCode(octal);}return String.fromCharCode(ch);}};// Used to read character escape sequences ('\x', '\u', '\U').
	pp$7.readHexChar=function(len){var codePos=this.pos;var n=this.readInt(16,len);if(n===null)this.raise(codePos,"Bad character escape sequence");return n;};// Read an identifier, and return it as a string. Sets `this.containsEsc`
	// to whether the word contained a '\u' escape.
	//
	// Incrementally adds only escaped chars, adding other chunks as-is
	// as a micro-optimization.
	pp$7.readWord1=function(){var this$1=this;this.containsEsc=false;var word="",first=true,chunkStart=this.pos;var astral=this.options.ecmaVersion>=6;while(this.pos<this.input.length){var ch=this$1.fullCharCodeAtPos();if(isIdentifierChar(ch,astral)){this$1.pos+=ch<=0xffff?1:2;}else if(ch===92){// "\"
	this$1.containsEsc=true;word+=this$1.input.slice(chunkStart,this$1.pos);var escStart=this$1.pos;if(this$1.input.charCodeAt(++this$1.pos)!=117)// "u"
	this$1.raise(this$1.pos,"Expecting Unicode escape sequence \\uXXXX");++this$1.pos;var esc=this$1.readCodePoint();if(!(first?isIdentifierStart:isIdentifierChar)(esc,astral))this$1.raise(escStart,"Invalid Unicode escape");word+=codePointToString(esc);chunkStart=this$1.pos;}else{break;}first=false;}return word+this.input.slice(chunkStart,this.pos);};// Read an identifier or keyword token. Will check for reserved
	// words when necessary.
	pp$7.readWord=function(){var word=this.readWord1();var type=tt.name;if((this.options.ecmaVersion>=6||!this.containsEsc)&&this.keywords.test(word))type=keywordTypes[word];return this.finishToken(type,word);};var version="3.3.0";// The main exported interface (under `self.acorn` when in the
	// browser) is a `parse` function that takes a code string and
	// returns an abstract syntax tree as specified by [Mozilla parser
	// API][api].
	//
	// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
	function parse(input,options){return new Parser(options,input).parse();}// This function tries to parse a single expression at a given
	// offset in a string. Useful for parsing mixed-language formats
	// that embed JavaScript expressions.
	function parseExpressionAt(input,pos,options){var p=new Parser(options,input,pos);p.nextToken();return p.parseExpression();}// Acorn is organized as a tokenizer and a recursive-descent parser.
	// The `tokenizer` export provides an interface to the tokenizer.
	function tokenizer(input,options){return new Parser(options,input);}/*istanbul ignore next*/exports.version=version;/*istanbul ignore next*/exports.parse=parse;/*istanbul ignore next*/exports.parseExpressionAt=parseExpressionAt;/*istanbul ignore next*/exports.tokenizer=tokenizer;/*istanbul ignore next*/exports.Parser=Parser;/*istanbul ignore next*/exports.plugins=plugins;/*istanbul ignore next*/exports.defaultOptions=defaultOptions;/*istanbul ignore next*/exports.Position=Position;/*istanbul ignore next*/exports.SourceLocation=SourceLocation;/*istanbul ignore next*/exports.getLineInfo=getLineInfo;/*istanbul ignore next*/exports.Node=Node;/*istanbul ignore next*/exports.TokenType=TokenType;/*istanbul ignore next*/exports.tokTypes=tt;/*istanbul ignore next*/exports.TokContext=TokContext;/*istanbul ignore next*/exports.tokContexts=types;/*istanbul ignore next*/exports.isIdentifierChar=isIdentifierChar;/*istanbul ignore next*/exports.isIdentifierStart=isIdentifierStart;/*istanbul ignore next*/exports.Token=Token;/*istanbul ignore next*/exports.isNewLine=isNewLine;/*istanbul ignore next*/exports.lineBreak=lineBreak;/*istanbul ignore next*/exports.lineBreakG=lineBreakG;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("stack-es2015-modules", [], factory);
		else if(typeof exports === 'object')
			exports["stack-es2015-modules"] = factory();
		else
			root["stack-es2015-modules"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _classCallCheck2 = __webpack_require__(1);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		var _createClass2 = __webpack_require__(2);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var Stack = function () {
		    function /*istanbul ignore next*/Stack() {
		        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Stack);
		
		        this.arr = [];
		    }
		
		    (0, _createClass3.default)(Stack, [{
		        key: "push",
		        value: function push(el) {
		            this.arr.push(el);
		        }
		    }, {
		        key: "pop",
		        value: function pop() {
		            this.arr.length--;
		        }
		    }, {
		        key: "top",
		        value: function top() {
		            // TODO: .last() not defined in older node versions
		            // return this.arr.last();
		            return this.arr[this.arr.length - 1];
		        }
		    }, {
		        key: "withElement",
		        value: function withElement(el, callback, context) {
		            this.push(el);
		            try {
		                callback.call(context);
		            } finally {
		                this.pop();
		            }
		        }
		    }]);
		    return Stack;
		}();
		
		/*istanbul ignore next*/exports.default = Stack;
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		"use strict";
		
		exports.__esModule = true;
		
		exports.default = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _defineProperty = __webpack_require__(3);
		
		var _defineProperty2 = _interopRequireDefault(_defineProperty);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = function () {
		  function defineProperties(target, props) {
		    for (var i = 0; i < props.length; i++) {
		      var descriptor = props[i];
		      descriptor.enumerable = descriptor.enumerable || false;
		      descriptor.configurable = true;
		      if ("value" in descriptor) descriptor.writable = true;
		      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
		    }
		  }
		
		  return function (Constructor, protoProps, staticProps) {
		    if (protoProps) defineProperties(Constructor.prototype, protoProps);
		    if (staticProps) defineProperties(Constructor, staticProps);
		    return Constructor;
		  };
		}();
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(4), __esModule: true };
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(5);
		var $Object = __webpack_require__(8).Object;
		module.exports = function defineProperty(it, key, desc){
		  return $Object.defineProperty(it, key, desc);
		};
	
	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		var $export = __webpack_require__(6);
		// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
		$export($export.S + $export.F * !__webpack_require__(16), 'Object', {defineProperty: __webpack_require__(12).f});
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global    = __webpack_require__(7)
		  , core      = __webpack_require__(8)
		  , ctx       = __webpack_require__(9)
		  , hide      = __webpack_require__(11)
		  , PROTOTYPE = 'prototype';
		
		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , expProto  = exports[PROTOTYPE]
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && target[key] !== undefined;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(a, b, c){
		        if(this instanceof C){
		          switch(arguments.length){
		            case 0: return new C;
		            case 1: return new C(a);
		            case 2: return new C(a, b);
		          } return new C(a, b, c);
		        } return C.apply(this, arguments);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
		    if(IS_PROTO){
		      (exports.virtual || (exports.virtual = {}))[key] = out;
		      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
		      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
		    }
		  }
		};
		// type bitmap
		$export.F = 1;   // forced
		$export.G = 2;   // global
		$export.S = 4;   // static
		$export.P = 8;   // proto
		$export.B = 16;  // bind
		$export.W = 32;  // wrap
		$export.U = 64;  // safe
		$export.R = 128; // real proto method for `library` 
		module.exports = $export;
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		var core = module.exports = {version: '2.4.0'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		// optional / simple context binding
		var aFunction = __webpack_require__(10);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};
	
	/***/ },
	/* 10 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		var dP         = __webpack_require__(12)
		  , createDesc = __webpack_require__(20);
		module.exports = __webpack_require__(16) ? function(object, key, value){
		  return dP.f(object, key, createDesc(1, value));
		} : function(object, key, value){
		  object[key] = value;
		  return object;
		};
	
	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
	
		var anObject       = __webpack_require__(13)
		  , IE8_DOM_DEFINE = __webpack_require__(15)
		  , toPrimitive    = __webpack_require__(19)
		  , dP             = Object.defineProperty;
		
		exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes){
		  anObject(O);
		  P = toPrimitive(P, true);
		  anObject(Attributes);
		  if(IE8_DOM_DEFINE)try {
		    return dP(O, P, Attributes);
		  } catch(e){ /* empty */ }
		  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
		  if('value' in Attributes)O[P] = Attributes.value;
		  return O;
		};
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(14);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = !__webpack_require__(16) && !__webpack_require__(17)(function(){
		  return Object.defineProperty(__webpack_require__(18)('div'), 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Thank's IE8 for his funny defineProperty
		module.exports = !__webpack_require__(17)(function(){
		  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(14)
		  , document = __webpack_require__(7).document
		  // in old IE typeof document.createElement is 'object'
		  , is = isObject(document) && isObject(document.createElement);
		module.exports = function(it){
		  return is ? document.createElement(it) : {};
		};
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.1.1 ToPrimitive(input [, PreferredType])
		var isObject = __webpack_require__(14);
		// instead of the ES6 spec version, we didn't implement @@toPrimitive case
		// and the second argument - flag - preferred type is a string
		module.exports = function(it, S){
		  if(!isObject(it))return it;
		  var fn, val;
		  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  throw TypeError("Can't convert object to primitive value");
		};
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		module.exports = function(bitmap, value){
		  return {
		    enumerable  : !(bitmap & 1),
		    configurable: !(bitmap & 2),
		    writable    : !(bitmap & 4),
		    value       : value
		  };
		};
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Listener = undefined;
	
	var _set = __webpack_require__(47);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _classCallCheck2 = __webpack_require__(113);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(85);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _map = __webpack_require__(117);
	
	var _map2 = _interopRequireDefault(_map);
	
	var /*istanbul ignore next*/_propertyAccessor = __webpack_require__(124);
	
	var /*istanbul ignore next*/_utils = __webpack_require__(125);
	
	/*istanbul ignore next*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LISTENERS_BY_ACCESSOR = new /*istanbul ignore next*/_map2.default();
	
	/*istanbul ignore next*/var Listener = exports.Listener = function () {
	    function /*istanbul ignore next*/Listener(obj, propName) {
	        /*istanbul ignore next*/var _this = this;
	
	        (0, _classCallCheck3.default)(this, Listener);
	
	        this.selectionItems = new /*istanbul ignore next*/_set2.default();
	
	        this.propertyAccessor = new /*istanbul ignore next*/_propertyAccessor.PropertyAccessor(obj, propName);
	        this.propertyAccessor.setterCallback(function (newValue) /*istanbul ignore next*/{
	            return (/*istanbul ignore next*/_this.newValueSet(newValue)
	            );
	        });
	    }
	
	    (0, _createClass3.default)(Listener, [{
	        key: 'addHandler',
	        value: function addHandler(selectionItem) {
	            this.selectionItems.add(selectionItem);
	            selectionItem.propertyAccessors.add(this);
	        }
	    }, {
	        key: 'newValueSet',
	        value: function newValueSet(newValue) {
	            if (! /*istanbul ignore next*/(0, _utils.isPrimitive)(newValue)) {
	                this.recalculate();
	            }
	
	            this.applyCallbacks();
	        }
	    }, {
	        key: 'applyCallbacks',
	        value: function applyCallbacks() {
	            this.selectionItems.forEach(function (selectionItem) {
	                selectionItem.propertyAssigned();
	            });
	        }
	    }, {
	        key: 'recalculate',
	        value: function recalculate() {
	            console.log('should recalculate');
	
	            var selectionItems = [];
	            this.selectionItems.forEach(function (selectionItem) {
	                selectionItems.push(selectionItem);
	            });
	
	            selectionItems.forEach(function (selectionItem) {
	                selectionItem.removeListeners();
	            });
	            selectionItems.forEach(function (selectionItem) {
	                selectionItem.installListeners();
	            });
	        }
	    }], [{
	        key: 'watchProperty',
	        value: function watchProperty(obj, propName) {
	            var mapObj;
	            if (LISTENERS_BY_ACCESSOR.has(obj)) {
	                mapObj = LISTENERS_BY_ACCESSOR.get(obj);
	            } else {
	                mapObj = {};
	                LISTENERS_BY_ACCESSOR.set(obj, mapObj);
	            }
	
	            if (!mapObj.hasOwnProperty(propName)) {
	                mapObj[propName] = new Listener(obj, propName);
	            }
	
	            return mapObj[propName];
	        }
	    }]);
	    return Listener;
	}();

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.PropertyAccessor = undefined;
	
	var _classCallCheck2 = __webpack_require__(113);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(85);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var PROPERTY_ACCESSOR_NAME = 'wrappedValue';
	
	/*istanbul ignore next*/var PropertyAccessor = exports.PropertyAccessor = function () {
	    function /*istanbul ignore next*/PropertyAccessor(obj, propName) {
	        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, PropertyAccessor);
	
	        this.safeOldAccessors(obj, propName);
	
	        try {
	            obj.__defineGetter__(propName, function () {
	                if (propName === 'prop') debugger;
	                obj;
	                return this[PROPERTY_ACCESSOR_NAME];
	            }.bind(this));
	        } catch (e) {/* Firefox raises for Array.length */}
	        var newGetter = obj.__lookupGetter__(propName);
	        if (!newGetter) {
	            // Chrome silently ignores __defineGetter__ for Array.length
	            this.externalVariables(solver, null);
	            return;
	        }
	
	        obj.__defineSetter__(propName, function (newValue) {
	            var returnValue = this[PROPERTY_ACCESSOR_NAME] = newValue;
	            console.log('newValue for', obj, propName, newValue);
	            this.setPropertyWith(newValue);
	            return returnValue;
	        }.bind(this));
	    }
	
	    (0, _createClass3.default)(PropertyAccessor, [{
	        key: 'safeOldAccessors',
	        value: function safeOldAccessors(obj, propName) {
	            // take existing getter, if existent, and assign to
	            var existingSetter = obj.__lookupSetter__(propName),
	                existingGetter = obj.__lookupGetter__(propName);
	            if (existingGetter && existingSetter) {
	                this.__defineGetter__(PROPERTY_ACCESSOR_NAME, existingGetter);
	                this.__defineSetter__(PROPERTY_ACCESSOR_NAME, existingSetter);
	            }
	
	            // assign old value to new slot
	            if (!existingGetter && !existingSetter && obj.hasOwnProperty(propName)) {
	                this[PROPERTY_ACCESSOR_NAME] = obj[propName];
	            }
	        }
	    }, {
	        key: 'setterCallback',
	        value: function setterCallback(callback) {
	            this.callbackForSetProperty = callback;
	        }
	    }, {
	        key: 'setPropertyWith',
	        value: function setPropertyWith(newValue) {
	            this.callbackForSetProperty && this.callbackForSetProperty(newValue);
	        }
	    }]);
	    return PropertyAccessor;
	}();

/***/ },
/* 125 */
/***/ function(module, exports) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.pushIfMissing = pushIfMissing;
	/*istanbul ignore next*/exports.removeIfExisting = removeIfExisting;
	/*istanbul ignore next*/exports.isPrimitive = isPrimitive;
	/*istanbul ignore next*/exports.identity = identity;
	// TODO this is a copy from reactive object queries repository (not completely anymore)
	// TODO extract this into its own library
	
	function pushIfMissing(array, item) {
	    // check for already existing.
	    var exists = false;
	    var len = array.length;
	    for (var i = 0; i < len; i++) /*istanbul ignore next*/{
	        if (array[i] == item) {
	            exists = true;
	            break;
	        }
	    } // do not add an already existing item
	    if (!exists) {
	        array.push(item);
	    }
	
	    // return true if the given element was pushed, otherwise false
	    return !exists;
	}
	
	function removeIfExisting(array, item) {
	    var index = array.indexOf(item);
	    if (index !== -1) {
	        array.splice(index, 1);
	        // return true if the given element was actually removed
	        return true;
	    }
	    return false;
	}
	
	function isPrimitive(elem) {
	    var getType = function getType(elem) {
	        return Object.prototype.toString.call(elem).slice(8, -1);
	    };
	
	    var type = getType(elem);
	
	    return type === 'String' || type === 'RegExp' || type === 'Boolean' || type === 'Number' || type === 'Null' || type === 'Undefined';
	}
	
	function identity(x) {
	    return x;
	}

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.BaseActiveExpression = undefined;
	
	var _classCallCheck2 = __webpack_require__(113);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(85);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BaseActiveExpression = exports.BaseActiveExpression = function () {
	
	    /**
	     *
	     * @param func (Function) the expression to be observed
	     */
	    function /*istanbul ignore next*/BaseActiveExpression(func) {
	        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, BaseActiveExpression);
	
	        // console.log(func);
	        this.func = func;
	        this.lastValue = this.getCurrentValue();
	        this.callbacks = [];
	    }
	
	    /**
	     * aliases with 'now'
	     * @returns {*} the current value of the expression
	     */
	
	
	    (0, _createClass3.default)(BaseActiveExpression, [{
	        key: 'getCurrentValue',
	        value: function getCurrentValue() {
	            return this.func();
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(callback) {
	            this.callbacks.push(callback);
	
	            return this;
	        }
	    }, {
	        key: 'checkAndNotify',
	        value: function checkAndNotify() {
	            var currentValue = this.getCurrentValue();
	            if (this.lastValue === currentValue) {
	                return;
	            }
	
	            var lastValue = this.lastValue;
	            this.lastValue = currentValue;
	
	            this.notify(currentValue, {
	                lastValue: lastValue
	            });
	        }
	    }, {
	        key: 'notify',
	        value: function notify() {
	            /*istanbul ignore next*/for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            this.callbacks.forEach(function (callback) /*istanbul ignore next*/{
	                return (/*istanbul ignore next*/callback.apply( /*istanbul ignore next*/undefined, args)
	                );
	            });
	        }
	
	        /**
	         * TODO
	         * like a bind for AExpr
	         * @param items
	         */
	
	    }, {
	        key: 'applyOn',
	        value: function applyOn() {
	            throw new Error('Not yet implemented');
	        }
	    }]);
	    return BaseActiveExpression;
	}();
	
	/*istanbul ignore next*/exports.default = BaseActiveExpression;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAzMGE2NGQzYmJiN2Q2ZjUxMjZjMiIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aXZlLWV4cHJlc3Npb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9pbnRlcnByZXRhdGlvbi9pbnRlcnByZXRhdGlvbi1hY3RpdmUtZXhwcmVzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL3NyYy9iYWJlbHNiZXJnL2pzaW50ZXJwcmV0ZXIvaW50ZXJwcmV0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvbWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhYmVsc2JlcmcvanNpbnRlcnByZXRlci9hY29ybi5lcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3N0YWNrLWVzMjAxNS1tb2R1bGVzL2Rpc3Qvc3RhY2stZXMyMDE1LW1vZHVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ludGVycHJldGF0aW9uL2xpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9pbnRlcnByZXRhdGlvbi9wcm9wZXJ0eS1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhc2UvYmFzZS1hY3RpdmUtZXhwcmVzc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87QUNWQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7NkNDckNTLEs7Ozs7Ozs7OzttQ0FFQSxvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0MyQ08sSyxHQUFBLEs7O0FBOUNoQjs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxLQUFNLGNBQWMsMERBQXBCOzs2QkFFTSxPLEdBQ0YsMkNBQWM7QUFBQTtBQUViLEU7OzZCQUdDLDJCOzs7QUFFRixrRUFBWSxJQUFaLEVBQWtCLEtBQWxCLEVBQXlCO0FBQUE7O0FBQUEsMElBQ2YsSUFEZTs7QUFFckIsdUNBQUssS0FBTCxHQUFhLEtBQWI7QUFDQSx1Q0FBSyxpQkFBTCxHQUF5QiwyQ0FBekI7O0FBRUEsdUNBQUssZ0JBQUw7QUFMcUI7QUFNeEI7O0FBRUQ7Ozs7OzRDQUNtQjtBQUNmLGtCQUFLLGNBQUw7QUFDSDs7O2tDQUVRO0FBQ0wsa0JBQUssZUFBTDtBQUNIOzs7NENBRWtCO0FBQUE7O0FBQ2YseUJBQVksV0FBWixDQUF3QixJQUF4QixFQUE4QixZQUFNO0FBQ2hDLDZDQUE0QixZQUE1QixDQUF5QyxnQ0FBSyxJQUE5QyxFQUFvRCwrQkFBSyxLQUF6RDtBQUNILGNBRkQ7QUFHSDs7OzJDQUVpQjtBQUNkLGtCQUFLLGlC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Q0FBK0osQ0FBL0osQ0FBaUssQ0FBakssQ0FBbUssRUFBbkssQ0FBc0ssRUFBdEssQ0FBeUssRUFBekssQ0FBNEssRUFBNUssQ0FBK0ssRUFBL0ssQ0FBa0wsRUFBbEwsQ0FBcUwsRUFBckwsQ0FBd0wsQ0FBeEwsQ0FBMEwsQ0FBMUwsQ0FBNEwsRUFBNUwsQ0FBK0wsRUFBL0wsQ0FBa00sRUFBbE0sQ0FBcU0sRUFBck0sQ0FBd00sRUFBeE0sQ0FBMk0sRUFBM00sQ0FBOE0sQ0FBOU0sQ0FBZ04sQ0FBaE4sQ0FBa04sRUFBbE4sQ0FBcU4sQ0FBck4sQ0FBdU4sRUFBdk4sQ0FBME4sQ0FBMU4sQ0FBNE4sQ0FBNU4sQ0FBOE4sQ0FBOU4sQ0FBZ08sQ0FBaE8sQ0FBa08sRUFBbE8sQ0FBcU8sRUFBck8sQ0FBd08sRUFBeE8sQ0FBMk8sQ0FBM08sQ0FBNk8sRUFBN08sQ0FBZ1AsRUFBaFAsQ0FBbVAsQ0FBblAsQ0FBcVAsQ0FBclAsQ0FBdVAsRUFBdlAsQ0FBMFAsRUFBMVAsQ0FBNlAsRUFBN1AsQ0FBZ1EsRUFBaFEsQ0FBbVEsRUFBblEsQ0FBc1EsRUFBdFEsQ0FBeVEsRUFBelEsQ0FBNFEsRUFBNVEsQ0FBK1EsRUFBL1EsQ0FBa1IsR0FBbFIsQ0FBc1IsRUFBdFIsQ0FBeVIsRUFBelIsQ0FBNFIsRUFBNVIsQ0FBK1IsRUFBL1IsQ0FBa1MsRUFBbFMsQ0FBcVMsR0FBclMsQ0FBeVMsRUFBelMsQ0FBNFMsRUFBNVMsQ0FBK1MsRUFBL1MsQ0FBa1QsRUFBbFQsQ0FBcVQsRUFBclQsQ0FBd1QsRUFBeFQsQ0FBMlQsRUFBM1QsQ0FBOFQsRUFBOVQsQ0FBaVUsRUFBalUsQ0FBb1UsQ0FBcFUsQ0FBc1UsQ0FBdFUsQ0FBd1UsRUFBeFUsQ0FBMlUsRUFBM1UsQ0FBOFUsRUFBOVUsQ0FBaVYsQ0FBalYsQ0FBbVYsRUFBblYsQ0FBc1YsQ0FBdFYsQ0FBd1YsQ0FBeFYsQ0FBMFYsQ0FBMVYsQ0FBNFYsRUFBNVYsQ0FBK1YsRUFBL1YsQ0FBa1csQ0FBbFcsQ0FBb1csRUFBcFcsQ0FBdVcsRUFBdlcsQ0FBMFcsQ0FBMVcs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LENBQStDLENBQS9DLENBQWlELEdBQWpELENBQXFELENBQXJELENBQXVELElBQXZELENBQTRELENBQTVELENBQThELEVBQTlELENBQWlFLEVBQWpFLENBQW9FLEVBQXBFLENBQXVFLENBQXZFLENBQXlFLEVBQXpFLENBQTRFLENBQTVFLENBQThFLEVBQTlFLENBQWlGLEVBQWpGLENBQW9GLEVBQXBGLENBQXVGLENBQXZGLENBQXlGLENBQXpGLENBQTJGLENBQTNGLENBQTZGLEVBQTdGLENBQWdHLEVBQWhHLENBQW1HLENBQW5HLENBQXFHLENBQXJHLENBQXVHLEVBQXZHLENBQTBHLENBQTFHLENBQTRHLEVBQTVHLENBQStHLENBQS9HLENBQWlILEVBQWpILENBQW9ILEVBQXBILENBQXVILEVBQXZILENBQTBILENBQTFILENBQTRILENBQTVILENBQThILENBQTlILENBQWdJLEVBQWhJLENBQW1JLEVBQW5JLENBQXNJLENBQXRJLENBQXdJLENBQXhJLENBQTBJLEdBQTFJLENBQThJLEVBQTlJLENBQWlKLENBQWpKLENBQW1KLENBQW5KLENBQXFKLENBQXJKLENBQXVKLENBQXZKLENBQXlKLEVBQXpKLENBQTRKLENBQTVKLENBQThKLENBQTlKLENBQWdLLENBQWhLLENBQWtLLENBQWxLLENBQW9LLENBQXBLLENBQXNLLENBQXRLLENBQXdLLENBQXhLLENBQTBLLEVBQTFLLENBQTZLLENBQTdLLENBQStLLEVBQS9LLENBQWtMLENBQWxMLENBQW9MLENBQXBMLENBQXNMLENBQXRMLENBQXdMLENBQXhMLENBQTBMLENBQTFMLENBQTRMLEdBQTVMLENBQWdNLEVBQWhNLENBQW1NLEVBQW5NLENBQXNNLENBQXRNLENBQXdNLEVBQXhNLENBQTJNLEVBQTNNLENBQThNLEVBQTlNLENBQWlOLENBQWpOLENBQW1OLEdBQW5OLENBQXVOLENBQXZOLENBQXlOLENBQXpOLENBQTJOLENBQTNOLENBQTZOLEVBQTdOLENBQWdPLENBQWhPLENBQWtPLEVBQWxPLENBQXFPLEVBQXJPLENBQXdPLEVBQXhPLENBQTJPLENBQTNPLENBQTZPLEVBQTdPLENBQWdQLEVBQWhQLENBQW1QLENBQW5QLENBQXFQLENBQXJQLENBQXVQLEVBQXZQLENBQTBQLEVBQTFQLENBQTZQLENBQTdQLENBQStQLENBQS9QLENBQWlRLEdBQWpRLENBQXFRLENBQXJRLENBQXVRLEdBQXZRLENBQTJRLENBQTNRLENBQTZRLENBQTdRLENBQStRLENBQS9RLENBQWlSLEVBQWpSLENBQW9SLENBQXBSLENBQXNSLEVBQXRSLENBQXlSLEVBQXpSLENBQTRSLENBQTVSLENBQThSLEVBQTlSLENBQWlTLEtBQWpTLENBQXVTLENBQXZTLENBQXlTLEdBQXpTLENBQTZTLENBQTdTLENBQStTLEVBQS9TLENBQWtULENBQWxULENBQW9ULEVBQXBULENBQXVULENBQXZULENBQXlULElBQXpULENBQThULEVBQTlULENBQWlVLEVBQWpVLENBQW9VLENBQXBVLENBQXNVLEtBQXRVLENBQTRVLENBQTVVLENBQThVLElBQTlVLENBQW1WLENBQW5WLENBQXFWLENBQXJWLENBQXVWLENBQXZWLENBQXlWLENBQXpWLENBQTJWLENBQTNWLENBQTZWLENBQTdWLENBQStWLENBQS9WLENBQWlXLEVBQWpXLENBQW9XLENBQXBXLENBQXNXLEdBQXRXLENBQTBXLENBQTFXLENBQTRXLElBQTVXLENBQWlYLEVBQWpYLENBQW9YLEdBQXBYLENBQXdYLEVBQXhYLENBQTJYLENBQTNYLENBQTZYLEVBQTdYLENBQWdZLENBQWhZLENBQWtZLENBQWxZLENBQW9ZLEVBQXBZLENBQXVZLENBQXZZLENBQXlZLEVBQXpZLENBQTRZLENBQTVZLENBQThZLENBQTlZLENBQWdaLEVBQWhaLENBQW1aLElBQW5aLENBQXdaLENBQXhaLENBQTBaLENBQTFaLENBQTRaLEVBQTVaLENBQStaLENBQS9aLENBQWlhLENBQWphLENBQW1hLENBQW5hLENBQXFhLENBQXJhLENBQXVhLENBQXZhLENBQXlhLENBQXphLENBQTJhLElBQTNhLENBQWdiLENBQWhiLENBQWtiLEdBQWxiLENBQXNiLENBQXRiLENBQXdiLENBQXhi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IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiYWN0aXZlLWV4cHJlc3Npb25zXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFjdGl2ZS1leHByZXNzaW9uc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhY3RpdmUtZXhwcmVzc2lvbnNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb25cbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIDMwYTY0ZDNiYmI3ZDZmNTEyNmMyXG4gKiovIiwiLy8gVE9ETzogZXhwb3NlIGltcGxlbWVudGF0aW9uIHN0cmF0ZWdpZXNcclxuZXhwb3J0IHsgYWV4cHIgfSBmcm9tICcuL2ludGVycHJldGF0aW9uL2ludGVycHJldGF0aW9uLWFjdGl2ZS1leHByZXNzaW9ucy5qcyc7XHJcblxyXG5leHBvcnQgeyBCYXNlQWN0aXZlRXhwcmVzc2lvbiB9IGZyb20gJy4vYmFzZS9iYXNlLWFjdGl2ZS1leHByZXNzaW9ucy5qcyc7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FjdGl2ZS1leHByZXNzaW9ucy5qc1xuICoqLyIsImltcG9ydCBJbnRlcnByZXRlciBmcm9tICcuLy4uL2JhYmVsc2JlcmcvanNpbnRlcnByZXRlci9pbnRlcnByZXRlci5qcyc7XHJcbmltcG9ydCBTdGFjayBmcm9tICdzdGFjay1lczIwMTUtbW9kdWxlcyc7XHJcbmltcG9ydCB7IExpc3RlbmVyIH0gZnJvbSAnLi9saXN0ZW5lci5qcyc7XHJcbmltcG9ydCB7IEJhc2VBY3RpdmVFeHByZXNzaW9uIH0gZnJvbSAnLi8uLi9iYXNlL2Jhc2UtYWN0aXZlLWV4cHJlc3Npb25zLmpzJztcclxuXHJcbmNvbnN0IEFFWFBSX1NUQUNLID0gbmV3IFN0YWNrKCk7XHJcblxyXG5jbGFzcyBIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgSW50ZXJwcmV0ZXJBY3RpdmVFeHByZXNzaW9uIGV4dGVuZHMgQmFzZUFjdGl2ZUV4cHJlc3Npb24ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZ1bmMsIHNjb3BlKSB7XHJcbiAgICAgICAgc3VwZXIoZnVuYyk7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xyXG4gICAgICAgIHRoaXMucHJvcGVydHlBY2Nlc3NvcnMgPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5zdGFsbExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IHJlbW92ZSBpbmRpcmVjdGlvblxyXG4gICAgcHJvcGVydHlBc3NpZ25lZCgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrQW5kTm90aWZ5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV2b2tlKCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5zdGFsbExpc3RlbmVycygpIHtcclxuICAgICAgICBBRVhQUl9TVEFDSy53aXRoRWxlbWVudCh0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIEFjdGl2ZUV4cHJlc3Npb25JbnRlcnByZXRlci5ydW5BbmRSZXR1cm4odGhpcy5mdW5jLCB0aGlzLnNjb3BlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUFjY2Vzc29ycy5mb3JFYWNoKGZ1bmN0aW9uKHByb3BlcnR5QWNjZXNzb3IpIHtcclxuICAgICAgICAgICAgcHJvcGVydHlBY2Nlc3Nvci5zZWxlY3Rpb25JdGVtcy5kZWxldGUodGhpcyk7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUFjY2Vzc29ycy5jbGVhcigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWV4cHIoZnVuYywgc2NvcGUpIHsgcmV0dXJuIG5ldyBJbnRlcnByZXRlckFjdGl2ZUV4cHJlc3Npb24oZnVuYywgc2NvcGUpOyB9XHJcblxyXG5leHBvcnQgY2xhc3MgQWN0aXZlRXhwcmVzc2lvbkludGVycHJldGVyIGV4dGVuZHMgSW50ZXJwcmV0ZXIge1xyXG5cclxuICAgIHN0YXRpYyBydW5BbmRSZXR1cm4oZnVuYywgb3B0U2NvcGUpIHtcclxuICAgICAgICB2YXIgc2NvcGUgPSBvcHRTY29wZSB8fCB7fTtcclxuICAgICAgICB2YXIgaSA9IG5ldyBBY3RpdmVFeHByZXNzaW9uSW50ZXJwcmV0ZXIoXHJcbiAgICAgICAgICAgIGB2YXIgcmV0dXJuVmFsdWUgPSAoJHtmdW5jLnRvU3RyaW5nKCl9KSgpO2AsXHJcbiAgICAgICAgICAgIChzZWxmLCByb290U2NvcGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzY29wZScsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlKS5mb3JFYWNoKChrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVba107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaywgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0UHJvcGVydHkocm9vdFNjb3BlLCBrLCBzZWxmLmNyZWF0ZVBzZXVkb09iamVjdCh2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBkZWxldGUgYXMgdGhlIHJlbGV2YW50IGdsb2JhbCBvYmplY3RzIGNhbiBiZSBpbmZlcnJlZCBieSBhbmFseXNpbmcgdGhlIGxvY2FsIHNjb3BlXHJcbiAgICAgICAgICAgICAgICAvLyBbXCJfX2x2VmFyUmVjb3JkZXJcIiwgXCJqUXVlcnlcIiwgXCIkXCIsIFwiX1wiLCBcImxpdmVseVwiXS5mb3JFYWNoKChrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgc2VsZi5zZXRQcm9wZXJ0eShyb290U2NvcGUsIGssIHNlbGYuY3JlYXRlUHNldWRvT2JqZWN0KHdpbmRvd1trXSkpO1xyXG4gICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGkucnVuKCk7XHJcbiAgICAgICAgcmV0dXJuIGkuc3RhdGVTdGFja1swXS5zY29wZS5wcm9wZXJ0aWVzLnJldHVyblZhbHVlLnZhbHVlT2YoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcclxuICAgICAgICBsZXQgb2JqZWN0ID0gb2JqLnZhbHVlT2YoKSxcclxuICAgICAgICAgICAgcHJvcCA9IG5hbWUudmFsdWVPZigpO1xyXG5cclxuICAgICAgICBMaXN0ZW5lclxyXG4gICAgICAgICAgICAud2F0Y2hQcm9wZXJ0eShvYmplY3QsIHByb3ApXHJcbiAgICAgICAgICAgIC5hZGRIYW5kbGVyKEFFWFBSX1NUQUNLLnRvcCgpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFByb3BlcnR5KG9iaiwgbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RlcENhbGxFeHByZXNzaW9uKC4uLmFyZ3MpIHtcclxuICAgICAgICBpZih0aGlzLnN0YXRlU3RhY2tbMF0uYXJndW1lbnRzID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbCBleHByZXNzaW9uJyk7XHJcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhdGVTdGFjayA9IHRoaXMuc3RhdGVTdGFjayxcclxuICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZVN0YWNrWzBdLFxyXG4gICAgICAgICAgICBub2RlID0gc3RhdGUubm9kZSxcclxuICAgICAgICAgICAgZnVuYyA9IHN0YXRlLmZ1bmNfO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLnN0ZXBDYWxsRXhwcmVzc2lvbigpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9pbnRlcnByZXRhdGlvbi9pbnRlcnByZXRhdGlvbi1hY3RpdmUtZXhwcmVzc2lvbnMuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzXG4gKiogbW9kdWxlIGlkID0gMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuICoqIG1vZHVsZSBpZCA9IDE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAxNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanNcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4gKiogbW9kdWxlIGlkID0gMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4gKiogbW9kdWxlIGlkID0gMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanNcbiAqKiBtb2R1bGUgaWQgPSAyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29yZSAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qc1xuICoqIG1vZHVsZSBpZCA9IDIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBrZXksIG93biwgb3V0O1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG4gICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmKElTX1BST1RPKXtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanNcbiAqKiBtb2R1bGUgaWQgPSAyM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzXG4gKiogbW9kdWxlIGlkID0gMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG4gIHN3aXRjaChsZW5ndGgpe1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4gKiogbW9kdWxlIGlkID0gMjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAzMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanNcbiAqKiBtb2R1bGUgaWQgPSAzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4gKiogbW9kdWxlIGlkID0gMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDMzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbiAqKiBtb2R1bGUgaWQgPSAzNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGRlc2MgPSAoMCwgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIuZGVmYXVsdCkob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7XG4gICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGdldHRlciA9IGRlc2MuZ2V0O1xuXG4gICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldC5qc1xuICoqIG1vZHVsZSBpZCA9IDM3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSAzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qc1xuICoqIG1vZHVsZSBpZCA9IDQwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pe1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzXG4gKiogbW9kdWxlIGlkID0gNDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gNDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanNcbiAqKiBtb2R1bGUgaWQgPSA0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanNcbiAqKiBtb2R1bGUgaWQgPSA0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3NldFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQuanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlNldDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc2V0LmpzXG4gKiogbW9kdWxlIGlkID0gNDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBpbmRleCA9IHRoaXMuX2lcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDUwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzXG4gKiogbW9kdWxlIGlkID0gNTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcbiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG4gICAgLCBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRhbnlOYXRpdmUpe1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKSk7XG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuICBpZihERUZBVUxUKXtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanNcbiAqKiBtb2R1bGUgaWQgPSA1MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDU0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanNcbiAqKiBtb2R1bGUgaWQgPSA1NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanNcbiAqKiBtb2R1bGUgaWQgPSA1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanNcbiAqKiBtb2R1bGUgaWQgPSA1OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuICoqIG1vZHVsZSBpZCA9IDYwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKVxuICAsIHVpZCAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFN5bWJvbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2xcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzXG4gKiogbW9kdWxlIGlkID0gNjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gNjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJylcbiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB0b0lPYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gNjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzXG4gKiogbW9kdWxlIGlkID0gNjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuICoqIG1vZHVsZSBpZCA9IDY1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanNcbiAqKiBtb2R1bGUgaWQgPSA2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJylcbiAgLCBzdGVwICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgZmFzdEtleSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleVxuICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpLCBlbnRyeTtcbiAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0Ll9mID09IGVudHJ5KXRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgLCBraW5kICA9IHRoYXQuX2tcbiAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpe1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qc1xuICoqIG1vZHVsZSBpZCA9IDY3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpe1xuICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzXG4gKiogbW9kdWxlIGlkID0gNjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4gKiogbW9kdWxlIGlkID0gNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2FsbCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKVxuICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgLCBCUkVBSyAgICAgICA9IHt9XG4gICwgUkVUVVJOICAgICAgPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuICAgICwgZiAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmKGlzQXJyYXlJdGVyKGl0ZXJGbikpZm9yKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyAgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qc1xuICoqIG1vZHVsZSBpZCA9IDcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4gKiogbW9kdWxlIGlkID0gNzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1xuICoqIG1vZHVsZSBpZCA9IDczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4gKiogbW9kdWxlIGlkID0gNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qc1xuICoqIG1vZHVsZSBpZCA9IDc1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGhhcyAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7XG4gIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH19KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpe1xuICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6ICAgICAgTUVUQSxcbiAgTkVFRDogICAgIGZhbHNlLFxuICBmYXN0S2V5OiAgZmFzdEtleSxcbiAgZ2V0V2VhazogIGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qc1xuICoqIG1vZHVsZSBpZCA9IDc2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBtZXRhICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGZhaWxzICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGZvck9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgZWFjaCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspe1xuICB2YXIgQmFzZSAgPSBnbG9iYWxbTkFNRV1cbiAgICAsIEMgICAgID0gQmFzZVxuICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnXG4gICAgLCBwcm90byA9IEMgJiYgQy5wcm90b3R5cGVcbiAgICAsIE8gICAgID0ge307XG4gIGlmKCFERVNDUklQVE9SUyB8fCB0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKXtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSl7XG4gICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSwgJ19jJyk7XG4gICAgICB0YXJnZXQuX2MgPSBuZXcgQmFzZTtcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0YXJnZXRbQURERVJdLCB0YXJnZXQpO1xuICAgIH0pO1xuICAgIGVhY2goJ2FkZCxjbGVhcixkZWxldGUsZm9yRWFjaCxnZXQsaGFzLHNldCxrZXlzLHZhbHVlcyxlbnRyaWVzLHRvSlNPTicuc3BsaXQoJywnKSxmdW5jdGlvbihLRVkpe1xuICAgICAgdmFyIElTX0FEREVSID0gS0VZID09ICdhZGQnIHx8IEtFWSA9PSAnc2V0JztcbiAgICAgIGlmKEtFWSBpbiBwcm90byAmJiAhKElTX1dFQUsgJiYgS0VZID09ICdjbGVhcicpKWhpZGUoQy5wcm90b3R5cGUsIEtFWSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgS0VZKTtcbiAgICAgICAgaWYoIUlTX0FEREVSICYmIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpKXJldHVybiBLRVkgPT0gJ2dldCcgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NbS0VZXShhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgICByZXR1cm4gSVNfQURERVIgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYoJ3NpemUnIGluIHByb3RvKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Muc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiwgTyk7XG5cbiAgaWYoIUlTX1dFQUspY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbiAqKiBtb2R1bGUgaWQgPSA3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgU1BFQ0lFUyAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXtcbiAgdmFyIEM7XG4gIGlmKGlzQXJyYXkob3JpZ2luYWwpKXtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZih0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpQyA9IHVuZGVmaW5lZDtcbiAgICBpZihpc09iamVjdChDKSl7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmKEMgPT09IG51bGwpQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA4MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanNcbiAqKiBtb2R1bGUgaWQgPSA4MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzXG4gKiogbW9kdWxlIGlkID0gODJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgZnJvbSAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKXtcbiAgICBpZihjbGFzc29mKHRoaXMpICE9IE5BTUUpdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDg0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcbiAqKiBtb2R1bGUgaWQgPSA4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qc1xuICoqIG1vZHVsZSBpZCA9IDg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSA4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSA4OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xuICoqIG1vZHVsZSBpZCA9IDg5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA5MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA5MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDkyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qc1xuICoqIG1vZHVsZSBpZCA9IDkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qc1xuICoqIG1vZHVsZSBpZCA9IDk0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gOTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBNRVRBICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVlcbiAgLCAkZmFpbHMgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIHdrc0RlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpXG4gICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpXG4gICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZ09QTkV4dCAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKVxuICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcbiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mXG4gICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcbiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcbiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OXG4gICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKVxuICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG4gICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG4gICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXVxuICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICBpdCAgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG4gICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCFVU0VfTkFUSVZFKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH1cbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG4gICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XVxuICAgICAgLCBpICAgID0gMVxuICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbiAqKiBtb2R1bGUgaWQgPSA5NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanNcbiAqKiBtb2R1bGUgaWQgPSA5N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19rZXlvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDk4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gOTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4gKiogbW9kdWxlIGlkID0gMTAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpXG4gICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzXG4gKiogbW9kdWxlIGlkID0gMTA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzXG4gKiogbW9kdWxlIGlkID0gMTA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge3NldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXR9KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4gKiogbW9kdWxlIGlkID0gMTA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXG4gKiogbW9kdWxlIGlkID0gMTEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcclxuICogQGxpY2Vuc2VcclxuICogSmF2YVNjcmlwdCBJbnRlcnByZXRlclxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgSW50ZXJwcmV0aW5nIEphdmFTY3JpcHQgaW4gSmF2YVNjcmlwdC5cclxuICogQGF1dGhvciBmcmFzZXJAZ29vZ2xlLmNvbSAoTmVpbCBGcmFzZXIpXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgbmV3IGludGVycHJldGVyLlxyXG4gKiBAcGFyYW0ge3N0cmluZ3whT2JqZWN0fSBjb2RlIFJhdyBKYXZhU2NyaXB0IHRleHQgb3IgQVNULlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRfaW5pdEZ1bmMgT3B0aW9uYWwgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uICBVc2VkIHRvXHJcbiAqICAgICBkZWZpbmUgQVBJcy4gIFdoZW4gY2FsbGVkIGl0IGlzIHBhc3NlZCB0aGUgaW50ZXJwcmV0ZXIgb2JqZWN0IGFuZCB0aGVcclxuICogICAgIGdsb2JhbCBzY29wZSBvYmplY3QuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIGFjb3JuIGZyb20gJy4vYWNvcm4uZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJwcmV0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNvZGUsIG9wdF9pbml0RnVuYykge1xyXG4gICAgaWYgKHR5cGVvZiBjb2RlID09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvZGUgPSBhY29ybi5wYXJzZShjb2RlKTtcclxuICAgIH1cclxuICAgIHRoaXMub2JqZWN0TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5hc3QgPSBjb2RlO1xyXG4gICAgdGhpcy5pbml0RnVuY18gPSBvcHRfaW5pdEZ1bmM7XHJcbiAgICB0aGlzLnBhdXNlZF8gPSBmYWxzZTtcclxuICAgIC8vIFByZWRlZmluZSBzb21lIGNvbW1vbiBwcmltaXRpdmVzIGZvciBwZXJmb3JtYW5jZS5cclxuICAgIHRoaXMuVU5ERUZJTkVEID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZSh1bmRlZmluZWQsIHRoaXMpO1xyXG4gICAgdGhpcy5OVUxMID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZShudWxsLCB0aGlzKTtcclxuICAgIHRoaXMuVFJVRSA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUodHJ1ZSwgdGhpcyk7XHJcbiAgICB0aGlzLkZBTFNFID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZShmYWxzZSwgdGhpcyk7XHJcbiAgICB0aGlzLk5VTUJFUl9aRVJPID0gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZSgwLCB0aGlzKTtcclxuICAgIHRoaXMuTlVNQkVSX09ORSA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoMSwgdGhpcyk7XHJcbiAgICB0aGlzLlNUUklOR19FTVBUWSA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoJycsIHRoaXMpO1xyXG4gICAgdmFyIHNjb3BlID0gdGhpcy5jcmVhdGVTY29wZSh0aGlzLmFzdCwgbnVsbCk7XHJcbiAgICAvLyBGaXggdGhlIHBhcmVudCBwcm9wZXJ0aWVzIG5vdyB0aGF0IHRoZSBnbG9iYWwgc2NvcGUgZXhpc3RzLlxyXG4gICAgLy90aGlzLlVOREVGSU5FRC5wYXJlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAvL3RoaXMuTlVMTC5wYXJlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLlRSVUUucGFyZW50ID0gdGhpcy5CT09MRUFOO1xyXG4gICAgdGhpcy5GQUxTRS5wYXJlbnQgPSB0aGlzLkJPT0xFQU47XHJcbiAgICB0aGlzLk5VTUJFUl9aRVJPLnBhcmVudCA9IHRoaXMuTlVNQkVSO1xyXG4gICAgdGhpcy5OVU1CRVJfT05FLnBhcmVudCA9IHRoaXMuTlVNQkVSO1xyXG4gICAgdGhpcy5TVFJJTkdfRU1QVFkucGFyZW50ID0gdGhpcy5TVFJJTkc7XHJcbiAgICB0aGlzLnN0YXRlU3RhY2sgPSBbe1xyXG4gICAgICBub2RlOiB0aGlzLmFzdCxcclxuICAgICAgc2NvcGU6IHNjb3BlLFxyXG4gICAgICB0aGlzRXhwcmVzc2lvbjogc2NvcGUsXHJcbiAgICAgIGRvbmU6IGZhbHNlXHJcbiAgICB9XTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBtb3JlIGNvZGUgdG8gdGhlIGludGVycHJldGVyLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfCFPYmplY3R9IGNvZGUgUmF3IEphdmFTY3JpcHQgdGV4dCBvciBBU1QuXHJcbiAgICovXHJcbiAgYXBwZW5kQ29kZShjb2RlKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKCFzdGF0ZSB8fCBzdGF0ZS5ub2RlLnR5cGUgIT0gJ1Byb2dyYW0nKSB7XHJcbiAgICAgIHRocm93IEVycm9yKCdFeHBlY3Rpbmcgb3JpZ2luYWwgQVNUIHRvIHN0YXJ0IHdpdGggYSBQcm9ncmFtIG5vZGUuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvZGUgPT0gJ3N0cmluZycpIHtcclxuICAgICAgY29kZSA9IGFjb3JuLnBhcnNlKGNvZGUpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFjb2RlIHx8IGNvZGUudHlwZSAhPSAnUHJvZ3JhbScpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoJ0V4cGVjdGluZyBuZXcgQVNUIHRvIHN0YXJ0IHdpdGggYSBQcm9ncmFtIG5vZGUuJyk7XHJcbiAgICB9XHJcbiAgICAvLyBBcHBlbmQgdGhlIG5ldyBwcm9ncmFtIHRvIHRoZSBvbGQgb25lLlxyXG4gICAgZm9yICh2YXIgaSA9IDAsIG5vZGU7IG5vZGUgPSBjb2RlLmJvZHlbaV07IGkrKykge1xyXG4gICAgICBzdGF0ZS5ub2RlLmJvZHkucHVzaChub2RlKTtcclxuICAgIH1cclxuICAgIHN0YXRlLmRvbmUgPSBmYWxzZTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZSBvbmUgc3RlcCBvZiB0aGUgaW50ZXJwcmV0ZXIuXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIHN0ZXAgd2FzIGV4ZWN1dGVkLCBmYWxzZSBpZiBubyBtb3JlIGluc3RydWN0aW9ucy5cclxuICAgKi9cclxuICBzdGVwKCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgaWYgKCFzdGF0ZSB8fCBzdGF0ZS5ub2RlLnR5cGUgPT0gJ1Byb2dyYW0nICYmIHN0YXRlLmRvbmUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnBhdXNlZF8pIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzWydzdGVwJyArIHN0YXRlLm5vZGUudHlwZV0oKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBFeGVjdXRlIHRoZSBpbnRlcnByZXRlciB0byBwcm9ncmFtIGNvbXBsZXRpb24uICBWdWxuZXJhYmxlIHRvIGluZmluaXRlIGxvb3BzLlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYSBleGVjdXRpb24gaXMgYXN5bmNob25vdXNseSBibG9ja2VkLFxyXG4gICAqICAgICBmYWxzZSBpZiBubyBtb3JlIGluc3RydWN0aW9ucy5cclxuICAgKi9cclxuICBydW4oKSB7XHJcbiAgICB3aGlsZSAoIXRoaXMucGF1c2VkXyAmJiB0aGlzLnN0ZXAoKSkge31cclxuICAgIHJldHVybiB0aGlzLnBhdXNlZF87XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIGdsb2JhbCBzY29wZSB3aXRoIGJ1aXRpbiBwcm9wZXJ0aWVzIGFuZCBmdW5jdGlvbnMuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdEdsb2JhbFNjb3BlKHNjb3BlKSB7XHJcbiAgICAvLyBJbml0aWFsaXplIHVuZWRpdGFibGUgZ2xvYmFsIHByb3BlcnRpZXMuXHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnSW5maW5pdHknLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShJbmZpbml0eSksIHRydWUpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ05hTicsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKE5hTiksIHRydWUpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ3VuZGVmaW5lZCcsIHRoaXMuVU5ERUZJTkVELCB0cnVlKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICd3aW5kb3cnLCBzY29wZSwgdHJ1ZSk7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnc2VsZicsIHNjb3BlLCBmYWxzZSk7IC8vIEVkaXRhYmxlLlxyXG4gIFxyXG4gICAgLy8gSW5pdGlhbGl6ZSBnbG9iYWwgb2JqZWN0cy5cclxuICAgIHRoaXMuaW5pdEZ1bmN0aW9uKHNjb3BlKTtcclxuICAgIHRoaXMuaW5pdE9iamVjdChzY29wZSk7XHJcbiAgICAvLyBVbmFibGUgdG8gc2V0IHNjb3BlJ3MgcGFyZW50IHByaW9yICh0aGlzLk9CSkVDVCBkaWQgbm90IGV4aXN0KS5cclxuICAgIHNjb3BlLnBhcmVudCA9IHRoaXMuT0JKRUNUO1xyXG4gICAgdGhpcy5pbml0QXJyYXkoc2NvcGUpO1xyXG4gICAgdGhpcy5pbml0TnVtYmVyKHNjb3BlKTtcclxuICAgIHRoaXMuaW5pdFN0cmluZyhzY29wZSk7XHJcbiAgICB0aGlzLmluaXRCb29sZWFuKHNjb3BlKTtcclxuICAgIHRoaXMuaW5pdERhdGUoc2NvcGUpO1xyXG4gICAgdGhpcy5pbml0TWF0aChzY29wZSk7XHJcbiAgICB0aGlzLmluaXRSZWdFeHAoc2NvcGUpO1xyXG4gICAgdGhpcy5pbml0SlNPTihzY29wZSk7XHJcbiAgICB0aGlzLmluaXRFcnJvcihzY29wZSk7XHJcbiAgXHJcbiAgICAvLyBJbml0aWFsaXplIGdsb2JhbCBmdW5jdGlvbnMuXHJcbiAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcclxuICAgIHZhciB3cmFwcGVyO1xyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgICBudW0gPSBudW0gfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoaXNOYU4obnVtLnRvTnVtYmVyKCkpKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdpc05hTicsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcikpO1xyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgICBudW0gPSBudW0gfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoaXNGaW5pdGUobnVtLnRvTnVtYmVyKCkpKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdpc0Zpbml0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcikpO1xyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICBzdHIgPSBzdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUocGFyc2VGbG9hdChzdHIudG9OdW1iZXIoKSkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ3BhcnNlRmxvYXQnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihzdHIsIHJhZGl4KSB7XHJcbiAgICAgIHN0ciA9IHN0ciB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xyXG4gICAgICByYWRpeCA9IHJhZGl4IHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFxyXG4gICAgICAgICAgcGFyc2VJbnQoc3RyLnRvU3RyaW5nKCksIHJhZGl4LnRvTnVtYmVyKCkpKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdwYXJzZUludCcsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcikpO1xyXG4gIFxyXG4gICAgdmFyIGZ1bmMgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkZVTkNUSU9OKTtcclxuICAgIGZ1bmMuZXZhbCA9IHRydWU7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KGZ1bmMsICdsZW5ndGgnLCB0aGlzLk5VTUJFUl9PTkUsIHRydWUpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ2V2YWwnLCBmdW5jKTtcclxuICBcclxuICAgIHZhciBzdHJGdW5jdGlvbnMgPSBbXHJcbiAgICAgIFtlc2NhcGUsICdlc2NhcGUnXSwgW3VuZXNjYXBlLCAndW5lc2NhcGUnXSxcclxuICAgICAgW2RlY29kZVVSSSwgJ2RlY29kZVVSSSddLCBbZGVjb2RlVVJJQ29tcG9uZW50LCAnZGVjb2RlVVJJQ29tcG9uZW50J10sXHJcbiAgICAgIFtlbmNvZGVVUkksICdlbmNvZGVVUkknXSwgW2VuY29kZVVSSUNvbXBvbmVudCwgJ2VuY29kZVVSSUNvbXBvbmVudCddXHJcbiAgICBdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgc3RyID0gKHN0ciB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3RyID0gbmF0aXZlRnVuYyhzdHIpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAvLyBkZWNvZGVVUkkoJyV4eScpIHdpbGwgdGhyb3cgYW4gZXJyb3IuICBDYXRjaCBhbmQgcmV0aHJvdy5cclxuICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5VUklfRVJST1IsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSkoc3RyRnVuY3Rpb25zW2ldWzBdKTtcclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgc3RyRnVuY3Rpb25zW2ldWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcikpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gUnVuIGFueSB1c2VyLXByb3ZpZGVkIGluaXRpYWxpemF0aW9uLlxyXG4gICAgaWYgKHRoaXMuaW5pdEZ1bmNfKSB7XHJcbiAgICAgIHRoaXMuaW5pdEZ1bmNfKHRoaXMsIHNjb3BlKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgRnVuY3Rpb24gY2xhc3MuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdEZ1bmN0aW9uKHNjb3BlKSB7XHJcbiAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcclxuICAgIHZhciB3cmFwcGVyO1xyXG4gICAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IuXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcclxuICAgICAgaWYgKHRoaXMucGFyZW50ID09IHRoaXNJbnRlcnByZXRlci5GVU5DVElPTikge1xyXG4gICAgICAgIC8vIENhbGxlZCB3aXRoIG5ldy5cclxuICAgICAgICB2YXIgbmV3RnVuYyA9IHRoaXM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG5ld0Z1bmMgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5GVU5DVElPTik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29kZSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0udG9TdHJpbmcoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgY29kZSA9ICcnO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0udG9TdHJpbmcoKSk7XHJcbiAgICAgIH1cclxuICAgICAgYXJncyA9IGFyZ3Muam9pbignLCAnKTtcclxuICAgICAgaWYgKGFyZ3MuaW5kZXhPZignKScpICE9IC0xKSB7XHJcbiAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ0Z1bmN0aW9uIGFyZyBzdHJpbmcgY29udGFpbnMgcGFyZW50aGVzaXMnKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBJbnRlcmVzdGluZ2x5LCB0aGUgc2NvcGUgZm9yIGNvbnN0cnVjdGVkIGZ1bmN0aW9ucyBpcyB0aGUgZ2xvYmFsIHNjb3BlLFxyXG4gICAgICAvLyBldmVuIGlmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBpbiBzb21lIG90aGVyIHNjb3BlLlxyXG4gICAgICBuZXdGdW5jLnBhcmVudFNjb3BlID1cclxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zdGF0ZVN0YWNrW3RoaXNJbnRlcnByZXRlci5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdLnNjb3BlO1xyXG4gICAgICB2YXIgYXN0ID0gYWNvcm4ucGFyc2UoJyQgPSBmdW5jdGlvbignICsgYXJncyArICcpIHsnICsgY29kZSArICd9Jyk7XHJcbiAgICAgIG5ld0Z1bmMubm9kZSA9IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24ucmlnaHQ7XHJcbiAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShuZXdGdW5jLCAnbGVuZ3RoJyxcclxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobmV3RnVuYy5ub2RlLmxlbmd0aCksIHRydWUpO1xyXG4gICAgICByZXR1cm4gbmV3RnVuYztcclxuICAgIH1cclxuICAgIHRoaXMuRlVOQ1RJT04gPSB0aGlzLmNyZWF0ZU9iamVjdChudWxsKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdGdW5jdGlvbicsIHRoaXMuRlVOQ1RJT04pO1xyXG4gICAgLy8gTWFudWFsbHkgc2V0dXAgdHlwZSBhbmQgcHJvdG90eXBlIGJlY2F1c2UgY3JlYXRlT2JqIGRvZXNuJ3QgcmVjb2duaXplXHJcbiAgICAvLyB0aGlzIG9iamVjdCBhcyBhIGZ1bmN0aW9uICh0aGlzLkZVTkNUSU9OIGRpZCBub3QgZXhpc3QpLlxyXG4gICAgdGhpcy5GVU5DVElPTi50eXBlID0gJ2Z1bmN0aW9uJztcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5GVU5DVElPTiwgJ3Byb3RvdHlwZScsIHRoaXMuY3JlYXRlT2JqZWN0KG51bGwpKTtcclxuICAgIHRoaXMuRlVOQ1RJT04ubmF0aXZlRnVuYyA9IHdyYXBwZXI7XHJcbiAgXHJcbiAgICAvLyBDcmVhdGUgc3R1YiBmdW5jdGlvbnMgZm9yIGFwcGx5IGFuZCBjYWxsLlxyXG4gICAgLy8gVGhlc2UgYXJlIHByb2Nlc3NlZCBhcyBzcGVjaWFsIGNhc2VzIGluIHN0ZXBDYWxsRXhwcmVzc2lvbi5cclxuICAgIHZhciBub2RlID0ge1xyXG4gICAgICB0eXBlOiAnRnVuY3Rpb25BcHBseV8nLFxyXG4gICAgICBwYXJhbXM6IFtdLFxyXG4gICAgICBpZDogbnVsbCxcclxuICAgICAgYm9keTogbnVsbCxcclxuICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgIGVuZDogMFxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkZVTkNUSU9OLnByb3BlcnRpZXMucHJvdG90eXBlLCAnYXBwbHknLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUZ1bmN0aW9uKG5vZGUsIHt9KSwgZmFsc2UsIHRydWUpO1xyXG4gICAgbm9kZSA9IHtcclxuICAgICAgdHlwZTogJ0Z1bmN0aW9uQ2FsbF8nLFxyXG4gICAgICBwYXJhbXM6IFtdLFxyXG4gICAgICBpZDogbnVsbCxcclxuICAgICAgYm9keTogbnVsbCxcclxuICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgIGVuZDogMFxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkZVTkNUSU9OLnByb3BlcnRpZXMucHJvdG90eXBlLCAnY2FsbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRnVuY3Rpb24obm9kZSwge30pLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICAvLyBGdW5jdGlvbiBoYXMgbm8gcGFyZW50IHRvIGluaGVyaXQgZnJvbSwgc28gaXQgbmVlZHMgaXRzIG93biBtYW5kYXRvcnlcclxuICAgIC8vIHRvU3RyaW5nIGFuZCB2YWx1ZU9mIGZ1bmN0aW9ucy5cclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5GVU5DVElPTi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RvU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkZVTkNUSU9OLCAndG9TdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMudmFsdWVPZigpKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5GVU5DVElPTi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3ZhbHVlT2YnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRlVOQ1RJT04sICd2YWx1ZU9mJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBPYmplY3QgY2xhc3MuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdE9iamVjdChzY29wZSkge1xyXG4gICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XHJcbiAgICB2YXIgd3JhcHBlcjtcclxuICAgIC8vIE9iamVjdCBjb25zdHJ1Y3Rvci5cclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbih2YXJfYXJncykge1xyXG4gICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLk9CSkVDVCkge1xyXG4gICAgICAgIC8vIENhbGxlZCB3aXRoIG5ldy5cclxuICAgICAgICB2YXIgbmV3T2JqID0gdGhpcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbmV3T2JqID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuT0JKRUNUKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3T2JqO1xyXG4gICAgfVxyXG4gICAgdGhpcy5PQkpFQ1QgPSB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ09iamVjdCcsIHRoaXMuT0JKRUNUKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QucHJvcGVydGllcy5wcm90b3R5cGUsICd0b1N0cmluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy52YWx1ZU9mKCkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3ZhbHVlT2YnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24ocHJvcCkge1xyXG4gICAgICBwcm9wID0gKHByb3AgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcclxuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJvcGVydGllcykge1xyXG4gICAgICAgIGlmIChrZXkgPT0gcHJvcCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5UUlVFO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLkZBTFNFO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2hhc093blByb3BlcnR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICBrZXkgPSAoa2V5IHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQpLnRvU3RyaW5nKCk7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKCEoa2V5IGluIHRoaXMubm9uZW51bWVyYWJsZSkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICB2YXIgcHNldWRvTGlzdCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkFSUkFZKTtcclxuICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLnByb3BlcnRpZXMpIHtcclxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkocHNldWRvTGlzdCwgaSxcclxuICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShrZXkpKTtcclxuICAgICAgICBpKys7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBzZXVkb0xpc3Q7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuT0JKRUNULCAnZ2V0T3duUHJvcGVydHlOYW1lcycsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgdmFyIHBzZXVkb0xpc3QgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XHJcbiAgICAgIHZhciBpID0gMDtcclxuICAgICAgZm9yICh2YXIga2V5IGluIG9iai5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgaWYgKGtleSBpbiBvYmoubm9uZW51bWVyYWJsZSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShwc2V1ZG9MaXN0LCBpLFxyXG4gICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGtleSkpO1xyXG4gICAgICAgIGkrKztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHNldWRvTGlzdDtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QsICdrZXlzJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKG9iaiwgcHJvcCwgZGVzY3JpcHRvcikge1xyXG4gICAgICBwcm9wID0gKHByb3AgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcclxuICAgICAgaWYgKCEoZGVzY3JpcHRvciBpbnN0YW5jZW9mIEludGVycHJldGVyLk9iamVjdCkpIHtcclxuICAgICAgICB0aHJvdyBFcnJvcignUHJvcGVydHkgZGVzY3JpcHRpb24gbXVzdCBiZSBhbiBvYmplY3QuJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QsICdkZWZpbmVQcm9wZXJ0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgQXJyYXkgY2xhc3MuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdEFycmF5KHNjb3BlKSB7XHJcbiAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcclxuICAgIHZhciBnZXRJbnQgPSBmdW5jdGlvbihvYmosIGRlZikge1xyXG4gICAgICAvLyBSZXR1cm4gYW4gaW50ZWdlciwgb3IgdGhlIGRlZmF1bHQuXHJcbiAgICAgIHZhciBuID0gb2JqID8gTWF0aC5mbG9vcihvYmoudG9OdW1iZXIoKSkgOiBkZWY7XHJcbiAgICAgIGlmIChpc05hTihuKSkge1xyXG4gICAgICAgIG4gPSBkZWY7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9XHJcbiAgICB2YXIgc3RyaWN0Q29tcCA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgLy8gU3RyaWN0ID09PSBjb21wYXJpc29uLlxyXG4gICAgICBpZiAoYS5pc1ByaW1pdGl2ZSAmJiBiLmlzUHJpbWl0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIGEuZGF0YSA9PT0gYi5kYXRhO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhID09PSBiO1xyXG4gICAgfVxyXG4gICAgdmFyIHdyYXBwZXI7XHJcbiAgICAvLyBBcnJheSBjb25zdHJ1Y3Rvci5cclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbih2YXJfYXJncykge1xyXG4gICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLkFSUkFZKSB7XHJcbiAgICAgICAgLy8gQ2FsbGVkIHdpdGggbmV3LlxyXG4gICAgICAgIHZhciBuZXdBcnJheSA9IHRoaXM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG5ld0FycmF5ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBmaXJzdCA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgaWYgKGZpcnN0ICYmIGZpcnN0LnR5cGUgPT0gJ251bWJlcicpIHtcclxuICAgICAgICBpZiAoaXNOYU4odGhpc0ludGVycHJldGVyLmFycmF5SW5kZXgoZmlyc3QpKSkge1xyXG4gICAgICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5SQU5HRV9FUlJPUixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCBhcnJheSBsZW5ndGgnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3QXJyYXkubGVuZ3RoID0gZmlyc3QuZGF0YTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgbmV3QXJyYXkucHJvcGVydGllc1tpXSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3QXJyYXkubGVuZ3RoID0gaTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3QXJyYXk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5BUlJBWSA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcik7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnQXJyYXknLCB0aGlzLkFSUkFZKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wZXJ0aWVzW3RoaXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIHRoaXMubGVuZ3RoLS07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAncG9wJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW3RoaXMubGVuZ3RoXSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICB0aGlzLmxlbmd0aCsrO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMubGVuZ3RoKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdwdXNoJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BlcnRpZXNbMF07XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB0aGlzLnByb3BlcnRpZXNbaSAtIDFdID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxlbmd0aC0tO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnByb3BlcnRpZXNbdGhpcy5sZW5ndGhdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5BUlJBWS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3NoaWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW2kgKyBhcmd1bWVudHMubGVuZ3RoXSA9IHRoaXMucHJvcGVydGllc1tpXTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxlbmd0aCArPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh0aGlzLmxlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAndW5zaGlmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAvIDI7IGkrKykge1xyXG4gICAgICAgIHZhciB0bXAgPSB0aGlzLnByb3BlcnRpZXNbdGhpcy5sZW5ndGggLSBpIC0gMV07XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW3RoaXMubGVuZ3RoIC0gaSAtIDFdID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9IHRtcDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdyZXZlcnNlJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKGluZGV4LCBob3dtYW55LCB2YXJfYXJncykge1xyXG4gICAgICBpbmRleCA9IGdldEludChpbmRleCwgMCk7XHJcbiAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICBpbmRleCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoICsgaW5kZXgsIDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRoaXMubGVuZ3RoKTtcclxuICAgICAgfVxyXG4gICAgICBob3dtYW55ID0gZ2V0SW50KGhvd21hbnksIEluZmluaXR5KTtcclxuICAgICAgaG93bWFueSA9IE1hdGgubWluKGhvd21hbnksIHRoaXMubGVuZ3RoIC0gaW5kZXgpO1xyXG4gICAgICB2YXIgcmVtb3ZlZCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkFSUkFZKTtcclxuICAgICAgLy8gUmVtb3ZlIHNwZWNpZmllZCBlbGVtZW50cy5cclxuICAgICAgZm9yICh2YXIgaSA9IGluZGV4OyBpIDwgaW5kZXggKyBob3dtYW55OyBpKyspIHtcclxuICAgICAgICByZW1vdmVkLnByb3BlcnRpZXNbcmVtb3ZlZC5sZW5ndGgrK10gPSB0aGlzLnByb3BlcnRpZXNbaV07XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW2ldID0gdGhpcy5wcm9wZXJ0aWVzW2kgKyBob3dtYW55XTtcclxuICAgICAgfVxyXG4gICAgICAvLyBNb3ZlIG90aGVyIGVsZW1lbnQgdG8gZmlsbCB0aGUgZ2FwLlxyXG4gICAgICBmb3IgKHZhciBpID0gaW5kZXggKyBob3dtYW55OyBpIDwgdGhpcy5sZW5ndGggLSBob3dtYW55OyBpKyspIHtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXNbaV0gPSB0aGlzLnByb3BlcnRpZXNbaSArIGhvd21hbnldO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIERlbGV0ZSBzdXBlcmZsdW91cyBwcm9wZXJ0aWVzLlxyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSBob3dtYW55OyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnByb3BlcnRpZXNbaV07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5sZW5ndGggLT0gaG93bWFueTtcclxuICAgICAgLy8gSW5zZXJ0IHNwZWNpZmllZCBpdGVtcy5cclxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaS0tKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW2kgKyBhcmd1bWVudHMubGVuZ3RoIC0gMl0gPSB0aGlzLnByb3BlcnRpZXNbaV07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5sZW5ndGggKz0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XHJcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW2luZGV4ICsgaSAtIDJdID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZW1vdmVkO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5BUlJBWS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3NwbGljZScsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihvcHRfYmVnaW4sIG9wdF9lbmQpIHtcclxuICAgICAgdmFyIGxpc3QgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XHJcbiAgICAgIHZhciBiZWdpbiA9IGdldEludChvcHRfYmVnaW4sIDApO1xyXG4gICAgICBpZiAoYmVnaW4gPCAwKSB7XHJcbiAgICAgICAgYmVnaW4gPSB0aGlzLmxlbmd0aCArIGJlZ2luO1xyXG4gICAgICB9XHJcbiAgICAgIGJlZ2luID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYmVnaW4sIHRoaXMubGVuZ3RoKSk7XHJcbiAgICAgIHZhciBlbmQgPSBnZXRJbnQob3B0X2VuZCwgdGhpcy5sZW5ndGgpO1xyXG4gICAgICBpZiAoZW5kIDwgMCkge1xyXG4gICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoICsgZW5kO1xyXG4gICAgICB9XHJcbiAgICAgIGVuZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGVuZCwgdGhpcy5sZW5ndGgpKTtcclxuICAgICAgdmFyIGxlbmd0aCA9IDA7XHJcbiAgICAgIGZvciAodmFyIGkgPSBiZWdpbjsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XHJcbiAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGxpc3QsIGxlbmd0aCsrLCBlbGVtZW50KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbGlzdDtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdzbGljZScsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihvcHRfc2VwYXJhdG9yKSB7XHJcbiAgICAgIGlmICghb3B0X3NlcGFyYXRvciB8fCBvcHRfc2VwYXJhdG9yLmRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhciBzZXAgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHNlcCA9IG9wdF9zZXBhcmF0b3IudG9TdHJpbmcoKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgdGV4dCA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0ZXh0W2ldID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRleHQuam9pbihzZXApKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdqb2luJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XHJcbiAgICAgIHZhciBsaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xyXG4gICAgICB2YXIgbGVuZ3RoID0gMDtcclxuICAgICAgLy8gU3RhcnQgYnkgY29weWluZyB0aGUgY3VycmVudCBhcnJheS5cclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XHJcbiAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KGxpc3QsIGxlbmd0aCsrLCBlbGVtZW50KTtcclxuICAgICAgfVxyXG4gICAgICAvLyBMb29wIHRocm91Z2ggYWxsIGFyZ3VtZW50cyBhbmQgY29weSB0aGVtIGluLlxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBpZiAodGhpc0ludGVycHJldGVyLmlzYSh2YWx1ZSwgdGhpc0ludGVycHJldGVyLkFSUkFZKSkge1xyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eSh2YWx1ZSwgaik7XHJcbiAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShsaXN0LCBsZW5ndGgrKywgZWxlbWVudCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShsaXN0LCBsZW5ndGgrKywgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbGlzdDtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdjb25jYXQnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oc2VhcmNoRWxlbWVudCwgb3B0X2Zyb21JbmRleCkge1xyXG4gICAgICBzZWFyY2hFbGVtZW50ID0gc2VhcmNoRWxlbWVudCB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xyXG4gICAgICB2YXIgZnJvbUluZGV4ID0gZ2V0SW50KG9wdF9mcm9tSW5kZXgsIDApO1xyXG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xyXG4gICAgICAgIGZyb21JbmRleCA9IHRoaXMubGVuZ3RoICsgZnJvbUluZGV4O1xyXG4gICAgICB9XHJcbiAgICAgIGZyb21JbmRleCA9IE1hdGgubWF4KDAsIGZyb21JbmRleCk7XHJcbiAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XHJcbiAgICAgICAgaWYgKHN0cmljdENvbXAoZWxlbWVudCwgc2VhcmNoRWxlbWVudCkpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSgtMSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAnaW5kZXhPZicsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihzZWFyY2hFbGVtZW50LCBvcHRfZnJvbUluZGV4KSB7XHJcbiAgICAgIHNlYXJjaEVsZW1lbnQgPSBzZWFyY2hFbGVtZW50IHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XHJcbiAgICAgIHZhciBmcm9tSW5kZXggPSBnZXRJbnQob3B0X2Zyb21JbmRleCwgdGhpcy5sZW5ndGgpO1xyXG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xyXG4gICAgICAgIGZyb21JbmRleCA9IHRoaXMubGVuZ3RoICsgZnJvbUluZGV4O1xyXG4gICAgICB9XHJcbiAgICAgIGZyb21JbmRleCA9IE1hdGgubWluKGZyb21JbmRleCwgdGhpcy5sZW5ndGggLSAxKTtcclxuICAgICAgZm9yICh2YXIgaSA9IGZyb21JbmRleDsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eSh0aGlzLCBpKTtcclxuICAgICAgICBpZiAoc3RyaWN0Q29tcChlbGVtZW50LCBzZWFyY2hFbGVtZW50KSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKC0xKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdsYXN0SW5kZXhPZicsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihvcHRfY29tcEZ1bmMpIHtcclxuICAgICAgdmFyIGpzTGlzdCA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBqc0xpc3RbaV0gPSB0aGlzLnByb3BlcnRpZXNbaV07XHJcbiAgICAgIH1cclxuICAgICAgLy8gVE9ETzogQWRkIGN1c3RvbSBzb3J0IGNvbXBhcmlzb24gZnVuY3Rpb24ob3B0X2NvbXBGdW5jKS5cclxuICAgICAganNMaXN0LnNvcnQoKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc0xpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkodGhpcywgaSwganNMaXN0W2ldKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdzb3J0JyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgTnVtYmVyIGNsYXNzLlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxyXG4gICAqL1xyXG4gIGluaXROdW1iZXIoc2NvcGUpIHtcclxuICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xyXG4gICAgdmFyIHdyYXBwZXI7XHJcbiAgICAvLyBOdW1iZXIgY29uc3RydWN0b3IuXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlLnRvTnVtYmVyKCkgOiAwO1xyXG4gICAgICBpZiAodGhpcy5wYXJlbnQgIT0gdGhpc0ludGVycHJldGVyLk5VTUJFUikge1xyXG4gICAgICAgIC8vIENhbGxlZCBhcyBOdW1iZXIoKS5cclxuICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBOdW1iZXIoKS5cclxuICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIHRoaXMuTlVNQkVSID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdOdW1iZXInLCB0aGlzLk5VTUJFUik7XHJcbiAgXHJcbiAgICB2YXIgbnVtQ29uc3RzID0gWydNQVhfVkFMVUUnLCAnTUlOX1ZBTFVFJywgJ05hTicsICdORUdBVElWRV9JTkZJTklUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICdQT1NJVElWRV9JTkZJTklUWSddO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Db25zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk5VTUJFUiwgbnVtQ29uc3RzW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJpbWl0aXZlKE51bWJlcltudW1Db25zdHNbaV1dKSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oZnJhY3Rpb25EaWdpdHMpIHtcclxuICAgICAgZnJhY3Rpb25EaWdpdHMgPSBmcmFjdGlvbkRpZ2l0cyA/IGZyYWN0aW9uRGlnaXRzLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciBuID0gdGhpcy50b051bWJlcigpO1xyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShuLnRvRXhwb25lbnRpYWwoZnJhY3Rpb25EaWdpdHMpKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9FeHBvbmVudGlhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihkaWdpdHMpIHtcclxuICAgICAgZGlnaXRzID0gZGlnaXRzID8gZGlnaXRzLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciBuID0gdGhpcy50b051bWJlcigpO1xyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShuLnRvRml4ZWQoZGlnaXRzKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk5VTUJFUi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RvRml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24ocHJlY2lzaW9uKSB7XHJcbiAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA/IHByZWNpc2lvbi50b051bWJlcigpIDogdW5kZWZpbmVkO1xyXG4gICAgICB2YXIgbiA9IHRoaXMudG9OdW1iZXIoKTtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobi50b1ByZWNpc2lvbihwcmVjaXNpb24pKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9QcmVjaXNpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24ocmFkaXgpIHtcclxuICAgICAgcmFkaXggPSByYWRpeCA/IHJhZGl4LnRvTnVtYmVyKCkgOiAxMDtcclxuICAgICAgdmFyIG4gPSB0aGlzLnRvTnVtYmVyKCk7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG4udG9TdHJpbmcocmFkaXgpKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9TdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBTdHJpbmcgY2xhc3MuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdFN0cmluZyhzY29wZSkge1xyXG4gICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XHJcbiAgICB2YXIgd3JhcHBlcjtcclxuICAgIC8vIFN0cmluZyBjb25zdHJ1Y3Rvci5cclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlID8gdmFsdWUudG9TdHJpbmcoKSA6ICcnO1xyXG4gICAgICBpZiAodGhpcy5wYXJlbnQgIT0gdGhpc0ludGVycHJldGVyLlNUUklORykge1xyXG4gICAgICAgIC8vIENhbGxlZCBhcyBTdHJpbmcoKS5cclxuICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBTdHJpbmcoKS5cclxuICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIHRoaXMuU1RSSU5HID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdTdHJpbmcnLCB0aGlzLlNUUklORyk7XHJcbiAgXHJcbiAgICB2YXIgZnVuY3Rpb25zID0gWyd0b0xvd2VyQ2FzZScsICd0b1VwcGVyQ2FzZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICd0b0xvY2FsZUxvd2VyQ2FzZScsICd0b0xvY2FsZVVwcGVyQ2FzZSddO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobmF0aXZlRnVuYy5hcHBseSh0aGlzKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkoU3RyaW5nLnByb3RvdHlwZVtmdW5jdGlvbnNbaV1dKTtcclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgZnVuY3Rpb25zW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuICBcclxuICAgIC8vIFRyaW0gZnVuY3Rpb24gbWF5IG5vdCBleGlzdCBpbiBob3N0IGJyb3dzZXIuICBXcml0ZSB0aGVtIGZyb20gc2NyYXRjaC5cclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RyaW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5yZXBsYWNlKC9eXFxzKy9nLCAnJykpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICd0cmltTGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnJlcGxhY2UoL1xccyskL2csICcnKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RyaW1SaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihudW0pIHtcclxuICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcclxuICAgICAgbnVtID0gKG51bSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b051bWJlcigpO1xyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIuY2hhckF0KG51bSkpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdjaGFyQXQnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24obnVtKSB7XHJcbiAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICAgIG51bSA9IChudW0gfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9OdW1iZXIoKTtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLmNoYXJDb2RlQXQobnVtKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2NoYXJDb2RlQXQnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUsIGZyb21JbmRleCkge1xyXG4gICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICBzZWFyY2hWYWx1ZSA9IChzZWFyY2hWYWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xyXG4gICAgICBmcm9tSW5kZXggPSBmcm9tSW5kZXggPyBmcm9tSW5kZXgudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoXHJcbiAgICAgICAgICBzdHIuaW5kZXhPZihzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2luZGV4T2YnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUsIGZyb21JbmRleCkge1xyXG4gICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICBzZWFyY2hWYWx1ZSA9IChzZWFyY2hWYWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xyXG4gICAgICBmcm9tSW5kZXggPSBmcm9tSW5kZXggPyBmcm9tSW5kZXgudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoXHJcbiAgICAgICAgICBzdHIubGFzdEluZGV4T2Yoc2VhcmNoVmFsdWUsIGZyb21JbmRleCkpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdsYXN0SW5kZXhPZicsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihjb21wYXJlU3RyaW5nKSB7XHJcbiAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICAgIGNvbXBhcmVTdHJpbmcgPSAoY29tcGFyZVN0cmluZyB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIubG9jYWxlQ29tcGFyZShjb21wYXJlU3RyaW5nKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2xvY2FsZUNvbXBhcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCkge1xyXG4gICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICBpZiAoc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgc2VwYXJhdG9yID0gdGhpc0ludGVycHJldGVyLmlzYShzZXBhcmF0b3IsIHRoaXNJbnRlcnByZXRlci5SRUdFWFApID9cclxuICAgICAgICAgICAgc2VwYXJhdG9yLmRhdGEgOiBzZXBhcmF0b3IudG9TdHJpbmcoKTtcclxuICAgICAgfSBlbHNlIHsgLy8gaXMgdGhpcyByZWFsbHkgbmVjZXNzYXJ5P1xyXG4gICAgICAgIHNlcGFyYXRvciA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgICBsaW1pdCA9IGxpbWl0ID8gbGltaXQudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgdmFyIGpzTGlzdCA9IHN0ci5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcclxuICAgICAgdmFyIHBzZXVkb0xpc3QgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHBzZXVkb0xpc3QsIGksXHJcbiAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoanNMaXN0W2ldKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBzZXVkb0xpc3Q7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3NwbGl0JyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKGluZGV4QSwgaW5kZXhCKSB7XHJcbiAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICAgIGluZGV4QSA9IGluZGV4QSA/IGluZGV4QS50b051bWJlcigpIDogdW5kZWZpbmVkO1xyXG4gICAgICBpbmRleEIgPSBpbmRleEIgPyBpbmRleEIudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnN1YnN0cmluZyhpbmRleEEsIGluZGV4QikpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdzdWJzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oc3RhcnQsIGxlbmd0aCkge1xyXG4gICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICBzdGFydCA9IHN0YXJ0ID8gc3RhcnQudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgbGVuZ3RoID0gbGVuZ3RoID8gbGVuZ3RoLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5zdWJzdHIoc3RhcnQsIGxlbmd0aCkpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdzdWJzdHInLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcclxuICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBzdHIgKz0gYXJndW1lbnRzW2ldLnRvU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuU1RSSU5HLnByb3BlcnRpZXMucHJvdG90eXBlLCAnY29uY2F0JyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKGJlZ2luU2xpY2UsIGVuZFNsaWNlKSB7XHJcbiAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICAgIGJlZ2luU2xpY2UgPSBiZWdpblNsaWNlID8gYmVnaW5TbGljZS50b051bWJlcigpIDogdW5kZWZpbmVkO1xyXG4gICAgICBlbmRTbGljZSA9IGVuZFNsaWNlID8gZW5kU2xpY2UudG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnNsaWNlKGJlZ2luU2xpY2UsIGVuZFNsaWNlKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3NsaWNlJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xyXG4gICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICByZWdleHAgPSByZWdleHAgPyByZWdleHAuZGF0YSA6IHVuZGVmaW5lZDtcclxuICAgICAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4cCk7XHJcbiAgICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuTlVMTDtcclxuICAgICAgfVxyXG4gICAgICB2YXIgcHNldWRvTGlzdCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkFSUkFZKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShwc2V1ZG9MaXN0LCBpLFxyXG4gICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG1hdGNoW2ldKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBzZXVkb0xpc3Q7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ21hdGNoJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xyXG4gICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICByZWdleHAgPSByZWdleHAgPyByZWdleHAuZGF0YSA6IHVuZGVmaW5lZDtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnNlYXJjaChyZWdleHApKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuU1RSSU5HLnByb3BlcnRpZXMucHJvdG90eXBlLCAnc2VhcmNoJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHN1YnN0ciwgbmV3U3ViU3RyKSB7XHJcbiAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICAgIHN1YnN0ciA9IChzdWJzdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudmFsdWVPZigpO1xyXG4gICAgICBuZXdTdWJTdHIgPSAobmV3U3ViU3RyIHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQpLnRvU3RyaW5nKCk7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5yZXBsYWNlKHN1YnN0ciwgbmV3U3ViU3RyKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3JlcGxhY2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcmd1bWVudHNbaV0gPSBhcmd1bWVudHNbaV0udG9OdW1iZXIoKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShcclxuICAgICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBhcmd1bWVudHMpKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuU1RSSU5HLCAnZnJvbUNoYXJDb2RlJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgQm9vbGVhbiBjbGFzcy5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuICAgKi9cclxuICBpbml0Qm9vbGVhbihzY29wZSkge1xyXG4gICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XHJcbiAgICB2YXIgd3JhcHBlcjtcclxuICAgIC8vIEJvb2xlYW4gY29uc3RydWN0b3IuXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlLnRvQm9vbGVhbigpIDogZmFsc2U7XHJcbiAgICAgIGlmICh0aGlzLnBhcmVudCAhPSB0aGlzSW50ZXJwcmV0ZXIuQk9PTEVBTikge1xyXG4gICAgICAgIC8vIENhbGxlZCBhcyBCb29sZWFuKCkuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIENhbGxlZCBhcyBuZXcgQm9vbGVhbigpLlxyXG4gICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5CT09MRUFOID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdCb29sZWFuJywgdGhpcy5CT09MRUFOKTtcclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIERhdGUgY2xhc3MuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdERhdGUoc2NvcGUpIHtcclxuICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xyXG4gICAgdmFyIHdyYXBwZXI7XHJcbiAgICAvLyBEYXRlIGNvbnN0cnVjdG9yLlxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYsIGgpIHtcclxuICAgICAgaWYgKHRoaXMucGFyZW50ID09IHRoaXNJbnRlcnByZXRlci5EQVRFKSB7XHJcbiAgICAgICAgLy8gQ2FsbGVkIHdpdGggbmV3LlxyXG4gICAgICAgIHZhciBuZXdEYXRlID0gdGhpcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbmV3RGF0ZSA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkRBVEUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIG5ld0RhdGUuZGF0YSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxICYmIChhLnR5cGUgPT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5pc2EoYSwgdGhpc0ludGVycHJldGVyLlNUUklORykpKSB7XHJcbiAgICAgICAgbmV3RGF0ZS5kYXRhID0gbmV3IERhdGUoYS50b1N0cmluZygpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtudWxsXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgYXJnc1tpICsgMV0gPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0udG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3RGF0ZS5kYXRhID0gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShEYXRlLCBhcmdzKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5ld0RhdGU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5EQVRFID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdEYXRlJywgdGhpcy5EQVRFKTtcclxuICBcclxuICAgIC8vIFN0YXRpYyBtZXRob2RzIG9uIERhdGUuXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURSwgJ25vdycsXHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICBcclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihkYXRlU3RyaW5nKSB7XHJcbiAgICAgIGRhdGVTdHJpbmcgPSBkYXRlU3RyaW5nID8gZGF0ZVN0cmluZy50b1N0cmluZygpIDogdW5kZWZpbmVkO1xyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShEYXRlLnBhcnNlKGRhdGVTdHJpbmcpKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURSwgJ3BhcnNlJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYsIGgpIHtcclxuICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYXJncykpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5EQVRFLCAnVVRDJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgLy8gR2V0dGVyIG1ldGhvZHMuXHJcbiAgICB2YXIgZ2V0RnVuY3Rpb25zID0gWydnZXREYXRlJywgJ2dldERheScsICdnZXRGdWxsWWVhcicsICdnZXRIb3VycycsXHJcbiAgICAgICAgJ2dldE1pbGxpc2Vjb25kcycsICdnZXRNaW51dGVzJywgJ2dldE1vbnRoJywgJ2dldFNlY29uZHMnLCAnZ2V0VGltZScsXHJcbiAgICAgICAgJ2dldFRpbWV6b25lT2Zmc2V0JywgJ2dldFVUQ0RhdGUnLCAnZ2V0VVRDRGF5JywgJ2dldFVUQ0Z1bGxZZWFyJyxcclxuICAgICAgICAnZ2V0VVRDSG91cnMnLCAnZ2V0VVRDTWlsbGlzZWNvbmRzJywgJ2dldFVUQ01pbnV0ZXMnLCAnZ2V0VVRDTW9udGgnLFxyXG4gICAgICAgICdnZXRVVENTZWNvbmRzJywgJ2dldFllYXInXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2V0RnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHdyYXBwZXIgPSAoZnVuY3Rpb24obmF0aXZlRnVuYykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMuZGF0YVtuYXRpdmVGdW5jXSgpKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KShnZXRGdW5jdGlvbnNbaV0pO1xyXG4gICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgZ2V0RnVuY3Rpb25zW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuICBcclxuICAgIC8vIFNldHRlciBtZXRob2RzLlxyXG4gICAgdmFyIHNldEZ1bmN0aW9ucyA9IFsnc2V0RGF0ZScsICdzZXRGdWxsWWVhcicsICdzZXRIb3VycycsICdzZXRNaWxsaXNlY29uZHMnLFxyXG4gICAgICAgICdzZXRNaW51dGVzJywgJ3NldE1vbnRoJywgJ3NldFNlY29uZHMnLCAnc2V0VGltZScsICdzZXRVVENEYXRlJyxcclxuICAgICAgICAnc2V0VVRDRnVsbFllYXInLCAnc2V0VVRDSG91cnMnLCAnc2V0VVRDTWlsbGlzZWNvbmRzJywgJ3NldFVUQ01pbnV0ZXMnLFxyXG4gICAgICAgICdzZXRVVENNb250aCcsICdzZXRVVENTZWNvbmRzJywgJ3NldFllYXInXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0RnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHdyYXBwZXIgPSAoZnVuY3Rpb24obmF0aXZlRnVuYykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YXJfYXJncykge1xyXG4gICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0udG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFxyXG4gICAgICAgICAgICAgIHRoaXMuZGF0YVtuYXRpdmVGdW5jXS5hcHBseSh0aGlzLmRhdGEsIGFyZ3MpKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KShzZXRGdW5jdGlvbnNbaV0pO1xyXG4gICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgc2V0RnVuY3Rpb25zW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuICBcclxuICAgIC8vIENvbnZlcnNpb24gZ2V0dGVyIG1ldGhvZHMuXHJcbiAgICBnZXRGdW5jdGlvbnMgPSBbJ3RvRGF0ZVN0cmluZycsICd0b0lTT1N0cmluZycsICd0b0dNVFN0cmluZycsXHJcbiAgICAgICAgJ3RvTG9jYWxlRGF0ZVN0cmluZycsICd0b0xvY2FsZVN0cmluZycsICd0b0xvY2FsZVRpbWVTdHJpbmcnLFxyXG4gICAgICAgICd0b1RpbWVTdHJpbmcnLCAndG9VVENTdHJpbmcnXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2V0RnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHdyYXBwZXIgPSAoZnVuY3Rpb24obmF0aXZlRnVuYykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMuZGF0YVtuYXRpdmVGdW5jXSgpKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KShnZXRGdW5jdGlvbnNbaV0pO1xyXG4gICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgZ2V0RnVuY3Rpb25zW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgTWF0aCBvYmplY3QuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcbiAgICovXHJcbiAgaW5pdE1hdGgoc2NvcGUpIHtcclxuICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xyXG4gICAgdmFyIG15TWF0aCA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuT0JKRUNUKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdNYXRoJywgbXlNYXRoKTtcclxuICAgIHZhciBtYXRoQ29uc3RzID0gWydFJywgJ0xOMicsICdMTjEwJywgJ0xPRzJFJywgJ0xPRzEwRScsICdQSScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAnU1FSVDFfMicsICdTUVJUMiddO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRoQ29uc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMuc2V0UHJvcGVydHkobXlNYXRoLCBtYXRoQ29uc3RzW2ldLFxyXG4gICAgICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUoTWF0aFttYXRoQ29uc3RzW2ldXSksIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuICAgIHZhciBudW1GdW5jdGlvbnMgPSBbJ2FicycsICdhY29zJywgJ2FzaW4nLCAnYXRhbicsICdhdGFuMicsICdjZWlsJywgJ2NvcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdleHAnLCAnZmxvb3InLCAnbG9nJywgJ21heCcsICdtaW4nLCAncG93JywgJ3JhbmRvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdyb3VuZCcsICdzaW4nLCAnc3FydCcsICd0YW4nXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciB3cmFwcGVyID0gKGZ1bmN0aW9uKG5hdGl2ZUZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyZ3VtZW50cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBhcmd1bWVudHNbal0gPSBhcmd1bWVudHNbal0udG9OdW1iZXIoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFxyXG4gICAgICAgICAgICAgIG5hdGl2ZUZ1bmMuYXBwbHkoTWF0aCwgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkoTWF0aFtudW1GdW5jdGlvbnNbaV1dKTtcclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShteU1hdGgsIG51bUZ1bmN0aW9uc1tpXSxcclxuICAgICAgICAgIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgUmVndWxhciBFeHByZXNzaW9uIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuICAgKi9cclxuICBpbml0UmVnRXhwKHNjb3BlKSB7XHJcbiAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcclxuICAgIHZhciB3cmFwcGVyO1xyXG4gICAgLy8gUmVnZXggY29uc3RydWN0b3IuXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24ocGF0dGVybiwgZmxhZ3MpIHtcclxuICAgICAgaWYgKHRoaXMucGFyZW50ID09IHRoaXNJbnRlcnByZXRlci5SRUdFWFApIHtcclxuICAgICAgICAvLyBDYWxsZWQgd2l0aCBuZXcuXHJcbiAgICAgICAgdmFyIHJneCA9IHRoaXM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHJneCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLlJFR0VYUCk7XHJcbiAgICAgIH1cclxuICAgICAgcGF0dGVybiA9IHBhdHRlcm4gPyBwYXR0ZXJuLnRvU3RyaW5nKCkgOiAnJztcclxuICAgICAgZmxhZ3MgPSBmbGFncyA/IGZsYWdzLnRvU3RyaW5nKCkgOiAnJztcclxuICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVJlZ0V4cChyZ3gsIG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpKTtcclxuICAgICAgcmV0dXJuIHJneDtcclxuICAgIH07XHJcbiAgICB0aGlzLlJFR0VYUCA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcik7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnUmVnRXhwJywgdGhpcy5SRUdFWFApO1xyXG4gIFxyXG4gICAgd3JhcHBlciA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcclxuICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5kYXRhLnRlc3Qoc3RyKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlJFR0VYUC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3Rlc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgIHN0ciA9IHN0ci50b1N0cmluZygpO1xyXG4gICAgICAvLyBHZXQgbGFzdEluZGV4IGZyb20gd3JhcHBlZCByZWdleCwgc2luY2UgdGhpcyBpcyBzZXR0YWJsZS5cclxuICAgICAgdGhpcy5kYXRhLmxhc3RJbmRleCA9XHJcbiAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgJ2xhc3RJbmRleCcpLnRvTnVtYmVyKCk7XHJcbiAgICAgIHZhciBtYXRjaCA9IHRoaXMuZGF0YS5leGVjKHN0cik7XHJcbiAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eSh0aGlzLCAnbGFzdEluZGV4JyxcclxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5kYXRhLmxhc3RJbmRleCkpO1xyXG4gIFxyXG4gICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2gubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShyZXN1bHQsIGksXHJcbiAgICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShtYXRjaFtpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtYXRjaCBoYXMgYWRkaXRpb25hbCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShyZXN1bHQsICdpbmRleCcsXHJcbiAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobWF0Y2guaW5kZXgpKTtcclxuICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkocmVzdWx0LCAnaW5wdXQnLFxyXG4gICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG1hdGNoLmlucHV0KSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLk5VTEw7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlJFR0VYUC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2V4ZWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDb252ZXJ0cyBmcm9tIG5hdGl2ZSBKUyB2YWx1ZSB0byBhIEpTIGludGVycHJldGVyIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyp9IG5hdGl2ZU9iaiBUaGUgbmF0aXZlIEpTIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQuXHJcbiAgICogQHJldHVybiB7IU9iamVjdH0gVGhlIGVxdWl2YWxlbnQgdGhpcy5PQkpFQ1QuXHJcbiAgICovXHJcbiAgY3JlYXRlUHNldWRvT2JqZWN0KG5hdGl2ZU9iaikge1xyXG4gICAgdmFyIHBzZXVkb09iamVjdCA9IHRoaXMub2JqZWN0TWFwLmdldChuYXRpdmVPYmopO1xyXG4gICAgaWYgKHBzZXVkb09iamVjdCkge1xyXG4gICAgICByZXR1cm4gcHNldWRvT2JqZWN0XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYXRpdmVPYmogPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgcHNldWRvT2JqZWN0ID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbihuYXRpdmVPYmopO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmF0aXZlT2JqICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVQcmltaXRpdmUobmF0aXZlT2JqKTtcclxuICAgIH0gZWxzZSBpZiAobmF0aXZlT2JqIGluc3RhbmNlb2YgQXJyYXkpIHsgLy8gQXJyYXkuXHJcbiAgICAgIHBzZXVkb09iamVjdCA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuQVJSQVkpO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hdGl2ZU9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkocHNldWRvT2JqZWN0LCBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVBzZXVkb09iamVjdChuYXRpdmVPYmpbaV0pKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHsgLy8gT2JqZWN0LlxyXG4gICAgICBwc2V1ZG9PYmplY3QgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCk7XHJcbiAgICAgIHBzZXVkb09iamVjdC5pc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLm9iamVjdE1hcC5zZXQobmF0aXZlT2JqLCBwc2V1ZG9PYmplY3QpO1xyXG4gICAgcHNldWRvT2JqZWN0LmRhdGEgPSBuYXRpdmVPYmo7XHJcbiAgICByZXR1cm4gcHNldWRvT2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBKU09OIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuICAgKi9cclxuICBpbml0SlNPTihzY29wZSkge1xyXG4gICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XHJcbiAgICB2YXIgbXlKU09OID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCk7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnSlNPTicsIG15SlNPTik7XHJcbiAgXHJcbiAgICB2YXIgd3JhcHBlciA9IChmdW5jdGlvbihuYXRpdmVGdW5jKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzWzBdLmRhdGE7XHJcbiAgICAgICAgdmFyIG5hdGl2ZU9iaiA9IG5hdGl2ZUZ1bmMuY2FsbChKU09OLCBhcmcpO1xyXG4gICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHNldWRvT2JqZWN0KG5hdGl2ZU9iaik7XHJcbiAgICAgIH07XHJcbiAgICB9KShKU09OLnBhcnNlKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkobXlKU09OLCAncGFyc2UnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcclxuICBcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgZnJvbSB0aGlzLk9CSkVDVCBvYmplY3QgdG8gbmF0aXZlIEpTIG9iamVjdC5cclxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIFRoZSB0aGlzLk9CSkVDVCBvYmplY3QgdG8gYmUgY29udmVydGVkLlxyXG4gICAgICogQHJldHVybiB7Kn0gVGhlIGVxdWl2YWxlbnQgbmF0aXZlIEpTIG9iamVjdCBvciB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdG9OYXRpdmVPYmplY3Qob2JqKSB7XHJcbiAgICAgIGlmIChvYmouaXNQcmltaXRpdmUpIHtcclxuICAgICAgICByZXR1cm4gb2JqLmRhdGE7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgdmFyIG5hdGl2ZU9iajtcclxuICAgICAgaWYgKG9iai5sZW5ndGgpIHsgLy8gQXJyYXkuXHJcbiAgICAgICAgbmF0aXZlT2JqID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIG5hdGl2ZU9ialtpXSA9IHRvTmF0aXZlT2JqZWN0KG9iai5wcm9wZXJ0aWVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7IC8vIE9iamVjdC5cclxuICAgICAgICBuYXRpdmVPYmogPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLnByb3BlcnRpZXMpIHtcclxuICAgICAgICAgIG5hdGl2ZU9ialtrZXldID0gdG9OYXRpdmVPYmplY3Qob2JqLnByb3BlcnRpZXNba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHJldHVybiBuYXRpdmVPYmo7XHJcbiAgICB9XHJcbiAgXHJcbiAgICB3cmFwcGVyID0gKGZ1bmN0aW9uKG5hdGl2ZUZ1bmMpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhcmcgPSB0b05hdGl2ZU9iamVjdChhcmd1bWVudHNbMF0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZUZ1bmMuY2FsbChKU09OLCBhcmcpKTtcclxuICAgICAgfTtcclxuICAgIH0pKEpTT04uc3RyaW5naWZ5KTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkobXlKU09OLCAnc3RyaW5naWZ5JywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBFcnJvciBjbGFzcy5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuICAgKi9cclxuICBpbml0RXJyb3Ioc2NvcGUpIHtcclxuICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xyXG4gICAgdmFyIHdyYXBwZXI7XHJcbiAgICAvLyBFcnJvciBjb25zdHJ1Y3Rvci5cclxuICAgIHdyYXBwZXIgPSBmdW5jdGlvbihvcHRfbWVzc2FnZSkge1xyXG4gICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLkVSUk9SKSB7XHJcbiAgICAgICAgLy8gQ2FsbGVkIHdpdGggbmV3LlxyXG4gICAgICAgIHZhciBuZXdFcnJvciA9IHRoaXM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG5ld0Vycm9yID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuRVJST1IpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChvcHRfbWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShuZXdFcnJvciwgJ21lc3NhZ2UnLFxyXG4gICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFN0cmluZyhvcHRfbWVzc2FnZSkpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5ld0Vycm9yO1xyXG4gICAgfTtcclxuICAgIHRoaXMuRVJST1IgPSB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0Vycm9yJywgdGhpcy5FUlJPUik7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRVJST1IucHJvcGVydGllcy5wcm90b3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJywgdGhpcy5TVFJJTkdfRU1QVFksIGZhbHNlLCB0cnVlKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5FUlJPUi5wcm9wZXJ0aWVzLnByb3RvdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgJ25hbWUnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZSgnRXJyb3InKSwgZmFsc2UsIHRydWUpO1xyXG4gIFxyXG4gICAgLy8gQ3JlYXRlIGhhbGYgYSBkb3plbiBlcnJvciBzdWJjbGFzc2VzLlxyXG4gICAgdmFyIGVycm9ycyA9IHtcclxuICAgICAgRVZBTF9FUlJPUjogJ0V2YWxFcnJvcicsXHJcbiAgICAgIFJBTkdFX0VSUk9SOiAnUmFuZ2VFcnJvcicsXHJcbiAgICAgIFJFRkVSRU5DRV9FUlJPUjogJ1JlZmVyZW5jZUVycm9yJyxcclxuICAgICAgU1lOVEFYX0VSUk9SOiAnU3ludGF4RXJyb3InLFxyXG4gICAgICBUWVBFX0VSUk9SOiAnVHlwZUVycm9yJyxcclxuICAgICAgVVJJX0VSUk9SOiAnVVJJRXJyb3InXHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgY29uc3ROYW1lIGluIGVycm9ycykge1xyXG4gICAgICB2YXIgZXJyb3JOYW1lID0gZXJyb3JzW2NvbnN0TmFtZV07XHJcbiAgICAgIC8vRXZhbEVycm9yLCBSYW5nZUVycm9yLCBSZWZlcmVuY2VFcnJvciwgU3ludGF4RXJyb3IsIFR5cGVFcnJvciwgVVJJRXJyb3JcclxuICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcclxuICAgICAgICAgIGlmICh0aGlzSW50ZXJwcmV0ZXIuaXNhKHRoaXMucGFyZW50LCB0aGlzSW50ZXJwcmV0ZXIuRVJST1IpKSB7XHJcbiAgICAgICAgICAgIC8vIENhbGxlZCB3aXRoIG5ldy5cclxuICAgICAgICAgICAgdmFyIG5ld0Vycm9yID0gdGhpcztcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdFcnJvciA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyW25hbWVdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChvcHRfbWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkobmV3RXJyb3IsICdtZXNzYWdlJyxcclxuICAgICAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoU3RyaW5nKG9wdF9tZXNzYWdlKSksIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBuZXdFcnJvcjtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzW2NvbnN0TmFtZV0gPSB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIoY29uc3ROYW1lKSk7XHJcbiAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpc1tjb25zdE5hbWVdLCAncHJvdG90eXBlJywgdGhpcy5jcmVhdGVPYmplY3QodGhpcy5FUlJPUikpO1xyXG4gICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXNbY29uc3ROYW1lXS5wcm9wZXJ0aWVzLnByb3RvdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAnbmFtZScsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKGVycm9yTmFtZSksIGZhbHNlLCB0cnVlKTtcclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgZXJyb3JOYW1lLCB0aGlzW2NvbnN0TmFtZV0pO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSXMgYW4gb2JqZWN0IG9mIGEgY2VydGFpbiBjbGFzcz9cclxuICAgKiBAcGFyYW0ge09iamVjdH0gY2hpbGQgT2JqZWN0IHRvIGNoZWNrLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJlbnQgQ29uc3RydWN0b3Igb2Ygb2JqZWN0LlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgb2JqZWN0IGlzIHRoZSBjbGFzcyBvciBpbmhlcml0cyBmcm9tIGl0LlxyXG4gICAqICAgICBGYWxzZSBvdGhlcndpc2UuXHJcbiAgICovXHJcbiAgaXNhKGNoaWxkLCBwYXJlbnQpIHtcclxuICAgIGlmICghY2hpbGQgfHwgIXBhcmVudCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoY2hpbGQucGFyZW50ICE9IHBhcmVudCkge1xyXG4gICAgICBpZiAoIWNoaWxkLnBhcmVudCB8fCAhY2hpbGQucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGNoaWxkID0gY2hpbGQucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDb21wYXJlcyB0d28gb2JqZWN0cyBhZ2FpbnN0IGVhY2ggb3RoZXIuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBhIEZpcnN0IG9iamVjdC5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IGIgU2Vjb25kIG9iamVjdC5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0xIGlmIGEgaXMgc21hbGxlciwgMCBpZiBhID09IGIsIDEgaWYgYSBpcyBiaWdnZXIsXHJcbiAgICogICAgIE5hTiBpZiB0aGV5IGFyZSBub3QgY29tcGFyYWJsZS5cclxuICAgKi9cclxuICBjb21wKGEsIGIpIHtcclxuICAgIGlmIChhLmlzUHJpbWl0aXZlICYmIHR5cGVvZiBhID09ICdudW1iZXInICYmIGlzTmFOKGEuZGF0YSkgfHxcclxuICAgICAgICBiLmlzUHJpbWl0aXZlICYmIHR5cGVvZiBiID09ICdudW1iZXInICYmIGlzTmFOKGIuZGF0YSkpIHtcclxuICAgICAgcmV0dXJuIE5hTjtcclxuICAgIH1cclxuICAgIGlmIChhLmlzUHJpbWl0aXZlICYmIGIuaXNQcmltaXRpdmUpIHtcclxuICAgICAgYSA9IGEuZGF0YTtcclxuICAgICAgYiA9IGIuZGF0YTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFRPRE86IEhhbmRsZSBvdGhlciB0eXBlcy5cclxuICAgICAgcmV0dXJuIE5hTjtcclxuICAgIH1cclxuICAgIGlmIChhIDwgYikge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBJcyBhIHZhbHVlIGEgbGVnYWwgaW50ZWdlciBmb3IgYW4gYXJyYXk/XHJcbiAgICogQHBhcmFtIHsqfSBuIFZhbHVlIHRvIGNoZWNrLlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gWmVybywgb3IgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHRoZSB2YWx1ZSBjYW4gYmVcclxuICAgKiAgICAgY29udmVydGVkIHRvIHN1Y2guICBOYU4gb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIGFycmF5SW5kZXgobikge1xyXG4gICAgbiA9IE51bWJlcihuKTtcclxuICAgIGlmICghaXNGaW5pdGUobikgfHwgbiAhPSBNYXRoLmZsb29yKG4pIHx8IG4gPCAwKSB7XHJcbiAgICAgIHJldHVybiBOYU47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbjtcclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBkYXRhIG9iamVjdCBmb3IgYSBwcmltaXRpdmUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfGJvb2xlYW58bnVsbHx1bmRlZmluZWR8UmVnRXhwfSBkYXRhIERhdGEgdG9cclxuICAgKiAgICAgZW5jYXBzdWxhdGUuXHJcbiAgICogQHJldHVybiB7IU9iamVjdH0gTmV3IGRhdGEgb2JqZWN0LlxyXG4gICAqL1xyXG4gIGNyZWF0ZVByaW1pdGl2ZShkYXRhKSB7XHJcbiAgICAvLyBSZXVzZSBhIHByZWRlZmluZWQgcHJpbWl0aXZlIGNvbnN0YW50IGlmIHBvc3NpYmxlLlxyXG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5VTkRFRklORUQ7XHJcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuTlVMTDtcclxuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5UUlVFO1xyXG4gICAgfSBlbHNlIGlmIChkYXRhID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5GQUxTRTtcclxuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5OVU1CRVJfWkVSTztcclxuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5OVU1CRVJfT05FO1xyXG4gICAgfSBlbHNlIGlmIChkYXRhID09PSAnJykge1xyXG4gICAgICByZXR1cm4gdGhpcy5TVFJJTkdfRU1QVFk7XHJcbiAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVnRXhwKHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuUkVHRVhQKSwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IEludGVycHJldGVyLlByaW1pdGl2ZShkYXRhLCB0aGlzKTtcclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBkYXRhIG9iamVjdC5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50IFBhcmVudCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cclxuICAgKiBAcmV0dXJuIHshT2JqZWN0fSBOZXcgZGF0YSBvYmplY3QuXHJcbiAgICovXHJcbiAgY3JlYXRlT2JqZWN0KHBhcmVudCkge1xyXG4gICAgdmFyIG9iaiA9IG5ldyBJbnRlcnByZXRlci5PYmplY3QocGFyZW50KTtcclxuICAgIC8vIEZ1bmN0aW9ucyBoYXZlIHByb3RvdHlwZSBvYmplY3RzLlxyXG4gICAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5GVU5DVElPTikpIHtcclxuICAgICAgb2JqLnR5cGUgPSAnZnVuY3Rpb24nO1xyXG4gICAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwgJ3Byb3RvdHlwZScsIHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuT0JKRUNUIHx8IG51bGwpKTtcclxuICAgIH1cclxuICAgIC8vIEFycmF5cyBoYXZlIGxlbmd0aC5cclxuICAgIGlmICh0aGlzLmlzYShvYmosIHRoaXMuQVJSQVkpKSB7XHJcbiAgICAgIG9iai5sZW5ndGggPSAwO1xyXG4gICAgICBvYmoudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc3RycyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgc3Ryc1tpXSA9ICh0aGlzLnByb3BlcnRpZXNbaV0gPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9PSBudWxsKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICcnIDogdGhpcy5wcm9wZXJ0aWVzW2ldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHJzLmpvaW4oJywnKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmV3IHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgZXhpc3Rpbmcgb2JqZWN0IHRvIHNldC5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgbmF0aXZlIHJlZ3VsYXIgZXhwcmVzc2lvbi5cclxuICAgKiBAcmV0dXJuIHshT2JqZWN0fSBOZXcgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC5cclxuICAgKi9cclxuICBjcmVhdGVSZWdFeHAob2JqLCBkYXRhKSB7XHJcbiAgICBvYmouZGF0YSA9IGRhdGE7XHJcbiAgICAvLyBsYXN0SW5kZXggaXMgc2V0dGFibGUsIGFsbCBvdGhlcnMgYXJlIHJlYWQtb25seSBhdHRyaWJ1dGVzXHJcbiAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwgJ2xhc3RJbmRleCcsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhLmxhc3RJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgIGZhbHNlLCB0cnVlKTtcclxuICAgIHRoaXMuc2V0UHJvcGVydHkob2JqLCAnc291cmNlJywgdGhpcy5jcmVhdGVQcmltaXRpdmUob2JqLmRhdGEuc291cmNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwgJ2dsb2JhbCcsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhLmdsb2JhbCksXHJcbiAgICAgICAgICAgICAgICAgICAgIHRydWUsIHRydWUpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShvYmosICdpZ25vcmVDYXNlJywgdGhpcy5jcmVhdGVQcmltaXRpdmUob2JqLmRhdGEuaWdub3JlQ2FzZSksXHJcbiAgICAgICAgICAgICAgICAgICAgIHRydWUsIHRydWUpO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShvYmosICdtdWx0aWxpbmUnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShvYmouZGF0YS5tdWx0aWxpbmUpLFxyXG4gICAgICAgICAgICAgICAgICAgICB0cnVlLCB0cnVlKTtcclxuICAgIC8vIE92ZXJyaWRlIGEgY291cGxlIG9mIE9iamVjdCdzIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxyXG4gICAgb2JqLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7cmV0dXJuIFN0cmluZyh0aGlzLmRhdGEpO307XHJcbiAgICBvYmoudmFsdWVPZiA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLmRhdGE7fTtcclxuICAgIHJldHVybiBvYmo7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgZnVuY3Rpb24uXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG5vZGUgQVNUIG5vZGUgZGVmaW5pbmcgdGhlIGZ1bmN0aW9uLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRfc2NvcGUgT3B0aW9uYWwgcGFyZW50IHNjb3BlLlxyXG4gICAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBmdW5jdGlvbi5cclxuICAgKi9cclxuICBjcmVhdGVGdW5jdGlvbihub2RlLCBvcHRfc2NvcGUpIHtcclxuICAgIHZhciBmdW5jID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5GVU5DVElPTik7XHJcbiAgICBmdW5jLnBhcmVudFNjb3BlID0gb3B0X3Njb3BlIHx8IHRoaXMuZ2V0U2NvcGUoKTtcclxuICAgIGZ1bmMubm9kZSA9IG5vZGU7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5KGZ1bmMsICdsZW5ndGgnLFxyXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVByaW1pdGl2ZShmdW5jLm5vZGUucGFyYW1zLmxlbmd0aCksIHRydWUpO1xyXG4gICAgcmV0dXJuIGZ1bmM7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgbmF0aXZlIGZ1bmN0aW9uLlxyXG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBuYXRpdmVGdW5jIEphdmFTY3JpcHQgZnVuY3Rpb24uXHJcbiAgICogQHJldHVybiB7IU9iamVjdH0gTmV3IGZ1bmN0aW9uLlxyXG4gICAqL1xyXG4gIGNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKG5hdGl2ZUZ1bmMpIHtcclxuICAgIHZhciBmdW5jID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5GVU5DVElPTik7XHJcbiAgICBmdW5jLm5hdGl2ZUZ1bmMgPSBuYXRpdmVGdW5jO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShmdW5jLCAnbGVuZ3RoJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUobmF0aXZlRnVuYy5sZW5ndGgpLCB0cnVlKTtcclxuICAgIHJldHVybiBmdW5jO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IG5hdGl2ZSBhc3luY2hyb25vdXMgZnVuY3Rpb24uXHJcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGFzeW5jRnVuYyBKYXZhU2NyaXB0IGZ1bmN0aW9uLlxyXG4gICAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBmdW5jdGlvbi5cclxuICAgKi9cclxuICBjcmVhdGVBc3luY0Z1bmN0aW9uKGFzeW5jRnVuYykge1xyXG4gICAgdmFyIGZ1bmMgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkZVTkNUSU9OKTtcclxuICAgIGZ1bmMuYXN5bmNGdW5jID0gYXN5bmNGdW5jO1xyXG4gICAgdGhpcy5zZXRQcm9wZXJ0eShmdW5jLCAnbGVuZ3RoJyxcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcmltaXRpdmUoYXN5bmNGdW5jLmxlbmd0aCksIHRydWUpO1xyXG4gICAgcmV0dXJuIGZ1bmM7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBGZXRjaCBhIHByb3BlcnR5IHZhbHVlIGZyb20gYSBkYXRhIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IG9iaiBEYXRhIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyp9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eS5cclxuICAgKiBAcmV0dXJuIHshT2JqZWN0fSBQcm9wZXJ0eSB2YWx1ZSAobWF5IGJlIFVOREVGSU5FRCkuXHJcbiAgICovXHJcbiAgZ2V0UHJvcGVydHkob2JqLCBuYW1lKSB7XHJcbiAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xyXG4gICAgaWYgKG9iaiA9PSB0aGlzLlVOREVGSU5FRCB8fCBvYmogPT0gdGhpcy5OVUxMKSB7XHJcbiAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5UWVBFX0VSUk9SLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2Fubm90IHJlYWQgcHJvcGVydHkgJ1wiICsgbmFtZSArIFwiJyBvZiBcIiArIG9iaik7XHJcbiAgICB9XHJcbiAgICAvLyBTcGVjaWFsIGNhc2VzIGZvciBtYWdpYyBsZW5ndGggcHJvcGVydHkuXHJcbiAgICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLlNUUklORykpIHtcclxuICAgICAgaWYgKG5hbWUgPT0gJ2xlbmd0aCcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVQcmltaXRpdmUob2JqLmRhdGEubGVuZ3RoKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgbiA9IHRoaXMuYXJyYXlJbmRleChuYW1lKTtcclxuICAgICAgaWYgKCFpc05hTihuKSAmJiBuIDwgb2JqLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhW25dKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzYShvYmosIHRoaXMuQVJSQVkpICYmIG5hbWUgPT0gJ2xlbmd0aCcpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgaWYgKG9iai5pc0luaXRpYWxpemVkID09PSBmYWxzZSkge1xyXG4gICAgICAgIC8vIGxhenkgd3JhcHBpbmdcclxuICAgICAgICBsZXQgbmF0aXZlT2JqZWN0ID0gb2JqLmRhdGE7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG5hdGl2ZU9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShvYmosIGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUHNldWRvT2JqZWN0KG5hdGl2ZU9iamVjdFtrZXldKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iai5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAob2JqLnByb3BlcnRpZXMgJiYgbmFtZSBpbiBvYmoucHJvcGVydGllcykge1xyXG4gICAgICAgIHJldHVybiBvYmoucHJvcGVydGllc1tuYW1lXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAob2JqLnBhcmVudCAmJiBvYmoucGFyZW50LnByb3BlcnRpZXMgJiZcclxuICAgICAgICAgIG9iai5wYXJlbnQucHJvcGVydGllcy5wcm90b3R5cGUpIHtcclxuICAgICAgICBvYmogPSBvYmoucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIE5vIHBhcmVudCwgcmVhY2hlZCB0aGUgdG9wLlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5VTkRFRklORUQ7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBEb2VzIHRoZSBuYW1lZCBwcm9wZXJ0eSBleGlzdCBvbiBhIGRhdGEgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIERhdGEgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB7Kn0gbmFtZSBOYW1lIG9mIHByb3BlcnR5LlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgcHJvcGVydHkgZXhpc3RzLlxyXG4gICAqL1xyXG4gIGhhc1Byb3BlcnR5KG9iaiwgbmFtZSkge1xyXG4gICAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcclxuICAgIGlmIChvYmouaXNQcmltaXRpdmUpIHtcclxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdQcmltaXRpdmUgZGF0YSB0eXBlIGhhcyBubyBwcm9wZXJ0aWVzJyk7XHJcbiAgICB9XHJcbiAgICBpZiAobmFtZSA9PSAnbGVuZ3RoJyAmJlxyXG4gICAgICAgICh0aGlzLmlzYShvYmosIHRoaXMuU1RSSU5HKSB8fCB0aGlzLmlzYShvYmosIHRoaXMuQVJSQVkpKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmlzYShvYmosIHRoaXMuU1RSSU5HKSkge1xyXG4gICAgICB2YXIgbiA9IHRoaXMuYXJyYXlJbmRleChuYW1lKTtcclxuICAgICAgaWYgKCFpc05hTihuKSAmJiBuIDwgb2JqLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgIGlmIChvYmoucHJvcGVydGllcyAmJiBuYW1lIGluIG9iai5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9iai5wYXJlbnQgJiYgb2JqLnBhcmVudC5wcm9wZXJ0aWVzICYmXHJcbiAgICAgICAgICBvYmoucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlKSB7XHJcbiAgICAgICAgb2JqID0gb2JqLnBhcmVudC5wcm9wZXJ0aWVzLnByb3RvdHlwZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBObyBwYXJlbnQsIHJlYWNoZWQgdGhlIHRvcC5cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogU2V0IGEgcHJvcGVydHkgdmFsdWUgb24gYSBkYXRhIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IG9iaiBEYXRhIG9iamVjdC5cclxuICAgKiBAcGFyYW0geyp9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eS5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IHZhbHVlIE5ldyBwcm9wZXJ0eSB2YWx1ZS5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF9maXhlZCBVbmNoYW5nZWFibGUgcHJvcGVydHkgaWYgdHJ1ZS5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF9ub25lbnVtIE5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IGlmIHRydWUuXHJcbiAgICovXHJcbiAgc2V0UHJvcGVydHkob2JqLCBuYW1lLCB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRfZml4ZWQsIG9wdF9ub25lbnVtKSB7XHJcbiAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnb2JqZWN0Jykge1xyXG4gICAgICB0aHJvdyBFcnJvcignRmFpbHVyZSB0byB3cmFwIGEgdmFsdWU6ICcgKyB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAob2JqID09IHRoaXMuVU5ERUZJTkVEIHx8IG9iaiA9PSB0aGlzLk5VTEwpIHtcclxuICAgICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDYW5ub3Qgc2V0IHByb3BlcnR5ICdcIiArIG5hbWUgKyBcIicgb2YgXCIgKyBvYmopO1xyXG4gICAgfVxyXG4gICAgaWYgKG9iai5pc1ByaW1pdGl2ZSB8fCBvYmouZml4ZWRbbmFtZV0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5TVFJJTkcpKSB7XHJcbiAgICAgIHZhciBuID0gdGhpcy5hcnJheUluZGV4KG5hbWUpO1xyXG4gICAgICBpZiAobmFtZSA9PSAnbGVuZ3RoJyB8fCAoIWlzTmFOKG4pICYmIG4gPCBvYmouZGF0YS5sZW5ndGgpKSB7XHJcbiAgICAgICAgLy8gQ2FuJ3Qgc2V0IGxlbmd0aCBvciBsZXR0ZXJzIG9uIFN0cmluZ3MuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkge1xyXG4gICAgICAvLyBBcnJheXMgaGF2ZSBhIG1hZ2ljIGxlbmd0aCB2YXJpYWJsZSB0aGF0IGlzIGJvdW5kIHRvIHRoZSBlbGVtZW50cy5cclxuICAgICAgdmFyIGk7XHJcbiAgICAgIGlmIChuYW1lID09ICdsZW5ndGgnKSB7XHJcbiAgICAgICAgLy8gRGVsZXRlIGVsZW1lbnRzIGlmIGxlbmd0aCBpcyBzbWFsbGVyLlxyXG4gICAgICAgIHZhciBuZXdMZW5ndGggPSB0aGlzLmFycmF5SW5kZXgodmFsdWUudG9OdW1iZXIoKSk7XHJcbiAgICAgICAgaWYgKGlzTmFOKG5ld0xlbmd0aCkpIHtcclxuICAgICAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5SQU5HRV9FUlJPUiwgJ0ludmFsaWQgYXJyYXkgbGVuZ3RoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuZXdMZW5ndGggPCBvYmoubGVuZ3RoKSB7XHJcbiAgICAgICAgICBmb3IgKGkgaW4gb2JqLnByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgaSA9IHRoaXMuYXJyYXlJbmRleChpKTtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihpKSAmJiBuZXdMZW5ndGggPD0gaSkge1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSBvYmoucHJvcGVydGllc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBvYmoubGVuZ3RoID0gbmV3TGVuZ3RoO1xyXG4gICAgICAgIHJldHVybjsgIC8vIERvbid0IHNldCBhIHJlYWwgbGVuZ3RoIHByb3BlcnR5LlxyXG4gICAgICB9IGVsc2UgaWYgKCFpc05hTihpID0gdGhpcy5hcnJheUluZGV4KG5hbWUpKSkge1xyXG4gICAgICAgIC8vIEluY3JlYXNlIGxlbmd0aCBpZiB0aGlzIGluZGV4IGlzIGxhcmdlci5cclxuICAgICAgICBvYmoubGVuZ3RoID0gTWF0aC5tYXgob2JqLmxlbmd0aCwgaSArIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBTZXQgdGhlIHByb3BlcnR5LlxyXG4gICAgb2JqLnByb3BlcnRpZXNbbmFtZV0gPSB2YWx1ZTtcclxuICAgIGlmIChvcHRfZml4ZWQpIHtcclxuICAgICAgb2JqLmZpeGVkW25hbWVdID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRfbm9uZW51bSkge1xyXG4gICAgICBvYmoubm9uZW51bWVyYWJsZVtuYW1lXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBEZWxldGUgYSBwcm9wZXJ0eSB2YWx1ZSBvbiBhIGRhdGEgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIERhdGEgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB7Kn0gbmFtZSBOYW1lIG9mIHByb3BlcnR5LlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgZGVsZXRlZCwgZmFsc2UgaWYgdW5kZWxldGFibGUuXHJcbiAgICovXHJcbiAgZGVsZXRlUHJvcGVydHkob2JqLCBuYW1lKSB7XHJcbiAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xyXG4gICAgaWYgKG9iai5pc1ByaW1pdGl2ZSB8fCBvYmouZml4ZWRbbmFtZV0pIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKG5hbWUgPT0gJ2xlbmd0aCcgJiYgdGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVsZXRlIG9iai5wcm9wZXJ0aWVzW25hbWVdO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBzY29wZSBmcm9tIHRoZSBzdGF0ZVN0YWNrLlxyXG4gICAqIEByZXR1cm4geyFPYmplY3R9IEN1cnJlbnQgc2NvcGUgZGljdGlvbmFyeS5cclxuICAgKi9cclxuICBnZXRTY29wZSgpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2tbaV0uc2NvcGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZVN0YWNrW2ldLnNjb3BlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aHJvdyBFcnJvcignTm8gc2NvcGUgZm91bmQuJyk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgc2NvcGUgZGljdGlvbmFyeS5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IG5vZGUgQVNUIG5vZGUgZGVmaW5pbmcgdGhlIHNjb3BlIGNvbnRhaW5lclxyXG4gICAqICAgICAoZS5nLiBhIGZ1bmN0aW9uKS5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50U2NvcGUgU2NvcGUgdG8gbGluayB0by5cclxuICAgKiBAcmV0dXJuIHshT2JqZWN0fSBOZXcgc2NvcGUuXHJcbiAgICovXHJcbiAgY3JlYXRlU2NvcGUobm9kZSwgcGFyZW50U2NvcGUpIHtcclxuICAgIHZhciBzY29wZSA9IHRoaXMuY3JlYXRlT2JqZWN0KG51bGwpO1xyXG4gICAgc2NvcGUucGFyZW50U2NvcGUgPSBwYXJlbnRTY29wZTtcclxuICAgIGlmICghcGFyZW50U2NvcGUpIHtcclxuICAgICAgdGhpcy5pbml0R2xvYmFsU2NvcGUoc2NvcGUpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wb3B1bGF0ZVNjb3BlXyhub2RlLCBzY29wZSk7XHJcbiAgXHJcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhpcyBzY29wZSBzdGFydHMgd2l0aCAndXNlIHN0cmljdCcuXHJcbiAgICBzY29wZS5zdHJpY3QgPSBmYWxzZTtcclxuICAgIGlmIChwYXJlbnRTY29wZSAmJiBwYXJlbnRTY29wZS5zdHJpY3QpIHtcclxuICAgICAgc2NvcGUuc3RyaWN0ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBmaXJzdE5vZGUgPSBub2RlLmJvZHkgJiYgbm9kZS5ib2R5WzBdO1xyXG4gICAgICBpZiAoZmlyc3ROb2RlICYmIGZpcnN0Tm9kZS5leHByZXNzaW9uICYmXHJcbiAgICAgICAgICBmaXJzdE5vZGUuZXhwcmVzc2lvbi50eXBlID09ICdMaXRlcmFsJyAmJlxyXG4gICAgICAgICAgZmlyc3ROb2RlLmV4cHJlc3Npb24udmFsdWUgPT0gJ3VzZSBzdHJpY3QnKSB7XHJcbiAgICAgICAgc2NvcGUuc3RyaWN0ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjb3BlO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IHNwZWNpYWwgc2NvcGUgZGljdGlvbmFyeS4gU2ltaWxhciB0byBjcmVhdGVTY29wZSgpLCBidXRcclxuICAgKiBkb2Vzbid0IGFzc3VtZSB0aGF0IHRoZSBzY29wZSBpcyBmb3IgYSBmdW5jdGlvbiBib2R5LiBUaGlzIGlzIHVzZWQgZm9yXHJcbiAgICogdGhlIGNhdGNoIGNsYXVzZSBhbmQgd2l0aCBzdGF0ZW1lbnQuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBwYXJlbnRTY29wZSBTY29wZSB0byBsaW5rIHRvLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlIE9wdGlvbmFsIG9iamVjdCB0byB0cmFuc2Zvcm0gaW50byBzY29wZS5cclxuICAgKiBAcmV0dXJuIHshT2JqZWN0fSBOZXcgc2NvcGUuXHJcbiAgICovXHJcbiAgY3JlYXRlU3BlY2lhbFNjb3BlKHBhcmVudFNjb3BlLCBvcHRfc2NvcGUpIHtcclxuICAgIGlmICghcGFyZW50U2NvcGUpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoJ3BhcmVudFNjb3BlIHJlcXVpcmVkJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgc2NvcGUgPSBvcHRfc2NvcGUgfHwgdGhpcy5jcmVhdGVPYmplY3QobnVsbCk7XHJcbiAgICBzY29wZS5wYXJlbnRTY29wZSA9IHBhcmVudFNjb3BlO1xyXG4gICAgc2NvcGUuc3RyaWN0ID0gcGFyZW50U2NvcGUuc3RyaWN0O1xyXG4gICAgcmV0dXJuIHNjb3BlO1xyXG4gIH07XHJcbiAgXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIGEgdmFsdWUgZnJvbSB0aGUgc2NvcGUgY2hhaW4uXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBuYW1lIE5hbWUgb2YgdmFyaWFibGUuXHJcbiAgICogQHJldHVybiB7IU9iamVjdH0gVGhlIHZhbHVlLlxyXG4gICAqL1xyXG4gIGdldFZhbHVlRnJvbVNjb3BlKG5hbWUpIHtcclxuICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcclxuICAgIHZhciBuYW1lU3RyID0gbmFtZS50b1N0cmluZygpO1xyXG4gICAgd2hpbGUgKHNjb3BlKSB7XHJcbiAgICAgIGlmIChuYW1lU3RyIGluIHNjb3BlLnByb3BlcnRpZXMpIHtcclxuICAgICAgICByZXR1cm4gc2NvcGUucHJvcGVydGllc1tuYW1lU3RyXTtcclxuICAgICAgfVxyXG4gICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IGxvb2t1cCBmb3IgZ2xvYmFsIHZhcmlhYmxlc1xyXG4gICAgICovXHJcbiAgICAvLyBUT0RPOiBzdXBwb3J0IG90aGVyIGpzIGVudmlyb25tZW50cyBsaWtlIHNlcnZpY2Ugd29ya2VyIGFuZCBub2RlIGJ5IGNoZWNraW5nIHdoYXQgdGhlIGdsb2JhbCBzY29wZSBpc1xyXG4gICAgaWYobmFtZVN0ciBpbiB3aW5kb3cpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHNldWRvT2JqZWN0KHdpbmRvd1tuYW1lU3RyXSk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhuYW1lU3RyLCB0aGlzKTtcclxuICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5SRUZFUkVOQ0VfRVJST1IsIG5hbWVTdHIgKyAnIGlzIG5vdCBkZWZpbmVkJyk7XHJcbiAgICByZXR1cm4gdGhpcy5VTkRFRklORUQ7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBTZXRzIGEgdmFsdWUgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSBuYW1lIE5hbWUgb2YgdmFyaWFibGUuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSB2YWx1ZSBWYWx1ZS5cclxuICAgKi9cclxuICBzZXRWYWx1ZVRvU2NvcGUobmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcclxuICAgIHZhciBzdHJpY3QgPSBzY29wZS5zdHJpY3Q7XHJcbiAgICB2YXIgbmFtZVN0ciA9IG5hbWUudG9TdHJpbmcoKTtcclxuICAgIHdoaWxlIChzY29wZSkge1xyXG4gICAgICBpZiAoKG5hbWVTdHIgaW4gc2NvcGUucHJvcGVydGllcykgfHwgKCFzdHJpY3QgJiYgIXNjb3BlLnBhcmVudFNjb3BlKSkge1xyXG4gICAgICAgIGlmICghc2NvcGUuZml4ZWRbbmFtZVN0cl0pIHtcclxuICAgICAgICAgIHNjb3BlLnByb3BlcnRpZXNbbmFtZVN0cl0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50U2NvcGU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuUkVGRVJFTkNFX0VSUk9SLCBuYW1lU3RyICsgJyBpcyBub3QgZGVmaW5lZCcpO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IHNjb3BlIGZvciB0aGUgZ2l2ZW4gbm9kZS5cclxuICAgKiBAcGFyYW0geyFPYmplY3R9IG5vZGUgQVNUIG5vZGUgKHByb2dyYW0gb3IgZnVuY3Rpb24pLlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgU2NvcGUgZGljdGlvbmFyeSB0byBwb3B1bGF0ZS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHBvcHVsYXRlU2NvcGVfKG5vZGUsIHNjb3BlKSB7XHJcbiAgICBpZiAobm9kZS50eXBlID09ICdWYXJpYWJsZURlY2xhcmF0aW9uJykge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuZGVjbGFyYXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgbm9kZS5kZWNsYXJhdGlvbnNbaV0uaWQubmFtZSwgdGhpcy5VTkRFRklORUQpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicpIHtcclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgbm9kZS5pZC5uYW1lLCB0aGlzLmNyZWF0ZUZ1bmN0aW9uKG5vZGUsIHNjb3BlKSk7XHJcbiAgICAgIHJldHVybjsgIC8vIERvIG5vdCByZWN1cnNlIGludG8gZnVuY3Rpb24uXHJcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PSAnRnVuY3Rpb25FeHByZXNzaW9uJykge1xyXG4gICAgICByZXR1cm47ICAvLyBEbyBub3QgcmVjdXJzZSBpbnRvIGZ1bmN0aW9uLlxyXG4gICAgfVxyXG4gICAgdmFyIHRoaXNJdGVycHJldGVyID0gdGhpcztcclxuICAgIGZ1bmN0aW9uIHJlY3Vyc2UoY2hpbGQpIHtcclxuICAgICAgaWYgKGNoaWxkLmNvbnN0cnVjdG9yID09IHRoaXNJdGVycHJldGVyLmFzdC5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIHRoaXNJdGVycHJldGVyLnBvcHVsYXRlU2NvcGVfKGNoaWxkLCBzY29wZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZSkge1xyXG4gICAgICB2YXIgcHJvcCA9IG5vZGVbbmFtZV07XHJcbiAgICAgIGlmIChwcm9wICYmIHR5cGVvZiBwcm9wID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wLmxlbmd0aCA9PSAnbnVtYmVyJyAmJiBwcm9wLnNwbGljZSkge1xyXG4gICAgICAgICAgLy8gUHJvcCBpcyBhbiBhcnJheS5cclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZWN1cnNlKHByb3BbaV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWN1cnNlKHByb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIHZhbHVlIGZyb20gdGhlIHNjb3BlIGNoYWluIG9yIGZyb20gYW4gb2JqZWN0IHByb3BlcnR5LlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdHwhQXJyYXl9IGxlZnQgTmFtZSBvZiB2YXJpYWJsZSBvciBvYmplY3QvcHJvcG5hbWUgdHVwbGUuXHJcbiAgICogQHJldHVybiB7IU9iamVjdH0gVmFsdWUuXHJcbiAgICovXHJcbiAgZ2V0VmFsdWUobGVmdCkge1xyXG4gICAgaWYgKGxlZnQubGVuZ3RoKSB7XHJcbiAgICAgIHZhciBvYmogPSBsZWZ0WzBdO1xyXG4gICAgICB2YXIgcHJvcCA9IGxlZnRbMV07XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFByb3BlcnR5KG9iaiwgcHJvcCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUZyb21TY29wZShsZWZ0KTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFNldHMgYSB2YWx1ZSB0byB0aGUgc2NvcGUgY2hhaW4gb3IgdG8gYW4gb2JqZWN0IHByb3BlcnR5LlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdHwhQXJyYXl9IGxlZnQgTmFtZSBvZiB2YXJpYWJsZSBvciBvYmplY3QvcHJvcG5hbWUgdHVwbGUuXHJcbiAgICogQHBhcmFtIHshT2JqZWN0fSB2YWx1ZSBWYWx1ZS5cclxuICAgKi9cclxuICBzZXRWYWx1ZShsZWZ0LCB2YWx1ZSkge1xyXG4gICAgaWYgKGxlZnQubGVuZ3RoKSB7XHJcbiAgICAgIHZhciBvYmogPSBsZWZ0WzBdO1xyXG4gICAgICB2YXIgcHJvcCA9IGxlZnRbMV07XHJcbiAgICAgIHRoaXMuc2V0UHJvcGVydHkob2JqLCBwcm9wLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFZhbHVlVG9TY29wZShsZWZ0LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBUaHJvdyBhbiBleGNlcHRpb24gaW4gdGhlIGludGVycHJldGVyIHRoYXQgY2FuIGJlIGhhbmRsZWQgYnkgYVxyXG4gICAqIGludGVycHJldGVyIHRyeS9jYXRjaCBzdGF0ZW1lbnQuICBJZiB1bmhhbmRsZWQsIGEgcmVhbCBleGNlcHRpb24gd2lsbFxyXG4gICAqIGJlIHRocm93bi4gIENhbiBiZSBjYWxsZWQgd2l0aCBlaXRoZXIgYW4gZXJyb3IgY2xhc3MgYW5kIGEgbWVzc2FnZSwgb3JcclxuICAgKiB3aXRoIGFuIGFjdHVhbCBvYmplY3QgdG8gYmUgdGhyb3duLlxyXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gZXJyb3JDbGFzcyBUeXBlIG9mIGVycm9yIChpZiBtZXNzYWdlIGlzIHByb3ZpZGVkKSBvciB0aGVcclxuICAgKiAgIHZhbHVlIHRvIHRocm93IChpZiBubyBtZXNzYWdlKS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0X21lc3NhZ2UgTWVzc2FnZSBiZWluZyB0aHJvd24uXHJcbiAgICovXHJcbiAgdGhyb3dFeGNlcHRpb24oZXJyb3JDbGFzcywgb3B0X21lc3NhZ2UpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlU3RhY2tbMF0uaW50ZXJwcmV0ZXIpIHtcclxuICAgICAgLy8gVGhpcyBpcyB0aGUgd3JvbmcgaW50ZXJwcmV0ZXIsIHdlIGFyZSBzcGlubmluZyBvbiBhbiBldmFsLlxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS5pbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbihlcnJvckNsYXNzLCBvcHRfbWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gVGhlIGV2YWwgdGhyZXcgYW4gZXJyb3IgYW5kIGRpZCBub3QgY2F0Y2ggaXQuXHJcbiAgICAgICAgLy8gQ29udGludWUgdG8gc2VlIGlmIHRoaXMgbGV2ZWwgY2FuIGNhdGNoIGl0LlxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAob3B0X21lc3NhZ2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB2YXIgZXJyb3IgPSBlcnJvckNsYXNzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVPYmplY3QoZXJyb3JDbGFzcyk7XHJcbiAgICAgIHRoaXMuc2V0UHJvcGVydHkoZXJyb3IsICdtZXNzYWdlJyxcclxuICAgICAgICAgIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9wdF9tZXNzYWdlKSwgZmFsc2UsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgLy8gU2VhcmNoIGZvciBhIHRyeSBzdGF0ZW1lbnQuXHJcbiAgICBkbyB7XHJcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgfSB3aGlsZSAoc3RhdGUgJiYgc3RhdGUubm9kZS50eXBlICE9PSAnVHJ5U3RhdGVtZW50Jyk7XHJcbiAgICBpZiAoc3RhdGUpIHtcclxuICAgICAgLy8gRXJyb3IgaXMgYmVpbmcgdHJhcHBlZC5cclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe1xyXG4gICAgICAgIG5vZGU6IHN0YXRlLm5vZGUuaGFuZGxlcixcclxuICAgICAgICB0aHJvd1ZhbHVlOiBlcnJvclxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFRocm93IGEgcmVhbCBlcnJvci5cclxuICAgICAgdmFyIHJlYWxFcnJvcjtcclxuICAgICAgaWYgKHRoaXMuaXNhKGVycm9yLCB0aGlzLkVSUk9SKSkge1xyXG4gICAgICAgIHZhciBlcnJvclRhYmxlID0ge1xyXG4gICAgICAgICAgJ0V2YWxFcnJvcic6IEV2YWxFcnJvcixcclxuICAgICAgICAgICdSYW5nZUVycm9yJzogUmFuZ2VFcnJvcixcclxuICAgICAgICAgICdSZWZlcmVuY2VFcnJvcic6IFJlZmVyZW5jZUVycm9yLFxyXG4gICAgICAgICAgJ1N5bnRheEVycm9yJzogU3ludGF4RXJyb3IsXHJcbiAgICAgICAgICAnVHlwZUVycm9yJzogVHlwZUVycm9yLFxyXG4gICAgICAgICAgJ1VSSUVycm9yJzogVVJJRXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciB0eXBlID0gZXJyb3JUYWJsZVt0aGlzLmdldFByb3BlcnR5KGVycm9yLCAnbmFtZScpXSB8fCBFcnJvcjtcclxuICAgICAgICByZWFsRXJyb3IgPSB0eXBlKHRoaXMuZ2V0UHJvcGVydHkoZXJyb3IsICdtZXNzYWdlJykpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlYWxFcnJvciA9IGVycm9yLnRvU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgcmVhbEVycm9yO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgLy8gRnVuY3Rpb25zIHRvIGhhbmRsZSBlYWNoIG5vZGUgdHlwZS5cclxuICBcclxuICBzdGVwQXJyYXlFeHByZXNzaW9uKCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xyXG4gICAgdmFyIG4gPSBzdGF0ZS5uIHx8IDA7XHJcbiAgICBpZiAoIXN0YXRlLmFycmF5KSB7XHJcbiAgICAgIHN0YXRlLmFycmF5ID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5BUlJBWSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFByb3BlcnR5KHN0YXRlLmFycmF5LCBuIC0gMSwgc3RhdGUudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUuZWxlbWVudHNbbl0pIHtcclxuICAgICAgc3RhdGUubiA9IG4gKyAxO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5lbGVtZW50c1tuXX0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhdGUuYXJyYXkubGVuZ3RoID0gc3RhdGUubiB8fCAwO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUuYXJyYXk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwQXNzaWdubWVudEV4cHJlc3Npb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAoIXN0YXRlLmRvbmVMZWZ0KSB7XHJcbiAgICAgIHN0YXRlLmRvbmVMZWZ0ID0gdHJ1ZTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUubGVmdCwgY29tcG9uZW50czogdHJ1ZX0pO1xyXG4gICAgfSBlbHNlIGlmICghc3RhdGUuZG9uZVJpZ2h0KSB7XHJcbiAgICAgIHN0YXRlLmRvbmVSaWdodCA9IHRydWU7XHJcbiAgICAgIHN0YXRlLmxlZnRTaWRlID0gc3RhdGUudmFsdWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLnJpZ2h0fSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdmFyIGxlZnRTaWRlID0gc3RhdGUubGVmdFNpZGU7XHJcbiAgICAgIHZhciByaWdodFNpZGUgPSBzdGF0ZS52YWx1ZTtcclxuICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICBpZiAobm9kZS5vcGVyYXRvciA9PSAnPScpIHtcclxuICAgICAgICB2YWx1ZSA9IHJpZ2h0U2lkZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbGVmdFZhbHVlID0gdGhpcy5nZXRWYWx1ZShsZWZ0U2lkZSk7XHJcbiAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSByaWdodFNpZGU7XHJcbiAgICAgICAgdmFyIGxlZnROdW1iZXIgPSBsZWZ0VmFsdWUudG9OdW1iZXIoKTtcclxuICAgICAgICB2YXIgcmlnaHROdW1iZXIgPSByaWdodFZhbHVlLnRvTnVtYmVyKCk7XHJcbiAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJys9Jykge1xyXG4gICAgICAgICAgdmFyIGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgICAgaWYgKGxlZnRWYWx1ZS50eXBlID09ICdzdHJpbmcnIHx8IHJpZ2h0VmFsdWUudHlwZSA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBsZWZ0ID0gbGVmdFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJpZ2h0ID0gcmlnaHRWYWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGVmdCA9IGxlZnROdW1iZXI7XHJcbiAgICAgICAgICAgIHJpZ2h0ID0gcmlnaHROdW1iZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnQgKyByaWdodDtcclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJy09Jykge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyIC0gcmlnaHROdW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICcqPScpIHtcclxuICAgICAgICAgIHZhbHVlID0gbGVmdE51bWJlciAqIHJpZ2h0TnVtYmVyO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnLz0nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgLyByaWdodE51bWJlcjtcclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyU9Jykge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyICUgcmlnaHROdW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc8PD0nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgPDwgcmlnaHROdW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+Pj0nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgPj4gcmlnaHROdW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+Pj49Jykge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyID4+PiByaWdodE51bWJlcjtcclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyY9Jykge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyICYgcmlnaHROdW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICdePScpIHtcclxuICAgICAgICAgIHZhbHVlID0gbGVmdE51bWJlciBeIHJpZ2h0TnVtYmVyO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnfD0nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgfCByaWdodE51bWJlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ1Vua25vd24gYXNzaWdubWVudCBleHByZXNzaW9uOiAnICsgbm9kZS5vcGVyYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbHVlID0gdGhpcy5jcmVhdGVQcmltaXRpdmUodmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2V0VmFsdWUobGVmdFNpZGUsIHZhbHVlKTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwQmluYXJ5RXhwcmVzc2lvbigpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIGlmICghc3RhdGUuZG9uZUxlZnQpIHtcclxuICAgICAgc3RhdGUuZG9uZUxlZnQgPSB0cnVlO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5sZWZ0fSk7XHJcbiAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lUmlnaHQpIHtcclxuICAgICAgc3RhdGUuZG9uZVJpZ2h0ID0gdHJ1ZTtcclxuICAgICAgc3RhdGUubGVmdFZhbHVlID0gc3RhdGUudmFsdWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLnJpZ2h0fSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdmFyIGxlZnRTaWRlID0gc3RhdGUubGVmdFZhbHVlO1xyXG4gICAgICB2YXIgcmlnaHRTaWRlID0gc3RhdGUudmFsdWU7XHJcbiAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgdmFyIGNvbXAgPSB0aGlzLmNvbXAobGVmdFNpZGUsIHJpZ2h0U2lkZSk7XHJcbiAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICc9PScgfHwgbm9kZS5vcGVyYXRvciA9PSAnIT0nKSB7XHJcbiAgICAgICAgaWYgKGxlZnRTaWRlLmlzUHJpbWl0aXZlICYmIHJpZ2h0U2lkZS5pc1ByaW1pdGl2ZSkge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0U2lkZS5kYXRhID09IHJpZ2h0U2lkZS5kYXRhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGNvbXAgPT09IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICchPScpIHtcclxuICAgICAgICAgIHZhbHVlID0gIXZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc9PT0nIHx8IG5vZGUub3BlcmF0b3IgPT0gJyE9PScpIHtcclxuICAgICAgICBpZiAobGVmdFNpZGUuaXNQcmltaXRpdmUgJiYgcmlnaHRTaWRlLmlzUHJpbWl0aXZlKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnRTaWRlLmRhdGEgPT09IHJpZ2h0U2lkZS5kYXRhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnRTaWRlID09PSByaWdodFNpZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICchPT0nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9ICF2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnPicpIHtcclxuICAgICAgICB2YWx1ZSA9IGNvbXAgPT0gMTtcclxuICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+PScpIHtcclxuICAgICAgICB2YWx1ZSA9IGNvbXAgPT0gMSB8fCBjb21wID09PSAwO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJzwnKSB7XHJcbiAgICAgICAgdmFsdWUgPSBjb21wID09IC0xO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJzw9Jykge1xyXG4gICAgICAgIHZhbHVlID0gY29tcCA9PSAtMSB8fCBjb21wID09PSAwO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJysnKSB7XHJcbiAgICAgICAgaWYgKGxlZnRTaWRlLnR5cGUgPT0gJ3N0cmluZycgfHwgcmlnaHRTaWRlLnR5cGUgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHZhciBsZWZ0VmFsdWUgPSBsZWZ0U2lkZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSByaWdodFNpZGUudG9TdHJpbmcoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFyIGxlZnRWYWx1ZSA9IGxlZnRTaWRlLnRvTnVtYmVyKCk7XHJcbiAgICAgICAgICB2YXIgcmlnaHRWYWx1ZSA9IHJpZ2h0U2lkZS50b051bWJlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSArIHJpZ2h0VmFsdWU7XHJcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnaW4nKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0aGlzLmhhc1Byb3BlcnR5KHJpZ2h0U2lkZSwgbGVmdFNpZGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ2luc3RhbmNlb2YnKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzYShyaWdodFNpZGUsIHRoaXMuRlVOQ1RJT04pKSB7XHJcbiAgICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUixcclxuICAgICAgICAgICAgICAnRXhwZWN0aW5nIGEgZnVuY3Rpb24gaW4gaW5zdGFuY2VvZiBjaGVjaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWx1ZSA9IHRoaXMuaXNhKGxlZnRTaWRlLCByaWdodFNpZGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBsZWZ0VmFsdWUgPSBsZWZ0U2lkZS50b051bWJlcigpO1xyXG4gICAgICAgIHZhciByaWdodFZhbHVlID0gcmlnaHRTaWRlLnRvTnVtYmVyKCk7XHJcbiAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJy0nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAtIHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICcqJykge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgKiByaWdodFZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnLycpIHtcclxuICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlIC8gcmlnaHRWYWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyUnKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAlIHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICcmJykge1xyXG4gICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgJiByaWdodFZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnfCcpIHtcclxuICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlIHwgcmlnaHRWYWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ14nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSBeIHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc8PCcpIHtcclxuICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlIDw8IHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+PicpIHtcclxuICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlID4+IHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+Pj4nKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA+Pj4gcmlnaHRWYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ1Vua25vd24gYmluYXJ5IG9wZXJhdG9yOiAnICsgbm9kZS5vcGVyYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHZhbHVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBCbG9ja1N0YXRlbWVudCgpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIHZhciBuID0gc3RhdGUubl8gfHwgMDtcclxuICAgIGlmIChub2RlLmJvZHlbbl0pIHtcclxuICAgICAgc3RhdGUuZG9uZSA9IGZhbHNlO1xyXG4gICAgICBzdGF0ZS5uXyA9IG4gKyAxO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5ib2R5W25dfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcclxuICAgICAgaWYgKHN0YXRlLm5vZGUudHlwZSAhPSAnUHJvZ3JhbScpIHtcclxuICAgICAgICAvLyBMZWF2ZSB0aGUgcm9vdCBzY29wZSBvbiB0aGUgdHJlZSBpbiBjYXNlIHRoZSBwcm9ncmFtIGlzIGFwcGVuZGVkIHRvLlxyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwQnJlYWtTdGF0ZW1lbnQoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIHZhciBsYWJlbCA9IG51bGw7XHJcbiAgICBpZiAobm9kZS5sYWJlbCkge1xyXG4gICAgICBsYWJlbCA9IG5vZGUubGFiZWwubmFtZTtcclxuICAgIH1cclxuICAgIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICB3aGlsZSAoc3RhdGUgJiZcclxuICAgICAgICAgICBzdGF0ZS5ub2RlLnR5cGUgIT0gJ0NhbGxFeHByZXNzaW9uJyAmJlxyXG4gICAgICAgICAgIHN0YXRlLm5vZGUudHlwZSAhPSAnTmV3RXhwcmVzc2lvbicpIHtcclxuICAgICAgaWYgKGxhYmVsID8gbGFiZWwgPT0gc3RhdGUubGFiZWwgOiAoc3RhdGUuaXNMb29wIHx8IHN0YXRlLmlzU3dpdGNoKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgfVxyXG4gICAgLy8gU3ludGF4IGVycm9yLCBkbyBub3QgYWxsb3cgdGhpcyBlcnJvciB0byBiZSB0cmFwcGVkLlxyXG4gICAgdGhyb3cgU3ludGF4RXJyb3IoJ0lsbGVnYWwgYnJlYWsgc3RhdGVtZW50Jyk7XHJcbiAgfTtcclxuICBcclxuICBzdGVwQ2FsbEV4cHJlc3Npb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAoIXN0YXRlLmRvbmVDYWxsZWVfKSB7XHJcbiAgICAgIHN0YXRlLmRvbmVDYWxsZWVfID0gdHJ1ZTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUuY2FsbGVlLCBjb21wb25lbnRzOiB0cnVlfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXN0YXRlLmZ1bmNfKSB7XHJcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHZhbHVlIG9mIHRoZSBmdW5jdGlvbi5cclxuICAgICAgICBpZiAoc3RhdGUudmFsdWUudHlwZSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBzdGF0ZS5mdW5jXyA9IHN0YXRlLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoc3RhdGUudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLm1lbWJlcl8gPSBzdGF0ZS52YWx1ZVswXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlLmZ1bmNfID0gdGhpcy5nZXRWYWx1ZShzdGF0ZS52YWx1ZSk7XHJcbiAgICAgICAgICBpZiAoIXN0YXRlLmZ1bmNfIHx8IHN0YXRlLmZ1bmNfLnR5cGUgIT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUixcclxuICAgICAgICAgICAgICAgIChzdGF0ZS52YWx1ZSAmJiBzdGF0ZS52YWx1ZS50eXBlKSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEZXRlcm1pbmUgdmFsdWUgb2YgJ3RoaXMnIGluIGZ1bmN0aW9uLlxyXG4gICAgICAgIGlmIChzdGF0ZS5ub2RlLnR5cGUgPT0gJ05ld0V4cHJlc3Npb24nKSB7XHJcbiAgICAgICAgICBzdGF0ZS5mdW5jVGhpc18gPSB0aGlzLmNyZWF0ZU9iamVjdChzdGF0ZS5mdW5jXyk7XHJcbiAgICAgICAgICBzdGF0ZS5pc0NvbnN0cnVjdG9yXyA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIHN0YXRlLmZ1bmNUaGlzXyA9IHN0YXRlLnZhbHVlWzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdGF0ZS5mdW5jVGhpc18gPVxyXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGVTdGFja1t0aGlzLnN0YXRlU3RhY2subGVuZ3RoIC0gMV0udGhpc0V4cHJlc3Npb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmFyZ3VtZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBuID0gMDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbiA9IHN0YXRlLm5fO1xyXG4gICAgICAgIGlmIChzdGF0ZS5hcmd1bWVudHMubGVuZ3RoICE9IG5vZGUuYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgc3RhdGUuYXJndW1lbnRzW24gLSAxXSA9IHN0YXRlLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobm9kZS5hcmd1bWVudHNbbl0pIHtcclxuICAgICAgICBzdGF0ZS5uXyA9IG4gKyAxO1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLmFyZ3VtZW50c1tuXX0pO1xyXG4gICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lRXhlYykge1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZUZ1bmN0aW9uKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKHN0YXRlLmlzQ29uc3RydWN0b3JfICYmIHN0YXRlLnZhbHVlLnR5cGUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSBzdGF0ZS5mdW5jVGhpc187XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHN0YXRlLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgZXhlY3V0ZUZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xyXG4gICAgc3RhdGUuZG9uZUV4ZWMgPSB0cnVlO1xyXG4gICAgaWYgKHN0YXRlLmZ1bmNfLm5vZGUgJiZcclxuICAgICAgICAoc3RhdGUuZnVuY18ubm9kZS50eXBlID09ICdGdW5jdGlvbkFwcGx5XycgfHxcclxuICAgICAgICAgc3RhdGUuZnVuY18ubm9kZS50eXBlID09ICdGdW5jdGlvbkNhbGxfJykpIHtcclxuICAgICAgc3RhdGUuZnVuY1RoaXNfID0gc3RhdGUuYXJndW1lbnRzLnNoaWZ0KCk7XHJcbiAgICAgIGlmIChzdGF0ZS5mdW5jXy5ub2RlLnR5cGUgPT0gJ0Z1bmN0aW9uQXBwbHlfJykge1xyXG4gICAgICAgIC8vIFVucGFjayBhbGwgdGhlIGFyZ3VtZW50cyBmcm9tIHRoZSBwcm92aWRlZCBhcnJheS5cclxuICAgICAgICB2YXIgYXJnc0xpc3QgPSBzdGF0ZS5hcmd1bWVudHMuc2hpZnQoKTtcclxuICAgICAgICBpZiAoYXJnc0xpc3QgJiYgdGhpcy5pc2EoYXJnc0xpc3QsIHRoaXMuQVJSQVkpKSB7XHJcbiAgICAgICAgICBzdGF0ZS5hcmd1bWVudHMgPSBbXTtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnc0xpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3RhdGUuYXJndW1lbnRzW2ldID0gdGhpcy5nZXRQcm9wZXJ0eShhcmdzTGlzdCwgaSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0YXRlLmFyZ3VtZW50cyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzdGF0ZS5mdW5jXyA9IHN0YXRlLm1lbWJlcl87XHJcbiAgICB9XHJcbiAgICBpZiAoc3RhdGUuZnVuY18ubm9kZSkge1xyXG4gICAgICB2YXIgc2NvcGUgPVxyXG4gICAgICAgICAgdGhpcy5jcmVhdGVTY29wZShzdGF0ZS5mdW5jXy5ub2RlLmJvZHksIHN0YXRlLmZ1bmNfLnBhcmVudFNjb3BlKTtcclxuICAgICAgLy8gQWRkIGFsbCBhcmd1bWVudHMuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuZnVuY18ubm9kZS5wYXJhbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgcGFyYW1OYW1lID0gdGhpcy5jcmVhdGVQcmltaXRpdmUoc3RhdGUuZnVuY18ubm9kZS5wYXJhbXNbaV0ubmFtZSk7XHJcbiAgICAgICAgdmFyIHBhcmFtVmFsdWUgPSBzdGF0ZS5hcmd1bWVudHMubGVuZ3RoID4gaSA/IHN0YXRlLmFyZ3VtZW50c1tpXSA6XHJcbiAgICAgICAgICAgIHRoaXMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsIHBhcmFtTmFtZSwgcGFyYW1WYWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gQnVpbGQgYXJndW1lbnRzIHZhcmlhYmxlLlxyXG4gICAgICB2YXIgYXJnc0xpc3QgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkFSUkFZKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5hcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0aGlzLnNldFByb3BlcnR5KGFyZ3NMaXN0LCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFyZ3VtZW50c1tpXSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ2FyZ3VtZW50cycsIGFyZ3NMaXN0KTtcclxuICAgICAgdmFyIGZ1bmNTdGF0ZSA9IHtcclxuICAgICAgICBub2RlOiBzdGF0ZS5mdW5jXy5ub2RlLmJvZHksXHJcbiAgICAgICAgc2NvcGU6IHNjb3BlLFxyXG4gICAgICAgIHRoaXNFeHByZXNzaW9uOiBzdGF0ZS5mdW5jVGhpc19cclxuICAgICAgfTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoZnVuY1N0YXRlKTtcclxuICAgICAgc3RhdGUudmFsdWUgPSB0aGlzLlVOREVGSU5FRDsgIC8vIERlZmF1bHQgdmFsdWUgaWYgbm8gZXhwbGljaXQgcmV0dXJuLlxyXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5mdW5jXy5uYXRpdmVGdW5jKSB7XHJcbiAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZnVuY18ubmF0aXZlRnVuYy5hcHBseShzdGF0ZS5mdW5jVGhpc18sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5hcmd1bWVudHMpO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5mdW5jXy5hc3luY0Z1bmMpIHtcclxuICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XHJcbiAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXNJbnRlcnByZXRlci5wYXVzZWRfID0gZmFsc2U7XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBhcmdzV2l0aENhbGxiYWNrID0gc3RhdGUuYXJndW1lbnRzLmNvbmNhdChjYWxsYmFjayk7XHJcbiAgICAgIHN0YXRlLmZ1bmNfLmFzeW5jRnVuYy5hcHBseShzdGF0ZS5mdW5jVGhpc18sIGFyZ3NXaXRoQ2FsbGJhY2spO1xyXG4gICAgICB0aGlzLnBhdXNlZF8gPSB0cnVlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmZ1bmNfLmV2YWwpIHtcclxuICAgICAgdmFyIGNvZGUgPSBzdGF0ZS5hcmd1bWVudHNbMF07XHJcbiAgICAgIGlmICghY29kZSkge1xyXG4gICAgICAgIHN0YXRlLnZhbHVlID0gdGhpcy5VTkRFRklORUQ7XHJcbiAgICAgIH0gZWxzZSBpZiAoIWNvZGUuaXNQcmltaXRpdmUpIHtcclxuICAgICAgICAvLyBKUyBkb2VzIG5vdCBwYXJzZSBTdHJpbmcgb2JqZWN0czpcclxuICAgICAgICAvLyBldmFsKG5ldyBTdHJpbmcoJzEgKyAxJykpIC0+ICcxICsgMSdcclxuICAgICAgICBzdGF0ZS52YWx1ZSA9IGNvZGU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIGV2YWxJbnRlcnByZXRlciA9IG5ldyBJbnRlcnByZXRlcihjb2RlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIGV2YWxJbnRlcnByZXRlci5zdGF0ZVN0YWNrWzBdLnNjb3BlLnBhcmVudFNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xyXG4gICAgICAgIHN0YXRlID0ge1xyXG4gICAgICAgICAgbm9kZToge3R5cGU6ICdFdmFsXyd9LFxyXG4gICAgICAgICAgaW50ZXJwcmV0ZXI6IGV2YWxJbnRlcnByZXRlclxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ2Z1bmN0aW9uIG5vdCBhIGZ1bmN0aW9uIChodWg/KScpO1xyXG4gICAgfVxyXG4gIFxyXG4gIH1cclxuICBcclxuICBzdGVwQ2F0Y2hDbGF1c2UoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAoIXN0YXRlLmRvbmVCb2R5KSB7XHJcbiAgICAgIHN0YXRlLmRvbmVCb2R5ID0gdHJ1ZTtcclxuICAgICAgdmFyIHNjb3BlO1xyXG4gICAgICBpZiAobm9kZS5wYXJhbSkge1xyXG4gICAgICAgIHNjb3BlID0gdGhpcy5jcmVhdGVTcGVjaWFsU2NvcGUodGhpcy5nZXRTY29wZSgpKTtcclxuICAgICAgICAvLyBBZGQgdGhlIGFyZ3VtZW50LlxyXG4gICAgICAgIHZhciBwYXJhbU5hbWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZShub2RlLnBhcmFtLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsIHBhcmFtTmFtZSwgc3RhdGUudGhyb3dWYWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUuYm9keSwgc2NvcGU6IHNjb3BlfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBDb25kaXRpb25hbEV4cHJlc3Npb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICBpZiAoIXN0YXRlLmRvbmUpIHtcclxuICAgICAgaWYgKCFzdGF0ZS50ZXN0KSB7XHJcbiAgICAgICAgc3RhdGUudGVzdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IHN0YXRlLm5vZGUudGVzdH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xyXG4gICAgICAgIGlmIChzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKSAmJiBzdGF0ZS5ub2RlLmNvbnNlcXVlbnQpIHtcclxuICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBzdGF0ZS5ub2RlLmNvbnNlcXVlbnR9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKSAmJiBzdGF0ZS5ub2RlLmFsdGVybmF0ZSkge1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IHN0YXRlLm5vZGUuYWx0ZXJuYXRlfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgaWYgKHN0YXRlLm5vZGUudHlwZSA9PSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJykge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHN0YXRlLnZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwQ29udGludWVTdGF0ZW1lbnQoKSB7XHJcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhdGVTdGFja1swXS5ub2RlO1xyXG4gICAgdmFyIGxhYmVsID0gbnVsbDtcclxuICAgIGlmIChub2RlLmxhYmVsKSB7XHJcbiAgICAgIGxhYmVsID0gbm9kZS5sYWJlbC5uYW1lO1xyXG4gICAgfVxyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgd2hpbGUgKHN0YXRlICYmXHJcbiAgICAgICAgICAgc3RhdGUubm9kZS50eXBlICE9ICdDYWxsRXhwcmVzc2lvbicgJiZcclxuICAgICAgICAgICBzdGF0ZS5ub2RlLnR5cGUgIT0gJ05ld0V4cHJlc3Npb24nKSB7XHJcbiAgICAgIGlmIChzdGF0ZS5pc0xvb3ApIHtcclxuICAgICAgICBpZiAoIWxhYmVsIHx8IChsYWJlbCA9PSBzdGF0ZS5sYWJlbCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgfVxyXG4gICAgLy8gU3ludGF4IGVycm9yLCBkbyBub3QgYWxsb3cgdGhpcyBlcnJvciB0byBiZSB0cmFwcGVkLlxyXG4gICAgdGhyb3cgU3ludGF4RXJyb3IoJ0lsbGVnYWwgY29udGludWUgc3RhdGVtZW50Jyk7XHJcbiAgfTtcclxuICBcclxuICBzdGVwRG9XaGlsZVN0YXRlbWVudCgpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHN0YXRlLmlzTG9vcCA9IHRydWU7XHJcbiAgICBpZiAoc3RhdGUubm9kZS50eXBlID09ICdEb1doaWxlU3RhdGVtZW50JyAmJiBzdGF0ZS50ZXN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgLy8gRmlyc3QgaXRlcmF0aW9uIG9mIGRvL3doaWxlIGV4ZWN1dGVzIHdpdGhvdXQgY2hlY2tpbmcgdGVzdC5cclxuICAgICAgc3RhdGUudmFsdWUgPSB0aGlzLlRSVUU7XHJcbiAgICAgIHN0YXRlLnRlc3QgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzdGF0ZS50ZXN0KSB7XHJcbiAgICAgIHN0YXRlLnRlc3QgPSB0cnVlO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogc3RhdGUubm9kZS50ZXN0fSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdGF0ZS50ZXN0ID0gZmFsc2U7XHJcbiAgICAgIGlmICghc3RhdGUudmFsdWUudG9Cb29sZWFuKCkpIHtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5ub2RlLmJvZHkpIHtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogc3RhdGUubm9kZS5ib2R5fSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBFbXB0eVN0YXRlbWVudCgpIHtcclxuICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gIH07XHJcbiAgXHJcbiAgc3RlcEV2YWxfKCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgaWYgKCFzdGF0ZS5pbnRlcnByZXRlci5zdGVwKCkpIHtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHN0YXRlLmludGVycHJldGVyLnZhbHVlIHx8IHRoaXMuVU5ERUZJTkVEO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgc3RlcEV4cHJlc3Npb25TdGF0ZW1lbnQoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICBpZiAoIXN0YXRlLmRvbmUpIHtcclxuICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBzdGF0ZS5ub2RlLmV4cHJlc3Npb259KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgICAvLyBTYXZlIHRoaXMgdmFsdWUgdG8gdGhlIGludGVycHJldGVyIGZvciB1c2UgYXMgYSByZXR1cm4gdmFsdWUgaWZcclxuICAgICAgLy8gdGhpcyBjb2RlIGlzIGluc2lkZSBhbiBldmFsIGZ1bmN0aW9uLlxyXG4gICAgICB0aGlzLnZhbHVlID0gc3RhdGUudmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwRm9ySW5TdGF0ZW1lbnQoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICBzdGF0ZS5pc0xvb3AgPSB0cnVlO1xyXG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xyXG4gICAgaWYgKCFzdGF0ZS5kb25lVmFyaWFibGVfKSB7XHJcbiAgICAgIHN0YXRlLmRvbmVWYXJpYWJsZV8gPSB0cnVlO1xyXG4gICAgICB2YXIgbGVmdCA9IG5vZGUubGVmdDtcclxuICAgICAgaWYgKGxlZnQudHlwZSA9PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcclxuICAgICAgICAvLyBJbmxpbmUgdmFyaWFibGUgZGVjbGFyYXRpb246IGZvciAodmFyIHggaW4geSlcclxuICAgICAgICBsZWZ0ID0gbGVmdC5kZWNsYXJhdGlvbnNbMF0uaWQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IGxlZnQsIGNvbXBvbmVudHM6IHRydWV9KTtcclxuICAgIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVPYmplY3RfKSB7XHJcbiAgICAgIHN0YXRlLmRvbmVPYmplY3RfID0gdHJ1ZTtcclxuICAgICAgc3RhdGUudmFyaWFibGUgPSBzdGF0ZS52YWx1ZTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUucmlnaHR9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0eXBlb2Ygc3RhdGUuaXRlcmF0b3IgPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBGaXJzdCBpdGVyYXRpb24uXHJcbiAgICAgICAgc3RhdGUub2JqZWN0ID0gc3RhdGUudmFsdWU7XHJcbiAgICAgICAgc3RhdGUuaXRlcmF0b3IgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBuYW1lID0gbnVsbDtcclxuICAgICAgZG9uZTogZG8ge1xyXG4gICAgICAgIHZhciBpID0gc3RhdGUuaXRlcmF0b3I7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdGF0ZS5vYmplY3QucHJvcGVydGllcykge1xyXG4gICAgICAgICAgaWYgKHByb3AgaW4gc3RhdGUub2JqZWN0Lm5vbmVudW1lcmFibGUpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBwcm9wO1xyXG4gICAgICAgICAgICBicmVhayBkb25lO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5vYmplY3QgPSBzdGF0ZS5vYmplY3QucGFyZW50ICYmXHJcbiAgICAgICAgICAgIHN0YXRlLm9iamVjdC5wYXJlbnQucHJvcGVydGllcy5wcm90b3R5cGU7XHJcbiAgICAgICAgc3RhdGUuaXRlcmF0b3IgPSAwO1xyXG4gICAgICB9IHdoaWxlIChzdGF0ZS5vYmplY3QpO1xyXG4gICAgICBzdGF0ZS5pdGVyYXRvcisrO1xyXG4gICAgICBpZiAobmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWVUb1Njb3BlKHN0YXRlLnZhcmlhYmxlLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShuYW1lKSk7XHJcbiAgICAgICAgaWYgKG5vZGUuYm9keSkge1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUuYm9keX0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgc3RlcEZvclN0YXRlbWVudCgpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHN0YXRlLmlzTG9vcCA9IHRydWU7XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICB2YXIgbW9kZSA9IHN0YXRlLm1vZGUgfHwgMDtcclxuICAgIGlmIChtb2RlID09IDApIHtcclxuICAgICAgc3RhdGUubW9kZSA9IDE7XHJcbiAgICAgIGlmIChub2RlLmluaXQpIHtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5pbml0fSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAobW9kZSA9PSAxKSB7XHJcbiAgICAgIHN0YXRlLm1vZGUgPSAyO1xyXG4gICAgICBpZiAobm9kZS50ZXN0KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUudGVzdH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT0gMikge1xyXG4gICAgICBzdGF0ZS5tb2RlID0gMztcclxuICAgICAgaWYgKG5vZGUudGVzdCAmJiBzdGF0ZS52YWx1ZSAmJiAhc3RhdGUudmFsdWUudG9Cb29sZWFuKCkpIHtcclxuICAgICAgICAvLyBMb29wIGNvbXBsZXRlLiAgQmFpbCBvdXQuXHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5ib2R5KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUuYm9keX0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT0gMykge1xyXG4gICAgICBzdGF0ZS5tb2RlID0gMTtcclxuICAgICAgaWYgKG5vZGUudXBkYXRlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUudXBkYXRlfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgc3RlcEZ1bmN0aW9uRGVjbGFyYXRpb24oKSB7XHJcbiAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICB9XHJcbiAgXHJcbiAgc3RlcEZ1bmN0aW9uRXhwcmVzc2lvbigpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gdGhpcy5jcmVhdGVGdW5jdGlvbihzdGF0ZS5ub2RlKTtcclxuICB9XHJcbiAgXHJcbiAgc3RlcElkZW50aWZpZXIoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgIHZhciBuYW1lID0gdGhpcy5jcmVhdGVQcmltaXRpdmUoc3RhdGUubm9kZS5uYW1lKTtcclxuICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9XHJcbiAgICAgICAgc3RhdGUuY29tcG9uZW50cyA/IG5hbWUgOiB0aGlzLmdldFZhbHVlRnJvbVNjb3BlKG5hbWUpO1xyXG4gIH1cclxuICBcclxuICBzdGVwSWZTdGF0ZW1lbnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGVwQ29uZGl0aW9uYWxFeHByZXNzaW9uKCk7XHJcbiAgfVxyXG4gIFxyXG4gIHN0ZXBMYWJlbGVkU3RhdGVtZW50KCkge1xyXG4gICAgLy8gTm8gbmVlZCB0byBoaXQgdGhpcyBub2RlIGFnYWluIG9uIHRoZSB3YXkgYmFjayB1cCB0aGUgc3RhY2suXHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBzdGF0ZS5ub2RlLmJvZHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogc3RhdGUubm9kZS5sYWJlbC5uYW1lfSk7XHJcbiAgfTtcclxuICBcclxuICBzdGVwTGl0ZXJhbCgpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gdGhpcy5jcmVhdGVQcmltaXRpdmUoc3RhdGUubm9kZS52YWx1ZSk7XHJcbiAgfTtcclxuICBcclxuICBzdGVwTG9naWNhbEV4cHJlc3Npb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAobm9kZS5vcGVyYXRvciAhPSAnJiYnICYmIG5vZGUub3BlcmF0b3IgIT0gJ3x8Jykge1xyXG4gICAgICB0aHJvdyBTeW50YXhFcnJvcignVW5rbm93biBsb2dpY2FsIG9wZXJhdG9yOiAnICsgbm9kZS5vcGVyYXRvcik7XHJcbiAgICB9XHJcbiAgICBpZiAoIXN0YXRlLmRvbmVMZWZ0Xykge1xyXG4gICAgICBzdGF0ZS5kb25lTGVmdF8gPSB0cnVlO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5sZWZ0fSk7XHJcbiAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lUmlnaHRfKSB7XHJcbiAgICAgIGlmICgobm9kZS5vcGVyYXRvciA9PSAnJiYnICYmICFzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKSkgfHxcclxuICAgICAgICAgIChub2RlLm9wZXJhdG9yID09ICd8fCcgJiYgc3RhdGUudmFsdWUudG9Cb29sZWFuKCkpKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZXZhbHVhdGlvbi5cclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSBzdGF0ZS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5kb25lUmlnaHRfID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5yaWdodH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUudmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwTWVtYmVyRXhwcmVzc2lvbigpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIGlmICghc3RhdGUuZG9uZU9iamVjdF8pIHtcclxuICAgICAgc3RhdGUuZG9uZU9iamVjdF8gPSB0cnVlO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5vYmplY3R9KTtcclxuICAgIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVQcm9wZXJ0eV8pIHtcclxuICAgICAgc3RhdGUuZG9uZVByb3BlcnR5XyA9IHRydWU7XHJcbiAgICAgIHN0YXRlLm9iamVjdCA9IHN0YXRlLnZhbHVlO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7XHJcbiAgICAgICAgbm9kZTogbm9kZS5wcm9wZXJ0eSxcclxuICAgICAgICBjb21wb25lbnRzOiAhbm9kZS5jb21wdXRlZFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgICBpZiAoc3RhdGUuY29tcG9uZW50cykge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IFtzdGF0ZS5vYmplY3QsIHN0YXRlLnZhbHVlXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSB0aGlzLmdldFByb3BlcnR5KHN0YXRlLm9iamVjdCwgc3RhdGUudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwTmV3RXhwcmVzc2lvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnN0ZXBDYWxsRXhwcmVzc2lvbigpO1xyXG4gIH1cclxuICBcclxuICBzdGVwT2JqZWN0RXhwcmVzc2lvbigpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIHZhciB2YWx1ZVRvZ2dsZSA9IHN0YXRlLnZhbHVlVG9nZ2xlO1xyXG4gICAgdmFyIG4gPSBzdGF0ZS5uIHx8IDA7XHJcbiAgICBpZiAoIXN0YXRlLm9iamVjdCkge1xyXG4gICAgICBzdGF0ZS5vYmplY3QgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodmFsdWVUb2dnbGUpIHtcclxuICAgICAgICBzdGF0ZS5rZXkgPSBzdGF0ZS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnNldFByb3BlcnR5KHN0YXRlLm9iamVjdCwgc3RhdGUua2V5LCBzdGF0ZS52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChub2RlLnByb3BlcnRpZXNbbl0pIHtcclxuICAgICAgaWYgKHZhbHVlVG9nZ2xlKSB7XHJcbiAgICAgICAgc3RhdGUubiA9IG4gKyAxO1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLnByb3BlcnRpZXNbbl0udmFsdWV9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5wcm9wZXJ0aWVzW25dLmtleSwgY29tcG9uZW50czogdHJ1ZX0pO1xyXG4gICAgICB9XHJcbiAgICAgIHN0YXRlLnZhbHVlVG9nZ2xlID0gIXZhbHVlVG9nZ2xlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHN0YXRlLm9iamVjdDtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBQcm9ncmFtKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RlcEJsb2NrU3RhdGVtZW50KCk7XHJcbiAgfVxyXG4gIFxyXG4gIHN0ZXBSZXR1cm5TdGF0ZW1lbnQoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAobm9kZS5hcmd1bWVudCAmJiAhc3RhdGUuZG9uZSkge1xyXG4gICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUuYXJndW1lbnR9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlIHx8IHRoaXMuVU5ERUZJTkVEO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVTdGFjay5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgLy8gU3ludGF4IGVycm9yLCBkbyBub3QgYWxsb3cgdGhpcyBlcnJvciB0byBiZSB0cmFwcGVkLlxyXG4gICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ0lsbGVnYWwgcmV0dXJuIHN0YXRlbWVudCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgICAgfSB3aGlsZSAoc3RhdGUubm9kZS50eXBlICE9ICdDYWxsRXhwcmVzc2lvbicgJiZcclxuICAgICAgICAgICAgICAgc3RhdGUubm9kZS50eXBlICE9ICdOZXdFeHByZXNzaW9uJyk7XHJcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwU2VxdWVuY2VFeHByZXNzaW9uKCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xyXG4gICAgdmFyIG4gPSBzdGF0ZS5uIHx8IDA7XHJcbiAgICBpZiAobm9kZS5leHByZXNzaW9uc1tuXSkge1xyXG4gICAgICBzdGF0ZS5uID0gbiArIDE7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLmV4cHJlc3Npb25zW25dfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUudmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwU3dpdGNoU3RhdGVtZW50KCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgc3RhdGUuY2hlY2tlZCA9IHN0YXRlLmNoZWNrZWQgfHwgW107XHJcbiAgICBzdGF0ZS5pc1N3aXRjaCA9IHRydWU7XHJcbiAgXHJcbiAgICBpZiAoIXN0YXRlLnRlc3QpIHtcclxuICAgICAgc3RhdGUudGVzdCA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBzdGF0ZS5ub2RlLmRpc2NyaW1pbmFudH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFzdGF0ZS5zd2l0Y2hWYWx1ZSkge1xyXG4gICAgICAgIC8vIFByZXNlcnZlIHN3aXRjaCB2YWx1ZSBiZXR3ZWVuIGNhc2UgdGVzdHMuXHJcbiAgICAgICAgc3RhdGUuc3dpdGNoVmFsdWUgPSBzdGF0ZS52YWx1ZTtcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCB8fCAwO1xyXG4gICAgICB2YXIgY3VycmVudENhc2UgPSBzdGF0ZS5ub2RlLmNhc2VzW2luZGV4XTtcclxuICAgICAgaWYgKGN1cnJlbnRDYXNlKSB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZS5kb25lICYmICFzdGF0ZS5jaGVja2VkW2luZGV4XSAmJiBjdXJyZW50Q2FzZS50ZXN0KSB7XHJcbiAgICAgICAgICBzdGF0ZS5jaGVja2VkW2luZGV4XSA9IHRydWU7XHJcbiAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogY3VycmVudENhc2UudGVzdH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBUZXN0IG9uIHRoZSBkZWZhdWx0IGNhc2Ugd2lsbCBiZSBudWxsLlxyXG4gICAgICAgICAgaWYgKHN0YXRlLmRvbmUgfHwgIWN1cnJlbnRDYXNlLnRlc3QgfHxcclxuICAgICAgICAgICAgICB0aGlzLmNvbXAoc3RhdGUudmFsdWUsIHN0YXRlLnN3aXRjaFZhbHVlKSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgbiA9IHN0YXRlLm4gfHwgMDtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDYXNlLmNvbnNlcXVlbnRbbl0pIHtcclxuICAgICAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogY3VycmVudENhc2UuY29uc2VxdWVudFtuXX0pO1xyXG4gICAgICAgICAgICAgIHN0YXRlLm4gPSBuICsgMTtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlLm4gPSAwO1xyXG4gICAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwVGhpc0V4cHJlc3Npb24oKSB7XHJcbiAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2tbaV0udGhpc0V4cHJlc3Npb24pIHtcclxuICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSB0aGlzLnN0YXRlU3RhY2tbaV0udGhpc0V4cHJlc3Npb247XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aHJvdyBFcnJvcignTm8gdGhpcyBleHByZXNzaW9uIGZvdW5kLicpO1xyXG4gIH07XHJcbiAgXHJcbiAgc3RlcFRocm93U3RhdGVtZW50KCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xyXG4gICAgaWYgKCFzdGF0ZS5hcmd1bWVudCkge1xyXG4gICAgICBzdGF0ZS5hcmd1bWVudCA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLmFyZ3VtZW50fSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHN0YXRlLnZhbHVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBUcnlTdGF0ZW1lbnQoKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAoIXN0YXRlLmRvbmVCbG9jaykge1xyXG4gICAgICBzdGF0ZS5kb25lQmxvY2sgPSB0cnVlO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5ibG9ja30pO1xyXG4gICAgfSBlbHNlIGlmICghc3RhdGUuZG9uZUZpbmFsaXplciAmJiBub2RlLmZpbmFsaXplcikge1xyXG4gICAgICBzdGF0ZS5kb25lRmluYWxpemVyID0gdHJ1ZTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUuZmluYWxpemVyfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBVbmFyeUV4cHJlc3Npb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAoIXN0YXRlLmRvbmUpIHtcclxuICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XHJcbiAgICAgIHZhciBuZXh0U3RhdGUgPSB7bm9kZTogbm9kZS5hcmd1bWVudH07XHJcbiAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICdkZWxldGUnKSB7XHJcbiAgICAgICAgbmV4dFN0YXRlLmNvbXBvbmVudHMgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KG5leHRTdGF0ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICBpZiAobm9kZS5vcGVyYXRvciA9PSAnLScpIHtcclxuICAgICAgICB2YWx1ZSA9IC1zdGF0ZS52YWx1ZS50b051bWJlcigpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJysnKSB7XHJcbiAgICAgICAgdmFsdWUgPSBzdGF0ZS52YWx1ZS50b051bWJlcigpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyEnKSB7XHJcbiAgICAgICAgdmFsdWUgPSAhc3RhdGUudmFsdWUudG9Cb29sZWFuKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnficpIHtcclxuICAgICAgICB2YWx1ZSA9IH5zdGF0ZS52YWx1ZS50b051bWJlcigpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ3R5cGVvZicpIHtcclxuICAgICAgICB2YWx1ZSA9IHN0YXRlLnZhbHVlLnR5cGU7XHJcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnZGVsZXRlJykge1xyXG4gICAgICAgIGlmIChzdGF0ZS52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIHZhciBvYmogPSBzdGF0ZS52YWx1ZVswXTtcclxuICAgICAgICAgIHZhciBuYW1lID0gc3RhdGUudmFsdWVbMV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhciBvYmogPSB0aGlzLmdldFNjb3BlKCk7XHJcbiAgICAgICAgICB2YXIgbmFtZSA9IHN0YXRlLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWx1ZSA9IHRoaXMuZGVsZXRlUHJvcGVydHkob2JqLCBuYW1lKTtcclxuICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICd2b2lkJykge1xyXG4gICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IFN5bnRheEVycm9yKCdVbmtub3duIHVuYXJ5IG9wZXJhdG9yOiAnICsgbm9kZS5vcGVyYXRvcik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gdGhpcy5jcmVhdGVQcmltaXRpdmUodmFsdWUpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgc3RlcFVwZGF0ZUV4cHJlc3Npb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XHJcbiAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XHJcbiAgICBpZiAoIXN0YXRlLmRvbmUpIHtcclxuICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLmFyZ3VtZW50LCBjb21wb25lbnRzOiB0cnVlfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcclxuICAgICAgdmFyIGxlZnRTaWRlID0gc3RhdGUudmFsdWU7XHJcbiAgICAgIHZhciBsZWZ0VmFsdWUgPSB0aGlzLmdldFZhbHVlKGxlZnRTaWRlKS50b051bWJlcigpO1xyXG4gICAgICB2YXIgY2hhbmdlVmFsdWU7XHJcbiAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICcrKycpIHtcclxuICAgICAgICBjaGFuZ2VWYWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKGxlZnRWYWx1ZSArIDEpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJy0tJykge1xyXG4gICAgICAgIGNoYW5nZVZhbHVlID0gdGhpcy5jcmVhdGVQcmltaXRpdmUobGVmdFZhbHVlIC0gMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ1Vua25vd24gdXBkYXRlIGV4cHJlc3Npb246ICcgKyBub2RlLm9wZXJhdG9yKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNldFZhbHVlKGxlZnRTaWRlLCBjaGFuZ2VWYWx1ZSk7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IG5vZGUucHJlZml4ID9cclxuICAgICAgICAgIGNoYW5nZVZhbHVlIDogdGhpcy5jcmVhdGVQcmltaXRpdmUobGVmdFZhbHVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHN0ZXBWYXJpYWJsZURlY2xhcmF0aW9uKCkge1xyXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xyXG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xyXG4gICAgdmFyIG4gPSBzdGF0ZS5uIHx8IDA7XHJcbiAgICBpZiAobm9kZS5kZWNsYXJhdGlvbnNbbl0pIHtcclxuICAgICAgc3RhdGUubiA9IG4gKyAxO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5kZWNsYXJhdGlvbnNbbl19KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgc3RlcFZhcmlhYmxlRGVjbGFyYXRvcigpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIGlmIChub2RlLmluaXQgJiYgIXN0YXRlLmRvbmUpIHtcclxuICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHtub2RlOiBub2RlLmluaXR9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghdGhpcy5oYXNQcm9wZXJ0eSh0aGlzLCBub2RlLmlkLm5hbWUpIHx8IG5vZGUuaW5pdCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuaW5pdCA/IHN0YXRlLnZhbHVlIDogdGhpcy5VTkRFRklORUQ7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmNyZWF0ZVByaW1pdGl2ZShub2RlLmlkLm5hbWUpLCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBzdGVwV2l0aFN0YXRlbWVudCgpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcclxuICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcclxuICAgIGlmICghc3RhdGUuZG9uZU9iamVjdCkge1xyXG4gICAgICBzdGF0ZS5kb25lT2JqZWN0ID0gdHJ1ZTtcclxuICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe25vZGU6IG5vZGUub2JqZWN0fSk7XHJcbiAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lQm9keSkge1xyXG4gICAgICBzdGF0ZS5kb25lQm9keSA9IHRydWU7XHJcbiAgICAgIHZhciBzY29wZSA9IHRoaXMuY3JlYXRlU3BlY2lhbFNjb3BlKHRoaXMuZ2V0U2NvcGUoKSwgc3RhdGUudmFsdWUpO1xyXG4gICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7bm9kZTogbm9kZS5ib2R5LCBzY29wZTogc2NvcGV9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgc3RlcFdoaWxlU3RhdGVtZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RlcERvV2hpbGVTdGF0ZW1lbnQoKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgYSBudW1iZXIsIHN0cmluZywgYm9vbGVhbiwgbnVsbCwgb3IgdW5kZWZpbmVkLlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfHVuZGVmaW5lZH0gZGF0YSBQcmltaXRpdmUgdmFsdWUuXHJcbiAqIEBwYXJhbSB7IUludGVycHJldGVyfSBpbnRlcnByZXRlciBUaGUgSlMgSW50ZXJwcmV0ZXIgdG8gYmluZCB0by5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5jbGFzcyBQcmltaXRpdmUge1xyXG4gIGNvbnN0cnVjdG9yKGRhdGEsIGludGVycHJldGVyKSB7XHJcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBkYXRhO1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICBpZiAodHlwZSA9PSAnbnVtYmVyJykge1xyXG4gICAgICB0aGlzLnBhcmVudCA9IGludGVycHJldGVyLk5VTUJFUjtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLnBhcmVudCA9IGludGVycHJldGVyLlNUUklORztcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnYm9vbGVhbicpIHtcclxuICAgICAgdGhpcy5wYXJlbnQgPSBpbnRlcnByZXRlci5CT09MRUFOO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1ByaW1pdGl2ZSA9IHRydWU7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCB0aGlzIHByaW1pdGl2ZSBpbnRvIGEgYm9vbGVhbi5cclxuICAgKiBAcmV0dXJuIHtib29sZWFufSBCb29sZWFuIHZhbHVlLlxyXG4gICAqL1xyXG4gIHRvQm9vbGVhbigpIHtcclxuICAgIHJldHVybiBCb29sZWFuKHRoaXMuZGF0YSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDb252ZXJ0IHRoaXMgcHJpbWl0aXZlIGludG8gYSBudW1iZXIuXHJcbiAgICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgdmFsdWUuXHJcbiAgICovXHJcbiAgdG9OdW1iZXIoKSB7XHJcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMuZGF0YSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDb252ZXJ0IHRoaXMgcHJpbWl0aXZlIGludG8gYSBzdHJpbmcuXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgdmFsdWUuXHJcbiAgICovXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMuZGF0YSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBSZXR1cm4gdGhlIHByaW1pdGl2ZSB2YWx1ZS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfGJvb2xlYW58bnVsbHx1bmRlZmluZWR9IFByaW1pdGl2ZSB2YWx1ZS5cclxuICAgKi9cclxuICB2YWx1ZU9mKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgZm9yIGFuIG9iamVjdC5cclxuICogQHBhcmFtIHtPYmplY3R9IHBhcmVudCBQYXJlbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuY2xhc3MgSW50ZXJwcmV0ZXJPYmplY3Qge1xyXG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xyXG4gICAgdGhpcy5maXhlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB0aGlzLm5vbmVudW1lcmFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgdGhpcy50eXBlID0gJ29iamVjdCc7XHJcbiAgICB0aGlzLmlzUHJpbWl0aXZlID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCB0aGlzIG9iamVjdCBpbnRvIGEgYm9vbGVhbi5cclxuICAgKiBAcmV0dXJuIHtib29sZWFufSBCb29sZWFuIHZhbHVlLlxyXG4gICAqL1xyXG4gIHRvQm9vbGVhbigpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCB0aGlzIG9iamVjdCBpbnRvIGEgbnVtYmVyLlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIHZhbHVlLlxyXG4gICAqL1xyXG4gIHRvTnVtYmVyKCkge1xyXG4gICAgcmV0dXJuIE51bWJlcih0aGlzLmRhdGEgPT09IHVuZGVmaW5lZCA/IHRoaXMudG9TdHJpbmcoKSA6IHRoaXMuZGF0YSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDb252ZXJ0IHRoaXMgb2JqZWN0IGludG8gYSBzdHJpbmcuXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgdmFsdWUuXHJcbiAgICovXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhID09PSB1bmRlZmluZWQgPyAoJ1snICsgdGhpcy50eXBlICsgJ10nKSA6IFN0cmluZyh0aGlzLmRhdGEpO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUmV0dXJuIHRoZSBvYmplY3QgdmFsdWUuXHJcbiAgICogQHJldHVybiB7IU9iamVjdH0gVmFsdWUuXHJcbiAgICovXHJcbiAgdmFsdWVPZigpIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGEgPT09IHVuZGVmaW5lZCA/IHRoaXMgOiB0aGlzLmRhdGE7XHJcbiAgfTtcclxufVxyXG5cclxuSW50ZXJwcmV0ZXIuUHJpbWl0aXZlID0gUHJpbWl0aXZlO1xyXG5JbnRlcnByZXRlci5PYmplY3QgPSBJbnRlcnByZXRlck9iamVjdDtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9iYWJlbHNiZXJnL2pzaW50ZXJwcmV0ZXIvaW50ZXJwcmV0ZXIuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjb3JlICA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKVxuICAsICRKU09OID0gY29yZS5KU09OIHx8IChjb3JlLkpTT04gPSB7c3RyaW5naWZ5OiBKU09OLnN0cmluZ2lmeX0pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiAkSlNPTi5zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3VtZW50cyk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qc1xuICoqIG1vZHVsZSBpZCA9IDExNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL21hcFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5NYXA7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL21hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDExOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdNYXAnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYubWFwLmpzXG4gKiogbW9kdWxlIGlkID0gMTE5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxMjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIFJlc2VydmVkIHdvcmQgbGlzdHMgZm9yIHZhcmlvdXMgZGlhbGVjdHMgb2YgdGhlIGxhbmd1YWdlXHJcblxyXG52YXIgcmVzZXJ2ZWRXb3JkcyA9IHtcclxuICAzOiBcImFic3RyYWN0IGJvb2xlYW4gYnl0ZSBjaGFyIGNsYXNzIGRvdWJsZSBlbnVtIGV4cG9ydCBleHRlbmRzIGZpbmFsIGZsb2F0IGdvdG8gaW1wbGVtZW50cyBpbXBvcnQgaW50IGludGVyZmFjZSBsb25nIG5hdGl2ZSBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzaG9ydCBzdGF0aWMgc3VwZXIgc3luY2hyb25pemVkIHRocm93cyB0cmFuc2llbnQgdm9sYXRpbGVcIixcclxuICA1OiBcImNsYXNzIGVudW0gZXh0ZW5kcyBzdXBlciBjb25zdCBleHBvcnQgaW1wb3J0XCIsXHJcbiAgNjogXCJlbnVtXCIsXHJcbiAgNzogXCJlbnVtXCIsXHJcbiAgc3RyaWN0OiBcImltcGxlbWVudHMgaW50ZXJmYWNlIGxldCBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzdGF0aWMgeWllbGRcIixcclxuICBzdHJpY3RCaW5kOiBcImV2YWwgYXJndW1lbnRzXCJcclxufVxyXG5cclxuLy8gQW5kIHRoZSBrZXl3b3Jkc1xyXG5cclxudmFyIGVjbWE1QW5kTGVzc0tleXdvcmRzID0gXCJicmVhayBjYXNlIGNhdGNoIGNvbnRpbnVlIGRlYnVnZ2VyIGRlZmF1bHQgZG8gZWxzZSBmaW5hbGx5IGZvciBmdW5jdGlvbiBpZiByZXR1cm4gc3dpdGNoIHRocm93IHRyeSB2YXIgd2hpbGUgd2l0aCBudWxsIHRydWUgZmFsc2UgaW5zdGFuY2VvZiB0eXBlb2Ygdm9pZCBkZWxldGUgbmV3IGluIHRoaXNcIlxyXG5cclxudmFyIGtleXdvcmRzID0ge1xyXG4gIDU6IGVjbWE1QW5kTGVzc0tleXdvcmRzLFxyXG4gIDY6IGVjbWE1QW5kTGVzc0tleXdvcmRzICsgXCIgY29uc3QgY2xhc3MgZXh0ZW5kcyBleHBvcnQgaW1wb3J0IHN1cGVyXCJcclxufVxyXG5cclxuLy8gIyMgQ2hhcmFjdGVyIGNhdGVnb3JpZXNcclxuXHJcbi8vIEJpZyB1Z2x5IHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdCBtYXRjaCBjaGFyYWN0ZXJzIGluIHRoZVxyXG4vLyB3aGl0ZXNwYWNlLCBpZGVudGlmaWVyLCBhbmQgaWRlbnRpZmllci1zdGFydCBjYXRlZ29yaWVzLiBUaGVzZVxyXG4vLyBhcmUgb25seSBhcHBsaWVkIHdoZW4gYSBjaGFyYWN0ZXIgaXMgZm91bmQgdG8gYWN0dWFsbHkgaGF2ZSBhXHJcbi8vIGNvZGUgcG9pbnQgYWJvdmUgMTI4LlxyXG4vLyBHZW5lcmF0ZWQgYnkgYGJpbi9nZW5lcmF0ZS1pZGVudGlmaWVyLXJlZ2V4LmpzYC5cclxuXHJcbnZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gXCJcXHhhYVxceGI1XFx4YmFcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJjMVxcdTAyYzYtXFx1MDJkMVxcdTAyZTAtXFx1MDJlNFxcdTAyZWNcXHUwMmVlXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdhLVxcdTAzN2RcXHUwMzdmXFx1MDM4NlxcdTAzODgtXFx1MDM4YVxcdTAzOGNcXHUwMzhlLVxcdTAzYTFcXHUwM2EzLVxcdTAzZjVcXHUwM2Y3LVxcdTA0ODFcXHUwNDhhLVxcdTA1MmZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVkMC1cXHUwNWVhXFx1MDVmMC1cXHUwNWYyXFx1MDYyMC1cXHUwNjRhXFx1MDY2ZVxcdTA2NmZcXHUwNjcxLVxcdTA2ZDNcXHUwNmQ1XFx1MDZlNVxcdTA2ZTZcXHUwNmVlXFx1MDZlZlxcdTA2ZmEtXFx1MDZmY1xcdTA2ZmZcXHUwNzEwXFx1MDcxMi1cXHUwNzJmXFx1MDc0ZC1cXHUwN2E1XFx1MDdiMVxcdTA3Y2EtXFx1MDdlYVxcdTA3ZjRcXHUwN2Y1XFx1MDdmYVxcdTA4MDAtXFx1MDgxNVxcdTA4MWFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4YTAtXFx1MDhiNFxcdTA4YjYtXFx1MDhiZFxcdTA5MDQtXFx1MDkzOVxcdTA5M2RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThjXFx1MDk4ZlxcdTA5OTBcXHUwOTkzLVxcdTA5YThcXHUwOWFhLVxcdTA5YjBcXHUwOWIyXFx1MDliNi1cXHUwOWI5XFx1MDliZFxcdTA5Y2VcXHUwOWRjXFx1MDlkZFxcdTA5ZGYtXFx1MDllMVxcdTA5ZjBcXHUwOWYxXFx1MGEwNS1cXHUwYTBhXFx1MGEwZlxcdTBhMTBcXHUwYTEzLVxcdTBhMjhcXHUwYTJhLVxcdTBhMzBcXHUwYTMyXFx1MGEzM1xcdTBhMzVcXHUwYTM2XFx1MGEzOFxcdTBhMzlcXHUwYTU5LVxcdTBhNWNcXHUwYTVlXFx1MGE3Mi1cXHUwYTc0XFx1MGE4NS1cXHUwYThkXFx1MGE4Zi1cXHUwYTkxXFx1MGE5My1cXHUwYWE4XFx1MGFhYS1cXHUwYWIwXFx1MGFiMlxcdTBhYjNcXHUwYWI1LVxcdTBhYjlcXHUwYWJkXFx1MGFkMFxcdTBhZTBcXHUwYWUxXFx1MGFmOVxcdTBiMDUtXFx1MGIwY1xcdTBiMGZcXHUwYjEwXFx1MGIxMy1cXHUwYjI4XFx1MGIyYS1cXHUwYjMwXFx1MGIzMlxcdTBiMzNcXHUwYjM1LVxcdTBiMzlcXHUwYjNkXFx1MGI1Y1xcdTBiNWRcXHUwYjVmLVxcdTBiNjFcXHUwYjcxXFx1MGI4M1xcdTBiODUtXFx1MGI4YVxcdTBiOGUtXFx1MGI5MFxcdTBiOTItXFx1MGI5NVxcdTBiOTlcXHUwYjlhXFx1MGI5Y1xcdTBiOWVcXHUwYjlmXFx1MGJhM1xcdTBiYTRcXHUwYmE4LVxcdTBiYWFcXHUwYmFlLVxcdTBiYjlcXHUwYmQwXFx1MGMwNS1cXHUwYzBjXFx1MGMwZS1cXHUwYzEwXFx1MGMxMi1cXHUwYzI4XFx1MGMyYS1cXHUwYzM5XFx1MGMzZFxcdTBjNTgtXFx1MGM1YVxcdTBjNjBcXHUwYzYxXFx1MGM4MFxcdTBjODUtXFx1MGM4Y1xcdTBjOGUtXFx1MGM5MFxcdTBjOTItXFx1MGNhOFxcdTBjYWEtXFx1MGNiM1xcdTBjYjUtXFx1MGNiOVxcdTBjYmRcXHUwY2RlXFx1MGNlMFxcdTBjZTFcXHUwY2YxXFx1MGNmMlxcdTBkMDUtXFx1MGQwY1xcdTBkMGUtXFx1MGQxMFxcdTBkMTItXFx1MGQzYVxcdTBkM2RcXHUwZDRlXFx1MGQ1NC1cXHUwZDU2XFx1MGQ1Zi1cXHUwZDYxXFx1MGQ3YS1cXHUwZDdmXFx1MGQ4NS1cXHUwZDk2XFx1MGQ5YS1cXHUwZGIxXFx1MGRiMy1cXHUwZGJiXFx1MGRiZFxcdTBkYzAtXFx1MGRjNlxcdTBlMDEtXFx1MGUzMFxcdTBlMzJcXHUwZTMzXFx1MGU0MC1cXHUwZTQ2XFx1MGU4MVxcdTBlODJcXHUwZTg0XFx1MGU4N1xcdTBlODhcXHUwZThhXFx1MGU4ZFxcdTBlOTQtXFx1MGU5N1xcdTBlOTktXFx1MGU5ZlxcdTBlYTEtXFx1MGVhM1xcdTBlYTVcXHUwZWE3XFx1MGVhYVxcdTBlYWJcXHUwZWFkLVxcdTBlYjBcXHUwZWIyXFx1MGViM1xcdTBlYmRcXHUwZWMwLVxcdTBlYzRcXHUwZWM2XFx1MGVkYy1cXHUwZWRmXFx1MGYwMFxcdTBmNDAtXFx1MGY0N1xcdTBmNDktXFx1MGY2Y1xcdTBmODgtXFx1MGY4Y1xcdTEwMDAtXFx1MTAyYVxcdTEwM2ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVhLVxcdTEwNWRcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZlLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhlXFx1MTBhMC1cXHUxMGM1XFx1MTBjN1xcdTEwY2RcXHUxMGQwLVxcdTEwZmFcXHUxMGZjLVxcdTEyNDhcXHUxMjRhLVxcdTEyNGRcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1YS1cXHUxMjVkXFx1MTI2MC1cXHUxMjg4XFx1MTI4YS1cXHUxMjhkXFx1MTI5MC1cXHUxMmIwXFx1MTJiMi1cXHUxMmI1XFx1MTJiOC1cXHUxMmJlXFx1MTJjMFxcdTEyYzItXFx1MTJjNVxcdTEyYzgtXFx1MTJkNlxcdTEyZDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1YVxcdTEzODAtXFx1MTM4ZlxcdTEzYTAtXFx1MTNmNVxcdTEzZjgtXFx1MTNmZFxcdTE0MDEtXFx1MTY2Y1xcdTE2NmYtXFx1MTY3ZlxcdTE2ODEtXFx1MTY5YVxcdTE2YTAtXFx1MTZlYVxcdTE2ZWUtXFx1MTZmOFxcdTE3MDAtXFx1MTcwY1xcdTE3MGUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Y1xcdTE3NmUtXFx1MTc3MFxcdTE3ODAtXFx1MTdiM1xcdTE3ZDdcXHUxN2RjXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOGE4XFx1MThhYVxcdTE4YjAtXFx1MThmNVxcdTE5MDAtXFx1MTkxZVxcdTE5NTAtXFx1MTk2ZFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlhYlxcdTE5YjAtXFx1MTljOVxcdTFhMDAtXFx1MWExNlxcdTFhMjAtXFx1MWE1NFxcdTFhYTdcXHUxYjA1LVxcdTFiMzNcXHUxYjQ1LVxcdTFiNGJcXHUxYjgzLVxcdTFiYTBcXHUxYmFlXFx1MWJhZlxcdTFiYmEtXFx1MWJlNVxcdTFjMDAtXFx1MWMyM1xcdTFjNGQtXFx1MWM0ZlxcdTFjNWEtXFx1MWM3ZFxcdTFjODAtXFx1MWM4OFxcdTFjZTktXFx1MWNlY1xcdTFjZWUtXFx1MWNmMVxcdTFjZjVcXHUxY2Y2XFx1MWQwMC1cXHUxZGJmXFx1MWUwMC1cXHUxZjE1XFx1MWYxOC1cXHUxZjFkXFx1MWYyMC1cXHUxZjQ1XFx1MWY0OC1cXHUxZjRkXFx1MWY1MC1cXHUxZjU3XFx1MWY1OVxcdTFmNWJcXHUxZjVkXFx1MWY1Zi1cXHUxZjdkXFx1MWY4MC1cXHUxZmI0XFx1MWZiNi1cXHUxZmJjXFx1MWZiZVxcdTFmYzItXFx1MWZjNFxcdTFmYzYtXFx1MWZjY1xcdTFmZDAtXFx1MWZkM1xcdTFmZDYtXFx1MWZkYlxcdTFmZTAtXFx1MWZlY1xcdTFmZjItXFx1MWZmNFxcdTFmZjYtXFx1MWZmY1xcdTIwNzFcXHUyMDdmXFx1MjA5MC1cXHUyMDljXFx1MjEwMlxcdTIxMDdcXHUyMTBhLVxcdTIxMTNcXHUyMTE1XFx1MjExOC1cXHUyMTFkXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyYS1cXHUyMTM5XFx1MjEzYy1cXHUyMTNmXFx1MjE0NS1cXHUyMTQ5XFx1MjE0ZVxcdTIxNjAtXFx1MjE4OFxcdTJjMDAtXFx1MmMyZVxcdTJjMzAtXFx1MmM1ZVxcdTJjNjAtXFx1MmNlNFxcdTJjZWItXFx1MmNlZVxcdTJjZjJcXHUyY2YzXFx1MmQwMC1cXHUyZDI1XFx1MmQyN1xcdTJkMmRcXHUyZDMwLVxcdTJkNjdcXHUyZDZmXFx1MmQ4MC1cXHUyZDk2XFx1MmRhMC1cXHUyZGE2XFx1MmRhOC1cXHUyZGFlXFx1MmRiMC1cXHUyZGI2XFx1MmRiOC1cXHUyZGJlXFx1MmRjMC1cXHUyZGM2XFx1MmRjOC1cXHUyZGNlXFx1MmRkMC1cXHUyZGQ2XFx1MmRkOC1cXHUyZGRlXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNjXFx1MzA0MS1cXHUzMDk2XFx1MzA5Yi1cXHUzMDlmXFx1MzBhMS1cXHUzMGZhXFx1MzBmYy1cXHUzMGZmXFx1MzEwNS1cXHUzMTJkXFx1MzEzMS1cXHUzMThlXFx1MzFhMC1cXHUzMWJhXFx1MzFmMC1cXHUzMWZmXFx1MzQwMC1cXHU0ZGI1XFx1NGUwMC1cXHU5ZmQ1XFx1YTAwMC1cXHVhNDhjXFx1YTRkMC1cXHVhNGZkXFx1YTUwMC1cXHVhNjBjXFx1YTYxMC1cXHVhNjFmXFx1YTYyYVxcdWE2MmJcXHVhNjQwLVxcdWE2NmVcXHVhNjdmLVxcdWE2OWRcXHVhNmEwLVxcdWE2ZWZcXHVhNzE3LVxcdWE3MWZcXHVhNzIyLVxcdWE3ODhcXHVhNzhiLVxcdWE3YWVcXHVhN2IwLVxcdWE3YjdcXHVhN2Y3LVxcdWE4MDFcXHVhODAzLVxcdWE4MDVcXHVhODA3LVxcdWE4MGFcXHVhODBjLVxcdWE4MjJcXHVhODQwLVxcdWE4NzNcXHVhODgyLVxcdWE4YjNcXHVhOGYyLVxcdWE4ZjdcXHVhOGZiXFx1YThmZFxcdWE5MGEtXFx1YTkyNVxcdWE5MzAtXFx1YTk0NlxcdWE5NjAtXFx1YTk3Y1xcdWE5ODQtXFx1YTliMlxcdWE5Y2ZcXHVhOWUwLVxcdWE5ZTRcXHVhOWU2LVxcdWE5ZWZcXHVhOWZhLVxcdWE5ZmVcXHVhYTAwLVxcdWFhMjhcXHVhYTQwLVxcdWFhNDJcXHVhYTQ0LVxcdWFhNGJcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE3ZS1cXHVhYWFmXFx1YWFiMVxcdWFhYjVcXHVhYWI2XFx1YWFiOS1cXHVhYWJkXFx1YWFjMFxcdWFhYzJcXHVhYWRiLVxcdWFhZGRcXHVhYWUwLVxcdWFhZWFcXHVhYWYyLVxcdWFhZjRcXHVhYjAxLVxcdWFiMDZcXHVhYjA5LVxcdWFiMGVcXHVhYjExLVxcdWFiMTZcXHVhYjIwLVxcdWFiMjZcXHVhYjI4LVxcdWFiMmVcXHVhYjMwLVxcdWFiNWFcXHVhYjVjLVxcdWFiNjVcXHVhYjcwLVxcdWFiZTJcXHVhYzAwLVxcdWQ3YTNcXHVkN2IwLVxcdWQ3YzZcXHVkN2NiLVxcdWQ3ZmJcXHVmOTAwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjAwLVxcdWZiMDZcXHVmYjEzLVxcdWZiMTdcXHVmYjFkXFx1ZmIxZi1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTcwLVxcdWZlNzRcXHVmZTc2LVxcdWZlZmNcXHVmZjIxLVxcdWZmM2FcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNcIlxyXG52YXIgbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBcIlxcdTIwMGNcXHUyMDBkXFx4YjdcXHUwMzAwLVxcdTAzNmZcXHUwMzg3XFx1MDQ4My1cXHUwNDg3XFx1MDU5MS1cXHUwNWJkXFx1MDViZlxcdTA1YzFcXHUwNWMyXFx1MDVjNFxcdTA1YzVcXHUwNWM3XFx1MDYxMC1cXHUwNjFhXFx1MDY0Yi1cXHUwNjY5XFx1MDY3MFxcdTA2ZDYtXFx1MDZkY1xcdTA2ZGYtXFx1MDZlNFxcdTA2ZTdcXHUwNmU4XFx1MDZlYS1cXHUwNmVkXFx1MDZmMC1cXHUwNmY5XFx1MDcxMVxcdTA3MzAtXFx1MDc0YVxcdTA3YTYtXFx1MDdiMFxcdTA3YzAtXFx1MDdjOVxcdTA3ZWItXFx1MDdmM1xcdTA4MTYtXFx1MDgxOVxcdTA4MWItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyZFxcdTA4NTktXFx1MDg1YlxcdTA4ZDQtXFx1MDhlMVxcdTA4ZTMtXFx1MDkwM1xcdTA5M2EtXFx1MDkzY1xcdTA5M2UtXFx1MDk0ZlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk4MS1cXHUwOTgzXFx1MDliY1xcdTA5YmUtXFx1MDljNFxcdTA5YzdcXHUwOWM4XFx1MDljYi1cXHUwOWNkXFx1MDlkN1xcdTA5ZTJcXHUwOWUzXFx1MDllNi1cXHUwOWVmXFx1MGEwMS1cXHUwYTAzXFx1MGEzY1xcdTBhM2UtXFx1MGE0MlxcdTBhNDdcXHUwYTQ4XFx1MGE0Yi1cXHUwYTRkXFx1MGE1MVxcdTBhNjYtXFx1MGE3MVxcdTBhNzVcXHUwYTgxLVxcdTBhODNcXHUwYWJjXFx1MGFiZS1cXHUwYWM1XFx1MGFjNy1cXHUwYWM5XFx1MGFjYi1cXHUwYWNkXFx1MGFlMlxcdTBhZTNcXHUwYWU2LVxcdTBhZWZcXHUwYjAxLVxcdTBiMDNcXHUwYjNjXFx1MGIzZS1cXHUwYjQ0XFx1MGI0N1xcdTBiNDhcXHUwYjRiLVxcdTBiNGRcXHUwYjU2XFx1MGI1N1xcdTBiNjJcXHUwYjYzXFx1MGI2Ni1cXHUwYjZmXFx1MGI4MlxcdTBiYmUtXFx1MGJjMlxcdTBiYzYtXFx1MGJjOFxcdTBiY2EtXFx1MGJjZFxcdTBiZDdcXHUwYmU2LVxcdTBiZWZcXHUwYzAwLVxcdTBjMDNcXHUwYzNlLVxcdTBjNDRcXHUwYzQ2LVxcdTBjNDhcXHUwYzRhLVxcdTBjNGRcXHUwYzU1XFx1MGM1NlxcdTBjNjJcXHUwYzYzXFx1MGM2Ni1cXHUwYzZmXFx1MGM4MS1cXHUwYzgzXFx1MGNiY1xcdTBjYmUtXFx1MGNjNFxcdTBjYzYtXFx1MGNjOFxcdTBjY2EtXFx1MGNjZFxcdTBjZDVcXHUwY2Q2XFx1MGNlMlxcdTBjZTNcXHUwY2U2LVxcdTBjZWZcXHUwZDAxLVxcdTBkMDNcXHUwZDNlLVxcdTBkNDRcXHUwZDQ2LVxcdTBkNDhcXHUwZDRhLVxcdTBkNGRcXHUwZDU3XFx1MGQ2MlxcdTBkNjNcXHUwZDY2LVxcdTBkNmZcXHUwZDgyXFx1MGQ4M1xcdTBkY2FcXHUwZGNmLVxcdTBkZDRcXHUwZGQ2XFx1MGRkOC1cXHUwZGRmXFx1MGRlNi1cXHUwZGVmXFx1MGRmMlxcdTBkZjNcXHUwZTMxXFx1MGUzNC1cXHUwZTNhXFx1MGU0Ny1cXHUwZTRlXFx1MGU1MC1cXHUwZTU5XFx1MGViMVxcdTBlYjQtXFx1MGViOVxcdTBlYmJcXHUwZWJjXFx1MGVjOC1cXHUwZWNkXFx1MGVkMC1cXHUwZWQ5XFx1MGYxOFxcdTBmMTlcXHUwZjIwLVxcdTBmMjlcXHUwZjM1XFx1MGYzN1xcdTBmMzlcXHUwZjNlXFx1MGYzZlxcdTBmNzEtXFx1MGY4NFxcdTBmODZcXHUwZjg3XFx1MGY4ZC1cXHUwZjk3XFx1MGY5OS1cXHUwZmJjXFx1MGZjNlxcdTEwMmItXFx1MTAzZVxcdTEwNDAtXFx1MTA0OVxcdTEwNTYtXFx1MTA1OVxcdTEwNWUtXFx1MTA2MFxcdTEwNjItXFx1MTA2NFxcdTEwNjctXFx1MTA2ZFxcdTEwNzEtXFx1MTA3NFxcdTEwODItXFx1MTA4ZFxcdTEwOGYtXFx1MTA5ZFxcdTEzNWQtXFx1MTM1ZlxcdTEzNjktXFx1MTM3MVxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN2I0LVxcdTE3ZDNcXHUxN2RkXFx1MTdlMC1cXHUxN2U5XFx1MTgwYi1cXHUxODBkXFx1MTgxMC1cXHUxODE5XFx1MThhOVxcdTE5MjAtXFx1MTkyYlxcdTE5MzAtXFx1MTkzYlxcdTE5NDYtXFx1MTk0ZlxcdTE5ZDAtXFx1MTlkYVxcdTFhMTctXFx1MWExYlxcdTFhNTUtXFx1MWE1ZVxcdTFhNjAtXFx1MWE3Y1xcdTFhN2YtXFx1MWE4OVxcdTFhOTAtXFx1MWE5OVxcdTFhYjAtXFx1MWFiZFxcdTFiMDAtXFx1MWIwNFxcdTFiMzQtXFx1MWI0NFxcdTFiNTAtXFx1MWI1OVxcdTFiNmItXFx1MWI3M1xcdTFiODAtXFx1MWI4MlxcdTFiYTEtXFx1MWJhZFxcdTFiYjAtXFx1MWJiOVxcdTFiZTYtXFx1MWJmM1xcdTFjMjQtXFx1MWMzN1xcdTFjNDAtXFx1MWM0OVxcdTFjNTAtXFx1MWM1OVxcdTFjZDAtXFx1MWNkMlxcdTFjZDQtXFx1MWNlOFxcdTFjZWRcXHUxY2YyLVxcdTFjZjRcXHUxY2Y4XFx1MWNmOVxcdTFkYzAtXFx1MWRmNVxcdTFkZmItXFx1MWRmZlxcdTIwM2ZcXHUyMDQwXFx1MjA1NFxcdTIwZDAtXFx1MjBkY1xcdTIwZTFcXHUyMGU1LVxcdTIwZjBcXHUyY2VmLVxcdTJjZjFcXHUyZDdmXFx1MmRlMC1cXHUyZGZmXFx1MzAyYS1cXHUzMDJmXFx1MzA5OVxcdTMwOWFcXHVhNjIwLVxcdWE2MjlcXHVhNjZmXFx1YTY3NC1cXHVhNjdkXFx1YTY5ZVxcdWE2OWZcXHVhNmYwXFx1YTZmMVxcdWE4MDJcXHVhODA2XFx1YTgwYlxcdWE4MjMtXFx1YTgyN1xcdWE4ODBcXHVhODgxXFx1YThiNC1cXHVhOGM1XFx1YThkMC1cXHVhOGQ5XFx1YThlMC1cXHVhOGYxXFx1YTkwMC1cXHVhOTA5XFx1YTkyNi1cXHVhOTJkXFx1YTk0Ny1cXHVhOTUzXFx1YTk4MC1cXHVhOTgzXFx1YTliMy1cXHVhOWMwXFx1YTlkMC1cXHVhOWQ5XFx1YTllNVxcdWE5ZjAtXFx1YTlmOVxcdWFhMjktXFx1YWEzNlxcdWFhNDNcXHVhYTRjXFx1YWE0ZFxcdWFhNTAtXFx1YWE1OVxcdWFhN2ItXFx1YWE3ZFxcdWFhYjBcXHVhYWIyLVxcdWFhYjRcXHVhYWI3XFx1YWFiOFxcdWFhYmVcXHVhYWJmXFx1YWFjMVxcdWFhZWItXFx1YWFlZlxcdWFhZjVcXHVhYWY2XFx1YWJlMy1cXHVhYmVhXFx1YWJlY1xcdWFiZWRcXHVhYmYwLVxcdWFiZjlcXHVmYjFlXFx1ZmUwMC1cXHVmZTBmXFx1ZmUyMC1cXHVmZTJmXFx1ZmUzM1xcdWZlMzRcXHVmZTRkLVxcdWZlNGZcXHVmZjEwLVxcdWZmMTlcXHVmZjNmXCJcclxuXHJcbnZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydCA9IG5ldyBSZWdFeHAoXCJbXCIgKyBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzICsgXCJdXCIpXHJcbnZhciBub25BU0NJSWlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIpXHJcblxyXG5ub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBudWxsXHJcblxyXG4vLyBUaGVzZSBhcmUgYSBydW4tbGVuZ3RoIGFuZCBvZmZzZXQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGVcclxuLy8gPjB4ZmZmZiBjb2RlIHBvaW50cyB0aGF0IGFyZSBhIHZhbGlkIHBhcnQgb2YgaWRlbnRpZmllcnMuIFRoZVxyXG4vLyBvZmZzZXQgc3RhcnRzIGF0IDB4MTAwMDAsIGFuZCBlYWNoIHBhaXIgb2YgbnVtYmVycyByZXByZXNlbnRzIGFuXHJcbi8vIG9mZnNldCB0byB0aGUgbmV4dCByYW5nZSwgYW5kIHRoZW4gYSBzaXplIG9mIHRoZSByYW5nZS4gVGhleSB3ZXJlXHJcbi8vIGdlbmVyYXRlZCBieSBiaW4vZ2VuZXJhdGUtaWRlbnRpZmllci1yZWdleC5qc1xyXG52YXIgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMgPSBbMCwxMSwyLDI1LDIsMTgsMiwxLDIsMTQsMywxMywzNSwxMjIsNzAsNTIsMjY4LDI4LDQsNDgsNDgsMzEsMTcsMjYsNiwzNywxMSwyOSwzLDM1LDUsNywyLDQsNDMsMTU3LDE5LDM1LDUsMzUsNSwzOSw5LDUxLDE1NywzMTAsMTAsMjEsMTEsNywxNTMsNSwzLDAsMiw0MywyLDEsNCwwLDMsMjIsMTEsMjIsMTAsMzAsNjYsMTgsMiwxLDExLDIxLDExLDI1LDcxLDU1LDcsMSw2NSwwLDE2LDMsMiwyLDIsMjYsNDUsMjgsNCwyOCwzNiw3LDIsMjcsMjgsNTMsMTEsMjEsMTEsMTgsMTQsMTcsMTExLDcyLDU2LDUwLDE0LDUwLDc4NSw1Miw3Niw0NCwzMywyNCwyNywzNSw0MiwzNCw0LDAsMTMsNDcsMTUsMywyMiwwLDIsMCwzNiwxNywyLDI0LDg1LDYsMiwwLDIsMywyLDE0LDIsOSw4LDQ2LDM5LDcsMywxLDMsMjEsMiw2LDIsMSwyLDQsNCwwLDE5LDAsMTMsNCwxNTksNTIsMTksMyw1NCw0NywyMSwxLDIsMCwxODUsNDYsNDIsMywzNyw0NywyMSwwLDYwLDQyLDg2LDI1LDM5MSw2MywzMiwwLDQ0OSw1NiwyNjQsOCwyLDM2LDE4LDAsNTAsMjksODgxLDkyMSwxMDMsMTEwLDE4LDE5NSwyNzQ5LDEwNzAsNDA1MCw1ODIsODYzNCw1NjgsOCwzMCwxMTQsMjksMTksNDcsMTcsMywzMiwyMCw2LDE4LDg4MSw2OCwxMiwwLDY3LDEyLDY1LDAsMzIsNjEyNCwyMCw3NTQsOTQ4NiwxLDMwNzEsMTA2LDYsMTIsNCw4LDgsOSw1OTkxLDg0LDIsNzAsMiwxLDMsMCwzLDEsMywzLDIsMTEsMiwwLDIsNiwyLDY0LDIsMywzLDcsMiw2LDIsMjcsMiwzLDIsNCwyLDAsNCw2LDIsMzM5LDMsMjQsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiw3LDQxNDksMTk2LDYwLDY3LDEyMTMsMywyLDI2LDIsMSwyLDAsMywwLDIsOSwyLDMsMiwwLDIsMCw3LDAsNSwwLDIsMCwyLDAsMiwyLDIsMSwyLDAsMywwLDIsMCwyLDAsMiwwLDIsMCwyLDEsMiwwLDMsMywyLDYsMiwzLDIsMywyLDAsMiw5LDIsMTYsNiwyLDIsNCwyLDE2LDQ0MjEsNDI3MTAsNDIsNDE0OCwxMiwyMjEsMyw1NzYxLDEwNTkxLDU0MV1cclxudmFyIGFzdHJhbElkZW50aWZpZXJDb2RlcyA9IFs1MDksMCwyMjcsMCwxNTAsNCwyOTQsOSwxMzY4LDIsMiwxLDYsMyw0MSwyLDUsMCwxNjYsMSwxMzA2LDIsNTQsMTQsMzIsOSwxNiwzLDQ2LDEwLDU0LDksNywyLDM3LDEzLDIsOSw1MiwwLDEzLDIsNDksMTMsMTAsMiw0LDksODMsMTEsNywwLDE2MSwxMSw2LDksNywzLDU3LDAsMiw2LDMsMSwzLDIsMTAsMCwxMSwxLDMsNiw0LDQsMTkzLDE3LDEwLDksODcsMTksMTMsOSwyMTQsNiwzLDgsMjgsMSw4MywxNiwxNiw5LDgyLDEyLDksOSw4NCwxNCw1LDksNDIzLDksODM4LDcsMiw3LDE3LDksNTcsMjEsMiwxMywxOTg4Miw5LDEzNSw0LDYwLDYsMjYsOSwxMDE2LDQ1LDE3LDMsMTk3MjMsMSw1MzE5LDQsNCw1LDksNywzLDYsMzEsMywxNDksMiwxNDE4LDQ5LDUxMyw1NCw1LDQ5LDksMCwxNSwwLDIzLDQsMiwxNCwxMzYxLDYsMiwxNiwzLDYsMiwxLDIsNCwyMjE0LDYsMTEwLDYsNiw5LDc5MjQ4NywyMzldXHJcblxyXG4vLyBUaGlzIGhhcyBhIGNvbXBsZXhpdHkgbGluZWFyIHRvIHRoZSB2YWx1ZSBvZiB0aGUgY29kZS4gVGhlXHJcbi8vIGFzc3VtcHRpb24gaXMgdGhhdCBsb29raW5nIHVwIGFzdHJhbCBpZGVudGlmaWVyIGNoYXJhY3RlcnMgaXNcclxuLy8gcmFyZS5cclxuZnVuY3Rpb24gaXNJbkFzdHJhbFNldChjb2RlLCBzZXQpIHtcclxuICB2YXIgcG9zID0gMHgxMDAwMFxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICBwb3MgKz0gc2V0W2ldXHJcbiAgICBpZiAocG9zID4gY29kZSkgcmV0dXJuIGZhbHNlXHJcbiAgICBwb3MgKz0gc2V0W2kgKyAxXVxyXG4gICAgaWYgKHBvcyA+PSBjb2RlKSByZXR1cm4gdHJ1ZVxyXG4gIH1cclxufVxyXG5cclxuLy8gVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUgc3RhcnRzIGFuIGlkZW50aWZpZXIuXHJcblxyXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJTdGFydChjb2RlLCBhc3RyYWwpIHtcclxuICBpZiAoY29kZSA8IDY1KSByZXR1cm4gY29kZSA9PT0gMzZcclxuICBpZiAoY29kZSA8IDkxKSByZXR1cm4gdHJ1ZVxyXG4gIGlmIChjb2RlIDwgOTcpIHJldHVybiBjb2RlID09PSA5NVxyXG4gIGlmIChjb2RlIDwgMTIzKSByZXR1cm4gdHJ1ZVxyXG4gIGlmIChjb2RlIDw9IDB4ZmZmZikgcmV0dXJuIGNvZGUgPj0gMHhhYSAmJiBub25BU0NJSWlkZW50aWZpZXJTdGFydC50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpXHJcbiAgaWYgKGFzdHJhbCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxyXG4gIHJldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzKVxyXG59XHJcblxyXG4vLyBUZXN0IHdoZXRoZXIgYSBnaXZlbiBjaGFyYWN0ZXIgaXMgcGFydCBvZiBhbiBpZGVudGlmaWVyLlxyXG5cclxuZnVuY3Rpb24gaXNJZGVudGlmaWVyQ2hhcihjb2RlLCBhc3RyYWwpIHtcclxuICBpZiAoY29kZSA8IDQ4KSByZXR1cm4gY29kZSA9PT0gMzZcclxuICBpZiAoY29kZSA8IDU4KSByZXR1cm4gdHJ1ZVxyXG4gIGlmIChjb2RlIDwgNjUpIHJldHVybiBmYWxzZVxyXG4gIGlmIChjb2RlIDwgOTEpIHJldHVybiB0cnVlXHJcbiAgaWYgKGNvZGUgPCA5NykgcmV0dXJuIGNvZGUgPT09IDk1XHJcbiAgaWYgKGNvZGUgPCAxMjMpIHJldHVybiB0cnVlXHJcbiAgaWYgKGNvZGUgPD0gMHhmZmZmKSByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllci50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpXHJcbiAgaWYgKGFzdHJhbCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxyXG4gIHJldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzKSB8fCBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJDb2RlcylcclxufVxyXG5cclxuLy8gIyMgVG9rZW4gdHlwZXNcclxuXHJcbi8vIFRoZSBhc3NpZ25tZW50IG9mIGZpbmUtZ3JhaW5lZCwgaW5mb3JtYXRpb24tY2FycnlpbmcgdHlwZSBvYmplY3RzXHJcbi8vIGFsbG93cyB0aGUgdG9rZW5pemVyIHRvIHN0b3JlIHRoZSBpbmZvcm1hdGlvbiBpdCBoYXMgYWJvdXQgYVxyXG4vLyB0b2tlbiBpbiBhIHdheSB0aGF0IGlzIHZlcnkgY2hlYXAgZm9yIHRoZSBwYXJzZXIgdG8gbG9vayB1cC5cclxuXHJcbi8vIEFsbCB0b2tlbiB0eXBlIHZhcmlhYmxlcyBzdGFydCB3aXRoIGFuIHVuZGVyc2NvcmUsIHRvIG1ha2UgdGhlbVxyXG4vLyBlYXN5IHRvIHJlY29nbml6ZS5cclxuXHJcbi8vIFRoZSBgYmVmb3JlRXhwcmAgcHJvcGVydHkgaXMgdXNlZCB0byBkaXNhbWJpZ3VhdGUgYmV0d2VlbiByZWd1bGFyXHJcbi8vIGV4cHJlc3Npb25zIGFuZCBkaXZpc2lvbnMuIEl0IGlzIHNldCBvbiBhbGwgdG9rZW4gdHlwZXMgdGhhdCBjYW5cclxuLy8gYmUgZm9sbG93ZWQgYnkgYW4gZXhwcmVzc2lvbiAodGh1cywgYSBzbGFzaCBhZnRlciB0aGVtIHdvdWxkIGJlIGFcclxuLy8gcmVndWxhciBleHByZXNzaW9uKS5cclxuLy9cclxuLy8gVGhlIGBzdGFydHNFeHByYCBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNoZWNrIGlmIHRoZSB0b2tlbiBlbmRzIGFcclxuLy8gYHlpZWxkYCBleHByZXNzaW9uLiBJdCBpcyBzZXQgb24gYWxsIHRva2VuIHR5cGVzIHRoYXQgZWl0aGVyIGNhblxyXG4vLyBkaXJlY3RseSBzdGFydCBhbiBleHByZXNzaW9uIChsaWtlIGEgcXVvdGF0aW9uIG1hcmspIG9yIGNhblxyXG4vLyBjb250aW51ZSBhbiBleHByZXNzaW9uIChsaWtlIHRoZSBib2R5IG9mIGEgc3RyaW5nKS5cclxuLy9cclxuLy8gYGlzTG9vcGAgbWFya3MgYSBrZXl3b3JkIGFzIHN0YXJ0aW5nIGEgbG9vcCwgd2hpY2ggaXMgaW1wb3J0YW50XHJcbi8vIHRvIGtub3cgd2hlbiBwYXJzaW5nIGEgbGFiZWwsIGluIG9yZGVyIHRvIGFsbG93IG9yIGRpc2FsbG93XHJcbi8vIGNvbnRpbnVlIGp1bXBzIHRvIHRoYXQgbGFiZWwuXHJcblxyXG52YXIgVG9rZW5UeXBlID0gZnVuY3Rpb24gVG9rZW5UeXBlKGxhYmVsLCBjb25mKSB7XHJcbiAgaWYgKCBjb25mID09PSB2b2lkIDAgKSBjb25mID0ge307XHJcblxyXG4gIHRoaXMubGFiZWwgPSBsYWJlbFxyXG4gIHRoaXMua2V5d29yZCA9IGNvbmYua2V5d29yZFxyXG4gIHRoaXMuYmVmb3JlRXhwciA9ICEhY29uZi5iZWZvcmVFeHByXHJcbiAgdGhpcy5zdGFydHNFeHByID0gISFjb25mLnN0YXJ0c0V4cHJcclxuICB0aGlzLmlzTG9vcCA9ICEhY29uZi5pc0xvb3BcclxuICB0aGlzLmlzQXNzaWduID0gISFjb25mLmlzQXNzaWduXHJcbiAgdGhpcy5wcmVmaXggPSAhIWNvbmYucHJlZml4XHJcbiAgdGhpcy5wb3N0Zml4ID0gISFjb25mLnBvc3RmaXhcclxuICB0aGlzLmJpbm9wID0gY29uZi5iaW5vcCB8fCBudWxsXHJcbiAgdGhpcy51cGRhdGVDb250ZXh0ID0gbnVsbFxyXG59O1xyXG5cclxuZnVuY3Rpb24gYmlub3AobmFtZSwgcHJlYykge1xyXG4gIHJldHVybiBuZXcgVG9rZW5UeXBlKG5hbWUsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogcHJlY30pXHJcbn1cclxudmFyIGJlZm9yZUV4cHIgPSB7YmVmb3JlRXhwcjogdHJ1ZX07XHJcbnZhciBzdGFydHNFeHByID0ge3N0YXJ0c0V4cHI6IHRydWV9O1xyXG4vLyBNYXAga2V5d29yZCBuYW1lcyB0byB0b2tlbiB0eXBlcy5cclxuXHJcbnZhciBrZXl3b3JkVHlwZXMgPSB7fVxyXG5cclxuLy8gU3VjY2luY3QgZGVmaW5pdGlvbnMgb2Yga2V5d29yZCB0b2tlbiB0eXBlc1xyXG5mdW5jdGlvbiBrdyhuYW1lLCBvcHRpb25zKSB7XHJcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XHJcblxyXG4gIG9wdGlvbnMua2V5d29yZCA9IG5hbWVcclxuICByZXR1cm4ga2V5d29yZFR5cGVzW25hbWVdID0gbmV3IFRva2VuVHlwZShuYW1lLCBvcHRpb25zKVxyXG59XHJcblxyXG52YXIgdHQgPSB7XHJcbiAgbnVtOiBuZXcgVG9rZW5UeXBlKFwibnVtXCIsIHN0YXJ0c0V4cHIpLFxyXG4gIHJlZ2V4cDogbmV3IFRva2VuVHlwZShcInJlZ2V4cFwiLCBzdGFydHNFeHByKSxcclxuICBzdHJpbmc6IG5ldyBUb2tlblR5cGUoXCJzdHJpbmdcIiwgc3RhcnRzRXhwciksXHJcbiAgbmFtZTogbmV3IFRva2VuVHlwZShcIm5hbWVcIiwgc3RhcnRzRXhwciksXHJcbiAgZW9mOiBuZXcgVG9rZW5UeXBlKFwiZW9mXCIpLFxyXG5cclxuICAvLyBQdW5jdHVhdGlvbiB0b2tlbiB0eXBlcy5cclxuICBicmFja2V0TDogbmV3IFRva2VuVHlwZShcIltcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcclxuICBicmFja2V0UjogbmV3IFRva2VuVHlwZShcIl1cIiksXHJcbiAgYnJhY2VMOiBuZXcgVG9rZW5UeXBlKFwie1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxyXG4gIGJyYWNlUjogbmV3IFRva2VuVHlwZShcIn1cIiksXHJcbiAgcGFyZW5MOiBuZXcgVG9rZW5UeXBlKFwiKFwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxyXG4gIHBhcmVuUjogbmV3IFRva2VuVHlwZShcIilcIiksXHJcbiAgY29tbWE6IG5ldyBUb2tlblR5cGUoXCIsXCIsIGJlZm9yZUV4cHIpLFxyXG4gIHNlbWk6IG5ldyBUb2tlblR5cGUoXCI7XCIsIGJlZm9yZUV4cHIpLFxyXG4gIGNvbG9uOiBuZXcgVG9rZW5UeXBlKFwiOlwiLCBiZWZvcmVFeHByKSxcclxuICBkb3Q6IG5ldyBUb2tlblR5cGUoXCIuXCIpLFxyXG4gIHF1ZXN0aW9uOiBuZXcgVG9rZW5UeXBlKFwiP1wiLCBiZWZvcmVFeHByKSxcclxuICBhcnJvdzogbmV3IFRva2VuVHlwZShcIj0+XCIsIGJlZm9yZUV4cHIpLFxyXG4gIHRlbXBsYXRlOiBuZXcgVG9rZW5UeXBlKFwidGVtcGxhdGVcIiksXHJcbiAgZWxsaXBzaXM6IG5ldyBUb2tlblR5cGUoXCIuLi5cIiwgYmVmb3JlRXhwciksXHJcbiAgYmFja1F1b3RlOiBuZXcgVG9rZW5UeXBlKFwiYFwiLCBzdGFydHNFeHByKSxcclxuICBkb2xsYXJCcmFjZUw6IG5ldyBUb2tlblR5cGUoXCIke1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxyXG5cclxuICAvLyBPcGVyYXRvcnMuIFRoZXNlIGNhcnJ5IHNldmVyYWwga2luZHMgb2YgcHJvcGVydGllcyB0byBoZWxwIHRoZVxyXG4gIC8vIHBhcnNlciB1c2UgdGhlbSBwcm9wZXJseSAodGhlIHByZXNlbmNlIG9mIHRoZXNlIHByb3BlcnRpZXMgaXNcclxuICAvLyB3aGF0IGNhdGVnb3JpemVzIHRoZW0gYXMgb3BlcmF0b3JzKS5cclxuICAvL1xyXG4gIC8vIGBiaW5vcGAsIHdoZW4gcHJlc2VudCwgc3BlY2lmaWVzIHRoYXQgdGhpcyBvcGVyYXRvciBpcyBhIGJpbmFyeVxyXG4gIC8vIG9wZXJhdG9yLCBhbmQgd2lsbCByZWZlciB0byBpdHMgcHJlY2VkZW5jZS5cclxuICAvL1xyXG4gIC8vIGBwcmVmaXhgIGFuZCBgcG9zdGZpeGAgbWFyayB0aGUgb3BlcmF0b3IgYXMgYSBwcmVmaXggb3IgcG9zdGZpeFxyXG4gIC8vIHVuYXJ5IG9wZXJhdG9yLlxyXG4gIC8vXHJcbiAgLy8gYGlzQXNzaWduYCBtYXJrcyBhbGwgb2YgYD1gLCBgKz1gLCBgLT1gIGV0Y2V0ZXJhLCB3aGljaCBhY3QgYXNcclxuICAvLyBiaW5hcnkgb3BlcmF0b3JzIHdpdGggYSB2ZXJ5IGxvdyBwcmVjZWRlbmNlLCB0aGF0IHNob3VsZCByZXN1bHRcclxuICAvLyBpbiBBc3NpZ25tZW50RXhwcmVzc2lvbiBub2Rlcy5cclxuXHJcbiAgZXE6IG5ldyBUb2tlblR5cGUoXCI9XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBpc0Fzc2lnbjogdHJ1ZX0pLFxyXG4gIGFzc2lnbjogbmV3IFRva2VuVHlwZShcIl89XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBpc0Fzc2lnbjogdHJ1ZX0pLFxyXG4gIGluY0RlYzogbmV3IFRva2VuVHlwZShcIisrLy0tXCIsIHtwcmVmaXg6IHRydWUsIHBvc3RmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcclxuICBwcmVmaXg6IG5ldyBUb2tlblR5cGUoXCJwcmVmaXhcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxyXG4gIGxvZ2ljYWxPUjogYmlub3AoXCJ8fFwiLCAxKSxcclxuICBsb2dpY2FsQU5EOiBiaW5vcChcIiYmXCIsIDIpLFxyXG4gIGJpdHdpc2VPUjogYmlub3AoXCJ8XCIsIDMpLFxyXG4gIGJpdHdpc2VYT1I6IGJpbm9wKFwiXlwiLCA0KSxcclxuICBiaXR3aXNlQU5EOiBiaW5vcChcIiZcIiwgNSksXHJcbiAgZXF1YWxpdHk6IGJpbm9wKFwiPT0vIT1cIiwgNiksXHJcbiAgcmVsYXRpb25hbDogYmlub3AoXCI8Lz5cIiwgNyksXHJcbiAgYml0U2hpZnQ6IGJpbm9wKFwiPDwvPj5cIiwgOCksXHJcbiAgcGx1c01pbjogbmV3IFRva2VuVHlwZShcIisvLVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDksIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxyXG4gIG1vZHVsbzogYmlub3AoXCIlXCIsIDEwKSxcclxuICBzdGFyOiBiaW5vcChcIipcIiwgMTApLFxyXG4gIHNsYXNoOiBiaW5vcChcIi9cIiwgMTApLFxyXG4gIHN0YXJzdGFyOiBuZXcgVG9rZW5UeXBlKFwiKipcIiwge2JlZm9yZUV4cHI6IHRydWV9KSxcclxuXHJcbiAgLy8gS2V5d29yZCB0b2tlbiB0eXBlcy5cclxuICBfYnJlYWs6IGt3KFwiYnJlYWtcIiksXHJcbiAgX2Nhc2U6IGt3KFwiY2FzZVwiLCBiZWZvcmVFeHByKSxcclxuICBfY2F0Y2g6IGt3KFwiY2F0Y2hcIiksXHJcbiAgX2NvbnRpbnVlOiBrdyhcImNvbnRpbnVlXCIpLFxyXG4gIF9kZWJ1Z2dlcjoga3coXCJkZWJ1Z2dlclwiKSxcclxuICBfZGVmYXVsdDoga3coXCJkZWZhdWx0XCIsIGJlZm9yZUV4cHIpLFxyXG4gIF9kbzoga3coXCJkb1wiLCB7aXNMb29wOiB0cnVlLCBiZWZvcmVFeHByOiB0cnVlfSksXHJcbiAgX2Vsc2U6IGt3KFwiZWxzZVwiLCBiZWZvcmVFeHByKSxcclxuICBfZmluYWxseToga3coXCJmaW5hbGx5XCIpLFxyXG4gIF9mb3I6IGt3KFwiZm9yXCIsIHtpc0xvb3A6IHRydWV9KSxcclxuICBfZnVuY3Rpb246IGt3KFwiZnVuY3Rpb25cIiwgc3RhcnRzRXhwciksXHJcbiAgX2lmOiBrdyhcImlmXCIpLFxyXG4gIF9yZXR1cm46IGt3KFwicmV0dXJuXCIsIGJlZm9yZUV4cHIpLFxyXG4gIF9zd2l0Y2g6IGt3KFwic3dpdGNoXCIpLFxyXG4gIF90aHJvdzoga3coXCJ0aHJvd1wiLCBiZWZvcmVFeHByKSxcclxuICBfdHJ5OiBrdyhcInRyeVwiKSxcclxuICBfdmFyOiBrdyhcInZhclwiKSxcclxuICBfY29uc3Q6IGt3KFwiY29uc3RcIiksXHJcbiAgX3doaWxlOiBrdyhcIndoaWxlXCIsIHtpc0xvb3A6IHRydWV9KSxcclxuICBfd2l0aDoga3coXCJ3aXRoXCIpLFxyXG4gIF9uZXc6IGt3KFwibmV3XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXHJcbiAgX3RoaXM6IGt3KFwidGhpc1wiLCBzdGFydHNFeHByKSxcclxuICBfc3VwZXI6IGt3KFwic3VwZXJcIiwgc3RhcnRzRXhwciksXHJcbiAgX2NsYXNzOiBrdyhcImNsYXNzXCIpLFxyXG4gIF9leHRlbmRzOiBrdyhcImV4dGVuZHNcIiwgYmVmb3JlRXhwciksXHJcbiAgX2V4cG9ydDoga3coXCJleHBvcnRcIiksXHJcbiAgX2ltcG9ydDoga3coXCJpbXBvcnRcIiksXHJcbiAgX251bGw6IGt3KFwibnVsbFwiLCBzdGFydHNFeHByKSxcclxuICBfdHJ1ZToga3coXCJ0cnVlXCIsIHN0YXJ0c0V4cHIpLFxyXG4gIF9mYWxzZToga3coXCJmYWxzZVwiLCBzdGFydHNFeHByKSxcclxuICBfaW46IGt3KFwiaW5cIiwge2JlZm9yZUV4cHI6IHRydWUsIGJpbm9wOiA3fSksXHJcbiAgX2luc3RhbmNlb2Y6IGt3KFwiaW5zdGFuY2VvZlwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDd9KSxcclxuICBfdHlwZW9mOiBrdyhcInR5cGVvZlwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXHJcbiAgX3ZvaWQ6IGt3KFwidm9pZFwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXHJcbiAgX2RlbGV0ZToga3coXCJkZWxldGVcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pXHJcbn1cclxuXHJcbi8vIE1hdGNoZXMgYSB3aG9sZSBsaW5lIGJyZWFrICh3aGVyZSBDUkxGIGlzIGNvbnNpZGVyZWQgYSBzaW5nbGVcclxuLy8gbGluZSBicmVhaykuIFVzZWQgdG8gY291bnQgbGluZXMuXHJcblxyXG52YXIgbGluZUJyZWFrID0gL1xcclxcbj98XFxufFxcdTIwMjh8XFx1MjAyOS9cclxudmFyIGxpbmVCcmVha0cgPSBuZXcgUmVnRXhwKGxpbmVCcmVhay5zb3VyY2UsIFwiZ1wiKVxyXG5cclxuZnVuY3Rpb24gaXNOZXdMaW5lKGNvZGUpIHtcclxuICByZXR1cm4gY29kZSA9PT0gMTAgfHwgY29kZSA9PT0gMTMgfHwgY29kZSA9PT0gMHgyMDI4IHx8IGNvZGUgPT0gMHgyMDI5XHJcbn1cclxuXHJcbnZhciBub25BU0NJSXdoaXRlc3BhY2UgPSAvW1xcdTE2ODBcXHUxODBlXFx1MjAwMC1cXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0vXHJcblxyXG52YXIgc2tpcFdoaXRlU3BhY2UgPSAvKD86XFxzfFxcL1xcLy4qfFxcL1xcKlteXSo/XFwqXFwvKSovZ1xyXG5cclxuZnVuY3Rpb24gaXNBcnJheShvYmopIHtcclxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIlxyXG59XHJcblxyXG4vLyBDaGVja3MgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LlxyXG5cclxuZnVuY3Rpb24gaGFzKG9iaiwgcHJvcE5hbWUpIHtcclxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcE5hbWUpXHJcbn1cclxuXHJcbi8vIFRoZXNlIGFyZSB1c2VkIHdoZW4gYG9wdGlvbnMubG9jYXRpb25zYCBpcyBvbiwgZm9yIHRoZVxyXG4vLyBgc3RhcnRMb2NgIGFuZCBgZW5kTG9jYCBwcm9wZXJ0aWVzLlxyXG5cclxudmFyIFBvc2l0aW9uID0gZnVuY3Rpb24gUG9zaXRpb24obGluZSwgY29sKSB7XHJcbiAgdGhpcy5saW5lID0gbGluZVxyXG4gIHRoaXMuY29sdW1uID0gY29sXHJcbn07XHJcblxyXG5Qb3NpdGlvbi5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gb2Zmc2V0IChuKSB7XHJcbiAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmxpbmUsIHRoaXMuY29sdW1uICsgbilcclxufTtcclxuXHJcbnZhciBTb3VyY2VMb2NhdGlvbiA9IGZ1bmN0aW9uIFNvdXJjZUxvY2F0aW9uKHAsIHN0YXJ0LCBlbmQpIHtcclxuICB0aGlzLnN0YXJ0ID0gc3RhcnRcclxuICB0aGlzLmVuZCA9IGVuZFxyXG4gIGlmIChwLnNvdXJjZUZpbGUgIT09IG51bGwpIHRoaXMuc291cmNlID0gcC5zb3VyY2VGaWxlXHJcbn07XHJcblxyXG4vLyBUaGUgYGdldExpbmVJbmZvYCBmdW5jdGlvbiBpcyBtb3N0bHkgdXNlZnVsIHdoZW4gdGhlXHJcbi8vIGBsb2NhdGlvbnNgIG9wdGlvbiBpcyBvZmYgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSBhbmQgeW91XHJcbi8vIHdhbnQgdG8gZmluZCB0aGUgbGluZS9jb2x1bW4gcG9zaXRpb24gZm9yIGEgZ2l2ZW4gY2hhcmFjdGVyXHJcbi8vIG9mZnNldC4gYGlucHV0YCBzaG91bGQgYmUgdGhlIGNvZGUgc3RyaW5nIHRoYXQgdGhlIG9mZnNldCByZWZlcnNcclxuLy8gaW50by5cclxuXHJcbmZ1bmN0aW9uIGdldExpbmVJbmZvKGlucHV0LCBvZmZzZXQpIHtcclxuICBmb3IgKHZhciBsaW5lID0gMSwgY3VyID0gMDs7KSB7XHJcbiAgICBsaW5lQnJlYWtHLmxhc3RJbmRleCA9IGN1clxyXG4gICAgdmFyIG1hdGNoID0gbGluZUJyZWFrRy5leGVjKGlucHV0KVxyXG4gICAgaWYgKG1hdGNoICYmIG1hdGNoLmluZGV4IDwgb2Zmc2V0KSB7XHJcbiAgICAgICsrbGluZVxyXG4gICAgICBjdXIgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihsaW5lLCBvZmZzZXQgLSBjdXIpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBIHNlY29uZCBvcHRpb25hbCBhcmd1bWVudCBjYW4gYmUgZ2l2ZW4gdG8gZnVydGhlciBjb25maWd1cmVcclxuLy8gdGhlIHBhcnNlciBwcm9jZXNzLiBUaGVzZSBvcHRpb25zIGFyZSByZWNvZ25pemVkOlxyXG5cclxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gIC8vIGBlY21hVmVyc2lvbmAgaW5kaWNhdGVzIHRoZSBFQ01BU2NyaXB0IHZlcnNpb24gdG8gcGFyc2UuIE11c3RcclxuICAvLyBiZSBlaXRoZXIgMywgb3IgNSwgb3IgNi4gVGhpcyBpbmZsdWVuY2VzIHN1cHBvcnQgZm9yIHN0cmljdFxyXG4gIC8vIG1vZGUsIHRoZSBzZXQgb2YgcmVzZXJ2ZWQgd29yZHMsIHN1cHBvcnQgZm9yIGdldHRlcnMgYW5kXHJcbiAgLy8gc2V0dGVycyBhbmQgb3RoZXIgZmVhdHVyZXMuIFRoZSBkZWZhdWx0IGlzIDYuXHJcbiAgZWNtYVZlcnNpb246IDYsXHJcbiAgLy8gU291cmNlIHR5cGUgKFwic2NyaXB0XCIgb3IgXCJtb2R1bGVcIikgZm9yIGRpZmZlcmVudCBzZW1hbnRpY3NcclxuICBzb3VyY2VUeXBlOiBcInNjcmlwdFwiLFxyXG4gIC8vIGBvbkluc2VydGVkU2VtaWNvbG9uYCBjYW4gYmUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkXHJcbiAgLy8gd2hlbiBhIHNlbWljb2xvbiBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkLiBJdCB3aWxsIGJlIHBhc3NlZFxyXG4gIC8vIHRoIHBvc2l0aW9uIG9mIHRoZSBjb21tYSBhcyBhbiBvZmZzZXQsIGFuZCBpZiBgbG9jYXRpb25zYCBpc1xyXG4gIC8vIGVuYWJsZWQsIGl0IGlzIGdpdmVuIHRoZSBsb2NhdGlvbiBhcyBhIGB7bGluZSwgY29sdW1ufWAgb2JqZWN0XHJcbiAgLy8gYXMgc2Vjb25kIGFyZ3VtZW50LlxyXG4gIG9uSW5zZXJ0ZWRTZW1pY29sb246IG51bGwsXHJcbiAgLy8gYG9uVHJhaWxpbmdDb21tYWAgaXMgc2ltaWxhciB0byBgb25JbnNlcnRlZFNlbWljb2xvbmAsIGJ1dCBmb3JcclxuICAvLyB0cmFpbGluZyBjb21tYXMuXHJcbiAgb25UcmFpbGluZ0NvbW1hOiBudWxsLFxyXG4gIC8vIEJ5IGRlZmF1bHQsIHJlc2VydmVkIHdvcmRzIGFyZSBvbmx5IGVuZm9yY2VkIGlmIGVjbWFWZXJzaW9uID49IDUuXHJcbiAgLy8gU2V0IGBhbGxvd1Jlc2VydmVkYCB0byBhIGJvb2xlYW4gdmFsdWUgdG8gZXhwbGljaXRseSB0dXJuIHRoaXMgb25cclxuICAvLyBhbiBvZmYuIFdoZW4gdGhpcyBvcHRpb24gaGFzIHRoZSB2YWx1ZSBcIm5ldmVyXCIsIHJlc2VydmVkIHdvcmRzXHJcbiAgLy8gYW5kIGtleXdvcmRzIGNhbiBhbHNvIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5IG5hbWVzLlxyXG4gIGFsbG93UmVzZXJ2ZWQ6IG51bGwsXHJcbiAgLy8gV2hlbiBlbmFibGVkLCBhIHJldHVybiBhdCB0aGUgdG9wIGxldmVsIGlzIG5vdCBjb25zaWRlcmVkIGFuXHJcbiAgLy8gZXJyb3IuXHJcbiAgYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246IGZhbHNlLFxyXG4gIC8vIFdoZW4gZW5hYmxlZCwgaW1wb3J0L2V4cG9ydCBzdGF0ZW1lbnRzIGFyZSBub3QgY29uc3RyYWluZWQgdG9cclxuICAvLyBhcHBlYXJpbmcgYXQgdGhlIHRvcCBvZiB0aGUgcHJvZ3JhbS5cclxuICBhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IGZhbHNlLFxyXG4gIC8vIFdoZW4gZW5hYmxlZCwgaGFzaGJhbmcgZGlyZWN0aXZlIGluIHRoZSBiZWdpbm5pbmcgb2YgZmlsZVxyXG4gIC8vIGlzIGFsbG93ZWQgYW5kIHRyZWF0ZWQgYXMgYSBsaW5lIGNvbW1lbnQuXHJcbiAgYWxsb3dIYXNoQmFuZzogZmFsc2UsXHJcbiAgLy8gV2hlbiBgbG9jYXRpb25zYCBpcyBvbiwgYGxvY2AgcHJvcGVydGllcyBob2xkaW5nIG9iamVjdHMgd2l0aFxyXG4gIC8vIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXMgaW4gYHtsaW5lLCBjb2x1bW59YCBmb3JtICh3aXRoXHJcbiAgLy8gbGluZSBiZWluZyAxLWJhc2VkIGFuZCBjb2x1bW4gMC1iYXNlZCkgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGVcclxuICAvLyBub2Rlcy5cclxuICBsb2NhdGlvbnM6IGZhbHNlLFxyXG4gIC8vIEEgZnVuY3Rpb24gY2FuIGJlIHBhc3NlZCBhcyBgb25Ub2tlbmAgb3B0aW9uLCB3aGljaCB3aWxsXHJcbiAgLy8gY2F1c2UgQWNvcm4gdG8gY2FsbCB0aGF0IGZ1bmN0aW9uIHdpdGggb2JqZWN0IGluIHRoZSBzYW1lXHJcbiAgLy8gZm9ybWF0IGFzIHRva2VucyByZXR1cm5lZCBmcm9tIGB0b2tlbml6ZXIoKS5nZXRUb2tlbigpYC4gTm90ZVxyXG4gIC8vIHRoYXQgeW91IGFyZSBub3QgYWxsb3dlZCB0byBjYWxsIHRoZSBwYXJzZXIgZnJvbSB0aGVcclxuICAvLyBjYWxsYmFja+KAlHRoYXQgd2lsbCBjb3JydXB0IGl0cyBpbnRlcm5hbCBzdGF0ZS5cclxuICBvblRva2VuOiBudWxsLFxyXG4gIC8vIEEgZnVuY3Rpb24gY2FuIGJlIHBhc3NlZCBhcyBgb25Db21tZW50YCBvcHRpb24sIHdoaWNoIHdpbGxcclxuICAvLyBjYXVzZSBBY29ybiB0byBjYWxsIHRoYXQgZnVuY3Rpb24gd2l0aCBgKGJsb2NrLCB0ZXh0LCBzdGFydCxcclxuICAvLyBlbmQpYCBwYXJhbWV0ZXJzIHdoZW5ldmVyIGEgY29tbWVudCBpcyBza2lwcGVkLiBgYmxvY2tgIGlzIGFcclxuICAvLyBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGlzIGlzIGEgYmxvY2sgKGAvKiAqL2ApIGNvbW1lbnQsXHJcbiAgLy8gYHRleHRgIGlzIHRoZSBjb250ZW50IG9mIHRoZSBjb21tZW50LCBhbmQgYHN0YXJ0YCBhbmQgYGVuZGAgYXJlXHJcbiAgLy8gY2hhcmFjdGVyIG9mZnNldHMgdGhhdCBkZW5vdGUgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIGNvbW1lbnQuXHJcbiAgLy8gV2hlbiB0aGUgYGxvY2F0aW9uc2Agb3B0aW9uIGlzIG9uLCB0d28gbW9yZSBwYXJhbWV0ZXJzIGFyZVxyXG4gIC8vIHBhc3NlZCwgdGhlIGZ1bGwgYHtsaW5lLCBjb2x1bW59YCBsb2NhdGlvbnMgb2YgdGhlIHN0YXJ0IGFuZFxyXG4gIC8vIGVuZCBvZiB0aGUgY29tbWVudHMuIE5vdGUgdGhhdCB5b3UgYXJlIG5vdCBhbGxvd2VkIHRvIGNhbGwgdGhlXHJcbiAgLy8gcGFyc2VyIGZyb20gdGhlIGNhbGxiYWNr4oCUdGhhdCB3aWxsIGNvcnJ1cHQgaXRzIGludGVybmFsIHN0YXRlLlxyXG4gIG9uQ29tbWVudDogbnVsbCxcclxuICAvLyBOb2RlcyBoYXZlIHRoZWlyIHN0YXJ0IGFuZCBlbmQgY2hhcmFjdGVycyBvZmZzZXRzIHJlY29yZGVkIGluXHJcbiAgLy8gYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllcyAoZGlyZWN0bHkgb24gdGhlIG5vZGUsIHJhdGhlciB0aGFuXHJcbiAgLy8gdGhlIGBsb2NgIG9iamVjdCwgd2hpY2ggaG9sZHMgbGluZS9jb2x1bW4gZGF0YS4gVG8gYWxzbyBhZGQgYVxyXG4gIC8vIFtzZW1pLXN0YW5kYXJkaXplZF1bcmFuZ2VdIGByYW5nZWAgcHJvcGVydHkgaG9sZGluZyBhIGBbc3RhcnQsXHJcbiAgLy8gZW5kXWAgYXJyYXkgd2l0aCB0aGUgc2FtZSBudW1iZXJzLCBzZXQgdGhlIGByYW5nZXNgIG9wdGlvbiB0b1xyXG4gIC8vIGB0cnVlYC5cclxuICAvL1xyXG4gIC8vIFtyYW5nZV06IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc0NTY3OFxyXG4gIHJhbmdlczogZmFsc2UsXHJcbiAgLy8gSXQgaXMgcG9zc2libGUgdG8gcGFyc2UgbXVsdGlwbGUgZmlsZXMgaW50byBhIHNpbmdsZSBBU1QgYnlcclxuICAvLyBwYXNzaW5nIHRoZSB0cmVlIHByb2R1Y2VkIGJ5IHBhcnNpbmcgdGhlIGZpcnN0IGZpbGUgYXNcclxuICAvLyBgcHJvZ3JhbWAgb3B0aW9uIGluIHN1YnNlcXVlbnQgcGFyc2VzLiBUaGlzIHdpbGwgYWRkIHRoZVxyXG4gIC8vIHRvcGxldmVsIGZvcm1zIG9mIHRoZSBwYXJzZWQgZmlsZSB0byB0aGUgYFByb2dyYW1gICh0b3ApIG5vZGVcclxuICAvLyBvZiBhbiBleGlzdGluZyBwYXJzZSB0cmVlLlxyXG4gIHByb2dyYW06IG51bGwsXHJcbiAgLy8gV2hlbiBgbG9jYXRpb25zYCBpcyBvbiwgeW91IGNhbiBwYXNzIHRoaXMgdG8gcmVjb3JkIHRoZSBzb3VyY2VcclxuICAvLyBmaWxlIGluIGV2ZXJ5IG5vZGUncyBgbG9jYCBvYmplY3QuXHJcbiAgc291cmNlRmlsZTogbnVsbCxcclxuICAvLyBUaGlzIHZhbHVlLCBpZiBnaXZlbiwgaXMgc3RvcmVkIGluIGV2ZXJ5IG5vZGUsIHdoZXRoZXJcclxuICAvLyBgbG9jYXRpb25zYCBpcyBvbiBvciBvZmYuXHJcbiAgZGlyZWN0U291cmNlRmlsZTogbnVsbCxcclxuICAvLyBXaGVuIGVuYWJsZWQsIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbnMgYXJlIHJlcHJlc2VudGVkIGJ5XHJcbiAgLy8gKG5vbi1zdGFuZGFyZCkgUGFyZW50aGVzaXplZEV4cHJlc3Npb24gbm9kZXNcclxuICBwcmVzZXJ2ZVBhcmVuczogZmFsc2UsXHJcbiAgcGx1Z2luczoge31cclxufVxyXG5cclxuLy8gSW50ZXJwcmV0IGFuZCBkZWZhdWx0IGFuIG9wdGlvbnMgb2JqZWN0XHJcblxyXG5mdW5jdGlvbiBnZXRPcHRpb25zKG9wdHMpIHtcclxuICB2YXIgb3B0aW9ucyA9IHt9XHJcbiAgZm9yICh2YXIgb3B0IGluIGRlZmF1bHRPcHRpb25zKVxyXG4gICAgb3B0aW9uc1tvcHRdID0gb3B0cyAmJiBoYXMob3B0cywgb3B0KSA/IG9wdHNbb3B0XSA6IGRlZmF1bHRPcHRpb25zW29wdF1cclxuICBpZiAob3B0aW9ucy5hbGxvd1Jlc2VydmVkID09IG51bGwpXHJcbiAgICBvcHRpb25zLmFsbG93UmVzZXJ2ZWQgPSBvcHRpb25zLmVjbWFWZXJzaW9uIDwgNVxyXG5cclxuICBpZiAoaXNBcnJheShvcHRpb25zLm9uVG9rZW4pKSB7XHJcbiAgICB2YXIgdG9rZW5zID0gb3B0aW9ucy5vblRva2VuXHJcbiAgICBvcHRpb25zLm9uVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHsgcmV0dXJuIHRva2Vucy5wdXNoKHRva2VuKTsgfVxyXG4gIH1cclxuICBpZiAoaXNBcnJheShvcHRpb25zLm9uQ29tbWVudCkpXHJcbiAgICBvcHRpb25zLm9uQ29tbWVudCA9IHB1c2hDb21tZW50KG9wdGlvbnMsIG9wdGlvbnMub25Db21tZW50KVxyXG5cclxuICByZXR1cm4gb3B0aW9uc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwdXNoQ29tbWVudChvcHRpb25zLCBhcnJheSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoYmxvY2ssIHRleHQsIHN0YXJ0LCBlbmQsIHN0YXJ0TG9jLCBlbmRMb2MpIHtcclxuICAgIHZhciBjb21tZW50ID0ge1xyXG4gICAgICB0eXBlOiBibG9jayA/ICdCbG9jaycgOiAnTGluZScsXHJcbiAgICAgIHZhbHVlOiB0ZXh0LFxyXG4gICAgICBzdGFydDogc3RhcnQsXHJcbiAgICAgIGVuZDogZW5kXHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpXHJcbiAgICAgIGNvbW1lbnQubG9jID0gbmV3IFNvdXJjZUxvY2F0aW9uKHRoaXMsIHN0YXJ0TG9jLCBlbmRMb2MpXHJcbiAgICBpZiAob3B0aW9ucy5yYW5nZXMpXHJcbiAgICAgIGNvbW1lbnQucmFuZ2UgPSBbc3RhcnQsIGVuZF1cclxuICAgIGFycmF5LnB1c2goY29tbWVudClcclxuICB9XHJcbn1cclxuXHJcbi8vIFJlZ2lzdGVyZWQgcGx1Z2luc1xyXG52YXIgcGx1Z2lucyA9IHt9XHJcblxyXG5mdW5jdGlvbiBrZXl3b3JkUmVnZXhwKHdvcmRzKSB7XHJcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKFwiICsgd29yZHMucmVwbGFjZSgvIC9nLCBcInxcIikgKyBcIikkXCIpXHJcbn1cclxuXHJcbnZhciBQYXJzZXIgPSBmdW5jdGlvbiBQYXJzZXIob3B0aW9ucywgaW5wdXQsIHN0YXJ0UG9zKSB7XHJcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucylcclxuICB0aGlzLnNvdXJjZUZpbGUgPSBvcHRpb25zLnNvdXJjZUZpbGVcclxuICB0aGlzLmtleXdvcmRzID0ga2V5d29yZFJlZ2V4cChrZXl3b3Jkc1tvcHRpb25zLmVjbWFWZXJzaW9uID49IDYgPyA2IDogNV0pXHJcbiAgdmFyIHJlc2VydmVkID0gb3B0aW9ucy5hbGxvd1Jlc2VydmVkID8gXCJcIiA6XHJcbiAgICAgIHJlc2VydmVkV29yZHNbb3B0aW9ucy5lY21hVmVyc2lvbl0gKyAob3B0aW9ucy5zb3VyY2VUeXBlID09IFwibW9kdWxlXCIgPyBcIiBhd2FpdFwiIDogXCJcIilcclxuICB0aGlzLnJlc2VydmVkV29yZHMgPSBrZXl3b3JkUmVnZXhwKHJlc2VydmVkKVxyXG4gIHZhciByZXNlcnZlZFN0cmljdCA9IChyZXNlcnZlZCA/IHJlc2VydmVkICsgXCIgXCIgOiBcIlwiKSArIHJlc2VydmVkV29yZHMuc3RyaWN0XHJcbiAgdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0ID0ga2V5d29yZFJlZ2V4cChyZXNlcnZlZFN0cmljdClcclxuICB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3RCaW5kID0ga2V5d29yZFJlZ2V4cChyZXNlcnZlZFN0cmljdCArIFwiIFwiICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKVxyXG4gIHRoaXMuaW5wdXQgPSBTdHJpbmcoaW5wdXQpXHJcblxyXG4gIC8vIFVzZWQgdG8gc2lnbmFsIHRvIGNhbGxlcnMgb2YgYHJlYWRXb3JkMWAgd2hldGhlciB0aGUgd29yZFxyXG4gIC8vIGNvbnRhaW5lZCBhbnkgZXNjYXBlIHNlcXVlbmNlcy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB3b3JkcyB3aXRoXHJcbiAgLy8gZXNjYXBlIHNlcXVlbmNlcyBtdXN0IG5vdCBiZSBpbnRlcnByZXRlZCBhcyBrZXl3b3Jkcy5cclxuICB0aGlzLmNvbnRhaW5zRXNjID0gZmFsc2VcclxuXHJcbiAgLy8gTG9hZCBwbHVnaW5zXHJcbiAgdGhpcy5sb2FkUGx1Z2lucyhvcHRpb25zLnBsdWdpbnMpXHJcblxyXG4gIC8vIFNldCB1cCB0b2tlbiBzdGF0ZVxyXG5cclxuICAvLyBUaGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgdG9rZW5pemVyIGluIHRoZSBpbnB1dC5cclxuICBpZiAoc3RhcnRQb3MpIHtcclxuICAgIHRoaXMucG9zID0gc3RhcnRQb3NcclxuICAgIHRoaXMubGluZVN0YXJ0ID0gTWF0aC5tYXgoMCwgdGhpcy5pbnB1dC5sYXN0SW5kZXhPZihcIlxcblwiLCBzdGFydFBvcykpXHJcbiAgICB0aGlzLmN1ckxpbmUgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMubGluZVN0YXJ0KS5zcGxpdChsaW5lQnJlYWspLmxlbmd0aFxyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnBvcyA9IHRoaXMubGluZVN0YXJ0ID0gMFxyXG4gICAgdGhpcy5jdXJMaW5lID0gMVxyXG4gIH1cclxuXHJcbiAgLy8gUHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0b2tlbjpcclxuICAvLyBJdHMgdHlwZVxyXG4gIHRoaXMudHlwZSA9IHR0LmVvZlxyXG4gIC8vIEZvciB0b2tlbnMgdGhhdCBpbmNsdWRlIG1vcmUgaW5mb3JtYXRpb24gdGhhbiB0aGVpciB0eXBlLCB0aGUgdmFsdWVcclxuICB0aGlzLnZhbHVlID0gbnVsbFxyXG4gIC8vIEl0cyBzdGFydCBhbmQgZW5kIG9mZnNldFxyXG4gIHRoaXMuc3RhcnQgPSB0aGlzLmVuZCA9IHRoaXMucG9zXHJcbiAgLy8gQW5kLCBpZiBsb2NhdGlvbnMgYXJlIHVzZWQsIHRoZSB7bGluZSwgY29sdW1ufSBvYmplY3RcclxuICAvLyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIG9mZnNldHNcclxuICB0aGlzLnN0YXJ0TG9jID0gdGhpcy5lbmRMb2MgPSB0aGlzLmN1clBvc2l0aW9uKClcclxuXHJcbiAgLy8gUG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBwcmV2aW91cyB0b2tlblxyXG4gIHRoaXMubGFzdFRva0VuZExvYyA9IHRoaXMubGFzdFRva1N0YXJ0TG9jID0gbnVsbFxyXG4gIHRoaXMubGFzdFRva1N0YXJ0ID0gdGhpcy5sYXN0VG9rRW5kID0gdGhpcy5wb3NcclxuXHJcbiAgLy8gVGhlIGNvbnRleHQgc3RhY2sgaXMgdXNlZCB0byBzdXBlcmZpY2lhbGx5IHRyYWNrIHN5bnRhY3RpY1xyXG4gIC8vIGNvbnRleHQgdG8gcHJlZGljdCB3aGV0aGVyIGEgcmVndWxhciBleHByZXNzaW9uIGlzIGFsbG93ZWQgaW4gYVxyXG4gIC8vIGdpdmVuIHBvc2l0aW9uLlxyXG4gIHRoaXMuY29udGV4dCA9IHRoaXMuaW5pdGlhbENvbnRleHQoKVxyXG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlXHJcblxyXG4gIC8vIEZpZ3VyZSBvdXQgaWYgaXQncyBhIG1vZHVsZSBjb2RlLlxyXG4gIHRoaXMuc3RyaWN0ID0gdGhpcy5pbk1vZHVsZSA9IG9wdGlvbnMuc291cmNlVHlwZSA9PT0gXCJtb2R1bGVcIlxyXG5cclxuICAvLyBVc2VkIHRvIHNpZ25pZnkgdGhlIHN0YXJ0IG9mIGEgcG90ZW50aWFsIGFycm93IGZ1bmN0aW9uXHJcbiAgdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID0gLTFcclxuXHJcbiAgLy8gRmxhZ3MgdG8gdHJhY2sgd2hldGhlciB3ZSBhcmUgaW4gYSBmdW5jdGlvbiwgYSBnZW5lcmF0b3IuXHJcbiAgdGhpcy5pbkZ1bmN0aW9uID0gdGhpcy5pbkdlbmVyYXRvciA9IGZhbHNlXHJcbiAgLy8gTGFiZWxzIGluIHNjb3BlLlxyXG4gIHRoaXMubGFiZWxzID0gW11cclxuXHJcbiAgLy8gSWYgZW5hYmxlZCwgc2tpcCBsZWFkaW5nIGhhc2hiYW5nIGxpbmUuXHJcbiAgaWYgKHRoaXMucG9zID09PSAwICYmIG9wdGlvbnMuYWxsb3dIYXNoQmFuZyAmJiB0aGlzLmlucHV0LnNsaWNlKDAsIDIpID09PSAnIyEnKVxyXG4gICAgdGhpcy5za2lwTGluZUNvbW1lbnQoMilcclxufTtcclxuXHJcbi8vIERFUFJFQ0FURUQgS2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdW50aWwgMy4wIGluIGNhc2UgYSBwbHVnaW4gdXNlcyB0aGVtXHJcblBhcnNlci5wcm90b3R5cGUuaXNLZXl3b3JkID0gZnVuY3Rpb24gaXNLZXl3b3JkICh3b3JkKSB7IHJldHVybiB0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkgfTtcclxuUGFyc2VyLnByb3RvdHlwZS5pc1Jlc2VydmVkV29yZCA9IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRXb3JkICh3b3JkKSB7IHJldHVybiB0aGlzLnJlc2VydmVkV29yZHMudGVzdCh3b3JkKSB9O1xyXG5cclxuUGFyc2VyLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQgKG5hbWUsIGYpIHtcclxuICB0aGlzW25hbWVdID0gZih0aGlzW25hbWVdKVxyXG59O1xyXG5cclxuUGFyc2VyLnByb3RvdHlwZS5sb2FkUGx1Z2lucyA9IGZ1bmN0aW9uIGxvYWRQbHVnaW5zIChwbHVnaW5Db25maWdzKSB7XHJcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW5Db25maWdzKSB7XHJcbiAgICB2YXIgcGx1Z2luID0gcGx1Z2luc1tuYW1lXVxyXG4gICAgaWYgKCFwbHVnaW4pIHRocm93IG5ldyBFcnJvcihcIlBsdWdpbiAnXCIgKyBuYW1lICsgXCInIG5vdCBmb3VuZFwiKVxyXG4gICAgcGx1Z2luKHRoaXMkMSwgcGx1Z2luQ29uZmlnc1tuYW1lXSlcclxuICB9XHJcbn07XHJcblxyXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKCkge1xyXG4gIHZhciBub2RlID0gdGhpcy5vcHRpb25zLnByb2dyYW0gfHwgdGhpcy5zdGFydE5vZGUoKVxyXG4gIHRoaXMubmV4dFRva2VuKClcclxuICByZXR1cm4gdGhpcy5wYXJzZVRvcExldmVsKG5vZGUpXHJcbn07XHJcblxyXG52YXIgcHAgPSBQYXJzZXIucHJvdG90eXBlXHJcblxyXG4vLyAjIyBQYXJzZXIgdXRpbGl0aWVzXHJcblxyXG4vLyBUZXN0IHdoZXRoZXIgYSBzdGF0ZW1lbnQgbm9kZSBpcyB0aGUgc3RyaW5nIGxpdGVyYWwgYFwidXNlIHN0cmljdFwiYC5cclxuXHJcbnBwLmlzVXNlU3RyaWN0ID0gZnVuY3Rpb24oc3RtdCkge1xyXG4gIHJldHVybiB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNSAmJiBzdG10LnR5cGUgPT09IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiICYmXHJcbiAgICBzdG10LmV4cHJlc3Npb24udHlwZSA9PT0gXCJMaXRlcmFsXCIgJiZcclxuICAgIHN0bXQuZXhwcmVzc2lvbi5yYXcuc2xpY2UoMSwgLTEpID09PSBcInVzZSBzdHJpY3RcIlxyXG59XHJcblxyXG4vLyBQcmVkaWNhdGUgdGhhdCB0ZXN0cyB3aGV0aGVyIHRoZSBuZXh0IHRva2VuIGlzIG9mIHRoZSBnaXZlblxyXG4vLyB0eXBlLCBhbmQgaWYgeWVzLCBjb25zdW1lcyBpdCBhcyBhIHNpZGUgZWZmZWN0LlxyXG5cclxucHAuZWF0ID0gZnVuY3Rpb24odHlwZSkge1xyXG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGUpIHtcclxuICAgIHRoaXMubmV4dCgpXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbi8vIFRlc3RzIHdoZXRoZXIgcGFyc2VkIHRva2VuIGlzIGEgY29udGV4dHVhbCBrZXl3b3JkLlxyXG5cclxucHAuaXNDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xyXG4gIHJldHVybiB0aGlzLnR5cGUgPT09IHR0Lm5hbWUgJiYgdGhpcy52YWx1ZSA9PT0gbmFtZVxyXG59XHJcblxyXG4vLyBDb25zdW1lcyBjb250ZXh0dWFsIGtleXdvcmQgaWYgcG9zc2libGUuXHJcblxyXG5wcC5lYXRDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xyXG4gIHJldHVybiB0aGlzLnZhbHVlID09PSBuYW1lICYmIHRoaXMuZWF0KHR0Lm5hbWUpXHJcbn1cclxuXHJcbi8vIEFzc2VydHMgdGhhdCBmb2xsb3dpbmcgdG9rZW4gaXMgZ2l2ZW4gY29udGV4dHVhbCBrZXl3b3JkLlxyXG5cclxucHAuZXhwZWN0Q29udGV4dHVhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICBpZiAoIXRoaXMuZWF0Q29udGV4dHVhbChuYW1lKSkgdGhpcy51bmV4cGVjdGVkKClcclxufVxyXG5cclxuLy8gVGVzdCB3aGV0aGVyIGEgc2VtaWNvbG9uIGNhbiBiZSBpbnNlcnRlZCBhdCB0aGUgY3VycmVudCBwb3NpdGlvbi5cclxuXHJcbnBwLmNhbkluc2VydFNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnR5cGUgPT09IHR0LmVvZiB8fFxyXG4gICAgdGhpcy50eXBlID09PSB0dC5icmFjZVIgfHxcclxuICAgIGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSlcclxufVxyXG5cclxucHAuaW5zZXJ0U2VtaWNvbG9uID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKHRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcclxuICAgIGlmICh0aGlzLm9wdGlvbnMub25JbnNlcnRlZFNlbWljb2xvbilcclxuICAgICAgdGhpcy5vcHRpb25zLm9uSW5zZXJ0ZWRTZW1pY29sb24odGhpcy5sYXN0VG9rRW5kLCB0aGlzLmxhc3RUb2tFbmRMb2MpXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxufVxyXG5cclxuLy8gQ29uc3VtZSBhIHNlbWljb2xvbiwgb3IsIGZhaWxpbmcgdGhhdCwgc2VlIGlmIHdlIGFyZSBhbGxvd2VkIHRvXHJcbi8vIHByZXRlbmQgdGhhdCB0aGVyZSBpcyBhIHNlbWljb2xvbiBhdCB0aGlzIHBvc2l0aW9uLlxyXG5cclxucHAuc2VtaWNvbG9uID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCF0aGlzLmVhdCh0dC5zZW1pKSAmJiAhdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgdGhpcy51bmV4cGVjdGVkKClcclxufVxyXG5cclxucHAuYWZ0ZXJUcmFpbGluZ0NvbW1hID0gZnVuY3Rpb24odG9rVHlwZSkge1xyXG4gIGlmICh0aGlzLnR5cGUgPT0gdG9rVHlwZSkge1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5vblRyYWlsaW5nQ29tbWEpXHJcbiAgICAgIHRoaXMub3B0aW9ucy5vblRyYWlsaW5nQ29tbWEodGhpcy5sYXN0VG9rU3RhcnQsIHRoaXMubGFzdFRva1N0YXJ0TG9jKVxyXG4gICAgdGhpcy5uZXh0KClcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBlY3QgYSB0b2tlbiBvZiBhIGdpdmVuIHR5cGUuIElmIGZvdW5kLCBjb25zdW1lIGl0LCBvdGhlcndpc2UsXHJcbi8vIHJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IuXHJcblxyXG5wcC5leHBlY3QgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgdGhpcy5lYXQodHlwZSkgfHwgdGhpcy51bmV4cGVjdGVkKClcclxufVxyXG5cclxuLy8gUmFpc2UgYW4gdW5leHBlY3RlZCB0b2tlbiBlcnJvci5cclxuXHJcbnBwLnVuZXhwZWN0ZWQgPSBmdW5jdGlvbihwb3MpIHtcclxuICB0aGlzLnJhaXNlKHBvcyAhPSBudWxsID8gcG9zIDogdGhpcy5zdGFydCwgXCJVbmV4cGVjdGVkIHRva2VuXCIpXHJcbn1cclxuXHJcbnZhciBEZXN0cnVjdHVyaW5nRXJyb3JzID0gZnVuY3Rpb24gRGVzdHJ1Y3R1cmluZ0Vycm9ycygpIHtcclxuICB0aGlzLnNob3J0aGFuZEFzc2lnbiA9IDBcclxuICB0aGlzLnRyYWlsaW5nQ29tbWEgPSAwXHJcbn07XHJcblxyXG5wcC5jaGVja1BhdHRlcm5FcnJvcnMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBhbmRUaHJvdykge1xyXG4gIHZhciB0cmFpbGluZyA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hXHJcbiAgaWYgKCFhbmRUaHJvdykgcmV0dXJuICEhdHJhaWxpbmdcclxuICBpZiAodHJhaWxpbmcpIHRoaXMucmFpc2UodHJhaWxpbmcsIFwiQ29tbWEgaXMgbm90IHBlcm1pdHRlZCBhZnRlciB0aGUgcmVzdCBlbGVtZW50XCIpXHJcbn1cclxuXHJcbnBwLmNoZWNrRXhwcmVzc2lvbkVycm9ycyA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGFuZFRocm93KSB7XHJcbiAgdmFyIHBvcyA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ25cclxuICBpZiAoIWFuZFRocm93KSByZXR1cm4gISFwb3NcclxuICBpZiAocG9zKSB0aGlzLnJhaXNlKHBvcywgXCJTaG9ydGhhbmQgcHJvcGVydHkgYXNzaWdubWVudHMgYXJlIHZhbGlkIG9ubHkgaW4gZGVzdHJ1Y3R1cmluZyBwYXR0ZXJuc1wiKVxyXG59XHJcblxyXG52YXIgcHAkMSA9IFBhcnNlci5wcm90b3R5cGVcclxuXHJcbi8vICMjIyBTdGF0ZW1lbnQgcGFyc2luZ1xyXG5cclxuLy8gUGFyc2UgYSBwcm9ncmFtLiBJbml0aWFsaXplcyB0aGUgcGFyc2VyLCByZWFkcyBhbnkgbnVtYmVyIG9mXHJcbi8vIHN0YXRlbWVudHMsIGFuZCB3cmFwcyB0aGVtIGluIGEgUHJvZ3JhbSBub2RlLiAgT3B0aW9uYWxseSB0YWtlcyBhXHJcbi8vIGBwcm9ncmFtYCBhcmd1bWVudC4gIElmIHByZXNlbnQsIHRoZSBzdGF0ZW1lbnRzIHdpbGwgYmUgYXBwZW5kZWRcclxuLy8gdG8gaXRzIGJvZHkgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBub2RlLlxyXG5cclxucHAkMS5wYXJzZVRvcExldmVsID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgZmlyc3QgPSB0cnVlXHJcbiAgaWYgKCFub2RlLmJvZHkpIG5vZGUuYm9keSA9IFtdXHJcbiAgd2hpbGUgKHRoaXMudHlwZSAhPT0gdHQuZW9mKSB7XHJcbiAgICB2YXIgc3RtdCA9IHRoaXMkMS5wYXJzZVN0YXRlbWVudCh0cnVlLCB0cnVlKVxyXG4gICAgbm9kZS5ib2R5LnB1c2goc3RtdClcclxuICAgIGlmIChmaXJzdCkge1xyXG4gICAgICBpZiAodGhpcyQxLmlzVXNlU3RyaWN0KHN0bXQpKSB0aGlzJDEuc2V0U3RyaWN0KHRydWUpXHJcbiAgICAgIGZpcnN0ID0gZmFsc2VcclxuICAgIH1cclxuICB9XHJcbiAgdGhpcy5uZXh0KClcclxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcclxuICAgIG5vZGUuc291cmNlVHlwZSA9IHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlXHJcbiAgfVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJQcm9ncmFtXCIpXHJcbn1cclxuXHJcbnZhciBsb29wTGFiZWwgPSB7a2luZDogXCJsb29wXCJ9O1xyXG52YXIgc3dpdGNoTGFiZWwgPSB7a2luZDogXCJzd2l0Y2hcIn07XHJcbnBwJDEuaXNMZXQgPSBmdW5jdGlvbigpIHtcclxuICBpZiAodGhpcy50eXBlICE9PSB0dC5uYW1lIHx8IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYgfHwgdGhpcy52YWx1ZSAhPSBcImxldFwiKSByZXR1cm4gZmFsc2VcclxuICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSB0aGlzLnBvc1xyXG4gIHZhciBza2lwID0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KVxyXG4gIHZhciBuZXh0ID0gdGhpcy5wb3MgKyBza2lwWzBdLmxlbmd0aCwgbmV4dENoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KG5leHQpXHJcbiAgaWYgKG5leHRDaCA9PT0gOTEgfHwgbmV4dENoID09IDEyMykgcmV0dXJuIHRydWUgLy8gJ3snIGFuZCAnWydcclxuICBpZiAoaXNJZGVudGlmaWVyU3RhcnQobmV4dENoLCB0cnVlKSkge1xyXG4gICAgZm9yICh2YXIgcG9zID0gbmV4dCArIDE7IGlzSWRlbnRpZmllckNoYXIodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHBvcyksIHRydWUpOyArK3Bvcykge31cclxuICAgIHZhciBpZGVudCA9IHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgcG9zKVxyXG4gICAgaWYgKCF0aGlzLmlzS2V5d29yZChpZGVudCkpIHJldHVybiB0cnVlXHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZVxyXG59XHJcblxyXG4vLyBQYXJzZSBhIHNpbmdsZSBzdGF0ZW1lbnQuXHJcbi8vXHJcbi8vIElmIGV4cGVjdGluZyBhIHN0YXRlbWVudCBhbmQgZmluZGluZyBhIHNsYXNoIG9wZXJhdG9yLCBwYXJzZSBhXHJcbi8vIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsLiBUaGlzIGlzIHRvIGhhbmRsZSBjYXNlcyBsaWtlXHJcbi8vIGBpZiAoZm9vKSAvYmxhaC8uZXhlYyhmb28pYCwgd2hlcmUgbG9va2luZyBhdCB0aGUgcHJldmlvdXMgdG9rZW5cclxuLy8gZG9lcyBub3QgaGVscC5cclxuXHJcbnBwJDEucGFyc2VTdGF0ZW1lbnQgPSBmdW5jdGlvbihkZWNsYXJhdGlvbiwgdG9wTGV2ZWwpIHtcclxuICB2YXIgc3RhcnR0eXBlID0gdGhpcy50eXBlLCBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwga2luZFxyXG5cclxuICBpZiAodGhpcy5pc0xldCgpKSB7XHJcbiAgICBzdGFydHR5cGUgPSB0dC5fdmFyXHJcbiAgICBraW5kID0gXCJsZXRcIlxyXG4gIH1cclxuXHJcbiAgLy8gTW9zdCB0eXBlcyBvZiBzdGF0ZW1lbnRzIGFyZSByZWNvZ25pemVkIGJ5IHRoZSBrZXl3b3JkIHRoZXlcclxuICAvLyBzdGFydCB3aXRoLiBNYW55IGFyZSB0cml2aWFsIHRvIHBhcnNlLCBzb21lIHJlcXVpcmUgYSBiaXQgb2ZcclxuICAvLyBjb21wbGV4aXR5LlxyXG5cclxuICBzd2l0Y2ggKHN0YXJ0dHlwZSkge1xyXG4gIGNhc2UgdHQuX2JyZWFrOiBjYXNlIHR0Ll9jb250aW51ZTogcmV0dXJuIHRoaXMucGFyc2VCcmVha0NvbnRpbnVlU3RhdGVtZW50KG5vZGUsIHN0YXJ0dHlwZS5rZXl3b3JkKVxyXG4gIGNhc2UgdHQuX2RlYnVnZ2VyOiByZXR1cm4gdGhpcy5wYXJzZURlYnVnZ2VyU3RhdGVtZW50KG5vZGUpXHJcbiAgY2FzZSB0dC5fZG86IHJldHVybiB0aGlzLnBhcnNlRG9TdGF0ZW1lbnQobm9kZSlcclxuICBjYXNlIHR0Ll9mb3I6IHJldHVybiB0aGlzLnBhcnNlRm9yU3RhdGVtZW50KG5vZGUpXHJcbiAgY2FzZSB0dC5fZnVuY3Rpb246XHJcbiAgICBpZiAoIWRlY2xhcmF0aW9uICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB0aGlzLnVuZXhwZWN0ZWQoKVxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvblN0YXRlbWVudChub2RlKVxyXG4gIGNhc2UgdHQuX2NsYXNzOlxyXG4gICAgaWYgKCFkZWNsYXJhdGlvbikgdGhpcy51bmV4cGVjdGVkKClcclxuICAgIHJldHVybiB0aGlzLnBhcnNlQ2xhc3Mobm9kZSwgdHJ1ZSlcclxuICBjYXNlIHR0Ll9pZjogcmV0dXJuIHRoaXMucGFyc2VJZlN0YXRlbWVudChub2RlKVxyXG4gIGNhc2UgdHQuX3JldHVybjogcmV0dXJuIHRoaXMucGFyc2VSZXR1cm5TdGF0ZW1lbnQobm9kZSlcclxuICBjYXNlIHR0Ll9zd2l0Y2g6IHJldHVybiB0aGlzLnBhcnNlU3dpdGNoU3RhdGVtZW50KG5vZGUpXHJcbiAgY2FzZSB0dC5fdGhyb3c6IHJldHVybiB0aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZSlcclxuICBjYXNlIHR0Ll90cnk6IHJldHVybiB0aGlzLnBhcnNlVHJ5U3RhdGVtZW50KG5vZGUpXHJcbiAgY2FzZSB0dC5fY29uc3Q6IGNhc2UgdHQuX3ZhcjpcclxuICAgIGtpbmQgPSBraW5kIHx8IHRoaXMudmFsdWVcclxuICAgIGlmICghZGVjbGFyYXRpb24gJiYga2luZCAhPSBcInZhclwiKSB0aGlzLnVuZXhwZWN0ZWQoKVxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VWYXJTdGF0ZW1lbnQobm9kZSwga2luZClcclxuICBjYXNlIHR0Ll93aGlsZTogcmV0dXJuIHRoaXMucGFyc2VXaGlsZVN0YXRlbWVudChub2RlKVxyXG4gIGNhc2UgdHQuX3dpdGg6IHJldHVybiB0aGlzLnBhcnNlV2l0aFN0YXRlbWVudChub2RlKVxyXG4gIGNhc2UgdHQuYnJhY2VMOiByZXR1cm4gdGhpcy5wYXJzZUJsb2NrKClcclxuICBjYXNlIHR0LnNlbWk6IHJldHVybiB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQobm9kZSlcclxuICBjYXNlIHR0Ll9leHBvcnQ6XHJcbiAgY2FzZSB0dC5faW1wb3J0OlxyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlKSB7XHJcbiAgICAgIGlmICghdG9wTGV2ZWwpXHJcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIidpbXBvcnQnIGFuZCAnZXhwb3J0JyBtYXkgb25seSBhcHBlYXIgYXQgdGhlIHRvcCBsZXZlbFwiKVxyXG4gICAgICBpZiAoIXRoaXMuaW5Nb2R1bGUpXHJcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIidpbXBvcnQnIGFuZCAnZXhwb3J0JyBtYXkgYXBwZWFyIG9ubHkgd2l0aCAnc291cmNlVHlwZTogbW9kdWxlJ1wiKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXJ0dHlwZSA9PT0gdHQuX2ltcG9ydCA/IHRoaXMucGFyc2VJbXBvcnQobm9kZSkgOiB0aGlzLnBhcnNlRXhwb3J0KG5vZGUpXHJcblxyXG4gICAgLy8gSWYgdGhlIHN0YXRlbWVudCBkb2VzIG5vdCBzdGFydCB3aXRoIGEgc3RhdGVtZW50IGtleXdvcmQgb3IgYVxyXG4gICAgLy8gYnJhY2UsIGl0J3MgYW4gRXhwcmVzc2lvblN0YXRlbWVudCBvciBMYWJlbGVkU3RhdGVtZW50LiBXZVxyXG4gICAgLy8gc2ltcGx5IHN0YXJ0IHBhcnNpbmcgYW4gZXhwcmVzc2lvbiwgYW5kIGFmdGVyd2FyZHMsIGlmIHRoZVxyXG4gICAgLy8gbmV4dCB0b2tlbiBpcyBhIGNvbG9uIGFuZCB0aGUgZXhwcmVzc2lvbiB3YXMgYSBzaW1wbGVcclxuICAgIC8vIElkZW50aWZpZXIgbm9kZSwgd2Ugc3dpdGNoIHRvIGludGVycHJldGluZyBpdCBhcyBhIGxhYmVsLlxyXG4gIGRlZmF1bHQ6XHJcbiAgICB2YXIgbWF5YmVOYW1lID0gdGhpcy52YWx1ZSwgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKClcclxuICAgIGlmIChzdGFydHR5cGUgPT09IHR0Lm5hbWUgJiYgZXhwci50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiB0aGlzLmVhdCh0dC5jb2xvbikpXHJcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlTGFiZWxlZFN0YXRlbWVudChub2RlLCBtYXliZU5hbWUsIGV4cHIpXHJcbiAgICBlbHNlIHJldHVybiB0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudChub2RlLCBleHByKVxyXG4gIH1cclxufVxyXG5cclxucHAkMS5wYXJzZUJyZWFrQ29udGludWVTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBrZXl3b3JkKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBpc0JyZWFrID0ga2V5d29yZCA9PSBcImJyZWFrXCJcclxuICB0aGlzLm5leHQoKVxyXG4gIGlmICh0aGlzLmVhdCh0dC5zZW1pKSB8fCB0aGlzLmluc2VydFNlbWljb2xvbigpKSBub2RlLmxhYmVsID0gbnVsbFxyXG4gIGVsc2UgaWYgKHRoaXMudHlwZSAhPT0gdHQubmFtZSkgdGhpcy51bmV4cGVjdGVkKClcclxuICBlbHNlIHtcclxuICAgIG5vZGUubGFiZWwgPSB0aGlzLnBhcnNlSWRlbnQoKVxyXG4gICAgdGhpcy5zZW1pY29sb24oKVxyXG4gIH1cclxuXHJcbiAgLy8gVmVyaWZ5IHRoYXQgdGhlcmUgaXMgYW4gYWN0dWFsIGRlc3RpbmF0aW9uIHRvIGJyZWFrIG9yXHJcbiAgLy8gY29udGludWUgdG8uXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxhYmVscy5sZW5ndGg7ICsraSkge1xyXG4gICAgdmFyIGxhYiA9IHRoaXMkMS5sYWJlbHNbaV1cclxuICAgIGlmIChub2RlLmxhYmVsID09IG51bGwgfHwgbGFiLm5hbWUgPT09IG5vZGUubGFiZWwubmFtZSkge1xyXG4gICAgICBpZiAobGFiLmtpbmQgIT0gbnVsbCAmJiAoaXNCcmVhayB8fCBsYWIua2luZCA9PT0gXCJsb29wXCIpKSBicmVha1xyXG4gICAgICBpZiAobm9kZS5sYWJlbCAmJiBpc0JyZWFrKSBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoaSA9PT0gdGhpcy5sYWJlbHMubGVuZ3RoKSB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiVW5zeW50YWN0aWMgXCIgKyBrZXl3b3JkKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNCcmVhayA/IFwiQnJlYWtTdGF0ZW1lbnRcIiA6IFwiQ29udGludWVTdGF0ZW1lbnRcIilcclxufVxyXG5cclxucHAkMS5wYXJzZURlYnVnZ2VyU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIHRoaXMubmV4dCgpXHJcbiAgdGhpcy5zZW1pY29sb24oKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWJ1Z2dlclN0YXRlbWVudFwiKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlRG9TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdGhpcy5uZXh0KClcclxuICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbClcclxuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKVxyXG4gIHRoaXMubGFiZWxzLnBvcCgpXHJcbiAgdGhpcy5leHBlY3QodHQuX3doaWxlKVxyXG4gIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKVxyXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNilcclxuICAgIHRoaXMuZWF0KHR0LnNlbWkpXHJcbiAgZWxzZVxyXG4gICAgdGhpcy5zZW1pY29sb24oKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEb1doaWxlU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbi8vIERpc2FtYmlndWF0aW5nIGJldHdlZW4gYSBgZm9yYCBhbmQgYSBgZm9yYC9gaW5gIG9yIGBmb3JgL2BvZmBcclxuLy8gbG9vcCBpcyBub24tdHJpdmlhbC4gQmFzaWNhbGx5LCB3ZSBoYXZlIHRvIHBhcnNlIHRoZSBpbml0IGB2YXJgXHJcbi8vIHN0YXRlbWVudCBvciBleHByZXNzaW9uLCBkaXNhbGxvd2luZyB0aGUgYGluYCBvcGVyYXRvciAoc2VlXHJcbi8vIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGBwYXJzZUV4cHJlc3Npb25gKSwgYW5kIHRoZW4gY2hlY2tcclxuLy8gd2hldGhlciB0aGUgbmV4dCB0b2tlbiBpcyBgaW5gIG9yIGBvZmAuIFdoZW4gdGhlcmUgaXMgbm8gaW5pdFxyXG4vLyBwYXJ0IChzZW1pY29sb24gaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIG9wZW5pbmcgcGFyZW50aGVzaXMpLCBpdFxyXG4vLyBpcyBhIHJlZ3VsYXIgYGZvcmAgbG9vcC5cclxuXHJcbnBwJDEucGFyc2VGb3JTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdGhpcy5uZXh0KClcclxuICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbClcclxuICB0aGlzLmV4cGVjdCh0dC5wYXJlbkwpXHJcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHQuc2VtaSkgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgbnVsbClcclxuICB2YXIgaXNMZXQgPSB0aGlzLmlzTGV0KClcclxuICBpZiAodGhpcy50eXBlID09PSB0dC5fdmFyIHx8IHRoaXMudHlwZSA9PT0gdHQuX2NvbnN0IHx8IGlzTGV0KSB7XHJcbiAgICB2YXIgaW5pdCQxID0gdGhpcy5zdGFydE5vZGUoKSwga2luZCA9IGlzTGV0ID8gXCJsZXRcIiA6IHRoaXMudmFsdWVcclxuICAgIHRoaXMubmV4dCgpXHJcbiAgICB0aGlzLnBhcnNlVmFyKGluaXQkMSwgdHJ1ZSwga2luZClcclxuICAgIHRoaXMuZmluaXNoTm9kZShpbml0JDEsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKVxyXG4gICAgaWYgKCh0aGlzLnR5cGUgPT09IHR0Ll9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpICYmIGluaXQkMS5kZWNsYXJhdGlvbnMubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgIShraW5kICE9PSBcInZhclwiICYmIGluaXQkMS5kZWNsYXJhdGlvbnNbMF0uaW5pdCkpXHJcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdCQxKVxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdCQxKVxyXG4gIH1cclxuICB2YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzXHJcbiAgdmFyIGluaXQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbih0cnVlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gIGlmICh0aGlzLnR5cGUgPT09IHR0Ll9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpIHtcclxuICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpXHJcbiAgICB0aGlzLnRvQXNzaWduYWJsZShpbml0KVxyXG4gICAgdGhpcy5jaGVja0xWYWwoaW5pdClcclxuICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdClcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSlcclxuICB9XHJcbiAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdClcclxufVxyXG5cclxucHAkMS5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIHRoaXMubmV4dCgpXHJcbiAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihub2RlLCB0cnVlKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlSWZTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdGhpcy5uZXh0KClcclxuICBub2RlLnRlc3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKClcclxuICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKVxyXG4gIG5vZGUuYWx0ZXJuYXRlID0gdGhpcy5lYXQodHQuX2Vsc2UpID8gdGhpcy5wYXJzZVN0YXRlbWVudChmYWxzZSkgOiBudWxsXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklmU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbnBwJDEucGFyc2VSZXR1cm5TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgaWYgKCF0aGlzLmluRnVuY3Rpb24gJiYgIXRoaXMub3B0aW9ucy5hbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbilcclxuICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCIncmV0dXJuJyBvdXRzaWRlIG9mIGZ1bmN0aW9uXCIpXHJcbiAgdGhpcy5uZXh0KClcclxuXHJcbiAgLy8gSW4gYHJldHVybmAgKGFuZCBgYnJlYWtgL2Bjb250aW51ZWApLCB0aGUga2V5d29yZHMgd2l0aFxyXG4gIC8vIG9wdGlvbmFsIGFyZ3VtZW50cywgd2UgZWFnZXJseSBsb29rIGZvciBhIHNlbWljb2xvbiBvciB0aGVcclxuICAvLyBwb3NzaWJpbGl0eSB0byBpbnNlcnQgb25lLlxyXG5cclxuICBpZiAodGhpcy5lYXQodHQuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgbm9kZS5hcmd1bWVudCA9IG51bGxcclxuICBlbHNlIHsgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7IHRoaXMuc2VtaWNvbG9uKCkgfVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXR1cm5TdGF0ZW1lbnRcIilcclxufVxyXG5cclxucHAkMS5wYXJzZVN3aXRjaFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgdGhpcy5uZXh0KClcclxuICBub2RlLmRpc2NyaW1pbmFudCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKVxyXG4gIG5vZGUuY2FzZXMgPSBbXVxyXG4gIHRoaXMuZXhwZWN0KHR0LmJyYWNlTClcclxuICB0aGlzLmxhYmVscy5wdXNoKHN3aXRjaExhYmVsKVxyXG5cclxuICAvLyBTdGF0ZW1lbnRzIHVuZGVyIG11c3QgYmUgZ3JvdXBlZCAoYnkgbGFiZWwpIGluIFN3aXRjaENhc2VcclxuICAvLyBub2Rlcy4gYGN1cmAgaXMgdXNlZCB0byBrZWVwIHRoZSBub2RlIHRoYXQgd2UgYXJlIGN1cnJlbnRseVxyXG4gIC8vIGFkZGluZyBzdGF0ZW1lbnRzIHRvLlxyXG5cclxuICBmb3IgKHZhciBjdXIsIHNhd0RlZmF1bHQgPSBmYWxzZTsgdGhpcy50eXBlICE9IHR0LmJyYWNlUjspIHtcclxuICAgIGlmICh0aGlzJDEudHlwZSA9PT0gdHQuX2Nhc2UgfHwgdGhpcyQxLnR5cGUgPT09IHR0Ll9kZWZhdWx0KSB7XHJcbiAgICAgIHZhciBpc0Nhc2UgPSB0aGlzJDEudHlwZSA9PT0gdHQuX2Nhc2VcclxuICAgICAgaWYgKGN1cikgdGhpcyQxLmZpbmlzaE5vZGUoY3VyLCBcIlN3aXRjaENhc2VcIilcclxuICAgICAgbm9kZS5jYXNlcy5wdXNoKGN1ciA9IHRoaXMkMS5zdGFydE5vZGUoKSlcclxuICAgICAgY3VyLmNvbnNlcXVlbnQgPSBbXVxyXG4gICAgICB0aGlzJDEubmV4dCgpXHJcbiAgICAgIGlmIChpc0Nhc2UpIHtcclxuICAgICAgICBjdXIudGVzdCA9IHRoaXMkMS5wYXJzZUV4cHJlc3Npb24oKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChzYXdEZWZhdWx0KSB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZSh0aGlzJDEubGFzdFRva1N0YXJ0LCBcIk11bHRpcGxlIGRlZmF1bHQgY2xhdXNlc1wiKVxyXG4gICAgICAgIHNhd0RlZmF1bHQgPSB0cnVlXHJcbiAgICAgICAgY3VyLnRlc3QgPSBudWxsXHJcbiAgICAgIH1cclxuICAgICAgdGhpcyQxLmV4cGVjdCh0dC5jb2xvbilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghY3VyKSB0aGlzJDEudW5leHBlY3RlZCgpXHJcbiAgICAgIGN1ci5jb25zZXF1ZW50LnB1c2godGhpcyQxLnBhcnNlU3RhdGVtZW50KHRydWUpKVxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoY3VyKSB0aGlzLmZpbmlzaE5vZGUoY3VyLCBcIlN3aXRjaENhc2VcIilcclxuICB0aGlzLm5leHQoKSAvLyBDbG9zaW5nIGJyYWNlXHJcbiAgdGhpcy5sYWJlbHMucG9wKClcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3dpdGNoU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbnBwJDEucGFyc2VUaHJvd1N0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICB0aGlzLm5leHQoKVxyXG4gIGlmIChsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpKVxyXG4gICAgdGhpcy5yYWlzZSh0aGlzLmxhc3RUb2tFbmQsIFwiSWxsZWdhbCBuZXdsaW5lIGFmdGVyIHRocm93XCIpXHJcbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKClcclxuICB0aGlzLnNlbWljb2xvbigpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRocm93U3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbi8vIFJldXNlZCBlbXB0eSBhcnJheSBhZGRlZCBmb3Igbm9kZSBmaWVsZHMgdGhhdCBhcmUgYWx3YXlzIGVtcHR5LlxyXG5cclxudmFyIGVtcHR5ID0gW11cclxuXHJcbnBwJDEucGFyc2VUcnlTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdGhpcy5uZXh0KClcclxuICBub2RlLmJsb2NrID0gdGhpcy5wYXJzZUJsb2NrKClcclxuICBub2RlLmhhbmRsZXIgPSBudWxsXHJcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHQuX2NhdGNoKSB7XHJcbiAgICB2YXIgY2xhdXNlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gICAgdGhpcy5uZXh0KClcclxuICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuTClcclxuICAgIGNsYXVzZS5wYXJhbSA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpXHJcbiAgICB0aGlzLmNoZWNrTFZhbChjbGF1c2UucGFyYW0sIHRydWUpXHJcbiAgICB0aGlzLmV4cGVjdCh0dC5wYXJlblIpXHJcbiAgICBjbGF1c2UuYm9keSA9IHRoaXMucGFyc2VCbG9jaygpXHJcbiAgICBub2RlLmhhbmRsZXIgPSB0aGlzLmZpbmlzaE5vZGUoY2xhdXNlLCBcIkNhdGNoQ2xhdXNlXCIpXHJcbiAgfVxyXG4gIG5vZGUuZmluYWxpemVyID0gdGhpcy5lYXQodHQuX2ZpbmFsbHkpID8gdGhpcy5wYXJzZUJsb2NrKCkgOiBudWxsXHJcbiAgaWYgKCFub2RlLmhhbmRsZXIgJiYgIW5vZGUuZmluYWxpemVyKVxyXG4gICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBcIk1pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBjbGF1c2VcIilcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHJ5U3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbnBwJDEucGFyc2VWYXJTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBraW5kKSB7XHJcbiAgdGhpcy5uZXh0KClcclxuICB0aGlzLnBhcnNlVmFyKG5vZGUsIGZhbHNlLCBraW5kKVxyXG4gIHRoaXMuc2VtaWNvbG9uKClcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlV2hpbGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdGhpcy5uZXh0KClcclxuICBub2RlLnRlc3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKClcclxuICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbClcclxuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKVxyXG4gIHRoaXMubGFiZWxzLnBvcCgpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIldoaWxlU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbnBwJDEucGFyc2VXaXRoU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIGlmICh0aGlzLnN0cmljdCkgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIid3aXRoJyBpbiBzdHJpY3QgbW9kZVwiKVxyXG4gIHRoaXMubmV4dCgpXHJcbiAgbm9kZS5vYmplY3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKClcclxuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJXaXRoU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbnBwJDEucGFyc2VFbXB0eVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICB0aGlzLm5leHQoKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbXB0eVN0YXRlbWVudFwiKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlTGFiZWxlZFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG1heWJlTmFtZSwgZXhwcikge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGFiZWxzLmxlbmd0aDsgKytpKVxyXG4gICAgaWYgKHRoaXMkMS5sYWJlbHNbaV0ubmFtZSA9PT0gbWF5YmVOYW1lKSB0aGlzJDEucmFpc2UoZXhwci5zdGFydCwgXCJMYWJlbCAnXCIgKyBtYXliZU5hbWUgKyBcIicgaXMgYWxyZWFkeSBkZWNsYXJlZFwiKVxyXG4gIHZhciBraW5kID0gdGhpcy50eXBlLmlzTG9vcCA/IFwibG9vcFwiIDogdGhpcy50eXBlID09PSB0dC5fc3dpdGNoID8gXCJzd2l0Y2hcIiA6IG51bGxcclxuICBmb3IgKHZhciBpJDEgPSB0aGlzLmxhYmVscy5sZW5ndGggLSAxOyBpJDEgPj0gMDsgaSQxLS0pIHtcclxuICAgIHZhciBsYWJlbCA9IHRoaXMkMS5sYWJlbHNbaSQxXVxyXG4gICAgaWYgKGxhYmVsLnN0YXRlbWVudFN0YXJ0ID09IG5vZGUuc3RhcnQpIHtcclxuICAgICAgbGFiZWwuc3RhdGVtZW50U3RhcnQgPSB0aGlzJDEuc3RhcnRcclxuICAgICAgbGFiZWwua2luZCA9IGtpbmRcclxuICAgIH0gZWxzZSBicmVha1xyXG4gIH1cclxuICB0aGlzLmxhYmVscy5wdXNoKHtuYW1lOiBtYXliZU5hbWUsIGtpbmQ6IGtpbmQsIHN0YXRlbWVudFN0YXJ0OiB0aGlzLnN0YXJ0fSlcclxuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KHRydWUpXHJcbiAgdGhpcy5sYWJlbHMucG9wKClcclxuICBub2RlLmxhYmVsID0gZXhwclxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJMYWJlbGVkU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbnBwJDEucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgZXhwcikge1xyXG4gIG5vZGUuZXhwcmVzc2lvbiA9IGV4cHJcclxuICB0aGlzLnNlbWljb2xvbigpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIilcclxufVxyXG5cclxuLy8gUGFyc2UgYSBzZW1pY29sb24tZW5jbG9zZWQgYmxvY2sgb2Ygc3RhdGVtZW50cywgaGFuZGxpbmcgYFwidXNlXHJcbi8vIHN0cmljdFwiYCBkZWNsYXJhdGlvbnMgd2hlbiBgYWxsb3dTdHJpY3RgIGlzIHRydWUgKHVzZWQgZm9yXHJcbi8vIGZ1bmN0aW9uIGJvZGllcykuXHJcblxyXG5wcCQxLnBhcnNlQmxvY2sgPSBmdW5jdGlvbihhbGxvd1N0cmljdCkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIGZpcnN0ID0gdHJ1ZSwgb2xkU3RyaWN0XHJcbiAgbm9kZS5ib2R5ID0gW11cclxuICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpXHJcbiAgd2hpbGUgKCF0aGlzLmVhdCh0dC5icmFjZVIpKSB7XHJcbiAgICB2YXIgc3RtdCA9IHRoaXMkMS5wYXJzZVN0YXRlbWVudCh0cnVlKVxyXG4gICAgbm9kZS5ib2R5LnB1c2goc3RtdClcclxuICAgIGlmIChmaXJzdCAmJiBhbGxvd1N0cmljdCAmJiB0aGlzJDEuaXNVc2VTdHJpY3Qoc3RtdCkpIHtcclxuICAgICAgb2xkU3RyaWN0ID0gdGhpcyQxLnN0cmljdFxyXG4gICAgICB0aGlzJDEuc2V0U3RyaWN0KHRoaXMkMS5zdHJpY3QgPSB0cnVlKVxyXG4gICAgfVxyXG4gICAgZmlyc3QgPSBmYWxzZVxyXG4gIH1cclxuICBpZiAob2xkU3RyaWN0ID09PSBmYWxzZSkgdGhpcy5zZXRTdHJpY3QoZmFsc2UpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkJsb2NrU3RhdGVtZW50XCIpXHJcbn1cclxuXHJcbi8vIFBhcnNlIGEgcmVndWxhciBgZm9yYCBsb29wLiBUaGUgZGlzYW1iaWd1YXRpb24gY29kZSBpblxyXG4vLyBgcGFyc2VTdGF0ZW1lbnRgIHdpbGwgYWxyZWFkeSBoYXZlIHBhcnNlZCB0aGUgaW5pdCBzdGF0ZW1lbnQgb3JcclxuLy8gZXhwcmVzc2lvbi5cclxuXHJcbnBwJDEucGFyc2VGb3IgPSBmdW5jdGlvbihub2RlLCBpbml0KSB7XHJcbiAgbm9kZS5pbml0ID0gaW5pdFxyXG4gIHRoaXMuZXhwZWN0KHR0LnNlbWkpXHJcbiAgbm9kZS50ZXN0ID0gdGhpcy50eXBlID09PSB0dC5zZW1pID8gbnVsbCA6IHRoaXMucGFyc2VFeHByZXNzaW9uKClcclxuICB0aGlzLmV4cGVjdCh0dC5zZW1pKVxyXG4gIG5vZGUudXBkYXRlID0gdGhpcy50eXBlID09PSB0dC5wYXJlblIgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKVxyXG4gIHRoaXMuZXhwZWN0KHR0LnBhcmVuUilcclxuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKVxyXG4gIHRoaXMubGFiZWxzLnBvcCgpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkZvclN0YXRlbWVudFwiKVxyXG59XHJcblxyXG4vLyBQYXJzZSBhIGBmb3JgL2BpbmAgYW5kIGBmb3JgL2BvZmAgbG9vcCwgd2hpY2ggYXJlIGFsbW9zdFxyXG4vLyBzYW1lIGZyb20gcGFyc2VyJ3MgcGVyc3BlY3RpdmUuXHJcblxyXG5wcCQxLnBhcnNlRm9ySW4gPSBmdW5jdGlvbihub2RlLCBpbml0KSB7XHJcbiAgdmFyIHR5cGUgPSB0aGlzLnR5cGUgPT09IHR0Ll9pbiA/IFwiRm9ySW5TdGF0ZW1lbnRcIiA6IFwiRm9yT2ZTdGF0ZW1lbnRcIlxyXG4gIHRoaXMubmV4dCgpXHJcbiAgbm9kZS5sZWZ0ID0gaW5pdFxyXG4gIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpXHJcbiAgdGhpcy5leHBlY3QodHQucGFyZW5SKVxyXG4gIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpXHJcbiAgdGhpcy5sYWJlbHMucG9wKClcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIHR5cGUpXHJcbn1cclxuXHJcbi8vIFBhcnNlIGEgbGlzdCBvZiB2YXJpYWJsZSBkZWNsYXJhdGlvbnMuXHJcblxyXG5wcCQxLnBhcnNlVmFyID0gZnVuY3Rpb24obm9kZSwgaXNGb3IsIGtpbmQpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgbm9kZS5kZWNsYXJhdGlvbnMgPSBbXVxyXG4gIG5vZGUua2luZCA9IGtpbmRcclxuICBmb3IgKDs7KSB7XHJcbiAgICB2YXIgZGVjbCA9IHRoaXMkMS5zdGFydE5vZGUoKVxyXG4gICAgdGhpcyQxLnBhcnNlVmFySWQoZGVjbClcclxuICAgIGlmICh0aGlzJDEuZWF0KHR0LmVxKSkge1xyXG4gICAgICBkZWNsLmluaXQgPSB0aGlzJDEucGFyc2VNYXliZUFzc2lnbihpc0ZvcilcclxuICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gXCJjb25zdFwiICYmICEodGhpcyQxLnR5cGUgPT09IHR0Ll9pbiB8fCAodGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzJDEuaXNDb250ZXh0dWFsKFwib2ZcIikpKSkge1xyXG4gICAgICB0aGlzJDEudW5leHBlY3RlZCgpXHJcbiAgICB9IGVsc2UgaWYgKGRlY2wuaWQudHlwZSAhPSBcIklkZW50aWZpZXJcIiAmJiAhKGlzRm9yICYmICh0aGlzJDEudHlwZSA9PT0gdHQuX2luIHx8IHRoaXMkMS5pc0NvbnRleHR1YWwoXCJvZlwiKSkpKSB7XHJcbiAgICAgIHRoaXMkMS5yYWlzZSh0aGlzJDEubGFzdFRva0VuZCwgXCJDb21wbGV4IGJpbmRpbmcgcGF0dGVybnMgcmVxdWlyZSBhbiBpbml0aWFsaXphdGlvbiB2YWx1ZVwiKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGVjbC5pbml0ID0gbnVsbFxyXG4gICAgfVxyXG4gICAgbm9kZS5kZWNsYXJhdGlvbnMucHVzaCh0aGlzJDEuZmluaXNoTm9kZShkZWNsLCBcIlZhcmlhYmxlRGVjbGFyYXRvclwiKSlcclxuICAgIGlmICghdGhpcyQxLmVhdCh0dC5jb21tYSkpIGJyZWFrXHJcbiAgfVxyXG4gIHJldHVybiBub2RlXHJcbn1cclxuXHJcbnBwJDEucGFyc2VWYXJJZCA9IGZ1bmN0aW9uKGRlY2wpIHtcclxuICBkZWNsLmlkID0gdGhpcy5wYXJzZUJpbmRpbmdBdG9tKClcclxuICB0aGlzLmNoZWNrTFZhbChkZWNsLmlkLCB0cnVlKVxyXG59XHJcblxyXG4vLyBQYXJzZSBhIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIG9yIGxpdGVyYWwgKGRlcGVuZGluZyBvbiB0aGVcclxuLy8gYGlzU3RhdGVtZW50YCBwYXJhbWV0ZXIpLlxyXG5cclxucHAkMS5wYXJzZUZ1bmN0aW9uID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQsIGFsbG93RXhwcmVzc2lvbkJvZHkpIHtcclxuICB0aGlzLmluaXRGdW5jdGlvbihub2RlKVxyXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNilcclxuICAgIG5vZGUuZ2VuZXJhdG9yID0gdGhpcy5lYXQodHQuc3RhcilcclxuICB2YXIgb2xkSW5HZW4gPSB0aGlzLmluR2VuZXJhdG9yXHJcbiAgdGhpcy5pbkdlbmVyYXRvciA9IG5vZGUuZ2VuZXJhdG9yXHJcbiAgaWYgKGlzU3RhdGVtZW50IHx8IHRoaXMudHlwZSA9PT0gdHQubmFtZSlcclxuICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlSWRlbnQoKVxyXG4gIHRoaXMucGFyc2VGdW5jdGlvblBhcmFtcyhub2RlKVxyXG4gIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgYWxsb3dFeHByZXNzaW9uQm9keSlcclxuICB0aGlzLmluR2VuZXJhdG9yID0gb2xkSW5HZW5cclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzU3RhdGVtZW50ID8gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlRnVuY3Rpb25QYXJhbXMgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdGhpcy5leHBlY3QodHQucGFyZW5MKVxyXG4gIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR0LnBhcmVuUiwgZmFsc2UsIGZhbHNlLCB0cnVlKVxyXG59XHJcblxyXG4vLyBQYXJzZSBhIGNsYXNzIGRlY2xhcmF0aW9uIG9yIGxpdGVyYWwgKGRlcGVuZGluZyBvbiB0aGVcclxuLy8gYGlzU3RhdGVtZW50YCBwYXJhbWV0ZXIpLlxyXG5cclxucHAkMS5wYXJzZUNsYXNzID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgdGhpcy5uZXh0KClcclxuICB0aGlzLnBhcnNlQ2xhc3NJZChub2RlLCBpc1N0YXRlbWVudClcclxuICB0aGlzLnBhcnNlQ2xhc3NTdXBlcihub2RlKVxyXG4gIHZhciBjbGFzc0JvZHkgPSB0aGlzLnN0YXJ0Tm9kZSgpXHJcbiAgdmFyIGhhZENvbnN0cnVjdG9yID0gZmFsc2VcclxuICBjbGFzc0JvZHkuYm9keSA9IFtdXHJcbiAgdGhpcy5leHBlY3QodHQuYnJhY2VMKVxyXG4gIHdoaWxlICghdGhpcy5lYXQodHQuYnJhY2VSKSkge1xyXG4gICAgaWYgKHRoaXMkMS5lYXQodHQuc2VtaSkpIGNvbnRpbnVlXHJcbiAgICB2YXIgbWV0aG9kID0gdGhpcyQxLnN0YXJ0Tm9kZSgpXHJcbiAgICB2YXIgaXNHZW5lcmF0b3IgPSB0aGlzJDEuZWF0KHR0LnN0YXIpXHJcbiAgICB2YXIgaXNNYXliZVN0YXRpYyA9IHRoaXMkMS50eXBlID09PSB0dC5uYW1lICYmIHRoaXMkMS52YWx1ZSA9PT0gXCJzdGF0aWNcIlxyXG4gICAgdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZClcclxuICAgIG1ldGhvZC5zdGF0aWMgPSBpc01heWJlU3RhdGljICYmIHRoaXMkMS50eXBlICE9PSB0dC5wYXJlbkxcclxuICAgIGlmIChtZXRob2Quc3RhdGljKSB7XHJcbiAgICAgIGlmIChpc0dlbmVyYXRvcikgdGhpcyQxLnVuZXhwZWN0ZWQoKVxyXG4gICAgICBpc0dlbmVyYXRvciA9IHRoaXMkMS5lYXQodHQuc3RhcilcclxuICAgICAgdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZClcclxuICAgIH1cclxuICAgIG1ldGhvZC5raW5kID0gXCJtZXRob2RcIlxyXG4gICAgdmFyIGlzR2V0U2V0ID0gZmFsc2VcclxuICAgIGlmICghbWV0aG9kLmNvbXB1dGVkKSB7XHJcbiAgICAgIHZhciBrZXkgPSBtZXRob2Qua2V5O1xyXG4gICAgICBpZiAoIWlzR2VuZXJhdG9yICYmIGtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiB0aGlzJDEudHlwZSAhPT0gdHQucGFyZW5MICYmIChrZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBrZXkubmFtZSA9PT0gXCJzZXRcIikpIHtcclxuICAgICAgICBpc0dldFNldCA9IHRydWVcclxuICAgICAgICBtZXRob2Qua2luZCA9IGtleS5uYW1lXHJcbiAgICAgICAga2V5ID0gdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZClcclxuICAgICAgfVxyXG4gICAgICBpZiAoIW1ldGhvZC5zdGF0aWMgJiYgKGtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBrZXkubmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiIHx8XHJcbiAgICAgICAgICBrZXkudHlwZSA9PT0gXCJMaXRlcmFsXCIgJiYga2V5LnZhbHVlID09PSBcImNvbnN0cnVjdG9yXCIpKSB7XHJcbiAgICAgICAgaWYgKGhhZENvbnN0cnVjdG9yKSB0aGlzJDEucmFpc2Uoa2V5LnN0YXJ0LCBcIkR1cGxpY2F0ZSBjb25zdHJ1Y3RvciBpbiB0aGUgc2FtZSBjbGFzc1wiKVxyXG4gICAgICAgIGlmIChpc0dldFNldCkgdGhpcyQxLnJhaXNlKGtleS5zdGFydCwgXCJDb25zdHJ1Y3RvciBjYW4ndCBoYXZlIGdldC9zZXQgbW9kaWZpZXJcIilcclxuICAgICAgICBpZiAoaXNHZW5lcmF0b3IpIHRoaXMkMS5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgYmUgYSBnZW5lcmF0b3JcIilcclxuICAgICAgICBtZXRob2Qua2luZCA9IFwiY29uc3RydWN0b3JcIlxyXG4gICAgICAgIGhhZENvbnN0cnVjdG9yID0gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzJDEucGFyc2VDbGFzc01ldGhvZChjbGFzc0JvZHksIG1ldGhvZCwgaXNHZW5lcmF0b3IpXHJcbiAgICBpZiAoaXNHZXRTZXQpIHtcclxuICAgICAgdmFyIHBhcmFtQ291bnQgPSBtZXRob2Qua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxXHJcbiAgICAgIGlmIChtZXRob2QudmFsdWUucGFyYW1zLmxlbmd0aCAhPT0gcGFyYW1Db3VudCkge1xyXG4gICAgICAgIHZhciBzdGFydCA9IG1ldGhvZC52YWx1ZS5zdGFydFxyXG4gICAgICAgIGlmIChtZXRob2Qua2luZCA9PT0gXCJnZXRcIilcclxuICAgICAgICAgIHRoaXMkMS5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcImdldHRlciBzaG91bGQgaGF2ZSBubyBwYXJhbXNcIilcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJzZXR0ZXIgc2hvdWxkIGhhdmUgZXhhY3RseSBvbmUgcGFyYW1cIilcclxuICAgICAgfVxyXG4gICAgICBpZiAobWV0aG9kLmtpbmQgPT09IFwic2V0XCIgJiYgbWV0aG9kLnZhbHVlLnBhcmFtc1swXS50eXBlID09PSBcIlJlc3RFbGVtZW50XCIpXHJcbiAgICAgICAgdGhpcyQxLnJhaXNlKG1ldGhvZC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIilcclxuICAgIH1cclxuICB9XHJcbiAgbm9kZS5ib2R5ID0gdGhpcy5maW5pc2hOb2RlKGNsYXNzQm9keSwgXCJDbGFzc0JvZHlcIilcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzU3RhdGVtZW50ID8gXCJDbGFzc0RlY2xhcmF0aW9uXCIgOiBcIkNsYXNzRXhwcmVzc2lvblwiKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlQ2xhc3NNZXRob2QgPSBmdW5jdGlvbihjbGFzc0JvZHksIG1ldGhvZCwgaXNHZW5lcmF0b3IpIHtcclxuICBtZXRob2QudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGlzR2VuZXJhdG9yKVxyXG4gIGNsYXNzQm9keS5ib2R5LnB1c2godGhpcy5maW5pc2hOb2RlKG1ldGhvZCwgXCJNZXRob2REZWZpbml0aW9uXCIpKVxyXG59XHJcblxyXG5wcCQxLnBhcnNlQ2xhc3NJZCA9IGZ1bmN0aW9uKG5vZGUsIGlzU3RhdGVtZW50KSB7XHJcbiAgbm9kZS5pZCA9IHRoaXMudHlwZSA9PT0gdHQubmFtZSA/IHRoaXMucGFyc2VJZGVudCgpIDogaXNTdGF0ZW1lbnQgPyB0aGlzLnVuZXhwZWN0ZWQoKSA6IG51bGxcclxufVxyXG5cclxucHAkMS5wYXJzZUNsYXNzU3VwZXIgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgbm9kZS5zdXBlckNsYXNzID0gdGhpcy5lYXQodHQuX2V4dGVuZHMpID8gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKCkgOiBudWxsXHJcbn1cclxuXHJcbi8vIFBhcnNlcyBtb2R1bGUgZXhwb3J0IGRlY2xhcmF0aW9uLlxyXG5cclxucHAkMS5wYXJzZUV4cG9ydCA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgdGhpcy5uZXh0KClcclxuICAvLyBleHBvcnQgKiBmcm9tICcuLi4nXHJcbiAgaWYgKHRoaXMuZWF0KHR0LnN0YXIpKSB7XHJcbiAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJmcm9tXCIpXHJcbiAgICBub2RlLnNvdXJjZSA9IHRoaXMudHlwZSA9PT0gdHQuc3RyaW5nID8gdGhpcy5wYXJzZUV4cHJBdG9tKCkgOiB0aGlzLnVuZXhwZWN0ZWQoKVxyXG4gICAgdGhpcy5zZW1pY29sb24oKVxyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIpXHJcbiAgfVxyXG4gIGlmICh0aGlzLmVhdCh0dC5fZGVmYXVsdCkpIHsgLy8gZXhwb3J0IGRlZmF1bHQgLi4uXHJcbiAgICB2YXIgcGFyZW5zID0gdGhpcy50eXBlID09IHR0LnBhcmVuTFxyXG4gICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKVxyXG4gICAgdmFyIG5lZWRzU2VtaSA9IHRydWVcclxuICAgIGlmICghcGFyZW5zICYmIChleHByLnR5cGUgPT0gXCJGdW5jdGlvbkV4cHJlc3Npb25cIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cHIudHlwZSA9PSBcIkNsYXNzRXhwcmVzc2lvblwiKSkge1xyXG4gICAgICBuZWVkc1NlbWkgPSBmYWxzZVxyXG4gICAgICBpZiAoZXhwci5pZCkge1xyXG4gICAgICAgIGV4cHIudHlwZSA9IGV4cHIudHlwZSA9PSBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiXHJcbiAgICAgICAgICA/IFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiXHJcbiAgICAgICAgICA6IFwiQ2xhc3NEZWNsYXJhdGlvblwiXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG5vZGUuZGVjbGFyYXRpb24gPSBleHByXHJcbiAgICBpZiAobmVlZHNTZW1pKSB0aGlzLnNlbWljb2xvbigpXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXCIpXHJcbiAgfVxyXG4gIC8vIGV4cG9ydCB2YXJ8Y29uc3R8bGV0fGZ1bmN0aW9ufGNsYXNzIC4uLlxyXG4gIGlmICh0aGlzLnNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50KCkpIHtcclxuICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlU3RhdGVtZW50KHRydWUpXHJcbiAgICBub2RlLnNwZWNpZmllcnMgPSBbXVxyXG4gICAgbm9kZS5zb3VyY2UgPSBudWxsXHJcbiAgfSBlbHNlIHsgLy8gZXhwb3J0IHsgeCwgeSBhcyB6IH0gW2Zyb20gJy4uLiddXHJcbiAgICBub2RlLmRlY2xhcmF0aW9uID0gbnVsbFxyXG4gICAgbm9kZS5zcGVjaWZpZXJzID0gdGhpcy5wYXJzZUV4cG9ydFNwZWNpZmllcnMoKVxyXG4gICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImZyb21cIikpIHtcclxuICAgICAgbm9kZS5zb3VyY2UgPSB0aGlzLnR5cGUgPT09IHR0LnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy51bmV4cGVjdGVkKClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGNoZWNrIGZvciBrZXl3b3JkcyB1c2VkIGFzIGxvY2FsIG5hbWVzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5zcGVjaWZpZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMkMS5rZXl3b3Jkcy50ZXN0KG5vZGUuc3BlY2lmaWVyc1tpXS5sb2NhbC5uYW1lKSB8fCB0aGlzJDEucmVzZXJ2ZWRXb3Jkcy50ZXN0KG5vZGUuc3BlY2lmaWVyc1tpXS5sb2NhbC5uYW1lKSkge1xyXG4gICAgICAgICAgdGhpcyQxLnVuZXhwZWN0ZWQobm9kZS5zcGVjaWZpZXJzW2ldLmxvY2FsLnN0YXJ0KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgbm9kZS5zb3VyY2UgPSBudWxsXHJcbiAgICB9XHJcbiAgICB0aGlzLnNlbWljb2xvbigpXHJcbiAgfVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIpXHJcbn1cclxuXHJcbnBwJDEuc2hvdWxkUGFyc2VFeHBvcnRTdGF0ZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy50eXBlLmtleXdvcmQgfHwgdGhpcy5pc0xldCgpXHJcbn1cclxuXHJcbi8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG1vZHVsZSBleHBvcnRzLlxyXG5cclxucHAkMS5wYXJzZUV4cG9ydFNwZWNpZmllcnMgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgdmFyIG5vZGVzID0gW10sIGZpcnN0ID0gdHJ1ZVxyXG4gIC8vIGV4cG9ydCB7IHgsIHkgYXMgeiB9IFtmcm9tICcuLi4nXVxyXG4gIHRoaXMuZXhwZWN0KHR0LmJyYWNlTClcclxuICB3aGlsZSAoIXRoaXMuZWF0KHR0LmJyYWNlUikpIHtcclxuICAgIGlmICghZmlyc3QpIHtcclxuICAgICAgdGhpcyQxLmV4cGVjdCh0dC5jb21tYSlcclxuICAgICAgaWYgKHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEodHQuYnJhY2VSKSkgYnJlYWtcclxuICAgIH0gZWxzZSBmaXJzdCA9IGZhbHNlXHJcblxyXG4gICAgdmFyIG5vZGUgPSB0aGlzJDEuc3RhcnROb2RlKClcclxuICAgIG5vZGUubG9jYWwgPSB0aGlzJDEucGFyc2VJZGVudCh0aGlzJDEudHlwZSA9PT0gdHQuX2RlZmF1bHQpXHJcbiAgICBub2RlLmV4cG9ydGVkID0gdGhpcyQxLmVhdENvbnRleHR1YWwoXCJhc1wiKSA/IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpIDogbm9kZS5sb2NhbFxyXG4gICAgbm9kZXMucHVzaCh0aGlzJDEuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydFNwZWNpZmllclwiKSlcclxuICB9XHJcbiAgcmV0dXJuIG5vZGVzXHJcbn1cclxuXHJcbi8vIFBhcnNlcyBpbXBvcnQgZGVjbGFyYXRpb24uXHJcblxyXG5wcCQxLnBhcnNlSW1wb3J0ID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIHRoaXMubmV4dCgpXHJcbiAgLy8gaW1wb3J0ICcuLi4nXHJcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHQuc3RyaW5nKSB7XHJcbiAgICBub2RlLnNwZWNpZmllcnMgPSBlbXB0eVxyXG4gICAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlRXhwckF0b20oKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBub2RlLnNwZWNpZmllcnMgPSB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVycygpXHJcbiAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJmcm9tXCIpXHJcbiAgICBub2RlLnNvdXJjZSA9IHRoaXMudHlwZSA9PT0gdHQuc3RyaW5nID8gdGhpcy5wYXJzZUV4cHJBdG9tKCkgOiB0aGlzLnVuZXhwZWN0ZWQoKVxyXG4gIH1cclxuICB0aGlzLnNlbWljb2xvbigpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlY2xhcmF0aW9uXCIpXHJcbn1cclxuXHJcbi8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG1vZHVsZSBpbXBvcnRzLlxyXG5cclxucHAkMS5wYXJzZUltcG9ydFNwZWNpZmllcnMgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgdmFyIG5vZGVzID0gW10sIGZpcnN0ID0gdHJ1ZVxyXG4gIGlmICh0aGlzLnR5cGUgPT09IHR0Lm5hbWUpIHtcclxuICAgIC8vIGltcG9ydCBkZWZhdWx0T2JqLCB7IHgsIHkgYXMgeiB9IGZyb20gJy4uLidcclxuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gICAgbm9kZS5sb2NhbCA9IHRoaXMucGFyc2VJZGVudCgpXHJcbiAgICB0aGlzLmNoZWNrTFZhbChub2RlLmxvY2FsLCB0cnVlKVxyXG4gICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnREZWZhdWx0U3BlY2lmaWVyXCIpKVxyXG4gICAgaWYgKCF0aGlzLmVhdCh0dC5jb21tYSkpIHJldHVybiBub2Rlc1xyXG4gIH1cclxuICBpZiAodGhpcy50eXBlID09PSB0dC5zdGFyKSB7XHJcbiAgICB2YXIgbm9kZSQxID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gICAgdGhpcy5uZXh0KClcclxuICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImFzXCIpXHJcbiAgICBub2RlJDEubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnQoKVxyXG4gICAgdGhpcy5jaGVja0xWYWwobm9kZSQxLmxvY2FsLCB0cnVlKVxyXG4gICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSlcclxuICAgIHJldHVybiBub2Rlc1xyXG4gIH1cclxuICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpXHJcbiAgd2hpbGUgKCF0aGlzLmVhdCh0dC5icmFjZVIpKSB7XHJcbiAgICBpZiAoIWZpcnN0KSB7XHJcbiAgICAgIHRoaXMkMS5leHBlY3QodHQuY29tbWEpXHJcbiAgICAgIGlmICh0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR0LmJyYWNlUikpIGJyZWFrXHJcbiAgICB9IGVsc2UgZmlyc3QgPSBmYWxzZVxyXG5cclxuICAgIHZhciBub2RlJDIgPSB0aGlzJDEuc3RhcnROb2RlKClcclxuICAgIG5vZGUkMi5pbXBvcnRlZCA9IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpXHJcbiAgICBpZiAodGhpcyQxLmVhdENvbnRleHR1YWwoXCJhc1wiKSkge1xyXG4gICAgICBub2RlJDIubG9jYWwgPSB0aGlzJDEucGFyc2VJZGVudCgpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBub2RlJDIubG9jYWwgPSBub2RlJDIuaW1wb3J0ZWRcclxuICAgICAgaWYgKHRoaXMkMS5pc0tleXdvcmQobm9kZSQyLmxvY2FsLm5hbWUpKSB0aGlzJDEudW5leHBlY3RlZChub2RlJDIubG9jYWwuc3RhcnQpXHJcbiAgICAgIGlmICh0aGlzJDEucmVzZXJ2ZWRXb3Jkc1N0cmljdC50ZXN0KG5vZGUkMi5sb2NhbC5uYW1lKSkgdGhpcyQxLnJhaXNlKG5vZGUkMi5sb2NhbC5zdGFydCwgXCJUaGUga2V5d29yZCAnXCIgKyBub2RlJDIubG9jYWwubmFtZSArIFwiJyBpcyByZXNlcnZlZFwiKVxyXG4gICAgfVxyXG4gICAgdGhpcyQxLmNoZWNrTFZhbChub2RlJDIubG9jYWwsIHRydWUpXHJcbiAgICBub2Rlcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMiwgXCJJbXBvcnRTcGVjaWZpZXJcIikpXHJcbiAgfVxyXG4gIHJldHVybiBub2Rlc1xyXG59XHJcblxyXG52YXIgcHAkMiA9IFBhcnNlci5wcm90b3R5cGVcclxuXHJcbi8vIENvbnZlcnQgZXhpc3RpbmcgZXhwcmVzc2lvbiBhdG9tIHRvIGFzc2lnbmFibGUgcGF0dGVyblxyXG4vLyBpZiBwb3NzaWJsZS5cclxuXHJcbnBwJDIudG9Bc3NpZ25hYmxlID0gZnVuY3Rpb24obm9kZSwgaXNCaW5kaW5nKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBub2RlKSB7XHJcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xyXG4gICAgY2FzZSBcIklkZW50aWZpZXJcIjpcclxuICAgIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XHJcbiAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XHJcbiAgICAgIGJyZWFrXHJcblxyXG4gICAgY2FzZSBcIk9iamVjdEV4cHJlc3Npb25cIjpcclxuICAgICAgbm9kZS50eXBlID0gXCJPYmplY3RQYXR0ZXJuXCJcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLnByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgcHJvcCA9IG5vZGUucHJvcGVydGllc1tpXVxyXG4gICAgICAgIGlmIChwcm9wLmtpbmQgIT09IFwiaW5pdFwiKSB0aGlzJDEucmFpc2UocHJvcC5rZXkuc3RhcnQsIFwiT2JqZWN0IHBhdHRlcm4gY2FuJ3QgY29udGFpbiBnZXR0ZXIgb3Igc2V0dGVyXCIpXHJcbiAgICAgICAgdGhpcyQxLnRvQXNzaWduYWJsZShwcm9wLnZhbHVlLCBpc0JpbmRpbmcpXHJcbiAgICAgIH1cclxuICAgICAgYnJlYWtcclxuXHJcbiAgICBjYXNlIFwiQXJyYXlFeHByZXNzaW9uXCI6XHJcbiAgICAgIG5vZGUudHlwZSA9IFwiQXJyYXlQYXR0ZXJuXCJcclxuICAgICAgdGhpcy50b0Fzc2lnbmFibGVMaXN0KG5vZGUuZWxlbWVudHMsIGlzQmluZGluZylcclxuICAgICAgYnJlYWtcclxuXHJcbiAgICBjYXNlIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIjpcclxuICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT09IFwiPVwiKSB7XHJcbiAgICAgICAgbm9kZS50eXBlID0gXCJBc3NpZ25tZW50UGF0dGVyblwiXHJcbiAgICAgICAgZGVsZXRlIG5vZGUub3BlcmF0b3JcclxuICAgICAgICAvLyBmYWxscyB0aHJvdWdoIHRvIEFzc2lnbm1lbnRQYXR0ZXJuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5yYWlzZShub2RlLmxlZnQuZW5kLCBcIk9ubHkgJz0nIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGZvciBzcGVjaWZ5aW5nIGRlZmF1bHQgdmFsdWUuXCIpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG5cclxuICAgIGNhc2UgXCJBc3NpZ25tZW50UGF0dGVyblwiOlxyXG4gICAgICBpZiAobm9kZS5yaWdodC50eXBlID09PSBcIllpZWxkRXhwcmVzc2lvblwiKVxyXG4gICAgICAgIHRoaXMucmFpc2Uobm9kZS5yaWdodC5zdGFydCwgXCJZaWVsZCBleHByZXNzaW9uIGNhbm5vdCBiZSBhIGRlZmF1bHQgdmFsdWVcIilcclxuICAgICAgYnJlYWtcclxuXHJcbiAgICBjYXNlIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIjpcclxuICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy50b0Fzc2lnbmFibGUobm9kZS5leHByZXNzaW9uLCBpc0JpbmRpbmcpXHJcbiAgICAgIGJyZWFrXHJcblxyXG4gICAgY2FzZSBcIk1lbWJlckV4cHJlc3Npb25cIjpcclxuICAgICAgaWYgKCFpc0JpbmRpbmcpIGJyZWFrXHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBcIkFzc2lnbmluZyB0byBydmFsdWVcIilcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG5vZGVcclxufVxyXG5cclxuLy8gQ29udmVydCBsaXN0IG9mIGV4cHJlc3Npb24gYXRvbXMgdG8gYmluZGluZyBsaXN0LlxyXG5cclxucHAkMi50b0Fzc2lnbmFibGVMaXN0ID0gZnVuY3Rpb24oZXhwckxpc3QsIGlzQmluZGluZykge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgZW5kID0gZXhwckxpc3QubGVuZ3RoXHJcbiAgaWYgKGVuZCkge1xyXG4gICAgdmFyIGxhc3QgPSBleHByTGlzdFtlbmQgLSAxXVxyXG4gICAgaWYgKGxhc3QgJiYgbGFzdC50eXBlID09IFwiUmVzdEVsZW1lbnRcIikge1xyXG4gICAgICAtLWVuZFxyXG4gICAgfSBlbHNlIGlmIChsYXN0ICYmIGxhc3QudHlwZSA9PSBcIlNwcmVhZEVsZW1lbnRcIikge1xyXG4gICAgICBsYXN0LnR5cGUgPSBcIlJlc3RFbGVtZW50XCJcclxuICAgICAgdmFyIGFyZyA9IGxhc3QuYXJndW1lbnRcclxuICAgICAgdGhpcy50b0Fzc2lnbmFibGUoYXJnLCBpc0JpbmRpbmcpXHJcbiAgICAgIGlmIChhcmcudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIgJiYgYXJnLnR5cGUgIT09IFwiTWVtYmVyRXhwcmVzc2lvblwiICYmIGFyZy50eXBlICE9PSBcIkFycmF5UGF0dGVyblwiKVxyXG4gICAgICAgIHRoaXMudW5leHBlY3RlZChhcmcuc3RhcnQpXHJcbiAgICAgIC0tZW5kXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzQmluZGluZyAmJiBsYXN0ICYmIGxhc3QudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmIGxhc3QuYXJndW1lbnQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpXHJcbiAgICAgIHRoaXMudW5leHBlY3RlZChsYXN0LmFyZ3VtZW50LnN0YXJ0KVxyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICB2YXIgZWx0ID0gZXhwckxpc3RbaV1cclxuICAgIGlmIChlbHQpIHRoaXMkMS50b0Fzc2lnbmFibGUoZWx0LCBpc0JpbmRpbmcpXHJcbiAgfVxyXG4gIHJldHVybiBleHByTGlzdFxyXG59XHJcblxyXG4vLyBQYXJzZXMgc3ByZWFkIGVsZW1lbnQuXHJcblxyXG5wcCQyLnBhcnNlU3ByZWFkID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gIHRoaXMubmV4dCgpXHJcbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycylcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3ByZWFkRWxlbWVudFwiKVxyXG59XHJcblxyXG5wcCQyLnBhcnNlUmVzdCA9IGZ1bmN0aW9uKGFsbG93Tm9uSWRlbnQpIHtcclxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKClcclxuICB0aGlzLm5leHQoKVxyXG5cclxuICAvLyBSZXN0RWxlbWVudCBpbnNpZGUgb2YgYSBmdW5jdGlvbiBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBpZGVudGlmaWVyXHJcbiAgaWYgKGFsbG93Tm9uSWRlbnQpIG5vZGUuYXJndW1lbnQgPSB0aGlzLnR5cGUgPT09IHR0Lm5hbWUgPyB0aGlzLnBhcnNlSWRlbnQoKSA6IHRoaXMudW5leHBlY3RlZCgpXHJcbiAgZWxzZSBub2RlLmFyZ3VtZW50ID0gdGhpcy50eXBlID09PSB0dC5uYW1lIHx8IHRoaXMudHlwZSA9PT0gdHQuYnJhY2tldEwgPyB0aGlzLnBhcnNlQmluZGluZ0F0b20oKSA6IHRoaXMudW5leHBlY3RlZCgpXHJcblxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXN0RWxlbWVudFwiKVxyXG59XHJcblxyXG4vLyBQYXJzZXMgbHZhbHVlIChhc3NpZ25hYmxlKSBhdG9tLlxyXG5cclxucHAkMi5wYXJzZUJpbmRpbmdBdG9tID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYpIHJldHVybiB0aGlzLnBhcnNlSWRlbnQoKVxyXG4gIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgY2FzZSB0dC5uYW1lOlxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VJZGVudCgpXHJcblxyXG4gIGNhc2UgdHQuYnJhY2tldEw6XHJcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKClcclxuICAgIHRoaXMubmV4dCgpXHJcbiAgICBub2RlLmVsZW1lbnRzID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR0LmJyYWNrZXRSLCB0cnVlLCB0cnVlKVxyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFycmF5UGF0dGVyblwiKVxyXG5cclxuICBjYXNlIHR0LmJyYWNlTDpcclxuICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKHRydWUpXHJcblxyXG4gIGRlZmF1bHQ6XHJcbiAgICB0aGlzLnVuZXhwZWN0ZWQoKVxyXG4gIH1cclxufVxyXG5cclxucHAkMi5wYXJzZUJpbmRpbmdMaXN0ID0gZnVuY3Rpb24oY2xvc2UsIGFsbG93RW1wdHksIGFsbG93VHJhaWxpbmdDb21tYSwgYWxsb3dOb25JZGVudCkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWVcclxuICB3aGlsZSAoIXRoaXMuZWF0KGNsb3NlKSkge1xyXG4gICAgaWYgKGZpcnN0KSBmaXJzdCA9IGZhbHNlXHJcbiAgICBlbHNlIHRoaXMkMS5leHBlY3QodHQuY29tbWEpXHJcbiAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzJDEudHlwZSA9PT0gdHQuY29tbWEpIHtcclxuICAgICAgZWx0cy5wdXNoKG51bGwpXHJcbiAgICB9IGVsc2UgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSkge1xyXG4gICAgICBicmVha1xyXG4gICAgfSBlbHNlIGlmICh0aGlzJDEudHlwZSA9PT0gdHQuZWxsaXBzaXMpIHtcclxuICAgICAgdmFyIHJlc3QgPSB0aGlzJDEucGFyc2VSZXN0KGFsbG93Tm9uSWRlbnQpXHJcbiAgICAgIHRoaXMkMS5wYXJzZUJpbmRpbmdMaXN0SXRlbShyZXN0KVxyXG4gICAgICBlbHRzLnB1c2gocmVzdClcclxuICAgICAgaWYgKHRoaXMkMS50eXBlID09PSB0dC5jb21tYSkgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJDb21tYSBpcyBub3QgcGVybWl0dGVkIGFmdGVyIHRoZSByZXN0IGVsZW1lbnRcIilcclxuICAgICAgdGhpcyQxLmV4cGVjdChjbG9zZSlcclxuICAgICAgYnJlYWtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBlbGVtID0gdGhpcyQxLnBhcnNlTWF5YmVEZWZhdWx0KHRoaXMkMS5zdGFydCwgdGhpcyQxLnN0YXJ0TG9jKVxyXG4gICAgICB0aGlzJDEucGFyc2VCaW5kaW5nTGlzdEl0ZW0oZWxlbSlcclxuICAgICAgZWx0cy5wdXNoKGVsZW0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBlbHRzXHJcbn1cclxuXHJcbnBwJDIucGFyc2VCaW5kaW5nTGlzdEl0ZW0gPSBmdW5jdGlvbihwYXJhbSkge1xyXG4gIHJldHVybiBwYXJhbVxyXG59XHJcblxyXG4vLyBQYXJzZXMgYXNzaWdubWVudCBwYXR0ZXJuIGFyb3VuZCBnaXZlbiBhdG9tIGlmIHBvc3NpYmxlLlxyXG5cclxucHAkMi5wYXJzZU1heWJlRGVmYXVsdCA9IGZ1bmN0aW9uKHN0YXJ0UG9zLCBzdGFydExvYywgbGVmdCkge1xyXG4gIGxlZnQgPSBsZWZ0IHx8IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpXHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYgfHwgIXRoaXMuZWF0KHR0LmVxKSkgcmV0dXJuIGxlZnRcclxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gIG5vZGUubGVmdCA9IGxlZnRcclxuICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKClcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudFBhdHRlcm5cIilcclxufVxyXG5cclxuLy8gVmVyaWZ5IHRoYXQgYSBub2RlIGlzIGFuIGx2YWwg4oCUIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBhc3NpZ25lZFxyXG4vLyB0by5cclxuXHJcbnBwJDIuY2hlY2tMVmFsID0gZnVuY3Rpb24oZXhwciwgaXNCaW5kaW5nLCBjaGVja0NsYXNoZXMpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgc3dpdGNoIChleHByLnR5cGUpIHtcclxuICBjYXNlIFwiSWRlbnRpZmllclwiOlxyXG4gICAgaWYgKHRoaXMuc3RyaWN0ICYmIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQudGVzdChleHByLm5hbWUpKVxyXG4gICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgKGlzQmluZGluZyA/IFwiQmluZGluZyBcIiA6IFwiQXNzaWduaW5nIHRvIFwiKSArIGV4cHIubmFtZSArIFwiIGluIHN0cmljdCBtb2RlXCIpXHJcbiAgICBpZiAoY2hlY2tDbGFzaGVzKSB7XHJcbiAgICAgIGlmIChoYXMoY2hlY2tDbGFzaGVzLCBleHByLm5hbWUpKVxyXG4gICAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCBcIkFyZ3VtZW50IG5hbWUgY2xhc2hcIilcclxuICAgICAgY2hlY2tDbGFzaGVzW2V4cHIubmFtZV0gPSB0cnVlXHJcbiAgICB9XHJcbiAgICBicmVha1xyXG5cclxuICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxyXG4gICAgaWYgKGlzQmluZGluZykgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIChpc0JpbmRpbmcgPyBcIkJpbmRpbmdcIiA6IFwiQXNzaWduaW5nIHRvXCIpICsgXCIgbWVtYmVyIGV4cHJlc3Npb25cIilcclxuICAgIGJyZWFrXHJcblxyXG4gIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHIucHJvcGVydGllcy5sZW5ndGg7IGkrKylcclxuICAgICAgdGhpcyQxLmNoZWNrTFZhbChleHByLnByb3BlcnRpZXNbaV0udmFsdWUsIGlzQmluZGluZywgY2hlY2tDbGFzaGVzKVxyXG4gICAgYnJlYWtcclxuXHJcbiAgY2FzZSBcIkFycmF5UGF0dGVyblwiOlxyXG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgZXhwci5lbGVtZW50cy5sZW5ndGg7IGkkMSsrKSB7XHJcbiAgICAgIHZhciBlbGVtID0gZXhwci5lbGVtZW50c1tpJDFdXHJcbiAgICAgIGlmIChlbGVtKSB0aGlzJDEuY2hlY2tMVmFsKGVsZW0sIGlzQmluZGluZywgY2hlY2tDbGFzaGVzKVxyXG4gICAgfVxyXG4gICAgYnJlYWtcclxuXHJcbiAgY2FzZSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCI6XHJcbiAgICB0aGlzLmNoZWNrTFZhbChleHByLmxlZnQsIGlzQmluZGluZywgY2hlY2tDbGFzaGVzKVxyXG4gICAgYnJlYWtcclxuXHJcbiAgY2FzZSBcIlJlc3RFbGVtZW50XCI6XHJcbiAgICB0aGlzLmNoZWNrTFZhbChleHByLmFyZ3VtZW50LCBpc0JpbmRpbmcsIGNoZWNrQ2xhc2hlcylcclxuICAgIGJyZWFrXHJcblxyXG4gIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxyXG4gICAgdGhpcy5jaGVja0xWYWwoZXhwci5leHByZXNzaW9uLCBpc0JpbmRpbmcsIGNoZWNrQ2xhc2hlcylcclxuICAgIGJyZWFrXHJcblxyXG4gIGRlZmF1bHQ6XHJcbiAgICB0aGlzLnJhaXNlKGV4cHIuc3RhcnQsIChpc0JpbmRpbmcgPyBcIkJpbmRpbmdcIiA6IFwiQXNzaWduaW5nIHRvXCIpICsgXCIgcnZhbHVlXCIpXHJcbiAgfVxyXG59XHJcblxyXG52YXIgcHAkMyA9IFBhcnNlci5wcm90b3R5cGVcclxuXHJcbi8vIENoZWNrIGlmIHByb3BlcnR5IG5hbWUgY2xhc2hlcyB3aXRoIGFscmVhZHkgYWRkZWQuXHJcbi8vIE9iamVjdC9jbGFzcyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGFyZSBub3QgYWxsb3dlZCB0byBjbGFzaCDigJRcclxuLy8gZWl0aGVyIHdpdGggZWFjaCBvdGhlciBvciB3aXRoIGFuIGluaXQgcHJvcGVydHkg4oCUIGFuZCBpblxyXG4vLyBzdHJpY3QgbW9kZSwgaW5pdCBwcm9wZXJ0aWVzIGFyZSBhbHNvIG5vdCBhbGxvd2VkIHRvIGJlIHJlcGVhdGVkLlxyXG5cclxucHAkMy5jaGVja1Byb3BDbGFzaCA9IGZ1bmN0aW9uKHByb3AsIHByb3BIYXNoKSB7XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIChwcm9wLmNvbXB1dGVkIHx8IHByb3AubWV0aG9kIHx8IHByb3Auc2hvcnRoYW5kKSlcclxuICAgIHJldHVyblxyXG4gIHZhciBrZXkgPSBwcm9wLmtleTtcclxuICB2YXIgbmFtZVxyXG4gIHN3aXRjaCAoa2V5LnR5cGUpIHtcclxuICBjYXNlIFwiSWRlbnRpZmllclwiOiBuYW1lID0ga2V5Lm5hbWU7IGJyZWFrXHJcbiAgY2FzZSBcIkxpdGVyYWxcIjogbmFtZSA9IFN0cmluZyhrZXkudmFsdWUpOyBicmVha1xyXG4gIGRlZmF1bHQ6IHJldHVyblxyXG4gIH1cclxuICB2YXIga2luZCA9IHByb3Aua2luZDtcclxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcclxuICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiICYmIGtpbmQgPT09IFwiaW5pdFwiKSB7XHJcbiAgICAgIGlmIChwcm9wSGFzaC5wcm90bykgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGtleS5zdGFydCwgXCJSZWRlZmluaXRpb24gb2YgX19wcm90b19fIHByb3BlcnR5XCIpXHJcbiAgICAgIHByb3BIYXNoLnByb3RvID0gdHJ1ZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIG5hbWUgPSBcIiRcIiArIG5hbWVcclxuICB2YXIgb3RoZXIgPSBwcm9wSGFzaFtuYW1lXVxyXG4gIGlmIChvdGhlcikge1xyXG4gICAgdmFyIGlzR2V0U2V0ID0ga2luZCAhPT0gXCJpbml0XCJcclxuICAgIGlmICgodGhpcy5zdHJpY3QgfHwgaXNHZXRTZXQpICYmIG90aGVyW2tpbmRdIHx8ICEoaXNHZXRTZXQgXiBvdGhlci5pbml0KSlcclxuICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGtleS5zdGFydCwgXCJSZWRlZmluaXRpb24gb2YgcHJvcGVydHlcIilcclxuICB9IGVsc2Uge1xyXG4gICAgb3RoZXIgPSBwcm9wSGFzaFtuYW1lXSA9IHtcclxuICAgICAgaW5pdDogZmFsc2UsXHJcbiAgICAgIGdldDogZmFsc2UsXHJcbiAgICAgIHNldDogZmFsc2VcclxuICAgIH1cclxuICB9XHJcbiAgb3RoZXJba2luZF0gPSB0cnVlXHJcbn1cclxuXHJcbi8vICMjIyBFeHByZXNzaW9uIHBhcnNpbmdcclxuXHJcbi8vIFRoZXNlIG5lc3QsIGZyb20gdGhlIG1vc3QgZ2VuZXJhbCBleHByZXNzaW9uIHR5cGUgYXQgdGhlIHRvcCB0b1xyXG4vLyAnYXRvbWljJywgbm9uZGl2aXNpYmxlIGV4cHJlc3Npb24gdHlwZXMgYXQgdGhlIGJvdHRvbS4gTW9zdCBvZlxyXG4vLyB0aGUgZnVuY3Rpb25zIHdpbGwgc2ltcGx5IGxldCB0aGUgZnVuY3Rpb24ocykgYmVsb3cgdGhlbSBwYXJzZSxcclxuLy8gYW5kLCAqaWYqIHRoZSBzeW50YWN0aWMgY29uc3RydWN0IHRoZXkgaGFuZGxlIGlzIHByZXNlbnQsIHdyYXBcclxuLy8gdGhlIEFTVCBub2RlIHRoYXQgdGhlIGlubmVyIHBhcnNlciBnYXZlIHRoZW0gaW4gYW5vdGhlciBub2RlLlxyXG5cclxuLy8gUGFyc2UgYSBmdWxsIGV4cHJlc3Npb24uIFRoZSBvcHRpb25hbCBhcmd1bWVudHMgYXJlIHVzZWQgdG9cclxuLy8gZm9yYmlkIHRoZSBgaW5gIG9wZXJhdG9yIChpbiBmb3IgbG9vcHMgaW5pdGFsaXphdGlvbiBleHByZXNzaW9ucylcclxuLy8gYW5kIHByb3ZpZGUgcmVmZXJlbmNlIGZvciBzdG9yaW5nICc9JyBvcGVyYXRvciBpbnNpZGUgc2hvcnRoYW5kXHJcbi8vIHByb3BlcnR5IGFzc2lnbm1lbnQgaW4gY29udGV4dHMgd2hlcmUgYm90aCBvYmplY3QgZXhwcmVzc2lvblxyXG4vLyBhbmQgb2JqZWN0IHBhdHRlcm4gbWlnaHQgYXBwZWFyIChzbyBpdCdzIHBvc3NpYmxlIHRvIHJhaXNlXHJcbi8vIGRlbGF5ZWQgc3ludGF4IGVycm9yIGF0IGNvcnJlY3QgcG9zaXRpb24pLlxyXG5cclxucHAkMy5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvY1xyXG4gIHZhciBleHByID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpXHJcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHQuY29tbWEpIHtcclxuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpXHJcbiAgICBub2RlLmV4cHJlc3Npb25zID0gW2V4cHJdXHJcbiAgICB3aGlsZSAodGhpcy5lYXQodHQuY29tbWEpKSBub2RlLmV4cHJlc3Npb25zLnB1c2godGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU2VxdWVuY2VFeHByZXNzaW9uXCIpXHJcbiAgfVxyXG4gIHJldHVybiBleHByXHJcbn1cclxuXHJcbi8vIFBhcnNlIGFuIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi4gVGhpcyBpbmNsdWRlcyBhcHBsaWNhdGlvbnMgb2ZcclxuLy8gb3BlcmF0b3JzIGxpa2UgYCs9YC5cclxuXHJcbnBwJDMucGFyc2VNYXliZUFzc2lnbiA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGFmdGVyTGVmdFBhcnNlKSB7XHJcbiAgaWYgKHRoaXMuaW5HZW5lcmF0b3IgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJ5aWVsZFwiKSkgcmV0dXJuIHRoaXMucGFyc2VZaWVsZCgpXHJcblxyXG4gIHZhciBvd25EZXN0cnVjdHVyaW5nRXJyb3JzID0gZmFsc2VcclxuICBpZiAoIXJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcclxuICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9yc1xyXG4gICAgb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IHRydWVcclxuICB9XHJcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jXHJcbiAgaWYgKHRoaXMudHlwZSA9PSB0dC5wYXJlbkwgfHwgdGhpcy50eXBlID09IHR0Lm5hbWUpXHJcbiAgICB0aGlzLnBvdGVudGlhbEFycm93QXQgPSB0aGlzLnN0YXJ0XHJcbiAgdmFyIGxlZnQgPSB0aGlzLnBhcnNlTWF5YmVDb25kaXRpb25hbChub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gIGlmIChhZnRlckxlZnRQYXJzZSkgbGVmdCA9IGFmdGVyTGVmdFBhcnNlLmNhbGwodGhpcywgbGVmdCwgc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gIGlmICh0aGlzLnR5cGUuaXNBc3NpZ24pIHtcclxuICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpXHJcbiAgICBpZiAoIW93bkRlc3RydWN0dXJpbmdFcnJvcnMpIERlc3RydWN0dXJpbmdFcnJvcnMuY2FsbChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYylcclxuICAgIG5vZGUub3BlcmF0b3IgPSB0aGlzLnZhbHVlXHJcbiAgICBub2RlLmxlZnQgPSB0aGlzLnR5cGUgPT09IHR0LmVxID8gdGhpcy50b0Fzc2lnbmFibGUobGVmdCkgOiBsZWZ0XHJcbiAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA9IDAgLy8gcmVzZXQgYmVjYXVzZSBzaG9ydGhhbmQgZGVmYXVsdCB3YXMgdXNlZCBjb3JyZWN0bHlcclxuICAgIHRoaXMuY2hlY2tMVmFsKGxlZnQpXHJcbiAgICB0aGlzLm5leHQoKVxyXG4gICAgbm9kZS5yaWdodCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luKVxyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIpXHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChvd25EZXN0cnVjdHVyaW5nRXJyb3JzKSB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKVxyXG4gIH1cclxuICByZXR1cm4gbGVmdFxyXG59XHJcblxyXG4vLyBQYXJzZSBhIHRlcm5hcnkgY29uZGl0aW9uYWwgKGA/OmApIG9wZXJhdG9yLlxyXG5cclxucHAkMy5wYXJzZU1heWJlQ29uZGl0aW9uYWwgPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jXHJcbiAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlRXhwck9wcyhub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgcmV0dXJuIGV4cHJcclxuICBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSB7XHJcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gICAgbm9kZS50ZXN0ID0gZXhwclxyXG4gICAgbm9kZS5jb25zZXF1ZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKClcclxuICAgIHRoaXMuZXhwZWN0KHR0LmNvbG9uKVxyXG4gICAgbm9kZS5hbHRlcm5hdGUgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9JbilcclxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIilcclxuICB9XHJcbiAgcmV0dXJuIGV4cHJcclxufVxyXG5cclxuLy8gU3RhcnQgdGhlIHByZWNlZGVuY2UgcGFyc2VyLlxyXG5cclxucHAkMy5wYXJzZUV4cHJPcHMgPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jXHJcbiAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBmYWxzZSlcclxuICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHJldHVybiBleHByXHJcbiAgcmV0dXJuIHRoaXMucGFyc2VFeHByT3AoZXhwciwgc3RhcnRQb3MsIHN0YXJ0TG9jLCAtMSwgbm9JbilcclxufVxyXG5cclxuLy8gUGFyc2UgYmluYXJ5IG9wZXJhdG9ycyB3aXRoIHRoZSBvcGVyYXRvciBwcmVjZWRlbmNlIHBhcnNpbmdcclxuLy8gYWxnb3JpdGhtLiBgbGVmdGAgaXMgdGhlIGxlZnQtaGFuZCBzaWRlIG9mIHRoZSBvcGVyYXRvci5cclxuLy8gYG1pblByZWNgIHByb3ZpZGVzIGNvbnRleHQgdGhhdCBhbGxvd3MgdGhlIGZ1bmN0aW9uIHRvIHN0b3AgYW5kXHJcbi8vIGRlZmVyIGZ1cnRoZXIgcGFyc2VyIHRvIG9uZSBvZiBpdHMgY2FsbGVycyB3aGVuIGl0IGVuY291bnRlcnMgYW5cclxuLy8gb3BlcmF0b3IgdGhhdCBoYXMgYSBsb3dlciBwcmVjZWRlbmNlIHRoYW4gdGhlIHNldCBpdCBpcyBwYXJzaW5nLlxyXG5cclxucHAkMy5wYXJzZUV4cHJPcCA9IGZ1bmN0aW9uKGxlZnQsIGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBtaW5QcmVjLCBub0luKSB7XHJcbiAgdmFyIHByZWMgPSB0aGlzLnR5cGUuYmlub3BcclxuICBpZiAocHJlYyAhPSBudWxsICYmICghbm9JbiB8fCB0aGlzLnR5cGUgIT09IHR0Ll9pbikpIHtcclxuICAgIGlmIChwcmVjID4gbWluUHJlYykge1xyXG4gICAgICB2YXIgbG9naWNhbCA9IHRoaXMudHlwZSA9PT0gdHQubG9naWNhbE9SIHx8IHRoaXMudHlwZSA9PT0gdHQubG9naWNhbEFORFxyXG4gICAgICB2YXIgb3AgPSB0aGlzLnZhbHVlXHJcbiAgICAgIHRoaXMubmV4dCgpXHJcbiAgICAgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvY1xyXG4gICAgICB2YXIgcmlnaHQgPSB0aGlzLnBhcnNlRXhwck9wKHRoaXMucGFyc2VNYXliZVVuYXJ5KG51bGwsIGZhbHNlKSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcmVjLCBub0luKVxyXG4gICAgICB2YXIgbm9kZSA9IHRoaXMuYnVpbGRCaW5hcnkobGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbClcclxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByT3Aobm9kZSwgbGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIG1pblByZWMsIG5vSW4pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBsZWZ0XHJcbn1cclxuXHJcbnBwJDMuYnVpbGRCaW5hcnkgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbCkge1xyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpXHJcbiAgbm9kZS5sZWZ0ID0gbGVmdFxyXG4gIG5vZGUub3BlcmF0b3IgPSBvcFxyXG4gIG5vZGUucmlnaHQgPSByaWdodFxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgbG9naWNhbCA/IFwiTG9naWNhbEV4cHJlc3Npb25cIiA6IFwiQmluYXJ5RXhwcmVzc2lvblwiKVxyXG59XHJcblxyXG4vLyBQYXJzZSB1bmFyeSBvcGVyYXRvcnMsIGJvdGggcHJlZml4IGFuZCBwb3N0Zml4LlxyXG5cclxucHAkMy5wYXJzZU1heWJlVW5hcnkgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBzYXdVbmFyeSkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGV4cHJcclxuICBpZiAodGhpcy50eXBlLnByZWZpeCkge1xyXG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpLCB1cGRhdGUgPSB0aGlzLnR5cGUgPT09IHR0LmluY0RlY1xyXG4gICAgbm9kZS5vcGVyYXRvciA9IHRoaXMudmFsdWVcclxuICAgIG5vZGUucHJlZml4ID0gdHJ1ZVxyXG4gICAgdGhpcy5uZXh0KClcclxuICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCB0cnVlKVxyXG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSlcclxuICAgIGlmICh1cGRhdGUpIHRoaXMuY2hlY2tMVmFsKG5vZGUuYXJndW1lbnQpXHJcbiAgICBlbHNlIGlmICh0aGlzLnN0cmljdCAmJiBub2RlLm9wZXJhdG9yID09PSBcImRlbGV0ZVwiICYmXHJcbiAgICAgICAgICAgICBub2RlLmFyZ3VtZW50LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKVxyXG4gICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJEZWxldGluZyBsb2NhbCB2YXJpYWJsZSBpbiBzdHJpY3QgbW9kZVwiKVxyXG4gICAgZWxzZSBzYXdVbmFyeSA9IHRydWVcclxuICAgIGV4cHIgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdXBkYXRlID8gXCJVcGRhdGVFeHByZXNzaW9uXCIgOiBcIlVuYXJ5RXhwcmVzc2lvblwiKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBleHByID0gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpXHJcbiAgICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHJldHVybiBleHByXHJcbiAgICB3aGlsZSAodGhpcy50eXBlLnBvc3RmaXggJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcclxuICAgICAgdmFyIG5vZGUkMSA9IHRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpXHJcbiAgICAgIG5vZGUkMS5vcGVyYXRvciA9IHRoaXMkMS52YWx1ZVxyXG4gICAgICBub2RlJDEucHJlZml4ID0gZmFsc2VcclxuICAgICAgbm9kZSQxLmFyZ3VtZW50ID0gZXhwclxyXG4gICAgICB0aGlzJDEuY2hlY2tMVmFsKGV4cHIpXHJcbiAgICAgIHRoaXMkMS5uZXh0KClcclxuICAgICAgZXhwciA9IHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMSwgXCJVcGRhdGVFeHByZXNzaW9uXCIpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoIXNhd1VuYXJ5ICYmIHRoaXMuZWF0KHR0LnN0YXJzdGFyKSlcclxuICAgIHJldHVybiB0aGlzLmJ1aWxkQmluYXJ5KHN0YXJ0UG9zLCBzdGFydExvYywgZXhwciwgdGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgZmFsc2UpLCBcIioqXCIsIGZhbHNlKVxyXG4gIGVsc2VcclxuICAgIHJldHVybiBleHByXHJcbn1cclxuXHJcbi8vIFBhcnNlIGNhbGwsIGRvdCwgYW5kIGBbXWAtc3Vic2NyaXB0IGV4cHJlc3Npb25zLlxyXG5cclxucHAkMy5wYXJzZUV4cHJTdWJzY3JpcHRzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xyXG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvY1xyXG4gIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJBdG9tKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpXHJcbiAgdmFyIHNraXBBcnJvd1N1YnNjcmlwdHMgPSBleHByLnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiAmJiB0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva1N0YXJ0LCB0aGlzLmxhc3RUb2tFbmQpICE9PSBcIilcIlxyXG4gIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB8fCBza2lwQXJyb3dTdWJzY3JpcHRzKSByZXR1cm4gZXhwclxyXG4gIHJldHVybiB0aGlzLnBhcnNlU3Vic2NyaXB0cyhleHByLCBzdGFydFBvcywgc3RhcnRMb2MpXHJcbn1cclxuXHJcbnBwJDMucGFyc2VTdWJzY3JpcHRzID0gZnVuY3Rpb24oYmFzZSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBub0NhbGxzKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIGZvciAoOzspIHtcclxuICAgIGlmICh0aGlzJDEuZWF0KHR0LmRvdCkpIHtcclxuICAgICAgdmFyIG5vZGUgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gICAgICBub2RlLm9iamVjdCA9IGJhc2VcclxuICAgICAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpXHJcbiAgICAgIG5vZGUuY29tcHV0ZWQgPSBmYWxzZVxyXG4gICAgICBiYXNlID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSwgXCJNZW1iZXJFeHByZXNzaW9uXCIpXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMkMS5lYXQodHQuYnJhY2tldEwpKSB7XHJcbiAgICAgIHZhciBub2RlJDEgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gICAgICBub2RlJDEub2JqZWN0ID0gYmFzZVxyXG4gICAgICBub2RlJDEucHJvcGVydHkgPSB0aGlzJDEucGFyc2VFeHByZXNzaW9uKClcclxuICAgICAgbm9kZSQxLmNvbXB1dGVkID0gdHJ1ZVxyXG4gICAgICB0aGlzJDEuZXhwZWN0KHR0LmJyYWNrZXRSKVxyXG4gICAgICBiYXNlID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSQxLCBcIk1lbWJlckV4cHJlc3Npb25cIilcclxuICAgIH0gZWxzZSBpZiAoIW5vQ2FsbHMgJiYgdGhpcyQxLmVhdCh0dC5wYXJlbkwpKSB7XHJcbiAgICAgIHZhciBub2RlJDIgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gICAgICBub2RlJDIuY2FsbGVlID0gYmFzZVxyXG4gICAgICBub2RlJDIuYXJndW1lbnRzID0gdGhpcyQxLnBhcnNlRXhwckxpc3QodHQucGFyZW5SLCBmYWxzZSlcclxuICAgICAgYmFzZSA9IHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMiwgXCJDYWxsRXhwcmVzc2lvblwiKVxyXG4gICAgfSBlbHNlIGlmICh0aGlzJDEudHlwZSA9PT0gdHQuYmFja1F1b3RlKSB7XHJcbiAgICAgIHZhciBub2RlJDMgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKVxyXG4gICAgICBub2RlJDMudGFnID0gYmFzZVxyXG4gICAgICBub2RlJDMucXVhc2kgPSB0aGlzJDEucGFyc2VUZW1wbGF0ZSgpXHJcbiAgICAgIGJhc2UgPSB0aGlzJDEuZmluaXNoTm9kZShub2RlJDMsIFwiVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uXCIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYmFzZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gUGFyc2UgYW4gYXRvbWljIGV4cHJlc3Npb24g4oCUIGVpdGhlciBhIHNpbmdsZSB0b2tlbiB0aGF0IGlzIGFuXHJcbi8vIGV4cHJlc3Npb24sIGFuIGV4cHJlc3Npb24gc3RhcnRlZCBieSBhIGtleXdvcmQgbGlrZSBgZnVuY3Rpb25gIG9yXHJcbi8vIGBuZXdgLCBvciBhbiBleHByZXNzaW9uIHdyYXBwZWQgaW4gcHVuY3R1YXRpb24gbGlrZSBgKClgLCBgW11gLFxyXG4vLyBvciBge31gLlxyXG5cclxucHAkMy5wYXJzZUV4cHJBdG9tID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xyXG4gIHZhciBub2RlLCBjYW5CZUFycm93ID0gdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID09IHRoaXMuc3RhcnRcclxuICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gIGNhc2UgdHQuX3N1cGVyOlxyXG4gICAgaWYgKCF0aGlzLmluRnVuY3Rpb24pXHJcbiAgICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInc3VwZXInIG91dHNpZGUgb2YgZnVuY3Rpb24gb3IgY2xhc3NcIilcclxuXHJcbiAgY2FzZSB0dC5fdGhpczpcclxuICAgIHZhciB0eXBlID0gdGhpcy50eXBlID09PSB0dC5fdGhpcyA/IFwiVGhpc0V4cHJlc3Npb25cIiA6IFwiU3VwZXJcIlxyXG4gICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKClcclxuICAgIHRoaXMubmV4dCgpXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIHR5cGUpXHJcblxyXG4gIGNhc2UgdHQubmFtZTpcclxuICAgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvY1xyXG4gICAgdmFyIGlkID0gdGhpcy5wYXJzZUlkZW50KHRoaXMudHlwZSAhPT0gdHQubmFtZSlcclxuICAgIGlmIChjYW5CZUFycm93ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpICYmIHRoaXMuZWF0KHR0LmFycm93KSlcclxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCBbaWRdKVxyXG4gICAgcmV0dXJuIGlkXHJcblxyXG4gIGNhc2UgdHQucmVnZXhwOlxyXG4gICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZVxyXG4gICAgbm9kZSA9IHRoaXMucGFyc2VMaXRlcmFsKHZhbHVlLnZhbHVlKVxyXG4gICAgbm9kZS5yZWdleCA9IHtwYXR0ZXJuOiB2YWx1ZS5wYXR0ZXJuLCBmbGFnczogdmFsdWUuZmxhZ3N9XHJcbiAgICByZXR1cm4gbm9kZVxyXG5cclxuICBjYXNlIHR0Lm51bTogY2FzZSB0dC5zdHJpbmc6XHJcbiAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwodGhpcy52YWx1ZSlcclxuXHJcbiAgY2FzZSB0dC5fbnVsbDogY2FzZSB0dC5fdHJ1ZTogY2FzZSB0dC5fZmFsc2U6XHJcbiAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gICAgbm9kZS52YWx1ZSA9IHRoaXMudHlwZSA9PT0gdHQuX251bGwgPyBudWxsIDogdGhpcy50eXBlID09PSB0dC5fdHJ1ZVxyXG4gICAgbm9kZS5yYXcgPSB0aGlzLnR5cGUua2V5d29yZFxyXG4gICAgdGhpcy5uZXh0KClcclxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpXHJcblxyXG4gIGNhc2UgdHQucGFyZW5MOlxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbihjYW5CZUFycm93KVxyXG5cclxuICBjYXNlIHR0LmJyYWNrZXRMOlxyXG4gICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKClcclxuICAgIHRoaXMubmV4dCgpXHJcbiAgICBub2RlLmVsZW1lbnRzID0gdGhpcy5wYXJzZUV4cHJMaXN0KHR0LmJyYWNrZXRSLCB0cnVlLCB0cnVlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFycmF5RXhwcmVzc2lvblwiKVxyXG5cclxuICBjYXNlIHR0LmJyYWNlTDpcclxuICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG5cclxuICBjYXNlIHR0Ll9mdW5jdGlvbjpcclxuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpXHJcbiAgICB0aGlzLm5leHQoKVxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihub2RlLCBmYWxzZSlcclxuXHJcbiAgY2FzZSB0dC5fY2xhc3M6XHJcbiAgICByZXR1cm4gdGhpcy5wYXJzZUNsYXNzKHRoaXMuc3RhcnROb2RlKCksIGZhbHNlKVxyXG5cclxuICBjYXNlIHR0Ll9uZXc6XHJcbiAgICByZXR1cm4gdGhpcy5wYXJzZU5ldygpXHJcblxyXG4gIGNhc2UgdHQuYmFja1F1b3RlOlxyXG4gICAgcmV0dXJuIHRoaXMucGFyc2VUZW1wbGF0ZSgpXHJcblxyXG4gIGRlZmF1bHQ6XHJcbiAgICB0aGlzLnVuZXhwZWN0ZWQoKVxyXG4gIH1cclxufVxyXG5cclxucHAkMy5wYXJzZUxpdGVyYWwgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gIG5vZGUudmFsdWUgPSB2YWx1ZVxyXG4gIG5vZGUucmF3ID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZClcclxuICB0aGlzLm5leHQoKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpXHJcbn1cclxuXHJcbnBwJDMucGFyc2VQYXJlbkV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmV4cGVjdCh0dC5wYXJlbkwpXHJcbiAgdmFyIHZhbCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKClcclxuICB0aGlzLmV4cGVjdCh0dC5wYXJlblIpXHJcbiAgcmV0dXJuIHZhbFxyXG59XHJcblxyXG5wcCQzLnBhcnNlUGFyZW5BbmREaXN0aW5ndWlzaEV4cHJlc3Npb24gPSBmdW5jdGlvbihjYW5CZUFycm93KSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYywgdmFsXHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XHJcbiAgICB0aGlzLm5leHQoKVxyXG5cclxuICAgIHZhciBpbm5lclN0YXJ0UG9zID0gdGhpcy5zdGFydCwgaW5uZXJTdGFydExvYyA9IHRoaXMuc3RhcnRMb2NcclxuICAgIHZhciBleHByTGlzdCA9IFtdLCBmaXJzdCA9IHRydWVcclxuICAgIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnMsIHNwcmVhZFN0YXJ0LCBpbm5lclBhcmVuU3RhcnRcclxuICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR0LnBhcmVuUikge1xyXG4gICAgICBmaXJzdCA/IGZpcnN0ID0gZmFsc2UgOiB0aGlzJDEuZXhwZWN0KHR0LmNvbW1hKVxyXG4gICAgICBpZiAodGhpcyQxLnR5cGUgPT09IHR0LmVsbGlwc2lzKSB7XHJcbiAgICAgICAgc3ByZWFkU3RhcnQgPSB0aGlzJDEuc3RhcnRcclxuICAgICAgICBleHByTGlzdC5wdXNoKHRoaXMkMS5wYXJzZVBhcmVuSXRlbSh0aGlzJDEucGFyc2VSZXN0KCkpKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHRoaXMkMS50eXBlID09PSB0dC5wYXJlbkwgJiYgIWlubmVyUGFyZW5TdGFydCkge1xyXG4gICAgICAgICAgaW5uZXJQYXJlblN0YXJ0ID0gdGhpcyQxLnN0YXJ0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJMaXN0LnB1c2godGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRoaXMkMS5wYXJzZVBhcmVuSXRlbSkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBpbm5lckVuZFBvcyA9IHRoaXMuc3RhcnQsIGlubmVyRW5kTG9jID0gdGhpcy5zdGFydExvY1xyXG4gICAgdGhpcy5leHBlY3QodHQucGFyZW5SKVxyXG5cclxuICAgIGlmIChjYW5CZUFycm93ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpICYmIHRoaXMuZWF0KHR0LmFycm93KSkge1xyXG4gICAgICB0aGlzLmNoZWNrUGF0dGVybkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKVxyXG4gICAgICBpZiAoaW5uZXJQYXJlblN0YXJ0KSB0aGlzLnVuZXhwZWN0ZWQoaW5uZXJQYXJlblN0YXJ0KVxyXG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVBhcmVuQXJyb3dMaXN0KHN0YXJ0UG9zLCBzdGFydExvYywgZXhwckxpc3QpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFleHByTGlzdC5sZW5ndGgpIHRoaXMudW5leHBlY3RlZCh0aGlzLmxhc3RUb2tTdGFydClcclxuICAgIGlmIChzcHJlYWRTdGFydCkgdGhpcy51bmV4cGVjdGVkKHNwcmVhZFN0YXJ0KVxyXG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSlcclxuXHJcbiAgICBpZiAoZXhwckxpc3QubGVuZ3RoID4gMSkge1xyXG4gICAgICB2YWwgPSB0aGlzLnN0YXJ0Tm9kZUF0KGlubmVyU3RhcnRQb3MsIGlubmVyU3RhcnRMb2MpXHJcbiAgICAgIHZhbC5leHByZXNzaW9ucyA9IGV4cHJMaXN0XHJcbiAgICAgIHRoaXMuZmluaXNoTm9kZUF0KHZhbCwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiwgaW5uZXJFbmRQb3MsIGlubmVyRW5kTG9jKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFsID0gZXhwckxpc3RbMF1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgdmFsID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpXHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5vcHRpb25zLnByZXNlcnZlUGFyZW5zKSB7XHJcbiAgICB2YXIgcGFyID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpXHJcbiAgICBwYXIuZXhwcmVzc2lvbiA9IHZhbFxyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwYXIsIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHZhbFxyXG4gIH1cclxufVxyXG5cclxucHAkMy5wYXJzZVBhcmVuSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICByZXR1cm4gaXRlbVxyXG59XHJcblxyXG5wcCQzLnBhcnNlUGFyZW5BcnJvd0xpc3QgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGV4cHJMaXN0KSB7XHJcbiAgcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCBleHByTGlzdClcclxufVxyXG5cclxuLy8gTmV3J3MgcHJlY2VkZW5jZSBpcyBzbGlnaHRseSB0cmlja3kuIEl0IG11c3QgYWxsb3cgaXRzIGFyZ3VtZW50IHRvXHJcbi8vIGJlIGEgYFtdYCBvciBkb3Qgc3Vic2NyaXB0IGV4cHJlc3Npb24sIGJ1dCBub3QgYSBjYWxsIOKAlCBhdCBsZWFzdCxcclxuLy8gbm90IHdpdGhvdXQgd3JhcHBpbmcgaXQgaW4gcGFyZW50aGVzZXMuIFRodXMsIGl0IHVzZXMgdGhlIG5vQ2FsbHNcclxuLy8gYXJndW1lbnQgdG8gcGFyc2VTdWJzY3JpcHRzIHRvIHByZXZlbnQgaXQgZnJvbSBjb25zdW1pbmcgdGhlXHJcbi8vIGFyZ3VtZW50IGxpc3QuXHJcblxyXG52YXIgZW1wdHkkMSA9IFtdXHJcblxyXG5wcCQzLnBhcnNlTmV3ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpXHJcbiAgdmFyIG1ldGEgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSlcclxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5lYXQodHQuZG90KSkge1xyXG4gICAgbm9kZS5tZXRhID0gbWV0YVxyXG4gICAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKVxyXG4gICAgaWYgKG5vZGUucHJvcGVydHkubmFtZSAhPT0gXCJ0YXJnZXRcIilcclxuICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUucHJvcGVydHkuc3RhcnQsIFwiVGhlIG9ubHkgdmFsaWQgbWV0YSBwcm9wZXJ0eSBmb3IgbmV3IGlzIG5ldy50YXJnZXRcIilcclxuICAgIGlmICghdGhpcy5pbkZ1bmN0aW9uKVxyXG4gICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJuZXcudGFyZ2V0IGNhbiBvbmx5IGJlIHVzZWQgaW4gZnVuY3Rpb25zXCIpXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTWV0YVByb3BlcnR5XCIpXHJcbiAgfVxyXG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvY1xyXG4gIG5vZGUuY2FsbGVlID0gdGhpcy5wYXJzZVN1YnNjcmlwdHModGhpcy5wYXJzZUV4cHJBdG9tKCksIHN0YXJ0UG9zLCBzdGFydExvYywgdHJ1ZSlcclxuICBpZiAodGhpcy5lYXQodHQucGFyZW5MKSkgbm9kZS5hcmd1bWVudHMgPSB0aGlzLnBhcnNlRXhwckxpc3QodHQucGFyZW5SLCBmYWxzZSlcclxuICBlbHNlIG5vZGUuYXJndW1lbnRzID0gZW1wdHkkMVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJOZXdFeHByZXNzaW9uXCIpXHJcbn1cclxuXHJcbi8vIFBhcnNlIHRlbXBsYXRlIGV4cHJlc3Npb24uXHJcblxyXG5wcCQzLnBhcnNlVGVtcGxhdGVFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGVsZW0gPSB0aGlzLnN0YXJ0Tm9kZSgpXHJcbiAgZWxlbS52YWx1ZSA9IHtcclxuICAgIHJhdzogdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZCkucmVwbGFjZSgvXFxyXFxuPy9nLCAnXFxuJyksXHJcbiAgICBjb29rZWQ6IHRoaXMudmFsdWVcclxuICB9XHJcbiAgdGhpcy5uZXh0KClcclxuICBlbGVtLnRhaWwgPSB0aGlzLnR5cGUgPT09IHR0LmJhY2tRdW90ZVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoZWxlbSwgXCJUZW1wbGF0ZUVsZW1lbnRcIilcclxufVxyXG5cclxucHAkMy5wYXJzZVRlbXBsYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gIHRoaXMubmV4dCgpXHJcbiAgbm9kZS5leHByZXNzaW9ucyA9IFtdXHJcbiAgdmFyIGN1ckVsdCA9IHRoaXMucGFyc2VUZW1wbGF0ZUVsZW1lbnQoKVxyXG4gIG5vZGUucXVhc2lzID0gW2N1ckVsdF1cclxuICB3aGlsZSAoIWN1ckVsdC50YWlsKSB7XHJcbiAgICB0aGlzJDEuZXhwZWN0KHR0LmRvbGxhckJyYWNlTClcclxuICAgIG5vZGUuZXhwcmVzc2lvbnMucHVzaCh0aGlzJDEucGFyc2VFeHByZXNzaW9uKCkpXHJcbiAgICB0aGlzJDEuZXhwZWN0KHR0LmJyYWNlUilcclxuICAgIG5vZGUucXVhc2lzLnB1c2goY3VyRWx0ID0gdGhpcyQxLnBhcnNlVGVtcGxhdGVFbGVtZW50KCkpXHJcbiAgfVxyXG4gIHRoaXMubmV4dCgpXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRlbXBsYXRlTGl0ZXJhbFwiKVxyXG59XHJcblxyXG4vLyBQYXJzZSBhbiBvYmplY3QgbGl0ZXJhbCBvciBiaW5kaW5nIHBhdHRlcm4uXHJcblxyXG5wcCQzLnBhcnNlT2JqID0gZnVuY3Rpb24oaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgZmlyc3QgPSB0cnVlLCBwcm9wSGFzaCA9IHt9XHJcbiAgbm9kZS5wcm9wZXJ0aWVzID0gW11cclxuICB0aGlzLm5leHQoKVxyXG4gIHdoaWxlICghdGhpcy5lYXQodHQuYnJhY2VSKSkge1xyXG4gICAgaWYgKCFmaXJzdCkge1xyXG4gICAgICB0aGlzJDEuZXhwZWN0KHR0LmNvbW1hKVxyXG4gICAgICBpZiAodGhpcyQxLmFmdGVyVHJhaWxpbmdDb21tYSh0dC5icmFjZVIpKSBicmVha1xyXG4gICAgfSBlbHNlIGZpcnN0ID0gZmFsc2VcclxuXHJcbiAgICB2YXIgcHJvcCA9IHRoaXMkMS5zdGFydE5vZGUoKSwgaXNHZW5lcmF0b3IsIHN0YXJ0UG9zLCBzdGFydExvY1xyXG4gICAgaWYgKHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcclxuICAgICAgcHJvcC5tZXRob2QgPSBmYWxzZVxyXG4gICAgICBwcm9wLnNob3J0aGFuZCA9IGZhbHNlXHJcbiAgICAgIGlmIChpc1BhdHRlcm4gfHwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xyXG4gICAgICAgIHN0YXJ0UG9zID0gdGhpcyQxLnN0YXJ0XHJcbiAgICAgICAgc3RhcnRMb2MgPSB0aGlzJDEuc3RhcnRMb2NcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWlzUGF0dGVybilcclxuICAgICAgICBpc0dlbmVyYXRvciA9IHRoaXMkMS5lYXQodHQuc3RhcilcclxuICAgIH1cclxuICAgIHRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShwcm9wKVxyXG4gICAgdGhpcyQxLnBhcnNlUHJvcGVydHlWYWx1ZShwcm9wLCBpc1BhdHRlcm4sIGlzR2VuZXJhdG9yLCBzdGFydFBvcywgc3RhcnRMb2MsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpXHJcbiAgICB0aGlzJDEuY2hlY2tQcm9wQ2xhc2gocHJvcCwgcHJvcEhhc2gpXHJcbiAgICBub2RlLnByb3BlcnRpZXMucHVzaCh0aGlzJDEuZmluaXNoTm9kZShwcm9wLCBcIlByb3BlcnR5XCIpKVxyXG4gIH1cclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzUGF0dGVybiA/IFwiT2JqZWN0UGF0dGVyblwiIDogXCJPYmplY3RFeHByZXNzaW9uXCIpXHJcbn1cclxuXHJcbnBwJDMucGFyc2VQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24ocHJvcCwgaXNQYXR0ZXJuLCBpc0dlbmVyYXRvciwgc3RhcnRQb3MsIHN0YXJ0TG9jLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgaWYgKHRoaXMuZWF0KHR0LmNvbG9uKSkge1xyXG4gICAgcHJvcC52YWx1ZSA9IGlzUGF0dGVybiA/IHRoaXMucGFyc2VNYXliZURlZmF1bHQodGhpcy5zdGFydCwgdGhpcy5zdGFydExvYykgOiB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpXHJcbiAgICBwcm9wLmtpbmQgPSBcImluaXRcIlxyXG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy50eXBlID09PSB0dC5wYXJlbkwpIHtcclxuICAgIGlmIChpc1BhdHRlcm4pIHRoaXMudW5leHBlY3RlZCgpXHJcbiAgICBwcm9wLmtpbmQgPSBcImluaXRcIlxyXG4gICAgcHJvcC5tZXRob2QgPSB0cnVlXHJcbiAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1ldGhvZChpc0dlbmVyYXRvcilcclxuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA1ICYmICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXHJcbiAgICAgICAgICAgICAocHJvcC5rZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBwcm9wLmtleS5uYW1lID09PSBcInNldFwiKSAmJlxyXG4gICAgICAgICAgICAgKHRoaXMudHlwZSAhPSB0dC5jb21tYSAmJiB0aGlzLnR5cGUgIT0gdHQuYnJhY2VSKSkge1xyXG4gICAgaWYgKGlzR2VuZXJhdG9yIHx8IGlzUGF0dGVybikgdGhpcy51bmV4cGVjdGVkKClcclxuICAgIHByb3Aua2luZCA9IHByb3Aua2V5Lm5hbWVcclxuICAgIHRoaXMucGFyc2VQcm9wZXJ0eU5hbWUocHJvcClcclxuICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGZhbHNlKVxyXG4gICAgdmFyIHBhcmFtQ291bnQgPSBwcm9wLmtpbmQgPT09IFwiZ2V0XCIgPyAwIDogMVxyXG4gICAgaWYgKHByb3AudmFsdWUucGFyYW1zLmxlbmd0aCAhPT0gcGFyYW1Db3VudCkge1xyXG4gICAgICB2YXIgc3RhcnQgPSBwcm9wLnZhbHVlLnN0YXJ0XHJcbiAgICAgIGlmIChwcm9wLmtpbmQgPT09IFwiZ2V0XCIpXHJcbiAgICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcImdldHRlciBzaG91bGQgaGF2ZSBubyBwYXJhbXNcIilcclxuICAgICAgZWxzZVxyXG4gICAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJzZXR0ZXIgc2hvdWxkIGhhdmUgZXhhY3RseSBvbmUgcGFyYW1cIilcclxuICAgIH1cclxuICAgIGlmIChwcm9wLmtpbmQgPT09IFwic2V0XCIgJiYgcHJvcC52YWx1ZS5wYXJhbXNbMF0udHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiKVxyXG4gICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocHJvcC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIilcclxuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKSB7XHJcbiAgICBpZiAodGhpcy5rZXl3b3Jkcy50ZXN0KHByb3Aua2V5Lm5hbWUpIHx8XHJcbiAgICAgICAgKHRoaXMuc3RyaWN0ID8gdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0QmluZCA6IHRoaXMucmVzZXJ2ZWRXb3JkcykudGVzdChwcm9wLmtleS5uYW1lKSB8fFxyXG4gICAgICAgICh0aGlzLmluR2VuZXJhdG9yICYmIHByb3Aua2V5Lm5hbWUgPT0gXCJ5aWVsZFwiKSlcclxuICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHByb3Aua2V5LnN0YXJ0LCBcIidcIiArIHByb3Aua2V5Lm5hbWUgKyBcIicgY2FuIG5vdCBiZSB1c2VkIGFzIHNob3J0aGFuZCBwcm9wZXJ0eVwiKVxyXG4gICAgcHJvcC5raW5kID0gXCJpbml0XCJcclxuICAgIGlmIChpc1BhdHRlcm4pIHtcclxuICAgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcm9wLmtleSlcclxuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0dC5lcSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgICAgIGlmICghcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24pXHJcbiAgICAgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPSB0aGlzLnN0YXJ0XHJcbiAgICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHN0YXJ0UG9zLCBzdGFydExvYywgcHJvcC5rZXkpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwcm9wLnZhbHVlID0gcHJvcC5rZXlcclxuICAgIH1cclxuICAgIHByb3Auc2hvcnRoYW5kID0gdHJ1ZVxyXG4gIH0gZWxzZSB0aGlzLnVuZXhwZWN0ZWQoKVxyXG59XHJcblxyXG5wcCQzLnBhcnNlUHJvcGVydHlOYW1lID0gZnVuY3Rpb24ocHJvcCkge1xyXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xyXG4gICAgaWYgKHRoaXMuZWF0KHR0LmJyYWNrZXRMKSkge1xyXG4gICAgICBwcm9wLmNvbXB1dGVkID0gdHJ1ZVxyXG4gICAgICBwcm9wLmtleSA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpXHJcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNrZXRSKVxyXG4gICAgICByZXR1cm4gcHJvcC5rZXlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByb3AuY29tcHV0ZWQgPSBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcHJvcC5rZXkgPSB0aGlzLnR5cGUgPT09IHR0Lm51bSB8fCB0aGlzLnR5cGUgPT09IHR0LnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy5wYXJzZUlkZW50KHRydWUpXHJcbn1cclxuXHJcbi8vIEluaXRpYWxpemUgZW1wdHkgZnVuY3Rpb24gbm9kZS5cclxuXHJcbnBwJDMuaW5pdEZ1bmN0aW9uID0gZnVuY3Rpb24obm9kZSkge1xyXG4gIG5vZGUuaWQgPSBudWxsXHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XHJcbiAgICBub2RlLmdlbmVyYXRvciA9IGZhbHNlXHJcbiAgICBub2RlLmV4cHJlc3Npb24gPSBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuLy8gUGFyc2Ugb2JqZWN0IG9yIGNsYXNzIG1ldGhvZC5cclxuXHJcbnBwJDMucGFyc2VNZXRob2QgPSBmdW5jdGlvbihpc0dlbmVyYXRvcikge1xyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgb2xkSW5HZW4gPSB0aGlzLmluR2VuZXJhdG9yXHJcbiAgdGhpcy5pbkdlbmVyYXRvciA9IGlzR2VuZXJhdG9yXHJcbiAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSlcclxuICB0aGlzLmV4cGVjdCh0dC5wYXJlbkwpXHJcbiAgbm9kZS5wYXJhbXMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QodHQucGFyZW5SLCBmYWxzZSwgZmFsc2UpXHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KVxyXG4gICAgbm9kZS5nZW5lcmF0b3IgPSBpc0dlbmVyYXRvclxyXG4gIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgZmFsc2UpXHJcbiAgdGhpcy5pbkdlbmVyYXRvciA9IG9sZEluR2VuXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKVxyXG59XHJcblxyXG4vLyBQYXJzZSBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uIHdpdGggZ2l2ZW4gcGFyYW1ldGVycy5cclxuXHJcbnBwJDMucGFyc2VBcnJvd0V4cHJlc3Npb24gPSBmdW5jdGlvbihub2RlLCBwYXJhbXMpIHtcclxuICB2YXIgb2xkSW5HZW4gPSB0aGlzLmluR2VuZXJhdG9yXHJcbiAgdGhpcy5pbkdlbmVyYXRvciA9IGZhbHNlXHJcbiAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSlcclxuICBub2RlLnBhcmFtcyA9IHRoaXMudG9Bc3NpZ25hYmxlTGlzdChwYXJhbXMsIHRydWUpXHJcbiAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCB0cnVlKVxyXG4gIHRoaXMuaW5HZW5lcmF0b3IgPSBvbGRJbkdlblxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKVxyXG59XHJcblxyXG4vLyBQYXJzZSBmdW5jdGlvbiBib2R5IGFuZCBjaGVjayBwYXJhbWV0ZXJzLlxyXG5cclxucHAkMy5wYXJzZUZ1bmN0aW9uQm9keSA9IGZ1bmN0aW9uKG5vZGUsIGlzQXJyb3dGdW5jdGlvbikge1xyXG4gIHZhciBpc0V4cHJlc3Npb24gPSBpc0Fycm93RnVuY3Rpb24gJiYgdGhpcy50eXBlICE9PSB0dC5icmFjZUxcclxuXHJcbiAgaWYgKGlzRXhwcmVzc2lvbikge1xyXG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKClcclxuICAgIG5vZGUuZXhwcmVzc2lvbiA9IHRydWVcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gU3RhcnQgYSBuZXcgc2NvcGUgd2l0aCByZWdhcmQgdG8gbGFiZWxzIGFuZCB0aGUgYGluRnVuY3Rpb25gXHJcbiAgICAvLyBmbGFnIChyZXN0b3JlIHRoZW0gdG8gdGhlaXIgb2xkIHZhbHVlIGFmdGVyd2FyZHMpLlxyXG4gICAgdmFyIG9sZEluRnVuYyA9IHRoaXMuaW5GdW5jdGlvbiwgb2xkTGFiZWxzID0gdGhpcy5sYWJlbHNcclxuICAgIHRoaXMuaW5GdW5jdGlvbiA9IHRydWU7IHRoaXMubGFiZWxzID0gW11cclxuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VCbG9jayh0cnVlKVxyXG4gICAgbm9kZS5leHByZXNzaW9uID0gZmFsc2VcclxuICAgIHRoaXMuaW5GdW5jdGlvbiA9IG9sZEluRnVuYzsgdGhpcy5sYWJlbHMgPSBvbGRMYWJlbHNcclxuICB9XHJcblxyXG4gIC8vIElmIHRoaXMgaXMgYSBzdHJpY3QgbW9kZSBmdW5jdGlvbiwgdmVyaWZ5IHRoYXQgYXJndW1lbnQgbmFtZXNcclxuICAvLyBhcmUgbm90IHJlcGVhdGVkLCBhbmQgaXQgZG9lcyBub3QgdHJ5IHRvIGJpbmQgdGhlIHdvcmRzIGBldmFsYFxyXG4gIC8vIG9yIGBhcmd1bWVudHNgLlxyXG4gIHZhciB1c2VTdHJpY3QgPSAoIWlzRXhwcmVzc2lvbiAmJiBub2RlLmJvZHkuYm9keS5sZW5ndGggJiYgdGhpcy5pc1VzZVN0cmljdChub2RlLmJvZHkuYm9keVswXSkpID8gbm9kZS5ib2R5LmJvZHlbMF0gOiBudWxsO1xyXG4gIGlmICh0aGlzLnN0cmljdCB8fCB1c2VTdHJpY3QpIHtcclxuICAgIHZhciBvbGRTdHJpY3QgPSB0aGlzLnN0cmljdFxyXG4gICAgdGhpcy5zdHJpY3QgPSB0cnVlXHJcbiAgICBpZiAobm9kZS5pZClcclxuICAgICAgdGhpcy5jaGVja0xWYWwobm9kZS5pZCwgdHJ1ZSlcclxuICAgIHRoaXMuY2hlY2tQYXJhbXMobm9kZSwgdXNlU3RyaWN0KVxyXG4gICAgdGhpcy5zdHJpY3QgPSBvbGRTdHJpY3RcclxuICB9IGVsc2UgaWYgKGlzQXJyb3dGdW5jdGlvbikge1xyXG4gICAgdGhpcy5jaGVja1BhcmFtcyhub2RlLCB1c2VTdHJpY3QpXHJcbiAgfVxyXG59XHJcblxyXG4vLyBDaGVja3MgZnVuY3Rpb24gcGFyYW1zIGZvciB2YXJpb3VzIGRpc2FsbG93ZWQgcGF0dGVybnMgc3VjaCBhcyB1c2luZyBcImV2YWxcIlxyXG4vLyBvciBcImFyZ3VtZW50c1wiIGFuZCBkdXBsaWNhdGUgcGFyYW1ldGVycy5cclxuXHJcbnBwJDMuY2hlY2tQYXJhbXMgPSBmdW5jdGlvbihub2RlLCB1c2VTdHJpY3QpIHtcclxuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICAgIHZhciBuYW1lSGFzaCA9IHt9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUucGFyYW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh1c2VTdHJpY3QgJiYgdGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNyAmJiBub2RlLnBhcmFtc1tpXS50eXBlICE9PSBcIklkZW50aWZpZXJcIilcclxuICAgICAgICB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZSh1c2VTdHJpY3Quc3RhcnQsIFwiSWxsZWdhbCAndXNlIHN0cmljdCcgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdFwiKTtcclxuICAgICAgdGhpcyQxLmNoZWNrTFZhbChub2RlLnBhcmFtc1tpXSwgdHJ1ZSwgbmFtZUhhc2gpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGV4cHJlc3Npb25zLCBhbmQgcmV0dXJucyB0aGVtIGFzXHJcbi8vIGFuIGFycmF5LiBgY2xvc2VgIGlzIHRoZSB0b2tlbiB0eXBlIHRoYXQgZW5kcyB0aGUgbGlzdCwgYW5kXHJcbi8vIGBhbGxvd0VtcHR5YCBjYW4gYmUgdHVybmVkIG9uIHRvIGFsbG93IHN1YnNlcXVlbnQgY29tbWFzIHdpdGhcclxuLy8gbm90aGluZyBpbiBiZXR3ZWVuIHRoZW0gdG8gYmUgcGFyc2VkIGFzIGBudWxsYCAod2hpY2ggaXMgbmVlZGVkXHJcbi8vIGZvciBhcnJheSBsaXRlcmFscykuXHJcblxyXG5wcCQzLnBhcnNlRXhwckxpc3QgPSBmdW5jdGlvbihjbG9zZSwgYWxsb3dUcmFpbGluZ0NvbW1hLCBhbGxvd0VtcHR5LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBlbHRzID0gW10sIGZpcnN0ID0gdHJ1ZVxyXG4gIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XHJcbiAgICBpZiAoIWZpcnN0KSB7XHJcbiAgICAgIHRoaXMkMS5leHBlY3QodHQuY29tbWEpXHJcbiAgICAgIGlmIChhbGxvd1RyYWlsaW5nQ29tbWEgJiYgdGhpcyQxLmFmdGVyVHJhaWxpbmdDb21tYShjbG9zZSkpIGJyZWFrXHJcbiAgICB9IGVsc2UgZmlyc3QgPSBmYWxzZVxyXG5cclxuICAgIHZhciBlbHRcclxuICAgIGlmIChhbGxvd0VtcHR5ICYmIHRoaXMkMS50eXBlID09PSB0dC5jb21tYSlcclxuICAgICAgZWx0ID0gbnVsbFxyXG4gICAgZWxzZSBpZiAodGhpcyQxLnR5cGUgPT09IHR0LmVsbGlwc2lzKSB7XHJcbiAgICAgIGVsdCA9IHRoaXMkMS5wYXJzZVNwcmVhZChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gICAgICBpZiAodGhpcyQxLnR5cGUgPT09IHR0LmNvbW1hICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgIXJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSkge1xyXG4gICAgICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA9IHRoaXMkMS5sYXN0VG9rU3RhcnRcclxuICAgICAgfVxyXG4gICAgfSBlbHNlXHJcbiAgICAgIGVsdCA9IHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxyXG4gICAgZWx0cy5wdXNoKGVsdClcclxuICB9XHJcbiAgcmV0dXJuIGVsdHNcclxufVxyXG5cclxuLy8gUGFyc2UgdGhlIG5leHQgdG9rZW4gYXMgYW4gaWRlbnRpZmllci4gSWYgYGxpYmVyYWxgIGlzIHRydWUgKHVzZWRcclxuLy8gd2hlbiBwYXJzaW5nIHByb3BlcnRpZXMpLCBpdCB3aWxsIGFsc28gY29udmVydCBrZXl3b3JkcyBpbnRvXHJcbi8vIGlkZW50aWZpZXJzLlxyXG5cclxucHAkMy5wYXJzZUlkZW50ID0gZnVuY3Rpb24obGliZXJhbCkge1xyXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKVxyXG4gIGlmIChsaWJlcmFsICYmIHRoaXMub3B0aW9ucy5hbGxvd1Jlc2VydmVkID09IFwibmV2ZXJcIikgbGliZXJhbCA9IGZhbHNlXHJcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHQubmFtZSkge1xyXG4gICAgaWYgKCFsaWJlcmFsICYmICh0aGlzLnN0cmljdCA/IHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdCA6IHRoaXMucmVzZXJ2ZWRXb3JkcykudGVzdCh0aGlzLnZhbHVlKSAmJlxyXG4gICAgICAgICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiB8fFxyXG4gICAgICAgICB0aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuZW5kKS5pbmRleE9mKFwiXFxcXFwiKSA9PSAtMSkpXHJcbiAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCBcIlRoZSBrZXl3b3JkICdcIiArIHRoaXMudmFsdWUgKyBcIicgaXMgcmVzZXJ2ZWRcIilcclxuICAgIGlmICghbGliZXJhbCAmJiB0aGlzLmluR2VuZXJhdG9yICYmIHRoaXMudmFsdWUgPT09IFwieWllbGRcIilcclxuICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIFwiQ2FuIG5vdCB1c2UgJ3lpZWxkJyBhcyBpZGVudGlmaWVyIGluc2lkZSBhIGdlbmVyYXRvclwiKVxyXG4gICAgbm9kZS5uYW1lID0gdGhpcy52YWx1ZVxyXG4gIH0gZWxzZSBpZiAobGliZXJhbCAmJiB0aGlzLnR5cGUua2V5d29yZCkge1xyXG4gICAgbm9kZS5uYW1lID0gdGhpcy50eXBlLmtleXdvcmRcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy51bmV4cGVjdGVkKClcclxuICB9XHJcbiAgdGhpcy5uZXh0KClcclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSWRlbnRpZmllclwiKVxyXG59XHJcblxyXG4vLyBQYXJzZXMgeWllbGQgZXhwcmVzc2lvbiBpbnNpZGUgZ2VuZXJhdG9yLlxyXG5cclxucHAkMy5wYXJzZVlpZWxkID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpXHJcbiAgdGhpcy5uZXh0KClcclxuICBpZiAodGhpcy50eXBlID09IHR0LnNlbWkgfHwgdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSB8fCAodGhpcy50eXBlICE9IHR0LnN0YXIgJiYgIXRoaXMudHlwZS5zdGFydHNFeHByKSkge1xyXG4gICAgbm9kZS5kZWxlZ2F0ZSA9IGZhbHNlXHJcbiAgICBub2RlLmFyZ3VtZW50ID0gbnVsbFxyXG4gIH0gZWxzZSB7XHJcbiAgICBub2RlLmRlbGVnYXRlID0gdGhpcy5lYXQodHQuc3RhcilcclxuICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKVxyXG4gIH1cclxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiWWllbGRFeHByZXNzaW9uXCIpXHJcbn1cclxuXHJcbnZhciBwcCQ0ID0gUGFyc2VyLnByb3RvdHlwZVxyXG5cclxuLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHJhaXNlIGV4Y2VwdGlvbnMgb24gcGFyc2UgZXJyb3JzLiBJdFxyXG4vLyB0YWtlcyBhbiBvZmZzZXQgaW50ZWdlciAoaW50byB0aGUgY3VycmVudCBgaW5wdXRgKSB0byBpbmRpY2F0ZVxyXG4vLyB0aGUgbG9jYXRpb24gb2YgdGhlIGVycm9yLCBhdHRhY2hlcyB0aGUgcG9zaXRpb24gdG8gdGhlIGVuZFxyXG4vLyBvZiB0aGUgZXJyb3IgbWVzc2FnZSwgYW5kIHRoZW4gcmFpc2VzIGEgYFN5bnRheEVycm9yYCB3aXRoIHRoYXRcclxuLy8gbWVzc2FnZS5cclxuXHJcbnBwJDQucmFpc2UgPSBmdW5jdGlvbihwb3MsIG1lc3NhZ2UpIHtcclxuICB2YXIgbG9jID0gZ2V0TGluZUluZm8odGhpcy5pbnB1dCwgcG9zKVxyXG4gIG1lc3NhZ2UgKz0gXCIgKFwiICsgbG9jLmxpbmUgKyBcIjpcIiArIGxvYy5jb2x1bW4gKyBcIilcIlxyXG4gIHZhciBlcnIgPSBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSlcclxuICBlcnIucG9zID0gcG9zOyBlcnIubG9jID0gbG9jOyBlcnIucmFpc2VkQXQgPSB0aGlzLnBvc1xyXG4gIHRocm93IGVyclxyXG59XHJcblxyXG5wcCQ0LnJhaXNlUmVjb3ZlcmFibGUgPSBwcCQ0LnJhaXNlXHJcblxyXG5wcCQ0LmN1clBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5jdXJMaW5lLCB0aGlzLnBvcyAtIHRoaXMubGluZVN0YXJ0KVxyXG4gIH1cclxufVxyXG5cclxudmFyIE5vZGUgPSBmdW5jdGlvbiBOb2RlKHBhcnNlciwgcG9zLCBsb2MpIHtcclxuICB0aGlzLnR5cGUgPSBcIlwiXHJcbiAgdGhpcy5zdGFydCA9IHBvc1xyXG4gIHRoaXMuZW5kID0gMFxyXG4gIGlmIChwYXJzZXIub3B0aW9ucy5sb2NhdGlvbnMpXHJcbiAgICB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihwYXJzZXIsIGxvYylcclxuICBpZiAocGFyc2VyLm9wdGlvbnMuZGlyZWN0U291cmNlRmlsZSlcclxuICAgIHRoaXMuc291cmNlRmlsZSA9IHBhcnNlci5vcHRpb25zLmRpcmVjdFNvdXJjZUZpbGVcclxuICBpZiAocGFyc2VyLm9wdGlvbnMucmFuZ2VzKVxyXG4gICAgdGhpcy5yYW5nZSA9IFtwb3MsIDBdXHJcbn07XHJcblxyXG4vLyBTdGFydCBhbiBBU1Qgbm9kZSwgYXR0YWNoaW5nIGEgc3RhcnQgb2Zmc2V0LlxyXG5cclxudmFyIHBwJDUgPSBQYXJzZXIucHJvdG90eXBlXHJcblxyXG5wcCQ1LnN0YXJ0Tm9kZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBuZXcgTm9kZSh0aGlzLCB0aGlzLnN0YXJ0LCB0aGlzLnN0YXJ0TG9jKVxyXG59XHJcblxyXG5wcCQ1LnN0YXJ0Tm9kZUF0ID0gZnVuY3Rpb24ocG9zLCBsb2MpIHtcclxuICByZXR1cm4gbmV3IE5vZGUodGhpcywgcG9zLCBsb2MpXHJcbn1cclxuXHJcbi8vIEZpbmlzaCBhbiBBU1Qgbm9kZSwgYWRkaW5nIGB0eXBlYCBhbmQgYGVuZGAgcHJvcGVydGllcy5cclxuXHJcbmZ1bmN0aW9uIGZpbmlzaE5vZGVBdChub2RlLCB0eXBlLCBwb3MsIGxvYykge1xyXG4gIG5vZGUudHlwZSA9IHR5cGVcclxuICBub2RlLmVuZCA9IHBvc1xyXG4gIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKVxyXG4gICAgbm9kZS5sb2MuZW5kID0gbG9jXHJcbiAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpXHJcbiAgICBub2RlLnJhbmdlWzFdID0gcG9zXHJcbiAgcmV0dXJuIG5vZGVcclxufVxyXG5cclxucHAkNS5maW5pc2hOb2RlID0gZnVuY3Rpb24obm9kZSwgdHlwZSkge1xyXG4gIHJldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLCBub2RlLCB0eXBlLCB0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYylcclxufVxyXG5cclxuLy8gRmluaXNoIG5vZGUgYXQgZ2l2ZW4gcG9zaXRpb25cclxuXHJcbnBwJDUuZmluaXNoTm9kZUF0ID0gZnVuY3Rpb24obm9kZSwgdHlwZSwgcG9zLCBsb2MpIHtcclxuICByZXR1cm4gZmluaXNoTm9kZUF0LmNhbGwodGhpcywgbm9kZSwgdHlwZSwgcG9zLCBsb2MpXHJcbn1cclxuXHJcbnZhciBUb2tDb250ZXh0ID0gZnVuY3Rpb24gVG9rQ29udGV4dCh0b2tlbiwgaXNFeHByLCBwcmVzZXJ2ZVNwYWNlLCBvdmVycmlkZSkge1xyXG4gIHRoaXMudG9rZW4gPSB0b2tlblxyXG4gIHRoaXMuaXNFeHByID0gISFpc0V4cHJcclxuICB0aGlzLnByZXNlcnZlU3BhY2UgPSAhIXByZXNlcnZlU3BhY2VcclxuICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGVcclxufTtcclxuXHJcbnZhciB0eXBlcyA9IHtcclxuICBiX3N0YXQ6IG5ldyBUb2tDb250ZXh0KFwie1wiLCBmYWxzZSksXHJcbiAgYl9leHByOiBuZXcgVG9rQ29udGV4dChcIntcIiwgdHJ1ZSksXHJcbiAgYl90bXBsOiBuZXcgVG9rQ29udGV4dChcIiR7XCIsIHRydWUpLFxyXG4gIHBfc3RhdDogbmV3IFRva0NvbnRleHQoXCIoXCIsIGZhbHNlKSxcclxuICBwX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwiKFwiLCB0cnVlKSxcclxuICBxX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiYFwiLCB0cnVlLCB0cnVlLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gcC5yZWFkVG1wbFRva2VuKCk7IH0pLFxyXG4gIGZfZXhwcjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlKVxyXG59XHJcblxyXG52YXIgcHAkNiA9IFBhcnNlci5wcm90b3R5cGVcclxuXHJcbnBwJDYuaW5pdGlhbENvbnRleHQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gW3R5cGVzLmJfc3RhdF1cclxufVxyXG5cclxucHAkNi5icmFjZUlzQmxvY2sgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xyXG4gIGlmIChwcmV2VHlwZSA9PT0gdHQuY29sb24pIHtcclxuICAgIHZhciBwYXJlbnQgPSB0aGlzLmN1ckNvbnRleHQoKVxyXG4gICAgaWYgKHBhcmVudCA9PT0gdHlwZXMuYl9zdGF0IHx8IHBhcmVudCA9PT0gdHlwZXMuYl9leHByKVxyXG4gICAgICByZXR1cm4gIXBhcmVudC5pc0V4cHJcclxuICB9XHJcbiAgaWYgKHByZXZUeXBlID09PSB0dC5fcmV0dXJuKVxyXG4gICAgcmV0dXJuIGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSlcclxuICBpZiAocHJldlR5cGUgPT09IHR0Ll9lbHNlIHx8IHByZXZUeXBlID09PSB0dC5zZW1pIHx8IHByZXZUeXBlID09PSB0dC5lb2YgfHwgcHJldlR5cGUgPT09IHR0LnBhcmVuUilcclxuICAgIHJldHVybiB0cnVlXHJcbiAgaWYgKHByZXZUeXBlID09IHR0LmJyYWNlTClcclxuICAgIHJldHVybiB0aGlzLmN1ckNvbnRleHQoKSA9PT0gdHlwZXMuYl9zdGF0XHJcbiAgcmV0dXJuICF0aGlzLmV4cHJBbGxvd2VkXHJcbn1cclxuXHJcbnBwJDYudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XHJcbiAgdmFyIHVwZGF0ZSwgdHlwZSA9IHRoaXMudHlwZVxyXG4gIGlmICh0eXBlLmtleXdvcmQgJiYgcHJldlR5cGUgPT0gdHQuZG90KVxyXG4gICAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlXHJcbiAgZWxzZSBpZiAodXBkYXRlID0gdHlwZS51cGRhdGVDb250ZXh0KVxyXG4gICAgdXBkYXRlLmNhbGwodGhpcywgcHJldlR5cGUpXHJcbiAgZWxzZVxyXG4gICAgdGhpcy5leHByQWxsb3dlZCA9IHR5cGUuYmVmb3JlRXhwclxyXG59XHJcblxyXG4vLyBUb2tlbi1zcGVjaWZpYyBjb250ZXh0IHVwZGF0ZSBjb2RlXHJcblxyXG50dC5wYXJlblIudXBkYXRlQ29udGV4dCA9IHR0LmJyYWNlUi51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKHRoaXMuY29udGV4dC5sZW5ndGggPT0gMSkge1xyXG4gICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWVcclxuICAgIHJldHVyblxyXG4gIH1cclxuICB2YXIgb3V0ID0gdGhpcy5jb250ZXh0LnBvcCgpXHJcbiAgaWYgKG91dCA9PT0gdHlwZXMuYl9zdGF0ICYmIHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcy5mX2V4cHIpIHtcclxuICAgIHRoaXMuY29udGV4dC5wb3AoKVxyXG4gICAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlXHJcbiAgfSBlbHNlIGlmIChvdXQgPT09IHR5cGVzLmJfdG1wbCkge1xyXG4gICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWVcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5leHByQWxsb3dlZCA9ICFvdXQuaXNFeHByXHJcbiAgfVxyXG59XHJcblxyXG50dC5icmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XHJcbiAgdGhpcy5jb250ZXh0LnB1c2godGhpcy5icmFjZUlzQmxvY2socHJldlR5cGUpID8gdHlwZXMuYl9zdGF0IDogdHlwZXMuYl9leHByKVxyXG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlXHJcbn1cclxuXHJcbnR0LmRvbGxhckJyYWNlTC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5jb250ZXh0LnB1c2godHlwZXMuYl90bXBsKVxyXG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlXHJcbn1cclxuXHJcbnR0LnBhcmVuTC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcclxuICB2YXIgc3RhdGVtZW50UGFyZW5zID0gcHJldlR5cGUgPT09IHR0Ll9pZiB8fCBwcmV2VHlwZSA9PT0gdHQuX2ZvciB8fCBwcmV2VHlwZSA9PT0gdHQuX3dpdGggfHwgcHJldlR5cGUgPT09IHR0Ll93aGlsZVxyXG4gIHRoaXMuY29udGV4dC5wdXNoKHN0YXRlbWVudFBhcmVucyA/IHR5cGVzLnBfc3RhdCA6IHR5cGVzLnBfZXhwcilcclxuICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZVxyXG59XHJcblxyXG50dC5pbmNEZWMudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHRva0V4cHJBbGxvd2VkIHN0YXlzIHVuY2hhbmdlZFxyXG59XHJcblxyXG50dC5fZnVuY3Rpb24udXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XHJcbiAgaWYgKHByZXZUeXBlLmJlZm9yZUV4cHIgJiYgcHJldlR5cGUgIT09IHR0LnNlbWkgJiYgcHJldlR5cGUgIT09IHR0Ll9lbHNlICYmXHJcbiAgICAgICEoKHByZXZUeXBlID09PSB0dC5jb2xvbiB8fCBwcmV2VHlwZSA9PT0gdHQuYnJhY2VMKSAmJiB0aGlzLmN1ckNvbnRleHQoKSA9PT0gdHlwZXMuYl9zdGF0KSlcclxuICAgIHRoaXMuY29udGV4dC5wdXNoKHR5cGVzLmZfZXhwcilcclxuICB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2VcclxufVxyXG5cclxudHQuYmFja1F1b3RlLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcclxuICBpZiAodGhpcy5jdXJDb250ZXh0KCkgPT09IHR5cGVzLnFfdG1wbClcclxuICAgIHRoaXMuY29udGV4dC5wb3AoKVxyXG4gIGVsc2VcclxuICAgIHRoaXMuY29udGV4dC5wdXNoKHR5cGVzLnFfdG1wbClcclxuICB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2VcclxufVxyXG5cclxuLy8gT2JqZWN0IHR5cGUgdXNlZCB0byByZXByZXNlbnQgdG9rZW5zLiBOb3RlIHRoYXQgbm9ybWFsbHksIHRva2Vuc1xyXG4vLyBzaW1wbHkgZXhpc3QgYXMgcHJvcGVydGllcyBvbiB0aGUgcGFyc2VyIG9iamVjdC4gVGhpcyBpcyBvbmx5XHJcbi8vIHVzZWQgZm9yIHRoZSBvblRva2VuIGNhbGxiYWNrIGFuZCB0aGUgZXh0ZXJuYWwgdG9rZW5pemVyLlxyXG5cclxudmFyIFRva2VuID0gZnVuY3Rpb24gVG9rZW4ocCkge1xyXG4gIHRoaXMudHlwZSA9IHAudHlwZVxyXG4gIHRoaXMudmFsdWUgPSBwLnZhbHVlXHJcbiAgdGhpcy5zdGFydCA9IHAuc3RhcnRcclxuICB0aGlzLmVuZCA9IHAuZW5kXHJcbiAgaWYgKHAub3B0aW9ucy5sb2NhdGlvbnMpXHJcbiAgICB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihwLCBwLnN0YXJ0TG9jLCBwLmVuZExvYylcclxuICBpZiAocC5vcHRpb25zLnJhbmdlcylcclxuICAgIHRoaXMucmFuZ2UgPSBbcC5zdGFydCwgcC5lbmRdXHJcbn07XHJcblxyXG4vLyAjIyBUb2tlbml6ZXJcclxuXHJcbnZhciBwcCQ3ID0gUGFyc2VyLnByb3RvdHlwZVxyXG5cclxuLy8gQXJlIHdlIHJ1bm5pbmcgdW5kZXIgUmhpbm8/XHJcbnZhciBpc1JoaW5vID0gdHlwZW9mIFBhY2thZ2VzID09IFwib2JqZWN0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFBhY2thZ2VzKSA9PSBcIltvYmplY3QgSmF2YVBhY2thZ2VdXCJcclxuXHJcbi8vIE1vdmUgdG8gdGhlIG5leHQgdG9rZW5cclxuXHJcbnBwJDcubmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0aGlzLm9wdGlvbnMub25Ub2tlbilcclxuICAgIHRoaXMub3B0aW9ucy5vblRva2VuKG5ldyBUb2tlbih0aGlzKSlcclxuXHJcbiAgdGhpcy5sYXN0VG9rRW5kID0gdGhpcy5lbmRcclxuICB0aGlzLmxhc3RUb2tTdGFydCA9IHRoaXMuc3RhcnRcclxuICB0aGlzLmxhc3RUb2tFbmRMb2MgPSB0aGlzLmVuZExvY1xyXG4gIHRoaXMubGFzdFRva1N0YXJ0TG9jID0gdGhpcy5zdGFydExvY1xyXG4gIHRoaXMubmV4dFRva2VuKClcclxufVxyXG5cclxucHAkNy5nZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMubmV4dCgpXHJcbiAgcmV0dXJuIG5ldyBUb2tlbih0aGlzKVxyXG59XHJcblxyXG4vLyBJZiB3ZSdyZSBpbiBhbiBFUzYgZW52aXJvbm1lbnQsIG1ha2UgcGFyc2VycyBpdGVyYWJsZVxyXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIilcclxuICBwcCQ3W1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgIHJldHVybiB7bmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdG9rZW4gPSBzZWxmLmdldFRva2VuKClcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBkb25lOiB0b2tlbi50eXBlID09PSB0dC5lb2YsXHJcbiAgICAgICAgdmFsdWU6IHRva2VuXHJcbiAgICAgIH1cclxuICAgIH19XHJcbiAgfVxyXG5cclxuLy8gVG9nZ2xlIHN0cmljdCBtb2RlLiBSZS1yZWFkcyB0aGUgbmV4dCBudW1iZXIgb3Igc3RyaW5nIHRvIHBsZWFzZVxyXG4vLyBwZWRhbnRpYyB0ZXN0cyAoYFwidXNlIHN0cmljdFwiOyAwMTA7YCBzaG91bGQgZmFpbCkuXHJcblxyXG5wcCQ3LnNldFN0cmljdCA9IGZ1bmN0aW9uKHN0cmljdCkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB0aGlzLnN0cmljdCA9IHN0cmljdFxyXG4gIGlmICh0aGlzLnR5cGUgIT09IHR0Lm51bSAmJiB0aGlzLnR5cGUgIT09IHR0LnN0cmluZykgcmV0dXJuXHJcbiAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcclxuICAgIHdoaWxlICh0aGlzLnBvcyA8IHRoaXMubGluZVN0YXJ0KSB7XHJcbiAgICAgIHRoaXMkMS5saW5lU3RhcnQgPSB0aGlzJDEuaW5wdXQubGFzdEluZGV4T2YoXCJcXG5cIiwgdGhpcyQxLmxpbmVTdGFydCAtIDIpICsgMVxyXG4gICAgICAtLXRoaXMkMS5jdXJMaW5lXHJcbiAgICB9XHJcbiAgfVxyXG4gIHRoaXMubmV4dFRva2VuKClcclxufVxyXG5cclxucHAkNy5jdXJDb250ZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuY29udGV4dFt0aGlzLmNvbnRleHQubGVuZ3RoIC0gMV1cclxufVxyXG5cclxuLy8gUmVhZCBhIHNpbmdsZSB0b2tlbiwgdXBkYXRpbmcgdGhlIHBhcnNlciBvYmplY3QncyB0b2tlbi1yZWxhdGVkXHJcbi8vIHByb3BlcnRpZXMuXHJcblxyXG5wcCQ3Lm5leHRUb2tlbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjdXJDb250ZXh0ID0gdGhpcy5jdXJDb250ZXh0KClcclxuICBpZiAoIWN1ckNvbnRleHQgfHwgIWN1ckNvbnRleHQucHJlc2VydmVTcGFjZSkgdGhpcy5za2lwU3BhY2UoKVxyXG5cclxuICB0aGlzLnN0YXJ0ID0gdGhpcy5wb3NcclxuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgdGhpcy5zdGFydExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKVxyXG4gIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aCkgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuZW9mKVxyXG5cclxuICBpZiAoY3VyQ29udGV4dC5vdmVycmlkZSkgcmV0dXJuIGN1ckNvbnRleHQub3ZlcnJpZGUodGhpcylcclxuICBlbHNlIHRoaXMucmVhZFRva2VuKHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKSlcclxufVxyXG5cclxucHAkNy5yZWFkVG9rZW4gPSBmdW5jdGlvbihjb2RlKSB7XHJcbiAgLy8gSWRlbnRpZmllciBvciBrZXl3b3JkLiAnXFx1WFhYWCcgc2VxdWVuY2VzIGFyZSBhbGxvd2VkIGluXHJcbiAgLy8gaWRlbnRpZmllcnMsIHNvICdcXCcgYWxzbyBkaXNwYXRjaGVzIHRvIHRoYXQuXHJcbiAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KGNvZGUsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB8fCBjb2RlID09PSA5MiAvKiAnXFwnICovKVxyXG4gICAgcmV0dXJuIHRoaXMucmVhZFdvcmQoKVxyXG5cclxuICByZXR1cm4gdGhpcy5nZXRUb2tlbkZyb21Db2RlKGNvZGUpXHJcbn1cclxuXHJcbnBwJDcuZnVsbENoYXJDb2RlQXRQb3MgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgY29kZSA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcylcclxuICBpZiAoY29kZSA8PSAweGQ3ZmYgfHwgY29kZSA+PSAweGUwMDApIHJldHVybiBjb2RlXHJcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKVxyXG4gIHJldHVybiAoY29kZSA8PCAxMCkgKyBuZXh0IC0gMHgzNWZkYzAwXHJcbn1cclxuXHJcbnBwJDcuc2tpcEJsb2NrQ29tbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgc3RhcnRMb2MgPSB0aGlzLm9wdGlvbnMub25Db21tZW50ICYmIHRoaXMuY3VyUG9zaXRpb24oKVxyXG4gIHZhciBzdGFydCA9IHRoaXMucG9zLCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqL1wiLCB0aGlzLnBvcyArPSAyKVxyXG4gIGlmIChlbmQgPT09IC0xKSB0aGlzLnJhaXNlKHRoaXMucG9zIC0gMiwgXCJVbnRlcm1pbmF0ZWQgY29tbWVudFwiKVxyXG4gIHRoaXMucG9zID0gZW5kICsgMlxyXG4gIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKSB7XHJcbiAgICBsaW5lQnJlYWtHLmxhc3RJbmRleCA9IHN0YXJ0XHJcbiAgICB2YXIgbWF0Y2hcclxuICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWModGhpcy5pbnB1dCkpICYmIG1hdGNoLmluZGV4IDwgdGhpcy5wb3MpIHtcclxuICAgICAgKyt0aGlzJDEuY3VyTGluZVxyXG4gICAgICB0aGlzJDEubGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5vbkNvbW1lbnQpXHJcbiAgICB0aGlzLm9wdGlvbnMub25Db21tZW50KHRydWUsIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQgKyAyLCBlbmQpLCBzdGFydCwgdGhpcy5wb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9jLCB0aGlzLmN1clBvc2l0aW9uKCkpXHJcbn1cclxuXHJcbnBwJDcuc2tpcExpbmVDb21tZW50ID0gZnVuY3Rpb24oc3RhcnRTa2lwKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBzdGFydCA9IHRoaXMucG9zXHJcbiAgdmFyIHN0YXJ0TG9jID0gdGhpcy5vcHRpb25zLm9uQ29tbWVudCAmJiB0aGlzLmN1clBvc2l0aW9uKClcclxuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MrPXN0YXJ0U2tpcClcclxuICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCAmJiBjaCAhPT0gMTAgJiYgY2ggIT09IDEzICYmIGNoICE9PSA4MjMyICYmIGNoICE9PSA4MjMzKSB7XHJcbiAgICArK3RoaXMkMS5wb3NcclxuICAgIGNoID0gdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcylcclxuICB9XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5vbkNvbW1lbnQpXHJcbiAgICB0aGlzLm9wdGlvbnMub25Db21tZW50KGZhbHNlLCB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgc3RhcnRTa2lwLCB0aGlzLnBvcyksIHN0YXJ0LCB0aGlzLnBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRMb2MsIHRoaXMuY3VyUG9zaXRpb24oKSlcclxufVxyXG5cclxuLy8gQ2FsbGVkIGF0IHRoZSBzdGFydCBvZiB0aGUgcGFyc2UgYW5kIGFmdGVyIGV2ZXJ5IHRva2VuLiBTa2lwc1xyXG4vLyB3aGl0ZXNwYWNlIGFuZCBjb21tZW50cywgYW5kLlxyXG5cclxucHAkNy5za2lwU3BhY2UgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgdGhpcyQxID0gdGhpcztcclxuXHJcbiAgbG9vcDogd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGgpIHtcclxuICAgIHZhciBjaCA9IHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpXHJcbiAgICBzd2l0Y2ggKGNoKSB7XHJcbiAgICAgIGNhc2UgMzI6IGNhc2UgMTYwOiAvLyAnICdcclxuICAgICAgICArK3RoaXMkMS5wb3NcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIDEzOlxyXG4gICAgICAgIGlmICh0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zICsgMSkgPT09IDEwKSB7XHJcbiAgICAgICAgICArK3RoaXMkMS5wb3NcclxuICAgICAgICB9XHJcbiAgICAgIGNhc2UgMTA6IGNhc2UgODIzMjogY2FzZSA4MjMzOlxyXG4gICAgICAgICsrdGhpcyQxLnBvc1xyXG4gICAgICAgIGlmICh0aGlzJDEub3B0aW9ucy5sb2NhdGlvbnMpIHtcclxuICAgICAgICAgICsrdGhpcyQxLmN1ckxpbmVcclxuICAgICAgICAgIHRoaXMkMS5saW5lU3RhcnQgPSB0aGlzJDEucG9zXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgNDc6IC8vICcvJ1xyXG4gICAgICAgIHN3aXRjaCAodGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyArIDEpKSB7XHJcbiAgICAgICAgICBjYXNlIDQyOiAvLyAnKidcclxuICAgICAgICAgICAgdGhpcyQxLnNraXBCbG9ja0NvbW1lbnQoKVxyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSA0NzpcclxuICAgICAgICAgICAgdGhpcyQxLnNraXBMaW5lQ29tbWVudCgyKVxyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWsgbG9vcFxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlmIChjaCA+IDggJiYgY2ggPCAxNCB8fCBjaCA+PSA1NzYwICYmIG5vbkFTQ0lJd2hpdGVzcGFjZS50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKSkge1xyXG4gICAgICAgICAgKyt0aGlzJDEucG9zXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGJyZWFrIGxvb3BcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDYWxsZWQgYXQgdGhlIGVuZCBvZiBldmVyeSB0b2tlbi4gU2V0cyBgZW5kYCwgYHZhbGAsIGFuZFxyXG4vLyBtYWludGFpbnMgYGNvbnRleHRgIGFuZCBgZXhwckFsbG93ZWRgLCBhbmQgc2tpcHMgdGhlIHNwYWNlIGFmdGVyXHJcbi8vIHRoZSB0b2tlbiwgc28gdGhhdCB0aGUgbmV4dCBvbmUncyBgc3RhcnRgIHdpbGwgcG9pbnQgYXQgdGhlXHJcbi8vIHJpZ2h0IHBvc2l0aW9uLlxyXG5cclxucHAkNy5maW5pc2hUb2tlbiA9IGZ1bmN0aW9uKHR5cGUsIHZhbCkge1xyXG4gIHRoaXMuZW5kID0gdGhpcy5wb3NcclxuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgdGhpcy5lbmRMb2MgPSB0aGlzLmN1clBvc2l0aW9uKClcclxuICB2YXIgcHJldlR5cGUgPSB0aGlzLnR5cGVcclxuICB0aGlzLnR5cGUgPSB0eXBlXHJcbiAgdGhpcy52YWx1ZSA9IHZhbFxyXG5cclxuICB0aGlzLnVwZGF0ZUNvbnRleHQocHJldlR5cGUpXHJcbn1cclxuXHJcbi8vICMjIyBUb2tlbiByZWFkaW5nXHJcblxyXG4vLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0byBmZXRjaCB0aGUgbmV4dCB0b2tlbi4gSXRcclxuLy8gaXMgc29tZXdoYXQgb2JzY3VyZSwgYmVjYXVzZSBpdCB3b3JrcyBpbiBjaGFyYWN0ZXIgY29kZXMgcmF0aGVyXHJcbi8vIHRoYW4gY2hhcmFjdGVycywgYW5kIGJlY2F1c2Ugb3BlcmF0b3IgcGFyc2luZyBoYXMgYmVlbiBpbmxpbmVkXHJcbi8vIGludG8gaXQuXHJcbi8vXHJcbi8vIEFsbCBpbiB0aGUgbmFtZSBvZiBzcGVlZC5cclxuLy9cclxucHAkNy5yZWFkVG9rZW5fZG90ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKVxyXG4gIGlmIChuZXh0ID49IDQ4ICYmIG5leHQgPD0gNTcpIHJldHVybiB0aGlzLnJlYWROdW1iZXIodHJ1ZSlcclxuICB2YXIgbmV4dDIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKVxyXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBuZXh0ID09PSA0NiAmJiBuZXh0MiA9PT0gNDYpIHsgLy8gNDYgPSBkb3QgJy4nXHJcbiAgICB0aGlzLnBvcyArPSAzXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5lbGxpcHNpcylcclxuICB9IGVsc2Uge1xyXG4gICAgKyt0aGlzLnBvc1xyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuZG90KVxyXG4gIH1cclxufVxyXG5cclxucHAkNy5yZWFkVG9rZW5fc2xhc2ggPSBmdW5jdGlvbigpIHsgLy8gJy8nXHJcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKVxyXG4gIGlmICh0aGlzLmV4cHJBbGxvd2VkKSB7Kyt0aGlzLnBvczsgcmV0dXJuIHRoaXMucmVhZFJlZ2V4cCgpfVxyXG4gIGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLCAyKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LnNsYXNoLCAxKVxyXG59XHJcblxyXG5wcCQ3LnJlYWRUb2tlbl9tdWx0X21vZHVsb19leHAgPSBmdW5jdGlvbihjb2RlKSB7IC8vICclKidcclxuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpXHJcbiAgdmFyIHNpemUgPSAxXHJcbiAgdmFyIHRva2VudHlwZSA9IGNvZGUgPT09IDQyID8gdHQuc3RhciA6IHR0Lm1vZHVsb1xyXG5cclxuICAvLyBleHBvbmVudGlhdGlvbiBvcGVyYXRvciAqKiBhbmQgKio9XHJcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA3ICYmIG5leHQgPT09IDQyKSB7XHJcbiAgICArK3NpemVcclxuICAgIHRva2VudHlwZSA9IHR0LnN0YXJzdGFyXHJcbiAgICBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMilcclxuICB9XHJcblxyXG4gIGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLCBzaXplICsgMSlcclxuICByZXR1cm4gdGhpcy5maW5pc2hPcCh0b2tlbnR5cGUsIHNpemUpXHJcbn1cclxuXHJcbnBwJDcucmVhZFRva2VuX3BpcGVfYW1wID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnfCYnXHJcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKVxyXG4gIGlmIChuZXh0ID09PSBjb2RlKSByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSAxMjQgPyB0dC5sb2dpY2FsT1IgOiB0dC5sb2dpY2FsQU5ELCAyKVxyXG4gIGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLCAyKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKGNvZGUgPT09IDEyNCA/IHR0LmJpdHdpc2VPUiA6IHR0LmJpdHdpc2VBTkQsIDEpXHJcbn1cclxuXHJcbnBwJDcucmVhZFRva2VuX2NhcmV0ID0gZnVuY3Rpb24oKSB7IC8vICdeJ1xyXG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSlcclxuICBpZiAobmV4dCA9PT0gNjEpIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbiwgMilcclxuICByZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5iaXR3aXNlWE9SLCAxKVxyXG59XHJcblxyXG5wcCQ3LnJlYWRUb2tlbl9wbHVzX21pbiA9IGZ1bmN0aW9uKGNvZGUpIHsgLy8gJystJ1xyXG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSlcclxuICBpZiAobmV4dCA9PT0gY29kZSkge1xyXG4gICAgaWYgKG5leHQgPT0gNDUgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT0gNjIgJiZcclxuICAgICAgICBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5wb3MpKSkge1xyXG4gICAgICAvLyBBIGAtLT5gIGxpbmUgY29tbWVudFxyXG4gICAgICB0aGlzLnNraXBMaW5lQ29tbWVudCgzKVxyXG4gICAgICB0aGlzLnNraXBTcGFjZSgpXHJcbiAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbigpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5pbmNEZWMsIDIpXHJcbiAgfVxyXG4gIGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLCAyKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LnBsdXNNaW4sIDEpXHJcbn1cclxuXHJcbnBwJDcucmVhZFRva2VuX2x0X2d0ID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnPD4nXHJcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKVxyXG4gIHZhciBzaXplID0gMVxyXG4gIGlmIChuZXh0ID09PSBjb2RlKSB7XHJcbiAgICBzaXplID0gY29kZSA9PT0gNjIgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYyID8gMyA6IDJcclxuICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyBzaXplKSA9PT0gNjEpIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbiwgc2l6ZSArIDEpXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5iaXRTaGlmdCwgc2l6ZSlcclxuICB9XHJcbiAgaWYgKG5leHQgPT0gMzMgJiYgY29kZSA9PSA2MCAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PSA0NSAmJlxyXG4gICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAzKSA9PSA0NSkge1xyXG4gICAgaWYgKHRoaXMuaW5Nb2R1bGUpIHRoaXMudW5leHBlY3RlZCgpXHJcbiAgICAvLyBgPCEtLWAsIGFuIFhNTC1zdHlsZSBjb21tZW50IHRoYXQgc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGEgbGluZSBjb21tZW50XHJcbiAgICB0aGlzLnNraXBMaW5lQ29tbWVudCg0KVxyXG4gICAgdGhpcy5za2lwU3BhY2UoKVxyXG4gICAgcmV0dXJuIHRoaXMubmV4dFRva2VuKClcclxuICB9XHJcbiAgaWYgKG5leHQgPT09IDYxKSBzaXplID0gMlxyXG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LnJlbGF0aW9uYWwsIHNpemUpXHJcbn1cclxuXHJcbnBwJDcucmVhZFRva2VuX2VxX2V4Y2wgPSBmdW5jdGlvbihjb2RlKSB7IC8vICc9ISdcclxuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpXHJcbiAgaWYgKG5leHQgPT09IDYxKSByZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5lcXVhbGl0eSwgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYxID8gMyA6IDIpXHJcbiAgaWYgKGNvZGUgPT09IDYxICYmIG5leHQgPT09IDYyICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7IC8vICc9PidcclxuICAgIHRoaXMucG9zICs9IDJcclxuICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmFycm93KVxyXG4gIH1cclxuICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSA2MSA/IHR0LmVxIDogdHQucHJlZml4LCAxKVxyXG59XHJcblxyXG5wcCQ3LmdldFRva2VuRnJvbUNvZGUgPSBmdW5jdGlvbihjb2RlKSB7XHJcbiAgc3dpdGNoIChjb2RlKSB7XHJcbiAgICAvLyBUaGUgaW50ZXJwcmV0YXRpb24gb2YgYSBkb3QgZGVwZW5kcyBvbiB3aGV0aGVyIGl0IGlzIGZvbGxvd2VkXHJcbiAgICAvLyBieSBhIGRpZ2l0IG9yIGFub3RoZXIgdHdvIGRvdHMuXHJcbiAgY2FzZSA0NjogLy8gJy4nXHJcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZG90KClcclxuXHJcbiAgICAvLyBQdW5jdHVhdGlvbiB0b2tlbnMuXHJcbiAgY2FzZSA0MDogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQucGFyZW5MKVxyXG4gIGNhc2UgNDE6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LnBhcmVuUilcclxuICBjYXNlIDU5OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5zZW1pKVxyXG4gIGNhc2UgNDQ6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmNvbW1hKVxyXG4gIGNhc2UgOTE6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNrZXRMKVxyXG4gIGNhc2UgOTM6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNrZXRSKVxyXG4gIGNhc2UgMTIzOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5icmFjZUwpXHJcbiAgY2FzZSAxMjU6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNlUilcclxuICBjYXNlIDU4OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5jb2xvbilcclxuICBjYXNlIDYzOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5xdWVzdGlvbilcclxuXHJcbiAgY2FzZSA5NjogLy8gJ2AnXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNikgYnJlYWtcclxuICAgICsrdGhpcy5wb3NcclxuICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmJhY2tRdW90ZSlcclxuXHJcbiAgY2FzZSA0ODogLy8gJzAnXHJcbiAgICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpXHJcbiAgICBpZiAobmV4dCA9PT0gMTIwIHx8IG5leHQgPT09IDg4KSByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoMTYpIC8vICcweCcsICcwWCcgLSBoZXggbnVtYmVyXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcclxuICAgICAgaWYgKG5leHQgPT09IDExMSB8fCBuZXh0ID09PSA3OSkgcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDgpIC8vICcwbycsICcwTycgLSBvY3RhbCBudW1iZXJcclxuICAgICAgaWYgKG5leHQgPT09IDk4IHx8IG5leHQgPT09IDY2KSByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoMikgLy8gJzBiJywgJzBCJyAtIGJpbmFyeSBudW1iZXJcclxuICAgIH1cclxuICAgIC8vIEFueXRoaW5nIGVsc2UgYmVnaW5uaW5nIHdpdGggYSBkaWdpdCBpcyBhbiBpbnRlZ2VyLCBvY3RhbFxyXG4gICAgLy8gbnVtYmVyLCBvciBmbG9hdC5cclxuICBjYXNlIDQ5OiBjYXNlIDUwOiBjYXNlIDUxOiBjYXNlIDUyOiBjYXNlIDUzOiBjYXNlIDU0OiBjYXNlIDU1OiBjYXNlIDU2OiBjYXNlIDU3OiAvLyAxLTlcclxuICAgIHJldHVybiB0aGlzLnJlYWROdW1iZXIoZmFsc2UpXHJcblxyXG4gICAgLy8gUXVvdGVzIHByb2R1Y2Ugc3RyaW5ncy5cclxuICBjYXNlIDM0OiBjYXNlIDM5OiAvLyAnXCInLCBcIidcIlxyXG4gICAgcmV0dXJuIHRoaXMucmVhZFN0cmluZyhjb2RlKVxyXG5cclxuICAgIC8vIE9wZXJhdG9ycyBhcmUgcGFyc2VkIGlubGluZSBpbiB0aW55IHN0YXRlIG1hY2hpbmVzLiAnPScgKDYxKSBpc1xyXG4gICAgLy8gb2Z0ZW4gcmVmZXJyZWQgdG8uIGBmaW5pc2hPcGAgc2ltcGx5IHNraXBzIHRoZSBhbW91bnQgb2ZcclxuICAgIC8vIGNoYXJhY3RlcnMgaXQgaXMgZ2l2ZW4gYXMgc2Vjb25kIGFyZ3VtZW50LCBhbmQgcmV0dXJucyBhIHRva2VuXHJcbiAgICAvLyBvZiB0aGUgdHlwZSBnaXZlbiBieSBpdHMgZmlyc3QgYXJndW1lbnQuXHJcblxyXG4gIGNhc2UgNDc6IC8vICcvJ1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3NsYXNoKClcclxuXHJcbiAgY2FzZSAzNzogY2FzZSA0MjogLy8gJyUqJ1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX211bHRfbW9kdWxvX2V4cChjb2RlKVxyXG5cclxuICBjYXNlIDEyNDogY2FzZSAzODogLy8gJ3wmJ1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BpcGVfYW1wKGNvZGUpXHJcblxyXG4gIGNhc2UgOTQ6IC8vICdeJ1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2NhcmV0KClcclxuXHJcbiAgY2FzZSA0MzogY2FzZSA0NTogLy8gJystJ1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BsdXNfbWluKGNvZGUpXHJcblxyXG4gIGNhc2UgNjA6IGNhc2UgNjI6IC8vICc8PidcclxuICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9sdF9ndChjb2RlKVxyXG5cclxuICBjYXNlIDYxOiBjYXNlIDMzOiAvLyAnPSEnXHJcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZXFfZXhjbChjb2RlKVxyXG5cclxuICBjYXNlIDEyNjogLy8gJ34nXHJcbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5wcmVmaXgsIDEpXHJcbiAgfVxyXG5cclxuICB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyICdcIiArIGNvZGVQb2ludFRvU3RyaW5nKGNvZGUpICsgXCInXCIpXHJcbn1cclxuXHJcbnBwJDcuZmluaXNoT3AgPSBmdW5jdGlvbih0eXBlLCBzaXplKSB7XHJcbiAgdmFyIHN0ciA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5wb3MsIHRoaXMucG9zICsgc2l6ZSlcclxuICB0aGlzLnBvcyArPSBzaXplXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgc3RyKVxyXG59XHJcblxyXG4vLyBQYXJzZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4gU29tZSBjb250ZXh0LWF3YXJlbmVzcyBpcyBuZWNlc3NhcnksXHJcbi8vIHNpbmNlIGEgJy8nIGluc2lkZSBhICdbXScgc2V0IGRvZXMgbm90IGVuZCB0aGUgZXhwcmVzc2lvbi5cclxuXHJcbmZ1bmN0aW9uIHRyeUNyZWF0ZVJlZ2V4cChzcmMsIGZsYWdzLCB0aHJvd0Vycm9yQXQsIHBhcnNlcikge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzcmMsIGZsYWdzKVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGlmICh0aHJvd0Vycm9yQXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSBwYXJzZXIucmFpc2UodGhyb3dFcnJvckF0LCBcIkVycm9yIHBhcnNpbmcgcmVndWxhciBleHByZXNzaW9uOiBcIiArIGUubWVzc2FnZSlcclxuICAgICAgdGhyb3cgZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxudmFyIHJlZ2V4cFVuaWNvZGVTdXBwb3J0ID0gISF0cnlDcmVhdGVSZWdleHAoXCJcXHVmZmZmXCIsIFwidVwiKVxyXG5cclxucHAkNy5yZWFkUmVnZXhwID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBlc2NhcGVkLCBpbkNsYXNzLCBzdGFydCA9IHRoaXMucG9zXHJcbiAgZm9yICg7Oykge1xyXG4gICAgaWYgKHRoaXMkMS5wb3MgPj0gdGhpcyQxLmlucHV0Lmxlbmd0aCkgdGhpcyQxLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIilcclxuICAgIHZhciBjaCA9IHRoaXMkMS5pbnB1dC5jaGFyQXQodGhpcyQxLnBvcylcclxuICAgIGlmIChsaW5lQnJlYWsudGVzdChjaCkpIHRoaXMkMS5yYWlzZShzdGFydCwgXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpXHJcbiAgICBpZiAoIWVzY2FwZWQpIHtcclxuICAgICAgaWYgKGNoID09PSBcIltcIikgaW5DbGFzcyA9IHRydWVcclxuICAgICAgZWxzZSBpZiAoY2ggPT09IFwiXVwiICYmIGluQ2xhc3MpIGluQ2xhc3MgPSBmYWxzZVxyXG4gICAgICBlbHNlIGlmIChjaCA9PT0gXCIvXCIgJiYgIWluQ2xhc3MpIGJyZWFrXHJcbiAgICAgIGVzY2FwZWQgPSBjaCA9PT0gXCJcXFxcXCJcclxuICAgIH0gZWxzZSBlc2NhcGVkID0gZmFsc2VcclxuICAgICsrdGhpcyQxLnBvc1xyXG4gIH1cclxuICB2YXIgY29udGVudCA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKVxyXG4gICsrdGhpcy5wb3NcclxuICAvLyBOZWVkIHRvIHVzZSBgcmVhZFdvcmQxYCBiZWNhdXNlICdcXHVYWFhYJyBzZXF1ZW5jZXMgYXJlIGFsbG93ZWRcclxuICAvLyBoZXJlIChkb24ndCBhc2spLlxyXG4gIHZhciBtb2RzID0gdGhpcy5yZWFkV29yZDEoKVxyXG4gIHZhciB0bXAgPSBjb250ZW50LCB0bXBGbGFncyA9IFwiXCJcclxuICBpZiAobW9kcykge1xyXG4gICAgdmFyIHZhbGlkRmxhZ3MgPSAvXltnaW1dKiQvXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHZhbGlkRmxhZ3MgPSAvXltnaW11eV0qJC9cclxuICAgIGlmICghdmFsaWRGbGFncy50ZXN0KG1vZHMpKSB0aGlzLnJhaXNlKHN0YXJ0LCBcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uIGZsYWdcIilcclxuICAgIGlmIChtb2RzLmluZGV4T2YoXCJ1XCIpID49IDApIHtcclxuICAgICAgaWYgKHJlZ2V4cFVuaWNvZGVTdXBwb3J0KSB7XHJcbiAgICAgICAgdG1wRmxhZ3MgPSBcInVcIlxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlcGxhY2UgZWFjaCBhc3RyYWwgc3ltYm9sIGFuZCBldmVyeSBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZSB0aGF0XHJcbiAgICAgICAgLy8gcG9zc2libHkgcmVwcmVzZW50cyBhbiBhc3RyYWwgc3ltYm9sIG9yIGEgcGFpcmVkIHN1cnJvZ2F0ZSB3aXRoIGFcclxuICAgICAgICAvLyBzaW5nbGUgQVNDSUkgc3ltYm9sIHRvIGF2b2lkIHRocm93aW5nIG9uIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdFxyXG4gICAgICAgIC8vIGFyZSBvbmx5IHZhbGlkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIGAvdWAgZmxhZy5cclxuICAgICAgICAvLyBOb3RlOiByZXBsYWNpbmcgd2l0aCB0aGUgQVNDSUkgc3ltYm9sIGB4YCBtaWdodCBjYXVzZSBmYWxzZVxyXG4gICAgICAgIC8vIG5lZ2F0aXZlcyBpbiB1bmxpa2VseSBzY2VuYXJpb3MuIEZvciBleGFtcGxlLCBgW1xcdXs2MX0tYl1gIGlzIGFcclxuICAgICAgICAvLyBwZXJmZWN0bHkgdmFsaWQgcGF0dGVybiB0aGF0IGlzIGVxdWl2YWxlbnQgdG8gYFthLWJdYCwgYnV0IGl0IHdvdWxkXHJcbiAgICAgICAgLy8gYmUgcmVwbGFjZWQgYnkgYFt4LWJdYCB3aGljaCB0aHJvd3MgYW4gZXJyb3IuXHJcbiAgICAgICAgdG1wID0gdG1wLnJlcGxhY2UoL1xcXFx1XFx7KFswLTlhLWZBLUZdKylcXH0vZywgZnVuY3Rpb24gKF9tYXRjaCwgY29kZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICBjb2RlID0gTnVtYmVyKFwiMHhcIiArIGNvZGUpXHJcbiAgICAgICAgICBpZiAoY29kZSA+IDB4MTBGRkZGKSB0aGlzJDEucmFpc2Uoc3RhcnQgKyBvZmZzZXQgKyAzLCBcIkNvZGUgcG9pbnQgb3V0IG9mIGJvdW5kc1wiKVxyXG4gICAgICAgICAgcmV0dXJuIFwieFwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICB0bXAgPSB0bXAucmVwbGFjZSgvXFxcXHUoW2EtZkEtRjAtOV17NH0pfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZywgXCJ4XCIpXHJcbiAgICAgICAgdG1wRmxhZ3MgPSB0bXBGbGFncy5yZXBsYWNlKFwidVwiLCBcIlwiKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIERldGVjdCBpbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXHJcbiAgdmFyIHZhbHVlID0gbnVsbFxyXG4gIC8vIFJoaW5vJ3MgcmVndWxhciBleHByZXNzaW9uIHBhcnNlciBpcyBmbGFreSBhbmQgdGhyb3dzIHVuY2F0Y2hhYmxlIGV4Y2VwdGlvbnMsXHJcbiAgLy8gc28gZG9uJ3QgZG8gZGV0ZWN0aW9uIGlmIHdlIGFyZSBydW5uaW5nIHVuZGVyIFJoaW5vXHJcbiAgaWYgKCFpc1JoaW5vKSB7XHJcbiAgICB0cnlDcmVhdGVSZWdleHAodG1wLCB0bXBGbGFncywgc3RhcnQsIHRoaXMpXHJcbiAgICAvLyBHZXQgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0IGZvciB0aGlzIHBhdHRlcm4tZmxhZyBwYWlyLCBvciBgbnVsbGAgaW5cclxuICAgIC8vIGNhc2UgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBzdXBwb3J0IHRoZSBmbGFncyBpdCB1c2VzLlxyXG4gICAgdmFsdWUgPSB0cnlDcmVhdGVSZWdleHAoY29udGVudCwgbW9kcylcclxuICB9XHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQucmVnZXhwLCB7cGF0dGVybjogY29udGVudCwgZmxhZ3M6IG1vZHMsIHZhbHVlOiB2YWx1ZX0pXHJcbn1cclxuXHJcbi8vIFJlYWQgYW4gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFkaXguIFJldHVybiBudWxsIGlmIHplcm8gZGlnaXRzXHJcbi8vIHdlcmUgcmVhZCwgdGhlIGludGVnZXIgdmFsdWUgb3RoZXJ3aXNlLiBXaGVuIGBsZW5gIGlzIGdpdmVuLCB0aGlzXHJcbi8vIHdpbGwgcmV0dXJuIGBudWxsYCB1bmxlc3MgdGhlIGludGVnZXIgaGFzIGV4YWN0bHkgYGxlbmAgZGlnaXRzLlxyXG5cclxucHAkNy5yZWFkSW50ID0gZnVuY3Rpb24ocmFkaXgsIGxlbikge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgc3RhcnQgPSB0aGlzLnBvcywgdG90YWwgPSAwXHJcbiAgZm9yICh2YXIgaSA9IDAsIGUgPSBsZW4gPT0gbnVsbCA/IEluZmluaXR5IDogbGVuOyBpIDwgZTsgKytpKSB7XHJcbiAgICB2YXIgY29kZSA9IHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpLCB2YWxcclxuICAgIGlmIChjb2RlID49IDk3KSB2YWwgPSBjb2RlIC0gOTcgKyAxMCAvLyBhXHJcbiAgICBlbHNlIGlmIChjb2RlID49IDY1KSB2YWwgPSBjb2RlIC0gNjUgKyAxMCAvLyBBXHJcbiAgICBlbHNlIGlmIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHZhbCA9IGNvZGUgLSA0OCAvLyAwLTlcclxuICAgIGVsc2UgdmFsID0gSW5maW5pdHlcclxuICAgIGlmICh2YWwgPj0gcmFkaXgpIGJyZWFrXHJcbiAgICArK3RoaXMkMS5wb3NcclxuICAgIHRvdGFsID0gdG90YWwgKiByYWRpeCArIHZhbFxyXG4gIH1cclxuICBpZiAodGhpcy5wb3MgPT09IHN0YXJ0IHx8IGxlbiAhPSBudWxsICYmIHRoaXMucG9zIC0gc3RhcnQgIT09IGxlbikgcmV0dXJuIG51bGxcclxuXHJcbiAgcmV0dXJuIHRvdGFsXHJcbn1cclxuXHJcbnBwJDcucmVhZFJhZGl4TnVtYmVyID0gZnVuY3Rpb24ocmFkaXgpIHtcclxuICB0aGlzLnBvcyArPSAyIC8vIDB4XHJcbiAgdmFyIHZhbCA9IHRoaXMucmVhZEludChyYWRpeClcclxuICBpZiAodmFsID09IG51bGwpIHRoaXMucmFpc2UodGhpcy5zdGFydCArIDIsIFwiRXhwZWN0ZWQgbnVtYmVyIGluIHJhZGl4IFwiICsgcmFkaXgpXHJcbiAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKSkpIHRoaXMucmFpc2UodGhpcy5wb3MsIFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIilcclxuICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5udW0sIHZhbClcclxufVxyXG5cclxuLy8gUmVhZCBhbiBpbnRlZ2VyLCBvY3RhbCBpbnRlZ2VyLCBvciBmbG9hdGluZy1wb2ludCBudW1iZXIuXHJcblxyXG5wcCQ3LnJlYWROdW1iZXIgPSBmdW5jdGlvbihzdGFydHNXaXRoRG90KSB7XHJcbiAgdmFyIHN0YXJ0ID0gdGhpcy5wb3MsIGlzRmxvYXQgPSBmYWxzZSwgb2N0YWwgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSA0OFxyXG4gIGlmICghc3RhcnRzV2l0aERvdCAmJiB0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB0aGlzLnJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpXHJcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpXHJcbiAgaWYgKG5leHQgPT09IDQ2KSB7IC8vICcuJ1xyXG4gICAgKyt0aGlzLnBvc1xyXG4gICAgdGhpcy5yZWFkSW50KDEwKVxyXG4gICAgaXNGbG9hdCA9IHRydWVcclxuICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpXHJcbiAgfVxyXG4gIGlmIChuZXh0ID09PSA2OSB8fCBuZXh0ID09PSAxMDEpIHsgLy8gJ2VFJ1xyXG4gICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKVxyXG4gICAgaWYgKG5leHQgPT09IDQzIHx8IG5leHQgPT09IDQ1KSArK3RoaXMucG9zIC8vICcrLSdcclxuICAgIGlmICh0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB0aGlzLnJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpXHJcbiAgICBpc0Zsb2F0ID0gdHJ1ZVxyXG4gIH1cclxuICBpZiAoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSkgdGhpcy5yYWlzZSh0aGlzLnBvcywgXCJJZGVudGlmaWVyIGRpcmVjdGx5IGFmdGVyIG51bWJlclwiKVxyXG5cclxuICB2YXIgc3RyID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5wb3MpLCB2YWxcclxuICBpZiAoaXNGbG9hdCkgdmFsID0gcGFyc2VGbG9hdChzdHIpXHJcbiAgZWxzZSBpZiAoIW9jdGFsIHx8IHN0ci5sZW5ndGggPT09IDEpIHZhbCA9IHBhcnNlSW50KHN0ciwgMTApXHJcbiAgZWxzZSBpZiAoL1s4OV0vLnRlc3Qoc3RyKSB8fCB0aGlzLnN0cmljdCkgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKVxyXG4gIGVsc2UgdmFsID0gcGFyc2VJbnQoc3RyLCA4KVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0Lm51bSwgdmFsKVxyXG59XHJcblxyXG4vLyBSZWFkIGEgc3RyaW5nIHZhbHVlLCBpbnRlcnByZXRpbmcgYmFja3NsYXNoLWVzY2FwZXMuXHJcblxyXG5wcCQ3LnJlYWRDb2RlUG9pbnQgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpLCBjb2RlXHJcblxyXG4gIGlmIChjaCA9PT0gMTIzKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNikgdGhpcy51bmV4cGVjdGVkKClcclxuICAgIHZhciBjb2RlUG9zID0gKyt0aGlzLnBvc1xyXG4gICAgY29kZSA9IHRoaXMucmVhZEhleENoYXIodGhpcy5pbnB1dC5pbmRleE9mKCd9JywgdGhpcy5wb3MpIC0gdGhpcy5wb3MpXHJcbiAgICArK3RoaXMucG9zXHJcbiAgICBpZiAoY29kZSA+IDB4MTBGRkZGKSB0aGlzLnJhaXNlKGNvZGVQb3MsIFwiQ29kZSBwb2ludCBvdXQgb2YgYm91bmRzXCIpXHJcbiAgfSBlbHNlIHtcclxuICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKDQpXHJcbiAgfVxyXG4gIHJldHVybiBjb2RlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvZGVQb2ludFRvU3RyaW5nKGNvZGUpIHtcclxuICAvLyBVVEYtMTYgRGVjb2RpbmdcclxuICBpZiAoY29kZSA8PSAweEZGRkYpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXHJcbiAgY29kZSAtPSAweDEwMDAwXHJcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGUgPj4gMTApICsgMHhEODAwLCAoY29kZSAmIDEwMjMpICsgMHhEQzAwKVxyXG59XHJcblxyXG5wcCQ3LnJlYWRTdHJpbmcgPSBmdW5jdGlvbihxdW90ZSkge1xyXG4gIHZhciB0aGlzJDEgPSB0aGlzO1xyXG5cclxuICB2YXIgb3V0ID0gXCJcIiwgY2h1bmtTdGFydCA9ICsrdGhpcy5wb3NcclxuICBmb3IgKDs7KSB7XHJcbiAgICBpZiAodGhpcyQxLnBvcyA+PSB0aGlzJDEuaW5wdXQubGVuZ3RoKSB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIilcclxuICAgIHZhciBjaCA9IHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpXHJcbiAgICBpZiAoY2ggPT09IHF1b3RlKSBicmVha1xyXG4gICAgaWYgKGNoID09PSA5MikgeyAvLyAnXFwnXHJcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcylcclxuICAgICAgb3V0ICs9IHRoaXMkMS5yZWFkRXNjYXBlZENoYXIoZmFsc2UpXHJcbiAgICAgIGNodW5rU3RhcnQgPSB0aGlzJDEucG9zXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaXNOZXdMaW5lKGNoKSkgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgc3RyaW5nIGNvbnN0YW50XCIpXHJcbiAgICAgICsrdGhpcyQxLnBvc1xyXG4gICAgfVxyXG4gIH1cclxuICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcysrKVxyXG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LnN0cmluZywgb3V0KVxyXG59XHJcblxyXG4vLyBSZWFkcyB0ZW1wbGF0ZSBzdHJpbmcgdG9rZW5zLlxyXG5cclxucHAkNy5yZWFkVG1wbFRva2VuID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHZhciBvdXQgPSBcIlwiLCBjaHVua1N0YXJ0ID0gdGhpcy5wb3NcclxuICBmb3IgKDs7KSB7XHJcbiAgICBpZiAodGhpcyQxLnBvcyA+PSB0aGlzJDEuaW5wdXQubGVuZ3RoKSB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIlVudGVybWluYXRlZCB0ZW1wbGF0ZVwiKVxyXG4gICAgdmFyIGNoID0gdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcylcclxuICAgIGlmIChjaCA9PT0gOTYgfHwgY2ggPT09IDM2ICYmIHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MgKyAxKSA9PT0gMTIzKSB7IC8vICdgJywgJyR7J1xyXG4gICAgICBpZiAodGhpcyQxLnBvcyA9PT0gdGhpcyQxLnN0YXJ0ICYmIHRoaXMkMS50eXBlID09PSB0dC50ZW1wbGF0ZSkge1xyXG4gICAgICAgIGlmIChjaCA9PT0gMzYpIHtcclxuICAgICAgICAgIHRoaXMkMS5wb3MgKz0gMlxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0dC5kb2xsYXJCcmFjZUwpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICsrdGhpcyQxLnBvc1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0dC5iYWNrUXVvdGUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcylcclxuICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0dC50ZW1wbGF0ZSwgb3V0KVxyXG4gICAgfVxyXG4gICAgaWYgKGNoID09PSA5MikgeyAvLyAnXFwnXHJcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcylcclxuICAgICAgb3V0ICs9IHRoaXMkMS5yZWFkRXNjYXBlZENoYXIodHJ1ZSlcclxuICAgICAgY2h1bmtTdGFydCA9IHRoaXMkMS5wb3NcclxuICAgIH0gZWxzZSBpZiAoaXNOZXdMaW5lKGNoKSkge1xyXG4gICAgICBvdXQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpXHJcbiAgICAgICsrdGhpcyQxLnBvc1xyXG4gICAgICBzd2l0Y2ggKGNoKSB7XHJcbiAgICAgICAgY2FzZSAxMzpcclxuICAgICAgICAgIGlmICh0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKSA9PT0gMTApICsrdGhpcyQxLnBvc1xyXG4gICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICBvdXQgKz0gXCJcXG5cIlxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzJDEub3B0aW9ucy5sb2NhdGlvbnMpIHtcclxuICAgICAgICArK3RoaXMkMS5jdXJMaW5lXHJcbiAgICAgICAgdGhpcyQxLmxpbmVTdGFydCA9IHRoaXMkMS5wb3NcclxuICAgICAgfVxyXG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcyQxLnBvc1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgKyt0aGlzJDEucG9zXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBVc2VkIHRvIHJlYWQgZXNjYXBlZCBjaGFyYWN0ZXJzXHJcblxyXG5wcCQ3LnJlYWRFc2NhcGVkQ2hhciA9IGZ1bmN0aW9uKGluVGVtcGxhdGUpIHtcclxuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzLnBvcylcclxuICArK3RoaXMucG9zXHJcbiAgc3dpdGNoIChjaCkge1xyXG4gIGNhc2UgMTEwOiByZXR1cm4gXCJcXG5cIiAvLyAnbicgLT4gJ1xcbidcclxuICBjYXNlIDExNDogcmV0dXJuIFwiXFxyXCIgLy8gJ3InIC0+ICdcXHInXHJcbiAgY2FzZSAxMjA6IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucmVhZEhleENoYXIoMikpIC8vICd4J1xyXG4gIGNhc2UgMTE3OiByZXR1cm4gY29kZVBvaW50VG9TdHJpbmcodGhpcy5yZWFkQ29kZVBvaW50KCkpIC8vICd1J1xyXG4gIGNhc2UgMTE2OiByZXR1cm4gXCJcXHRcIiAvLyAndCcgLT4gJ1xcdCdcclxuICBjYXNlIDk4OiByZXR1cm4gXCJcXGJcIiAvLyAnYicgLT4gJ1xcYidcclxuICBjYXNlIDExODogcmV0dXJuIFwiXFx1MDAwYlwiIC8vICd2JyAtPiAnXFx1MDAwYidcclxuICBjYXNlIDEwMjogcmV0dXJuIFwiXFxmXCIgLy8gJ2YnIC0+ICdcXGYnXHJcbiAgY2FzZSAxMzogaWYgKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcykgPT09IDEwKSArK3RoaXMucG9zIC8vICdcXHJcXG4nXHJcbiAgY2FzZSAxMDogLy8gJyBcXG4nXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLmxpbmVTdGFydCA9IHRoaXMucG9zOyArK3RoaXMuY3VyTGluZSB9XHJcbiAgICByZXR1cm4gXCJcIlxyXG4gIGRlZmF1bHQ6XHJcbiAgICBpZiAoY2ggPj0gNDggJiYgY2ggPD0gNTUpIHtcclxuICAgICAgdmFyIG9jdGFsU3RyID0gdGhpcy5pbnB1dC5zdWJzdHIodGhpcy5wb3MgLSAxLCAzKS5tYXRjaCgvXlswLTddKy8pWzBdXHJcbiAgICAgIHZhciBvY3RhbCA9IHBhcnNlSW50KG9jdGFsU3RyLCA4KVxyXG4gICAgICBpZiAob2N0YWwgPiAyNTUpIHtcclxuICAgICAgICBvY3RhbFN0ciA9IG9jdGFsU3RyLnNsaWNlKDAsIC0xKVxyXG4gICAgICAgIG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpXHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9jdGFsU3RyICE9PSBcIjBcIiAmJiAodGhpcy5zdHJpY3QgfHwgaW5UZW1wbGF0ZSkpIHtcclxuICAgICAgICB0aGlzLnJhaXNlKHRoaXMucG9zIC0gMiwgXCJPY3RhbCBsaXRlcmFsIGluIHN0cmljdCBtb2RlXCIpXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5wb3MgKz0gb2N0YWxTdHIubGVuZ3RoIC0gMVxyXG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvY3RhbClcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKVxyXG4gIH1cclxufVxyXG5cclxuLy8gVXNlZCB0byByZWFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VzICgnXFx4JywgJ1xcdScsICdcXFUnKS5cclxuXHJcbnBwJDcucmVhZEhleENoYXIgPSBmdW5jdGlvbihsZW4pIHtcclxuICB2YXIgY29kZVBvcyA9IHRoaXMucG9zXHJcbiAgdmFyIG4gPSB0aGlzLnJlYWRJbnQoMTYsIGxlbilcclxuICBpZiAobiA9PT0gbnVsbCkgdGhpcy5yYWlzZShjb2RlUG9zLCBcIkJhZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlXCIpXHJcbiAgcmV0dXJuIG5cclxufVxyXG5cclxuLy8gUmVhZCBhbiBpZGVudGlmaWVyLCBhbmQgcmV0dXJuIGl0IGFzIGEgc3RyaW5nLiBTZXRzIGB0aGlzLmNvbnRhaW5zRXNjYFxyXG4vLyB0byB3aGV0aGVyIHRoZSB3b3JkIGNvbnRhaW5lZCBhICdcXHUnIGVzY2FwZS5cclxuLy9cclxuLy8gSW5jcmVtZW50YWxseSBhZGRzIG9ubHkgZXNjYXBlZCBjaGFycywgYWRkaW5nIG90aGVyIGNodW5rcyBhcy1pc1xyXG4vLyBhcyBhIG1pY3JvLW9wdGltaXphdGlvbi5cclxuXHJcbnBwJDcucmVhZFdvcmQxID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XHJcblxyXG4gIHRoaXMuY29udGFpbnNFc2MgPSBmYWxzZVxyXG4gIHZhciB3b3JkID0gXCJcIiwgZmlyc3QgPSB0cnVlLCBjaHVua1N0YXJ0ID0gdGhpcy5wb3NcclxuICB2YXIgYXN0cmFsID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDZcclxuICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCkge1xyXG4gICAgdmFyIGNoID0gdGhpcyQxLmZ1bGxDaGFyQ29kZUF0UG9zKClcclxuICAgIGlmIChpc0lkZW50aWZpZXJDaGFyKGNoLCBhc3RyYWwpKSB7XHJcbiAgICAgIHRoaXMkMS5wb3MgKz0gY2ggPD0gMHhmZmZmID8gMSA6IDJcclxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDkyKSB7IC8vIFwiXFxcIlxyXG4gICAgICB0aGlzJDEuY29udGFpbnNFc2MgPSB0cnVlXHJcbiAgICAgIHdvcmQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpXHJcbiAgICAgIHZhciBlc2NTdGFydCA9IHRoaXMkMS5wb3NcclxuICAgICAgaWYgKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcyQxLnBvcykgIT0gMTE3KSAvLyBcInVcIlxyXG4gICAgICAgIHRoaXMkMS5yYWlzZSh0aGlzJDEucG9zLCBcIkV4cGVjdGluZyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZSBcXFxcdVhYWFhcIilcclxuICAgICAgKyt0aGlzJDEucG9zXHJcbiAgICAgIHZhciBlc2MgPSB0aGlzJDEucmVhZENvZGVQb2ludCgpXHJcbiAgICAgIGlmICghKGZpcnN0ID8gaXNJZGVudGlmaWVyU3RhcnQgOiBpc0lkZW50aWZpZXJDaGFyKShlc2MsIGFzdHJhbCkpXHJcbiAgICAgICAgdGhpcyQxLnJhaXNlKGVzY1N0YXJ0LCBcIkludmFsaWQgVW5pY29kZSBlc2NhcGVcIilcclxuICAgICAgd29yZCArPSBjb2RlUG9pbnRUb1N0cmluZyhlc2MpXHJcbiAgICAgIGNodW5rU3RhcnQgPSB0aGlzJDEucG9zXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBicmVha1xyXG4gICAgfVxyXG4gICAgZmlyc3QgPSBmYWxzZVxyXG4gIH1cclxuICByZXR1cm4gd29yZCArIHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpXHJcbn1cclxuXHJcbi8vIFJlYWQgYW4gaWRlbnRpZmllciBvciBrZXl3b3JkIHRva2VuLiBXaWxsIGNoZWNrIGZvciByZXNlcnZlZFxyXG4vLyB3b3JkcyB3aGVuIG5lY2Vzc2FyeS5cclxuXHJcbnBwJDcucmVhZFdvcmQgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd29yZCA9IHRoaXMucmVhZFdvcmQxKClcclxuICB2YXIgdHlwZSA9IHR0Lm5hbWVcclxuICBpZiAoKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2IHx8ICF0aGlzLmNvbnRhaW5zRXNjKSAmJiB0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkpXHJcbiAgICB0eXBlID0ga2V5d29yZFR5cGVzW3dvcmRdXHJcbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgd29yZClcclxufVxyXG5cclxudmFyIHZlcnNpb24gPSBcIjMuMy4wXCJcclxuXHJcbi8vIFRoZSBtYWluIGV4cG9ydGVkIGludGVyZmFjZSAodW5kZXIgYHNlbGYuYWNvcm5gIHdoZW4gaW4gdGhlXHJcbi8vIGJyb3dzZXIpIGlzIGEgYHBhcnNlYCBmdW5jdGlvbiB0aGF0IHRha2VzIGEgY29kZSBzdHJpbmcgYW5kXHJcbi8vIHJldHVybnMgYW4gYWJzdHJhY3Qgc3ludGF4IHRyZWUgYXMgc3BlY2lmaWVkIGJ5IFtNb3ppbGxhIHBhcnNlclxyXG4vLyBBUEldW2FwaV0uXHJcbi8vXHJcbi8vIFthcGldOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1NwaWRlck1vbmtleS9QYXJzZXJfQVBJXHJcblxyXG5mdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgUGFyc2VyKG9wdGlvbnMsIGlucHV0KS5wYXJzZSgpXHJcbn1cclxuXHJcbi8vIFRoaXMgZnVuY3Rpb24gdHJpZXMgdG8gcGFyc2UgYSBzaW5nbGUgZXhwcmVzc2lvbiBhdCBhIGdpdmVuXHJcbi8vIG9mZnNldCBpbiBhIHN0cmluZy4gVXNlZnVsIGZvciBwYXJzaW5nIG1peGVkLWxhbmd1YWdlIGZvcm1hdHNcclxuLy8gdGhhdCBlbWJlZCBKYXZhU2NyaXB0IGV4cHJlc3Npb25zLlxyXG5cclxuZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uQXQoaW5wdXQsIHBvcywgb3B0aW9ucykge1xyXG4gIHZhciBwID0gbmV3IFBhcnNlcihvcHRpb25zLCBpbnB1dCwgcG9zKVxyXG4gIHAubmV4dFRva2VuKClcclxuICByZXR1cm4gcC5wYXJzZUV4cHJlc3Npb24oKVxyXG59XHJcblxyXG4vLyBBY29ybiBpcyBvcmdhbml6ZWQgYXMgYSB0b2tlbml6ZXIgYW5kIGEgcmVjdXJzaXZlLWRlc2NlbnQgcGFyc2VyLlxyXG4vLyBUaGUgYHRva2VuaXplcmAgZXhwb3J0IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byB0aGUgdG9rZW5pemVyLlxyXG5cclxuZnVuY3Rpb24gdG9rZW5pemVyKGlucHV0LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBQYXJzZXIob3B0aW9ucywgaW5wdXQpXHJcbn1cclxuXHJcbmV4cG9ydCB7IHZlcnNpb24sIHBhcnNlLCBwYXJzZUV4cHJlc3Npb25BdCwgdG9rZW5pemVyLCBQYXJzZXIsIHBsdWdpbnMsIGRlZmF1bHRPcHRpb25zLCBQb3NpdGlvbiwgU291cmNlTG9jYXRpb24sIGdldExpbmVJbmZvLCBOb2RlLCBUb2tlblR5cGUsIHR0IGFzIHRva1R5cGVzLCBUb2tDb250ZXh0LCB0eXBlcyBhcyB0b2tDb250ZXh0cywgaXNJZGVudGlmaWVyQ2hhciwgaXNJZGVudGlmaWVyU3RhcnQsIFRva2VuLCBpc05ld0xpbmUsIGxpbmVCcmVhaywgbGluZUJyZWFrRyB9O1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2JhYmVsc2JlcmcvanNpbnRlcnByZXRlci9hY29ybi5lcy5qc1xuICoqLyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwic3RhY2stZXMyMDE1LW1vZHVsZXNcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wic3RhY2stZXMyMDE1LW1vZHVsZXNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wic3RhY2stZXMyMDE1LW1vZHVsZXNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL1widXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgU3RhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9TdGFjaygpIHtcblx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTdGFjayk7XG5cdFxuXHQgICAgICAgIHRoaXMuYXJyID0gW107XG5cdCAgICB9XG5cdFxuXHQgICAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3RhY2ssIFt7XG5cdCAgICAgICAga2V5OiBcInB1c2hcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaChlbCkge1xuXHQgICAgICAgICAgICB0aGlzLmFyci5wdXNoKGVsKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInBvcFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3AoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYXJyLmxlbmd0aC0tO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwidG9wXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvcCgpIHtcblx0ICAgICAgICAgICAgLy8gVE9ETzogLmxhc3QoKSBub3QgZGVmaW5lZCBpbiBvbGRlciBub2RlIHZlcnNpb25zXG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLmFyci5sYXN0KCk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmFyclt0aGlzLmFyci5sZW5ndGggLSAxXTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcIndpdGhFbGVtZW50XCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdpdGhFbGVtZW50KGVsLCBjYWxsYmFjaywgY29udGV4dCkge1xuXHQgICAgICAgICAgICB0aGlzLnB1c2goZWwpO1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0KTtcblx0ICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgIHRoaXMucG9wKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgICByZXR1cm4gU3RhY2s7XG5cdH0oKTtcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuZGVmYXVsdCA9IFN0YWNrO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuXHQgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdHZhciBfZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuXHQgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG5cdCAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcblx0ICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcblx0ICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuXHQgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcblx0ICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuXHQgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuXHQgIH07XG5cdH0oKTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg0KSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0dmFyICRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLk9iamVjdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXtcblx0ICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0Ly8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXygxNiksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IF9fd2VicGFja19yZXF1aXJlX18oMTIpLmZ9KTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBnbG9iYWwgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG5cdCAgLCBjb3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG5cdCAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdCAgLCBoaWRlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuXHQgICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cdFxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG5cdCAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcblx0ICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuXHQgICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG5cdCAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcblx0ICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuXHQgICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG5cdCAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG5cdCAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuXHQgICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG5cdCAgICAsIGtleSwgb3duLCBvdXQ7XG5cdCAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG5cdCAgZm9yKGtleSBpbiBzb3VyY2Upe1xuXHQgICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG5cdCAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuXHQgICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuXHQgICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcblx0ICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG5cdCAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcblx0ICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG5cdCAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuXHQgICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcblx0ICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG5cdCAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuXHQgICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuXHQgICAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBDKXtcblx0ICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcblx0ICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG5cdCAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuXHQgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcblx0ICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuXHQgICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgfTtcblx0ICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuXHQgICAgICByZXR1cm4gRjtcblx0ICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuXHQgICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuXHQgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG5cdCAgICBpZihJU19QUk9UTyl7XG5cdCAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcblx0ICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcblx0ICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHQvLyB0eXBlIGJpdG1hcFxuXHQkZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuXHQkZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuXHQkZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuXHQkZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG5cdCRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuXHQkZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcblx0JGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG5cdCRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcblx0bW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcblx0dmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG5cdCAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRpZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcblx0aWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcblx0dmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuXHQgIGFGdW5jdGlvbihmbik7XG5cdCAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcblx0ICBzd2l0Y2gobGVuZ3RoKXtcblx0ICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG5cdCAgICB9O1xuXHQgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuXHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG5cdCAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG5cdH0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKVxuXHQgICwgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHQgICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFxuXHRleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuXHQgIGFuT2JqZWN0KE8pO1xuXHQgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcblx0ICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuXHQgICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuXHQgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblx0ICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcblx0ICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG5cdCAgcmV0dXJuIE87XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMTYpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KShmdW5jdGlvbigpe1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX3JlcXVpcmVfXygxOCkoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5cdG1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMTcpKGZ1bmN0aW9uKCl7XG5cdCAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAxNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuICEhZXhlYygpO1xuXHQgIH0gY2F0Y2goZSl7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5kb2N1bWVudFxuXHQgIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuXHQgICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHQvLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuXHQvLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcblx0ICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcblx0ICB2YXIgZm4sIHZhbDtcblx0ICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdCAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuXHQgIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdCAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcblx0ICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcblx0ICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcblx0ICAgIHZhbHVlICAgICAgIDogdmFsdWVcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NBeU5tTmxPVE01TnprM01EZ3hNV0U0TWpNMk5pSXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM1JoWTJzdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyZHNiMkpoYkM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIzSmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMk4wZUM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aExXWjFibU4wYVc5dUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaHBaR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXVTRMV1J2YlMxa1pXWnBibVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptRnBiSE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkc5dExXTnlaV0YwWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXdjbWx0YVhScGRtVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjSEp2Y0dWeWRIa3RaR1Z6WXk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFFzVHp0QlExWkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWQ1FVRmxPMEZCUTJZN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzB0RGRFTnhRaXhMTzBGQlEycENMRGhEUVVGak8wRkJRVUU3TzBGQlExWXNZMEZCU3l4SFFVRk1MRWRCUVZjc1JVRkJXRHRCUVVOSU96czdPemhDUVVWSkxFVXNSVUZCU1R0QlFVTk1MR3RDUVVGTExFZEJRVXdzUTBGQlV5eEpRVUZVTEVOQlFXTXNSVUZCWkR0QlFVTklPenM3SzBKQlJVczdRVUZEUml4clFrRkJTeXhIUVVGTUxFTkJRVk1zVFVGQlZEdEJRVU5JT3pzN0swSkJSVXM3UVVGRFJqdEJRVU5CTzBGQlEwRXNiMEpCUVU4c1MwRkJTeXhIUVVGTUxFTkJRVk1zUzBGQlN5eEhRVUZNTEVOQlFWTXNUVUZCVkN4SFFVRnJRaXhEUVVFelFpeERRVUZRTzBGQlEwZzdPenR4UTBGRlZ5eEZMRVZCUVVrc1VTeEZRVUZWTEU4c1JVRkJVenRCUVVNdlFpeHJRa0ZCU3l4SlFVRk1MRU5CUVZVc1JVRkJWanRCUVVOQkxHbENRVUZKTzBGQlEwRXNNRUpCUVZNc1NVRkJWQ3hEUVVGakxFOUJRV1E3UVVGRFNDeGpRVVpFTEZOQlJWVTdRVUZEVGl4elFrRkJTeXhIUVVGTU8wRkJRMGc3UVVGRFNqczdPenM3TWtOQk1VSm5RaXhMT3pzN096czdRVU5CY2tJN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5TUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRU3gxUTBGQmMwTXNkVU5CUVhWRExHZENRVUZuUWpzN1FVRkZOMFk3UVVGRFFUdEJRVU5CTEc5Q1FVRnRRaXhyUWtGQmEwSTdRVUZEY2tNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVWQlFVTXNSenM3T3pzN08wRkRNVUpFTEcxQ1FVRnJRaXgxUkRzN096czdPMEZEUVd4Q08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSenM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTEhORlFVRjFSU3d3UTBGQk1FTXNSVHM3T3pzN08wRkRSbXBJTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h2UlVGQmJVVTdRVUZEYmtVN1FVRkRRU3h6UmtGQmNVWTdRVUZEY2tZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVmM3UVVGRFdDeFZRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEdkRVFVRXJRenRCUVVNdlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hsUVVGak8wRkJRMlFzWlVGQll6dEJRVU5rTEdWQlFXTTdRVUZEWkN4bFFVRmpPMEZCUTJRc1owSkJRV1U3UVVGRFppeG5Ra0ZCWlR0QlFVTm1MR2RDUVVGbE8wRkJRMllzYVVKQlFXZENPMEZCUTJoQ0xEQkNPenM3T3pzN1FVTTFSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkME5CUVhWRExHZERPenM3T3pzN1FVTklka01zT0VKQlFUWkNPMEZCUXpkQ0xITkRRVUZ4UXl4blF6czdPenM3TzBGRFJISkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1J6czdPenM3TzBGRGJrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhMRlZCUVZVN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTBwQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTkdRVHRCUVVOQkxITkZRVUZ6UlN4blFrRkJaMElzVlVGQlZTeEhRVUZITzBGQlEyNUhMRVZCUVVNc1JUczdPenM3TzBGRFJrUTdRVUZEUVR0QlFVTkJMR3REUVVGcFF5eFJRVUZSTEdkQ1FVRm5RaXhWUVVGVkxFZEJRVWM3UVVGRGRFVXNSVUZCUXl4Rk96czdPenM3UVVOSVJEdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWNpTENKbWFXeGxJam9pYzNSaFkyc3RaWE15TURFMUxXMXZaSFZzWlhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRnZDJWaWNHRmphMVZ1YVhabGNuTmhiRTF2WkhWc1pVUmxabWx1YVhScGIyNG9jbTl2ZEN3Z1ptRmpkRzl5ZVNrZ2UxeHVYSFJwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MGJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXTjBiM0o1S0NrN1hHNWNkR1ZzYzJVZ2FXWW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0tWeHVYSFJjZEdSbFptbHVaU2hjSW5OMFlXTnJMV1Z6TWpBeE5TMXRiMlIxYkdWelhDSXNJRnRkTENCbVlXTjBiM0o1S1R0Y2JseDBaV3h6WlNCcFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MFpYaHdiM0owYzF0Y0luTjBZV05yTFdWek1qQXhOUzF0YjJSMWJHVnpYQ0pkSUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJsYkhObFhHNWNkRngwY205dmRGdGNJbk4wWVdOckxXVnpNakF4TlMxdGIyUjFiR1Z6WENKZElEMGdabUZqZEc5eWVTZ3BPMXh1ZlNrb2RHaHBjeXdnWm5WdVkzUnBiMjRvS1NCN1hHNXlaWFIxY200Z1hHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVYRzRnS2lvdklpd2lJRngwTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBkbUZ5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE1nUFNCN2ZUdGNibHh1SUZ4MEx5OGdWR2hsSUhKbGNYVnBjbVVnWm5WdVkzUnBiMjVjYmlCY2RHWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4dUlGeDBYSFF2THlCRGFHVmpheUJwWmlCdGIyUjFiR1VnYVhNZ2FXNGdZMkZqYUdWY2JpQmNkRngwYVdZb2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwcFhHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc1Y2JpQmNkRngwTHk4Z1EzSmxZWFJsSUdFZ2JtVjNJRzF2WkhWc1pTQW9ZVzVrSUhCMWRDQnBkQ0JwYm5SdklIUm9aU0JqWVdOb1pTbGNiaUJjZEZ4MGRtRnlJRzF2WkhWc1pTQTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRJRDBnZTF4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OUxGeHVJRngwWEhSY2RHbGtPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzYjJGa1pXUTZJR1poYkhObFhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBPMXh1WEc0Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmlCY2RGeDBiVzlrZFd4bExteHZZV1JsWkNBOUlIUnlkV1U3WEc1Y2JpQmNkRngwTHk4Z1VtVjBkWEp1SUhSb1pTQmxlSEJ2Y25SeklHOW1JSFJvWlNCdGIyUjFiR1ZjYmlCY2RGeDBjbVYwZFhKdUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dUlGeDBmVnh1WEc1Y2JpQmNkQzh2SUdWNGNHOXpaU0IwYUdVZ2JXOWtkV3hsY3lCdlltcGxZM1FnS0Y5ZmQyVmljR0ZqYTE5dGIyUjFiR1Z6WDE4cFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG0wZ1BTQnRiMlIxYkdWek8xeHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVqSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3p0Y2JseHVJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0E5SUZ3aVhDSTdYRzVjYmlCY2RDOHZJRXh2WVdRZ1pXNTBjbmtnYlc5a2RXeGxJR0Z1WkNCeVpYUjFjbTRnWlhod2IzSjBjMXh1SUZ4MGNtVjBkWEp1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b01DazdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQjNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQXlObU5sT1RNNU56azNNRGd4TVdFNE1qTTJObHh1SUNvcUx5SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZOMFlXTnJJSHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYSnlJRDBnVzEwN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEIxYzJnb1pXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ5Y2k1d2RYTm9LR1ZzS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQndiM0FvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aGNuSXViR1Z1WjNSb0xTMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZEc5d0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUM1c1lYTjBLQ2tnYm05MElHUmxabWx1WldRZ2FXNGdiMnhrWlhJZ2JtOWtaU0IyWlhKemFXOXVjMXh5WEc0Z0lDQWdJQ0FnSUM4dklISmxkSFZ5YmlCMGFHbHpMbUZ5Y2k1c1lYTjBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5VzNSb2FYTXVZWEp5TG14bGJtZDBhQ0F0SURGZE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSGRwZEdoRmJHVnRaVzUwS0dWc0xDQmpZV3hzWW1GamF5d2dZMjl1ZEdWNGRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSFZ6YUNobGJDazdYSEpjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzdVkyRnNiQ2hqYjI1MFpYaDBLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHWnBibUZzYkhrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Y0NncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5emRHRmpheTVxYzF4dUlDb3FMeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9hVzV6ZEdGdVkyVXNJRU52Ym5OMGNuVmpkRzl5S1NCN1hHNGdJR2xtSUNnaEtHbHVjM1JoYm1ObElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtUdGNiaUFnZlZ4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHh1ZG1GeUlGOWtaV1pwYm1WUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhsY0lpazdYRzVjYm5aaGNpQmZaR1ZtYVc1bFVISnZjR1Z5ZEhreUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlpHVm1hVzVsVUhKdmNHVnlkSGtwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHRnlaMlYwTENCd2NtOXdjeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmtaWE5qY21sd2RHOXlJRDBnY0hKdmNITmJhVjA3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9YQ0oyWVd4MVpWd2lJR2x1SUdSbGMyTnlhWEIwYjNJcElHUmxjMk55YVhCMGIzSXVkM0pwZEdGaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0tEQXNJRjlrWldacGJtVlFjbTl3WlhKMGVUSXVaR1ZtWVhWc2RDa29kR0Z5WjJWMExDQmtaWE5qY21sd2RHOXlMbXRsZVN3Z1pHVnpZM0pwY0hSdmNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaERiMjV6ZEhKMVkzUnZjaXdnY0hKdmRHOVFjbTl3Y3l3Z2MzUmhkR2xqVUhKdmNITXBJSHRjYmlBZ0lDQnBaaUFvY0hKdmRHOVFjbTl3Y3lrZ1pHVm1hVzVsVUhKdmNHVnlkR2xsY3loRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXNJSEJ5YjNSdlVISnZjSE1wTzF4dUlDQWdJR2xtSUNoemRHRjBhV05RY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE8xeHVJQ0FnSUhKbGRIVnliaUJEYjI1emRISjFZM1J2Y2p0Y2JpQWdmVHRjYm4wb0tUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNNdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ00xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTY3BPMXh1ZG1GeUlDUlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUxDQmtaWE5qS1h0Y2JpQWdjbVYwZFhKdUlDUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU3dnWkdWell5azdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTkZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiaTh2SURFNUxqRXVNaTQwSUM4Z01UVXVNaTR6TGpZZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcExDQW5UMkpxWldOMEp5d2dlMlJsWm1sdVpWQnliM0JsY25SNU9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bWZTazdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJRkJTVDFSUFZGbFFSU0E5SUNkd2NtOTBiM1I1Y0dVbk8xeHVYRzUyWVhJZ0pHVjRjRzl5ZENBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUc1aGJXVXNJSE52ZFhKalpTbDdYRzRnSUhaaGNpQkpVMTlHVDFKRFJVUWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUdYRzRnSUNBZ0xDQkpVMTlIVEU5Q1FVd2dQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUhYRzRnSUNBZ0xDQkpVMTlUVkVGVVNVTWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVRYRzRnSUNBZ0xDQkpVMTlRVWs5VVR5QWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVFYRzRnSUNBZ0xDQkpVMTlDU1U1RUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUNYRzRnSUNBZ0xDQkpVMTlYVWtGUUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVhYRzRnSUNBZ0xDQmxlSEJ2Y25SeklDQWdQU0JKVTE5SFRFOUNRVXdnUHlCamIzSmxJRG9nWTI5eVpWdHVZVzFsWFNCOGZDQW9ZMjl5WlZ0dVlXMWxYU0E5SUh0OUtWeHVJQ0FnSUN3Z1pYaHdVSEp2ZEc4Z0lEMGdaWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQjBZWEpuWlhRZ0lDQWdQU0JKVTE5SFRFOUNRVXdnUHlCbmJHOWlZV3dnT2lCSlUxOVRWRUZVU1VNZ1B5Qm5iRzlpWVd4YmJtRnRaVjBnT2lBb1oyeHZZbUZzVzI1aGJXVmRJSHg4SUh0OUtWdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQnJaWGtzSUc5M2Jpd2diM1YwTzF4dUlDQnBaaWhKVTE5SFRFOUNRVXdwYzI5MWNtTmxJRDBnYm1GdFpUdGNiaUFnWm05eUtHdGxlU0JwYmlCemIzVnlZMlVwZTF4dUlDQWdJQzh2SUdOdmJuUmhhVzV6SUdsdUlHNWhkR2wyWlZ4dUlDQWdJRzkzYmlBOUlDRkpVMTlHVDFKRFJVUWdKaVlnZEdGeVoyVjBJQ1ltSUhSaGNtZGxkRnRyWlhsZElDRTlQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvYjNkdUlDWW1JR3RsZVNCcGJpQmxlSEJ2Y25SektXTnZiblJwYm5WbE8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCdVlYUnBkbVVnYjNJZ2NHRnpjMlZrWEc0Z0lDQWdiM1YwSUQwZ2IzZHVJRDhnZEdGeVoyVjBXMnRsZVYwZ09pQnpiM1Z5WTJWYmEyVjVYVHRjYmlBZ0lDQXZMeUJ3Y21WMlpXNTBJR2RzYjJKaGJDQndiMnhzZFhScGIyNGdabTl5SUc1aGJXVnpjR0ZqWlhOY2JpQWdJQ0JsZUhCdmNuUnpXMnRsZVYwZ1BTQkpVMTlIVEU5Q1FVd2dKaVlnZEhsd1pXOW1JSFJoY21kbGRGdHJaWGxkSUNFOUlDZG1kVzVqZEdsdmJpY2dQeUJ6YjNWeVkyVmJhMlY1WFZ4dUlDQWdJQzh2SUdKcGJtUWdkR2x0WlhKeklIUnZJR2RzYjJKaGJDQm1iM0lnWTJGc2JDQm1jbTl0SUdWNGNHOXlkQ0JqYjI1MFpYaDBYRzRnSUNBZ09pQkpVMTlDU1U1RUlDWW1JRzkzYmlBL0lHTjBlQ2h2ZFhRc0lHZHNiMkpoYkNsY2JpQWdJQ0F2THlCM2NtRndJR2RzYjJKaGJDQmpiMjV6ZEhKMVkzUnZjbk1nWm05eUlIQnlaWFpsYm5RZ1kyaGhibWRsSUhSb1pXMGdhVzRnYkdsaWNtRnllVnh1SUNBZ0lEb2dTVk5mVjFKQlVDQW1KaUIwWVhKblpYUmJhMlY1WFNBOVBTQnZkWFFnUHlBb1puVnVZM1JwYjI0b1F5bDdYRzRnSUNBZ0lDQjJZWElnUmlBOUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdseklHbHVjM1JoYm1ObGIyWWdReWw3WEc0Z0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBd09pQnlaWFIxY200Z2JtVjNJRU03WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCdVpYY2dReWhoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb2djbVYwZFhKdUlHNWxkeUJES0dFc0lHSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ2NtVjBkWEp1SUc1bGR5QkRLR0VzSUdJc0lHTXBPMXh1SUNBZ0lDQWdJQ0I5SUhKbGRIVnliaUJETG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdSbHRRVWs5VVQxUlpVRVZkSUQwZ1ExdFFVazlVVDFSWlVFVmRPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFWTdYRzRnSUNBZ0x5OGdiV0ZyWlNCemRHRjBhV01nZG1WeWMybHZibk1nWm05eUlIQnliM1J2ZEhsd1pTQnRaWFJvYjJSelhHNGdJQ0FnZlNrb2IzVjBLU0E2SUVsVFgxQlNUMVJQSUNZbUlIUjVjR1Z2WmlCdmRYUWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTjBlQ2hHZFc1amRHbHZiaTVqWVd4c0xDQnZkWFFwSURvZ2IzVjBPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQndjbTkwYnlCdFpYUm9iMlJ6SUhSdklHTnZjbVV1SlVOUFRsTlVVbFZEVkU5U0pTNXRaWFJvYjJSekxpVk9RVTFGSlZ4dUlDQWdJR2xtS0VsVFgxQlNUMVJQS1h0Y2JpQWdJQ0FnSUNobGVIQnZjblJ6TG5acGNuUjFZV3dnZkh3Z0tHVjRjRzl5ZEhNdWRtbHlkSFZoYkNBOUlIdDlLU2xiYTJWNVhTQTlJRzkxZER0Y2JpQWdJQ0FnSUM4dklHVjRjRzl5ZENCd2NtOTBieUJ0WlhSb2IyUnpJSFJ2SUdOdmNtVXVKVU5QVGxOVVVsVkRWRTlTSlM1d2NtOTBiM1I1Y0dVdUpVNUJUVVVsWEc0Z0lDQWdJQ0JwWmloMGVYQmxJQ1lnSkdWNGNHOXlkQzVTSUNZbUlHVjRjRkJ5YjNSdklDWW1JQ0ZsZUhCUWNtOTBiMXRyWlhsZEtXaHBaR1VvWlhod1VISnZkRzhzSUd0bGVTd2diM1YwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc0dkx5QjBlWEJsSUdKcGRHMWhjRnh1SkdWNGNHOXlkQzVHSUQwZ01Uc2dJQ0F2THlCbWIzSmpaV1JjYmlSbGVIQnZjblF1UnlBOUlESTdJQ0FnTHk4Z1oyeHZZbUZzWEc0a1pYaHdiM0owTGxNZ1BTQTBPeUFnSUM4dklITjBZWFJwWTF4dUpHVjRjRzl5ZEM1UUlEMGdPRHNnSUNBdkx5QndjbTkwYjF4dUpHVjRjRzl5ZEM1Q0lEMGdNVFk3SUNBdkx5QmlhVzVrWEc0a1pYaHdiM0owTGxjZ1BTQXpNanNnSUM4dklIZHlZWEJjYmlSbGVIQnZjblF1VlNBOUlEWTBPeUFnTHk4Z2MyRm1aVnh1SkdWNGNHOXlkQzVTSUQwZ01USTRPeUF2THlCeVpXRnNJSEJ5YjNSdklHMWxkR2h2WkNCbWIzSWdZR3hwWW5KaGNubGdJRnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FrWlhod2IzSjBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWxlSEJ2Y25RdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTJYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZlbXh2YVhKdlkyc3ZZMjl5WlMxcWN5OXBjM04xWlhNdk9EWWphWE56ZFdWamIyMXRaVzUwTFRFeE5UYzFPVEF5T0Z4dWRtRnlJR2RzYjJKaGJDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1VFdGMGFDQTlQU0JOWVhSb1hHNGdJRDhnZDJsdVpHOTNJRG9nZEhsd1pXOW1JSE5sYkdZZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2MyVnNaaTVOWVhSb0lEMDlJRTFoZEdnZ1B5QnpaV3htSURvZ1JuVnVZM1JwYjI0b0ozSmxkSFZ5YmlCMGFHbHpKeWtvS1R0Y2JtbG1LSFI1Y0dWdlppQmZYMmNnUFQwZ0oyNTFiV0psY2ljcFgxOW5JRDBnWjJ4dlltRnNPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJkc2IySmhiQzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURkY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJblpoY2lCamIzSmxJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZG1WeWMybHZiam9nSnpJdU5DNHdKMzA3WEc1cFppaDBlWEJsYjJZZ1gxOWxJRDA5SUNkdWRXMWlaWEluS1Y5ZlpTQTlJR052Y21VN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNWtaV1pjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMjl5WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEaGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSWk4dklHOXdkR2x2Ym1Gc0lDOGdjMmx0Y0d4bElHTnZiblJsZUhRZ1ltbHVaR2x1WjF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOMGVDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGxjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaDBlWEJsYjJZZ2FYUWdJVDBnSjJaMWJtTjBhVzl1SnlsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhRZ0t5QW5JR2x6SUc1dmRDQmhJR1oxYm1OMGFXOXVJU2NwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloTFdaMWJtTjBhVzl1TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UQmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5aaGNpQmtVQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5bGNiaUFnTENCamNtVmhkR1ZFWlhOaklEMGdjbVZ4ZFdseVpTZ25MaTlmY0hKdmNHVnlkSGt0WkdWell5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0JyWlhrc0lIWmhiSFZsS1h0Y2JpQWdjbVYwZFhKdUlHUlFMbVlvYjJKcVpXTjBMQ0JyWlhrc0lHTnlaV0YwWlVSbGMyTW9NU3dnZG1Gc2RXVXBLVHRjYm4wZ09pQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHdGxlU3dnZG1Gc2RXVXBlMXh1SUNCdlltcGxZM1JiYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0J5WlhSMWNtNGdiMkpxWldOME8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXhYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJRWxGT0Y5RVQwMWZSRVZHU1U1RklEMGdjbVZ4ZFdseVpTZ25MaTlmYVdVNExXUnZiUzFrWldacGJtVW5LVnh1SUNBc0lIUnZVSEpwYldsMGFYWmxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVR0Y2JseHVaWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTQTZJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcGUxeHVJQ0JoYms5aWFtVmpkQ2hQS1R0Y2JpQWdVQ0E5SUhSdlVISnBiV2wwYVhabEtGQXNJSFJ5ZFdVcE8xeHVJQ0JoYms5aWFtVmpkQ2hCZEhSeWFXSjFkR1Z6S1R0Y2JpQWdhV1lvU1VVNFgwUlBUVjlFUlVaSlRrVXBkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdaRkFvVHl3Z1VDd2dRWFIwY21saWRYUmxjeWs3WEc0Z0lIMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdhV1lvSjJkbGRDY2dhVzRnUVhSMGNtbGlkWFJsY3lCOGZDQW5jMlYwSnlCcGJpQkJkSFJ5YVdKMWRHVnpLWFJvY205M0lGUjVjR1ZGY25KdmNpZ25RV05qWlhOemIzSnpJRzV2ZENCemRYQndiM0owWldRaEp5azdYRzRnSUdsbUtDZDJZV3gxWlNjZ2FXNGdRWFIwY21saWRYUmxjeWxQVzFCZElEMGdRWFIwY21saWRYUmxjeTUyWVd4MVpUdGNiaUFnY21WMGRYSnVJRTg3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WkhBdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhNbHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdhV1lvSVdselQySnFaV04wS0dsMEtTbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUWdLeUFuSUdseklHNXZkQ0JoYmlCdlltcGxZM1FoSnlrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXpYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFQwZ0oyOWlhbVZqZENjZ1B5QnBkQ0FoUFQwZ2JuVnNiQ0E2SUhSNWNHVnZaaUJwZENBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsekxXOWlhbVZqZEM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTBYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUNZbUlDRnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29jbVZ4ZFdseVpTZ25MaTlmWkc5dExXTnlaV0YwWlNjcEtDZGthWFluS1N3Z0oyRW5MQ0I3WjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdOenNnZlgwcExtRWdJVDBnTnp0Y2JuMHBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBaVGd0Wkc5dExXUmxabWx1WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5QlVhR0Z1YXlkeklFbEZPQ0JtYjNJZ2FHbHpJR1oxYm01NUlHUmxabWx1WlZCeWIzQmxjblI1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2UzMHNJQ2RoSnl3Z2UyZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SURjN0lIMTlLUzVoSUNFOUlEYzdYRzU5S1R0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhObHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGVHVmpLWHRjYmlBZ2RISjVJSHRjYmlBZ0lDQnlaWFIxY200Z0lTRmxlR1ZqS0NrN1hHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlpoYVd4ekxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVGRjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1pHOWpkVzFsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVrYjJOMWJXVnVkRnh1SUNBdkx5QnBiaUJ2YkdRZ1NVVWdkSGx3Wlc5bUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFnYVhNZ0oyOWlhbVZqZENkY2JpQWdMQ0JwY3lBOUlHbHpUMkpxWldOMEtHUnZZM1Z0Wlc1MEtTQW1KaUJwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYTWdQeUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtHbDBLU0E2SUh0OU8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaRzl0TFdOeVpXRjBaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFNFhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlBM0xqRXVNU0JVYjFCeWFXMXBkR2wyWlNocGJuQjFkQ0JiTENCUWNtVm1aWEp5WldSVWVYQmxYU2xjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcE8xeHVMeThnYVc1emRHVmhaQ0J2WmlCMGFHVWdSVk0ySUhOd1pXTWdkbVZ5YzJsdmJpd2dkMlVnWkdsa2JpZDBJR2x0Y0d4bGJXVnVkQ0JBUUhSdlVISnBiV2wwYVhabElHTmhjMlZjYmk4dklHRnVaQ0IwYUdVZ2MyVmpiMjVrSUdGeVozVnRaVzUwSUMwZ1pteGhaeUF0SUhCeVpXWmxjbkpsWkNCMGVYQmxJR2x6SUdFZ2MzUnlhVzVuWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMExDQlRLWHRjYmlBZ2FXWW9JV2x6VDJKcVpXTjBLR2wwS1NseVpYUjFjbTRnYVhRN1hHNGdJSFpoY2lCbWJpd2dkbUZzTzF4dUlDQnBaaWhUSUNZbUlIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MGIxTjBjbWx1WnlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzRnSUdsbUtIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MllXeDFaVTltS1NBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNGcGMwOWlhbVZqZENoMllXd2dQU0JtYmk1allXeHNLR2wwS1NrcGNtVjBkWEp1SUhaaGJEdGNiaUFnYVdZb0lWTWdKaVlnZEhsd1pXOW1JQ2htYmlBOUlHbDBMblJ2VTNSeWFXNW5LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twY21WMGRYSnVJSFpoYkR0Y2JpQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1SjNRZ1kyOXVkbVZ5ZENCdlltcGxZM1FnZEc4Z2NISnBiV2wwYVhabElIWmhiSFZsWENJcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0Y0hKcGJXbDBhWFpsTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UbGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWW1sMGJXRndMQ0IyWVd4MVpTbDdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdaVzUxYldWeVlXSnNaU0FnT2lBaEtHSnBkRzFoY0NBbUlERXBMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nSVNoaWFYUnRZWEFnSmlBeUtTeGNiaUFnSUNCM2NtbDBZV0pzWlNBZ0lDQTZJQ0VvWW1sMGJXRndJQ1lnTkNrc1hHNGdJQ0FnZG1Gc2RXVWdJQ0FnSUNBZ09pQjJZV3gxWlZ4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY0hKdmNHVnlkSGt0WkdWell5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREl3WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N0YWNrLWVzMjAxNS1tb2R1bGVzL2Rpc3Qvc3RhY2stZXMyMDE1LW1vZHVsZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCB7IFByb3BlcnR5QWNjZXNzb3IgfSBmcm9tICcuL3Byb3BlcnR5LWFjY2Vzc29yLmpzJztcclxuaW1wb3J0IHsgaXNQcmltaXRpdmUgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcblxyXG5jb25zdCBMSVNURU5FUlNfQllfQUNDRVNTT1IgPSBuZXcgTWFwKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdGVuZXIge1xyXG4gICAgY29uc3RydWN0b3Iob2JqLCBwcm9wTmFtZSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uSXRlbXMgPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgICAgIHRoaXMucHJvcGVydHlBY2Nlc3NvciA9IG5ldyBQcm9wZXJ0eUFjY2Vzc29yKG9iaiwgcHJvcE5hbWUpO1xyXG4gICAgICAgIHRoaXMucHJvcGVydHlBY2Nlc3Nvci5zZXR0ZXJDYWxsYmFjayhuZXdWYWx1ZSA9PiB0aGlzLm5ld1ZhbHVlU2V0KG5ld1ZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHdhdGNoUHJvcGVydHkob2JqLCBwcm9wTmFtZSkge1xyXG4gICAgICAgIHZhciBtYXBPYmo7XHJcbiAgICAgICAgaWYoTElTVEVORVJTX0JZX0FDQ0VTU09SLmhhcyhvYmopKSB7XHJcbiAgICAgICAgICAgIG1hcE9iaiA9IExJU1RFTkVSU19CWV9BQ0NFU1NPUi5nZXQob2JqKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtYXBPYmogPSB7fTtcclxuICAgICAgICAgICAgTElTVEVORVJTX0JZX0FDQ0VTU09SLnNldChvYmosIG1hcE9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighbWFwT2JqLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xyXG4gICAgICAgICAgICBtYXBPYmpbcHJvcE5hbWVdID0gbmV3IExpc3RlbmVyKG9iaiwgcHJvcE5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1hcE9ialtwcm9wTmFtZV07XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZEhhbmRsZXIoc2VsZWN0aW9uSXRlbSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uSXRlbXMuYWRkKHNlbGVjdGlvbkl0ZW0pO1xyXG4gICAgICAgIHNlbGVjdGlvbkl0ZW0ucHJvcGVydHlBY2Nlc3NvcnMuYWRkKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld1ZhbHVlU2V0KG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgaWYoIWlzUHJpbWl0aXZlKG5ld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlY2FsY3VsYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5Q2FsbGJhY2tzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlDYWxsYmFja3MoKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25JdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKHNlbGVjdGlvbkl0ZW0pIHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uSXRlbS5wcm9wZXJ0eUFzc2lnbmVkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVjYWxjdWxhdGUoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3Nob3VsZCByZWNhbGN1bGF0ZScpO1xyXG5cclxuICAgICAgICB2YXIgc2VsZWN0aW9uSXRlbXMgPSBbXTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbkl0ZW1zLmZvckVhY2goZnVuY3Rpb24oc2VsZWN0aW9uSXRlbSkge1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25JdGVtcy5wdXNoKHNlbGVjdGlvbkl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxlY3Rpb25JdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKHNlbGVjdGlvbkl0ZW0pIHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uSXRlbS5yZW1vdmVMaXN0ZW5lcnMoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZWxlY3Rpb25JdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKHNlbGVjdGlvbkl0ZW0pIHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uSXRlbS5pbnN0YWxsTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvaW50ZXJwcmV0YXRpb24vbGlzdGVuZXIuanNcbiAqKi8iLCJjb25zdCBQUk9QRVJUWV9BQ0NFU1NPUl9OQU1FID0gJ3dyYXBwZWRWYWx1ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvcGVydHlBY2Nlc3NvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihvYmosIHByb3BOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5zYWZlT2xkQWNjZXNzb3JzKG9iaiwgcHJvcE5hbWUpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBvYmouX19kZWZpbmVHZXR0ZXJfXyhwcm9wTmFtZSwgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYocHJvcE5hbWUgPT09ICdwcm9wJykgZGVidWdnZXI7XHJcbiAgICAgICAgICAgICAgICBvYmo7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tQUk9QRVJUWV9BQ0NFU1NPUl9OQU1FXTtcclxuICAgICAgICAgICAgfSkuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyAvKiBGaXJlZm94IHJhaXNlcyBmb3IgQXJyYXkubGVuZ3RoICovIH1cclxuICAgICAgICB2YXIgbmV3R2V0dGVyID0gb2JqLl9fbG9va3VwR2V0dGVyX18ocHJvcE5hbWUpO1xyXG4gICAgICAgIGlmICghbmV3R2V0dGVyKSB7XHJcbiAgICAgICAgICAgIC8vIENocm9tZSBzaWxlbnRseSBpZ25vcmVzIF9fZGVmaW5lR2V0dGVyX18gZm9yIEFycmF5Lmxlbmd0aFxyXG4gICAgICAgICAgICB0aGlzLmV4dGVybmFsVmFyaWFibGVzKHNvbHZlciwgbnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9iai5fX2RlZmluZVNldHRlcl9fKHByb3BOYW1lLCAoZnVuY3Rpb24obmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gdGhpc1tQUk9QRVJUWV9BQ0NFU1NPUl9OQU1FXSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbmV3VmFsdWUgZm9yJywgb2JqLCBwcm9wTmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFByb3BlcnR5V2l0aChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcclxuICAgICAgICB9KS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBzYWZlT2xkQWNjZXNzb3JzKG9iaiwgcHJvcE5hbWUpIHtcclxuICAgICAgICAvLyB0YWtlIGV4aXN0aW5nIGdldHRlciwgaWYgZXhpc3RlbnQsIGFuZCBhc3NpZ24gdG9cclxuICAgICAgICB2YXIgZXhpc3RpbmdTZXR0ZXIgPSBvYmouX19sb29rdXBTZXR0ZXJfXyhwcm9wTmFtZSksXHJcbiAgICAgICAgICAgIGV4aXN0aW5nR2V0dGVyID0gb2JqLl9fbG9va3VwR2V0dGVyX18ocHJvcE5hbWUpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0dldHRlciAmJiBleGlzdGluZ1NldHRlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9fZGVmaW5lR2V0dGVyX18oUFJPUEVSVFlfQUNDRVNTT1JfTkFNRSwgZXhpc3RpbmdHZXR0ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9fZGVmaW5lU2V0dGVyX18oUFJPUEVSVFlfQUNDRVNTT1JfTkFNRSwgZXhpc3RpbmdTZXR0ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYXNzaWduIG9sZCB2YWx1ZSB0byBuZXcgc2xvdFxyXG4gICAgICAgIGlmICghZXhpc3RpbmdHZXR0ZXIgJiZcclxuICAgICAgICAgICAgIWV4aXN0aW5nU2V0dGVyICYmXHJcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpc1tQUk9QRVJUWV9BQ0NFU1NPUl9OQU1FXSA9IG9ialtwcm9wTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldHRlckNhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0ZvclNldFByb3BlcnR5ID0gY2FsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UHJvcGVydHlXaXRoKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0ZvclNldFByb3BlcnR5ICYmIHRoaXMuY2FsbGJhY2tGb3JTZXRQcm9wZXJ0eShuZXdWYWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvaW50ZXJwcmV0YXRpb24vcHJvcGVydHktYWNjZXNzb3IuanNcbiAqKi8iLCIvLyBUT0RPIHRoaXMgaXMgYSBjb3B5IGZyb20gcmVhY3RpdmUgb2JqZWN0IHF1ZXJpZXMgcmVwb3NpdG9yeSAobm90IGNvbXBsZXRlbHkgYW55bW9yZSlcclxuLy8gVE9ETyBleHRyYWN0IHRoaXMgaW50byBpdHMgb3duIGxpYnJhcnlcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwdXNoSWZNaXNzaW5nKGFycmF5LCBpdGVtKSB7XHJcbiAgICAvLyBjaGVjayBmb3IgYWxyZWFkeSBleGlzdGluZy5cclxuICAgIHZhciBleGlzdHMgPSBmYWxzZTtcclxuICAgIHZhciBsZW4gPSBhcnJheS5sZW5ndGg7XHJcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXHJcbiAgICAgICAgaWYoYXJyYXlbaV0gPT0gaXRlbSkge1xyXG4gICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgLy8gZG8gbm90IGFkZCBhbiBhbHJlYWR5IGV4aXN0aW5nIGl0ZW1cclxuICAgIGlmICghZXhpc3RzKSB7XHJcbiAgICAgICAgYXJyYXkucHVzaChpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgZ2l2ZW4gZWxlbWVudCB3YXMgcHVzaGVkLCBvdGhlcndpc2UgZmFsc2VcclxuICAgIHJldHVybiAhZXhpc3RzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSWZFeGlzdGluZyhhcnJheSwgaXRlbSkge1xyXG4gICAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSBnaXZlbiBlbGVtZW50IHdhcyBhY3R1YWxseSByZW1vdmVkXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZShlbGVtKSB7XHJcbiAgICB2YXIgZ2V0VHlwZSA9IGZ1bmN0aW9uKGVsZW0pIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVsZW0pLnNsaWNlKDgsIC0xKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHR5cGUgPSBnZXRUeXBlKGVsZW0pO1xyXG5cclxuICAgIHJldHVybiB0eXBlID09PSAnU3RyaW5nJyB8fFxyXG4gICAgICAgIHR5cGUgPT09ICdSZWdFeHAnIHx8XHJcbiAgICAgICAgdHlwZSA9PT0gJ0Jvb2xlYW4nIHx8XHJcbiAgICAgICAgdHlwZSA9PT0gJ051bWJlcicgfHxcclxuICAgICAgICB0eXBlID09PSAnTnVsbCcgfHxcclxuICAgICAgICB0eXBlID09PSAnVW5kZWZpbmVkJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHsgcmV0dXJuIHg7IH1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMuanNcbiAqKi8iLCJleHBvcnQgY2xhc3MgQmFzZUFjdGl2ZUV4cHJlc3Npb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmdW5jIChGdW5jdGlvbikgdGhlIGV4cHJlc3Npb24gdG8gYmUgb2JzZXJ2ZWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZnVuYykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGZ1bmMpO1xyXG4gICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XHJcbiAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhbGlhc2VzIHdpdGggJ25vdydcclxuICAgICAqIEByZXR1cm5zIHsqfSB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvblxyXG4gICAgICovXHJcbiAgICBnZXRDdXJyZW50VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuYygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQW5kTm90aWZ5KCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZSgpO1xyXG4gICAgICAgIGlmKHRoaXMubGFzdFZhbHVlID09PSBjdXJyZW50VmFsdWUpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIGxldCBsYXN0VmFsdWUgPSB0aGlzLmxhc3RWYWx1ZTtcclxuICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5ub3RpZnkoY3VycmVudFZhbHVlLCB7XHJcbiAgICAgICAgICAgIGxhc3RWYWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5vdGlmeSguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUT0RPXHJcbiAgICAgKiBsaWtlIGEgYmluZCBmb3IgQUV4cHJcclxuICAgICAqIEBwYXJhbSBpdGVtc1xyXG4gICAgICovXHJcbiAgICBhcHBseU9uKC4uLml0ZW1zKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJhc2VBY3RpdmVFeHByZXNzaW9uO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9iYXNlL2Jhc2UtYWN0aXZlLWV4cHJlc3Npb25zLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==