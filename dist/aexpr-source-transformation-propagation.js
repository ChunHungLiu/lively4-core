(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("aexpr-source-transformation-propagation", [], factory);
	else if(typeof exports === 'object')
		exports["aexpr-source-transformation-propagation"] = factory();
	else
		root["aexpr-source-transformation-propagation"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*istanbul ignore next*/'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(1);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _getPrototypeOf = __webpack_require__(55);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _possibleConstructorReturn2 = __webpack_require__(59);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(84);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _from = __webpack_require__(2);
	
	var _from2 = _interopRequireDefault(_from);
	
	var _set = __webpack_require__(92);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _map = __webpack_require__(107);
	
	var _map2 = _interopRequireDefault(_map);
	
	var _classCallCheck2 = __webpack_require__(111);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(112);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	exports.aexpr = aexpr;
	/*istanbul ignore next*/exports.getMember = getMember;
	/*istanbul ignore next*/exports.getAndCallMember = getAndCallMember;
	/*istanbul ignore next*/exports.setMember = setMember;
	
	var /*istanbul ignore next*/_activeExpressions = __webpack_require__(116);
	
	var /*istanbul ignore next*/_stackEs2015Modules = __webpack_require__(117);
	
	/*istanbul ignore next*/var _stackEs2015Modules2 = _interopRequireDefault(_stackEs2015Modules);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var expressionAnalysisMode = false;
	
	/*istanbul ignore next*/var ExpressionAnalysis = function () {
	    function ExpressionAnalysis() {
	        (0, _classCallCheck3.default)(this, ExpressionAnalysis);
	    }
	
	    (0, _createClass3.default)(ExpressionAnalysis, null, [{
	        key: 'check',
	
	        // Do the function execution in ExpressionAnalysisMode
	        value: function check(aexpr) {
	            aexprStack.withElement(aexpr, function () {
	                // TODO: provide API for running the expression and returning its value, rather that relying on the instance property directly
	                aexpr.func();
	            });
	        }
	    }]);
	    return ExpressionAnalysis;
	}();
	
	// TODO: CompositeKeyStore as separate Module
	
	
	var compositeKeyStore = new /*istanbul ignore next*/_map2.default();
	
	/*istanbul ignore next*/var CompositeKey = function () {
	    function CompositeKey() {
	        (0, _classCallCheck3.default)(this, CompositeKey);
	    }
	
	    (0, _createClass3.default)(CompositeKey, null, [{
	        key: 'get',
	        value: function get(obj1, obj2) {
	            if (!compositeKeyStore.has(obj1)) {
	                compositeKeyStore.set(obj1, new /*istanbul ignore next*/_map2.default());
	            }
	
	            var secondKeyMap = compositeKeyStore.get(obj1);
	
	            if (!secondKeyMap.has(obj2)) {
	                secondKeyMap.set(obj2, {});
	            }
	
	            return secondKeyMap.get(obj2);
	        }
	    }]);
	    return CompositeKey;
	}();
	
	/*istanbul ignore next*/var HookStorage = function () {
	    function /*istanbul ignore next*/HookStorage() {
	        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, HookStorage);
	
	        this.objPropsByAExpr = new /*istanbul ignore next*/_map2.default();
	    }
	
	    (0, _createClass3.default)(HookStorage, [{
	        key: 'associate',
	        value: function associate(aexpr, obj, prop) {
	            if (!this.objPropsByAExpr.has(aexpr)) {
	                this.objPropsByAExpr.set(aexpr, new /*istanbul ignore next*/_set2.default());
	            }
	
	            var objPropSet = this.objPropsByAExpr.get(aexpr);
	
	            objPropSet.add(CompositeKey.get(obj, prop));
	            console.log('added', obj, prop);
	        }
	    }, {
	        key: 'disconnectAll',
	        value: function disconnectAll(aexpr) {
	            this.objPropsByAExpr.delete(aexpr);
	        }
	    }, {
	        key: 'getAExprsFor',
	        value: function getAExprsFor(obj, prop) {
	            /*istanbul ignore next*/var _this = this;
	
	            var comp = CompositeKey.get(obj, prop);
	            return (/*istanbul ignore next*/(0, _from2.default)(this.objPropsByAExpr.keys()).filter(function (aexpr) {
	                    return (/*istanbul ignore next*/_this.objPropsByAExpr.get(aexpr).has(comp)
	                    );
	                })
	            );
	        }
	    }]);
	    return HookStorage;
	}();
	
	var aexprStorage = new HookStorage();
	var aexprStack = new /*istanbul ignore next*/_stackEs2015Modules2.default();
	
	/*istanbul ignore next*/var RewritingActiveExpression = function (_BaseActiveExpression) {
	    (0, _inherits3.default)(RewritingActiveExpression, _BaseActiveExpression);
	
	    function /*istanbul ignore next*/RewritingActiveExpression(func) {
	        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, RewritingActiveExpression);
	
	        var _this2 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RewritingActiveExpression).call(this, func));
	
	        ExpressionAnalysis.check( /*istanbul ignore next*/_this2);
	        /*istanbul ignore next*/return _this2;
	    }
	
	    return RewritingActiveExpression;
	}(_activeExpressions.BaseActiveExpression);
	
	function aexpr(func) {
	    console.log('aexpr', func);
	    return new RewritingActiveExpression(func);
	}
	
	function getMember(obj, prop) {
	    console.log('getMember', obj, prop);
	    var currentAExpr = aexprStack.top();
	    if (currentAExpr) {
	        aexprStorage.associate(currentAExpr, obj, prop);
	    }
	    return obj[prop];
	}
	
	function getAndCallMember(obj, prop, args) {
	    /*istanbul ignore next*/var _console;
	
	    /*istanbul ignore next*/(_console = console).log. /*istanbul ignore next*/apply( /*istanbul ignore next*/_console, /*istanbul ignore next*/['getAndCallMember', obj, prop].concat((0, _toConsumableArray3.default)(args)));
	    var currentAExpr = aexprStack.top();
	    if (currentAExpr) {
	        aexprStorage.associate(currentAExpr, obj, prop);
	    }
	    return (/*istanbul ignore next*/obj[prop]. /*istanbul ignore next*/apply(obj, /*istanbul ignore next*/(0, _toConsumableArray3.default)(args))
	    );
	}
	
	function setMember(obj, prop, operator, val) {
	    console.log('setMember', obj, prop, operator, val);
	    // TODO: check actual operator
	    var result = obj[prop] = val;
	    aexprStorage.getAExprsFor(obj, prop).forEach(function (aexpr) /*istanbul ignore next*/{
	        return aexpr.checkAndNotify();
	    });
	    return result;
	}
	
	/*istanbul ignore next*/exports.default = aexpr;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(2);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(3), __esModule: true };

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(48);
	module.exports = __webpack_require__(12).Array.from;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(5)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(8)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(6)
	  , defined   = __webpack_require__(7);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(9)
	  , $export        = __webpack_require__(10)
	  , redefine       = __webpack_require__(25)
	  , hide           = __webpack_require__(15)
	  , has            = __webpack_require__(26)
	  , Iterators      = __webpack_require__(27)
	  , $iterCreate    = __webpack_require__(28)
	  , setToStringTag = __webpack_require__(44)
	  , getPrototypeOf = __webpack_require__(46)
	  , ITERATOR       = __webpack_require__(45)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(11)
	  , core      = __webpack_require__(12)
	  , ctx       = __webpack_require__(13)
	  , hide      = __webpack_require__(15)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 11 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 12 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(14);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(16)
	  , createDesc = __webpack_require__(24);
	module.exports = __webpack_require__(20) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(17)
	  , IE8_DOM_DEFINE = __webpack_require__(19)
	  , toPrimitive    = __webpack_require__(23)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(20) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(20) && !__webpack_require__(21)(function(){
	  return Object.defineProperty(__webpack_require__(22)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(21)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18)
	  , document = __webpack_require__(11).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(18);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(15);

/***/ },
/* 26 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(29)
	  , descriptor     = __webpack_require__(24)
	  , setToStringTag = __webpack_require__(44)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(15)(IteratorPrototype, __webpack_require__(45)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(17)
	  , dPs         = __webpack_require__(30)
	  , enumBugKeys = __webpack_require__(42)
	  , IE_PROTO    = __webpack_require__(39)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(22)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(43).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(16)
	  , anObject = __webpack_require__(17)
	  , getKeys  = __webpack_require__(31);
	
	module.exports = __webpack_require__(20) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(32)
	  , enumBugKeys = __webpack_require__(42);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(26)
	  , toIObject    = __webpack_require__(33)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(39)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(34)
	  , defined = __webpack_require__(7);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(35);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(33)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(38);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(6)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(6)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(40)('keys')
	  , uid    = __webpack_require__(41);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(11).document && document.documentElement;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(16).f
	  , has = __webpack_require__(26)
	  , TAG = __webpack_require__(45)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(40)('wks')
	  , uid        = __webpack_require__(41)
	  , Symbol     = __webpack_require__(11).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(26)
	  , toObject    = __webpack_require__(47)
	  , IE_PROTO    = __webpack_require__(39)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(7);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(13)
	  , $export        = __webpack_require__(10)
	  , toObject       = __webpack_require__(47)
	  , call           = __webpack_require__(49)
	  , isArrayIter    = __webpack_require__(50)
	  , toLength       = __webpack_require__(37)
	  , createProperty = __webpack_require__(51)
	  , getIterFn      = __webpack_require__(52);
	
	$export($export.S + $export.F * !__webpack_require__(54)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(17);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(27)
	  , ITERATOR   = __webpack_require__(45)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(16)
	  , createDesc      = __webpack_require__(24);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(53)
	  , ITERATOR  = __webpack_require__(45)('iterator')
	  , Iterators = __webpack_require__(27);
	module.exports = __webpack_require__(12).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(35)
	  , TAG = __webpack_require__(45)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(45)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(56), __esModule: true };

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(57);
	module.exports = __webpack_require__(12).Object.getPrototypeOf;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(47)
	  , $getPrototypeOf = __webpack_require__(46);
	
	__webpack_require__(58)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(10)
	  , core    = __webpack_require__(12)
	  , fails   = __webpack_require__(21);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(60);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(61);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(68);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(62), __esModule: true };

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(63);
	module.exports = __webpack_require__(67).f('iterator');

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(64);
	var global        = __webpack_require__(11)
	  , hide          = __webpack_require__(15)
	  , Iterators     = __webpack_require__(27)
	  , TO_STRING_TAG = __webpack_require__(45)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(65)
	  , step             = __webpack_require__(66)
	  , Iterators        = __webpack_require__(27)
	  , toIObject        = __webpack_require__(33);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(8)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 66 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(45);

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(69), __esModule: true };

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(70);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(83);
	module.exports = __webpack_require__(12).Symbol;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(11)
	  , has            = __webpack_require__(26)
	  , DESCRIPTORS    = __webpack_require__(20)
	  , $export        = __webpack_require__(10)
	  , redefine       = __webpack_require__(25)
	  , META           = __webpack_require__(71).KEY
	  , $fails         = __webpack_require__(21)
	  , shared         = __webpack_require__(40)
	  , setToStringTag = __webpack_require__(44)
	  , uid            = __webpack_require__(41)
	  , wks            = __webpack_require__(45)
	  , wksExt         = __webpack_require__(67)
	  , wksDefine      = __webpack_require__(72)
	  , keyOf          = __webpack_require__(73)
	  , enumKeys       = __webpack_require__(74)
	  , isArray        = __webpack_require__(77)
	  , anObject       = __webpack_require__(17)
	  , toIObject      = __webpack_require__(33)
	  , toPrimitive    = __webpack_require__(23)
	  , createDesc     = __webpack_require__(24)
	  , _create        = __webpack_require__(29)
	  , gOPNExt        = __webpack_require__(78)
	  , $GOPD          = __webpack_require__(80)
	  , $DP            = __webpack_require__(16)
	  , $keys          = __webpack_require__(31)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(79).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(76).f  = $propertyIsEnumerable;
	  __webpack_require__(75).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(9)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(15)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(41)('meta')
	  , isObject = __webpack_require__(18)
	  , has      = __webpack_require__(26)
	  , setDesc  = __webpack_require__(16).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(21)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(11)
	  , core           = __webpack_require__(12)
	  , LIBRARY        = __webpack_require__(9)
	  , wksExt         = __webpack_require__(67)
	  , defineProperty = __webpack_require__(16).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(31)
	  , toIObject = __webpack_require__(33);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(31)
	  , gOPS    = __webpack_require__(75)
	  , pIE     = __webpack_require__(76);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 75 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 76 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(35);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(33)
	  , gOPN      = __webpack_require__(79).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(32)
	  , hiddenKeys = __webpack_require__(42).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(76)
	  , createDesc     = __webpack_require__(24)
	  , toIObject      = __webpack_require__(33)
	  , toPrimitive    = __webpack_require__(23)
	  , has            = __webpack_require__(26)
	  , IE8_DOM_DEFINE = __webpack_require__(19)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(20) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 81 */
/***/ function(module, exports) {



/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(72)('asyncIterator');

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(72)('observable');

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(85);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(89);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(60);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(86), __esModule: true };

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(87);
	module.exports = __webpack_require__(12).Object.setPrototypeOf;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(10);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(88).set});

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(18)
	  , anObject = __webpack_require__(17);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(13)(Function.call, __webpack_require__(80).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(90), __esModule: true };

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(91);
	var $Object = __webpack_require__(12).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(29)});

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(93), __esModule: true };

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(81);
	__webpack_require__(4);
	__webpack_require__(63);
	__webpack_require__(94);
	__webpack_require__(104);
	module.exports = __webpack_require__(12).Set;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(95);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(100)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(16).f
	  , create      = __webpack_require__(29)
	  , redefineAll = __webpack_require__(96)
	  , ctx         = __webpack_require__(13)
	  , anInstance  = __webpack_require__(97)
	  , defined     = __webpack_require__(7)
	  , forOf       = __webpack_require__(98)
	  , $iterDefine = __webpack_require__(8)
	  , step        = __webpack_require__(66)
	  , setSpecies  = __webpack_require__(99)
	  , DESCRIPTORS = __webpack_require__(20)
	  , fastKey     = __webpack_require__(71).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(15);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 97 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(13)
	  , call        = __webpack_require__(49)
	  , isArrayIter = __webpack_require__(50)
	  , anObject    = __webpack_require__(17)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(52)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(11)
	  , core        = __webpack_require__(12)
	  , dP          = __webpack_require__(16)
	  , DESCRIPTORS = __webpack_require__(20)
	  , SPECIES     = __webpack_require__(45)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(11)
	  , $export        = __webpack_require__(10)
	  , meta           = __webpack_require__(71)
	  , fails          = __webpack_require__(21)
	  , hide           = __webpack_require__(15)
	  , redefineAll    = __webpack_require__(96)
	  , forOf          = __webpack_require__(98)
	  , anInstance     = __webpack_require__(97)
	  , isObject       = __webpack_require__(18)
	  , setToStringTag = __webpack_require__(44)
	  , dP             = __webpack_require__(16).f
	  , each           = __webpack_require__(101)(0)
	  , DESCRIPTORS    = __webpack_require__(20);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    C = wrapper(function(target, iterable){
	      anInstance(target, C, NAME, '_c');
	      target._c = new Base;
	      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
	        anInstance(this, C, KEY);
	        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    if('size' in proto)dP(C.prototype, 'size', {
	      get: function(){
	        return this._c.size;
	      }
	    });
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(13)
	  , IObject  = __webpack_require__(34)
	  , toObject = __webpack_require__(47)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(102);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(103);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18)
	  , isArray  = __webpack_require__(77)
	  , SPECIES  = __webpack_require__(45)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(10);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(105)('Set')});

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(53)
	  , from    = __webpack_require__(106);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(98);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(108), __esModule: true };

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(81);
	__webpack_require__(4);
	__webpack_require__(63);
	__webpack_require__(109);
	__webpack_require__(110);
	module.exports = __webpack_require__(12).Map;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(95);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(100)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(10);
	
	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(105)('Map')});

/***/ },
/* 111 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(113);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(114), __esModule: true };

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(115);
	var $Object = __webpack_require__(12).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(20), 'Object', {defineProperty: __webpack_require__(16).f});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("active-expressions", [], factory);
		else if(typeof exports === 'object')
			exports["active-expressions"] = factory();
		else
			root["active-expressions"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _interpretationActiveExpressions = __webpack_require__(1);
		
		Object.defineProperty(exports, 'aexpr', {
		  enumerable: true,
		  get: function get() {
		    return _interpretationActiveExpressions.aexpr;
		  }
		});
		
		/*istanbul ignore next*/var _baseActiveExpressions = __webpack_require__(126);
		
		Object.defineProperty(exports, 'BaseActiveExpression', {
		  enumerable: true,
		  get: function get() {
		    return _baseActiveExpressions.BaseActiveExpression;
		  }
		});
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.ActiveExpressionInterpreter = undefined;
		
		var _keys = __webpack_require__(2);
		
		var _keys2 = _interopRequireDefault(_keys);
		
		var _get2 = __webpack_require__(37);
		
		var _get3 = _interopRequireDefault(_get2);
		
		var _set = __webpack_require__(47);
		
		var _set2 = _interopRequireDefault(_set);
		
		var _getPrototypeOf = __webpack_require__(38);
		
		var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
		
		var _createClass2 = __webpack_require__(85);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		var _possibleConstructorReturn2 = __webpack_require__(89);
		
		var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
		
		var _inherits2 = __webpack_require__(105);
		
		var _inherits3 = _interopRequireDefault(_inherits2);
		
		var _classCallCheck2 = __webpack_require__(113);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		exports.aexpr = aexpr;
		
		var /*istanbul ignore next*/_interpreter = __webpack_require__(114);
		
		/*istanbul ignore next*/var _interpreter2 = _interopRequireDefault(_interpreter);
		
		var /*istanbul ignore next*/_stackEs2015Modules = __webpack_require__(122);
		
		/*istanbul ignore next*/var _stackEs2015Modules2 = _interopRequireDefault(_stackEs2015Modules);
		
		var /*istanbul ignore next*/_listener = __webpack_require__(123);
		
		var /*istanbul ignore next*/_baseActiveExpressions = __webpack_require__(126);
		
		/*istanbul ignore next*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var AEXPR_STACK = new /*istanbul ignore next*/_stackEs2015Modules2.default();
		
		/*istanbul ignore next*/var Handler = function /*istanbul ignore next*/Handler() {
		    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Handler);
		};
		
		/*istanbul ignore next*/var InterpreterActiveExpression = function (_BaseActiveExpression) {
		    (0, _inherits3.default)(InterpreterActiveExpression, _BaseActiveExpression);
		
		    function /*istanbul ignore next*/InterpreterActiveExpression(func, scope) {
		        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, InterpreterActiveExpression);
		
		        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(InterpreterActiveExpression).call(this, func));
		
		        /*istanbul ignore next*/_this.scope = scope;
		        /*istanbul ignore next*/_this.propertyAccessors = new /*istanbul ignore next*/_set2.default();
		
		        /*istanbul ignore next*/_this.installListeners();
		        /*istanbul ignore next*/return _this;
		    }
		
		    // TODO: remove indirection
		
		
		    (0, _createClass3.default)(InterpreterActiveExpression, [{
		        key: 'propertyAssigned',
		        value: function propertyAssigned() {
		            this.checkAndNotify();
		        }
		    }, {
		        key: 'revoke',
		        value: function revoke() {
		            this.removeListeners();
		        }
		    }, {
		        key: 'installListeners',
		        value: function installListeners() {
		            /*istanbul ignore next*/var _this2 = this;
		
		            AEXPR_STACK.withElement(this, function () {
		                ActiveExpressionInterpreter.runAndReturn( /*istanbul ignore next*/_this2.func, /*istanbul ignore next*/_this2.scope);
		            });
		        }
		    }, {
		        key: 'removeListeners',
		        value: function removeListeners() {
		            this.propertyAccessors.forEach(function (propertyAccessor) {
		                propertyAccessor.selectionItems.delete(this);
		            }, this);
		            this.propertyAccessors.clear();
		        }
		    }]);
		    return InterpreterActiveExpression;
		}(_baseActiveExpressions.BaseActiveExpression);
		
		function aexpr(func, scope) {
		    return new InterpreterActiveExpression(func, scope);
		}
		
		/*istanbul ignore next*/var ActiveExpressionInterpreter = exports.ActiveExpressionInterpreter = function (_Interpreter) {
		    (0, _inherits3.default)(ActiveExpressionInterpreter, _Interpreter);
		
		    function ActiveExpressionInterpreter() {
		        (0, _classCallCheck3.default)(this, ActiveExpressionInterpreter);
		        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ActiveExpressionInterpreter).apply(this, arguments));
		    }
		
		    (0, _createClass3.default)(ActiveExpressionInterpreter, [{
		        key: 'getProperty',
		        value: function getProperty(obj, name) {
		            var object = obj.valueOf(),
		                prop = name.valueOf();
		
		            /*istanbul ignore next*/_listener.Listener.watchProperty(object, prop).addHandler(AEXPR_STACK.top());
		
		            return (/*istanbul ignore next*/(0, _get3.default)((0, _getPrototypeOf2.default)(ActiveExpressionInterpreter.prototype), 'getProperty', this).call(this, obj, name)
		            );
		        }
		    }, {
		        key: 'stepCallExpression',
		        value: function stepCallExpression() {
		            if (this.stateStack[0].arguments > 0) {
		                console.log('call expression');
		                debugger;
		            }
		            var stateStack = this.stateStack,
		                state = stateStack[0],
		                node = state.node,
		                func = state.func_;
		
		            return (/*istanbul ignore next*/(0, _get3.default)((0, _getPrototypeOf2.default)(ActiveExpressionInterpreter.prototype), 'stepCallExpression', this).call(this)
		            );
		        }
		    }], [{
		        key: 'runAndReturn',
		        value: function runAndReturn(func, optScope) {
		            var scope = optScope || {};
		            var i = new ActiveExpressionInterpreter( /*istanbul ignore next*/'var returnValue = (' + func.toString() + ')();', function (self, rootScope) {
		                console.log('scope', scope);
		                /*istanbul ignore next*/(0, _keys2.default)(scope).forEach(function (k) {
		                    var value = scope[k];
		                    console.log(k, value);
		                    self.setProperty(rootScope, k, self.createPseudoObject(value));
		                });
		                // TODO: delete as the relevant global objects can be inferred by analysing the local scope
		                // ["__lvVarRecorder", "jQuery", "$", "_", "lively"].forEach((k) => {
		                //     self.setProperty(rootScope, k, self.createPseudoObject(window[k]));
		                // });
		            });
		            i.run();
		            return i.stateStack[0].scope.properties.returnValue.valueOf();
		        }
		    }]);
		    return ActiveExpressionInterpreter;
		}(_interpreter2.default);
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(3), __esModule: true };
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(4);
		module.exports = __webpack_require__(24).Object.keys;
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.14 Object.keys(O)
		var toObject = __webpack_require__(5)
		  , $keys    = __webpack_require__(7);
		
		__webpack_require__(22)('keys', function(){
		  return function keys(it){
		    return $keys(toObject(it));
		  };
		});
	
	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.1.13 ToObject(argument)
		var defined = __webpack_require__(6);
		module.exports = function(it){
		  return Object(defined(it));
		};
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		// 7.2.1 RequireObjectCoercible(argument)
		module.exports = function(it){
		  if(it == undefined)throw TypeError("Can't call method on  " + it);
		  return it;
		};
	
	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.14 / 15.2.3.14 Object.keys(O)
		var $keys       = __webpack_require__(8)
		  , enumBugKeys = __webpack_require__(21);
		
		module.exports = Object.keys || function keys(O){
		  return $keys(O, enumBugKeys);
		};
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		var has          = __webpack_require__(9)
		  , toIObject    = __webpack_require__(10)
		  , arrayIndexOf = __webpack_require__(13)(false)
		  , IE_PROTO     = __webpack_require__(17)('IE_PROTO');
		
		module.exports = function(object, names){
		  var O      = toIObject(object)
		    , i      = 0
		    , result = []
		    , key;
		  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
		  // Don't enum bug & hidden keys
		  while(names.length > i)if(has(O, key = names[i++])){
		    ~arrayIndexOf(result, key) || result.push(key);
		  }
		  return result;
		};
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		var hasOwnProperty = {}.hasOwnProperty;
		module.exports = function(it, key){
		  return hasOwnProperty.call(it, key);
		};
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		// to indexed object, toObject with fallback for non-array-like ES3 strings
		var IObject = __webpack_require__(11)
		  , defined = __webpack_require__(6);
		module.exports = function(it){
		  return IObject(defined(it));
		};
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		// fallback for non-array-like ES3 and non-enumerable old V8 strings
		var cof = __webpack_require__(12);
		module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
		  return cof(it) == 'String' ? it.split('') : Object(it);
		};
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		var toString = {}.toString;
		
		module.exports = function(it){
		  return toString.call(it).slice(8, -1);
		};
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		// false -> Array#indexOf
		// true  -> Array#includes
		var toIObject = __webpack_require__(10)
		  , toLength  = __webpack_require__(14)
		  , toIndex   = __webpack_require__(16);
		module.exports = function(IS_INCLUDES){
		  return function($this, el, fromIndex){
		    var O      = toIObject($this)
		      , length = toLength(O.length)
		      , index  = toIndex(fromIndex, length)
		      , value;
		    // Array#includes uses SameValueZero equality algorithm
		    if(IS_INCLUDES && el != el)while(length > index){
		      value = O[index++];
		      if(value != value)return true;
		    // Array#toIndex ignores holes, Array#includes - not
		    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
		      if(O[index] === el)return IS_INCLUDES || index || 0;
		    } return !IS_INCLUDES && -1;
		  };
		};
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.1.15 ToLength
		var toInteger = __webpack_require__(15)
		  , min       = Math.min;
		module.exports = function(it){
		  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
		};
	
	/***/ },
	/* 15 */
	/***/ function(module, exports) {
	
		// 7.1.4 ToInteger
		var ceil  = Math.ceil
		  , floor = Math.floor;
		module.exports = function(it){
		  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
		};
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		var toInteger = __webpack_require__(15)
		  , max       = Math.max
		  , min       = Math.min;
		module.exports = function(index, length){
		  index = toInteger(index);
		  return index < 0 ? max(index + length, 0) : min(index, length);
		};
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		var shared = __webpack_require__(18)('keys')
		  , uid    = __webpack_require__(20);
		module.exports = function(key){
		  return shared[key] || (shared[key] = uid(key));
		};
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global = __webpack_require__(19)
		  , SHARED = '__core-js_shared__'
		  , store  = global[SHARED] || (global[SHARED] = {});
		module.exports = function(key){
		  return store[key] || (store[key] = {});
		};
	
	/***/ },
	/* 19 */
	/***/ function(module, exports) {
	
		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		var id = 0
		  , px = Math.random();
		module.exports = function(key){
		  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
		};
	
	/***/ },
	/* 21 */
	/***/ function(module, exports) {
	
		// IE 8- don't enum bug keys
		module.exports = (
		  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
		).split(',');
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		// most Object methods by ES6 should accept primitives
		var $export = __webpack_require__(23)
		  , core    = __webpack_require__(24)
		  , fails   = __webpack_require__(33);
		module.exports = function(KEY, exec){
		  var fn  = (core.Object || {})[KEY] || Object[KEY]
		    , exp = {};
		  exp[KEY] = exec(fn);
		  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
		};
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global    = __webpack_require__(19)
		  , core      = __webpack_require__(24)
		  , ctx       = __webpack_require__(25)
		  , hide      = __webpack_require__(27)
		  , PROTOTYPE = 'prototype';
		
		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , expProto  = exports[PROTOTYPE]
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && target[key] !== undefined;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(a, b, c){
		        if(this instanceof C){
		          switch(arguments.length){
		            case 0: return new C;
		            case 1: return new C(a);
		            case 2: return new C(a, b);
		          } return new C(a, b, c);
		        } return C.apply(this, arguments);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
		    if(IS_PROTO){
		      (exports.virtual || (exports.virtual = {}))[key] = out;
		      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
		      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
		    }
		  }
		};
		// type bitmap
		$export.F = 1;   // forced
		$export.G = 2;   // global
		$export.S = 4;   // static
		$export.P = 8;   // proto
		$export.B = 16;  // bind
		$export.W = 32;  // wrap
		$export.U = 64;  // safe
		$export.R = 128; // real proto method for `library` 
		module.exports = $export;
	
	/***/ },
	/* 24 */
	/***/ function(module, exports) {
	
		var core = module.exports = {version: '2.4.0'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		// optional / simple context binding
		var aFunction = __webpack_require__(26);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};
	
	/***/ },
	/* 26 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		var dP         = __webpack_require__(28)
		  , createDesc = __webpack_require__(36);
		module.exports = __webpack_require__(32) ? function(object, key, value){
		  return dP.f(object, key, createDesc(1, value));
		} : function(object, key, value){
		  object[key] = value;
		  return object;
		};
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		var anObject       = __webpack_require__(29)
		  , IE8_DOM_DEFINE = __webpack_require__(31)
		  , toPrimitive    = __webpack_require__(35)
		  , dP             = Object.defineProperty;
		
		exports.f = __webpack_require__(32) ? Object.defineProperty : function defineProperty(O, P, Attributes){
		  anObject(O);
		  P = toPrimitive(P, true);
		  anObject(Attributes);
		  if(IE8_DOM_DEFINE)try {
		    return dP(O, P, Attributes);
		  } catch(e){ /* empty */ }
		  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
		  if('value' in Attributes)O[P] = Attributes.value;
		  return O;
		};
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(30);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};
	
	/***/ },
	/* 30 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};
	
	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = !__webpack_require__(32) && !__webpack_require__(33)(function(){
		  return Object.defineProperty(__webpack_require__(34)('div'), 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Thank's IE8 for his funny defineProperty
		module.exports = !__webpack_require__(33)(function(){
		  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 33 */
	/***/ function(module, exports) {
	
		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(30)
		  , document = __webpack_require__(19).document
		  // in old IE typeof document.createElement is 'object'
		  , is = isObject(document) && isObject(document.createElement);
		module.exports = function(it){
		  return is ? document.createElement(it) : {};
		};
	
	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.1.1 ToPrimitive(input [, PreferredType])
		var isObject = __webpack_require__(30);
		// instead of the ES6 spec version, we didn't implement @@toPrimitive case
		// and the second argument - flag - preferred type is a string
		module.exports = function(it, S){
		  if(!isObject(it))return it;
		  var fn, val;
		  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  throw TypeError("Can't convert object to primitive value");
		};
	
	/***/ },
	/* 36 */
	/***/ function(module, exports) {
	
		module.exports = function(bitmap, value){
		  return {
		    enumerable  : !(bitmap & 1),
		    configurable: !(bitmap & 2),
		    writable    : !(bitmap & 4),
		    value       : value
		  };
		};
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _getPrototypeOf = __webpack_require__(38);
		
		var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
		
		var _getOwnPropertyDescriptor = __webpack_require__(42);
		
		var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = function get(object, property, receiver) {
		  if (object === null) object = Function.prototype;
		  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);
		
		  if (desc === undefined) {
		    var parent = (0, _getPrototypeOf2.default)(object);
		
		    if (parent === null) {
		      return undefined;
		    } else {
		      return get(parent, property, receiver);
		    }
		  } else if ("value" in desc) {
		    return desc.value;
		  } else {
		    var getter = desc.get;
		
		    if (getter === undefined) {
		      return undefined;
		    }
		
		    return getter.call(receiver);
		  }
		};
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(39), __esModule: true };
	
	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(40);
		module.exports = __webpack_require__(24).Object.getPrototypeOf;
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.9 Object.getPrototypeOf(O)
		var toObject        = __webpack_require__(5)
		  , $getPrototypeOf = __webpack_require__(41);
		
		__webpack_require__(22)('getPrototypeOf', function(){
		  return function getPrototypeOf(it){
		    return $getPrototypeOf(toObject(it));
		  };
		});
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
		var has         = __webpack_require__(9)
		  , toObject    = __webpack_require__(5)
		  , IE_PROTO    = __webpack_require__(17)('IE_PROTO')
		  , ObjectProto = Object.prototype;
		
		module.exports = Object.getPrototypeOf || function(O){
		  O = toObject(O);
		  if(has(O, IE_PROTO))return O[IE_PROTO];
		  if(typeof O.constructor == 'function' && O instanceof O.constructor){
		    return O.constructor.prototype;
		  } return O instanceof Object ? ObjectProto : null;
		};
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(43), __esModule: true };
	
	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(44);
		var $Object = __webpack_require__(24).Object;
		module.exports = function getOwnPropertyDescriptor(it, key){
		  return $Object.getOwnPropertyDescriptor(it, key);
		};
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
		var toIObject                 = __webpack_require__(10)
		  , $getOwnPropertyDescriptor = __webpack_require__(45).f;
		
		__webpack_require__(22)('getOwnPropertyDescriptor', function(){
		  return function getOwnPropertyDescriptor(it, key){
		    return $getOwnPropertyDescriptor(toIObject(it), key);
		  };
		});
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		var pIE            = __webpack_require__(46)
		  , createDesc     = __webpack_require__(36)
		  , toIObject      = __webpack_require__(10)
		  , toPrimitive    = __webpack_require__(35)
		  , has            = __webpack_require__(9)
		  , IE8_DOM_DEFINE = __webpack_require__(31)
		  , gOPD           = Object.getOwnPropertyDescriptor;
		
		exports.f = __webpack_require__(32) ? gOPD : function getOwnPropertyDescriptor(O, P){
		  O = toIObject(O);
		  P = toPrimitive(P, true);
		  if(IE8_DOM_DEFINE)try {
		    return gOPD(O, P);
		  } catch(e){ /* empty */ }
		  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
		};
	
	/***/ },
	/* 46 */
	/***/ function(module, exports) {
	
		exports.f = {}.propertyIsEnumerable;
	
	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(48), __esModule: true };
	
	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(49);
		__webpack_require__(50);
		__webpack_require__(62);
		__webpack_require__(66);
		__webpack_require__(82);
		module.exports = __webpack_require__(24).Set;
	
	/***/ },
	/* 49 */
	/***/ function(module, exports) {
	
	
	
	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var $at  = __webpack_require__(51)(true);
		
		// 21.1.3.27 String.prototype[@@iterator]()
		__webpack_require__(52)(String, 'String', function(iterated){
		  this._t = String(iterated); // target
		  this._i = 0;                // next index
		// 21.1.5.2.1 %StringIteratorPrototype%.next()
		}, function(){
		  var O     = this._t
		    , index = this._i
		    , point;
		  if(index >= O.length)return {value: undefined, done: true};
		  point = $at(O, index);
		  this._i += point.length;
		  return {value: point, done: false};
		});
	
	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {
	
		var toInteger = __webpack_require__(15)
		  , defined   = __webpack_require__(6);
		// true  -> String#at
		// false -> String#codePointAt
		module.exports = function(TO_STRING){
		  return function(that, pos){
		    var s = String(defined(that))
		      , i = toInteger(pos)
		      , l = s.length
		      , a, b;
		    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
		    a = s.charCodeAt(i);
		    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
		      ? TO_STRING ? s.charAt(i) : a
		      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
		  };
		};
	
	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var LIBRARY        = __webpack_require__(53)
		  , $export        = __webpack_require__(23)
		  , redefine       = __webpack_require__(54)
		  , hide           = __webpack_require__(27)
		  , has            = __webpack_require__(9)
		  , Iterators      = __webpack_require__(55)
		  , $iterCreate    = __webpack_require__(56)
		  , setToStringTag = __webpack_require__(60)
		  , getPrototypeOf = __webpack_require__(41)
		  , ITERATOR       = __webpack_require__(61)('iterator')
		  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
		  , FF_ITERATOR    = '@@iterator'
		  , KEYS           = 'keys'
		  , VALUES         = 'values';
		
		var returnThis = function(){ return this; };
		
		module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
		  $iterCreate(Constructor, NAME, next);
		  var getMethod = function(kind){
		    if(!BUGGY && kind in proto)return proto[kind];
		    switch(kind){
		      case KEYS: return function keys(){ return new Constructor(this, kind); };
		      case VALUES: return function values(){ return new Constructor(this, kind); };
		    } return function entries(){ return new Constructor(this, kind); };
		  };
		  var TAG        = NAME + ' Iterator'
		    , DEF_VALUES = DEFAULT == VALUES
		    , VALUES_BUG = false
		    , proto      = Base.prototype
		    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
		    , $default   = $native || getMethod(DEFAULT)
		    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
		    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
		    , methods, key, IteratorPrototype;
		  // Fix native
		  if($anyNative){
		    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
		    if(IteratorPrototype !== Object.prototype){
		      // Set @@toStringTag to native iterators
		      setToStringTag(IteratorPrototype, TAG, true);
		      // fix for some old engines
		      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
		    }
		  }
		  // fix Array#{values, @@iterator}.name in V8 / FF
		  if(DEF_VALUES && $native && $native.name !== VALUES){
		    VALUES_BUG = true;
		    $default = function values(){ return $native.call(this); };
		  }
		  // Define iterator
		  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
		    hide(proto, ITERATOR, $default);
		  }
		  // Plug for library
		  Iterators[NAME] = $default;
		  Iterators[TAG]  = returnThis;
		  if(DEFAULT){
		    methods = {
		      values:  DEF_VALUES ? $default : getMethod(VALUES),
		      keys:    IS_SET     ? $default : getMethod(KEYS),
		      entries: $entries
		    };
		    if(FORCED)for(key in methods){
		      if(!(key in proto))redefine(proto, key, methods[key]);
		    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
		  }
		  return methods;
		};
	
	/***/ },
	/* 53 */
	/***/ function(module, exports) {
	
		module.exports = true;
	
	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = __webpack_require__(27);
	
	/***/ },
	/* 55 */
	/***/ function(module, exports) {
	
		module.exports = {};
	
	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var create         = __webpack_require__(57)
		  , descriptor     = __webpack_require__(36)
		  , setToStringTag = __webpack_require__(60)
		  , IteratorPrototype = {};
		
		// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
		__webpack_require__(27)(IteratorPrototype, __webpack_require__(61)('iterator'), function(){ return this; });
		
		module.exports = function(Constructor, NAME, next){
		  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
		  setToStringTag(Constructor, NAME + ' Iterator');
		};
	
	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
		var anObject    = __webpack_require__(29)
		  , dPs         = __webpack_require__(58)
		  , enumBugKeys = __webpack_require__(21)
		  , IE_PROTO    = __webpack_require__(17)('IE_PROTO')
		  , Empty       = function(){ /* empty */ }
		  , PROTOTYPE   = 'prototype';
		
		// Create object with fake `null` prototype: use iframe Object with cleared prototype
		var createDict = function(){
		  // Thrash, waste and sodomy: IE GC bug
		  var iframe = __webpack_require__(34)('iframe')
		    , i      = enumBugKeys.length
		    , lt     = '<'
		    , gt     = '>'
		    , iframeDocument;
		  iframe.style.display = 'none';
		  __webpack_require__(59).appendChild(iframe);
		  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
		  // createDict = iframe.contentWindow.Object;
		  // html.removeChild(iframe);
		  iframeDocument = iframe.contentWindow.document;
		  iframeDocument.open();
		  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
		  iframeDocument.close();
		  createDict = iframeDocument.F;
		  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
		  return createDict();
		};
		
		module.exports = Object.create || function create(O, Properties){
		  var result;
		  if(O !== null){
		    Empty[PROTOTYPE] = anObject(O);
		    result = new Empty;
		    Empty[PROTOTYPE] = null;
		    // add "__proto__" for Object.getPrototypeOf polyfill
		    result[IE_PROTO] = O;
		  } else result = createDict();
		  return Properties === undefined ? result : dPs(result, Properties);
		};
	
	
	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {
	
		var dP       = __webpack_require__(28)
		  , anObject = __webpack_require__(29)
		  , getKeys  = __webpack_require__(7);
		
		module.exports = __webpack_require__(32) ? Object.defineProperties : function defineProperties(O, Properties){
		  anObject(O);
		  var keys   = getKeys(Properties)
		    , length = keys.length
		    , i = 0
		    , P;
		  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
		  return O;
		};
	
	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = __webpack_require__(19).document && document.documentElement;
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		var def = __webpack_require__(28).f
		  , has = __webpack_require__(9)
		  , TAG = __webpack_require__(61)('toStringTag');
		
		module.exports = function(it, tag, stat){
		  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
		};
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		var store      = __webpack_require__(18)('wks')
		  , uid        = __webpack_require__(20)
		  , Symbol     = __webpack_require__(19).Symbol
		  , USE_SYMBOL = typeof Symbol == 'function';
		
		var $exports = module.exports = function(name){
		  return store[name] || (store[name] =
		    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
		};
		
		$exports.store = store;
	
	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(63);
		var global        = __webpack_require__(19)
		  , hide          = __webpack_require__(27)
		  , Iterators     = __webpack_require__(55)
		  , TO_STRING_TAG = __webpack_require__(61)('toStringTag');
		
		for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
		  var NAME       = collections[i]
		    , Collection = global[NAME]
		    , proto      = Collection && Collection.prototype;
		  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
		  Iterators[NAME] = Iterators.Array;
		}
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var addToUnscopables = __webpack_require__(64)
		  , step             = __webpack_require__(65)
		  , Iterators        = __webpack_require__(55)
		  , toIObject        = __webpack_require__(10);
		
		// 22.1.3.4 Array.prototype.entries()
		// 22.1.3.13 Array.prototype.keys()
		// 22.1.3.29 Array.prototype.values()
		// 22.1.3.30 Array.prototype[@@iterator]()
		module.exports = __webpack_require__(52)(Array, 'Array', function(iterated, kind){
		  this._t = toIObject(iterated); // target
		  this._i = 0;                   // next index
		  this._k = kind;                // kind
		// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
		}, function(){
		  var O     = this._t
		    , kind  = this._k
		    , index = this._i++;
		  if(!O || index >= O.length){
		    this._t = undefined;
		    return step(1);
		  }
		  if(kind == 'keys'  )return step(0, index);
		  if(kind == 'values')return step(0, O[index]);
		  return step(0, [index, O[index]]);
		}, 'values');
		
		// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
		Iterators.Arguments = Iterators.Array;
		
		addToUnscopables('keys');
		addToUnscopables('values');
		addToUnscopables('entries');
	
	/***/ },
	/* 64 */
	/***/ function(module, exports) {
	
		module.exports = function(){ /* empty */ };
	
	/***/ },
	/* 65 */
	/***/ function(module, exports) {
	
		module.exports = function(done, value){
		  return {value: value, done: !!done};
		};
	
	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var strong = __webpack_require__(67);
		
		// 23.2 Set Objects
		module.exports = __webpack_require__(77)('Set', function(get){
		  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
		}, {
		  // 23.2.3.1 Set.prototype.add(value)
		  add: function add(value){
		    return strong.def(this, value = value === 0 ? 0 : value, value);
		  }
		}, strong);
	
	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var dP          = __webpack_require__(28).f
		  , create      = __webpack_require__(57)
		  , redefineAll = __webpack_require__(68)
		  , ctx         = __webpack_require__(25)
		  , anInstance  = __webpack_require__(69)
		  , defined     = __webpack_require__(6)
		  , forOf       = __webpack_require__(70)
		  , $iterDefine = __webpack_require__(52)
		  , step        = __webpack_require__(65)
		  , setSpecies  = __webpack_require__(75)
		  , DESCRIPTORS = __webpack_require__(32)
		  , fastKey     = __webpack_require__(76).fastKey
		  , SIZE        = DESCRIPTORS ? '_s' : 'size';
		
		var getEntry = function(that, key){
		  // fast case
		  var index = fastKey(key), entry;
		  if(index !== 'F')return that._i[index];
		  // frozen object case
		  for(entry = that._f; entry; entry = entry.n){
		    if(entry.k == key)return entry;
		  }
		};
		
		module.exports = {
		  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
		    var C = wrapper(function(that, iterable){
		      anInstance(that, C, NAME, '_i');
		      that._i = create(null); // index
		      that._f = undefined;    // first entry
		      that._l = undefined;    // last entry
		      that[SIZE] = 0;         // size
		      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
		    });
		    redefineAll(C.prototype, {
		      // 23.1.3.1 Map.prototype.clear()
		      // 23.2.3.2 Set.prototype.clear()
		      clear: function clear(){
		        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
		          entry.r = true;
		          if(entry.p)entry.p = entry.p.n = undefined;
		          delete data[entry.i];
		        }
		        that._f = that._l = undefined;
		        that[SIZE] = 0;
		      },
		      // 23.1.3.3 Map.prototype.delete(key)
		      // 23.2.3.4 Set.prototype.delete(value)
		      'delete': function(key){
		        var that  = this
		          , entry = getEntry(that, key);
		        if(entry){
		          var next = entry.n
		            , prev = entry.p;
		          delete that._i[entry.i];
		          entry.r = true;
		          if(prev)prev.n = next;
		          if(next)next.p = prev;
		          if(that._f == entry)that._f = next;
		          if(that._l == entry)that._l = prev;
		          that[SIZE]--;
		        } return !!entry;
		      },
		      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
		      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
		      forEach: function forEach(callbackfn /*, that = undefined */){
		        anInstance(this, C, 'forEach');
		        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
		          , entry;
		        while(entry = entry ? entry.n : this._f){
		          f(entry.v, entry.k, this);
		          // revert to the last existing entry
		          while(entry && entry.r)entry = entry.p;
		        }
		      },
		      // 23.1.3.7 Map.prototype.has(key)
		      // 23.2.3.7 Set.prototype.has(value)
		      has: function has(key){
		        return !!getEntry(this, key);
		      }
		    });
		    if(DESCRIPTORS)dP(C.prototype, 'size', {
		      get: function(){
		        return defined(this[SIZE]);
		      }
		    });
		    return C;
		  },
		  def: function(that, key, value){
		    var entry = getEntry(that, key)
		      , prev, index;
		    // change existing entry
		    if(entry){
		      entry.v = value;
		    // create new entry
		    } else {
		      that._l = entry = {
		        i: index = fastKey(key, true), // <- index
		        k: key,                        // <- key
		        v: value,                      // <- value
		        p: prev = that._l,             // <- previous entry
		        n: undefined,                  // <- next entry
		        r: false                       // <- removed
		      };
		      if(!that._f)that._f = entry;
		      if(prev)prev.n = entry;
		      that[SIZE]++;
		      // add to index
		      if(index !== 'F')that._i[index] = entry;
		    } return that;
		  },
		  getEntry: getEntry,
		  setStrong: function(C, NAME, IS_MAP){
		    // add .keys, .values, .entries, [@@iterator]
		    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
		    $iterDefine(C, NAME, function(iterated, kind){
		      this._t = iterated;  // target
		      this._k = kind;      // kind
		      this._l = undefined; // previous
		    }, function(){
		      var that  = this
		        , kind  = that._k
		        , entry = that._l;
		      // revert to the last existing entry
		      while(entry && entry.r)entry = entry.p;
		      // get next entry
		      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
		        // or finish the iteration
		        that._t = undefined;
		        return step(1);
		      }
		      // return step by kind
		      if(kind == 'keys'  )return step(0, entry.k);
		      if(kind == 'values')return step(0, entry.v);
		      return step(0, [entry.k, entry.v]);
		    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
		
		    // add [@@species], 23.1.2.2, 23.2.2.2
		    setSpecies(NAME);
		  }
		};
	
	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {
	
		var hide = __webpack_require__(27);
		module.exports = function(target, src, safe){
		  for(var key in src){
		    if(safe && target[key])target[key] = src[key];
		    else hide(target, key, src[key]);
		  } return target;
		};
	
	/***/ },
	/* 69 */
	/***/ function(module, exports) {
	
		module.exports = function(it, Constructor, name, forbiddenField){
		  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
		    throw TypeError(name + ': incorrect invocation!');
		  } return it;
		};
	
	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {
	
		var ctx         = __webpack_require__(25)
		  , call        = __webpack_require__(71)
		  , isArrayIter = __webpack_require__(72)
		  , anObject    = __webpack_require__(29)
		  , toLength    = __webpack_require__(14)
		  , getIterFn   = __webpack_require__(73)
		  , BREAK       = {}
		  , RETURN      = {};
		var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
		  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
		    , f      = ctx(fn, that, entries ? 2 : 1)
		    , index  = 0
		    , length, step, iterator, result;
		  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
		  // fast case for arrays with default iterator
		  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
		    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
		    if(result === BREAK || result === RETURN)return result;
		  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
		    result = call(iterator, f, step.value, entries);
		    if(result === BREAK || result === RETURN)return result;
		  }
		};
		exports.BREAK  = BREAK;
		exports.RETURN = RETURN;
	
	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {
	
		// call something on iterator step with safe closing on error
		var anObject = __webpack_require__(29);
		module.exports = function(iterator, fn, value, entries){
		  try {
		    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
		  // 7.4.6 IteratorClose(iterator, completion)
		  } catch(e){
		    var ret = iterator['return'];
		    if(ret !== undefined)anObject(ret.call(iterator));
		    throw e;
		  }
		};
	
	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {
	
		// check on default Array iterator
		var Iterators  = __webpack_require__(55)
		  , ITERATOR   = __webpack_require__(61)('iterator')
		  , ArrayProto = Array.prototype;
		
		module.exports = function(it){
		  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
		};
	
	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {
	
		var classof   = __webpack_require__(74)
		  , ITERATOR  = __webpack_require__(61)('iterator')
		  , Iterators = __webpack_require__(55);
		module.exports = __webpack_require__(24).getIteratorMethod = function(it){
		  if(it != undefined)return it[ITERATOR]
		    || it['@@iterator']
		    || Iterators[classof(it)];
		};
	
	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {
	
		// getting tag from 19.1.3.6 Object.prototype.toString()
		var cof = __webpack_require__(12)
		  , TAG = __webpack_require__(61)('toStringTag')
		  // ES3 wrong here
		  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
		
		// fallback for IE11 Script Access Denied error
		var tryGet = function(it, key){
		  try {
		    return it[key];
		  } catch(e){ /* empty */ }
		};
		
		module.exports = function(it){
		  var O, T, B;
		  return it === undefined ? 'Undefined' : it === null ? 'Null'
		    // @@toStringTag case
		    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
		    // builtinTag case
		    : ARG ? cof(O)
		    // ES3 arguments fallback
		    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
		};
	
	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var global      = __webpack_require__(19)
		  , core        = __webpack_require__(24)
		  , dP          = __webpack_require__(28)
		  , DESCRIPTORS = __webpack_require__(32)
		  , SPECIES     = __webpack_require__(61)('species');
		
		module.exports = function(KEY){
		  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
		  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
		    configurable: true,
		    get: function(){ return this; }
		  });
		};
	
	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {
	
		var META     = __webpack_require__(20)('meta')
		  , isObject = __webpack_require__(30)
		  , has      = __webpack_require__(9)
		  , setDesc  = __webpack_require__(28).f
		  , id       = 0;
		var isExtensible = Object.isExtensible || function(){
		  return true;
		};
		var FREEZE = !__webpack_require__(33)(function(){
		  return isExtensible(Object.preventExtensions({}));
		});
		var setMeta = function(it){
		  setDesc(it, META, {value: {
		    i: 'O' + ++id, // object ID
		    w: {}          // weak collections IDs
		  }});
		};
		var fastKey = function(it, create){
		  // return primitive with prefix
		  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
		  if(!has(it, META)){
		    // can't set metadata to uncaught frozen object
		    if(!isExtensible(it))return 'F';
		    // not necessary to add metadata
		    if(!create)return 'E';
		    // add missing metadata
		    setMeta(it);
		  // return object ID
		  } return it[META].i;
		};
		var getWeak = function(it, create){
		  if(!has(it, META)){
		    // can't set metadata to uncaught frozen object
		    if(!isExtensible(it))return true;
		    // not necessary to add metadata
		    if(!create)return false;
		    // add missing metadata
		    setMeta(it);
		  // return hash weak collections IDs
		  } return it[META].w;
		};
		// add metadata on freeze-family methods calling
		var onFreeze = function(it){
		  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
		  return it;
		};
		var meta = module.exports = {
		  KEY:      META,
		  NEED:     false,
		  fastKey:  fastKey,
		  getWeak:  getWeak,
		  onFreeze: onFreeze
		};
	
	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var global         = __webpack_require__(19)
		  , $export        = __webpack_require__(23)
		  , meta           = __webpack_require__(76)
		  , fails          = __webpack_require__(33)
		  , hide           = __webpack_require__(27)
		  , redefineAll    = __webpack_require__(68)
		  , forOf          = __webpack_require__(70)
		  , anInstance     = __webpack_require__(69)
		  , isObject       = __webpack_require__(30)
		  , setToStringTag = __webpack_require__(60)
		  , dP             = __webpack_require__(28).f
		  , each           = __webpack_require__(78)(0)
		  , DESCRIPTORS    = __webpack_require__(32);
		
		module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
		  var Base  = global[NAME]
		    , C     = Base
		    , ADDER = IS_MAP ? 'set' : 'add'
		    , proto = C && C.prototype
		    , O     = {};
		  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
		    new C().entries().next();
		  }))){
		    // create collection constructor
		    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
		    redefineAll(C.prototype, methods);
		    meta.NEED = true;
		  } else {
		    C = wrapper(function(target, iterable){
		      anInstance(target, C, NAME, '_c');
		      target._c = new Base;
		      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
		    });
		    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
		      var IS_ADDER = KEY == 'add' || KEY == 'set';
		      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
		        anInstance(this, C, KEY);
		        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
		        var result = this._c[KEY](a === 0 ? 0 : a, b);
		        return IS_ADDER ? this : result;
		      });
		    });
		    if('size' in proto)dP(C.prototype, 'size', {
		      get: function(){
		        return this._c.size;
		      }
		    });
		  }
		
		  setToStringTag(C, NAME);
		
		  O[NAME] = C;
		  $export($export.G + $export.W + $export.F, O);
		
		  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
		
		  return C;
		};
	
	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 0 -> Array#forEach
		// 1 -> Array#map
		// 2 -> Array#filter
		// 3 -> Array#some
		// 4 -> Array#every
		// 5 -> Array#find
		// 6 -> Array#findIndex
		var ctx      = __webpack_require__(25)
		  , IObject  = __webpack_require__(11)
		  , toObject = __webpack_require__(5)
		  , toLength = __webpack_require__(14)
		  , asc      = __webpack_require__(79);
		module.exports = function(TYPE, $create){
		  var IS_MAP        = TYPE == 1
		    , IS_FILTER     = TYPE == 2
		    , IS_SOME       = TYPE == 3
		    , IS_EVERY      = TYPE == 4
		    , IS_FIND_INDEX = TYPE == 6
		    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
		    , create        = $create || asc;
		  return function($this, callbackfn, that){
		    var O      = toObject($this)
		      , self   = IObject(O)
		      , f      = ctx(callbackfn, that, 3)
		      , length = toLength(self.length)
		      , index  = 0
		      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
		      , val, res;
		    for(;length > index; index++)if(NO_HOLES || index in self){
		      val = self[index];
		      res = f(val, index, O);
		      if(TYPE){
		        if(IS_MAP)result[index] = res;            // map
		        else if(res)switch(TYPE){
		          case 3: return true;                    // some
		          case 5: return val;                     // find
		          case 6: return index;                   // findIndex
		          case 2: result.push(val);               // filter
		        } else if(IS_EVERY)return false;          // every
		      }
		    }
		    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
		  };
		};
	
	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
		var speciesConstructor = __webpack_require__(80);
		
		module.exports = function(original, length){
		  return new (speciesConstructor(original))(length);
		};
	
	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(30)
		  , isArray  = __webpack_require__(81)
		  , SPECIES  = __webpack_require__(61)('species');
		
		module.exports = function(original){
		  var C;
		  if(isArray(original)){
		    C = original.constructor;
		    // cross-realm fallback
		    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
		    if(isObject(C)){
		      C = C[SPECIES];
		      if(C === null)C = undefined;
		    }
		  } return C === undefined ? Array : C;
		};
	
	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.2.2 IsArray(argument)
		var cof = __webpack_require__(12);
		module.exports = Array.isArray || function isArray(arg){
		  return cof(arg) == 'Array';
		};
	
	/***/ },
	/* 82 */
	/***/ function(module, exports, __webpack_require__) {
	
		// https://github.com/DavidBruant/Map-Set.prototype.toJSON
		var $export  = __webpack_require__(23);
		
		$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(83)('Set')});
	
	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {
	
		// https://github.com/DavidBruant/Map-Set.prototype.toJSON
		var classof = __webpack_require__(74)
		  , from    = __webpack_require__(84);
		module.exports = function(NAME){
		  return function toJSON(){
		    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
		    return from(this);
		  };
		};
	
	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {
	
		var forOf = __webpack_require__(70);
		
		module.exports = function(iter, ITERATOR){
		  var result = [];
		  forOf(iter, false, result.push, result, ITERATOR);
		  return result;
		};
	
	
	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _defineProperty = __webpack_require__(86);
		
		var _defineProperty2 = _interopRequireDefault(_defineProperty);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = function () {
		  function defineProperties(target, props) {
		    for (var i = 0; i < props.length; i++) {
		      var descriptor = props[i];
		      descriptor.enumerable = descriptor.enumerable || false;
		      descriptor.configurable = true;
		      if ("value" in descriptor) descriptor.writable = true;
		      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
		    }
		  }
		
		  return function (Constructor, protoProps, staticProps) {
		    if (protoProps) defineProperties(Constructor.prototype, protoProps);
		    if (staticProps) defineProperties(Constructor, staticProps);
		    return Constructor;
		  };
		}();
	
	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(87), __esModule: true };
	
	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(88);
		var $Object = __webpack_require__(24).Object;
		module.exports = function defineProperty(it, key, desc){
		  return $Object.defineProperty(it, key, desc);
		};
	
	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {
	
		var $export = __webpack_require__(23);
		// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
		$export($export.S + $export.F * !__webpack_require__(32), 'Object', {defineProperty: __webpack_require__(28).f});
	
	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _typeof2 = __webpack_require__(90);
		
		var _typeof3 = _interopRequireDefault(_typeof2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = function (self, call) {
		  if (!self) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }
		
		  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
		};
	
	/***/ },
	/* 90 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _iterator = __webpack_require__(91);
		
		var _iterator2 = _interopRequireDefault(_iterator);
		
		var _symbol = __webpack_require__(94);
		
		var _symbol2 = _interopRequireDefault(_symbol);
		
		var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
		  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
		} : function (obj) {
		  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		};
	
	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(92), __esModule: true };
	
	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(50);
		__webpack_require__(62);
		module.exports = __webpack_require__(93).f('iterator');
	
	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {
	
		exports.f = __webpack_require__(61);
	
	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(95), __esModule: true };
	
	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(96);
		__webpack_require__(49);
		__webpack_require__(103);
		__webpack_require__(104);
		module.exports = __webpack_require__(24).Symbol;
	
	/***/ },
	/* 96 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		// ECMAScript 6 symbols shim
		var global         = __webpack_require__(19)
		  , has            = __webpack_require__(9)
		  , DESCRIPTORS    = __webpack_require__(32)
		  , $export        = __webpack_require__(23)
		  , redefine       = __webpack_require__(54)
		  , META           = __webpack_require__(76).KEY
		  , $fails         = __webpack_require__(33)
		  , shared         = __webpack_require__(18)
		  , setToStringTag = __webpack_require__(60)
		  , uid            = __webpack_require__(20)
		  , wks            = __webpack_require__(61)
		  , wksExt         = __webpack_require__(93)
		  , wksDefine      = __webpack_require__(97)
		  , keyOf          = __webpack_require__(98)
		  , enumKeys       = __webpack_require__(99)
		  , isArray        = __webpack_require__(81)
		  , anObject       = __webpack_require__(29)
		  , toIObject      = __webpack_require__(10)
		  , toPrimitive    = __webpack_require__(35)
		  , createDesc     = __webpack_require__(36)
		  , _create        = __webpack_require__(57)
		  , gOPNExt        = __webpack_require__(101)
		  , $GOPD          = __webpack_require__(45)
		  , $DP            = __webpack_require__(28)
		  , $keys          = __webpack_require__(7)
		  , gOPD           = $GOPD.f
		  , dP             = $DP.f
		  , gOPN           = gOPNExt.f
		  , $Symbol        = global.Symbol
		  , $JSON          = global.JSON
		  , _stringify     = $JSON && $JSON.stringify
		  , PROTOTYPE      = 'prototype'
		  , HIDDEN         = wks('_hidden')
		  , TO_PRIMITIVE   = wks('toPrimitive')
		  , isEnum         = {}.propertyIsEnumerable
		  , SymbolRegistry = shared('symbol-registry')
		  , AllSymbols     = shared('symbols')
		  , OPSymbols      = shared('op-symbols')
		  , ObjectProto    = Object[PROTOTYPE]
		  , USE_NATIVE     = typeof $Symbol == 'function'
		  , QObject        = global.QObject;
		// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
		var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
		
		// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
		var setSymbolDesc = DESCRIPTORS && $fails(function(){
		  return _create(dP({}, 'a', {
		    get: function(){ return dP(this, 'a', {value: 7}).a; }
		  })).a != 7;
		}) ? function(it, key, D){
		  var protoDesc = gOPD(ObjectProto, key);
		  if(protoDesc)delete ObjectProto[key];
		  dP(it, key, D);
		  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
		} : dP;
		
		var wrap = function(tag){
		  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
		  sym._k = tag;
		  return sym;
		};
		
		var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
		  return typeof it == 'symbol';
		} : function(it){
		  return it instanceof $Symbol;
		};
		
		var $defineProperty = function defineProperty(it, key, D){
		  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
		  anObject(it);
		  key = toPrimitive(key, true);
		  anObject(D);
		  if(has(AllSymbols, key)){
		    if(!D.enumerable){
		      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
		      it[HIDDEN][key] = true;
		    } else {
		      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
		      D = _create(D, {enumerable: createDesc(0, false)});
		    } return setSymbolDesc(it, key, D);
		  } return dP(it, key, D);
		};
		var $defineProperties = function defineProperties(it, P){
		  anObject(it);
		  var keys = enumKeys(P = toIObject(P))
		    , i    = 0
		    , l = keys.length
		    , key;
		  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
		  return it;
		};
		var $create = function create(it, P){
		  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
		};
		var $propertyIsEnumerable = function propertyIsEnumerable(key){
		  var E = isEnum.call(this, key = toPrimitive(key, true));
		  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
		  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
		};
		var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
		  it  = toIObject(it);
		  key = toPrimitive(key, true);
		  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
		  var D = gOPD(it, key);
		  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
		  return D;
		};
		var $getOwnPropertyNames = function getOwnPropertyNames(it){
		  var names  = gOPN(toIObject(it))
		    , result = []
		    , i      = 0
		    , key;
		  while(names.length > i){
		    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
		  } return result;
		};
		var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
		  var IS_OP  = it === ObjectProto
		    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
		    , result = []
		    , i      = 0
		    , key;
		  while(names.length > i){
		    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
		  } return result;
		};
		
		// 19.4.1.1 Symbol([description])
		if(!USE_NATIVE){
		  $Symbol = function Symbol(){
		    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
		    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
		    var $set = function(value){
		      if(this === ObjectProto)$set.call(OPSymbols, value);
		      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
		      setSymbolDesc(this, tag, createDesc(1, value));
		    };
		    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
		    return wrap(tag);
		  };
		  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
		    return this._k;
		  });
		
		  $GOPD.f = $getOwnPropertyDescriptor;
		  $DP.f   = $defineProperty;
		  __webpack_require__(102).f = gOPNExt.f = $getOwnPropertyNames;
		  __webpack_require__(46).f  = $propertyIsEnumerable;
		  __webpack_require__(100).f = $getOwnPropertySymbols;
		
		  if(DESCRIPTORS && !__webpack_require__(53)){
		    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
		  }
		
		  wksExt.f = function(name){
		    return wrap(wks(name));
		  }
		}
		
		$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
		
		for(var symbols = (
		  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
		  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
		).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
		
		for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
		
		$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
		  // 19.4.2.1 Symbol.for(key)
		  'for': function(key){
		    return has(SymbolRegistry, key += '')
		      ? SymbolRegistry[key]
		      : SymbolRegistry[key] = $Symbol(key);
		  },
		  // 19.4.2.5 Symbol.keyFor(sym)
		  keyFor: function keyFor(key){
		    if(isSymbol(key))return keyOf(SymbolRegistry, key);
		    throw TypeError(key + ' is not a symbol!');
		  },
		  useSetter: function(){ setter = true; },
		  useSimple: function(){ setter = false; }
		});
		
		$export($export.S + $export.F * !USE_NATIVE, 'Object', {
		  // 19.1.2.2 Object.create(O [, Properties])
		  create: $create,
		  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
		  defineProperty: $defineProperty,
		  // 19.1.2.3 Object.defineProperties(O, Properties)
		  defineProperties: $defineProperties,
		  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
		  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
		  // 19.1.2.7 Object.getOwnPropertyNames(O)
		  getOwnPropertyNames: $getOwnPropertyNames,
		  // 19.1.2.8 Object.getOwnPropertySymbols(O)
		  getOwnPropertySymbols: $getOwnPropertySymbols
		});
		
		// 24.3.2 JSON.stringify(value [, replacer [, space]])
		$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
		  var S = $Symbol();
		  // MS Edge converts symbol values to JSON as {}
		  // WebKit converts symbol values to JSON as null
		  // V8 throws on boxed symbols
		  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
		})), 'JSON', {
		  stringify: function stringify(it){
		    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
		    var args = [it]
		      , i    = 1
		      , replacer, $replacer;
		    while(arguments.length > i)args.push(arguments[i++]);
		    replacer = args[1];
		    if(typeof replacer == 'function')$replacer = replacer;
		    if($replacer || !isArray(replacer))replacer = function(key, value){
		      if($replacer)value = $replacer.call(this, key, value);
		      if(!isSymbol(value))return value;
		    };
		    args[1] = replacer;
		    return _stringify.apply($JSON, args);
		  }
		});
		
		// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
		$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(27)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
		// 19.4.3.5 Symbol.prototype[@@toStringTag]
		setToStringTag($Symbol, 'Symbol');
		// 20.2.1.9 Math[@@toStringTag]
		setToStringTag(Math, 'Math', true);
		// 24.3.3 JSON[@@toStringTag]
		setToStringTag(global.JSON, 'JSON', true);
	
	/***/ },
	/* 97 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global         = __webpack_require__(19)
		  , core           = __webpack_require__(24)
		  , LIBRARY        = __webpack_require__(53)
		  , wksExt         = __webpack_require__(93)
		  , defineProperty = __webpack_require__(28).f;
		module.exports = function(name){
		  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
		  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
		};
	
	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {
	
		var getKeys   = __webpack_require__(7)
		  , toIObject = __webpack_require__(10);
		module.exports = function(object, el){
		  var O      = toIObject(object)
		    , keys   = getKeys(O)
		    , length = keys.length
		    , index  = 0
		    , key;
		  while(length > index)if(O[key = keys[index++]] === el)return key;
		};
	
	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {
	
		// all enumerable object keys, includes symbols
		var getKeys = __webpack_require__(7)
		  , gOPS    = __webpack_require__(100)
		  , pIE     = __webpack_require__(46);
		module.exports = function(it){
		  var result     = getKeys(it)
		    , getSymbols = gOPS.f;
		  if(getSymbols){
		    var symbols = getSymbols(it)
		      , isEnum  = pIE.f
		      , i       = 0
		      , key;
		    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
		  } return result;
		};
	
	/***/ },
	/* 100 */
	/***/ function(module, exports) {
	
		exports.f = Object.getOwnPropertySymbols;
	
	/***/ },
	/* 101 */
	/***/ function(module, exports, __webpack_require__) {
	
		// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
		var toIObject = __webpack_require__(10)
		  , gOPN      = __webpack_require__(102).f
		  , toString  = {}.toString;
		
		var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
		  ? Object.getOwnPropertyNames(window) : [];
		
		var getWindowNames = function(it){
		  try {
		    return gOPN(it);
		  } catch(e){
		    return windowNames.slice();
		  }
		};
		
		module.exports.f = function getOwnPropertyNames(it){
		  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
		};
	
	
	/***/ },
	/* 102 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
		var $keys      = __webpack_require__(8)
		  , hiddenKeys = __webpack_require__(21).concat('length', 'prototype');
		
		exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
		  return $keys(O, hiddenKeys);
		};
	
	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(97)('asyncIterator');
	
	/***/ },
	/* 104 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(97)('observable');
	
	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _setPrototypeOf = __webpack_require__(106);
		
		var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
		
		var _create = __webpack_require__(110);
		
		var _create2 = _interopRequireDefault(_create);
		
		var _typeof2 = __webpack_require__(90);
		
		var _typeof3 = _interopRequireDefault(_typeof2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = function (subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
		  }
		
		  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      enumerable: false,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
		};
	
	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(107), __esModule: true };
	
	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(108);
		module.exports = __webpack_require__(24).Object.setPrototypeOf;
	
	/***/ },
	/* 108 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 19.1.3.19 Object.setPrototypeOf(O, proto)
		var $export = __webpack_require__(23);
		$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(109).set});
	
	/***/ },
	/* 109 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Works with __proto__ only. Old v8 can't work with null proto objects.
		/* eslint-disable no-proto */
		var isObject = __webpack_require__(30)
		  , anObject = __webpack_require__(29);
		var check = function(O, proto){
		  anObject(O);
		  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
		};
		module.exports = {
		  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
		    function(test, buggy, set){
		      try {
		        set = __webpack_require__(25)(Function.call, __webpack_require__(45).f(Object.prototype, '__proto__').set, 2);
		        set(test, []);
		        buggy = !(test instanceof Array);
		      } catch(e){ buggy = true; }
		      return function setPrototypeOf(O, proto){
		        check(O, proto);
		        if(buggy)O.__proto__ = proto;
		        else set(O, proto);
		        return O;
		      };
		    }({}, false) : undefined),
		  check: check
		};
	
	/***/ },
	/* 110 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(111), __esModule: true };
	
	/***/ },
	/* 111 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(112);
		var $Object = __webpack_require__(24).Object;
		module.exports = function create(P, D){
		  return $Object.create(P, D);
		};
	
	/***/ },
	/* 112 */
	/***/ function(module, exports, __webpack_require__) {
	
		var $export = __webpack_require__(23)
		// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
		$export($export.S, 'Object', {create: __webpack_require__(57)});
	
	/***/ },
	/* 113 */
	/***/ function(module, exports) {
	
		"use strict";
		
		exports.__esModule = true;
		
		exports.default = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};
	
	/***/ },
	/* 114 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * @license
		 * JavaScript Interpreter
		 *
		 * Copyright 2013 Google Inc.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *   http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		
		/**
		 * @fileoverview Interpreting JavaScript in JavaScript.
		 * @author fraser@google.com (Neil Fraser)
		 */
		'use strict';
		
		/**
		 * Create a new interpreter.
		 * @param {string|!Object} code Raw JavaScript text or AST.
		 * @param {Function} opt_initFunc Optional initialization function.  Used to
		 *     define APIs.  When called it is passed the interpreter object and the
		 *     global scope object.
		 * @constructor
		 */
		
		/*istanbul ignore next*/Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _create = __webpack_require__(110);
		
		var _create2 = _interopRequireDefault(_create);
		
		var _stringify = __webpack_require__(115);
		
		var _stringify2 = _interopRequireDefault(_stringify);
		
		var _typeof2 = __webpack_require__(90);
		
		var _typeof3 = _interopRequireDefault(_typeof2);
		
		var _map = __webpack_require__(117);
		
		var _map2 = _interopRequireDefault(_map);
		
		var _classCallCheck2 = __webpack_require__(113);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		var _createClass2 = __webpack_require__(85);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		var /*istanbul ignore next*/_acornEs = __webpack_require__(121);
		
		/*istanbul ignore next*/var acorn = _interopRequireWildcard(_acornEs);
		
		/*istanbul ignore next*/function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var Interpreter = function () {
		  function /*istanbul ignore next*/Interpreter(code, opt_initFunc) {
		    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Interpreter);
		
		    if (typeof code == 'string') {
		      code = acorn.parse(code);
		    }
		    this.objectMap = new /*istanbul ignore next*/_map2.default();
		    this.ast = code;
		    this.initFunc_ = opt_initFunc;
		    this.paused_ = false;
		    // Predefine some common primitives for performance.
		    this.UNDEFINED = new Interpreter.Primitive(undefined, this);
		    this.NULL = new Interpreter.Primitive(null, this);
		    this.TRUE = new Interpreter.Primitive(true, this);
		    this.FALSE = new Interpreter.Primitive(false, this);
		    this.NUMBER_ZERO = new Interpreter.Primitive(0, this);
		    this.NUMBER_ONE = new Interpreter.Primitive(1, this);
		    this.STRING_EMPTY = new Interpreter.Primitive('', this);
		    var scope = this.createScope(this.ast, null);
		    // Fix the parent properties now that the global scope exists.
		    //this.UNDEFINED.parent = undefined;
		    //this.NULL.parent = undefined;
		    this.TRUE.parent = this.BOOLEAN;
		    this.FALSE.parent = this.BOOLEAN;
		    this.NUMBER_ZERO.parent = this.NUMBER;
		    this.NUMBER_ONE.parent = this.NUMBER;
		    this.STRING_EMPTY.parent = this.STRING;
		    this.stateStack = [{
		      node: this.ast,
		      scope: scope,
		      thisExpression: scope,
		      done: false
		    }];
		  }
		
		  /**
		   * Add more code to the interpreter.
		   * @param {string|!Object} code Raw JavaScript text or AST.
		   */
		
		
		  (0, _createClass3.default)(Interpreter, [{
		    key: 'appendCode',
		    value: function appendCode(code) {
		      var state = this.stateStack[this.stateStack.length - 1];
		      if (!state || state.node.type != 'Program') {
		        throw Error('Expecting original AST to start with a Program node.');
		      }
		      if (typeof code == 'string') {
		        code = acorn.parse(code);
		      }
		      if (!code || code.type != 'Program') {
		        throw Error('Expecting new AST to start with a Program node.');
		      }
		      // Append the new program to the old one.
		      for (var i = 0, node; node = code.body[i]; i++) {
		        state.node.body.push(node);
		      }
		      state.done = false;
		    }
		
		    /**
		     * Execute one step of the interpreter.
		     * @return {boolean} True if a step was executed, false if no more instructions.
		     */
		
		  }, {
		    key: 'step',
		    value: function step() {
		      var state = this.stateStack[0];
		      if (!state || state.node.type == 'Program' && state.done) {
		        return false;
		      } else if (this.paused_) {
		        return true;
		      }
		      this['step' + state.node.type]();
		      return true;
		    }
		
		    /**
		     * Execute the interpreter to program completion.  Vulnerable to infinite loops.
		     * @return {boolean} True if a execution is asynchonously blocked,
		     *     false if no more instructions.
		     */
		
		  }, {
		    key: 'run',
		    value: function run() {
		      while (!this.paused_ && this.step()) {}
		      return this.paused_;
		    }
		
		    /**
		     * Initialize the global scope with buitin properties and functions.
		     * @param {!Object} scope Global scope.
		     */
		
		  }, {
		    key: 'initGlobalScope',
		    value: function initGlobalScope(scope) {
		      // Initialize uneditable global properties.
		      this.setProperty(scope, 'Infinity', this.createPrimitive(Infinity), true);
		      this.setProperty(scope, 'NaN', this.createPrimitive(NaN), true);
		      this.setProperty(scope, 'undefined', this.UNDEFINED, true);
		      this.setProperty(scope, 'window', scope, true);
		      this.setProperty(scope, 'self', scope, false); // Editable.
		
		      // Initialize global objects.
		      this.initFunction(scope);
		      this.initObject(scope);
		      // Unable to set scope's parent prior (this.OBJECT did not exist).
		      scope.parent = this.OBJECT;
		      this.initArray(scope);
		      this.initNumber(scope);
		      this.initString(scope);
		      this.initBoolean(scope);
		      this.initDate(scope);
		      this.initMath(scope);
		      this.initRegExp(scope);
		      this.initJSON(scope);
		      this.initError(scope);
		
		      // Initialize global functions.
		      var thisInterpreter = this;
		      var wrapper;
		      wrapper = function /*istanbul ignore next*/wrapper(num) {
		        num = num || thisInterpreter.UNDEFINED;
		        return thisInterpreter.createPrimitive(isNaN(num.toNumber()));
		      };
		      this.setProperty(scope, 'isNaN', this.createNativeFunction(wrapper));
		      wrapper = function /*istanbul ignore next*/wrapper(num) {
		        num = num || thisInterpreter.UNDEFINED;
		        return thisInterpreter.createPrimitive(isFinite(num.toNumber()));
		      };
		      this.setProperty(scope, 'isFinite', this.createNativeFunction(wrapper));
		      wrapper = function /*istanbul ignore next*/wrapper(str) {
		        str = str || thisInterpreter.UNDEFINED;
		        return thisInterpreter.createPrimitive(parseFloat(str.toNumber()));
		      };
		      this.setProperty(scope, 'parseFloat', this.createNativeFunction(wrapper));
		      wrapper = function /*istanbul ignore next*/wrapper(str, radix) {
		        str = str || thisInterpreter.UNDEFINED;
		        radix = radix || thisInterpreter.UNDEFINED;
		        return thisInterpreter.createPrimitive(parseInt(str.toString(), radix.toNumber()));
		      };
		      this.setProperty(scope, 'parseInt', this.createNativeFunction(wrapper));
		
		      var func = this.createObject(this.FUNCTION);
		      func.eval = true;
		      this.setProperty(func, 'length', this.NUMBER_ONE, true);
		      this.setProperty(scope, 'eval', func);
		
		      var strFunctions = [[escape, 'escape'], [unescape, 'unescape'], [decodeURI, 'decodeURI'], [decodeURIComponent, 'decodeURIComponent'], [encodeURI, 'encodeURI'], [encodeURIComponent, 'encodeURIComponent']];
		      for (var i = 0; i < strFunctions.length; i++) {
		        wrapper = function (nativeFunc) {
		          return function (str) {
		            str = (str || thisInterpreter.UNDEFINED).toString();
		            try {
		              str = nativeFunc(str);
		            } catch (e) {
		              // decodeURI('%xy') will throw an error.  Catch and rethrow.
		              thisInterpreter.throwException(thisInterpreter.URI_ERROR, e.message);
		            }
		            return thisInterpreter.createPrimitive(str);
		          };
		        }(strFunctions[i][0]);
		        this.setProperty(scope, strFunctions[i][1], this.createNativeFunction(wrapper));
		      }
		
		      // Run any user-provided initialization.
		      if (this.initFunc_) {
		        this.initFunc_(this, scope);
		      }
		    }
		
		    /**
		     * Initialize the Function class.
		     * @param {!Object} scope Global scope.
		     */
		
		  }, {
		    key: 'initFunction',
		    value: function initFunction(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Function constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        if (this.parent == thisInterpreter.FUNCTION) {
		          // Called with new.
		          var newFunc = this;
		        } else {
		          var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
		        }
		        if (arguments.length) {
		          var code = arguments[arguments.length - 1].toString();
		        } else {
		          var code = '';
		        }
		        var args = [];
		        for (var i = 0; i < arguments.length - 1; i++) {
		          args.push(arguments[i].toString());
		        }
		        args = args.join(', ');
		        if (args.indexOf(')') != -1) {
		          throw SyntaxError('Function arg string contains parenthesis');
		        }
		        // Interestingly, the scope for constructed functions is the global scope,
		        // even if they were constructed in some other scope.
		        newFunc.parentScope = thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;
		        var ast = acorn.parse('$ = function(' + args + ') {' + code + '}');
		        newFunc.node = ast.body[0].expression.right;
		        thisInterpreter.setProperty(newFunc, 'length', thisInterpreter.createPrimitive(newFunc.node.length), true);
		        return newFunc;
		      };
		      this.FUNCTION = this.createObject(null);
		      this.setProperty(scope, 'Function', this.FUNCTION);
		      // Manually setup type and prototype because createObj doesn't recognize
		      // this object as a function (this.FUNCTION did not exist).
		      this.FUNCTION.type = 'function';
		      this.setProperty(this.FUNCTION, 'prototype', this.createObject(null));
		      this.FUNCTION.nativeFunc = wrapper;
		
		      // Create stub functions for apply and call.
		      // These are processed as special cases in stepCallExpression.
		      var node = {
		        type: 'FunctionApply_',
		        params: [],
		        id: null,
		        body: null,
		        start: 0,
		        end: 0
		      };
		      this.setProperty(this.FUNCTION.properties.prototype, 'apply', this.createFunction(node, {}), false, true);
		      node = {
		        type: 'FunctionCall_',
		        params: [],
		        id: null,
		        body: null,
		        start: 0,
		        end: 0
		      };
		      this.setProperty(this.FUNCTION.properties.prototype, 'call', this.createFunction(node, {}), false, true);
		
		      // Function has no parent to inherit from, so it needs its own mandatory
		      // toString and valueOf functions.
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        return thisInterpreter.createPrimitive(this.toString());
		      };
		      this.setProperty(this.FUNCTION.properties.prototype, 'toString', this.createNativeFunction(wrapper), false, true);
		      this.setProperty(this.FUNCTION, 'toString', this.createNativeFunction(wrapper), false, true);
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        return thisInterpreter.createPrimitive(this.valueOf());
		      };
		      this.setProperty(this.FUNCTION.properties.prototype, 'valueOf', this.createNativeFunction(wrapper), false, true);
		      this.setProperty(this.FUNCTION, 'valueOf', this.createNativeFunction(wrapper), false, true);
		    }
		
		    /**
		     * Initialize the Object class.
		     * @param {!Object} scope Global scope.
		     */
		
		  }, {
		    key: 'initObject',
		    value: function initObject(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Object constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        if (this.parent == thisInterpreter.OBJECT) {
		          // Called with new.
		          var newObj = this;
		        } else {
		          var newObj = thisInterpreter.createObject(thisInterpreter.OBJECT);
		        }
		        return newObj;
		      };
		      this.OBJECT = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'Object', this.OBJECT);
		
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        return thisInterpreter.createPrimitive(this.toString());
		      };
		      this.setProperty(this.OBJECT.properties.prototype, 'toString', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        return thisInterpreter.createPrimitive(this.valueOf());
		      };
		      this.setProperty(this.OBJECT.properties.prototype, 'valueOf', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(prop) {
		        prop = (prop || thisInterpreter.UNDEFINED).toString();
		        for (var key in this.properties) {
		          if (key == prop) {
		            return thisInterpreter.TRUE;
		          }
		        }
		        return thisInterpreter.FALSE;
		      };
		      this.setProperty(this.OBJECT.properties.prototype, 'hasOwnProperty', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(key) {
		        key = (key || thisInterpreter.UNDEFINED).toString();
		        return thisInterpreter.createPrimitive(!(key in this.nonenumerable));
		      };
		      this.setProperty(this.OBJECT.properties.prototype, 'propertyIsEnumerable', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(obj) {
		        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        var i = 0;
		        for (var key in obj.properties) {
		          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));
		          i++;
		        }
		        return pseudoList;
		      };
		      this.setProperty(this.OBJECT, 'getOwnPropertyNames', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(obj) {
		        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        var i = 0;
		        for (var key in obj.properties) {
		          if (key in obj.nonenumerable) {
		            continue;
		          }
		          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));
		          i++;
		        }
		        return pseudoList;
		      };
		      this.setProperty(this.OBJECT, 'keys', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(obj, prop, descriptor) {
		        prop = (prop || thisInterpreter.UNDEFINED).toString();
		        if (!(descriptor instanceof Interpreter.Object)) {
		          throw Error('Property description must be an object.');
		        }
		        return obj;
		      };
		      this.setProperty(this.OBJECT, 'defineProperty', this.createNativeFunction(wrapper), false, true);
		    }
		
		    /**
		     * Initialize the Array class.
		     * @param {!Object} scope Global scope.
		     */
		
		  }, {
		    key: 'initArray',
		    value: function initArray(scope) {
		      var thisInterpreter = this;
		      var getInt = function getInt(obj, def) {
		        // Return an integer, or the default.
		        var n = obj ? Math.floor(obj.toNumber()) : def;
		        if (isNaN(n)) {
		          n = def;
		        }
		        return n;
		      };
		      var strictComp = function strictComp(a, b) {
		        // Strict === comparison.
		        if (a.isPrimitive && b.isPrimitive) {
		          return a.data === b.data;
		        }
		        return a === b;
		      };
		      var wrapper;
		      // Array constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        if (this.parent == thisInterpreter.ARRAY) {
		          // Called with new.
		          var newArray = this;
		        } else {
		          var newArray = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        }
		        var first = arguments[0];
		        if (first && first.type == 'number') {
		          if (isNaN(thisInterpreter.arrayIndex(first))) {
		            thisInterpreter.throwException(thisInterpreter.RANGE_ERROR, 'Invalid array length');
		          }
		          newArray.length = first.data;
		        } else {
		          for (var i = 0; i < arguments.length; i++) {
		            newArray.properties[i] = arguments[i];
		          }
		          newArray.length = i;
		        }
		        return newArray;
		      };
		      this.ARRAY = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'Array', this.ARRAY);
		
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        if (this.length) {
		          var value = this.properties[this.length - 1];
		          delete this.properties[this.length - 1];
		          this.length--;
		        } else {
		          var value = thisInterpreter.UNDEFINED;
		        }
		        return value;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'pop', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        for (var i = 0; i < arguments.length; i++) {
		          this.properties[this.length] = arguments[i];
		          this.length++;
		        }
		        return thisInterpreter.createPrimitive(this.length);
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'push', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        if (this.length) {
		          var value = this.properties[0];
		          for (var i = 1; i < this.length; i++) {
		            this.properties[i - 1] = this.properties[i];
		          }
		          this.length--;
		          delete this.properties[this.length];
		        } else {
		          var value = thisInterpreter.UNDEFINED;
		        }
		        return value;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'shift', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        for (var i = this.length - 1; i >= 0; i--) {
		          this.properties[i + arguments.length] = this.properties[i];
		        }
		        this.length += arguments.length;
		        for (var i = 0; i < arguments.length; i++) {
		          this.properties[i] = arguments[i];
		        }
		        return thisInterpreter.createPrimitive(this.length);
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'unshift', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        for (var i = 0; i < this.length / 2; i++) {
		          var tmp = this.properties[this.length - i - 1];
		          this.properties[this.length - i - 1] = this.properties[i];
		          this.properties[i] = tmp;
		        }
		        return thisInterpreter.UNDEFINED;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'reverse', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(index, howmany, var_args) {
		        index = getInt(index, 0);
		        if (index < 0) {
		          index = Math.max(this.length + index, 0);
		        } else {
		          index = Math.min(index, this.length);
		        }
		        howmany = getInt(howmany, Infinity);
		        howmany = Math.min(howmany, this.length - index);
		        var removed = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        // Remove specified elements.
		        for (var i = index; i < index + howmany; i++) {
		          removed.properties[removed.length++] = this.properties[i];
		          this.properties[i] = this.properties[i + howmany];
		        }
		        // Move other element to fill the gap.
		        for (var i = index + howmany; i < this.length - howmany; i++) {
		          this.properties[i] = this.properties[i + howmany];
		        }
		        // Delete superfluous properties.
		        for (var i = this.length - howmany; i < this.length; i++) {
		          delete this.properties[i];
		        }
		        this.length -= howmany;
		        // Insert specified items.
		        for (var i = this.length - 1; i >= index; i--) {
		          this.properties[i + arguments.length - 2] = this.properties[i];
		        }
		        this.length += arguments.length - 2;
		        for (var i = 2; i < arguments.length; i++) {
		          this.properties[index + i - 2] = arguments[i];
		        }
		        return removed;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'splice', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(opt_begin, opt_end) {
		        var list = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        var begin = getInt(opt_begin, 0);
		        if (begin < 0) {
		          begin = this.length + begin;
		        }
		        begin = Math.max(0, Math.min(begin, this.length));
		        var end = getInt(opt_end, this.length);
		        if (end < 0) {
		          end = this.length + end;
		        }
		        end = Math.max(0, Math.min(end, this.length));
		        var length = 0;
		        for (var i = begin; i < end; i++) {
		          var element = thisInterpreter.getProperty(this, i);
		          thisInterpreter.setProperty(list, length++, element);
		        }
		        return list;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'slice', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(opt_separator) {
		        if (!opt_separator || opt_separator.data === undefined) {
		          var sep = undefined;
		        } else {
		          var sep = opt_separator.toString();
		        }
		        var text = [];
		        for (var i = 0; i < this.length; i++) {
		          text[i] = this.properties[i];
		        }
		        return thisInterpreter.createPrimitive(text.join(sep));
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'join', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        var list = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        var length = 0;
		        // Start by copying the current array.
		        for (var i = 0; i < this.length; i++) {
		          var element = thisInterpreter.getProperty(this, i);
		          thisInterpreter.setProperty(list, length++, element);
		        }
		        // Loop through all arguments and copy them in.
		        for (var i = 0; i < arguments.length; i++) {
		          var value = arguments[i];
		          if (thisInterpreter.isa(value, thisInterpreter.ARRAY)) {
		            for (var j = 0; j < value.length; j++) {
		              var element = thisInterpreter.getProperty(value, j);
		              thisInterpreter.setProperty(list, length++, element);
		            }
		          } else {
		            thisInterpreter.setProperty(list, length++, value);
		          }
		        }
		        return list;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'concat', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(searchElement, opt_fromIndex) {
		        searchElement = searchElement || thisInterpreter.UNDEFINED;
		        var fromIndex = getInt(opt_fromIndex, 0);
		        if (fromIndex < 0) {
		          fromIndex = this.length + fromIndex;
		        }
		        fromIndex = Math.max(0, fromIndex);
		        for (var i = fromIndex; i < this.length; i++) {
		          var element = thisInterpreter.getProperty(this, i);
		          if (strictComp(element, searchElement)) {
		            return thisInterpreter.createPrimitive(i);
		          }
		        }
		        return thisInterpreter.createPrimitive(-1);
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'indexOf', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(searchElement, opt_fromIndex) {
		        searchElement = searchElement || thisInterpreter.UNDEFINED;
		        var fromIndex = getInt(opt_fromIndex, this.length);
		        if (fromIndex < 0) {
		          fromIndex = this.length + fromIndex;
		        }
		        fromIndex = Math.min(fromIndex, this.length - 1);
		        for (var i = fromIndex; i >= 0; i--) {
		          var element = thisInterpreter.getProperty(this, i);
		          if (strictComp(element, searchElement)) {
		            return thisInterpreter.createPrimitive(i);
		          }
		        }
		        return thisInterpreter.createPrimitive(-1);
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'lastIndexOf', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(opt_compFunc) {
		        var jsList = [];
		        for (var i = 0; i < this.length; i++) {
		          jsList[i] = this.properties[i];
		        }
		        // TODO: Add custom sort comparison function(opt_compFunc).
		        jsList.sort();
		        for (var i = 0; i < jsList.length; i++) {
		          thisInterpreter.setProperty(this, i, jsList[i]);
		        }
		        return this;
		      };
		      this.setProperty(this.ARRAY.properties.prototype, 'sort', this.createNativeFunction(wrapper), false, true);
		    }
		  }, {
		    key: 'initNumber',
		
		
		    /**
		     * Initialize the Number class.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initNumber(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Number constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(value) {
		        value = value ? value.toNumber() : 0;
		        if (this.parent != thisInterpreter.NUMBER) {
		          // Called as Number().
		          return thisInterpreter.createPrimitive(value);
		        }
		        // Called as new Number().
		        this.data = value;
		        return this;
		      };
		      this.NUMBER = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'Number', this.NUMBER);
		
		      var numConsts = ['MAX_VALUE', 'MIN_VALUE', 'NaN', 'NEGATIVE_INFINITY', 'POSITIVE_INFINITY'];
		      for (var i = 0; i < numConsts.length; i++) {
		        this.setProperty(this.NUMBER, numConsts[i], this.createPrimitive(Number[numConsts[i]]));
		      }
		
		      wrapper = function /*istanbul ignore next*/wrapper(fractionDigits) {
		        fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;
		        var n = this.toNumber();
		        return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));
		      };
		      this.setProperty(this.NUMBER.properties.prototype, 'toExponential', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(digits) {
		        digits = digits ? digits.toNumber() : undefined;
		        var n = this.toNumber();
		        return thisInterpreter.createPrimitive(n.toFixed(digits));
		      };
		      this.setProperty(this.NUMBER.properties.prototype, 'toFixed', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(precision) {
		        precision = precision ? precision.toNumber() : undefined;
		        var n = this.toNumber();
		        return thisInterpreter.createPrimitive(n.toPrecision(precision));
		      };
		      this.setProperty(this.NUMBER.properties.prototype, 'toPrecision', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(radix) {
		        radix = radix ? radix.toNumber() : 10;
		        var n = this.toNumber();
		        return thisInterpreter.createPrimitive(n.toString(radix));
		      };
		      this.setProperty(this.NUMBER.properties.prototype, 'toString', this.createNativeFunction(wrapper), false, true);
		    }
		  }, {
		    key: 'initString',
		
		
		    /**
		     * Initialize the String class.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initString(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // String constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(value) {
		        value = value ? value.toString() : '';
		        if (this.parent != thisInterpreter.STRING) {
		          // Called as String().
		          return thisInterpreter.createPrimitive(value);
		        }
		        // Called as new String().
		        this.data = value;
		        return this;
		      };
		      this.STRING = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'String', this.STRING);
		
		      var functions = ['toLowerCase', 'toUpperCase', 'toLocaleLowerCase', 'toLocaleUpperCase'];
		      for (var i = 0; i < functions.length; i++) {
		        wrapper = function (nativeFunc) {
		          return function () {
		            return thisInterpreter.createPrimitive(nativeFunc.apply(this));
		          };
		        }(String.prototype[functions[i]]);
		        this.setProperty(this.STRING.properties.prototype, functions[i], this.createNativeFunction(wrapper), false, true);
		      }
		
		      // Trim function may not exist in host browser.  Write them from scratch.
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        var str = this.toString();
		        return thisInterpreter.createPrimitive(str.replace(/^\s+|\s+$/g, ''));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'trim', this.createNativeFunction(wrapper), false, true);
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        var str = this.toString();
		        return thisInterpreter.createPrimitive(str.replace(/^\s+/g, ''));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'trimLeft', this.createNativeFunction(wrapper), false, true);
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        var str = this.toString();
		        return thisInterpreter.createPrimitive(str.replace(/\s+$/g, ''));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'trimRight', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(num) {
		        var str = this.toString();
		        num = (num || thisInterpreter.UNDEFINED).toNumber();
		        return thisInterpreter.createPrimitive(str.charAt(num));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'charAt', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(num) {
		        var str = this.toString();
		        num = (num || thisInterpreter.UNDEFINED).toNumber();
		        return thisInterpreter.createPrimitive(str.charCodeAt(num));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'charCodeAt', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(searchValue, fromIndex) {
		        var str = this.toString();
		        searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();
		        fromIndex = fromIndex ? fromIndex.toNumber() : undefined;
		        return thisInterpreter.createPrimitive(str.indexOf(searchValue, fromIndex));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'indexOf', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(searchValue, fromIndex) {
		        var str = this.toString();
		        searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();
		        fromIndex = fromIndex ? fromIndex.toNumber() : undefined;
		        return thisInterpreter.createPrimitive(str.lastIndexOf(searchValue, fromIndex));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'lastIndexOf', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(compareString) {
		        var str = this.toString();
		        compareString = (compareString || thisInterpreter.UNDEFINED).toString();
		        return thisInterpreter.createPrimitive(str.localeCompare(compareString));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'localeCompare', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(separator, limit) {
		        var str = this.toString();
		        if (separator) {
		          separator = thisInterpreter.isa(separator, thisInterpreter.REGEXP) ? separator.data : separator.toString();
		        } else {
		          // is this really necessary?
		          separator = undefined;
		        }
		        limit = limit ? limit.toNumber() : undefined;
		        var jsList = str.split(separator, limit);
		        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        for (var i = 0; i < jsList.length; i++) {
		          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(jsList[i]));
		        }
		        return pseudoList;
		      };
		      this.setProperty(this.STRING.properties.prototype, 'split', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(indexA, indexB) {
		        var str = this.toString();
		        indexA = indexA ? indexA.toNumber() : undefined;
		        indexB = indexB ? indexB.toNumber() : undefined;
		        return thisInterpreter.createPrimitive(str.substring(indexA, indexB));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'substring', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(start, length) {
		        var str = this.toString();
		        start = start ? start.toNumber() : undefined;
		        length = length ? length.toNumber() : undefined;
		        return thisInterpreter.createPrimitive(str.substr(start, length));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'substr', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        var str = this.toString();
		        for (var i = 0; i < arguments.length; i++) {
		          str += arguments[i].toString();
		        }
		        return thisInterpreter.createPrimitive(str);
		      };
		      this.setProperty(this.STRING.properties.prototype, 'concat', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(beginSlice, endSlice) {
		        var str = this.toString();
		        beginSlice = beginSlice ? beginSlice.toNumber() : undefined;
		        endSlice = endSlice ? endSlice.toNumber() : undefined;
		        return thisInterpreter.createPrimitive(str.slice(beginSlice, endSlice));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'slice', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(regexp) {
		        var str = this.toString();
		        regexp = regexp ? regexp.data : undefined;
		        var match = str.match(regexp);
		        if (match === null) {
		          return thisInterpreter.NULL;
		        }
		        var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
		        for (var i = 0; i < match.length; i++) {
		          thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(match[i]));
		        }
		        return pseudoList;
		      };
		      this.setProperty(this.STRING.properties.prototype, 'match', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(regexp) {
		        var str = this.toString();
		        regexp = regexp ? regexp.data : undefined;
		        return thisInterpreter.createPrimitive(str.search(regexp));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'search', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(substr, newSubStr) {
		        var str = this.toString();
		        substr = (substr || thisInterpreter.UNDEFINED).valueOf();
		        newSubStr = (newSubStr || thisInterpreter.UNDEFINED).toString();
		        return thisInterpreter.createPrimitive(str.replace(substr, newSubStr));
		      };
		      this.setProperty(this.STRING.properties.prototype, 'replace', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(var_args) {
		        for (var i = 0; i < arguments.length; i++) {
		          arguments[i] = arguments[i].toNumber();
		        }
		        return thisInterpreter.createPrimitive(String.fromCharCode.apply(String, arguments));
		      };
		      this.setProperty(this.STRING, 'fromCharCode', this.createNativeFunction(wrapper), false, true);
		    }
		  }, {
		    key: 'initBoolean',
		
		
		    /**
		     * Initialize the Boolean class.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initBoolean(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Boolean constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(value) {
		        value = value ? value.toBoolean() : false;
		        if (this.parent != thisInterpreter.BOOLEAN) {
		          // Called as Boolean().
		          return thisInterpreter.createPrimitive(value);
		        }
		        // Called as new Boolean().
		        this.data = value;
		        return this;
		      };
		      this.BOOLEAN = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'Boolean', this.BOOLEAN);
		    }
		  }, {
		    key: 'initDate',
		
		
		    /**
		     * Initialize the Date class.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initDate(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Date constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(a, b, c, d, e, f, h) {
		        if (this.parent == thisInterpreter.DATE) {
		          // Called with new.
		          var newDate = this;
		        } else {
		          var newDate = thisInterpreter.createObject(thisInterpreter.DATE);
		        }
		        if (!arguments.length) {
		          newDate.data = new Date();
		        } else if (arguments.length == 1 && (a.type == 'string' || thisInterpreter.isa(a, thisInterpreter.STRING))) {
		          newDate.data = new Date(a.toString());
		        } else {
		          var args = [null];
		          for (var i = 0; i < arguments.length; i++) {
		            args[i + 1] = arguments[i] ? arguments[i].toNumber() : undefined;
		          }
		          newDate.data = new (Function.prototype.bind.apply(Date, args))();
		        }
		        return newDate;
		      };
		      this.DATE = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'Date', this.DATE);
		
		      // Static methods on Date.
		      wrapper = function /*istanbul ignore next*/wrapper() {
		        return thisInterpreter.createPrimitive(new Date().getTime());
		      };
		      this.setProperty(this.DATE, 'now', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(dateString) {
		        dateString = dateString ? dateString.toString() : undefined;
		        return thisInterpreter.createPrimitive(Date.parse(dateString));
		      };
		      this.setProperty(this.DATE, 'parse', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(a, b, c, d, e, f, h) {
		        var args = [];
		        for (var i = 0; i < arguments.length; i++) {
		          args[i] = arguments[i] ? arguments[i].toNumber() : undefined;
		        }
		        return thisInterpreter.createPrimitive(Date.UTC.apply(Date, args));
		      };
		      this.setProperty(this.DATE, 'UTC', this.createNativeFunction(wrapper), false, true);
		
		      // Getter methods.
		      var getFunctions = ['getDate', 'getDay', 'getFullYear', 'getHours', 'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime', 'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth', 'getUTCSeconds', 'getYear'];
		      for (var i = 0; i < getFunctions.length; i++) {
		        wrapper = function (nativeFunc) {
		          return function () {
		            return thisInterpreter.createPrimitive(this.data[nativeFunc]());
		          };
		        }(getFunctions[i]);
		        this.setProperty(this.DATE.properties.prototype, getFunctions[i], this.createNativeFunction(wrapper), false, true);
		      }
		
		      // Setter methods.
		      var setFunctions = ['setDate', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds', 'setYear'];
		      for (var i = 0; i < setFunctions.length; i++) {
		        wrapper = function (nativeFunc) {
		          return function (var_args) {
		            var args = [];
		            for (var i = 0; i < arguments.length; i++) {
		              args[i] = arguments[i] ? arguments[i].toNumber() : undefined;
		            }
		            return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data, args));
		          };
		        }(setFunctions[i]);
		        this.setProperty(this.DATE.properties.prototype, setFunctions[i], this.createNativeFunction(wrapper), false, true);
		      }
		
		      // Conversion getter methods.
		      getFunctions = ['toDateString', 'toISOString', 'toGMTString', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toTimeString', 'toUTCString'];
		      for (var i = 0; i < getFunctions.length; i++) {
		        wrapper = function (nativeFunc) {
		          return function () {
		            return thisInterpreter.createPrimitive(this.data[nativeFunc]());
		          };
		        }(getFunctions[i]);
		        this.setProperty(this.DATE.properties.prototype, getFunctions[i], this.createNativeFunction(wrapper), false, true);
		      }
		    }
		  }, {
		    key: 'initMath',
		
		
		    /**
		     * Initialize Math object.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initMath(scope) {
		      var thisInterpreter = this;
		      var myMath = this.createObject(this.OBJECT);
		      this.setProperty(scope, 'Math', myMath);
		      var mathConsts = ['E', 'LN2', 'LN10', 'LOG2E', 'LOG10E', 'PI', 'SQRT1_2', 'SQRT2'];
		      for (var i = 0; i < mathConsts.length; i++) {
		        this.setProperty(myMath, mathConsts[i], this.createPrimitive(Math[mathConsts[i]]), false, true);
		      }
		      var numFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'max', 'min', 'pow', 'random', 'round', 'sin', 'sqrt', 'tan'];
		      for (var i = 0; i < numFunctions.length; i++) {
		        var wrapper = function (nativeFunc) {
		          return function () {
		            for (var j = 0; j < arguments.length; j++) {
		              arguments[j] = arguments[j].toNumber();
		            }
		            return thisInterpreter.createPrimitive(nativeFunc.apply(Math, arguments));
		          };
		        }(Math[numFunctions[i]]);
		        this.setProperty(myMath, numFunctions[i], this.createNativeFunction(wrapper), false, true);
		      }
		    }
		  }, {
		    key: 'initRegExp',
		
		
		    /**
		     * Initialize Regular Expression object.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initRegExp(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Regex constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(pattern, flags) {
		        if (this.parent == thisInterpreter.REGEXP) {
		          // Called with new.
		          var rgx = this;
		        } else {
		          var rgx = thisInterpreter.createObject(thisInterpreter.REGEXP);
		        }
		        pattern = pattern ? pattern.toString() : '';
		        flags = flags ? flags.toString() : '';
		        thisInterpreter.createRegExp(rgx, new RegExp(pattern, flags));
		        return rgx;
		      };
		      this.REGEXP = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'RegExp', this.REGEXP);
		
		      wrapper = function /*istanbul ignore next*/wrapper(str) {
		        str = str.toString();
		        return thisInterpreter.createPrimitive(this.data.test(str));
		      };
		      this.setProperty(this.REGEXP.properties.prototype, 'test', this.createNativeFunction(wrapper), false, true);
		
		      wrapper = function /*istanbul ignore next*/wrapper(str) {
		        str = str.toString();
		        // Get lastIndex from wrapped regex, since this is settable.
		        this.data.lastIndex = thisInterpreter.getProperty(this, 'lastIndex').toNumber();
		        var match = this.data.exec(str);
		        thisInterpreter.setProperty(this, 'lastIndex', thisInterpreter.createPrimitive(this.data.lastIndex));
		
		        if (match) {
		          var result = thisInterpreter.createObject(thisInterpreter.ARRAY);
		          for (var i = 0; i < match.length; i++) {
		            thisInterpreter.setProperty(result, i, thisInterpreter.createPrimitive(match[i]));
		          }
		          // match has additional properties.
		          thisInterpreter.setProperty(result, 'index', thisInterpreter.createPrimitive(match.index));
		          thisInterpreter.setProperty(result, 'input', thisInterpreter.createPrimitive(match.input));
		          return result;
		        }
		        return thisInterpreter.NULL;
		      };
		      this.setProperty(this.REGEXP.properties.prototype, 'exec', this.createNativeFunction(wrapper), false, true);
		    }
		  }, {
		    key: 'createPseudoObject',
		
		
		    /**
		     * Converts from native JS value to a JS interpreter object.
		     * @param {*} nativeObj The native JS object to be converted.
		     * @return {!Object} The equivalent this.OBJECT.
		     */
		    value: function createPseudoObject(nativeObj) {
		      var pseudoObject = this.objectMap.get(nativeObj);
		      if (pseudoObject) {
		        return pseudoObject;
		      } else if (typeof nativeObj === 'function') {
		        pseudoObject = this.createNativeFunction(nativeObj);
		      } else if ( /*istanbul ignore next*/(typeof nativeObj === 'undefined' ? 'undefined' : (0, _typeof3.default)(nativeObj)) !== 'object') {
		        return this.createPrimitive(nativeObj);
		      } else if (nativeObj instanceof Array) {
		        // Array.
		        pseudoObject = this.createObject(this.ARRAY);
		        for (var i = 0; i < nativeObj.length; i++) {
		          this.setProperty(pseudoObject, i, this.createPseudoObject(nativeObj[i]));
		        }
		      } else {
		        // Object.
		        pseudoObject = this.createObject(this.OBJECT);
		        pseudoObject.isInitialized = false;
		      }
		      this.objectMap.set(nativeObj, pseudoObject);
		      pseudoObject.data = nativeObj;
		      return pseudoObject;
		    }
		
		    /**
		     * Initialize JSON object.
		     * @param {!Object} scope Global scope.
		     */
		
		  }, {
		    key: 'initJSON',
		    value: function initJSON(scope) {
		      var thisInterpreter = this;
		      var myJSON = thisInterpreter.createObject(this.OBJECT);
		      this.setProperty(scope, 'JSON', myJSON);
		
		      var wrapper = function (nativeFunc) {
		        return function () {
		          var arg = arguments[0].data;
		          var nativeObj = nativeFunc.call(JSON, arg);
		          return thisInterpreter.createPseudoObject(nativeObj);
		        };
		      }(JSON.parse);
		      this.setProperty(myJSON, 'parse', this.createNativeFunction(wrapper));
		
		      /**
		       * Converts from this.OBJECT object to native JS object.
		       * @param {!Object} obj The this.OBJECT object to be converted.
		       * @return {*} The equivalent native JS object or value.
		       */
		      function toNativeObject(obj) {
		        if (obj.isPrimitive) {
		          return obj.data;
		        }
		
		        var nativeObj;
		        if (obj.length) {
		          // Array.
		          nativeObj = [];
		          for (var i = 0; i < obj.length; i++) {
		            nativeObj[i] = toNativeObject(obj.properties[i]);
		          }
		        } else {
		          // Object.
		          nativeObj = {};
		          for (var key in obj.properties) {
		            nativeObj[key] = toNativeObject(obj.properties[key]);
		          }
		        }
		
		        return nativeObj;
		      }
		
		      wrapper = function (nativeFunc) {
		        return function () {
		          var arg = toNativeObject(arguments[0]);
		          return thisInterpreter.createPrimitive(nativeFunc.call(JSON, arg));
		        };
		      }( /*istanbul ignore next*/_stringify2.default);
		      this.setProperty(myJSON, 'stringify', this.createNativeFunction(wrapper));
		    }
		  }, {
		    key: 'initError',
		
		
		    /**
		     * Initialize the Error class.
		     * @param {!Object} scope Global scope.
		     */
		    value: function initError(scope) {
		      var thisInterpreter = this;
		      var wrapper;
		      // Error constructor.
		      wrapper = function /*istanbul ignore next*/wrapper(opt_message) {
		        if (this.parent == thisInterpreter.ERROR) {
		          // Called with new.
		          var newError = this;
		        } else {
		          var newError = thisInterpreter.createObject(thisInterpreter.ERROR);
		        }
		        if (opt_message) {
		          thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), false, true);
		        }
		        return newError;
		      };
		      this.ERROR = this.createNativeFunction(wrapper);
		      this.setProperty(scope, 'Error', this.ERROR);
		      this.setProperty(this.ERROR.properties.prototype, 'message', this.STRING_EMPTY, false, true);
		      this.setProperty(this.ERROR.properties.prototype, 'name', this.createPrimitive('Error'), false, true);
		
		      // Create half a dozen error subclasses.
		      var errors = {
		        EVAL_ERROR: 'EvalError',
		        RANGE_ERROR: 'RangeError',
		        REFERENCE_ERROR: 'ReferenceError',
		        SYNTAX_ERROR: 'SyntaxError',
		        TYPE_ERROR: 'TypeError',
		        URI_ERROR: 'URIError'
		      };
		      for (var constName in errors) {
		        var errorName = errors[constName];
		        //EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError
		        wrapper = function /*istanbul ignore next*/wrapper(name) {
		          return function (opt_message) {
		            if (thisInterpreter.isa(this.parent, thisInterpreter.ERROR)) {
		              // Called with new.
		              var newError = this;
		            } else {
		              var newError = thisInterpreter.createObject(thisInterpreter[name]);
		            }
		            if (opt_message) {
		              thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), false, true);
		            }
		            return newError;
		          };
		        };
		        this[constName] = this.createNativeFunction(wrapper(constName));
		        this.setProperty(this[constName], 'prototype', this.createObject(this.ERROR));
		        this.setProperty(this[constName].properties.prototype, 'name', this.createPrimitive(errorName), false, true);
		        this.setProperty(scope, errorName, this[constName]);
		      }
		    }
		  }, {
		    key: 'isa',
		
		
		    /**
		     * Is an object of a certain class?
		     * @param {Object} child Object to check.
		     * @param {Object} parent Constructor of object.
		     * @return {boolean} True if object is the class or inherits from it.
		     *     False otherwise.
		     */
		    value: function isa(child, parent) {
		      if (!child || !parent) {
		        return false;
		      }
		      while (child.parent != parent) {
		        if (!child.parent || !child.parent.properties.prototype) {
		          return false;
		        }
		        child = child.parent.properties.prototype;
		      }
		      return true;
		    }
		  }, {
		    key: 'comp',
		
		
		    /**
		     * Compares two objects against each other.
		     * @param {!Object} a First object.
		     * @param {!Object} b Second object.
		     * @return {number} -1 if a is smaller, 0 if a == b, 1 if a is bigger,
		     *     NaN if they are not comparable.
		     */
		    value: function comp(a, b) {
		      if (a.isPrimitive && typeof a == 'number' && isNaN(a.data) || b.isPrimitive && typeof b == 'number' && isNaN(b.data)) {
		        return NaN;
		      }
		      if (a.isPrimitive && b.isPrimitive) {
		        a = a.data;
		        b = b.data;
		      } else {
		        // TODO: Handle other types.
		        return NaN;
		      }
		      if (a < b) {
		        return -1;
		      } else if (a > b) {
		        return 1;
		      }
		      return 0;
		    }
		  }, {
		    key: 'arrayIndex',
		
		
		    /**
		     * Is a value a legal integer for an array?
		     * @param {*} n Value to check.
		     * @return {number} Zero, or a positive integer if the value can be
		     *     converted to such.  NaN otherwise.
		     */
		    value: function arrayIndex(n) {
		      n = Number(n);
		      if (!isFinite(n) || n != Math.floor(n) || n < 0) {
		        return NaN;
		      }
		      return n;
		    }
		  }, {
		    key: 'createPrimitive',
		
		
		    /**
		     * Create a new data object for a primitive.
		     * @param {number|string|boolean|null|undefined|RegExp} data Data to
		     *     encapsulate.
		     * @return {!Object} New data object.
		     */
		    value: function createPrimitive(data) {
		      // Reuse a predefined primitive constant if possible.
		      if (data === undefined) {
		        return this.UNDEFINED;
		      } else if (data === null) {
		        return this.NULL;
		      } else if (data === true) {
		        return this.TRUE;
		      } else if (data === false) {
		        return this.FALSE;
		      } else if (data === 0) {
		        return this.NUMBER_ZERO;
		      } else if (data === 1) {
		        return this.NUMBER_ONE;
		      } else if (data === '') {
		        return this.STRING_EMPTY;
		      } else if (data instanceof RegExp) {
		        return this.createRegExp(this.createObject(this.REGEXP), data);
		      }
		      return new Interpreter.Primitive(data, this);
		    }
		  }, {
		    key: 'createObject',
		
		
		    /**
		     * Create a new data object.
		     * @param {Object} parent Parent constructor function.
		     * @return {!Object} New data object.
		     */
		    value: function createObject(parent) {
		      var obj = new Interpreter.Object(parent);
		      // Functions have prototype objects.
		      if (this.isa(obj, this.FUNCTION)) {
		        obj.type = 'function';
		        this.setProperty(obj, 'prototype', this.createObject(this.OBJECT || null));
		      }
		      // Arrays have length.
		      if (this.isa(obj, this.ARRAY)) {
		        obj.length = 0;
		        obj.toString = function () {
		          var strs = [];
		          for (var i = 0; i < this.length; i++) {
		            strs[i] = this.properties[i] == undefined || this.properties[i] == null ? '' : this.properties[i].toString();
		          }
		          return strs.join(',');
		        };
		      }
		      return obj;
		    }
		  }, {
		    key: 'createRegExp',
		
		
		    /**
		     * Creates a new regular expression object.
		     * @param {Object} obj The existing object to set.
		     * @param {Object} data The native regular expression.
		     * @return {!Object} New regular expression object.
		     */
		    value: function createRegExp(obj, data) {
		      obj.data = data;
		      // lastIndex is settable, all others are read-only attributes
		      this.setProperty(obj, 'lastIndex', this.createPrimitive(obj.data.lastIndex), false, true);
		      this.setProperty(obj, 'source', this.createPrimitive(obj.data.source), true, true);
		      this.setProperty(obj, 'global', this.createPrimitive(obj.data.global), true, true);
		      this.setProperty(obj, 'ignoreCase', this.createPrimitive(obj.data.ignoreCase), true, true);
		      this.setProperty(obj, 'multiline', this.createPrimitive(obj.data.multiline), true, true);
		      // Override a couple of Object's conversion functions.
		      obj.toString = function () {
		        return String(this.data);
		      };
		      obj.valueOf = function () {
		        return this.data;
		      };
		      return obj;
		    }
		  }, {
		    key: 'createFunction',
		
		
		    /**
		     * Create a new function.
		     * @param {Object} node AST node defining the function.
		     * @param {Object} opt_scope Optional parent scope.
		     * @return {!Object} New function.
		     */
		    value: function createFunction(node, opt_scope) {
		      var func = this.createObject(this.FUNCTION);
		      func.parentScope = opt_scope || this.getScope();
		      func.node = node;
		      this.setProperty(func, 'length', this.createPrimitive(func.node.params.length), true);
		      return func;
		    }
		  }, {
		    key: 'createNativeFunction',
		
		
		    /**
		     * Create a new native function.
		     * @param {!Function} nativeFunc JavaScript function.
		     * @return {!Object} New function.
		     */
		    value: function createNativeFunction(nativeFunc) {
		      var func = this.createObject(this.FUNCTION);
		      func.nativeFunc = nativeFunc;
		      this.setProperty(func, 'length', this.createPrimitive(nativeFunc.length), true);
		      return func;
		    }
		  }, {
		    key: 'createAsyncFunction',
		
		
		    /**
		     * Create a new native asynchronous function.
		     * @param {!Function} asyncFunc JavaScript function.
		     * @return {!Object} New function.
		     */
		    value: function createAsyncFunction(asyncFunc) {
		      var func = this.createObject(this.FUNCTION);
		      func.asyncFunc = asyncFunc;
		      this.setProperty(func, 'length', this.createPrimitive(asyncFunc.length), true);
		      return func;
		    }
		  }, {
		    key: 'getProperty',
		
		
		    /**
		     * Fetch a property value from a data object.
		     * @param {!Object} obj Data object.
		     * @param {*} name Name of property.
		     * @return {!Object} Property value (may be UNDEFINED).
		     */
		    value: function getProperty(obj, name) {
		      name = name.toString();
		      if (obj == this.UNDEFINED || obj == this.NULL) {
		        this.throwException(this.TYPE_ERROR, "Cannot read property '" + name + "' of " + obj);
		      }
		      // Special cases for magic length property.
		      if (this.isa(obj, this.STRING)) {
		        if (name == 'length') {
		          return this.createPrimitive(obj.data.length);
		        }
		        var n = this.arrayIndex(name);
		        if (!isNaN(n) && n < obj.data.length) {
		          return this.createPrimitive(obj.data[n]);
		        }
		      } else if (this.isa(obj, this.ARRAY) && name == 'length') {
		        return this.createPrimitive(obj.length);
		      }
		      while (true) {
		        if (obj.isInitialized === false) {
		          // lazy wrapping
		          var nativeObject = obj.data;
		          for (var key in nativeObject) {
		            this.setProperty(obj, key, this.createPseudoObject(nativeObject[key]));
		          }
		          obj.isInitialized = true;
		        }
		        if (obj.properties && name in obj.properties) {
		          return obj.properties[name];
		        }
		        if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
		          obj = obj.parent.properties.prototype;
		        } else {
		          // No parent, reached the top.
		          break;
		        }
		      }
		      return this.UNDEFINED;
		    }
		  }, {
		    key: 'hasProperty',
		
		
		    /**
		     * Does the named property exist on a data object.
		     * @param {!Object} obj Data object.
		     * @param {*} name Name of property.
		     * @return {boolean} True if property exists.
		     */
		    value: function hasProperty(obj, name) {
		      name = name.toString();
		      if (obj.isPrimitive) {
		        throw TypeError('Primitive data type has no properties');
		      }
		      if (name == 'length' && (this.isa(obj, this.STRING) || this.isa(obj, this.ARRAY))) {
		        return true;
		      }
		      if (this.isa(obj, this.STRING)) {
		        var n = this.arrayIndex(name);
		        if (!isNaN(n) && n < obj.data.length) {
		          return true;
		        }
		      }
		      while (true) {
		        if (obj.properties && name in obj.properties) {
		          return true;
		        }
		        if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
		          obj = obj.parent.properties.prototype;
		        } else {
		          // No parent, reached the top.
		          break;
		        }
		      }
		      return false;
		    }
		  }, {
		    key: 'setProperty',
		
		
		    /**
		     * Set a property value on a data object.
		     * @param {!Object} obj Data object.
		     * @param {*} name Name of property.
		     * @param {!Object} value New property value.
		     * @param {boolean} opt_fixed Unchangeable property if true.
		     * @param {boolean} opt_nonenum Non-enumerable property if true.
		     */
		    value: function setProperty(obj, name, value, opt_fixed, opt_nonenum) {
		      name = name.toString();
		      if ( /*istanbul ignore next*/(typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) != 'object') {
		        throw Error('Failure to wrap a value: ' + value);
		      }
		      if (obj == this.UNDEFINED || obj == this.NULL) {
		        this.throwException(this.TYPE_ERROR, "Cannot set property '" + name + "' of " + obj);
		      }
		      if (obj.isPrimitive || obj.fixed[name]) {
		        return;
		      }
		      if (this.isa(obj, this.STRING)) {
		        var n = this.arrayIndex(name);
		        if (name == 'length' || !isNaN(n) && n < obj.data.length) {
		          // Can't set length or letters on Strings.
		          return;
		        }
		      }
		      if (this.isa(obj, this.ARRAY)) {
		        // Arrays have a magic length variable that is bound to the elements.
		        var i;
		        if (name == 'length') {
		          // Delete elements if length is smaller.
		          var newLength = this.arrayIndex(value.toNumber());
		          if (isNaN(newLength)) {
		            this.throwException(this.RANGE_ERROR, 'Invalid array length');
		          }
		          if (newLength < obj.length) {
		            for (i in obj.properties) {
		              i = this.arrayIndex(i);
		              if (!isNaN(i) && newLength <= i) {
		                delete obj.properties[i];
		              }
		            }
		          }
		          obj.length = newLength;
		          return; // Don't set a real length property.
		        } else if (!isNaN(i = this.arrayIndex(name))) {
		          // Increase length if this index is larger.
		          obj.length = Math.max(obj.length, i + 1);
		        }
		      }
		      // Set the property.
		      obj.properties[name] = value;
		      if (opt_fixed) {
		        obj.fixed[name] = true;
		      }
		      if (opt_nonenum) {
		        obj.nonenumerable[name] = true;
		      }
		    }
		  }, {
		    key: 'deleteProperty',
		
		
		    /**
		     * Delete a property value on a data object.
		     * @param {!Object} obj Data object.
		     * @param {*} name Name of property.
		     * @return {boolean} True if deleted, false if undeletable.
		     */
		    value: function deleteProperty(obj, name) {
		      name = name.toString();
		      if (obj.isPrimitive || obj.fixed[name]) {
		        return false;
		      }
		      if (name == 'length' && this.isa(obj, this.ARRAY)) {
		        return false;
		      }
		      return delete obj.properties[name];
		    }
		  }, {
		    key: 'getScope',
		
		
		    /**
		     * Returns the current scope from the stateStack.
		     * @return {!Object} Current scope dictionary.
		     */
		    value: function getScope() {
		      for (var i = 0; i < this.stateStack.length; i++) {
		        if (this.stateStack[i].scope) {
		          return this.stateStack[i].scope;
		        }
		      }
		      throw Error('No scope found.');
		    }
		  }, {
		    key: 'createScope',
		
		
		    /**
		     * Create a new scope dictionary.
		     * @param {!Object} node AST node defining the scope container
		     *     (e.g. a function).
		     * @param {Object} parentScope Scope to link to.
		     * @return {!Object} New scope.
		     */
		    value: function createScope(node, parentScope) {
		      var scope = this.createObject(null);
		      scope.parentScope = parentScope;
		      if (!parentScope) {
		        this.initGlobalScope(scope);
		      }
		      this.populateScope_(node, scope);
		
		      // Determine if this scope starts with 'use strict'.
		      scope.strict = false;
		      if (parentScope && parentScope.strict) {
		        scope.strict = true;
		      } else {
		        var firstNode = node.body && node.body[0];
		        if (firstNode && firstNode.expression && firstNode.expression.type == 'Literal' && firstNode.expression.value == 'use strict') {
		          scope.strict = true;
		        }
		      }
		      return scope;
		    }
		  }, {
		    key: 'createSpecialScope',
		
		
		    /**
		     * Create a new special scope dictionary. Similar to createScope(), but
		     * doesn't assume that the scope is for a function body. This is used for
		     * the catch clause and with statement.
		     * @param {!Object} parentScope Scope to link to.
		     * @param {Object=} opt_scope Optional object to transform into scope.
		     * @return {!Object} New scope.
		     */
		    value: function createSpecialScope(parentScope, opt_scope) {
		      if (!parentScope) {
		        throw Error('parentScope required');
		      }
		      var scope = opt_scope || this.createObject(null);
		      scope.parentScope = parentScope;
		      scope.strict = parentScope.strict;
		      return scope;
		    }
		  }, {
		    key: 'getValueFromScope',
		
		
		    /**
		     * Retrieves a value from the scope chain.
		     * @param {!Object} name Name of variable.
		     * @return {!Object} The value.
		     */
		    value: function getValueFromScope(name) {
		      var scope = this.getScope();
		      var nameStr = name.toString();
		      while (scope) {
		        if (nameStr in scope.properties) {
		          return scope.properties[nameStr];
		        }
		        scope = scope.parentScope;
		      }
		      /**
		       * Lazy lookup for global variables
		       */
		      // TODO: support other js environments like service worker and node by checking what the global scope is
		      if (nameStr in window) {
		        return this.createPseudoObject(window[nameStr]);
		      }
		      console.log(nameStr, this);
		      this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');
		      return this.UNDEFINED;
		    }
		  }, {
		    key: 'setValueToScope',
		
		
		    /**
		     * Sets a value to the current scope.
		     * @param {!Object} name Name of variable.
		     * @param {!Object} value Value.
		     */
		    value: function setValueToScope(name, value) {
		      var scope = this.getScope();
		      var strict = scope.strict;
		      var nameStr = name.toString();
		      while (scope) {
		        if (nameStr in scope.properties || !strict && !scope.parentScope) {
		          if (!scope.fixed[nameStr]) {
		            scope.properties[nameStr] = value;
		          }
		          return;
		        }
		        scope = scope.parentScope;
		      }
		      this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');
		    }
		  }, {
		    key: 'populateScope_',
		
		
		    /**
		     * Create a new scope for the given node.
		     * @param {!Object} node AST node (program or function).
		     * @param {!Object} scope Scope dictionary to populate.
		     * @private
		     */
		    value: function populateScope_(node, scope) {
		      if (node.type == 'VariableDeclaration') {
		        for (var i = 0; i < node.declarations.length; i++) {
		          this.setProperty(scope, node.declarations[i].id.name, this.UNDEFINED);
		        }
		      } else if (node.type == 'FunctionDeclaration') {
		        this.setProperty(scope, node.id.name, this.createFunction(node, scope));
		        return; // Do not recurse into function.
		      } else if (node.type == 'FunctionExpression') {
		        return; // Do not recurse into function.
		      }
		      var thisIterpreter = this;
		      function recurse(child) {
		        if (child.constructor == thisIterpreter.ast.constructor) {
		          thisIterpreter.populateScope_(child, scope);
		        }
		      }
		      for (var name in node) {
		        var prop = node[name];
		        if (prop && /*istanbul ignore next*/(typeof prop === 'undefined' ? 'undefined' : (0, _typeof3.default)(prop)) == 'object') {
		          if (typeof prop.length == 'number' && prop.splice) {
		            // Prop is an array.
		            for (var i = 0; i < prop.length; i++) {
		              recurse(prop[i]);
		            }
		          } else {
		            recurse(prop);
		          }
		        }
		      }
		    }
		  }, {
		    key: 'getValue',
		
		
		    /**
		     * Gets a value from the scope chain or from an object property.
		     * @param {!Object|!Array} left Name of variable or object/propname tuple.
		     * @return {!Object} Value.
		     */
		    value: function getValue(left) {
		      if (left.length) {
		        var obj = left[0];
		        var prop = left[1];
		        return this.getProperty(obj, prop);
		      } else {
		        return this.getValueFromScope(left);
		      }
		    }
		  }, {
		    key: 'setValue',
		
		
		    /**
		     * Sets a value to the scope chain or to an object property.
		     * @param {!Object|!Array} left Name of variable or object/propname tuple.
		     * @param {!Object} value Value.
		     */
		    value: function setValue(left, value) {
		      if (left.length) {
		        var obj = left[0];
		        var prop = left[1];
		        this.setProperty(obj, prop, value);
		      } else {
		        this.setValueToScope(left, value);
		      }
		    }
		  }, {
		    key: 'throwException',
		
		
		    /**
		     * Throw an exception in the interpreter that can be handled by a
		     * interpreter try/catch statement.  If unhandled, a real exception will
		     * be thrown.  Can be called with either an error class and a message, or
		     * with an actual object to be thrown.
		     * @param {!Object} errorClass Type of error (if message is provided) or the
		     *   value to throw (if no message).
		     * @param {string} opt_message Message being thrown.
		     */
		    value: function throwException(errorClass, opt_message) {
		      if (this.stateStack[0].interpreter) {
		        // This is the wrong interpreter, we are spinning on an eval.
		        try {
		          this.stateStack[0].interpreter.throwException(errorClass, opt_message);
		          return;
		        } catch (e) {
		          // The eval threw an error and did not catch it.
		          // Continue to see if this level can catch it.
		        }
		      }
		      if (opt_message === undefined) {
		        var error = errorClass;
		      } else {
		        var error = this.createObject(errorClass);
		        this.setProperty(error, 'message', this.createPrimitive(opt_message), false, true);
		      }
		      // Search for a try statement.
		      do {
		        var state = this.stateStack.shift();
		      } while (state && state.node.type !== 'TryStatement');
		      if (state) {
		        // Error is being trapped.
		        this.stateStack.unshift({
		          node: state.node.handler,
		          throwValue: error
		        });
		      } else {
		        // Throw a real error.
		        var realError;
		        if (this.isa(error, this.ERROR)) {
		          var errorTable = {
		            'EvalError': EvalError,
		            'RangeError': RangeError,
		            'ReferenceError': ReferenceError,
		            'SyntaxError': SyntaxError,
		            'TypeError': TypeError,
		            'URIError': URIError
		          };
		          var type = errorTable[this.getProperty(error, 'name')] || Error;
		          realError = type(this.getProperty(error, 'message'));
		        } else {
		          realError = error.toString();
		        }
		        throw realError;
		      }
		    }
		  }, {
		    key: 'stepArrayExpression',
		
		
		    // Functions to handle each node type.
		
		    value: function stepArrayExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      var n = state.n || 0;
		      if (!state.array) {
		        state.array = this.createObject(this.ARRAY);
		      } else {
		        this.setProperty(state.array, n - 1, state.value);
		      }
		      if (node.elements[n]) {
		        state.n = n + 1;
		        this.stateStack.unshift({ node: node.elements[n] });
		      } else {
		        state.array.length = state.n || 0;
		        this.stateStack.shift();
		        this.stateStack[0].value = state.array;
		      }
		    }
		  }, {
		    key: 'stepAssignmentExpression',
		    value: function stepAssignmentExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneLeft) {
		        state.doneLeft = true;
		        this.stateStack.unshift({ node: node.left, components: true });
		      } else if (!state.doneRight) {
		        state.doneRight = true;
		        state.leftSide = state.value;
		        this.stateStack.unshift({ node: node.right });
		      } else {
		        this.stateStack.shift();
		        var leftSide = state.leftSide;
		        var rightSide = state.value;
		        var value;
		        if (node.operator == '=') {
		          value = rightSide;
		        } else {
		          var leftValue = this.getValue(leftSide);
		          var rightValue = rightSide;
		          var leftNumber = leftValue.toNumber();
		          var rightNumber = rightValue.toNumber();
		          if (node.operator == '+=') {
		            var left, right;
		            if (leftValue.type == 'string' || rightValue.type == 'string') {
		              left = leftValue.toString();
		              right = rightValue.toString();
		            } else {
		              left = leftNumber;
		              right = rightNumber;
		            }
		            value = left + right;
		          } else if (node.operator == '-=') {
		            value = leftNumber - rightNumber;
		          } else if (node.operator == '*=') {
		            value = leftNumber * rightNumber;
		          } else if (node.operator == '/=') {
		            value = leftNumber / rightNumber;
		          } else if (node.operator == '%=') {
		            value = leftNumber % rightNumber;
		          } else if (node.operator == '<<=') {
		            value = leftNumber << rightNumber;
		          } else if (node.operator == '>>=') {
		            value = leftNumber >> rightNumber;
		          } else if (node.operator == '>>>=') {
		            value = leftNumber >>> rightNumber;
		          } else if (node.operator == '&=') {
		            value = leftNumber & rightNumber;
		          } else if (node.operator == '^=') {
		            value = leftNumber ^ rightNumber;
		          } else if (node.operator == '|=') {
		            value = leftNumber | rightNumber;
		          } else {
		            throw SyntaxError('Unknown assignment expression: ' + node.operator);
		          }
		          value = this.createPrimitive(value);
		        }
		        this.setValue(leftSide, value);
		        this.stateStack[0].value = value;
		      }
		    }
		  }, {
		    key: 'stepBinaryExpression',
		    value: function stepBinaryExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneLeft) {
		        state.doneLeft = true;
		        this.stateStack.unshift({ node: node.left });
		      } else if (!state.doneRight) {
		        state.doneRight = true;
		        state.leftValue = state.value;
		        this.stateStack.unshift({ node: node.right });
		      } else {
		        this.stateStack.shift();
		        var leftSide = state.leftValue;
		        var rightSide = state.value;
		        var value;
		        var comp = this.comp(leftSide, rightSide);
		        if (node.operator == '==' || node.operator == '!=') {
		          if (leftSide.isPrimitive && rightSide.isPrimitive) {
		            value = leftSide.data == rightSide.data;
		          } else {
		            value = comp === 0;
		          }
		          if (node.operator == '!=') {
		            value = !value;
		          }
		        } else if (node.operator == '===' || node.operator == '!==') {
		          if (leftSide.isPrimitive && rightSide.isPrimitive) {
		            value = leftSide.data === rightSide.data;
		          } else {
		            value = leftSide === rightSide;
		          }
		          if (node.operator == '!==') {
		            value = !value;
		          }
		        } else if (node.operator == '>') {
		          value = comp == 1;
		        } else if (node.operator == '>=') {
		          value = comp == 1 || comp === 0;
		        } else if (node.operator == '<') {
		          value = comp == -1;
		        } else if (node.operator == '<=') {
		          value = comp == -1 || comp === 0;
		        } else if (node.operator == '+') {
		          if (leftSide.type == 'string' || rightSide.type == 'string') {
		            var leftValue = leftSide.toString();
		            var rightValue = rightSide.toString();
		          } else {
		            var leftValue = leftSide.toNumber();
		            var rightValue = rightSide.toNumber();
		          }
		          value = leftValue + rightValue;
		        } else if (node.operator == 'in') {
		          value = this.hasProperty(rightSide, leftSide);
		        } else if (node.operator == 'instanceof') {
		          if (!this.isa(rightSide, this.FUNCTION)) {
		            this.throwException(this.TYPE_ERROR, 'Expecting a function in instanceof check');
		          }
		          value = this.isa(leftSide, rightSide);
		        } else {
		          var leftValue = leftSide.toNumber();
		          var rightValue = rightSide.toNumber();
		          if (node.operator == '-') {
		            value = leftValue - rightValue;
		          } else if (node.operator == '*') {
		            value = leftValue * rightValue;
		          } else if (node.operator == '/') {
		            value = leftValue / rightValue;
		          } else if (node.operator == '%') {
		            value = leftValue % rightValue;
		          } else if (node.operator == '&') {
		            value = leftValue & rightValue;
		          } else if (node.operator == '|') {
		            value = leftValue | rightValue;
		          } else if (node.operator == '^') {
		            value = leftValue ^ rightValue;
		          } else if (node.operator == '<<') {
		            value = leftValue << rightValue;
		          } else if (node.operator == '>>') {
		            value = leftValue >> rightValue;
		          } else if (node.operator == '>>>') {
		            value = leftValue >>> rightValue;
		          } else {
		            throw SyntaxError('Unknown binary operator: ' + node.operator);
		          }
		        }
		        this.stateStack[0].value = this.createPrimitive(value);
		      }
		    }
		  }, {
		    key: 'stepBlockStatement',
		    value: function stepBlockStatement() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      var n = state.n_ || 0;
		      if (node.body[n]) {
		        state.done = false;
		        state.n_ = n + 1;
		        this.stateStack.unshift({ node: node.body[n] });
		      } else {
		        state.done = true;
		        if (state.node.type != 'Program') {
		          // Leave the root scope on the tree in case the program is appended to.
		          this.stateStack.shift();
		        }
		      }
		    }
		  }, {
		    key: 'stepBreakStatement',
		    value: function stepBreakStatement() {
		      var state = this.stateStack.shift();
		      var node = state.node;
		      var label = null;
		      if (node.label) {
		        label = node.label.name;
		      }
		      state = this.stateStack.shift();
		      while (state && state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
		        if (label ? label == state.label : state.isLoop || state.isSwitch) {
		          return;
		        }
		        state = this.stateStack.shift();
		      }
		      // Syntax error, do not allow this error to be trapped.
		      throw SyntaxError('Illegal break statement');
		    }
		  }, {
		    key: 'stepCallExpression',
		    value: function stepCallExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneCallee_) {
		        state.doneCallee_ = true;
		        this.stateStack.unshift({ node: node.callee, components: true });
		      } else {
		        if (!state.func_) {
		          // Determine value of the function.
		          if (state.value.type == 'function') {
		            state.func_ = state.value;
		          } else {
		            if (state.value.length) {
		              state.member_ = state.value[0];
		            }
		            state.func_ = this.getValue(state.value);
		            if (!state.func_ || state.func_.type != 'function') {
		              this.throwException(this.TYPE_ERROR, (state.value && state.value.type) + ' is not a function');
		              return;
		            }
		          }
		          // Determine value of 'this' in function.
		          if (state.node.type == 'NewExpression') {
		            state.funcThis_ = this.createObject(state.func_);
		            state.isConstructor_ = true;
		          } else if (state.value.length) {
		            state.funcThis_ = state.value[0];
		          } else {
		            state.funcThis_ = this.stateStack[this.stateStack.length - 1].thisExpression;
		          }
		          state.arguments = [];
		          var n = 0;
		        } else {
		          var n = state.n_;
		          if (state.arguments.length != node.arguments.length) {
		            state.arguments[n - 1] = state.value;
		          }
		        }
		        if (node.arguments[n]) {
		          state.n_ = n + 1;
		          this.stateStack.unshift({ node: node.arguments[n] });
		        } else if (!state.doneExec) {
		          this.executeFunction();
		        } else {
		          this.stateStack.shift();
		          if (state.isConstructor_ && state.value.type !== 'object') {
		            this.stateStack[0].value = state.funcThis_;
		          } else {
		            this.stateStack[0].value = state.value;
		          }
		        }
		      }
		    }
		  }, {
		    key: 'executeFunction',
		    value: function executeFunction() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      state.doneExec = true;
		      if (state.func_.node && (state.func_.node.type == 'FunctionApply_' || state.func_.node.type == 'FunctionCall_')) {
		        state.funcThis_ = state.arguments.shift();
		        if (state.func_.node.type == 'FunctionApply_') {
		          // Unpack all the arguments from the provided array.
		          var argsList = state.arguments.shift();
		          if (argsList && this.isa(argsList, this.ARRAY)) {
		            state.arguments = [];
		            for (var i = 0; i < argsList.length; i++) {
		              state.arguments[i] = this.getProperty(argsList, i);
		            }
		          } else {
		            state.arguments = [];
		          }
		        }
		        state.func_ = state.member_;
		      }
		      if (state.func_.node) {
		        var scope = this.createScope(state.func_.node.body, state.func_.parentScope);
		        // Add all arguments.
		        for (var i = 0; i < state.func_.node.params.length; i++) {
		          var paramName = this.createPrimitive(state.func_.node.params[i].name);
		          var paramValue = state.arguments.length > i ? state.arguments[i] : this.UNDEFINED;
		          this.setProperty(scope, paramName, paramValue);
		        }
		        // Build arguments variable.
		        var argsList = this.createObject(this.ARRAY);
		        for (var i = 0; i < state.arguments.length; i++) {
		          this.setProperty(argsList, this.createPrimitive(i), state.arguments[i]);
		        }
		        this.setProperty(scope, 'arguments', argsList);
		        var funcState = {
		          node: state.func_.node.body,
		          scope: scope,
		          thisExpression: state.funcThis_
		        };
		        this.stateStack.unshift(funcState);
		        state.value = this.UNDEFINED; // Default value if no explicit return.
		      } else if (state.func_.nativeFunc) {
		        state.value = state.func_.nativeFunc.apply(state.funcThis_, state.arguments);
		      } else if (state.func_.asyncFunc) {
		        var thisInterpreter = this;
		        var callback = function callback(value) {
		          state.value = value || thisInterpreter.UNDEFINED;
		          thisInterpreter.paused_ = false;
		        };
		        var argsWithCallback = state.arguments.concat(callback);
		        state.func_.asyncFunc.apply(state.funcThis_, argsWithCallback);
		        this.paused_ = true;
		        return;
		      } else if (state.func_.eval) {
		        var code = state.arguments[0];
		        if (!code) {
		          state.value = this.UNDEFINED;
		        } else if (!code.isPrimitive) {
		          // JS does not parse String objects:
		          // eval(new String('1 + 1')) -> '1 + 1'
		          state.value = code;
		        } else {
		          var evalInterpreter = new Interpreter(code.toString());
		          evalInterpreter.stateStack[0].scope.parentScope = this.getScope();
		          state = {
		            node: { type: 'Eval_' },
		            interpreter: evalInterpreter
		          };
		          this.stateStack.unshift(state);
		        }
		      } else {
		        throw TypeError('function not a function (huh?)');
		      }
		    }
		  }, {
		    key: 'stepCatchClause',
		    value: function stepCatchClause() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneBody) {
		        state.doneBody = true;
		        var scope;
		        if (node.param) {
		          scope = this.createSpecialScope(this.getScope());
		          // Add the argument.
		          var paramName = this.createPrimitive(node.param.name);
		          this.setProperty(scope, paramName, state.throwValue);
		        }
		        this.stateStack.unshift({ node: node.body, scope: scope });
		      } else {
		        this.stateStack.shift();
		      }
		    }
		  }, {
		    key: 'stepConditionalExpression',
		    value: function stepConditionalExpression() {
		      var state = this.stateStack[0];
		      if (!state.done) {
		        if (!state.test) {
		          state.test = true;
		          this.stateStack.unshift({ node: state.node.test });
		        } else {
		          state.done = true;
		          if (state.value.toBoolean() && state.node.consequent) {
		            this.stateStack.unshift({ node: state.node.consequent });
		          } else if (!state.value.toBoolean() && state.node.alternate) {
		            this.stateStack.unshift({ node: state.node.alternate });
		          }
		        }
		      } else {
		        this.stateStack.shift();
		        if (state.node.type == 'ConditionalExpression') {
		          this.stateStack[0].value = state.value;
		        }
		      }
		    }
		  }, {
		    key: 'stepContinueStatement',
		    value: function stepContinueStatement() {
		      var node = this.stateStack[0].node;
		      var label = null;
		      if (node.label) {
		        label = node.label.name;
		      }
		      var state = this.stateStack[0];
		      while (state && state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
		        if (state.isLoop) {
		          if (!label || label == state.label) {
		            return;
		          }
		        }
		        this.stateStack.shift();
		        state = this.stateStack[0];
		      }
		      // Syntax error, do not allow this error to be trapped.
		      throw SyntaxError('Illegal continue statement');
		    }
		  }, {
		    key: 'stepDoWhileStatement',
		    value: function stepDoWhileStatement() {
		      var state = this.stateStack[0];
		      state.isLoop = true;
		      if (state.node.type == 'DoWhileStatement' && state.test === undefined) {
		        // First iteration of do/while executes without checking test.
		        state.value = this.TRUE;
		        state.test = true;
		      }
		      if (!state.test) {
		        state.test = true;
		        this.stateStack.unshift({ node: state.node.test });
		      } else {
		        state.test = false;
		        if (!state.value.toBoolean()) {
		          this.stateStack.shift();
		        } else if (state.node.body) {
		          this.stateStack.unshift({ node: state.node.body });
		        }
		      }
		    }
		  }, {
		    key: 'stepEmptyStatement',
		    value: function stepEmptyStatement() {
		      this.stateStack.shift();
		    }
		  }, {
		    key: 'stepEval_',
		    value: function stepEval_() {
		      var state = this.stateStack[0];
		      if (!state.interpreter.step()) {
		        this.stateStack.shift();
		        this.stateStack[0].value = state.interpreter.value || this.UNDEFINED;
		      }
		    }
		  }, {
		    key: 'stepExpressionStatement',
		    value: function stepExpressionStatement() {
		      var state = this.stateStack[0];
		      if (!state.done) {
		        state.done = true;
		        this.stateStack.unshift({ node: state.node.expression });
		      } else {
		        this.stateStack.shift();
		        // Save this value to the interpreter for use as a return value if
		        // this code is inside an eval function.
		        this.value = state.value;
		      }
		    }
		  }, {
		    key: 'stepForInStatement',
		    value: function stepForInStatement() {
		      var state = this.stateStack[0];
		      state.isLoop = true;
		      var node = state.node;
		      if (!state.doneVariable_) {
		        state.doneVariable_ = true;
		        var left = node.left;
		        if (left.type == 'VariableDeclaration') {
		          // Inline variable declaration: for (var x in y)
		          left = left.declarations[0].id;
		        }
		        this.stateStack.unshift({ node: left, components: true });
		      } else if (!state.doneObject_) {
		        state.doneObject_ = true;
		        state.variable = state.value;
		        this.stateStack.unshift({ node: node.right });
		      } else {
		        if (typeof state.iterator == 'undefined') {
		          // First iteration.
		          state.object = state.value;
		          state.iterator = 0;
		        }
		        var name = null;
		        done: do {
		          var i = state.iterator;
		          for (var prop in state.object.properties) {
		            if (prop in state.object.nonenumerable) {
		              continue;
		            }
		            if (i == 0) {
		              name = prop;
		              break done;
		            }
		            i--;
		          }
		          state.object = state.object.parent && state.object.parent.properties.prototype;
		          state.iterator = 0;
		        } while (state.object);
		        state.iterator++;
		        if (name === null) {
		          this.stateStack.shift();
		        } else {
		          this.setValueToScope(state.variable, this.createPrimitive(name));
		          if (node.body) {
		            this.stateStack.unshift({ node: node.body });
		          }
		        }
		      }
		    }
		  }, {
		    key: 'stepForStatement',
		    value: function stepForStatement() {
		      var state = this.stateStack[0];
		      state.isLoop = true;
		      var node = state.node;
		      var mode = state.mode || 0;
		      if (mode == 0) {
		        state.mode = 1;
		        if (node.init) {
		          this.stateStack.unshift({ node: node.init });
		        }
		      } else if (mode == 1) {
		        state.mode = 2;
		        if (node.test) {
		          this.stateStack.unshift({ node: node.test });
		        }
		      } else if (mode == 2) {
		        state.mode = 3;
		        if (node.test && state.value && !state.value.toBoolean()) {
		          // Loop complete.  Bail out.
		          this.stateStack.shift();
		        } else if (node.body) {
		          this.stateStack.unshift({ node: node.body });
		        }
		      } else if (mode == 3) {
		        state.mode = 1;
		        if (node.update) {
		          this.stateStack.unshift({ node: node.update });
		        }
		      }
		    }
		  }, {
		    key: 'stepFunctionDeclaration',
		    value: function stepFunctionDeclaration() {
		      this.stateStack.shift();
		    }
		  }, {
		    key: 'stepFunctionExpression',
		    value: function stepFunctionExpression() {
		      var state = this.stateStack.shift();
		      this.stateStack[0].value = this.createFunction(state.node);
		    }
		  }, {
		    key: 'stepIdentifier',
		    value: function stepIdentifier() {
		      var state = this.stateStack.shift();
		      var name = this.createPrimitive(state.node.name);
		      this.stateStack[0].value = state.components ? name : this.getValueFromScope(name);
		    }
		  }, {
		    key: 'stepIfStatement',
		    value: function stepIfStatement() {
		      return this.stepConditionalExpression();
		    }
		  }, {
		    key: 'stepLabeledStatement',
		    value: function stepLabeledStatement() {
		      // No need to hit this node again on the way back up the stack.
		      var state = this.stateStack.shift();
		      this.stateStack.unshift({ node: state.node.body,
		        label: state.node.label.name });
		    }
		  }, {
		    key: 'stepLiteral',
		    value: function stepLiteral() {
		      var state = this.stateStack.shift();
		      this.stateStack[0].value = this.createPrimitive(state.node.value);
		    }
		  }, {
		    key: 'stepLogicalExpression',
		    value: function stepLogicalExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (node.operator != '&&' && node.operator != '||') {
		        throw SyntaxError('Unknown logical operator: ' + node.operator);
		      }
		      if (!state.doneLeft_) {
		        state.doneLeft_ = true;
		        this.stateStack.unshift({ node: node.left });
		      } else if (!state.doneRight_) {
		        if (node.operator == '&&' && !state.value.toBoolean() || node.operator == '||' && state.value.toBoolean()) {
		          // Shortcut evaluation.
		          this.stateStack.shift();
		          this.stateStack[0].value = state.value;
		        } else {
		          state.doneRight_ = true;
		          this.stateStack.unshift({ node: node.right });
		        }
		      } else {
		        this.stateStack.shift();
		        this.stateStack[0].value = state.value;
		      }
		    }
		  }, {
		    key: 'stepMemberExpression',
		    value: function stepMemberExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneObject_) {
		        state.doneObject_ = true;
		        this.stateStack.unshift({ node: node.object });
		      } else if (!state.doneProperty_) {
		        state.doneProperty_ = true;
		        state.object = state.value;
		        this.stateStack.unshift({
		          node: node.property,
		          components: !node.computed
		        });
		      } else {
		        this.stateStack.shift();
		        if (state.components) {
		          this.stateStack[0].value = [state.object, state.value];
		        } else {
		          this.stateStack[0].value = this.getProperty(state.object, state.value);
		        }
		      }
		    }
		  }, {
		    key: 'stepNewExpression',
		    value: function stepNewExpression() {
		      return this.stepCallExpression();
		    }
		  }, {
		    key: 'stepObjectExpression',
		    value: function stepObjectExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      var valueToggle = state.valueToggle;
		      var n = state.n || 0;
		      if (!state.object) {
		        state.object = this.createObject(this.OBJECT);
		      } else {
		        if (valueToggle) {
		          state.key = state.value;
		        } else {
		          this.setProperty(state.object, state.key, state.value);
		        }
		      }
		      if (node.properties[n]) {
		        if (valueToggle) {
		          state.n = n + 1;
		          this.stateStack.unshift({ node: node.properties[n].value });
		        } else {
		          this.stateStack.unshift({ node: node.properties[n].key, components: true });
		        }
		        state.valueToggle = !valueToggle;
		      } else {
		        this.stateStack.shift();
		        this.stateStack[0].value = state.object;
		      }
		    }
		  }, {
		    key: 'stepProgram',
		    value: function stepProgram() {
		      return this.stepBlockStatement();
		    }
		  }, {
		    key: 'stepReturnStatement',
		    value: function stepReturnStatement() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (node.argument && !state.done) {
		        state.done = true;
		        this.stateStack.unshift({ node: node.argument });
		      } else {
		        var value = state.value || this.UNDEFINED;
		        do {
		          this.stateStack.shift();
		          if (this.stateStack.length == 0) {
		            // Syntax error, do not allow this error to be trapped.
		            throw SyntaxError('Illegal return statement');
		          }
		          state = this.stateStack[0];
		        } while (state.node.type != 'CallExpression' && state.node.type != 'NewExpression');
		        state.value = value;
		      }
		    }
		  }, {
		    key: 'stepSequenceExpression',
		    value: function stepSequenceExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      var n = state.n || 0;
		      if (node.expressions[n]) {
		        state.n = n + 1;
		        this.stateStack.unshift({ node: node.expressions[n] });
		      } else {
		        this.stateStack.shift();
		        this.stateStack[0].value = state.value;
		      }
		    }
		  }, {
		    key: 'stepSwitchStatement',
		    value: function stepSwitchStatement() {
		      var state = this.stateStack[0];
		      state.checked = state.checked || [];
		      state.isSwitch = true;
		
		      if (!state.test) {
		        state.test = true;
		        this.stateStack.unshift({ node: state.node.discriminant });
		      } else {
		        if (!state.switchValue) {
		          // Preserve switch value between case tests.
		          state.switchValue = state.value;
		        }
		
		        var index = state.index || 0;
		        var currentCase = state.node.cases[index];
		        if (currentCase) {
		          if (!state.done && !state.checked[index] && currentCase.test) {
		            state.checked[index] = true;
		            this.stateStack.unshift({ node: currentCase.test });
		          } else {
		            // Test on the default case will be null.
		            if (state.done || !currentCase.test || this.comp(state.value, state.switchValue) == 0) {
		              state.done = true;
		              var n = state.n || 0;
		              if (currentCase.consequent[n]) {
		                this.stateStack.unshift({ node: currentCase.consequent[n] });
		                state.n = n + 1;
		                return;
		              }
		            }
		            state.n = 0;
		            state.index = index + 1;
		          }
		        } else {
		          this.stateStack.shift();
		        }
		      }
		    }
		  }, {
		    key: 'stepThisExpression',
		    value: function stepThisExpression() {
		      this.stateStack.shift();
		      for (var i = 0; i < this.stateStack.length; i++) {
		        if (this.stateStack[i].thisExpression) {
		          this.stateStack[0].value = this.stateStack[i].thisExpression;
		          return;
		        }
		      }
		      throw Error('No this expression found.');
		    }
		  }, {
		    key: 'stepThrowStatement',
		    value: function stepThrowStatement() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.argument) {
		        state.argument = true;
		        this.stateStack.unshift({ node: node.argument });
		      } else {
		        this.throwException(state.value);
		      }
		    }
		  }, {
		    key: 'stepTryStatement',
		    value: function stepTryStatement() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneBlock) {
		        state.doneBlock = true;
		        this.stateStack.unshift({ node: node.block });
		      } else if (!state.doneFinalizer && node.finalizer) {
		        state.doneFinalizer = true;
		        this.stateStack.unshift({ node: node.finalizer });
		      } else {
		        this.stateStack.shift();
		      }
		    }
		  }, {
		    key: 'stepUnaryExpression',
		    value: function stepUnaryExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.done) {
		        state.done = true;
		        var nextState = { node: node.argument };
		        if (node.operator == 'delete') {
		          nextState.components = true;
		        }
		        this.stateStack.unshift(nextState);
		      } else {
		        this.stateStack.shift();
		        var value;
		        if (node.operator == '-') {
		          value = -state.value.toNumber();
		        } else if (node.operator == '+') {
		          value = state.value.toNumber();
		        } else if (node.operator == '!') {
		          value = !state.value.toBoolean();
		        } else if (node.operator == '~') {
		          value = ~state.value.toNumber();
		        } else if (node.operator == 'typeof') {
		          value = state.value.type;
		        } else if (node.operator == 'delete') {
		          if (state.value.length) {
		            var obj = state.value[0];
		            var name = state.value[1];
		          } else {
		            var obj = this.getScope();
		            var name = state.value;
		          }
		          value = this.deleteProperty(obj, name);
		        } else if (node.operator == 'void') {
		          value = undefined;
		        } else {
		          throw SyntaxError('Unknown unary operator: ' + node.operator);
		        }
		        this.stateStack[0].value = this.createPrimitive(value);
		      }
		    }
		  }, {
		    key: 'stepUpdateExpression',
		    value: function stepUpdateExpression() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.done) {
		        state.done = true;
		        this.stateStack.unshift({ node: node.argument, components: true });
		      } else {
		        this.stateStack.shift();
		        var leftSide = state.value;
		        var leftValue = this.getValue(leftSide).toNumber();
		        var changeValue;
		        if (node.operator == '++') {
		          changeValue = this.createPrimitive(leftValue + 1);
		        } else if (node.operator == '--') {
		          changeValue = this.createPrimitive(leftValue - 1);
		        } else {
		          throw SyntaxError('Unknown update expression: ' + node.operator);
		        }
		        this.setValue(leftSide, changeValue);
		        this.stateStack[0].value = node.prefix ? changeValue : this.createPrimitive(leftValue);
		      }
		    }
		  }, {
		    key: 'stepVariableDeclaration',
		    value: function stepVariableDeclaration() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      var n = state.n || 0;
		      if (node.declarations[n]) {
		        state.n = n + 1;
		        this.stateStack.unshift({ node: node.declarations[n] });
		      } else {
		        this.stateStack.shift();
		      }
		    }
		  }, {
		    key: 'stepVariableDeclarator',
		    value: function stepVariableDeclarator() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (node.init && !state.done) {
		        state.done = true;
		        this.stateStack.unshift({ node: node.init });
		      } else {
		        if (!this.hasProperty(this, node.id.name) || node.init) {
		          var value = node.init ? state.value : this.UNDEFINED;
		          this.setValue(this.createPrimitive(node.id.name), value);
		        }
		        this.stateStack.shift();
		      }
		    }
		  }, {
		    key: 'stepWithStatement',
		    value: function stepWithStatement() {
		      var state = this.stateStack[0];
		      var node = state.node;
		      if (!state.doneObject) {
		        state.doneObject = true;
		        this.stateStack.unshift({ node: node.object });
		      } else if (!state.doneBody) {
		        state.doneBody = true;
		        var scope = this.createSpecialScope(this.getScope(), state.value);
		        this.stateStack.unshift({ node: node.body, scope: scope });
		      } else {
		        this.stateStack.shift();
		      }
		    }
		  }, {
		    key: 'stepWhileStatement',
		    value: function stepWhileStatement() {
		      return this.stepDoWhileStatement();
		    }
		  }]);
		  return Interpreter;
		}();
		
		/**
		 * Class for a number, string, boolean, null, or undefined.
		 * @param {number|string|boolean|null|undefined} data Primitive value.
		 * @param {!Interpreter} interpreter The JS Interpreter to bind to.
		 * @constructor
		 */
		
		
		/*istanbul ignore next*/exports.default = Interpreter;
		
		/*istanbul ignore next*/var Primitive = function () {
		  function /*istanbul ignore next*/Primitive(data, interpreter) {
		    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Primitive);
		
		    var type = /*istanbul ignore next*/typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);
		    this.data = data;
		    this.type = type;
		    if (type == 'number') {
		      this.parent = interpreter.NUMBER;
		    } else if (type == 'string') {
		      this.parent = interpreter.STRING;
		    } else if (type == 'boolean') {
		      this.parent = interpreter.BOOLEAN;
		    }
		    this.isPrimitive = true;
		  }
		
		  (0, _createClass3.default)(Primitive, [{
		    key: 'toBoolean',
		
		
		    /**
		     * Convert this primitive into a boolean.
		     * @return {boolean} Boolean value.
		     */
		    value: function toBoolean() {
		      return Boolean(this.data);
		    }
		  }, {
		    key: 'toNumber',
		
		
		    /**
		     * Convert this primitive into a number.
		     * @return {number} Number value.
		     */
		    value: function toNumber() {
		      return Number(this.data);
		    }
		  }, {
		    key: 'toString',
		
		
		    /**
		     * Convert this primitive into a string.
		     * @return {string} String value.
		     */
		    value: function toString() {
		      return String(this.data);
		    }
		  }, {
		    key: 'valueOf',
		
		
		    /**
		     * Return the primitive value.
		     * @return {number|string|boolean|null|undefined} Primitive value.
		     */
		    value: function valueOf() {
		      return this.data;
		    }
		  }]);
		  return Primitive;
		}();
		
		/**
		 * Class for an object.
		 * @param {Object} parent Parent constructor function.
		 * @constructor
		 */
		
		
		/*istanbul ignore next*/var InterpreterObject = function () {
		  function /*istanbul ignore next*/InterpreterObject(parent) {
		    /*istanbul ignore next*/(0, _classCallCheck3.default)(this, InterpreterObject);
		
		    this.fixed = /*istanbul ignore next*/(0, _create2.default)(null);
		    this.nonenumerable = /*istanbul ignore next*/(0, _create2.default)(null);
		    this.properties = /*istanbul ignore next*/(0, _create2.default)(null);
		    this.parent = parent;
		    this.type = 'object';
		    this.isPrimitive = false;
		  }
		
		  (0, _createClass3.default)(InterpreterObject, [{
		    key: 'toBoolean',
		
		
		    /**
		     * Convert this object into a boolean.
		     * @return {boolean} Boolean value.
		     */
		    value: function toBoolean() {
		      return true;
		    }
		  }, {
		    key: 'toNumber',
		
		
		    /**
		     * Convert this object into a number.
		     * @return {number} Number value.
		     */
		    value: function toNumber() {
		      return Number(this.data === undefined ? this.toString() : this.data);
		    }
		  }, {
		    key: 'toString',
		
		
		    /**
		     * Convert this object into a string.
		     * @return {string} String value.
		     */
		    value: function toString() {
		      return this.data === undefined ? '[' + this.type + ']' : String(this.data);
		    }
		  }, {
		    key: 'valueOf',
		
		
		    /**
		     * Return the object value.
		     * @return {!Object} Value.
		     */
		    value: function valueOf() {
		      return this.data === undefined ? this : this.data;
		    }
		  }]);
		  return InterpreterObject;
		}();
		
		Interpreter.Primitive = Primitive;
		Interpreter.Object = InterpreterObject;
	
	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(116), __esModule: true };
	
	/***/ },
	/* 116 */
	/***/ function(module, exports, __webpack_require__) {
	
		var core  = __webpack_require__(24)
		  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
		module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
		  return $JSON.stringify.apply($JSON, arguments);
		};
	
	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(118), __esModule: true };
	
	/***/ },
	/* 118 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(49);
		__webpack_require__(50);
		__webpack_require__(62);
		__webpack_require__(119);
		__webpack_require__(120);
		module.exports = __webpack_require__(24).Map;
	
	/***/ },
	/* 119 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var strong = __webpack_require__(67);
		
		// 23.1 Map Objects
		module.exports = __webpack_require__(77)('Map', function(get){
		  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
		}, {
		  // 23.1.3.6 Map.prototype.get(key)
		  get: function get(key){
		    var entry = strong.getEntry(this, key);
		    return entry && entry.v;
		  },
		  // 23.1.3.9 Map.prototype.set(key, value)
		  set: function set(key, value){
		    return strong.def(this, key === 0 ? 0 : key, value);
		  }
		}, strong, true);
	
	/***/ },
	/* 120 */
	/***/ function(module, exports, __webpack_require__) {
	
		// https://github.com/DavidBruant/Map-Set.prototype.toJSON
		var $export  = __webpack_require__(23);
		
		$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(83)('Map')});
	
	/***/ },
	/* 121 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.lineBreakG=exports.lineBreak=exports.isNewLine=exports.Token=exports.isIdentifierStart=exports.isIdentifierChar=exports.tokContexts=exports.TokContext=exports.tokTypes=exports.TokenType=exports.Node=exports.getLineInfo=exports.SourceLocation=exports.Position=exports.defaultOptions=exports.plugins=exports.Parser=exports.tokenizer=exports.parseExpressionAt=exports.parse=exports.version=undefined;var _iterator=__webpack_require__(91);var _iterator2=_interopRequireDefault(_iterator);var _symbol=__webpack_require__(94);var _symbol2=_interopRequireDefault(_symbol);var _typeof2=__webpack_require__(90);var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// Reserved word lists for various dialects of the language
		var reservedWords={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",7:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"};// And the keywords
		var ecma5AndLessKeywords="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";var keywords={5:ecma5AndLessKeywords,6:ecma5AndLessKeywords+" const class extends export import super"};// ## Character categories
		// Big ugly regular expressions that match characters in the
		// whitespace, identifier, and identifier-start categories. These
		// are only applied when a character is found to actually have a
		// code point above 128.
		// Generated by `bin/generate-identifier-regex.js`.
		var nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";var nonASCIIidentifierChars="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";var nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]");var nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;// These are a run-length and offset encoded representation of the
		// >0xffff code points that are a valid part of identifiers. The
		// offset starts at 0x10000, and each pair of numbers represents an
		// offset to the next range, and then a size of the range. They were
		// generated by bin/generate-identifier-regex.js
		var astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541];var astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];// This has a complexity linear to the value of the code. The
		// assumption is that looking up astral identifier characters is
		// rare.
		function isInAstralSet(code,set){var pos=0x10000;for(var i=0;i<set.length;i+=2){pos+=set[i];if(pos>code)return false;pos+=set[i+1];if(pos>=code)return true;}}// Test whether a given character code starts an identifier.
		function isIdentifierStart(code,astral){if(code<65)return code===36;if(code<91)return true;if(code<97)return code===95;if(code<123)return true;if(code<=0xffff)return code>=0xaa&&nonASCIIidentifierStart.test(String.fromCharCode(code));if(astral===false)return false;return isInAstralSet(code,astralIdentifierStartCodes);}// Test whether a given character is part of an identifier.
		function isIdentifierChar(code,astral){if(code<48)return code===36;if(code<58)return true;if(code<65)return false;if(code<91)return true;if(code<97)return code===95;if(code<123)return true;if(code<=0xffff)return code>=0xaa&&nonASCIIidentifier.test(String.fromCharCode(code));if(astral===false)return false;return isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes);}// ## Token types
		// The assignment of fine-grained, information-carrying type objects
		// allows the tokenizer to store the information it has about a
		// token in a way that is very cheap for the parser to look up.
		// All token type variables start with an underscore, to make them
		// easy to recognize.
		// The `beforeExpr` property is used to disambiguate between regular
		// expressions and divisions. It is set on all token types that can
		// be followed by an expression (thus, a slash after them would be a
		// regular expression).
		//
		// The `startsExpr` property is used to check if the token ends a
		// `yield` expression. It is set on all token types that either can
		// directly start an expression (like a quotation mark) or can
		// continue an expression (like the body of a string).
		//
		// `isLoop` marks a keyword as starting a loop, which is important
		// to know when parsing a label, in order to allow or disallow
		// continue jumps to that label.
		var TokenType=function TokenType(label,conf){if(conf===void 0)conf={};this.label=label;this.keyword=conf.keyword;this.beforeExpr=!!conf.beforeExpr;this.startsExpr=!!conf.startsExpr;this.isLoop=!!conf.isLoop;this.isAssign=!!conf.isAssign;this.prefix=!!conf.prefix;this.postfix=!!conf.postfix;this.binop=conf.binop||null;this.updateContext=null;};function binop(name,prec){return new TokenType(name,{beforeExpr:true,binop:prec});}var beforeExpr={beforeExpr:true};var startsExpr={startsExpr:true};// Map keyword names to token types.
		var keywordTypes={};// Succinct definitions of keyword token types
		function kw(name,options){if(options===void 0)options={};options.keyword=name;return keywordTypes[name]=new TokenType(name,options);}var tt={num:new TokenType("num",startsExpr),regexp:new TokenType("regexp",startsExpr),string:new TokenType("string",startsExpr),name:new TokenType("name",startsExpr),eof:new TokenType("eof"),// Punctuation token types.
		bracketL:new TokenType("[",{beforeExpr:true,startsExpr:true}),bracketR:new TokenType("]"),braceL:new TokenType("{",{beforeExpr:true,startsExpr:true}),braceR:new TokenType("}"),parenL:new TokenType("(",{beforeExpr:true,startsExpr:true}),parenR:new TokenType(")"),comma:new TokenType(",",beforeExpr),semi:new TokenType(";",beforeExpr),colon:new TokenType(":",beforeExpr),dot:new TokenType("."),question:new TokenType("?",beforeExpr),arrow:new TokenType("=>",beforeExpr),template:new TokenType("template"),ellipsis:new TokenType("...",beforeExpr),backQuote:new TokenType("`",startsExpr),dollarBraceL:new TokenType("${",{beforeExpr:true,startsExpr:true}),// Operators. These carry several kinds of properties to help the
		// parser use them properly (the presence of these properties is
		// what categorizes them as operators).
		//
		// `binop`, when present, specifies that this operator is a binary
		// operator, and will refer to its precedence.
		//
		// `prefix` and `postfix` mark the operator as a prefix or postfix
		// unary operator.
		//
		// `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
		// binary operators with a very low precedence, that should result
		// in AssignmentExpression nodes.
		eq:new TokenType("=",{beforeExpr:true,isAssign:true}),assign:new TokenType("_=",{beforeExpr:true,isAssign:true}),incDec:new TokenType("++/--",{prefix:true,postfix:true,startsExpr:true}),prefix:new TokenType("prefix",{beforeExpr:true,prefix:true,startsExpr:true}),logicalOR:binop("||",1),logicalAND:binop("&&",2),bitwiseOR:binop("|",3),bitwiseXOR:binop("^",4),bitwiseAND:binop("&",5),equality:binop("==/!=",6),relational:binop("</>",7),bitShift:binop("<</>>",8),plusMin:new TokenType("+/-",{beforeExpr:true,binop:9,prefix:true,startsExpr:true}),modulo:binop("%",10),star:binop("*",10),slash:binop("/",10),starstar:new TokenType("**",{beforeExpr:true}),// Keyword token types.
		_break:kw("break"),_case:kw("case",beforeExpr),_catch:kw("catch"),_continue:kw("continue"),_debugger:kw("debugger"),_default:kw("default",beforeExpr),_do:kw("do",{isLoop:true,beforeExpr:true}),_else:kw("else",beforeExpr),_finally:kw("finally"),_for:kw("for",{isLoop:true}),_function:kw("function",startsExpr),_if:kw("if"),_return:kw("return",beforeExpr),_switch:kw("switch"),_throw:kw("throw",beforeExpr),_try:kw("try"),_var:kw("var"),_const:kw("const"),_while:kw("while",{isLoop:true}),_with:kw("with"),_new:kw("new",{beforeExpr:true,startsExpr:true}),_this:kw("this",startsExpr),_super:kw("super",startsExpr),_class:kw("class"),_extends:kw("extends",beforeExpr),_export:kw("export"),_import:kw("import"),_null:kw("null",startsExpr),_true:kw("true",startsExpr),_false:kw("false",startsExpr),_in:kw("in",{beforeExpr:true,binop:7}),_instanceof:kw("instanceof",{beforeExpr:true,binop:7}),_typeof:kw("typeof",{beforeExpr:true,prefix:true,startsExpr:true}),_void:kw("void",{beforeExpr:true,prefix:true,startsExpr:true}),_delete:kw("delete",{beforeExpr:true,prefix:true,startsExpr:true})};// Matches a whole line break (where CRLF is considered a single
		// line break). Used to count lines.
		var lineBreak=/\r\n?|\n|\u2028|\u2029/;var lineBreakG=new RegExp(lineBreak.source,"g");function isNewLine(code){return code===10||code===13||code===0x2028||code==0x2029;}var nonASCIIwhitespace=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;var skipWhiteSpace=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;function isArray(obj){return Object.prototype.toString.call(obj)==="[object Array]";}// Checks if an object has a property.
		function has(obj,propName){return Object.prototype.hasOwnProperty.call(obj,propName);}// These are used when `options.locations` is on, for the
		// `startLoc` and `endLoc` properties.
		var Position=function Position(line,col){this.line=line;this.column=col;};Position.prototype.offset=function offset(n){return new Position(this.line,this.column+n);};var SourceLocation=function SourceLocation(p,start,end){this.start=start;this.end=end;if(p.sourceFile!==null)this.source=p.sourceFile;};// The `getLineInfo` function is mostly useful when the
		// `locations` option is off (for performance reasons) and you
		// want to find the line/column position for a given character
		// offset. `input` should be the code string that the offset refers
		// into.
		function getLineInfo(input,offset){for(var line=1,cur=0;;){lineBreakG.lastIndex=cur;var match=lineBreakG.exec(input);if(match&&match.index<offset){++line;cur=match.index+match[0].length;}else{return new Position(line,offset-cur);}}}// A second optional argument can be given to further configure
		// the parser process. These options are recognized:
		var defaultOptions={// `ecmaVersion` indicates the ECMAScript version to parse. Must
		// be either 3, or 5, or 6. This influences support for strict
		// mode, the set of reserved words, support for getters and
		// setters and other features. The default is 6.
		ecmaVersion:6,// Source type ("script" or "module") for different semantics
		sourceType:"script",// `onInsertedSemicolon` can be a callback that will be called
		// when a semicolon is automatically inserted. It will be passed
		// th position of the comma as an offset, and if `locations` is
		// enabled, it is given the location as a `{line, column}` object
		// as second argument.
		onInsertedSemicolon:null,// `onTrailingComma` is similar to `onInsertedSemicolon`, but for
		// trailing commas.
		onTrailingComma:null,// By default, reserved words are only enforced if ecmaVersion >= 5.
		// Set `allowReserved` to a boolean value to explicitly turn this on
		// an off. When this option has the value "never", reserved words
		// and keywords can also not be used as property names.
		allowReserved:null,// When enabled, a return at the top level is not considered an
		// error.
		allowReturnOutsideFunction:false,// When enabled, import/export statements are not constrained to
		// appearing at the top of the program.
		allowImportExportEverywhere:false,// When enabled, hashbang directive in the beginning of file
		// is allowed and treated as a line comment.
		allowHashBang:false,// When `locations` is on, `loc` properties holding objects with
		// `start` and `end` properties in `{line, column}` form (with
		// line being 1-based and column 0-based) will be attached to the
		// nodes.
		locations:false,// A function can be passed as `onToken` option, which will
		// cause Acorn to call that function with object in the same
		// format as tokens returned from `tokenizer().getToken()`. Note
		// that you are not allowed to call the parser from the
		// callback—that will corrupt its internal state.
		onToken:null,// A function can be passed as `onComment` option, which will
		// cause Acorn to call that function with `(block, text, start,
		// end)` parameters whenever a comment is skipped. `block` is a
		// boolean indicating whether this is a block (`/* */`) comment,
		// `text` is the content of the comment, and `start` and `end` are
		// character offsets that denote the start and end of the comment.
		// When the `locations` option is on, two more parameters are
		// passed, the full `{line, column}` locations of the start and
		// end of the comments. Note that you are not allowed to call the
		// parser from the callback—that will corrupt its internal state.
		onComment:null,// Nodes have their start and end characters offsets recorded in
		// `start` and `end` properties (directly on the node, rather than
		// the `loc` object, which holds line/column data. To also add a
		// [semi-standardized][range] `range` property holding a `[start,
		// end]` array with the same numbers, set the `ranges` option to
		// `true`.
		//
		// [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
		ranges:false,// It is possible to parse multiple files into a single AST by
		// passing the tree produced by parsing the first file as
		// `program` option in subsequent parses. This will add the
		// toplevel forms of the parsed file to the `Program` (top) node
		// of an existing parse tree.
		program:null,// When `locations` is on, you can pass this to record the source
		// file in every node's `loc` object.
		sourceFile:null,// This value, if given, is stored in every node, whether
		// `locations` is on or off.
		directSourceFile:null,// When enabled, parenthesized expressions are represented by
		// (non-standard) ParenthesizedExpression nodes
		preserveParens:false,plugins:{}};// Interpret and default an options object
		function getOptions(opts){var options={};for(var opt in defaultOptions)/*istanbul ignore next*/{options[opt]=opts&&has(opts,opt)?opts[opt]:defaultOptions[opt];}if(options.allowReserved==null)options.allowReserved=options.ecmaVersion<5;if(isArray(options.onToken)){var tokens=options.onToken;options.onToken=function(token){return tokens.push(token);};}if(isArray(options.onComment))options.onComment=pushComment(options,options.onComment);return options;}function pushComment(options,array){return function(block,text,start,end,startLoc,endLoc){var comment={type:block?'Block':'Line',value:text,start:start,end:end};if(options.locations)comment.loc=new SourceLocation(this,startLoc,endLoc);if(options.ranges)comment.range=[start,end];array.push(comment);};}// Registered plugins
		var plugins={};function keywordRegexp(words){return new RegExp("^("+words.replace(/ /g,"|")+")$");}var Parser=function Parser(options,input,startPos){this.options=options=getOptions(options);this.sourceFile=options.sourceFile;this.keywords=keywordRegexp(keywords[options.ecmaVersion>=6?6:5]);var reserved=options.allowReserved?"":reservedWords[options.ecmaVersion]+(options.sourceType=="module"?" await":"");this.reservedWords=keywordRegexp(reserved);var reservedStrict=(reserved?reserved+" ":"")+reservedWords.strict;this.reservedWordsStrict=keywordRegexp(reservedStrict);this.reservedWordsStrictBind=keywordRegexp(reservedStrict+" "+reservedWords.strictBind);this.input=String(input);// Used to signal to callers of `readWord1` whether the word
		// contained any escape sequences. This is needed because words with
		// escape sequences must not be interpreted as keywords.
		this.containsEsc=false;// Load plugins
		this.loadPlugins(options.plugins);// Set up token state
		// The current position of the tokenizer in the input.
		if(startPos){this.pos=startPos;this.lineStart=Math.max(0,this.input.lastIndexOf("\n",startPos));this.curLine=this.input.slice(0,this.lineStart).split(lineBreak).length;}else{this.pos=this.lineStart=0;this.curLine=1;}// Properties of the current token:
		// Its type
		this.type=tt.eof;// For tokens that include more information than their type, the value
		this.value=null;// Its start and end offset
		this.start=this.end=this.pos;// And, if locations are used, the {line, column} object
		// corresponding to those offsets
		this.startLoc=this.endLoc=this.curPosition();// Position information for the previous token
		this.lastTokEndLoc=this.lastTokStartLoc=null;this.lastTokStart=this.lastTokEnd=this.pos;// The context stack is used to superficially track syntactic
		// context to predict whether a regular expression is allowed in a
		// given position.
		this.context=this.initialContext();this.exprAllowed=true;// Figure out if it's a module code.
		this.strict=this.inModule=options.sourceType==="module";// Used to signify the start of a potential arrow function
		this.potentialArrowAt=-1;// Flags to track whether we are in a function, a generator.
		this.inFunction=this.inGenerator=false;// Labels in scope.
		this.labels=[];// If enabled, skip leading hashbang line.
		if(this.pos===0&&options.allowHashBang&&this.input.slice(0,2)==='#!')this.skipLineComment(2);};// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them
		Parser.prototype.isKeyword=function isKeyword(word){return this.keywords.test(word);};Parser.prototype.isReservedWord=function isReservedWord(word){return this.reservedWords.test(word);};Parser.prototype.extend=function extend(name,f){this[name]=f(this[name]);};Parser.prototype.loadPlugins=function loadPlugins(pluginConfigs){var this$1=this;for(var name in pluginConfigs){var plugin=plugins[name];if(!plugin)throw new Error("Plugin '"+name+"' not found");plugin(this$1,pluginConfigs[name]);}};Parser.prototype.parse=function parse(){var node=this.options.program||this.startNode();this.nextToken();return this.parseTopLevel(node);};var pp=Parser.prototype;// ## Parser utilities
		// Test whether a statement node is the string literal `"use strict"`.
		pp.isUseStrict=function(stmt){return this.options.ecmaVersion>=5&&stmt.type==="ExpressionStatement"&&stmt.expression.type==="Literal"&&stmt.expression.raw.slice(1,-1)==="use strict";};// Predicate that tests whether the next token is of the given
		// type, and if yes, consumes it as a side effect.
		pp.eat=function(type){if(this.type===type){this.next();return true;}else{return false;}};// Tests whether parsed token is a contextual keyword.
		pp.isContextual=function(name){return this.type===tt.name&&this.value===name;};// Consumes contextual keyword if possible.
		pp.eatContextual=function(name){return this.value===name&&this.eat(tt.name);};// Asserts that following token is given contextual keyword.
		pp.expectContextual=function(name){if(!this.eatContextual(name))this.unexpected();};// Test whether a semicolon can be inserted at the current position.
		pp.canInsertSemicolon=function(){return this.type===tt.eof||this.type===tt.braceR||lineBreak.test(this.input.slice(this.lastTokEnd,this.start));};pp.insertSemicolon=function(){if(this.canInsertSemicolon()){if(this.options.onInsertedSemicolon)this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc);return true;}};// Consume a semicolon, or, failing that, see if we are allowed to
		// pretend that there is a semicolon at this position.
		pp.semicolon=function(){if(!this.eat(tt.semi)&&!this.insertSemicolon())this.unexpected();};pp.afterTrailingComma=function(tokType){if(this.type==tokType){if(this.options.onTrailingComma)this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc);this.next();return true;}};// Expect a token of a given type. If found, consume it, otherwise,
		// raise an unexpected token error.
		pp.expect=function(type){this.eat(type)||this.unexpected();};// Raise an unexpected token error.
		pp.unexpected=function(pos){this.raise(pos!=null?pos:this.start,"Unexpected token");};var DestructuringErrors=function DestructuringErrors(){this.shorthandAssign=0;this.trailingComma=0;};pp.checkPatternErrors=function(refDestructuringErrors,andThrow){var trailing=refDestructuringErrors&&refDestructuringErrors.trailingComma;if(!andThrow)return!!trailing;if(trailing)this.raise(trailing,"Comma is not permitted after the rest element");};pp.checkExpressionErrors=function(refDestructuringErrors,andThrow){var pos=refDestructuringErrors&&refDestructuringErrors.shorthandAssign;if(!andThrow)return!!pos;if(pos)this.raise(pos,"Shorthand property assignments are valid only in destructuring patterns");};var pp$1=Parser.prototype;// ### Statement parsing
		// Parse a program. Initializes the parser, reads any number of
		// statements, and wraps them in a Program node.  Optionally takes a
		// `program` argument.  If present, the statements will be appended
		// to its body instead of creating a new node.
		pp$1.parseTopLevel=function(node){var this$1=this;var first=true;if(!node.body)node.body=[];while(this.type!==tt.eof){var stmt=this$1.parseStatement(true,true);node.body.push(stmt);if(first){if(this$1.isUseStrict(stmt))this$1.setStrict(true);first=false;}}this.next();if(this.options.ecmaVersion>=6){node.sourceType=this.options.sourceType;}return this.finishNode(node,"Program");};var loopLabel={kind:"loop"};var switchLabel={kind:"switch"};pp$1.isLet=function(){if(this.type!==tt.name||this.options.ecmaVersion<6||this.value!="let")return false;skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(nextCh===91||nextCh==123)return true;// '{' and '['
		if(isIdentifierStart(nextCh,true)){for(var pos=next+1;isIdentifierChar(this.input.charCodeAt(pos),true);++pos){}var ident=this.input.slice(next,pos);if(!this.isKeyword(ident))return true;}return false;};// Parse a single statement.
		//
		// If expecting a statement and finding a slash operator, parse a
		// regular expression literal. This is to handle cases like
		// `if (foo) /blah/.exec(foo)`, where looking at the previous token
		// does not help.
		pp$1.parseStatement=function(declaration,topLevel){var starttype=this.type,node=this.startNode(),kind;if(this.isLet()){starttype=tt._var;kind="let";}// Most types of statements are recognized by the keyword they
		// start with. Many are trivial to parse, some require a bit of
		// complexity.
		switch(starttype){case tt._break:case tt._continue:return this.parseBreakContinueStatement(node,starttype.keyword);case tt._debugger:return this.parseDebuggerStatement(node);case tt._do:return this.parseDoStatement(node);case tt._for:return this.parseForStatement(node);case tt._function:if(!declaration&&this.options.ecmaVersion>=6)this.unexpected();return this.parseFunctionStatement(node);case tt._class:if(!declaration)this.unexpected();return this.parseClass(node,true);case tt._if:return this.parseIfStatement(node);case tt._return:return this.parseReturnStatement(node);case tt._switch:return this.parseSwitchStatement(node);case tt._throw:return this.parseThrowStatement(node);case tt._try:return this.parseTryStatement(node);case tt._const:case tt._var:kind=kind||this.value;if(!declaration&&kind!="var")this.unexpected();return this.parseVarStatement(node,kind);case tt._while:return this.parseWhileStatement(node);case tt._with:return this.parseWithStatement(node);case tt.braceL:return this.parseBlock();case tt.semi:return this.parseEmptyStatement(node);case tt._export:case tt._import:if(!this.options.allowImportExportEverywhere){if(!topLevel)this.raise(this.start,"'import' and 'export' may only appear at the top level");if(!this.inModule)this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'");}return starttype===tt._import?this.parseImport(node):this.parseExport(node);// If the statement does not start with a statement keyword or a
		// brace, it's an ExpressionStatement or LabeledStatement. We
		// simply start parsing an expression, and afterwards, if the
		// next token is a colon and the expression was a simple
		// Identifier node, we switch to interpreting it as a label.
		default:var maybeName=this.value,expr=this.parseExpression();if(starttype===tt.name&&expr.type==="Identifier"&&this.eat(tt.colon))return this.parseLabeledStatement(node,maybeName,expr);else return this.parseExpressionStatement(node,expr);}};pp$1.parseBreakContinueStatement=function(node,keyword){var this$1=this;var isBreak=keyword=="break";this.next();if(this.eat(tt.semi)||this.insertSemicolon())node.label=null;else if(this.type!==tt.name)this.unexpected();else{node.label=this.parseIdent();this.semicolon();}// Verify that there is an actual destination to break or
		// continue to.
		for(var i=0;i<this.labels.length;++i){var lab=this$1.labels[i];if(node.label==null||lab.name===node.label.name){if(lab.kind!=null&&(isBreak||lab.kind==="loop"))break;if(node.label&&isBreak)break;}}if(i===this.labels.length)this.raise(node.start,"Unsyntactic "+keyword);return this.finishNode(node,isBreak?"BreakStatement":"ContinueStatement");};pp$1.parseDebuggerStatement=function(node){this.next();this.semicolon();return this.finishNode(node,"DebuggerStatement");};pp$1.parseDoStatement=function(node){this.next();this.labels.push(loopLabel);node.body=this.parseStatement(false);this.labels.pop();this.expect(tt._while);node.test=this.parseParenExpression();if(this.options.ecmaVersion>=6)this.eat(tt.semi);else this.semicolon();return this.finishNode(node,"DoWhileStatement");};// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
		// loop is non-trivial. Basically, we have to parse the init `var`
		// statement or expression, disallowing the `in` operator (see
		// the second parameter to `parseExpression`), and then check
		// whether the next token is `in` or `of`. When there is no init
		// part (semicolon immediately after the opening parenthesis), it
		// is a regular `for` loop.
		pp$1.parseForStatement=function(node){this.next();this.labels.push(loopLabel);this.expect(tt.parenL);if(this.type===tt.semi)return this.parseFor(node,null);var isLet=this.isLet();if(this.type===tt._var||this.type===tt._const||isLet){var init$1=this.startNode(),kind=isLet?"let":this.value;this.next();this.parseVar(init$1,true,kind);this.finishNode(init$1,"VariableDeclaration");if((this.type===tt._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&init$1.declarations.length===1&&!(kind!=="var"&&init$1.declarations[0].init))return this.parseForIn(node,init$1);return this.parseFor(node,init$1);}var refDestructuringErrors=new DestructuringErrors();var init=this.parseExpression(true,refDestructuringErrors);if(this.type===tt._in||this.options.ecmaVersion>=6&&this.isContextual("of")){this.checkPatternErrors(refDestructuringErrors,true);this.toAssignable(init);this.checkLVal(init);return this.parseForIn(node,init);}else{this.checkExpressionErrors(refDestructuringErrors,true);}return this.parseFor(node,init);};pp$1.parseFunctionStatement=function(node){this.next();return this.parseFunction(node,true);};pp$1.parseIfStatement=function(node){this.next();node.test=this.parseParenExpression();node.consequent=this.parseStatement(false);node.alternate=this.eat(tt._else)?this.parseStatement(false):null;return this.finishNode(node,"IfStatement");};pp$1.parseReturnStatement=function(node){if(!this.inFunction&&!this.options.allowReturnOutsideFunction)this.raise(this.start,"'return' outside of function");this.next();// In `return` (and `break`/`continue`), the keywords with
		// optional arguments, we eagerly look for a semicolon or the
		// possibility to insert one.
		if(this.eat(tt.semi)||this.insertSemicolon())node.argument=null;else{node.argument=this.parseExpression();this.semicolon();}return this.finishNode(node,"ReturnStatement");};pp$1.parseSwitchStatement=function(node){var this$1=this;this.next();node.discriminant=this.parseParenExpression();node.cases=[];this.expect(tt.braceL);this.labels.push(switchLabel);// Statements under must be grouped (by label) in SwitchCase
		// nodes. `cur` is used to keep the node that we are currently
		// adding statements to.
		for(var cur,sawDefault=false;this.type!=tt.braceR;){if(this$1.type===tt._case||this$1.type===tt._default){var isCase=this$1.type===tt._case;if(cur)this$1.finishNode(cur,"SwitchCase");node.cases.push(cur=this$1.startNode());cur.consequent=[];this$1.next();if(isCase){cur.test=this$1.parseExpression();}else{if(sawDefault)this$1.raiseRecoverable(this$1.lastTokStart,"Multiple default clauses");sawDefault=true;cur.test=null;}this$1.expect(tt.colon);}else{if(!cur)this$1.unexpected();cur.consequent.push(this$1.parseStatement(true));}}if(cur)this.finishNode(cur,"SwitchCase");this.next();// Closing brace
		this.labels.pop();return this.finishNode(node,"SwitchStatement");};pp$1.parseThrowStatement=function(node){this.next();if(lineBreak.test(this.input.slice(this.lastTokEnd,this.start)))this.raise(this.lastTokEnd,"Illegal newline after throw");node.argument=this.parseExpression();this.semicolon();return this.finishNode(node,"ThrowStatement");};// Reused empty array added for node fields that are always empty.
		var empty=[];pp$1.parseTryStatement=function(node){this.next();node.block=this.parseBlock();node.handler=null;if(this.type===tt._catch){var clause=this.startNode();this.next();this.expect(tt.parenL);clause.param=this.parseBindingAtom();this.checkLVal(clause.param,true);this.expect(tt.parenR);clause.body=this.parseBlock();node.handler=this.finishNode(clause,"CatchClause");}node.finalizer=this.eat(tt._finally)?this.parseBlock():null;if(!node.handler&&!node.finalizer)this.raise(node.start,"Missing catch or finally clause");return this.finishNode(node,"TryStatement");};pp$1.parseVarStatement=function(node,kind){this.next();this.parseVar(node,false,kind);this.semicolon();return this.finishNode(node,"VariableDeclaration");};pp$1.parseWhileStatement=function(node){this.next();node.test=this.parseParenExpression();this.labels.push(loopLabel);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,"WhileStatement");};pp$1.parseWithStatement=function(node){if(this.strict)this.raise(this.start,"'with' in strict mode");this.next();node.object=this.parseParenExpression();node.body=this.parseStatement(false);return this.finishNode(node,"WithStatement");};pp$1.parseEmptyStatement=function(node){this.next();return this.finishNode(node,"EmptyStatement");};pp$1.parseLabeledStatement=function(node,maybeName,expr){var this$1=this;for(var i=0;i<this.labels.length;++i)/*istanbul ignore next*/{if(this$1.labels[i].name===maybeName)this$1.raise(expr.start,"Label '"+maybeName+"' is already declared");}var kind=this.type.isLoop?"loop":this.type===tt._switch?"switch":null;for(var i$1=this.labels.length-1;i$1>=0;i$1--){var label=this$1.labels[i$1];if(label.statementStart==node.start){label.statementStart=this$1.start;label.kind=kind;}else break;}this.labels.push({name:maybeName,kind:kind,statementStart:this.start});node.body=this.parseStatement(true);this.labels.pop();node.label=expr;return this.finishNode(node,"LabeledStatement");};pp$1.parseExpressionStatement=function(node,expr){node.expression=expr;this.semicolon();return this.finishNode(node,"ExpressionStatement");};// Parse a semicolon-enclosed block of statements, handling `"use
		// strict"` declarations when `allowStrict` is true (used for
		// function bodies).
		pp$1.parseBlock=function(allowStrict){var this$1=this;var node=this.startNode(),first=true,oldStrict;node.body=[];this.expect(tt.braceL);while(!this.eat(tt.braceR)){var stmt=this$1.parseStatement(true);node.body.push(stmt);if(first&&allowStrict&&this$1.isUseStrict(stmt)){oldStrict=this$1.strict;this$1.setStrict(this$1.strict=true);}first=false;}if(oldStrict===false)this.setStrict(false);return this.finishNode(node,"BlockStatement");};// Parse a regular `for` loop. The disambiguation code in
		// `parseStatement` will already have parsed the init statement or
		// expression.
		pp$1.parseFor=function(node,init){node.init=init;this.expect(tt.semi);node.test=this.type===tt.semi?null:this.parseExpression();this.expect(tt.semi);node.update=this.type===tt.parenR?null:this.parseExpression();this.expect(tt.parenR);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,"ForStatement");};// Parse a `for`/`in` and `for`/`of` loop, which are almost
		// same from parser's perspective.
		pp$1.parseForIn=function(node,init){var type=this.type===tt._in?"ForInStatement":"ForOfStatement";this.next();node.left=init;node.right=this.parseExpression();this.expect(tt.parenR);node.body=this.parseStatement(false);this.labels.pop();return this.finishNode(node,type);};// Parse a list of variable declarations.
		pp$1.parseVar=function(node,isFor,kind){var this$1=this;node.declarations=[];node.kind=kind;for(;;){var decl=this$1.startNode();this$1.parseVarId(decl);if(this$1.eat(tt.eq)){decl.init=this$1.parseMaybeAssign(isFor);}else if(kind==="const"&&!(this$1.type===tt._in||this$1.options.ecmaVersion>=6&&this$1.isContextual("of"))){this$1.unexpected();}else if(decl.id.type!="Identifier"&&!(isFor&&(this$1.type===tt._in||this$1.isContextual("of")))){this$1.raise(this$1.lastTokEnd,"Complex binding patterns require an initialization value");}else{decl.init=null;}node.declarations.push(this$1.finishNode(decl,"VariableDeclarator"));if(!this$1.eat(tt.comma))break;}return node;};pp$1.parseVarId=function(decl){decl.id=this.parseBindingAtom();this.checkLVal(decl.id,true);};// Parse a function declaration or literal (depending on the
		// `isStatement` parameter).
		pp$1.parseFunction=function(node,isStatement,allowExpressionBody){this.initFunction(node);if(this.options.ecmaVersion>=6)node.generator=this.eat(tt.star);var oldInGen=this.inGenerator;this.inGenerator=node.generator;if(isStatement||this.type===tt.name)node.id=this.parseIdent();this.parseFunctionParams(node);this.parseFunctionBody(node,allowExpressionBody);this.inGenerator=oldInGen;return this.finishNode(node,isStatement?"FunctionDeclaration":"FunctionExpression");};pp$1.parseFunctionParams=function(node){this.expect(tt.parenL);node.params=this.parseBindingList(tt.parenR,false,false,true);};// Parse a class declaration or literal (depending on the
		// `isStatement` parameter).
		pp$1.parseClass=function(node,isStatement){var this$1=this;this.next();this.parseClassId(node,isStatement);this.parseClassSuper(node);var classBody=this.startNode();var hadConstructor=false;classBody.body=[];this.expect(tt.braceL);while(!this.eat(tt.braceR)){if(this$1.eat(tt.semi))continue;var method=this$1.startNode();var isGenerator=this$1.eat(tt.star);var isMaybeStatic=this$1.type===tt.name&&this$1.value==="static";this$1.parsePropertyName(method);method.static=isMaybeStatic&&this$1.type!==tt.parenL;if(method.static){if(isGenerator)this$1.unexpected();isGenerator=this$1.eat(tt.star);this$1.parsePropertyName(method);}method.kind="method";var isGetSet=false;if(!method.computed){var key=method.key;if(!isGenerator&&key.type==="Identifier"&&this$1.type!==tt.parenL&&(key.name==="get"||key.name==="set")){isGetSet=true;method.kind=key.name;key=this$1.parsePropertyName(method);}if(!method.static&&(key.type==="Identifier"&&key.name==="constructor"||key.type==="Literal"&&key.value==="constructor")){if(hadConstructor)this$1.raise(key.start,"Duplicate constructor in the same class");if(isGetSet)this$1.raise(key.start,"Constructor can't have get/set modifier");if(isGenerator)this$1.raise(key.start,"Constructor can't be a generator");method.kind="constructor";hadConstructor=true;}}this$1.parseClassMethod(classBody,method,isGenerator);if(isGetSet){var paramCount=method.kind==="get"?0:1;if(method.value.params.length!==paramCount){var start=method.value.start;if(method.kind==="get")this$1.raiseRecoverable(start,"getter should have no params");else this$1.raiseRecoverable(start,"setter should have exactly one param");}if(method.kind==="set"&&method.value.params[0].type==="RestElement")this$1.raise(method.value.params[0].start,"Setter cannot use rest params");}}node.body=this.finishNode(classBody,"ClassBody");return this.finishNode(node,isStatement?"ClassDeclaration":"ClassExpression");};pp$1.parseClassMethod=function(classBody,method,isGenerator){method.value=this.parseMethod(isGenerator);classBody.body.push(this.finishNode(method,"MethodDefinition"));};pp$1.parseClassId=function(node,isStatement){node.id=this.type===tt.name?this.parseIdent():isStatement?this.unexpected():null;};pp$1.parseClassSuper=function(node){node.superClass=this.eat(tt._extends)?this.parseExprSubscripts():null;};// Parses module export declaration.
		pp$1.parseExport=function(node){var this$1=this;this.next();// export * from '...'
		if(this.eat(tt.star)){this.expectContextual("from");node.source=this.type===tt.string?this.parseExprAtom():this.unexpected();this.semicolon();return this.finishNode(node,"ExportAllDeclaration");}if(this.eat(tt._default)){// export default ...
		var parens=this.type==tt.parenL;var expr=this.parseMaybeAssign();var needsSemi=true;if(!parens&&(expr.type=="FunctionExpression"||expr.type=="ClassExpression")){needsSemi=false;if(expr.id){expr.type=expr.type=="FunctionExpression"?"FunctionDeclaration":"ClassDeclaration";}}node.declaration=expr;if(needsSemi)this.semicolon();return this.finishNode(node,"ExportDefaultDeclaration");}// export var|const|let|function|class ...
		if(this.shouldParseExportStatement()){node.declaration=this.parseStatement(true);node.specifiers=[];node.source=null;}else{// export { x, y as z } [from '...']
		node.declaration=null;node.specifiers=this.parseExportSpecifiers();if(this.eatContextual("from")){node.source=this.type===tt.string?this.parseExprAtom():this.unexpected();}else{// check for keywords used as local names
		for(var i=0;i<node.specifiers.length;i++){if(this$1.keywords.test(node.specifiers[i].local.name)||this$1.reservedWords.test(node.specifiers[i].local.name)){this$1.unexpected(node.specifiers[i].local.start);}}node.source=null;}this.semicolon();}return this.finishNode(node,"ExportNamedDeclaration");};pp$1.shouldParseExportStatement=function(){return this.type.keyword||this.isLet();};// Parses a comma-separated list of module exports.
		pp$1.parseExportSpecifiers=function(){var this$1=this;var nodes=[],first=true;// export { x, y as z } [from '...']
		this.expect(tt.braceL);while(!this.eat(tt.braceR)){if(!first){this$1.expect(tt.comma);if(this$1.afterTrailingComma(tt.braceR))break;}else first=false;var node=this$1.startNode();node.local=this$1.parseIdent(this$1.type===tt._default);node.exported=this$1.eatContextual("as")?this$1.parseIdent(true):node.local;nodes.push(this$1.finishNode(node,"ExportSpecifier"));}return nodes;};// Parses import declaration.
		pp$1.parseImport=function(node){this.next();// import '...'
		if(this.type===tt.string){node.specifiers=empty;node.source=this.parseExprAtom();}else{node.specifiers=this.parseImportSpecifiers();this.expectContextual("from");node.source=this.type===tt.string?this.parseExprAtom():this.unexpected();}this.semicolon();return this.finishNode(node,"ImportDeclaration");};// Parses a comma-separated list of module imports.
		pp$1.parseImportSpecifiers=function(){var this$1=this;var nodes=[],first=true;if(this.type===tt.name){// import defaultObj, { x, y as z } from '...'
		var node=this.startNode();node.local=this.parseIdent();this.checkLVal(node.local,true);nodes.push(this.finishNode(node,"ImportDefaultSpecifier"));if(!this.eat(tt.comma))return nodes;}if(this.type===tt.star){var node$1=this.startNode();this.next();this.expectContextual("as");node$1.local=this.parseIdent();this.checkLVal(node$1.local,true);nodes.push(this.finishNode(node$1,"ImportNamespaceSpecifier"));return nodes;}this.expect(tt.braceL);while(!this.eat(tt.braceR)){if(!first){this$1.expect(tt.comma);if(this$1.afterTrailingComma(tt.braceR))break;}else first=false;var node$2=this$1.startNode();node$2.imported=this$1.parseIdent(true);if(this$1.eatContextual("as")){node$2.local=this$1.parseIdent();}else{node$2.local=node$2.imported;if(this$1.isKeyword(node$2.local.name))this$1.unexpected(node$2.local.start);if(this$1.reservedWordsStrict.test(node$2.local.name))this$1.raise(node$2.local.start,"The keyword '"+node$2.local.name+"' is reserved");}this$1.checkLVal(node$2.local,true);nodes.push(this$1.finishNode(node$2,"ImportSpecifier"));}return nodes;};var pp$2=Parser.prototype;// Convert existing expression atom to assignable pattern
		// if possible.
		pp$2.toAssignable=function(node,isBinding){var this$1=this;if(this.options.ecmaVersion>=6&&node){switch(node.type){case"Identifier":case"ObjectPattern":case"ArrayPattern":break;case"ObjectExpression":node.type="ObjectPattern";for(var i=0;i<node.properties.length;i++){var prop=node.properties[i];if(prop.kind!=="init")this$1.raise(prop.key.start,"Object pattern can't contain getter or setter");this$1.toAssignable(prop.value,isBinding);}break;case"ArrayExpression":node.type="ArrayPattern";this.toAssignableList(node.elements,isBinding);break;case"AssignmentExpression":if(node.operator==="="){node.type="AssignmentPattern";delete node.operator;// falls through to AssignmentPattern
		}else{this.raise(node.left.end,"Only '=' operator can be used for specifying default value.");break;}case"AssignmentPattern":if(node.right.type==="YieldExpression")this.raise(node.right.start,"Yield expression cannot be a default value");break;case"ParenthesizedExpression":node.expression=this.toAssignable(node.expression,isBinding);break;case"MemberExpression":if(!isBinding)break;default:this.raise(node.start,"Assigning to rvalue");}}return node;};// Convert list of expression atoms to binding list.
		pp$2.toAssignableList=function(exprList,isBinding){var this$1=this;var end=exprList.length;if(end){var last=exprList[end-1];if(last&&last.type=="RestElement"){--end;}else if(last&&last.type=="SpreadElement"){last.type="RestElement";var arg=last.argument;this.toAssignable(arg,isBinding);if(arg.type!=="Identifier"&&arg.type!=="MemberExpression"&&arg.type!=="ArrayPattern")this.unexpected(arg.start);--end;}if(isBinding&&last&&last.type==="RestElement"&&last.argument.type!=="Identifier")this.unexpected(last.argument.start);}for(var i=0;i<end;i++){var elt=exprList[i];if(elt)this$1.toAssignable(elt,isBinding);}return exprList;};// Parses spread element.
		pp$2.parseSpread=function(refDestructuringErrors){var node=this.startNode();this.next();node.argument=this.parseMaybeAssign(false,refDestructuringErrors);return this.finishNode(node,"SpreadElement");};pp$2.parseRest=function(allowNonIdent){var node=this.startNode();this.next();// RestElement inside of a function parameter must be an identifier
		if(allowNonIdent)node.argument=this.type===tt.name?this.parseIdent():this.unexpected();else node.argument=this.type===tt.name||this.type===tt.bracketL?this.parseBindingAtom():this.unexpected();return this.finishNode(node,"RestElement");};// Parses lvalue (assignable) atom.
		pp$2.parseBindingAtom=function(){if(this.options.ecmaVersion<6)return this.parseIdent();switch(this.type){case tt.name:return this.parseIdent();case tt.bracketL:var node=this.startNode();this.next();node.elements=this.parseBindingList(tt.bracketR,true,true);return this.finishNode(node,"ArrayPattern");case tt.braceL:return this.parseObj(true);default:this.unexpected();}};pp$2.parseBindingList=function(close,allowEmpty,allowTrailingComma,allowNonIdent){var this$1=this;var elts=[],first=true;while(!this.eat(close)){if(first)first=false;else this$1.expect(tt.comma);if(allowEmpty&&this$1.type===tt.comma){elts.push(null);}else if(allowTrailingComma&&this$1.afterTrailingComma(close)){break;}else if(this$1.type===tt.ellipsis){var rest=this$1.parseRest(allowNonIdent);this$1.parseBindingListItem(rest);elts.push(rest);if(this$1.type===tt.comma)this$1.raise(this$1.start,"Comma is not permitted after the rest element");this$1.expect(close);break;}else{var elem=this$1.parseMaybeDefault(this$1.start,this$1.startLoc);this$1.parseBindingListItem(elem);elts.push(elem);}}return elts;};pp$2.parseBindingListItem=function(param){return param;};// Parses assignment pattern around given atom if possible.
		pp$2.parseMaybeDefault=function(startPos,startLoc,left){left=left||this.parseBindingAtom();if(this.options.ecmaVersion<6||!this.eat(tt.eq))return left;var node=this.startNodeAt(startPos,startLoc);node.left=left;node.right=this.parseMaybeAssign();return this.finishNode(node,"AssignmentPattern");};// Verify that a node is an lval — something that can be assigned
		// to.
		pp$2.checkLVal=function(expr,isBinding,checkClashes){var this$1=this;switch(expr.type){case"Identifier":if(this.strict&&this.reservedWordsStrictBind.test(expr.name))this.raiseRecoverable(expr.start,(isBinding?"Binding ":"Assigning to ")+expr.name+" in strict mode");if(checkClashes){if(has(checkClashes,expr.name))this.raiseRecoverable(expr.start,"Argument name clash");checkClashes[expr.name]=true;}break;case"MemberExpression":if(isBinding)this.raiseRecoverable(expr.start,(isBinding?"Binding":"Assigning to")+" member expression");break;case"ObjectPattern":for(var i=0;i<expr.properties.length;i++)/*istanbul ignore next*/{this$1.checkLVal(expr.properties[i].value,isBinding,checkClashes);}break;case"ArrayPattern":for(var i$1=0;i$1<expr.elements.length;i$1++){var elem=expr.elements[i$1];if(elem)this$1.checkLVal(elem,isBinding,checkClashes);}break;case"AssignmentPattern":this.checkLVal(expr.left,isBinding,checkClashes);break;case"RestElement":this.checkLVal(expr.argument,isBinding,checkClashes);break;case"ParenthesizedExpression":this.checkLVal(expr.expression,isBinding,checkClashes);break;default:this.raise(expr.start,(isBinding?"Binding":"Assigning to")+" rvalue");}};var pp$3=Parser.prototype;// Check if property name clashes with already added.
		// Object/class getters and setters are not allowed to clash —
		// either with each other or with an init property — and in
		// strict mode, init properties are also not allowed to be repeated.
		pp$3.checkPropClash=function(prop,propHash){if(this.options.ecmaVersion>=6&&(prop.computed||prop.method||prop.shorthand))return;var key=prop.key;var name;switch(key.type){case"Identifier":name=key.name;break;case"Literal":name=String(key.value);break;default:return;}var kind=prop.kind;if(this.options.ecmaVersion>=6){if(name==="__proto__"&&kind==="init"){if(propHash.proto)this.raiseRecoverable(key.start,"Redefinition of __proto__ property");propHash.proto=true;}return;}name="$"+name;var other=propHash[name];if(other){var isGetSet=kind!=="init";if((this.strict||isGetSet)&&other[kind]||!(isGetSet^other.init))this.raiseRecoverable(key.start,"Redefinition of property");}else{other=propHash[name]={init:false,get:false,set:false};}other[kind]=true;};// ### Expression parsing
		// These nest, from the most general expression type at the top to
		// 'atomic', nondivisible expression types at the bottom. Most of
		// the functions will simply let the function(s) below them parse,
		// and, *if* the syntactic construct they handle is present, wrap
		// the AST node that the inner parser gave them in another node.
		// Parse a full expression. The optional arguments are used to
		// forbid the `in` operator (in for loops initalization expressions)
		// and provide reference for storing '=' operator inside shorthand
		// property assignment in contexts where both object expression
		// and object pattern might appear (so it's possible to raise
		// delayed syntax error at correct position).
		pp$3.parseExpression=function(noIn,refDestructuringErrors){var this$1=this;var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeAssign(noIn,refDestructuringErrors);if(this.type===tt.comma){var node=this.startNodeAt(startPos,startLoc);node.expressions=[expr];while(this.eat(tt.comma))/*istanbul ignore next*/{node.expressions.push(this$1.parseMaybeAssign(noIn,refDestructuringErrors));}return this.finishNode(node,"SequenceExpression");}return expr;};// Parse an assignment expression. This includes applications of
		// operators like `+=`.
		pp$3.parseMaybeAssign=function(noIn,refDestructuringErrors,afterLeftParse){if(this.inGenerator&&this.isContextual("yield"))return this.parseYield();var ownDestructuringErrors=false;if(!refDestructuringErrors){refDestructuringErrors=new DestructuringErrors();ownDestructuringErrors=true;}var startPos=this.start,startLoc=this.startLoc;if(this.type==tt.parenL||this.type==tt.name)this.potentialArrowAt=this.start;var left=this.parseMaybeConditional(noIn,refDestructuringErrors);if(afterLeftParse)left=afterLeftParse.call(this,left,startPos,startLoc);if(this.type.isAssign){this.checkPatternErrors(refDestructuringErrors,true);if(!ownDestructuringErrors)DestructuringErrors.call(refDestructuringErrors);var node=this.startNodeAt(startPos,startLoc);node.operator=this.value;node.left=this.type===tt.eq?this.toAssignable(left):left;refDestructuringErrors.shorthandAssign=0;// reset because shorthand default was used correctly
		this.checkLVal(left);this.next();node.right=this.parseMaybeAssign(noIn);return this.finishNode(node,"AssignmentExpression");}else{if(ownDestructuringErrors)this.checkExpressionErrors(refDestructuringErrors,true);}return left;};// Parse a ternary conditional (`?:`) operator.
		pp$3.parseMaybeConditional=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprOps(noIn,refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors))return expr;if(this.eat(tt.question)){var node=this.startNodeAt(startPos,startLoc);node.test=expr;node.consequent=this.parseMaybeAssign();this.expect(tt.colon);node.alternate=this.parseMaybeAssign(noIn);return this.finishNode(node,"ConditionalExpression");}return expr;};// Start the precedence parser.
		pp$3.parseExprOps=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeUnary(refDestructuringErrors,false);if(this.checkExpressionErrors(refDestructuringErrors))return expr;return this.parseExprOp(expr,startPos,startLoc,-1,noIn);};// Parse binary operators with the operator precedence parsing
		// algorithm. `left` is the left-hand side of the operator.
		// `minPrec` provides context that allows the function to stop and
		// defer further parser to one of its callers when it encounters an
		// operator that has a lower precedence than the set it is parsing.
		pp$3.parseExprOp=function(left,leftStartPos,leftStartLoc,minPrec,noIn){var prec=this.type.binop;if(prec!=null&&(!noIn||this.type!==tt._in)){if(prec>minPrec){var logical=this.type===tt.logicalOR||this.type===tt.logicalAND;var op=this.value;this.next();var startPos=this.start,startLoc=this.startLoc;var right=this.parseExprOp(this.parseMaybeUnary(null,false),startPos,startLoc,prec,noIn);var node=this.buildBinary(leftStartPos,leftStartLoc,left,right,op,logical);return this.parseExprOp(node,leftStartPos,leftStartLoc,minPrec,noIn);}}return left;};pp$3.buildBinary=function(startPos,startLoc,left,right,op,logical){var node=this.startNodeAt(startPos,startLoc);node.left=left;node.operator=op;node.right=right;return this.finishNode(node,logical?"LogicalExpression":"BinaryExpression");};// Parse unary operators, both prefix and postfix.
		pp$3.parseMaybeUnary=function(refDestructuringErrors,sawUnary){var this$1=this;var startPos=this.start,startLoc=this.startLoc,expr;if(this.type.prefix){var node=this.startNode(),update=this.type===tt.incDec;node.operator=this.value;node.prefix=true;this.next();node.argument=this.parseMaybeUnary(null,true);this.checkExpressionErrors(refDestructuringErrors,true);if(update)this.checkLVal(node.argument);else if(this.strict&&node.operator==="delete"&&node.argument.type==="Identifier")this.raiseRecoverable(node.start,"Deleting local variable in strict mode");else sawUnary=true;expr=this.finishNode(node,update?"UpdateExpression":"UnaryExpression");}else{expr=this.parseExprSubscripts(refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors))return expr;while(this.type.postfix&&!this.canInsertSemicolon()){var node$1=this$1.startNodeAt(startPos,startLoc);node$1.operator=this$1.value;node$1.prefix=false;node$1.argument=expr;this$1.checkLVal(expr);this$1.next();expr=this$1.finishNode(node$1,"UpdateExpression");}}if(!sawUnary&&this.eat(tt.starstar))return this.buildBinary(startPos,startLoc,expr,this.parseMaybeUnary(null,false),"**",false);else return expr;};// Parse call, dot, and `[]`-subscript expressions.
		pp$3.parseExprSubscripts=function(refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprAtom(refDestructuringErrors);var skipArrowSubscripts=expr.type==="ArrowFunctionExpression"&&this.input.slice(this.lastTokStart,this.lastTokEnd)!==")";if(this.checkExpressionErrors(refDestructuringErrors)||skipArrowSubscripts)return expr;return this.parseSubscripts(expr,startPos,startLoc);};pp$3.parseSubscripts=function(base,startPos,startLoc,noCalls){var this$1=this;for(;;){if(this$1.eat(tt.dot)){var node=this$1.startNodeAt(startPos,startLoc);node.object=base;node.property=this$1.parseIdent(true);node.computed=false;base=this$1.finishNode(node,"MemberExpression");}else if(this$1.eat(tt.bracketL)){var node$1=this$1.startNodeAt(startPos,startLoc);node$1.object=base;node$1.property=this$1.parseExpression();node$1.computed=true;this$1.expect(tt.bracketR);base=this$1.finishNode(node$1,"MemberExpression");}else if(!noCalls&&this$1.eat(tt.parenL)){var node$2=this$1.startNodeAt(startPos,startLoc);node$2.callee=base;node$2.arguments=this$1.parseExprList(tt.parenR,false);base=this$1.finishNode(node$2,"CallExpression");}else if(this$1.type===tt.backQuote){var node$3=this$1.startNodeAt(startPos,startLoc);node$3.tag=base;node$3.quasi=this$1.parseTemplate();base=this$1.finishNode(node$3,"TaggedTemplateExpression");}else{return base;}}};// Parse an atomic expression — either a single token that is an
		// expression, an expression started by a keyword like `function` or
		// `new`, or an expression wrapped in punctuation like `()`, `[]`,
		// or `{}`.
		pp$3.parseExprAtom=function(refDestructuringErrors){var node,canBeArrow=this.potentialArrowAt==this.start;switch(this.type){case tt._super:if(!this.inFunction)this.raise(this.start,"'super' outside of function or class");case tt._this:var type=this.type===tt._this?"ThisExpression":"Super";node=this.startNode();this.next();return this.finishNode(node,type);case tt.name:var startPos=this.start,startLoc=this.startLoc;var id=this.parseIdent(this.type!==tt.name);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(tt.arrow))return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id]);return id;case tt.regexp:var value=this.value;node=this.parseLiteral(value.value);node.regex={pattern:value.pattern,flags:value.flags};return node;case tt.num:case tt.string:return this.parseLiteral(this.value);case tt._null:case tt._true:case tt._false:node=this.startNode();node.value=this.type===tt._null?null:this.type===tt._true;node.raw=this.type.keyword;this.next();return this.finishNode(node,"Literal");case tt.parenL:return this.parseParenAndDistinguishExpression(canBeArrow);case tt.bracketL:node=this.startNode();this.next();node.elements=this.parseExprList(tt.bracketR,true,true,refDestructuringErrors);return this.finishNode(node,"ArrayExpression");case tt.braceL:return this.parseObj(false,refDestructuringErrors);case tt._function:node=this.startNode();this.next();return this.parseFunction(node,false);case tt._class:return this.parseClass(this.startNode(),false);case tt._new:return this.parseNew();case tt.backQuote:return this.parseTemplate();default:this.unexpected();}};pp$3.parseLiteral=function(value){var node=this.startNode();node.value=value;node.raw=this.input.slice(this.start,this.end);this.next();return this.finishNode(node,"Literal");};pp$3.parseParenExpression=function(){this.expect(tt.parenL);var val=this.parseExpression();this.expect(tt.parenR);return val;};pp$3.parseParenAndDistinguishExpression=function(canBeArrow){var this$1=this;var startPos=this.start,startLoc=this.startLoc,val;if(this.options.ecmaVersion>=6){this.next();var innerStartPos=this.start,innerStartLoc=this.startLoc;var exprList=[],first=true;var refDestructuringErrors=new DestructuringErrors(),spreadStart,innerParenStart;while(this.type!==tt.parenR){first?first=false:this$1.expect(tt.comma);if(this$1.type===tt.ellipsis){spreadStart=this$1.start;exprList.push(this$1.parseParenItem(this$1.parseRest()));break;}else{if(this$1.type===tt.parenL&&!innerParenStart){innerParenStart=this$1.start;}exprList.push(this$1.parseMaybeAssign(false,refDestructuringErrors,this$1.parseParenItem));}}var innerEndPos=this.start,innerEndLoc=this.startLoc;this.expect(tt.parenR);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(tt.arrow)){this.checkPatternErrors(refDestructuringErrors,true);if(innerParenStart)this.unexpected(innerParenStart);return this.parseParenArrowList(startPos,startLoc,exprList);}if(!exprList.length)this.unexpected(this.lastTokStart);if(spreadStart)this.unexpected(spreadStart);this.checkExpressionErrors(refDestructuringErrors,true);if(exprList.length>1){val=this.startNodeAt(innerStartPos,innerStartLoc);val.expressions=exprList;this.finishNodeAt(val,"SequenceExpression",innerEndPos,innerEndLoc);}else{val=exprList[0];}}else{val=this.parseParenExpression();}if(this.options.preserveParens){var par=this.startNodeAt(startPos,startLoc);par.expression=val;return this.finishNode(par,"ParenthesizedExpression");}else{return val;}};pp$3.parseParenItem=function(item){return item;};pp$3.parseParenArrowList=function(startPos,startLoc,exprList){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList);};// New's precedence is slightly tricky. It must allow its argument to
		// be a `[]` or dot subscript expression, but not a call — at least,
		// not without wrapping it in parentheses. Thus, it uses the noCalls
		// argument to parseSubscripts to prevent it from consuming the
		// argument list.
		var empty$1=[];pp$3.parseNew=function(){var node=this.startNode();var meta=this.parseIdent(true);if(this.options.ecmaVersion>=6&&this.eat(tt.dot)){node.meta=meta;node.property=this.parseIdent(true);if(node.property.name!=="target")this.raiseRecoverable(node.property.start,"The only valid meta property for new is new.target");if(!this.inFunction)this.raiseRecoverable(node.start,"new.target can only be used in functions");return this.finishNode(node,"MetaProperty");}var startPos=this.start,startLoc=this.startLoc;node.callee=this.parseSubscripts(this.parseExprAtom(),startPos,startLoc,true);if(this.eat(tt.parenL))node.arguments=this.parseExprList(tt.parenR,false);else node.arguments=empty$1;return this.finishNode(node,"NewExpression");};// Parse template expression.
		pp$3.parseTemplateElement=function(){var elem=this.startNode();elem.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,'\n'),cooked:this.value};this.next();elem.tail=this.type===tt.backQuote;return this.finishNode(elem,"TemplateElement");};pp$3.parseTemplate=function(){var this$1=this;var node=this.startNode();this.next();node.expressions=[];var curElt=this.parseTemplateElement();node.quasis=[curElt];while(!curElt.tail){this$1.expect(tt.dollarBraceL);node.expressions.push(this$1.parseExpression());this$1.expect(tt.braceR);node.quasis.push(curElt=this$1.parseTemplateElement());}this.next();return this.finishNode(node,"TemplateLiteral");};// Parse an object literal or binding pattern.
		pp$3.parseObj=function(isPattern,refDestructuringErrors){var this$1=this;var node=this.startNode(),first=true,propHash={};node.properties=[];this.next();while(!this.eat(tt.braceR)){if(!first){this$1.expect(tt.comma);if(this$1.afterTrailingComma(tt.braceR))break;}else first=false;var prop=this$1.startNode(),isGenerator,startPos,startLoc;if(this$1.options.ecmaVersion>=6){prop.method=false;prop.shorthand=false;if(isPattern||refDestructuringErrors){startPos=this$1.start;startLoc=this$1.startLoc;}if(!isPattern)isGenerator=this$1.eat(tt.star);}this$1.parsePropertyName(prop);this$1.parsePropertyValue(prop,isPattern,isGenerator,startPos,startLoc,refDestructuringErrors);this$1.checkPropClash(prop,propHash);node.properties.push(this$1.finishNode(prop,"Property"));}return this.finishNode(node,isPattern?"ObjectPattern":"ObjectExpression");};pp$3.parsePropertyValue=function(prop,isPattern,isGenerator,startPos,startLoc,refDestructuringErrors){if(this.eat(tt.colon)){prop.value=isPattern?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(false,refDestructuringErrors);prop.kind="init";}else if(this.options.ecmaVersion>=6&&this.type===tt.parenL){if(isPattern)this.unexpected();prop.kind="init";prop.method=true;prop.value=this.parseMethod(isGenerator);}else if(this.options.ecmaVersion>=5&&!prop.computed&&prop.key.type==="Identifier"&&(prop.key.name==="get"||prop.key.name==="set")&&this.type!=tt.comma&&this.type!=tt.braceR){if(isGenerator||isPattern)this.unexpected();prop.kind=prop.key.name;this.parsePropertyName(prop);prop.value=this.parseMethod(false);var paramCount=prop.kind==="get"?0:1;if(prop.value.params.length!==paramCount){var start=prop.value.start;if(prop.kind==="get")this.raiseRecoverable(start,"getter should have no params");else this.raiseRecoverable(start,"setter should have exactly one param");}if(prop.kind==="set"&&prop.value.params[0].type==="RestElement")this.raiseRecoverable(prop.value.params[0].start,"Setter cannot use rest params");}else if(this.options.ecmaVersion>=6&&!prop.computed&&prop.key.type==="Identifier"){if(this.keywords.test(prop.key.name)||(this.strict?this.reservedWordsStrictBind:this.reservedWords).test(prop.key.name)||this.inGenerator&&prop.key.name=="yield")this.raiseRecoverable(prop.key.start,"'"+prop.key.name+"' can not be used as shorthand property");prop.kind="init";if(isPattern){prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key);}else if(this.type===tt.eq&&refDestructuringErrors){if(!refDestructuringErrors.shorthandAssign)refDestructuringErrors.shorthandAssign=this.start;prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key);}else{prop.value=prop.key;}prop.shorthand=true;}else this.unexpected();};pp$3.parsePropertyName=function(prop){if(this.options.ecmaVersion>=6){if(this.eat(tt.bracketL)){prop.computed=true;prop.key=this.parseMaybeAssign();this.expect(tt.bracketR);return prop.key;}else{prop.computed=false;}}return prop.key=this.type===tt.num||this.type===tt.string?this.parseExprAtom():this.parseIdent(true);};// Initialize empty function node.
		pp$3.initFunction=function(node){node.id=null;if(this.options.ecmaVersion>=6){node.generator=false;node.expression=false;}};// Parse object or class method.
		pp$3.parseMethod=function(isGenerator){var node=this.startNode(),oldInGen=this.inGenerator;this.inGenerator=isGenerator;this.initFunction(node);this.expect(tt.parenL);node.params=this.parseBindingList(tt.parenR,false,false);if(this.options.ecmaVersion>=6)node.generator=isGenerator;this.parseFunctionBody(node,false);this.inGenerator=oldInGen;return this.finishNode(node,"FunctionExpression");};// Parse arrow function expression with given parameters.
		pp$3.parseArrowExpression=function(node,params){var oldInGen=this.inGenerator;this.inGenerator=false;this.initFunction(node);node.params=this.toAssignableList(params,true);this.parseFunctionBody(node,true);this.inGenerator=oldInGen;return this.finishNode(node,"ArrowFunctionExpression");};// Parse function body and check parameters.
		pp$3.parseFunctionBody=function(node,isArrowFunction){var isExpression=isArrowFunction&&this.type!==tt.braceL;if(isExpression){node.body=this.parseMaybeAssign();node.expression=true;}else{// Start a new scope with regard to labels and the `inFunction`
		// flag (restore them to their old value afterwards).
		var oldInFunc=this.inFunction,oldLabels=this.labels;this.inFunction=true;this.labels=[];node.body=this.parseBlock(true);node.expression=false;this.inFunction=oldInFunc;this.labels=oldLabels;}// If this is a strict mode function, verify that argument names
		// are not repeated, and it does not try to bind the words `eval`
		// or `arguments`.
		var useStrict=!isExpression&&node.body.body.length&&this.isUseStrict(node.body.body[0])?node.body.body[0]:null;if(this.strict||useStrict){var oldStrict=this.strict;this.strict=true;if(node.id)this.checkLVal(node.id,true);this.checkParams(node,useStrict);this.strict=oldStrict;}else if(isArrowFunction){this.checkParams(node,useStrict);}};// Checks function params for various disallowed patterns such as using "eval"
		// or "arguments" and duplicate parameters.
		pp$3.checkParams=function(node,useStrict){var this$1=this;var nameHash={};for(var i=0;i<node.params.length;i++){if(useStrict&&this$1.options.ecmaVersion>=7&&node.params[i].type!=="Identifier")this$1.raiseRecoverable(useStrict.start,"Illegal 'use strict' directive in function with non-simple parameter list");this$1.checkLVal(node.params[i],true,nameHash);}};// Parses a comma-separated list of expressions, and returns them as
		// an array. `close` is the token type that ends the list, and
		// `allowEmpty` can be turned on to allow subsequent commas with
		// nothing in between them to be parsed as `null` (which is needed
		// for array literals).
		pp$3.parseExprList=function(close,allowTrailingComma,allowEmpty,refDestructuringErrors){var this$1=this;var elts=[],first=true;while(!this.eat(close)){if(!first){this$1.expect(tt.comma);if(allowTrailingComma&&this$1.afterTrailingComma(close))break;}else first=false;var elt;if(allowEmpty&&this$1.type===tt.comma)elt=null;else if(this$1.type===tt.ellipsis){elt=this$1.parseSpread(refDestructuringErrors);if(this$1.type===tt.comma&&refDestructuringErrors&&!refDestructuringErrors.trailingComma){refDestructuringErrors.trailingComma=this$1.lastTokStart;}}else elt=this$1.parseMaybeAssign(false,refDestructuringErrors);elts.push(elt);}return elts;};// Parse the next token as an identifier. If `liberal` is true (used
		// when parsing properties), it will also convert keywords into
		// identifiers.
		pp$3.parseIdent=function(liberal){var node=this.startNode();if(liberal&&this.options.allowReserved=="never")liberal=false;if(this.type===tt.name){if(!liberal&&(this.strict?this.reservedWordsStrict:this.reservedWords).test(this.value)&&(this.options.ecmaVersion>=6||this.input.slice(this.start,this.end).indexOf("\\")==-1))this.raiseRecoverable(this.start,"The keyword '"+this.value+"' is reserved");if(!liberal&&this.inGenerator&&this.value==="yield")this.raiseRecoverable(this.start,"Can not use 'yield' as identifier inside a generator");node.name=this.value;}else if(liberal&&this.type.keyword){node.name=this.type.keyword;}else{this.unexpected();}this.next();return this.finishNode(node,"Identifier");};// Parses yield expression inside generator.
		pp$3.parseYield=function(){var node=this.startNode();this.next();if(this.type==tt.semi||this.canInsertSemicolon()||this.type!=tt.star&&!this.type.startsExpr){node.delegate=false;node.argument=null;}else{node.delegate=this.eat(tt.star);node.argument=this.parseMaybeAssign();}return this.finishNode(node,"YieldExpression");};var pp$4=Parser.prototype;// This function is used to raise exceptions on parse errors. It
		// takes an offset integer (into the current `input`) to indicate
		// the location of the error, attaches the position to the end
		// of the error message, and then raises a `SyntaxError` with that
		// message.
		pp$4.raise=function(pos,message){var loc=getLineInfo(this.input,pos);message+=" ("+loc.line+":"+loc.column+")";var err=new SyntaxError(message);err.pos=pos;err.loc=loc;err.raisedAt=this.pos;throw err;};pp$4.raiseRecoverable=pp$4.raise;pp$4.curPosition=function(){if(this.options.locations){return new Position(this.curLine,this.pos-this.lineStart);}};var Node=function Node(parser,pos,loc){this.type="";this.start=pos;this.end=0;if(parser.options.locations)this.loc=new SourceLocation(parser,loc);if(parser.options.directSourceFile)this.sourceFile=parser.options.directSourceFile;if(parser.options.ranges)this.range=[pos,0];};// Start an AST node, attaching a start offset.
		var pp$5=Parser.prototype;pp$5.startNode=function(){return new Node(this,this.start,this.startLoc);};pp$5.startNodeAt=function(pos,loc){return new Node(this,pos,loc);};// Finish an AST node, adding `type` and `end` properties.
		function finishNodeAt(node,type,pos,loc){node.type=type;node.end=pos;if(this.options.locations)node.loc.end=loc;if(this.options.ranges)node.range[1]=pos;return node;}pp$5.finishNode=function(node,type){return finishNodeAt.call(this,node,type,this.lastTokEnd,this.lastTokEndLoc);};// Finish node at given position
		pp$5.finishNodeAt=function(node,type,pos,loc){return finishNodeAt.call(this,node,type,pos,loc);};var TokContext=function TokContext(token,isExpr,preserveSpace,override){this.token=token;this.isExpr=!!isExpr;this.preserveSpace=!!preserveSpace;this.override=override;};var types={b_stat:new TokContext("{",false),b_expr:new TokContext("{",true),b_tmpl:new TokContext("${",true),p_stat:new TokContext("(",false),p_expr:new TokContext("(",true),q_tmpl:new TokContext("`",true,true,function(p){return p.readTmplToken();}),f_expr:new TokContext("function",true)};var pp$6=Parser.prototype;pp$6.initialContext=function(){return[types.b_stat];};pp$6.braceIsBlock=function(prevType){if(prevType===tt.colon){var parent=this.curContext();if(parent===types.b_stat||parent===types.b_expr)return!parent.isExpr;}if(prevType===tt._return)return lineBreak.test(this.input.slice(this.lastTokEnd,this.start));if(prevType===tt._else||prevType===tt.semi||prevType===tt.eof||prevType===tt.parenR)return true;if(prevType==tt.braceL)return this.curContext()===types.b_stat;return!this.exprAllowed;};pp$6.updateContext=function(prevType){var update,type=this.type;if(type.keyword&&prevType==tt.dot)this.exprAllowed=false;else if(update=type.updateContext)update.call(this,prevType);else this.exprAllowed=type.beforeExpr;};// Token-specific context update code
		tt.parenR.updateContext=tt.braceR.updateContext=function(){if(this.context.length==1){this.exprAllowed=true;return;}var out=this.context.pop();if(out===types.b_stat&&this.curContext()===types.f_expr){this.context.pop();this.exprAllowed=false;}else if(out===types.b_tmpl){this.exprAllowed=true;}else{this.exprAllowed=!out.isExpr;}};tt.braceL.updateContext=function(prevType){this.context.push(this.braceIsBlock(prevType)?types.b_stat:types.b_expr);this.exprAllowed=true;};tt.dollarBraceL.updateContext=function(){this.context.push(types.b_tmpl);this.exprAllowed=true;};tt.parenL.updateContext=function(prevType){var statementParens=prevType===tt._if||prevType===tt._for||prevType===tt._with||prevType===tt._while;this.context.push(statementParens?types.p_stat:types.p_expr);this.exprAllowed=true;};tt.incDec.updateContext=function(){// tokExprAllowed stays unchanged
		};tt._function.updateContext=function(prevType){if(prevType.beforeExpr&&prevType!==tt.semi&&prevType!==tt._else&&!((prevType===tt.colon||prevType===tt.braceL)&&this.curContext()===types.b_stat))this.context.push(types.f_expr);this.exprAllowed=false;};tt.backQuote.updateContext=function(){if(this.curContext()===types.q_tmpl)this.context.pop();else this.context.push(types.q_tmpl);this.exprAllowed=false;};// Object type used to represent tokens. Note that normally, tokens
		// simply exist as properties on the parser object. This is only
		// used for the onToken callback and the external tokenizer.
		var Token=function Token(p){this.type=p.type;this.value=p.value;this.start=p.start;this.end=p.end;if(p.options.locations)this.loc=new SourceLocation(p,p.startLoc,p.endLoc);if(p.options.ranges)this.range=[p.start,p.end];};// ## Tokenizer
		var pp$7=Parser.prototype;// Are we running under Rhino?
		var isRhino=/*istanbul ignore next*/(typeof Packages==="undefined"?"undefined":(0,_typeof3.default)(Packages))=="object"&&Object.prototype.toString.call(Packages)=="[object JavaPackage]";// Move to the next token
		pp$7.next=function(){if(this.options.onToken)this.options.onToken(new Token(this));this.lastTokEnd=this.end;this.lastTokStart=this.start;this.lastTokEndLoc=this.endLoc;this.lastTokStartLoc=this.startLoc;this.nextToken();};pp$7.getToken=function(){this.next();return new Token(this);};// If we're in an ES6 environment, make parsers iterable
		if(typeof/*istanbul ignore next*/_symbol2.default!=="undefined")pp$7[/*istanbul ignore next*/_iterator2.default]=function(){var self=this;return{next:function/*istanbul ignore next*/next(){var token=self.getToken();return{done:token.type===tt.eof,value:token};}};};// Toggle strict mode. Re-reads the next number or string to please
		// pedantic tests (`"use strict"; 010;` should fail).
		pp$7.setStrict=function(strict){var this$1=this;this.strict=strict;if(this.type!==tt.num&&this.type!==tt.string)return;this.pos=this.start;if(this.options.locations){while(this.pos<this.lineStart){this$1.lineStart=this$1.input.lastIndexOf("\n",this$1.lineStart-2)+1;--this$1.curLine;}}this.nextToken();};pp$7.curContext=function(){return this.context[this.context.length-1];};// Read a single token, updating the parser object's token-related
		// properties.
		pp$7.nextToken=function(){var curContext=this.curContext();if(!curContext||!curContext.preserveSpace)this.skipSpace();this.start=this.pos;if(this.options.locations)this.startLoc=this.curPosition();if(this.pos>=this.input.length)return this.finishToken(tt.eof);if(curContext.override)return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());};pp$7.readToken=function(code){// Identifier or keyword. '\uXXXX' sequences are allowed in
		// identifiers, so '\' also dispatches to that.
		if(isIdentifierStart(code,this.options.ecmaVersion>=6)||code===92/* '\' */)return this.readWord();return this.getTokenFromCode(code);};pp$7.fullCharCodeAtPos=function(){var code=this.input.charCodeAt(this.pos);if(code<=0xd7ff||code>=0xe000)return code;var next=this.input.charCodeAt(this.pos+1);return(code<<10)+next-0x35fdc00;};pp$7.skipBlockComment=function(){var this$1=this;var startLoc=this.options.onComment&&this.curPosition();var start=this.pos,end=this.input.indexOf("*/",this.pos+=2);if(end===-1)this.raise(this.pos-2,"Unterminated comment");this.pos=end+2;if(this.options.locations){lineBreakG.lastIndex=start;var match;while((match=lineBreakG.exec(this.input))&&match.index<this.pos){++this$1.curLine;this$1.lineStart=match.index+match[0].length;}}if(this.options.onComment)this.options.onComment(true,this.input.slice(start+2,end),start,this.pos,startLoc,this.curPosition());};pp$7.skipLineComment=function(startSkip){var this$1=this;var start=this.pos;var startLoc=this.options.onComment&&this.curPosition();var ch=this.input.charCodeAt(this.pos+=startSkip);while(this.pos<this.input.length&&ch!==10&&ch!==13&&ch!==8232&&ch!==8233){++this$1.pos;ch=this$1.input.charCodeAt(this$1.pos);}if(this.options.onComment)this.options.onComment(false,this.input.slice(start+startSkip,this.pos),start,this.pos,startLoc,this.curPosition());};// Called at the start of the parse and after every token. Skips
		// whitespace and comments, and.
		pp$7.skipSpace=function(){var this$1=this;loop:while(this.pos<this.input.length){var ch=this$1.input.charCodeAt(this$1.pos);switch(ch){case 32:case 160:// ' '
		++this$1.pos;break;case 13:if(this$1.input.charCodeAt(this$1.pos+1)===10){++this$1.pos;}case 10:case 8232:case 8233:++this$1.pos;if(this$1.options.locations){++this$1.curLine;this$1.lineStart=this$1.pos;}break;case 47:// '/'
		switch(this$1.input.charCodeAt(this$1.pos+1)){case 42:// '*'
		this$1.skipBlockComment();break;case 47:this$1.skipLineComment(2);break;default:break loop;}break;default:if(ch>8&&ch<14||ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))){++this$1.pos;}else{break loop;}}}};// Called at the end of every token. Sets `end`, `val`, and
		// maintains `context` and `exprAllowed`, and skips the space after
		// the token, so that the next one's `start` will point at the
		// right position.
		pp$7.finishToken=function(type,val){this.end=this.pos;if(this.options.locations)this.endLoc=this.curPosition();var prevType=this.type;this.type=type;this.value=val;this.updateContext(prevType);};// ### Token reading
		// This is the function that is called to fetch the next token. It
		// is somewhat obscure, because it works in character codes rather
		// than characters, and because operator parsing has been inlined
		// into it.
		//
		// All in the name of speed.
		//
		pp$7.readToken_dot=function(){var next=this.input.charCodeAt(this.pos+1);if(next>=48&&next<=57)return this.readNumber(true);var next2=this.input.charCodeAt(this.pos+2);if(this.options.ecmaVersion>=6&&next===46&&next2===46){// 46 = dot '.'
		this.pos+=3;return this.finishToken(tt.ellipsis);}else{++this.pos;return this.finishToken(tt.dot);}};pp$7.readToken_slash=function(){// '/'
		var next=this.input.charCodeAt(this.pos+1);if(this.exprAllowed){++this.pos;return this.readRegexp();}if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(tt.slash,1);};pp$7.readToken_mult_modulo_exp=function(code){// '%*'
		var next=this.input.charCodeAt(this.pos+1);var size=1;var tokentype=code===42?tt.star:tt.modulo;// exponentiation operator ** and **=
		if(this.options.ecmaVersion>=7&&next===42){++size;tokentype=tt.starstar;next=this.input.charCodeAt(this.pos+2);}if(next===61)return this.finishOp(tt.assign,size+1);return this.finishOp(tokentype,size);};pp$7.readToken_pipe_amp=function(code){// '|&'
		var next=this.input.charCodeAt(this.pos+1);if(next===code)return this.finishOp(code===124?tt.logicalOR:tt.logicalAND,2);if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(code===124?tt.bitwiseOR:tt.bitwiseAND,1);};pp$7.readToken_caret=function(){// '^'
		var next=this.input.charCodeAt(this.pos+1);if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(tt.bitwiseXOR,1);};pp$7.readToken_plus_min=function(code){// '+-'
		var next=this.input.charCodeAt(this.pos+1);if(next===code){if(next==45&&this.input.charCodeAt(this.pos+2)==62&&lineBreak.test(this.input.slice(this.lastTokEnd,this.pos))){// A `-->` line comment
		this.skipLineComment(3);this.skipSpace();return this.nextToken();}return this.finishOp(tt.incDec,2);}if(next===61)return this.finishOp(tt.assign,2);return this.finishOp(tt.plusMin,1);};pp$7.readToken_lt_gt=function(code){// '<>'
		var next=this.input.charCodeAt(this.pos+1);var size=1;if(next===code){size=code===62&&this.input.charCodeAt(this.pos+2)===62?3:2;if(this.input.charCodeAt(this.pos+size)===61)return this.finishOp(tt.assign,size+1);return this.finishOp(tt.bitShift,size);}if(next==33&&code==60&&this.input.charCodeAt(this.pos+2)==45&&this.input.charCodeAt(this.pos+3)==45){if(this.inModule)this.unexpected();// `<!--`, an XML-style comment that should be interpreted as a line comment
		this.skipLineComment(4);this.skipSpace();return this.nextToken();}if(next===61)size=2;return this.finishOp(tt.relational,size);};pp$7.readToken_eq_excl=function(code){// '=!'
		var next=this.input.charCodeAt(this.pos+1);if(next===61)return this.finishOp(tt.equality,this.input.charCodeAt(this.pos+2)===61?3:2);if(code===61&&next===62&&this.options.ecmaVersion>=6){// '=>'
		this.pos+=2;return this.finishToken(tt.arrow);}return this.finishOp(code===61?tt.eq:tt.prefix,1);};pp$7.getTokenFromCode=function(code){switch(code){// The interpretation of a dot depends on whether it is followed
		// by a digit or another two dots.
		case 46:// '.'
		return this.readToken_dot();// Punctuation tokens.
		case 40:++this.pos;return this.finishToken(tt.parenL);case 41:++this.pos;return this.finishToken(tt.parenR);case 59:++this.pos;return this.finishToken(tt.semi);case 44:++this.pos;return this.finishToken(tt.comma);case 91:++this.pos;return this.finishToken(tt.bracketL);case 93:++this.pos;return this.finishToken(tt.bracketR);case 123:++this.pos;return this.finishToken(tt.braceL);case 125:++this.pos;return this.finishToken(tt.braceR);case 58:++this.pos;return this.finishToken(tt.colon);case 63:++this.pos;return this.finishToken(tt.question);case 96:// '`'
		if(this.options.ecmaVersion<6)break;++this.pos;return this.finishToken(tt.backQuote);case 48:// '0'
		var next=this.input.charCodeAt(this.pos+1);if(next===120||next===88)return this.readRadixNumber(16);// '0x', '0X' - hex number
		if(this.options.ecmaVersion>=6){if(next===111||next===79)return this.readRadixNumber(8);// '0o', '0O' - octal number
		if(next===98||next===66)return this.readRadixNumber(2);// '0b', '0B' - binary number
		}// Anything else beginning with a digit is an integer, octal
		// number, or float.
		case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:// 1-9
		return this.readNumber(false);// Quotes produce strings.
		case 34:case 39:// '"', "'"
		return this.readString(code);// Operators are parsed inline in tiny state machines. '=' (61) is
		// often referred to. `finishOp` simply skips the amount of
		// characters it is given as second argument, and returns a token
		// of the type given by its first argument.
		case 47:// '/'
		return this.readToken_slash();case 37:case 42:// '%*'
		return this.readToken_mult_modulo_exp(code);case 124:case 38:// '|&'
		return this.readToken_pipe_amp(code);case 94:// '^'
		return this.readToken_caret();case 43:case 45:// '+-'
		return this.readToken_plus_min(code);case 60:case 62:// '<>'
		return this.readToken_lt_gt(code);case 61:case 33:// '=!'
		return this.readToken_eq_excl(code);case 126:// '~'
		return this.finishOp(tt.prefix,1);}this.raise(this.pos,"Unexpected character '"+codePointToString(code)+"'");};pp$7.finishOp=function(type,size){var str=this.input.slice(this.pos,this.pos+size);this.pos+=size;return this.finishToken(type,str);};// Parse a regular expression. Some context-awareness is necessary,
		// since a '/' inside a '[]' set does not end the expression.
		function tryCreateRegexp(src,flags,throwErrorAt,parser){try{return new RegExp(src,flags);}catch(e){if(throwErrorAt!==undefined){if(e instanceof SyntaxError)parser.raise(throwErrorAt,"Error parsing regular expression: "+e.message);throw e;}}}var regexpUnicodeSupport=!!tryCreateRegexp("￿","u");pp$7.readRegexp=function(){var this$1=this;var escaped,inClass,start=this.pos;for(;;){if(this$1.pos>=this$1.input.length)this$1.raise(start,"Unterminated regular expression");var ch=this$1.input.charAt(this$1.pos);if(lineBreak.test(ch))this$1.raise(start,"Unterminated regular expression");if(!escaped){if(ch==="[")inClass=true;else if(ch==="]"&&inClass)inClass=false;else if(ch==="/"&&!inClass)break;escaped=ch==="\\";}else escaped=false;++this$1.pos;}var content=this.input.slice(start,this.pos);++this.pos;// Need to use `readWord1` because '\uXXXX' sequences are allowed
		// here (don't ask).
		var mods=this.readWord1();var tmp=content,tmpFlags="";if(mods){var validFlags=/^[gim]*$/;if(this.options.ecmaVersion>=6)validFlags=/^[gimuy]*$/;if(!validFlags.test(mods))this.raise(start,"Invalid regular expression flag");if(mods.indexOf("u")>=0){if(regexpUnicodeSupport){tmpFlags="u";}else{// Replace each astral symbol and every Unicode escape sequence that
		// possibly represents an astral symbol or a paired surrogate with a
		// single ASCII symbol to avoid throwing on regular expressions that
		// are only valid in combination with the `/u` flag.
		// Note: replacing with the ASCII symbol `x` might cause false
		// negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
		// perfectly valid pattern that is equivalent to `[a-b]`, but it would
		// be replaced by `[x-b]` which throws an error.
		tmp=tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g,function(_match,code,offset){code=Number("0x"+code);if(code>0x10FFFF)this$1.raise(start+offset+3,"Code point out of bounds");return"x";});tmp=tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"x");tmpFlags=tmpFlags.replace("u","");}}}// Detect invalid regular expressions.
		var value=null;// Rhino's regular expression parser is flaky and throws uncatchable exceptions,
		// so don't do detection if we are running under Rhino
		if(!isRhino){tryCreateRegexp(tmp,tmpFlags,start,this);// Get a regular expression object for this pattern-flag pair, or `null` in
		// case the current environment doesn't support the flags it uses.
		value=tryCreateRegexp(content,mods);}return this.finishToken(tt.regexp,{pattern:content,flags:mods,value:value});};// Read an integer in the given radix. Return null if zero digits
		// were read, the integer value otherwise. When `len` is given, this
		// will return `null` unless the integer has exactly `len` digits.
		pp$7.readInt=function(radix,len){var this$1=this;var start=this.pos,total=0;for(var i=0,e=len==null?Infinity:len;i<e;++i){var code=this$1.input.charCodeAt(this$1.pos),val;if(code>=97)val=code-97+10;// a
		else if(code>=65)val=code-65+10;// A
		else if(code>=48&&code<=57)val=code-48;// 0-9
		else val=Infinity;if(val>=radix)break;++this$1.pos;total=total*radix+val;}if(this.pos===start||len!=null&&this.pos-start!==len)return null;return total;};pp$7.readRadixNumber=function(radix){this.pos+=2;// 0x
		var val=this.readInt(radix);if(val==null)this.raise(this.start+2,"Expected number in radix "+radix);if(isIdentifierStart(this.fullCharCodeAtPos()))this.raise(this.pos,"Identifier directly after number");return this.finishToken(tt.num,val);};// Read an integer, octal integer, or floating-point number.
		pp$7.readNumber=function(startsWithDot){var start=this.pos,isFloat=false,octal=this.input.charCodeAt(this.pos)===48;if(!startsWithDot&&this.readInt(10)===null)this.raise(start,"Invalid number");var next=this.input.charCodeAt(this.pos);if(next===46){// '.'
		++this.pos;this.readInt(10);isFloat=true;next=this.input.charCodeAt(this.pos);}if(next===69||next===101){// 'eE'
		next=this.input.charCodeAt(++this.pos);if(next===43||next===45)++this.pos;// '+-'
		if(this.readInt(10)===null)this.raise(start,"Invalid number");isFloat=true;}if(isIdentifierStart(this.fullCharCodeAtPos()))this.raise(this.pos,"Identifier directly after number");var str=this.input.slice(start,this.pos),val;if(isFloat)val=parseFloat(str);else if(!octal||str.length===1)val=parseInt(str,10);else if(/[89]/.test(str)||this.strict)this.raise(start,"Invalid number");else val=parseInt(str,8);return this.finishToken(tt.num,val);};// Read a string value, interpreting backslash-escapes.
		pp$7.readCodePoint=function(){var ch=this.input.charCodeAt(this.pos),code;if(ch===123){if(this.options.ecmaVersion<6)this.unexpected();var codePos=++this.pos;code=this.readHexChar(this.input.indexOf('}',this.pos)-this.pos);++this.pos;if(code>0x10FFFF)this.raise(codePos,"Code point out of bounds");}else{code=this.readHexChar(4);}return code;};function codePointToString(code){// UTF-16 Decoding
		if(code<=0xFFFF)return String.fromCharCode(code);code-=0x10000;return String.fromCharCode((code>>10)+0xD800,(code&1023)+0xDC00);}pp$7.readString=function(quote){var this$1=this;var out="",chunkStart=++this.pos;for(;;){if(this$1.pos>=this$1.input.length)this$1.raise(this$1.start,"Unterminated string constant");var ch=this$1.input.charCodeAt(this$1.pos);if(ch===quote)break;if(ch===92){// '\'
		out+=this$1.input.slice(chunkStart,this$1.pos);out+=this$1.readEscapedChar(false);chunkStart=this$1.pos;}else{if(isNewLine(ch))this$1.raise(this$1.start,"Unterminated string constant");++this$1.pos;}}out+=this.input.slice(chunkStart,this.pos++);return this.finishToken(tt.string,out);};// Reads template string tokens.
		pp$7.readTmplToken=function(){var this$1=this;var out="",chunkStart=this.pos;for(;;){if(this$1.pos>=this$1.input.length)this$1.raise(this$1.start,"Unterminated template");var ch=this$1.input.charCodeAt(this$1.pos);if(ch===96||ch===36&&this$1.input.charCodeAt(this$1.pos+1)===123){// '`', '${'
		if(this$1.pos===this$1.start&&this$1.type===tt.template){if(ch===36){this$1.pos+=2;return this$1.finishToken(tt.dollarBraceL);}else{++this$1.pos;return this$1.finishToken(tt.backQuote);}}out+=this$1.input.slice(chunkStart,this$1.pos);return this$1.finishToken(tt.template,out);}if(ch===92){// '\'
		out+=this$1.input.slice(chunkStart,this$1.pos);out+=this$1.readEscapedChar(true);chunkStart=this$1.pos;}else if(isNewLine(ch)){out+=this$1.input.slice(chunkStart,this$1.pos);++this$1.pos;switch(ch){case 13:if(this$1.input.charCodeAt(this$1.pos)===10)++this$1.pos;case 10:out+="\n";break;default:out+=String.fromCharCode(ch);break;}if(this$1.options.locations){++this$1.curLine;this$1.lineStart=this$1.pos;}chunkStart=this$1.pos;}else{++this$1.pos;}}};// Used to read escaped characters
		pp$7.readEscapedChar=function(inTemplate){var ch=this.input.charCodeAt(++this.pos);++this.pos;switch(ch){case 110:return"\n";// 'n' -> '\n'
		case 114:return"\r";// 'r' -> '\r'
		case 120:return String.fromCharCode(this.readHexChar(2));// 'x'
		case 117:return codePointToString(this.readCodePoint());// 'u'
		case 116:return"\t";// 't' -> '\t'
		case 98:return"\b";// 'b' -> '\b'
		case 118:return"\u000b";// 'v' -> '\u000b'
		case 102:return"\f";// 'f' -> '\f'
		case 13:if(this.input.charCodeAt(this.pos)===10)++this.pos;// '\r\n'
		case 10:// ' \n'
		if(this.options.locations){this.lineStart=this.pos;++this.curLine;}return"";default:if(ch>=48&&ch<=55){var octalStr=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0];var octal=parseInt(octalStr,8);if(octal>255){octalStr=octalStr.slice(0,-1);octal=parseInt(octalStr,8);}if(octalStr!=="0"&&(this.strict||inTemplate)){this.raise(this.pos-2,"Octal literal in strict mode");}this.pos+=octalStr.length-1;return String.fromCharCode(octal);}return String.fromCharCode(ch);}};// Used to read character escape sequences ('\x', '\u', '\U').
		pp$7.readHexChar=function(len){var codePos=this.pos;var n=this.readInt(16,len);if(n===null)this.raise(codePos,"Bad character escape sequence");return n;};// Read an identifier, and return it as a string. Sets `this.containsEsc`
		// to whether the word contained a '\u' escape.
		//
		// Incrementally adds only escaped chars, adding other chunks as-is
		// as a micro-optimization.
		pp$7.readWord1=function(){var this$1=this;this.containsEsc=false;var word="",first=true,chunkStart=this.pos;var astral=this.options.ecmaVersion>=6;while(this.pos<this.input.length){var ch=this$1.fullCharCodeAtPos();if(isIdentifierChar(ch,astral)){this$1.pos+=ch<=0xffff?1:2;}else if(ch===92){// "\"
		this$1.containsEsc=true;word+=this$1.input.slice(chunkStart,this$1.pos);var escStart=this$1.pos;if(this$1.input.charCodeAt(++this$1.pos)!=117)// "u"
		this$1.raise(this$1.pos,"Expecting Unicode escape sequence \\uXXXX");++this$1.pos;var esc=this$1.readCodePoint();if(!(first?isIdentifierStart:isIdentifierChar)(esc,astral))this$1.raise(escStart,"Invalid Unicode escape");word+=codePointToString(esc);chunkStart=this$1.pos;}else{break;}first=false;}return word+this.input.slice(chunkStart,this.pos);};// Read an identifier or keyword token. Will check for reserved
		// words when necessary.
		pp$7.readWord=function(){var word=this.readWord1();var type=tt.name;if((this.options.ecmaVersion>=6||!this.containsEsc)&&this.keywords.test(word))type=keywordTypes[word];return this.finishToken(type,word);};var version="3.3.0";// The main exported interface (under `self.acorn` when in the
		// browser) is a `parse` function that takes a code string and
		// returns an abstract syntax tree as specified by [Mozilla parser
		// API][api].
		//
		// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
		function parse(input,options){return new Parser(options,input).parse();}// This function tries to parse a single expression at a given
		// offset in a string. Useful for parsing mixed-language formats
		// that embed JavaScript expressions.
		function parseExpressionAt(input,pos,options){var p=new Parser(options,input,pos);p.nextToken();return p.parseExpression();}// Acorn is organized as a tokenizer and a recursive-descent parser.
		// The `tokenizer` export provides an interface to the tokenizer.
		function tokenizer(input,options){return new Parser(options,input);}/*istanbul ignore next*/exports.version=version;/*istanbul ignore next*/exports.parse=parse;/*istanbul ignore next*/exports.parseExpressionAt=parseExpressionAt;/*istanbul ignore next*/exports.tokenizer=tokenizer;/*istanbul ignore next*/exports.Parser=Parser;/*istanbul ignore next*/exports.plugins=plugins;/*istanbul ignore next*/exports.defaultOptions=defaultOptions;/*istanbul ignore next*/exports.Position=Position;/*istanbul ignore next*/exports.SourceLocation=SourceLocation;/*istanbul ignore next*/exports.getLineInfo=getLineInfo;/*istanbul ignore next*/exports.Node=Node;/*istanbul ignore next*/exports.TokenType=TokenType;/*istanbul ignore next*/exports.tokTypes=tt;/*istanbul ignore next*/exports.TokContext=TokContext;/*istanbul ignore next*/exports.tokContexts=types;/*istanbul ignore next*/exports.isIdentifierChar=isIdentifierChar;/*istanbul ignore next*/exports.isIdentifierStart=isIdentifierStart;/*istanbul ignore next*/exports.Token=Token;/*istanbul ignore next*/exports.isNewLine=isNewLine;/*istanbul ignore next*/exports.lineBreak=lineBreak;/*istanbul ignore next*/exports.lineBreakG=lineBreakG;
	
	/***/ },
	/* 122 */
	/***/ function(module, exports, __webpack_require__) {
	
		(function webpackUniversalModuleDefinition(root, factory) {
			if(true)
				module.exports = factory();
			else if(typeof define === 'function' && define.amd)
				define("stack-es2015-modules", [], factory);
			else if(typeof exports === 'object')
				exports["stack-es2015-modules"] = factory();
			else
				root["stack-es2015-modules"] = factory();
		})(this, function() {
		return /******/ (function(modules) { // webpackBootstrap
		/******/ 	// The module cache
		/******/ 	var installedModules = {};
		/******/
		/******/ 	// The require function
		/******/ 	function __webpack_require__(moduleId) {
		/******/
		/******/ 		// Check if module is in cache
		/******/ 		if(installedModules[moduleId])
		/******/ 			return installedModules[moduleId].exports;
		/******/
		/******/ 		// Create a new module (and put it into the cache)
		/******/ 		var module = installedModules[moduleId] = {
		/******/ 			exports: {},
		/******/ 			id: moduleId,
		/******/ 			loaded: false
		/******/ 		};
		/******/
		/******/ 		// Execute the module function
		/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ 		// Flag the module as loaded
		/******/ 		module.loaded = true;
		/******/
		/******/ 		// Return the exports of the module
		/******/ 		return module.exports;
		/******/ 	}
		/******/
		/******/
		/******/ 	// expose the modules object (__webpack_modules__)
		/******/ 	__webpack_require__.m = modules;
		/******/
		/******/ 	// expose the module cache
		/******/ 	__webpack_require__.c = installedModules;
		/******/
		/******/ 	// __webpack_public_path__
		/******/ 	__webpack_require__.p = "";
		/******/
		/******/ 	// Load entry module and return exports
		/******/ 	return __webpack_require__(0);
		/******/ })
		/************************************************************************/
		/******/ ([
		/* 0 */
		/***/ function(module, exports, __webpack_require__) {
		
			/*istanbul ignore next*/"use strict";
			
			Object.defineProperty(exports, "__esModule", {
			    value: true
			});
			
			var _classCallCheck2 = __webpack_require__(1);
			
			var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
			
			var _createClass2 = __webpack_require__(2);
			
			var _createClass3 = _interopRequireDefault(_createClass2);
			
			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
			
			var Stack = function () {
			    function /*istanbul ignore next*/Stack() {
			        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Stack);
			
			        this.arr = [];
			    }
			
			    (0, _createClass3.default)(Stack, [{
			        key: "push",
			        value: function push(el) {
			            this.arr.push(el);
			        }
			    }, {
			        key: "pop",
			        value: function pop() {
			            this.arr.length--;
			        }
			    }, {
			        key: "top",
			        value: function top() {
			            // TODO: .last() not defined in older node versions
			            // return this.arr.last();
			            return this.arr[this.arr.length - 1];
			        }
			    }, {
			        key: "withElement",
			        value: function withElement(el, callback, context) {
			            this.push(el);
			            try {
			                callback.call(context);
			            } finally {
			                this.pop();
			            }
			        }
			    }]);
			    return Stack;
			}();
			
			/*istanbul ignore next*/exports.default = Stack;
		
		/***/ },
		/* 1 */
		/***/ function(module, exports) {
		
			"use strict";
			
			exports.__esModule = true;
			
			exports.default = function (instance, Constructor) {
			  if (!(instance instanceof Constructor)) {
			    throw new TypeError("Cannot call a class as a function");
			  }
			};
		
		/***/ },
		/* 2 */
		/***/ function(module, exports, __webpack_require__) {
		
			"use strict";
			
			exports.__esModule = true;
			
			var _defineProperty = __webpack_require__(3);
			
			var _defineProperty2 = _interopRequireDefault(_defineProperty);
			
			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
			
			exports.default = function () {
			  function defineProperties(target, props) {
			    for (var i = 0; i < props.length; i++) {
			      var descriptor = props[i];
			      descriptor.enumerable = descriptor.enumerable || false;
			      descriptor.configurable = true;
			      if ("value" in descriptor) descriptor.writable = true;
			      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
			    }
			  }
			
			  return function (Constructor, protoProps, staticProps) {
			    if (protoProps) defineProperties(Constructor.prototype, protoProps);
			    if (staticProps) defineProperties(Constructor, staticProps);
			    return Constructor;
			  };
			}();
		
		/***/ },
		/* 3 */
		/***/ function(module, exports, __webpack_require__) {
		
			module.exports = { "default": __webpack_require__(4), __esModule: true };
		
		/***/ },
		/* 4 */
		/***/ function(module, exports, __webpack_require__) {
		
			__webpack_require__(5);
			var $Object = __webpack_require__(8).Object;
			module.exports = function defineProperty(it, key, desc){
			  return $Object.defineProperty(it, key, desc);
			};
		
		/***/ },
		/* 5 */
		/***/ function(module, exports, __webpack_require__) {
		
			var $export = __webpack_require__(6);
			// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
			$export($export.S + $export.F * !__webpack_require__(16), 'Object', {defineProperty: __webpack_require__(12).f});
		
		/***/ },
		/* 6 */
		/***/ function(module, exports, __webpack_require__) {
		
			var global    = __webpack_require__(7)
			  , core      = __webpack_require__(8)
			  , ctx       = __webpack_require__(9)
			  , hide      = __webpack_require__(11)
			  , PROTOTYPE = 'prototype';
			
			var $export = function(type, name, source){
			  var IS_FORCED = type & $export.F
			    , IS_GLOBAL = type & $export.G
			    , IS_STATIC = type & $export.S
			    , IS_PROTO  = type & $export.P
			    , IS_BIND   = type & $export.B
			    , IS_WRAP   = type & $export.W
			    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
			    , expProto  = exports[PROTOTYPE]
			    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
			    , key, own, out;
			  if(IS_GLOBAL)source = name;
			  for(key in source){
			    // contains in native
			    own = !IS_FORCED && target && target[key] !== undefined;
			    if(own && key in exports)continue;
			    // export native or passed
			    out = own ? target[key] : source[key];
			    // prevent global pollution for namespaces
			    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
			    // bind timers to global for call from export context
			    : IS_BIND && own ? ctx(out, global)
			    // wrap global constructors for prevent change them in library
			    : IS_WRAP && target[key] == out ? (function(C){
			      var F = function(a, b, c){
			        if(this instanceof C){
			          switch(arguments.length){
			            case 0: return new C;
			            case 1: return new C(a);
			            case 2: return new C(a, b);
			          } return new C(a, b, c);
			        } return C.apply(this, arguments);
			      };
			      F[PROTOTYPE] = C[PROTOTYPE];
			      return F;
			    // make static versions for prototype methods
			    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
			    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
			    if(IS_PROTO){
			      (exports.virtual || (exports.virtual = {}))[key] = out;
			      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
			      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
			    }
			  }
			};
			// type bitmap
			$export.F = 1;   // forced
			$export.G = 2;   // global
			$export.S = 4;   // static
			$export.P = 8;   // proto
			$export.B = 16;  // bind
			$export.W = 32;  // wrap
			$export.U = 64;  // safe
			$export.R = 128; // real proto method for `library` 
			module.exports = $export;
		
		/***/ },
		/* 7 */
		/***/ function(module, exports) {
		
			// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
			var global = module.exports = typeof window != 'undefined' && window.Math == Math
			  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
			if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
		
		/***/ },
		/* 8 */
		/***/ function(module, exports) {
		
			var core = module.exports = {version: '2.4.0'};
			if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
		
		/***/ },
		/* 9 */
		/***/ function(module, exports, __webpack_require__) {
		
			// optional / simple context binding
			var aFunction = __webpack_require__(10);
			module.exports = function(fn, that, length){
			  aFunction(fn);
			  if(that === undefined)return fn;
			  switch(length){
			    case 1: return function(a){
			      return fn.call(that, a);
			    };
			    case 2: return function(a, b){
			      return fn.call(that, a, b);
			    };
			    case 3: return function(a, b, c){
			      return fn.call(that, a, b, c);
			    };
			  }
			  return function(/* ...args */){
			    return fn.apply(that, arguments);
			  };
			};
		
		/***/ },
		/* 10 */
		/***/ function(module, exports) {
		
			module.exports = function(it){
			  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
			  return it;
			};
		
		/***/ },
		/* 11 */
		/***/ function(module, exports, __webpack_require__) {
		
			var dP         = __webpack_require__(12)
			  , createDesc = __webpack_require__(20);
			module.exports = __webpack_require__(16) ? function(object, key, value){
			  return dP.f(object, key, createDesc(1, value));
			} : function(object, key, value){
			  object[key] = value;
			  return object;
			};
		
		/***/ },
		/* 12 */
		/***/ function(module, exports, __webpack_require__) {
		
			var anObject       = __webpack_require__(13)
			  , IE8_DOM_DEFINE = __webpack_require__(15)
			  , toPrimitive    = __webpack_require__(19)
			  , dP             = Object.defineProperty;
			
			exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes){
			  anObject(O);
			  P = toPrimitive(P, true);
			  anObject(Attributes);
			  if(IE8_DOM_DEFINE)try {
			    return dP(O, P, Attributes);
			  } catch(e){ /* empty */ }
			  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
			  if('value' in Attributes)O[P] = Attributes.value;
			  return O;
			};
		
		/***/ },
		/* 13 */
		/***/ function(module, exports, __webpack_require__) {
		
			var isObject = __webpack_require__(14);
			module.exports = function(it){
			  if(!isObject(it))throw TypeError(it + ' is not an object!');
			  return it;
			};
		
		/***/ },
		/* 14 */
		/***/ function(module, exports) {
		
			module.exports = function(it){
			  return typeof it === 'object' ? it !== null : typeof it === 'function';
			};
		
		/***/ },
		/* 15 */
		/***/ function(module, exports, __webpack_require__) {
		
			module.exports = !__webpack_require__(16) && !__webpack_require__(17)(function(){
			  return Object.defineProperty(__webpack_require__(18)('div'), 'a', {get: function(){ return 7; }}).a != 7;
			});
		
		/***/ },
		/* 16 */
		/***/ function(module, exports, __webpack_require__) {
		
			// Thank's IE8 for his funny defineProperty
			module.exports = !__webpack_require__(17)(function(){
			  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
			});
		
		/***/ },
		/* 17 */
		/***/ function(module, exports) {
		
			module.exports = function(exec){
			  try {
			    return !!exec();
			  } catch(e){
			    return true;
			  }
			};
		
		/***/ },
		/* 18 */
		/***/ function(module, exports, __webpack_require__) {
		
			var isObject = __webpack_require__(14)
			  , document = __webpack_require__(7).document
			  // in old IE typeof document.createElement is 'object'
			  , is = isObject(document) && isObject(document.createElement);
			module.exports = function(it){
			  return is ? document.createElement(it) : {};
			};
		
		/***/ },
		/* 19 */
		/***/ function(module, exports, __webpack_require__) {
		
			// 7.1.1 ToPrimitive(input [, PreferredType])
			var isObject = __webpack_require__(14);
			// instead of the ES6 spec version, we didn't implement @@toPrimitive case
			// and the second argument - flag - preferred type is a string
			module.exports = function(it, S){
			  if(!isObject(it))return it;
			  var fn, val;
			  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
			  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
			  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
			  throw TypeError("Can't convert object to primitive value");
			};
		
		/***/ },
		/* 20 */
		/***/ function(module, exports) {
		
			module.exports = function(bitmap, value){
			  return {
			    enumerable  : !(bitmap & 1),
			    configurable: !(bitmap & 2),
			    writable    : !(bitmap & 4),
			    value       : value
			  };
			};
		
		/***/ }
		/******/ ])
		});
		;
		//# sourceMappingURL=data:application/json;charset=utf-8;base64,
	
	/***/ },
	/* 123 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.Listener = undefined;
		
		var _set = __webpack_require__(47);
		
		var _set2 = _interopRequireDefault(_set);
		
		var _classCallCheck2 = __webpack_require__(113);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		var _createClass2 = __webpack_require__(85);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		var _map = __webpack_require__(117);
		
		var _map2 = _interopRequireDefault(_map);
		
		var /*istanbul ignore next*/_propertyAccessor = __webpack_require__(124);
		
		var /*istanbul ignore next*/_utils = __webpack_require__(125);
		
		/*istanbul ignore next*/function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var LISTENERS_BY_ACCESSOR = new /*istanbul ignore next*/_map2.default();
		
		/*istanbul ignore next*/var Listener = exports.Listener = function () {
		    function /*istanbul ignore next*/Listener(obj, propName) {
		        /*istanbul ignore next*/var _this = this;
		
		        (0, _classCallCheck3.default)(this, Listener);
		
		        this.selectionItems = new /*istanbul ignore next*/_set2.default();
		
		        this.propertyAccessor = new /*istanbul ignore next*/_propertyAccessor.PropertyAccessor(obj, propName);
		        this.propertyAccessor.setterCallback(function (newValue) /*istanbul ignore next*/{
		            return (/*istanbul ignore next*/_this.newValueSet(newValue)
		            );
		        });
		    }
		
		    (0, _createClass3.default)(Listener, [{
		        key: 'addHandler',
		        value: function addHandler(selectionItem) {
		            this.selectionItems.add(selectionItem);
		            selectionItem.propertyAccessors.add(this);
		        }
		    }, {
		        key: 'newValueSet',
		        value: function newValueSet(newValue) {
		            if (! /*istanbul ignore next*/(0, _utils.isPrimitive)(newValue)) {
		                this.recalculate();
		            }
		
		            this.applyCallbacks();
		        }
		    }, {
		        key: 'applyCallbacks',
		        value: function applyCallbacks() {
		            this.selectionItems.forEach(function (selectionItem) {
		                selectionItem.propertyAssigned();
		            });
		        }
		    }, {
		        key: 'recalculate',
		        value: function recalculate() {
		            console.log('should recalculate');
		
		            var selectionItems = [];
		            this.selectionItems.forEach(function (selectionItem) {
		                selectionItems.push(selectionItem);
		            });
		
		            selectionItems.forEach(function (selectionItem) {
		                selectionItem.removeListeners();
		            });
		            selectionItems.forEach(function (selectionItem) {
		                selectionItem.installListeners();
		            });
		        }
		    }], [{
		        key: 'watchProperty',
		        value: function watchProperty(obj, propName) {
		            var mapObj;
		            if (LISTENERS_BY_ACCESSOR.has(obj)) {
		                mapObj = LISTENERS_BY_ACCESSOR.get(obj);
		            } else {
		                mapObj = {};
		                LISTENERS_BY_ACCESSOR.set(obj, mapObj);
		            }
		
		            if (!mapObj.hasOwnProperty(propName)) {
		                mapObj[propName] = new Listener(obj, propName);
		            }
		
		            return mapObj[propName];
		        }
		    }]);
		    return Listener;
		}();
	
	/***/ },
	/* 124 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.PropertyAccessor = undefined;
		
		var _classCallCheck2 = __webpack_require__(113);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		var _createClass2 = __webpack_require__(85);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var PROPERTY_ACCESSOR_NAME = 'wrappedValue';
		
		/*istanbul ignore next*/var PropertyAccessor = exports.PropertyAccessor = function () {
		    function /*istanbul ignore next*/PropertyAccessor(obj, propName) {
		        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, PropertyAccessor);
		
		        this.safeOldAccessors(obj, propName);
		
		        try {
		            obj.__defineGetter__(propName, function () {
		                if (propName === 'prop') debugger;
		                obj;
		                return this[PROPERTY_ACCESSOR_NAME];
		            }.bind(this));
		        } catch (e) {/* Firefox raises for Array.length */}
		        var newGetter = obj.__lookupGetter__(propName);
		        if (!newGetter) {
		            // Chrome silently ignores __defineGetter__ for Array.length
		            this.externalVariables(solver, null);
		            return;
		        }
		
		        obj.__defineSetter__(propName, function (newValue) {
		            var returnValue = this[PROPERTY_ACCESSOR_NAME] = newValue;
		            console.log('newValue for', obj, propName, newValue);
		            this.setPropertyWith(newValue);
		            return returnValue;
		        }.bind(this));
		    }
		
		    (0, _createClass3.default)(PropertyAccessor, [{
		        key: 'safeOldAccessors',
		        value: function safeOldAccessors(obj, propName) {
		            // take existing getter, if existent, and assign to
		            var existingSetter = obj.__lookupSetter__(propName),
		                existingGetter = obj.__lookupGetter__(propName);
		            if (existingGetter && existingSetter) {
		                this.__defineGetter__(PROPERTY_ACCESSOR_NAME, existingGetter);
		                this.__defineSetter__(PROPERTY_ACCESSOR_NAME, existingSetter);
		            }
		
		            // assign old value to new slot
		            if (!existingGetter && !existingSetter && obj.hasOwnProperty(propName)) {
		                this[PROPERTY_ACCESSOR_NAME] = obj[propName];
		            }
		        }
		    }, {
		        key: 'setterCallback',
		        value: function setterCallback(callback) {
		            this.callbackForSetProperty = callback;
		        }
		    }, {
		        key: 'setPropertyWith',
		        value: function setPropertyWith(newValue) {
		            this.callbackForSetProperty && this.callbackForSetProperty(newValue);
		        }
		    }]);
		    return PropertyAccessor;
		}();
	
	/***/ },
	/* 125 */
	/***/ function(module, exports) {
	
		/*istanbul ignore next*/'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.pushIfMissing = pushIfMissing;
		/*istanbul ignore next*/exports.removeIfExisting = removeIfExisting;
		/*istanbul ignore next*/exports.isPrimitive = isPrimitive;
		/*istanbul ignore next*/exports.identity = identity;
		// TODO this is a copy from reactive object queries repository (not completely anymore)
		// TODO extract this into its own library
		
		function pushIfMissing(array, item) {
		    // check for already existing.
		    var exists = false;
		    var len = array.length;
		    for (var i = 0; i < len; i++) /*istanbul ignore next*/{
		        if (array[i] == item) {
		            exists = true;
		            break;
		        }
		    } // do not add an already existing item
		    if (!exists) {
		        array.push(item);
		    }
		
		    // return true if the given element was pushed, otherwise false
		    return !exists;
		}
		
		function removeIfExisting(array, item) {
		    var index = array.indexOf(item);
		    if (index !== -1) {
		        array.splice(index, 1);
		        // return true if the given element was actually removed
		        return true;
		    }
		    return false;
		}
		
		function isPrimitive(elem) {
		    var getType = function getType(elem) {
		        return Object.prototype.toString.call(elem).slice(8, -1);
		    };
		
		    var type = getType(elem);
		
		    return type === 'String' || type === 'RegExp' || type === 'Boolean' || type === 'Number' || type === 'Null' || type === 'Undefined';
		}
		
		function identity(x) {
		    return x;
		}
	
	/***/ },
	/* 126 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.BaseActiveExpression = undefined;
		
		var _classCallCheck2 = __webpack_require__(113);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		var _createClass2 = __webpack_require__(85);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var BaseActiveExpression = exports.BaseActiveExpression = function () {
		
		    /**
		     *
		     * @param func (Function) the expression to be observed
		     */
		    function /*istanbul ignore next*/BaseActiveExpression(func) {
		        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, BaseActiveExpression);
		
		        // console.log(func);
		        this.func = func;
		        this.lastValue = this.getCurrentValue();
		        this.callbacks = [];
		    }
		
		    /**
		     * aliases with 'now'
		     * @returns {*} the current value of the expression
		     */
		
		
		    (0, _createClass3.default)(BaseActiveExpression, [{
		        key: 'getCurrentValue',
		        value: function getCurrentValue() {
		            return this.func();
		        }
		    }, {
		        key: 'onChange',
		        value: function onChange(callback) {
		            this.callbacks.push(callback);
		
		            return this;
		        }
		    }, {
		        key: 'checkAndNotify',
		        value: function checkAndNotify() {
		            var currentValue = this.getCurrentValue();
		            if (this.lastValue === currentValue) {
		                return;
		            }
		
		            var lastValue = this.lastValue;
		            this.lastValue = currentValue;
		
		            this.notify(currentValue, {
		                lastValue: lastValue
		            });
		        }
		    }, {
		        key: 'notify',
		        value: function notify() {
		            /*istanbul ignore next*/for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		                args[_key] = arguments[_key];
		            }
		
		            this.callbacks.forEach(function (callback) /*istanbul ignore next*/{
		                return (/*istanbul ignore next*/callback.apply( /*istanbul ignore next*/undefined, args)
		                );
		            });
		        }
		
		        /**
		         * TODO
		         * like a bind for AExpr
		         * @param items
		         */
		
		    }, {
		        key: 'applyOn',
		        value: function applyOn() {
		            throw new Error('Not yet implemented');
		        }
		    }]);
		    return BaseActiveExpression;
		}();
		
		/*istanbul ignore next*/exports.default = BaseActiveExpression;
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("stack-es2015-modules", [], factory);
		else if(typeof exports === 'object')
			exports["stack-es2015-modules"] = factory();
		else
			root["stack-es2015-modules"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*istanbul ignore next*/"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _classCallCheck2 = __webpack_require__(1);
		
		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
		
		var _createClass2 = __webpack_require__(2);
		
		var _createClass3 = _interopRequireDefault(_createClass2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var Stack = function () {
		    function /*istanbul ignore next*/Stack() {
		        /*istanbul ignore next*/(0, _classCallCheck3.default)(this, Stack);
		
		        this.arr = [];
		    }
		
		    (0, _createClass3.default)(Stack, [{
		        key: "push",
		        value: function push(el) {
		            this.arr.push(el);
		        }
		    }, {
		        key: "pop",
		        value: function pop() {
		            this.arr.length--;
		        }
		    }, {
		        key: "top",
		        value: function top() {
		            // TODO: .last() not defined in older node versions
		            // return this.arr.last();
		            return this.arr[this.arr.length - 1];
		        }
		    }, {
		        key: "withElement",
		        value: function withElement(el, callback, context) {
		            this.push(el);
		            try {
		                callback.call(context);
		            } finally {
		                this.pop();
		            }
		        }
		    }]);
		    return Stack;
		}();
		
		/*istanbul ignore next*/exports.default = Stack;
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		"use strict";
		
		exports.__esModule = true;
		
		exports.default = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _defineProperty = __webpack_require__(3);
		
		var _defineProperty2 = _interopRequireDefault(_defineProperty);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = function () {
		  function defineProperties(target, props) {
		    for (var i = 0; i < props.length; i++) {
		      var descriptor = props[i];
		      descriptor.enumerable = descriptor.enumerable || false;
		      descriptor.configurable = true;
		      if ("value" in descriptor) descriptor.writable = true;
		      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
		    }
		  }
		
		  return function (Constructor, protoProps, staticProps) {
		    if (protoProps) defineProperties(Constructor.prototype, protoProps);
		    if (staticProps) defineProperties(Constructor, staticProps);
		    return Constructor;
		  };
		}();
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(4), __esModule: true };
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(5);
		var $Object = __webpack_require__(8).Object;
		module.exports = function defineProperty(it, key, desc){
		  return $Object.defineProperty(it, key, desc);
		};
	
	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		var $export = __webpack_require__(6);
		// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
		$export($export.S + $export.F * !__webpack_require__(16), 'Object', {defineProperty: __webpack_require__(12).f});
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global    = __webpack_require__(7)
		  , core      = __webpack_require__(8)
		  , ctx       = __webpack_require__(9)
		  , hide      = __webpack_require__(11)
		  , PROTOTYPE = 'prototype';
		
		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , expProto  = exports[PROTOTYPE]
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && target[key] !== undefined;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(a, b, c){
		        if(this instanceof C){
		          switch(arguments.length){
		            case 0: return new C;
		            case 1: return new C(a);
		            case 2: return new C(a, b);
		          } return new C(a, b, c);
		        } return C.apply(this, arguments);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
		    if(IS_PROTO){
		      (exports.virtual || (exports.virtual = {}))[key] = out;
		      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
		      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
		    }
		  }
		};
		// type bitmap
		$export.F = 1;   // forced
		$export.G = 2;   // global
		$export.S = 4;   // static
		$export.P = 8;   // proto
		$export.B = 16;  // bind
		$export.W = 32;  // wrap
		$export.U = 64;  // safe
		$export.R = 128; // real proto method for `library` 
		module.exports = $export;
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		var core = module.exports = {version: '2.4.0'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		// optional / simple context binding
		var aFunction = __webpack_require__(10);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};
	
	/***/ },
	/* 10 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		var dP         = __webpack_require__(12)
		  , createDesc = __webpack_require__(20);
		module.exports = __webpack_require__(16) ? function(object, key, value){
		  return dP.f(object, key, createDesc(1, value));
		} : function(object, key, value){
		  object[key] = value;
		  return object;
		};
	
	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
	
		var anObject       = __webpack_require__(13)
		  , IE8_DOM_DEFINE = __webpack_require__(15)
		  , toPrimitive    = __webpack_require__(19)
		  , dP             = Object.defineProperty;
		
		exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes){
		  anObject(O);
		  P = toPrimitive(P, true);
		  anObject(Attributes);
		  if(IE8_DOM_DEFINE)try {
		    return dP(O, P, Attributes);
		  } catch(e){ /* empty */ }
		  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
		  if('value' in Attributes)O[P] = Attributes.value;
		  return O;
		};
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(14);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = !__webpack_require__(16) && !__webpack_require__(17)(function(){
		  return Object.defineProperty(__webpack_require__(18)('div'), 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Thank's IE8 for his funny defineProperty
		module.exports = !__webpack_require__(17)(function(){
		  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(14)
		  , document = __webpack_require__(7).document
		  // in old IE typeof document.createElement is 'object'
		  , is = isObject(document) && isObject(document.createElement);
		module.exports = function(it){
		  return is ? document.createElement(it) : {};
		};
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.1.1 ToPrimitive(input [, PreferredType])
		var isObject = __webpack_require__(14);
		// instead of the ES6 spec version, we didn't implement @@toPrimitive case
		// and the second argument - flag - preferred type is a string
		module.exports = function(it, S){
		  if(!isObject(it))return it;
		  var fn, val;
		  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
		  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
		  throw TypeError("Can't convert object to primitive value");
		};
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		module.exports = function(bitmap, value){
		  return {
		    enumerable  : !(bitmap & 1),
		    configurable: !(bitmap & 2),
		    writable    : !(bitmap & 4),
		    value       : value
		  };
		};
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBmYTA2ODU4YzBhNWNlOWM0NTZlZiIsIndlYnBhY2s6Ly8vLi9zcmMvYWV4cHItc291cmNlLXRyYW5zZm9ybWF0aW9uLXByb3BhZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vbWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2FjdGl2ZS1leHByZXNzaW9ucy9kaXN0L2FjdGl2ZS1leHByZXNzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3N0YWNrLWVzMjAxNS1tb2R1bGVzL2Rpc3Qvc3RhY2stZXMyMDE1LW1vZHVsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87QUNWQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NDbUNnQixLLEdBQUEsSztpQ0FLQSxTLEdBQUEsUztpQ0FTQSxnQixHQUFBLGdCO2lDQVNBLFMsR0FBQSxTOztBQWhHaEI7O0FBQ0E7Ozs7OztBQUVBLEtBQUkseUJBQXlCLEtBQTdCOzs2QkFF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QUVBLFFBQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxRQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLHVFQUFzRSxnQkFBZ0IsVUFBVSxHQUFHO0FBQ25HLEdBQUU7O0FBRUYsUUFBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFrQyxRQUFRLGdCQUFnQixVQUFVLEdBQUc7QUFDdkUsR0FBRTs7QUFFRixRQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLFFBQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQSw0Q0FBMkMsY0FBYywyaHJCIiwiZmlsZSI6ImFleHByLXNvdXJjZS10cmFuc2Zvcm1hdGlvbi1wcm9wYWdhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiYWV4cHItc291cmNlLXRyYW5zZm9ybWF0aW9uLXByb3BhZ2F0aW9uXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFleHByLXNvdXJjZS10cmFuc2Zvcm1hdGlvbi1wcm9wYWdhdGlvblwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhZXhwci1zb3VyY2UtdHJhbnNmb3JtYXRpb24tcHJvcGFnYXRpb25cIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb25cbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIGZhMDY4NThjMGE1Y2U5YzQ1NmVmXG4gKiovIiwiaW1wb3J0IHsgQmFzZUFjdGl2ZUV4cHJlc3Npb24gfSBmcm9tICdhY3RpdmUtZXhwcmVzc2lvbnMnO1xyXG5pbXBvcnQgU3RhY2sgZnJvbSAnc3RhY2stZXMyMDE1LW1vZHVsZXMnO1xyXG5cclxubGV0IGV4cHJlc3Npb25BbmFseXNpc01vZGUgPSBmYWxzZTtcclxuXHJcbmNsYXNzIEV4cHJlc3Npb25BbmFseXNpcyB7XHJcbiAgICAvLyBEbyB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uIGluIEV4cHJlc3Npb25BbmFseXNpc01vZGVcclxuICAgIHN0YXRpYyBjaGVjayhhZXhwcikge1xyXG4gICAgICAgIGFleHByU3RhY2sud2l0aEVsZW1lbnQoYWV4cHIsICgpID0+IHtcclxuICAgICAgICAgICAgLy8gVE9ETzogcHJvdmlkZSBBUEkgZm9yIHJ1bm5pbmcgdGhlIGV4cHJlc3Npb24gYW5kIHJldHVybmluZyBpdHMgdmFsdWUsIHJhdGhlciB0aGF0IHJlbHlpbmcgb24gdGhlIGluc3RhbmNlIHByb3BlcnR5IGRpcmVjdGx5XHJcbiAgICAgICAgICAgIGFleHByLmZ1bmMoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gVE9ETzogQ29tcG9zaXRlS2V5U3RvcmUgYXMgc2VwYXJhdGUgTW9kdWxlXHJcbmNvbnN0IGNvbXBvc2l0ZUtleVN0b3JlID0gbmV3IE1hcCgpO1xyXG5jbGFzcyBDb21wb3NpdGVLZXkge1xyXG4gICAgc3RhdGljIGdldChvYmoxLCBvYmoyKSB7XHJcbiAgICAgICAgaWYoIWNvbXBvc2l0ZUtleVN0b3JlLmhhcyhvYmoxKSkge1xyXG4gICAgICAgICAgICBjb21wb3NpdGVLZXlTdG9yZS5zZXQob2JqMSwgbmV3IE1hcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzZWNvbmRLZXlNYXAgPSBjb21wb3NpdGVLZXlTdG9yZS5nZXQob2JqMSk7XHJcblxyXG4gICAgICAgIGlmKCFzZWNvbmRLZXlNYXAuaGFzKG9iajIpKSB7XHJcbiAgICAgICAgICAgIHNlY29uZEtleU1hcC5zZXQob2JqMiwge30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNlY29uZEtleU1hcC5nZXQob2JqMik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEhvb2tTdG9yYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMub2JqUHJvcHNCeUFFeHByID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzc29jaWF0ZShhZXhwciwgb2JqLCBwcm9wKSB7XHJcbiAgICAgICAgaWYoIXRoaXMub2JqUHJvcHNCeUFFeHByLmhhcyhhZXhwcikpIHtcclxuICAgICAgICAgICAgdGhpcy5vYmpQcm9wc0J5QUV4cHIuc2V0KGFleHByLCBuZXcgU2V0KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG9ialByb3BTZXQgPSB0aGlzLm9ialByb3BzQnlBRXhwci5nZXQoYWV4cHIpO1xyXG5cclxuICAgICAgICBvYmpQcm9wU2V0LmFkZChDb21wb3NpdGVLZXkuZ2V0KG9iaiwgcHJvcCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhZGRlZCcsIG9iaiwgcHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzY29ubmVjdEFsbChhZXhwcikge1xyXG4gICAgICAgIHRoaXMub2JqUHJvcHNCeUFFeHByLmRlbGV0ZShhZXhwcik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QUV4cHJzRm9yKG9iaiwgcHJvcCkge1xyXG4gICAgICAgIGxldCBjb21wID0gQ29tcG9zaXRlS2V5LmdldChvYmosIHByb3ApO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMub2JqUHJvcHNCeUFFeHByLmtleXMoKSkuZmlsdGVyKGFleHByID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqUHJvcHNCeUFFeHByLmdldChhZXhwcikuaGFzKGNvbXApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBhZXhwclN0b3JhZ2UgPSBuZXcgSG9va1N0b3JhZ2UoKTtcclxuY29uc3QgYWV4cHJTdGFjayA9IG5ldyBTdGFjaygpO1xyXG5cclxuY2xhc3MgUmV3cml0aW5nQWN0aXZlRXhwcmVzc2lvbiBleHRlbmRzIEJhc2VBY3RpdmVFeHByZXNzaW9uIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmdW5jKXtcclxuICAgICAgICBzdXBlcihmdW5jKTtcclxuXHJcbiAgICAgICAgRXhwcmVzc2lvbkFuYWx5c2lzLmNoZWNrKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWV4cHIoZnVuYykge1xyXG4gICAgY29uc29sZS5sb2coJ2FleHByJywgZnVuYyk7XHJcbiAgICByZXR1cm4gbmV3IFJld3JpdGluZ0FjdGl2ZUV4cHJlc3Npb24oZnVuYyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW1iZXIob2JqLCBwcm9wKSB7XHJcbiAgICBjb25zb2xlLmxvZygnZ2V0TWVtYmVyJywgb2JqLCBwcm9wKTtcclxuICAgIGxldCBjdXJyZW50QUV4cHIgPSBhZXhwclN0YWNrLnRvcCgpO1xyXG4gICAgaWYoY3VycmVudEFFeHByKSB7XHJcbiAgICAgICAgYWV4cHJTdG9yYWdlLmFzc29jaWF0ZShjdXJyZW50QUV4cHIsIG9iaiwgcHJvcCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqW3Byb3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5kQ2FsbE1lbWJlcihvYmosIHByb3AsIGFyZ3MpIHtcclxuICAgIGNvbnNvbGUubG9nKCdnZXRBbmRDYWxsTWVtYmVyJywgb2JqLCBwcm9wLCAuLi5hcmdzKTtcclxuICAgIGxldCBjdXJyZW50QUV4cHIgPSBhZXhwclN0YWNrLnRvcCgpO1xyXG4gICAgaWYoY3VycmVudEFFeHByKSB7XHJcbiAgICAgICAgYWV4cHJTdG9yYWdlLmFzc29jaWF0ZShjdXJyZW50QUV4cHIsIG9iaiwgcHJvcCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqW3Byb3BdKC4uLmFyZ3MpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0TWVtYmVyKG9iaiwgcHJvcCwgb3BlcmF0b3IsIHZhbCkge1xyXG4gICAgY29uc29sZS5sb2coJ3NldE1lbWJlcicsIG9iaiwgcHJvcCwgb3BlcmF0b3IsIHZhbCk7XHJcbiAgICAvLyBUT0RPOiBjaGVjayBhY3R1YWwgb3BlcmF0b3JcclxuICAgIGxldCByZXN1bHQgPSBvYmpbcHJvcF0gPSB2YWw7XHJcbiAgICBhZXhwclN0b3JhZ2UuZ2V0QUV4cHJzRm9yKG9iaiwgcHJvcCkuZm9yRWFjaChhZXhwciA9PiBhZXhwci5jaGVja0FuZE5vdGlmeSgpKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFleHByO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hZXhwci1zb3VyY2UtdHJhbnNmb3JtYXRpb24tcHJvcGFnYXRpb24uanNcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9mcm9tID0gcmVxdWlyZShcIi4uL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX2Zyb20yLmRlZmF1bHQpKGFycik7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzXG4gKiogbW9kdWxlIGlkID0gMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBpbmRleCA9IHRoaXMuX2lcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanNcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4gKiogbW9kdWxlIGlkID0gMTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4gKiogbW9kdWxlIGlkID0gMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzXG4gKiogbW9kdWxlIGlkID0gMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qc1xuICoqIG1vZHVsZSBpZCA9IDIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanNcbiAqKiBtb2R1bGUgaWQgPSAyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbiAqKiBtb2R1bGUgaWQgPSAyM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzXG4gKiogbW9kdWxlIGlkID0gMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzXG4gKiogbW9kdWxlIGlkID0gMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qc1xuICoqIG1vZHVsZSBpZCA9IDI3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJylcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxuICAgICwgbHQgICAgID0gJzwnXG4gICAgLCBndCAgICAgPSAnPidcbiAgICAsIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG4gIHZhciByZXN1bHQ7XG4gIGlmKE8gIT09IG51bGwpe1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwgaSAgICAgID0gMFxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzXG4gKiogbW9kdWxlIGlkID0gMzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanNcbiAqKiBtb2R1bGUgaWQgPSAzN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanNcbiAqKiBtb2R1bGUgaWQgPSAzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4gKiogbW9kdWxlIGlkID0gNDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanNcbiAqKiBtb2R1bGUgaWQgPSA0MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSA0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanNcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuICoqIG1vZHVsZSBpZCA9IDQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKVxuICAsIHVpZCAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFN5bWJvbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2xcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzXG4gKiogbW9kdWxlIGlkID0gNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanNcbiAqKiBtb2R1bGUgaWQgPSA0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGNhbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpXG4gICwgZ2V0SXRlckZuICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pe1xuICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBDICAgICAgID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheVxuICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgaW5kZXggICA9IDBcbiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKVxuICAgICAgLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYobWFwcGluZyltYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKXtcbiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZyb20uanNcbiAqKiBtb2R1bGUgaWQgPSA0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4gKiogbW9kdWxlIGlkID0gNTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGluZGV4LCB2YWx1ZSl7XG4gIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzXG4gKiogbW9kdWxlIGlkID0gNTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1xuICoqIG1vZHVsZSBpZCA9IDUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4gKiogbW9kdWxlIGlkID0gNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBJVEVSQVRPUiAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xufSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMsIHNraXBDbG9zaW5nKXtcbiAgaWYoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgID0gWzddXG4gICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIHtkb25lOiBzYWZlID0gdHJ1ZX07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qc1xuICoqIG1vZHVsZSBpZCA9IDU1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qc1xuICoqIG1vZHVsZSBpZCA9IDU2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXG4gKiogbW9kdWxlIGlkID0gNTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanNcbiAqKiBtb2R1bGUgaWQgPSA1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xuICoqIG1vZHVsZSBpZCA9IDU5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA2MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA2MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDYyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDYzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDY0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDY1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanNcbiAqKiBtb2R1bGUgaWQgPSA2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanNcbiAqKiBtb2R1bGUgaWQgPSA2N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanNcbiAqKiBtb2R1bGUgaWQgPSA2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDY5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgTUVUQSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZXG4gICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgc2hhcmVkICAgICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCB3a3NEZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKVxuICAsIGtleU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fa2V5b2YnKVxuICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJylcbiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBfY3JlYXRlICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JylcbiAgLCAkR09QRCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCAkRFAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgJGtleXMgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mXG4gICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcbiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKVxuICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGVcbiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JylcbiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpXG4gICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKVxuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cbiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcbiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpe1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpe1xuICAgIGlmKCFELmVudW1lcmFibGUpe1xuICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuICAgICwgaSAgICA9IDBcbiAgICAsIGwgPSBrZXlzLmxlbmd0aFxuICAgICwga2V5O1xuICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgaXQgID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcbiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90b1xuICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighVVNFX05BVElWRSl7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXtcbiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5Jykpe1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuZm9yKHZhciBzeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTtcblxuZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICB2YXIgYXJncyA9IFtpdF1cbiAgICAgICwgaSAgICA9IDFcbiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzXG4gKiogbW9kdWxlIGlkID0gNzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBNRVRBICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJylcbiAgLCBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaGFzICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHNldERlc2MgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGlkICAgICAgID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXtcbiAgc2V0RGVzYyhpdCwgTUVUQSwge3ZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfX0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbihpdCl7XG4gIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogICAgICBNRVRBLFxuICBORUVEOiAgICAgZmFsc2UsXG4gIGZhc3RLZXk6ICBmYXN0S2V5LFxuICBnZXRXZWFrOiAgZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzXG4gKiogbW9kdWxlIGlkID0gNzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzXG4gKiogbW9kdWxlIGlkID0gNzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanNcbiAqKiBtb2R1bGUgaWQgPSA3M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDc0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qc1xuICoqIG1vZHVsZSBpZCA9IDc1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qc1xuICoqIG1vZHVsZSBpZCA9IDc2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qc1xuICoqIG1vZHVsZSBpZCA9IDc4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pe1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qc1xuICoqIG1vZHVsZSBpZCA9IDc5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgcElFICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4gKiogbW9kdWxlIGlkID0gODBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA4MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gODNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qc1xuICoqIG1vZHVsZSBpZCA9IDg0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA4NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0fSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzXG4gKiogbW9kdWxlIGlkID0gODdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4gKiogbW9kdWxlIGlkID0gODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSA4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCl7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSA5MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gOTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zZXRcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0LmpzXG4gKiogbW9kdWxlIGlkID0gOTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5TZXQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3NldC5qc1xuICoqIG1vZHVsZSBpZCA9IDkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanNcbiAqKiBtb2R1bGUgaWQgPSA5NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJylcbiAgLCBzdGVwICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgZmFzdEtleSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleVxuICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpLCBlbnRyeTtcbiAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0Ll9mID09IGVudHJ5KXRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgLCBraW5kICA9IHRoYXQuX2tcbiAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpe1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qc1xuICoqIG1vZHVsZSBpZCA9IDk1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpe1xuICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzXG4gKiogbW9kdWxlIGlkID0gOTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4gKiogbW9kdWxlIGlkID0gOTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2FsbCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKVxuICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgLCBCUkVBSyAgICAgICA9IHt9XG4gICwgUkVUVVJOICAgICAgPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuICAgICwgZiAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmKGlzQXJyYXlJdGVyKGl0ZXJGbikpZm9yKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyAgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA5OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBTUEVDSUVTICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzXG4gKiogbW9kdWxlIGlkID0gOTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG1ldGEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgZmFpbHMgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZUFsbCAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgZm9yT2YgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGFuSW5zdGFuY2UgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBlYWNoICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgaWYoIURFU0NSSVBUT1JTIHx8IHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpe1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FLCAnX2MnKTtcbiAgICAgIHRhcmdldC5fYyA9IG5ldyBCYXNlO1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRhcmdldFtBRERFUl0sIHRhcmdldCk7XG4gICAgfSk7XG4gICAgZWFjaCgnYWRkLGNsZWFyLGRlbGV0ZSxmb3JFYWNoLGdldCxoYXMsc2V0LGtleXMsdmFsdWVzLGVudHJpZXMsdG9KU09OJy5zcGxpdCgnLCcpLGZ1bmN0aW9uKEtFWSl7XG4gICAgICB2YXIgSVNfQURERVIgPSBLRVkgPT0gJ2FkZCcgfHwgS0VZID09ICdzZXQnO1xuICAgICAgaWYoS0VZIGluIHByb3RvICYmICEoSVNfV0VBSyAmJiBLRVkgPT0gJ2NsZWFyJykpaGlkZShDLnByb3RvdHlwZSwgS0VZLCBmdW5jdGlvbihhLCBiKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGlzLCBDLCBLRVkpO1xuICAgICAgICBpZighSVNfQURERVIgJiYgSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkpcmV0dXJuIEtFWSA9PSAnZ2V0JyA/IHVuZGVmaW5lZCA6IGZhbHNlO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fY1tLRVldKGEgPT09IDAgPyAwIDogYSwgYik7XG4gICAgICAgIHJldHVybiBJU19BRERFUiA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZignc2l6ZScgaW4gcHJvdG8pZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5fYy5zaXplO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMTAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBpc0FycmF5ICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwpe1xuICB2YXIgQztcbiAgaWYoaXNBcnJheShvcmlnaW5hbCkpe1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSlDID0gdW5kZWZpbmVkO1xuICAgIGlmKGlzT2JqZWN0KEMpKXtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYoQyA9PT0gbnVsbClDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qc1xuICoqIG1vZHVsZSBpZCA9IDEwM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzXG4gKiogbW9kdWxlIGlkID0gMTA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUpe1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7XG4gICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxMDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXIsIElURVJBVE9SKXtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vbWFwXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL21hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLk1hcDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vbWFwLmpzXG4gKiogbW9kdWxlIGlkID0gMTA4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ01hcCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDExMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1xuICoqIG1vZHVsZSBpZCA9IDExMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXG4gKiogbW9kdWxlIGlkID0gMTEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4gKiogbW9kdWxlIGlkID0gMTEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4gKiogbW9kdWxlIGlkID0gMTE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcImFjdGl2ZS1leHByZXNzaW9uc1wiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhY3RpdmUtZXhwcmVzc2lvbnNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiYWN0aXZlLWV4cHJlc3Npb25zXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8ndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfaW50ZXJwcmV0YXRpb25BY3RpdmVFeHByZXNzaW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2FleHByJywge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICByZXR1cm4gX2ludGVycHJldGF0aW9uQWN0aXZlRXhwcmVzc2lvbnMuYWV4cHI7XG5cdCAgfVxuXHR9KTtcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3ZhciBfYmFzZUFjdGl2ZUV4cHJlc3Npb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjYpO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdCYXNlQWN0aXZlRXhwcmVzc2lvbicsIHtcblx0ICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgcmV0dXJuIF9iYXNlQWN0aXZlRXhwcmVzc2lvbnMuQmFzZUFjdGl2ZUV4cHJlc3Npb247XG5cdCAgfVxuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqLyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuQWN0aXZlRXhwcmVzc2lvbkludGVycHJldGVyID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9rZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblx0XG5cdHZhciBfZ2V0MiA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHRcblx0dmFyIF9nZXQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Mik7XG5cdFxuXHR2YXIgX3NldCA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xuXHRcblx0dmFyIF9zZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0KTtcblx0XG5cdHZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblx0XG5cdHZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdHZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5KTtcblx0XG5cdHZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cdFxuXHR2YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTA1KTtcblx0XG5cdHZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0ZXhwb3J0cy5hZXhwciA9IGFleHByO1xuXHRcblx0dmFyIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19pbnRlcnByZXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE0KTtcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3ZhciBfaW50ZXJwcmV0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW50ZXJwcmV0ZXIpO1xuXHRcblx0dmFyIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19zdGFja0VzMjAxNU1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMik7XG5cdFxuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki92YXIgX3N0YWNrRXMyMDE1TW9kdWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdGFja0VzMjAxNU1vZHVsZXMpO1xuXHRcblx0dmFyIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19saXN0ZW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTtcblx0XG5cdHZhciAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9fYmFzZUFjdGl2ZUV4cHJlc3Npb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjYpO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBBRVhQUl9TVEFDSyA9IG5ldyAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9fc3RhY2tFczIwMTVNb2R1bGVzMi5kZWZhdWx0KCk7XG5cdFxuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki92YXIgSGFuZGxlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL0hhbmRsZXIoKSB7XG5cdCAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBIYW5kbGVyKTtcblx0fTtcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3ZhciBJbnRlcnByZXRlckFjdGl2ZUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoX0Jhc2VBY3RpdmVFeHByZXNzaW9uKSB7XG5cdCAgICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShJbnRlcnByZXRlckFjdGl2ZUV4cHJlc3Npb24sIF9CYXNlQWN0aXZlRXhwcmVzc2lvbik7XG5cdFxuXHQgICAgZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovSW50ZXJwcmV0ZXJBY3RpdmVFeHByZXNzaW9uKGZ1bmMsIHNjb3BlKSB7XG5cdCAgICAgICAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSW50ZXJwcmV0ZXJBY3RpdmVFeHByZXNzaW9uKTtcblx0XG5cdCAgICAgICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShJbnRlcnByZXRlckFjdGl2ZUV4cHJlc3Npb24pLmNhbGwodGhpcywgZnVuYykpO1xuXHRcblx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9fdGhpcy5zY29wZSA9IHNjb3BlO1xuXHQgICAgICAgIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL190aGlzLnByb3BlcnR5QWNjZXNzb3JzID0gbmV3IC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19zZXQyLmRlZmF1bHQoKTtcblx0XG5cdCAgICAgICAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3RoaXMuaW5zdGFsbExpc3RlbmVycygpO1xuXHQgICAgICAgIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3JldHVybiBfdGhpcztcblx0ICAgIH1cblx0XG5cdCAgICAvLyBUT0RPOiByZW1vdmUgaW5kaXJlY3Rpb25cblx0XG5cdFxuXHQgICAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSW50ZXJwcmV0ZXJBY3RpdmVFeHByZXNzaW9uLCBbe1xuXHQgICAgICAgIGtleTogJ3Byb3BlcnR5QXNzaWduZWQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9wZXJ0eUFzc2lnbmVkKCkge1xuXHQgICAgICAgICAgICB0aGlzLmNoZWNrQW5kTm90aWZ5KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3Jldm9rZScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldm9rZSgpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnaW5zdGFsbExpc3RlbmVycycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxMaXN0ZW5lcnMoKSB7XG5cdCAgICAgICAgICAgIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3ZhciBfdGhpczIgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgQUVYUFJfU1RBQ0sud2l0aEVsZW1lbnQodGhpcywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgQWN0aXZlRXhwcmVzc2lvbkludGVycHJldGVyLnJ1bkFuZFJldHVybiggLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3RoaXMyLmZ1bmMsIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL190aGlzMi5zY29wZSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW1vdmVMaXN0ZW5lcnMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG5cdCAgICAgICAgICAgIHRoaXMucHJvcGVydHlBY2Nlc3NvcnMuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHlBY2Nlc3Nvcikge1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydHlBY2Nlc3Nvci5zZWxlY3Rpb25JdGVtcy5kZWxldGUodGhpcyk7XG5cdCAgICAgICAgICAgIH0sIHRoaXMpO1xuXHQgICAgICAgICAgICB0aGlzLnByb3BlcnR5QWNjZXNzb3JzLmNsZWFyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHQgICAgcmV0dXJuIEludGVycHJldGVyQWN0aXZlRXhwcmVzc2lvbjtcblx0fShfYmFzZUFjdGl2ZUV4cHJlc3Npb25zLkJhc2VBY3RpdmVFeHByZXNzaW9uKTtcblx0XG5cdGZ1bmN0aW9uIGFleHByKGZ1bmMsIHNjb3BlKSB7XG5cdCAgICByZXR1cm4gbmV3IEludGVycHJldGVyQWN0aXZlRXhwcmVzc2lvbihmdW5jLCBzY29wZSk7XG5cdH1cblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3ZhciBBY3RpdmVFeHByZXNzaW9uSW50ZXJwcmV0ZXIgPSBleHBvcnRzLkFjdGl2ZUV4cHJlc3Npb25JbnRlcnByZXRlciA9IGZ1bmN0aW9uIChfSW50ZXJwcmV0ZXIpIHtcblx0ICAgICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEFjdGl2ZUV4cHJlc3Npb25JbnRlcnByZXRlciwgX0ludGVycHJldGVyKTtcblx0XG5cdCAgICBmdW5jdGlvbiBBY3RpdmVFeHByZXNzaW9uSW50ZXJwcmV0ZXIoKSB7XG5cdCAgICAgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWN0aXZlRXhwcmVzc2lvbkludGVycHJldGVyKTtcblx0ICAgICAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShBY3RpdmVFeHByZXNzaW9uSW50ZXJwcmV0ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgICAgfVxuXHRcblx0ICAgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEFjdGl2ZUV4cHJlc3Npb25JbnRlcnByZXRlciwgW3tcblx0ICAgICAgICBrZXk6ICdnZXRQcm9wZXJ0eScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHQgICAgICAgICAgICB2YXIgb2JqZWN0ID0gb2JqLnZhbHVlT2YoKSxcblx0ICAgICAgICAgICAgICAgIHByb3AgPSBuYW1lLnZhbHVlT2YoKTtcblx0XG5cdCAgICAgICAgICAgIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19saXN0ZW5lci5MaXN0ZW5lci53YXRjaFByb3BlcnR5KG9iamVjdCwgcHJvcCkuYWRkSGFuZGxlcihBRVhQUl9TVEFDSy50b3AoKSk7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gKC8qaXN0YW5idWwgaWdub3JlIG5leHQqLygwLCBfZ2V0My5kZWZhdWx0KSgoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShBY3RpdmVFeHByZXNzaW9uSW50ZXJwcmV0ZXIucHJvdG90eXBlKSwgJ2dldFByb3BlcnR5JywgdGhpcykuY2FsbCh0aGlzLCBvYmosIG5hbWUpXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3N0ZXBDYWxsRXhwcmVzc2lvbicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBDYWxsRXhwcmVzc2lvbigpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVTdGFja1swXS5hcmd1bWVudHMgPiAwKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbCBleHByZXNzaW9uJyk7XG5cdCAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgc3RhdGVTdGFjayA9IHRoaXMuc3RhdGVTdGFjayxcblx0ICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVTdGFja1swXSxcblx0ICAgICAgICAgICAgICAgIG5vZGUgPSBzdGF0ZS5ub2RlLFxuXHQgICAgICAgICAgICAgICAgZnVuYyA9IHN0YXRlLmZ1bmNfO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuICgvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2dldDMuZGVmYXVsdCkoKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQWN0aXZlRXhwcmVzc2lvbkludGVycHJldGVyLnByb3RvdHlwZSksICdzdGVwQ2FsbEV4cHJlc3Npb24nLCB0aGlzKS5jYWxsKHRoaXMpXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0sIFt7XG5cdCAgICAgICAga2V5OiAncnVuQW5kUmV0dXJuJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcnVuQW5kUmV0dXJuKGZ1bmMsIG9wdFNjb3BlKSB7XG5cdCAgICAgICAgICAgIHZhciBzY29wZSA9IG9wdFNjb3BlIHx8IHt9O1xuXHQgICAgICAgICAgICB2YXIgaSA9IG5ldyBBY3RpdmVFeHByZXNzaW9uSW50ZXJwcmV0ZXIoIC8qaXN0YW5idWwgaWdub3JlIG5leHQqLyd2YXIgcmV0dXJuVmFsdWUgPSAoJyArIGZ1bmMudG9TdHJpbmcoKSArICcpKCk7JywgZnVuY3Rpb24gKHNlbGYsIHJvb3RTY29wZSkge1xuXHQgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Njb3BlJywgc2NvcGUpO1xuXHQgICAgICAgICAgICAgICAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovKDAsIF9rZXlzMi5kZWZhdWx0KShzY29wZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlW2tdO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGssIHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICBzZWxmLnNldFByb3BlcnR5KHJvb3RTY29wZSwgaywgc2VsZi5jcmVhdGVQc2V1ZG9PYmplY3QodmFsdWUpKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgLy8gVE9ETzogZGVsZXRlIGFzIHRoZSByZWxldmFudCBnbG9iYWwgb2JqZWN0cyBjYW4gYmUgaW5mZXJyZWQgYnkgYW5hbHlzaW5nIHRoZSBsb2NhbCBzY29wZVxuXHQgICAgICAgICAgICAgICAgLy8gW1wiX19sdlZhclJlY29yZGVyXCIsIFwialF1ZXJ5XCIsIFwiJFwiLCBcIl9cIiwgXCJsaXZlbHlcIl0uZm9yRWFjaCgoaykgPT4ge1xuXHQgICAgICAgICAgICAgICAgLy8gICAgIHNlbGYuc2V0UHJvcGVydHkocm9vdFNjb3BlLCBrLCBzZWxmLmNyZWF0ZVBzZXVkb09iamVjdCh3aW5kb3dba10pKTtcblx0ICAgICAgICAgICAgICAgIC8vIH0pO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgaS5ydW4oKTtcblx0ICAgICAgICAgICAgcmV0dXJuIGkuc3RhdGVTdGFja1swXS5zY29wZS5wcm9wZXJ0aWVzLnJldHVyblZhbHVlLnZhbHVlT2YoKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgICByZXR1cm4gQWN0aXZlRXhwcmVzc2lvbkludGVycHJldGVyO1xuXHR9KF9pbnRlcnByZXRlcjIuZGVmYXVsdCk7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMyksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCkuT2JqZWN0LmtleXM7XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcblx0dmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICwgJGtleXMgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2tleXMnLCBmdW5jdGlvbigpe1xuXHQgIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcblx0ICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuXHQgIH07XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxuXHR2YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcblx0dmFyICRrZXlzICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KVxuXHQgICwgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKXtcblx0ICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGhhcyAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcblx0ICAsIHRvSU9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG5cdCAgLCBhcnJheUluZGV4T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKShmYWxzZSlcblx0ICAsIElFX1BST1RPICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpKCdJRV9QUk9UTycpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcblx0ICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcblx0ICAgICwgaSAgICAgID0gMFxuXHQgICAgLCByZXN1bHQgPSBbXVxuXHQgICAgLCBrZXk7XG5cdCAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuXHQgIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcblx0ICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG5cdCAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuXHQgIH1cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG5cdCAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG5cdHZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcblx0ICAsIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncblx0dmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuXHQvLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xuXHR2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMClcblx0ICAsIHRvTGVuZ3RoICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdCAgLCB0b0luZGV4ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcblx0ICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG5cdCAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG5cdCAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcblx0ICAgICAgLCB2YWx1ZTtcblx0ICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cblx0ICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcblx0ICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuXHQgICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcblx0ICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3Rcblx0ICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuXHQgICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG5cdCAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyA3LjEuMTUgVG9MZW5ndGhcblx0dmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG5cdCAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyA3LjEuNCBUb0ludGVnZXJcblx0dmFyIGNlaWwgID0gTWF0aC5jZWlsXG5cdCAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgbWF4ICAgICAgID0gTWF0aC5tYXhcblx0ICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuXHQgIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcblx0ICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCkoJ2tleXMnKVxuXHQgICwgdWlkICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcblx0ICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHQgICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcblx0ICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuXHQgIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuXHQgID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0aWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuLyoqKi8gfSxcbi8qIDIwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgaWQgPSAwXG5cdCAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcblx0ICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcblx0bW9kdWxlLmV4cG9ydHMgPSAoXG5cdCAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcblx0KS5zcGxpdCgnLCcpO1xuXG4vKioqLyB9LFxuLyogMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xuXHR2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG5cdCAgLCBjb3JlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNClcblx0ICAsIGZhaWxzICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuXHQgIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cblx0ICAgICwgZXhwID0ge307XG5cdCAgZXhwW0tFWV0gPSBleGVjKGZuKTtcblx0ICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAyMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGdsb2JhbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG5cdCAgLCBjb3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KVxuXHQgICwgY3R4ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcblx0ICAsIGhpZGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpXG5cdCAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblx0XG5cdHZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcblx0ICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuXHQgICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG5cdCAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcblx0ICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuXHQgICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG5cdCAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0Lldcblx0ICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcblx0ICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdXG5cdCAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cblx0ICAgICwga2V5LCBvd24sIG91dDtcblx0ICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcblx0ICBmb3Ioa2V5IGluIHNvdXJjZSl7XG5cdCAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcblx0ICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG5cdCAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG5cdCAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuXHQgICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcblx0ICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuXHQgICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cblx0ICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG5cdCAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuXHQgICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcblx0ICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG5cdCAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XG5cdCAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuXHQgICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe1xuXHQgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcblx0ICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG5cdCAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuXHQgICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG5cdCAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICB9O1xuXHQgICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG5cdCAgICAgIHJldHVybiBGO1xuXHQgICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG5cdCAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG5cdCAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcblx0ICAgIGlmKElTX1BST1RPKXtcblx0ICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuXHQgICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuXHQgICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdC8vIHR5cGUgYml0bWFwXG5cdCRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG5cdCRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG5cdCRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG5cdCRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cblx0JGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG5cdCRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuXHQkZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcblx0JGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxuXHRtb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcblx0aWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0sXG4vKiAyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5cdHZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcblx0ICBhRnVuY3Rpb24oZm4pO1xuXHQgIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG5cdCAgc3dpdGNoKGxlbmd0aCl7XG5cdCAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG5cdCAgICB9O1xuXHQgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcblx0ICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuXHQgIH07XG5cdH07XG5cbi8qKiovIH0sXG4vKiAyNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGRQICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KVxuXHQgICwgY3JlYXRlRGVzYyA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcblx0ICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuXHR9IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcblx0ICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuXHQgIHJldHVybiBvYmplY3Q7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAyOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGFuT2JqZWN0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSlcblx0ICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSlcblx0ICAsIHRvUHJpbWl0aXZlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSlcblx0ICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXHRcblx0ZXhwb3J0cy5mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcblx0ICBhbk9iamVjdChPKTtcblx0ICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG5cdCAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG5cdCAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcblx0ICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcblx0ICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cdCAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG5cdCAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuXHQgIHJldHVybiBPO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDMxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygzMykoZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19yZXF1aXJlX18oMzQpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAzMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxuXHRtb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKShmdW5jdGlvbigpe1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogMzMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0ICB9IGNhdGNoKGUpe1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9LFxuLyogMzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXG5cdCAgLCBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpLmRvY3VtZW50XG5cdCAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG5cdCAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDM1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cdC8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG5cdC8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuXHQgIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuXHQgIHZhciBmbiwgdmFsO1xuXHQgIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcblx0ICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdCAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcblx0ICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcblx0ICByZXR1cm4ge1xuXHQgICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuXHQgICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuXHQgICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuXHQgICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuXHQgIH07XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0dmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHRcblx0dmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cdFxuXHR2YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHRcblx0dmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcblx0ICBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cdCAgdmFyIGRlc2MgPSAoMCwgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIuZGVmYXVsdCkob2JqZWN0LCBwcm9wZXJ0eSk7XG5cdFxuXHQgIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpO1xuXHRcblx0ICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcblx0ICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcblx0ICAgIHJldHVybiBkZXNjLnZhbHVlO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG5cdFxuXHQgICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9LFxuLyogMzkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuLyoqKi8gfSxcbi8qIDQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcblx0dmFyIHRvT2JqZWN0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSlcblx0ICAsICRnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuXHQgICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuXHQgIH07XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogNDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG5cdHZhciBoYXMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcblx0ICAsIHRvT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICwgSUVfUFJPVE8gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KSgnSUVfUFJPVE8nKVxuXHQgICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG5cdCAgTyA9IHRvT2JqZWN0KE8pO1xuXHQgIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuXHQgIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuXHQgICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuXHQgIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA0MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9LFxuLyogNDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuXHR2YXIgJE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpLk9iamVjdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG5cdCAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcblx0dmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuXHQgICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpLmY7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuXHQgICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcblx0ICB9O1xuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDQ1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgcElFICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KVxuXHQgICwgY3JlYXRlRGVzYyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KVxuXHQgICwgdG9JT2JqZWN0ICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuXHQgICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KVxuXHQgICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdCAgLCBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXG5cdCAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cdFxuXHRleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG5cdCAgTyA9IHRvSU9iamVjdChPKTtcblx0ICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG5cdCAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcblx0ICAgIHJldHVybiBnT1BEKE8sIFApO1xuXHQgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblx0ICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKioqLyB9LFxuLyogNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg0OCksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDQ4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjIpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCkuU2V0O1xuXG4vKioqLyB9LFxuLyogNDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cblxuLyoqKi8gfSxcbi8qIDUwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciAkYXQgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSkodHJ1ZSk7XG5cdFxuXHQvLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5cdF9fd2VicGFja19yZXF1aXJlX18oNTIpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcblx0ICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG5cdCAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcblx0Ly8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxuXHR9LCBmdW5jdGlvbigpe1xuXHQgIHZhciBPICAgICA9IHRoaXMuX3Rcblx0ICAgICwgaW5kZXggPSB0aGlzLl9pXG5cdCAgICAsIHBvaW50O1xuXHQgIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG5cdCAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuXHQgIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuXHQgIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogNTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgZGVmaW5lZCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0Ly8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG5cdC8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG5cdCAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuXHQgICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuXHQgICAgICAsIGwgPSBzLmxlbmd0aFxuXHQgICAgICAsIGEsIGI7XG5cdCAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuXHQgICAgYSA9IHMuY2hhckNvZGVBdChpKTtcblx0ICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG5cdCAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG5cdCAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuXHQgIH07XG5cdH07XG5cbi8qKiovIH0sXG4vKiA1MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgTElCUkFSWSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKVxuXHQgICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKVxuXHQgICwgcmVkZWZpbmUgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KVxuXHQgICwgaGlkZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KVxuXHQgICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdCAgLCBJdGVyYXRvcnMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpXG5cdCAgLCAkaXRlckNyZWF0ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpXG5cdCAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjApXG5cdCAgLCBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG5cdCAgLCBJVEVSQVRPUiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpKCdpdGVyYXRvcicpXG5cdCAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG5cdCAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuXHQgICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcblx0ICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cdFxuXHR2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuXHQgICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblx0ICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG5cdCAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG5cdCAgICBzd2l0Y2goa2luZCl7XG5cdCAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcblx0ICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcblx0ICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcblx0ICB9O1xuXHQgIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG5cdCAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuXHQgICAgLCBWQUxVRVNfQlVHID0gZmFsc2Vcblx0ICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG5cdCAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cblx0ICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG5cdCAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG5cdCAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG5cdCAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG5cdCAgLy8gRml4IG5hdGl2ZVxuXHQgIGlmKCRhbnlOYXRpdmUpe1xuXHQgICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcblx0ICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcblx0ICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuXHQgICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcblx0ICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG5cdCAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcblx0ICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuXHQgICAgVkFMVUVTX0JVRyA9IHRydWU7XG5cdCAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuXHQgIH1cblx0ICAvLyBEZWZpbmUgaXRlcmF0b3Jcblx0ICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG5cdCAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuXHQgIH1cblx0ICAvLyBQbHVnIGZvciBsaWJyYXJ5XG5cdCAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG5cdCAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcblx0ICBpZihERUZBVUxUKXtcblx0ICAgIG1ldGhvZHMgPSB7XG5cdCAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuXHQgICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG5cdCAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG5cdCAgICB9O1xuXHQgICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG5cdCAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuXHQgICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcblx0ICB9XG5cdCAgcmV0dXJuIG1ldGhvZHM7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA1MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG4vKioqLyB9LFxuLyogNTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbi8qKiovIH0sXG4vKiA1NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqKi8gfSxcbi8qIDU2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBjcmVhdGUgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpXG5cdCAgLCBkZXNjcmlwdG9yICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpXG5cdCAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjApXG5cdCAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXHRcblx0Ly8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNykoSXRlcmF0b3JQcm90b3R5cGUsIF9fd2VicGFja19yZXF1aXJlX18oNjEpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcblx0ICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG5cdCAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA1NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG5cdHZhciBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG5cdCAgLCBkUHMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpXG5cdCAgLCBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG5cdCAgLCBJRV9QUk9UTyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpKCdJRV9QUk9UTycpXG5cdCAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cblx0ICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cdFxuXHQvLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG5cdHZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcblx0ICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuXHQgIHZhciBpZnJhbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KSgnaWZyYW1lJylcblx0ICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG5cdCAgICAsIGx0ICAgICA9ICc8J1xuXHQgICAgLCBndCAgICAgPSAnPidcblx0ICAgICwgaWZyYW1lRG9jdW1lbnQ7XG5cdCAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdCAgX193ZWJwYWNrX3JlcXVpcmVfXyg1OSkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblx0ICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG5cdCAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcblx0ICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG5cdCAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcblx0ICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG5cdCAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuXHQgIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG5cdCAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG5cdCAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuXHQgIHJldHVybiBjcmVhdGVEaWN0KCk7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuXHQgIHZhciByZXN1bHQ7XG5cdCAgaWYoTyAhPT0gbnVsbCl7XG5cdCAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG5cdCAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG5cdCAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcblx0ICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcblx0ICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuXHQgIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG5cdCAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiA1OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGRQICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcblx0ICAsIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSlcblx0ICAsIGdldEtleXMgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG5cdCAgYW5PYmplY3QoTyk7XG5cdCAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcblx0ICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcblx0ICAgICwgaSA9IDBcblx0ICAgICwgUDtcblx0ICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG5cdCAgcmV0dXJuIE87XG5cdH07XG5cbi8qKiovIH0sXG4vKiA1OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKiovIH0sXG4vKiA2MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGRlZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpLmZcblx0ICAsIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcblx0ICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpKCd0b1N0cmluZ1RhZycpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcblx0ICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA2MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHN0b3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSgnd2tzJylcblx0ICAsIHVpZCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKVxuXHQgICwgU3ltYm9sICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpLlN5bWJvbFxuXHQgICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblx0XG5cdHZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG5cdCAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG5cdCAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xuXHR9O1xuXHRcblx0JGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuLyoqKi8gfSxcbi8qIDYyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDYzKTtcblx0dmFyIGdsb2JhbCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHQgICwgaGlkZSAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpXG5cdCAgLCBJdGVyYXRvcnMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSlcblx0ICAsIFRPX1NUUklOR19UQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKSgndG9TdHJpbmdUYWcnKTtcblx0XG5cdGZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuXHQgIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cblx0ICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXVxuXHQgICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcblx0ICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG5cdCAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xuXHR9XG5cbi8qKiovIH0sXG4vKiA2MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjQpXG5cdCAgLCBzdGVwICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSlcblx0ICAsIEl0ZXJhdG9ycyAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KVxuXHQgICwgdG9JT2JqZWN0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0Ly8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuXHQvLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuXHQvLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG5cdC8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG5cdCAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuXHQgIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG5cdCAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcblx0Ly8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG5cdH0sIGZ1bmN0aW9uKCl7XG5cdCAgdmFyIE8gICAgID0gdGhpcy5fdFxuXHQgICAgLCBraW5kICA9IHRoaXMuX2tcblx0ICAgICwgaW5kZXggPSB0aGlzLl9pKys7XG5cdCAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuXHQgICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcblx0ICAgIHJldHVybiBzdGVwKDEpO1xuXHQgIH1cblx0ICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcblx0ICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcblx0ICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG5cdH0sICd2YWx1ZXMnKTtcblx0XG5cdC8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcblx0SXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblx0XG5cdGFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcblx0YWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5cdGFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuLyoqKi8gfSxcbi8qIDY0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07XG5cbi8qKiovIH0sXG4vKiA2NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG5cdCAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG5cdH07XG5cbi8qKiovIH0sXG4vKiA2NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgc3Ryb25nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nyk7XG5cdFxuXHQvLyAyMy4yIFNldCBPYmplY3RzXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcblx0fSwge1xuXHQgIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuXHQgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcblx0ICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcblx0ICB9XG5cdH0sIHN0cm9uZyk7XG5cbi8qKiovIH0sXG4vKiA2NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgZFAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5mXG5cdCAgLCBjcmVhdGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpXG5cdCAgLCByZWRlZmluZUFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpXG5cdCAgLCBjdHggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG5cdCAgLCBhbkluc3RhbmNlICA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpXG5cdCAgLCBkZWZpbmVkICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNilcblx0ICAsIGZvck9mICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MClcblx0ICAsICRpdGVyRGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Milcblx0ICAsIHN0ZXAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSlcblx0ICAsIHNldFNwZWNpZXMgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NSlcblx0ICAsIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcblx0ICAsIGZhc3RLZXkgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NikuZmFzdEtleVxuXHQgICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cdFxuXHR2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuXHQgIC8vIGZhc3QgY2FzZVxuXHQgIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KSwgZW50cnk7XG5cdCAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG5cdCAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG5cdCAgZm9yKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG5cdCAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuXHQgICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcblx0ICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcblx0ICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcblx0ICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcblx0ICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuXHQgICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG5cdCAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG5cdCAgICB9KTtcblx0ICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG5cdCAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuXHQgICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcblx0ICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCl7XG5cdCAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG5cdCAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcblx0ICAgICAgICAgIGlmKGVudHJ5LnApZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGF0W1NJWkVdID0gMDtcblx0ICAgICAgfSxcblx0ICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuXHQgICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcblx0ICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG5cdCAgICAgICAgdmFyIHRoYXQgID0gdGhpc1xuXHQgICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG5cdCAgICAgICAgaWYoZW50cnkpe1xuXHQgICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uXG5cdCAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG5cdCAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcblx0ICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuXHQgICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuXHQgICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuXHQgICAgICAgICAgaWYodGhhdC5fZiA9PSBlbnRyeSl0aGF0Ll9mID0gbmV4dDtcblx0ICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG5cdCAgICAgICAgICB0aGF0W1NJWkVdLS07XG5cdCAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcblx0ICAgICAgfSxcblx0ICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG5cdCAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuXHQgICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuXHQgICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcblx0ICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMylcblx0ICAgICAgICAgICwgZW50cnk7XG5cdCAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcblx0ICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG5cdCAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcblx0ICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuXHQgICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcblx0ICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcblx0ICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcblx0ICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuXHQgICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBDO1xuXHQgIH0sXG5cdCAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcblx0ICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcblx0ICAgICAgLCBwcmV2LCBpbmRleDtcblx0ICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuXHQgICAgaWYoZW50cnkpe1xuXHQgICAgICBlbnRyeS52ID0gdmFsdWU7XG5cdCAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG5cdCAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG5cdCAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuXHQgICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuXHQgICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuXHQgICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG5cdCAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcblx0ICAgICAgfTtcblx0ICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuXHQgICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuXHQgICAgICB0aGF0W1NJWkVdKys7XG5cdCAgICAgIC8vIGFkZCB0byBpbmRleFxuXHQgICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG5cdCAgICB9IHJldHVybiB0aGF0O1xuXHQgIH0sXG5cdCAgZ2V0RW50cnk6IGdldEVudHJ5LFxuXHQgIHNldFN0cm9uZzogZnVuY3Rpb24oQywgTkFNRSwgSVNfTUFQKXtcblx0ICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuXHQgICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuXHQgICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuXHQgICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcblx0ICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuXHQgICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAvLyBwcmV2aW91c1xuXHQgICAgfSwgZnVuY3Rpb24oKXtcblx0ICAgICAgdmFyIHRoYXQgID0gdGhpc1xuXHQgICAgICAgICwga2luZCAgPSB0aGF0Ll9rXG5cdCAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG5cdCAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuXHQgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcblx0ICAgICAgLy8gZ2V0IG5leHQgZW50cnlcblx0ICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG5cdCAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cblx0ICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIHJldHVybiBzdGVwKDEpO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcblx0ICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcblx0ICAgICAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcblx0ICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcblx0ICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cdFxuXHQgICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcblx0ICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9LFxuLyogNjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuXHQgIGZvcih2YXIga2V5IGluIHNyYyl7XG5cdCAgICBpZihzYWZlICYmIHRhcmdldFtrZXldKXRhcmdldFtrZXldID0gc3JjW2tleV07XG5cdCAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcblx0ICB9IHJldHVybiB0YXJnZXQ7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA2OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKXtcblx0ICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7XG5cdCAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuXHQgIH0gcmV0dXJuIGl0O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBjdHggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG5cdCAgLCBjYWxsICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpXG5cdCAgLCBpc0FycmF5SXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpXG5cdCAgLCBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG5cdCAgLCB0b0xlbmd0aCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdCAgLCBnZXRJdGVyRm4gICA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpXG5cdCAgLCBCUkVBSyAgICAgICA9IHt9XG5cdCAgLCBSRVRVUk4gICAgICA9IHt9O1xuXHR2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG5cdCAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuXHQgICAgLCBmICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSlcblx0ICAgICwgaW5kZXggID0gMFxuXHQgICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG5cdCAgaWYodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuXHQgIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuXHQgIGlmKGlzQXJyYXlJdGVyKGl0ZXJGbikpZm9yKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcblx0ICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcblx0ICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcblx0ICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG5cdCAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcblx0ICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcblx0ICB9XG5cdH07XG5cdGV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5cdGV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG4vKioqLyB9LFxuLyogNzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcblx0dmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG5cdCAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcblx0ICB9IGNhdGNoKGUpe1xuXHQgICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcblx0ICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG5cdCAgICB0aHJvdyBlO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDcyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5cdHZhciBJdGVyYXRvcnMgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSlcblx0ICAsIElURVJBVE9SICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKSgnaXRlcmF0b3InKVxuXHQgICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA3MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGNsYXNzb2YgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpXG5cdCAgLCBJVEVSQVRPUiAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKSgnaXRlcmF0b3InKVxuXHQgICwgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCkuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG5cdCAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cblx0ICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cblx0ICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG5cdH07XG5cbi8qKiovIH0sXG4vKiA3NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcblx0dmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG5cdCAgLCBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKSgndG9TdHJpbmdUYWcnKVxuXHQgIC8vIEVTMyB3cm9uZyBoZXJlXG5cdCAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblx0XG5cdC8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG5cdHZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuIGl0W2tleV07XG5cdCAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgdmFyIE8sIFQsIEI7XG5cdCAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG5cdCAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2Vcblx0ICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcblx0ICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuXHQgICAgOiBBUkcgPyBjb2YoTylcblx0ICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcblx0ICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGdsb2JhbCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSlcblx0ICAsIGNvcmUgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNClcblx0ICAsIGRQICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcblx0ICAsIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcblx0ICAsIFNQRUNJRVMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSkoJ3NwZWNpZXMnKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcblx0ICB2YXIgQyA9IHR5cGVvZiBjb3JlW0tFWV0gPT0gJ2Z1bmN0aW9uJyA/IGNvcmVbS0VZXSA6IGdsb2JhbFtLRVldO1xuXHQgIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG5cdCAgICBjb25maWd1cmFibGU6IHRydWUsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG5cdCAgfSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA3NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIE1FVEEgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCkoJ21ldGEnKVxuXHQgICwgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKVxuXHQgICwgaGFzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdCAgLCBzZXREZXNjICA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpLmZcblx0ICAsIGlkICAgICAgID0gMDtcblx0dmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gdHJ1ZTtcblx0fTtcblx0dmFyIEZSRUVaRSA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKShmdW5jdGlvbigpe1xuXHQgIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG5cdH0pO1xuXHR2YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXtcblx0ICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcblx0ICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuXHQgICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcblx0ICB9fSk7XG5cdH07XG5cdHZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG5cdCAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuXHQgIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcblx0ICBpZighaGFzKGl0LCBNRVRBKSl7XG5cdCAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuXHQgICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcblx0ICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG5cdCAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG5cdCAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuXHQgICAgc2V0TWV0YShpdCk7XG5cdCAgLy8gcmV0dXJuIG9iamVjdCBJRFxuXHQgIH0gcmV0dXJuIGl0W01FVEFdLmk7XG5cdH07XG5cdHZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG5cdCAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuXHQgICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3Rcblx0ICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuXHQgICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcblx0ICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlO1xuXHQgICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcblx0ICAgIHNldE1ldGEoaXQpO1xuXHQgIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG5cdCAgfSByZXR1cm4gaXRbTUVUQV0udztcblx0fTtcblx0Ly8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG5cdHZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXHR2YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIEtFWTogICAgICBNRVRBLFxuXHQgIE5FRUQ6ICAgICBmYWxzZSxcblx0ICBmYXN0S2V5OiAgZmFzdEtleSxcblx0ICBnZXRXZWFrOiAgZ2V0V2Vhayxcblx0ICBvbkZyZWV6ZTogb25GcmVlemVcblx0fTtcblxuLyoqKi8gfSxcbi8qIDc3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG5cdCAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG5cdCAgLCBtZXRhICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpXG5cdCAgLCBmYWlscyAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpXG5cdCAgLCBoaWRlICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpXG5cdCAgLCByZWRlZmluZUFsbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpXG5cdCAgLCBmb3JPZiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzApXG5cdCAgLCBhbkluc3RhbmNlICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpXG5cdCAgLCBpc09iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXG5cdCAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjApXG5cdCAgLCBkUCAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpLmZcblx0ICAsIGVhY2ggICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OCkoMClcblx0ICAsIERFU0NSSVBUT1JTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKXtcblx0ICB2YXIgQmFzZSAgPSBnbG9iYWxbTkFNRV1cblx0ICAgICwgQyAgICAgPSBCYXNlXG5cdCAgICAsIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJ1xuXHQgICAgLCBwcm90byA9IEMgJiYgQy5wcm90b3R5cGVcblx0ICAgICwgTyAgICAgPSB7fTtcblx0ICBpZighREVTQ1JJUFRPUlMgfHwgdHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcblx0ICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcblx0ICB9KSkpe1xuXHQgICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3Jcblx0ICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG5cdCAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG5cdCAgICBtZXRhLk5FRUQgPSB0cnVlO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcblx0ICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUsICdfYycpO1xuXHQgICAgICB0YXJnZXQuX2MgPSBuZXcgQmFzZTtcblx0ICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRhcmdldFtBRERFUl0sIHRhcmdldCk7XG5cdCAgICB9KTtcblx0ICAgIGVhY2goJ2FkZCxjbGVhcixkZWxldGUsZm9yRWFjaCxnZXQsaGFzLHNldCxrZXlzLHZhbHVlcyxlbnRyaWVzLHRvSlNPTicuc3BsaXQoJywnKSxmdW5jdGlvbihLRVkpe1xuXHQgICAgICB2YXIgSVNfQURERVIgPSBLRVkgPT0gJ2FkZCcgfHwgS0VZID09ICdzZXQnO1xuXHQgICAgICBpZihLRVkgaW4gcHJvdG8gJiYgIShJU19XRUFLICYmIEtFWSA9PSAnY2xlYXInKSloaWRlKEMucHJvdG90eXBlLCBLRVksIGZ1bmN0aW9uKGEsIGIpe1xuXHQgICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgS0VZKTtcblx0ICAgICAgICBpZighSVNfQURERVIgJiYgSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkpcmV0dXJuIEtFWSA9PSAnZ2V0JyA/IHVuZGVmaW5lZCA6IGZhbHNlO1xuXHQgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jW0tFWV0oYSA9PT0gMCA/IDAgOiBhLCBiKTtcblx0ICAgICAgICByZXR1cm4gSVNfQURERVIgPyB0aGlzIDogcmVzdWx0O1xuXHQgICAgICB9KTtcblx0ICAgIH0pO1xuXHQgICAgaWYoJ3NpemUnIGluIHByb3RvKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcblx0ICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9jLnNpemU7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cdFxuXHQgIE9bTkFNRV0gPSBDO1xuXHQgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GLCBPKTtcblx0XG5cdCAgaWYoIUlTX1dFQUspY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXHRcblx0ICByZXR1cm4gQztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDc4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAwIC0+IEFycmF5I2ZvckVhY2hcblx0Ly8gMSAtPiBBcnJheSNtYXBcblx0Ly8gMiAtPiBBcnJheSNmaWx0ZXJcblx0Ly8gMyAtPiBBcnJheSNzb21lXG5cdC8vIDQgLT4gQXJyYXkjZXZlcnlcblx0Ly8gNSAtPiBBcnJheSNmaW5kXG5cdC8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG5cdHZhciBjdHggICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG5cdCAgLCBJT2JqZWN0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpXG5cdCAgLCB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNSlcblx0ICAsIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIGFzYyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVFlQRSwgJGNyZWF0ZSl7XG5cdCAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcblx0ICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuXHQgICAgLCBJU19TT01FICAgICAgID0gVFlQRSA9PSAzXG5cdCAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcblx0ICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuXHQgICAgLCBOT19IT0xFUyAgICAgID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVhcblx0ICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuXHQgIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG5cdCAgICB2YXIgTyAgICAgID0gdG9PYmplY3QoJHRoaXMpXG5cdCAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuXHQgICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuXHQgICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKVxuXHQgICAgICAsIGluZGV4ICA9IDBcblx0ICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG5cdCAgICAgICwgdmFsLCByZXM7XG5cdCAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuXHQgICAgICB2YWwgPSBzZWxmW2luZGV4XTtcblx0ICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcblx0ICAgICAgaWYoVFlQRSl7XG5cdCAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG5cdCAgICAgICAgZWxzZSBpZihyZXMpc3dpdGNoKFRZUEUpe1xuXHQgICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcblx0ICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG5cdCAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgICAgICAgLy8gZmluZEluZGV4XG5cdCAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG5cdCAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNzkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcblx0dmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oODApO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXtcblx0ICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogODAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXG5cdCAgLCBpc0FycmF5ICA9IF9fd2VicGFja19yZXF1aXJlX18oODEpXG5cdCAgLCBTUEVDSUVTICA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpKCdzcGVjaWVzJyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXtcblx0ICB2YXIgQztcblx0ICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG5cdCAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG5cdCAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuXHQgICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG5cdCAgICBpZihpc09iamVjdChDKSl7XG5cdCAgICAgIEMgPSBDW1NQRUNJRVNdO1xuXHQgICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG5cdCAgICB9XG5cdCAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogODEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG5cdHZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcblx0ICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDgyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG5cdHZhciAkZXhwb3J0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKSgnU2V0Jyl9KTtcblxuLyoqKi8gfSxcbi8qIDgzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG5cdHZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NClcblx0ICAsIGZyb20gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcblx0ICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7XG5cdCAgICBpZihjbGFzc29mKHRoaXMpICE9IE5BTUUpdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcblx0ICAgIHJldHVybiBmcm9tKHRoaXMpO1xuXHQgIH07XG5cdH07XG5cbi8qKiovIH0sXG4vKiA4NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGZvck9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXIsIElURVJBVE9SKXtcblx0ICB2YXIgcmVzdWx0ID0gW107XG5cdCAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiA4NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0dmFyIF9kZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODYpO1xuXHRcblx0dmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuXHQgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG5cdCAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcblx0ICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcblx0ICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuXHQgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcblx0ICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuXHQgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuXHQgIH07XG5cdH0oKTtcblxuLyoqKi8gfSxcbi8qIDg2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oODcpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA4NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg4OCk7XG5cdHZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCkuT2JqZWN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuXHQgIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogODggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdC8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG5cdCRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMzIpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5mfSk7XG5cbi8qKiovIH0sXG4vKiA4OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0dmFyIF90eXBlb2YyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHR2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuXHQgIGlmICghc2VsZikge1xuXHQgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA5MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0dmFyIF9pdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpO1xuXHRcblx0dmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cdFxuXHR2YXIgX3N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTQpO1xuXHRcblx0dmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuXHQgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcblx0fSA6IGZ1bmN0aW9uIChvYmopIHtcblx0ICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg5MiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDkyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MykuZignaXRlcmF0b3InKTtcblxuLyoqKi8gfSxcbi8qIDkzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblxuLyoqKi8gfSxcbi8qIDk0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oOTUpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA5NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg5Nik7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KS5TeW1ib2w7XG5cbi8qKiovIH0sXG4vKiA5NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHQvLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG5cdHZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG5cdCAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcblx0ICAsIERFU0NSSVBUT1JTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcblx0ICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMylcblx0ICAsIHJlZGVmaW5lICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NClcblx0ICAsIE1FVEEgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NikuS0VZXG5cdCAgLCAkZmFpbHMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpXG5cdCAgLCBzaGFyZWQgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpXG5cdCAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjApXG5cdCAgLCB1aWQgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjApXG5cdCAgLCB3a3MgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpXG5cdCAgLCB3a3NFeHQgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTMpXG5cdCAgLCB3a3NEZWZpbmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTcpXG5cdCAgLCBrZXlPZiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTgpXG5cdCAgLCBlbnVtS2V5cyAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpXG5cdCAgLCBpc0FycmF5ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oODEpXG5cdCAgLCBhbk9iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG5cdCAgLCB0b0lPYmplY3QgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG5cdCAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpXG5cdCAgLCBjcmVhdGVEZXNjICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpXG5cdCAgLCBfY3JlYXRlICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpXG5cdCAgLCBnT1BORXh0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTAxKVxuXHQgICwgJEdPUEQgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KVxuXHQgICwgJERQICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KVxuXHQgICwgJGtleXMgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG5cdCAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcblx0ICAsIGRQICAgICAgICAgICAgID0gJERQLmZcblx0ICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG5cdCAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcblx0ICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT05cblx0ICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG5cdCAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG5cdCAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG5cdCAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKVxuXHQgICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuXHQgICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG5cdCAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpXG5cdCAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG5cdCAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdXG5cdCAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcblx0ICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG5cdC8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xuXHR2YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblx0XG5cdC8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xuXHR2YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuXHQgIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcblx0ICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuXHQgIH0pKS5hICE9IDc7XG5cdH0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG5cdCAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG5cdCAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuXHQgIGRQKGl0LCBrZXksIEQpO1xuXHQgIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcblx0fSA6IGRQO1xuXHRcblx0dmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuXHQgIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG5cdCAgc3ltLl9rID0gdGFnO1xuXHQgIHJldHVybiBzeW07XG5cdH07XG5cdFxuXHR2YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG5cdH0gOiBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcblx0fTtcblx0XG5cdHZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcblx0ICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcblx0ICBhbk9iamVjdChpdCk7XG5cdCAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcblx0ICBhbk9iamVjdChEKTtcblx0ICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG5cdCAgICBpZighRC5lbnVtZXJhYmxlKXtcblx0ICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG5cdCAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuXHQgICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcblx0ICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG5cdCAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG5cdH07XG5cdHZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuXHQgIGFuT2JqZWN0KGl0KTtcblx0ICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG5cdCAgICAsIGkgICAgPSAwXG5cdCAgICAsIGwgPSBrZXlzLmxlbmd0aFxuXHQgICAgLCBrZXk7XG5cdCAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXHR2YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG5cdCAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xuXHR9O1xuXHR2YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcblx0ICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuXHQgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcblx0ICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG5cdH07XG5cdHZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuXHQgIGl0ICA9IHRvSU9iamVjdChpdCk7XG5cdCAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcblx0ICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuXHQgIHZhciBEID0gZ09QRChpdCwga2V5KTtcblx0ICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcblx0ICByZXR1cm4gRDtcblx0fTtcblx0dmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG5cdCAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcblx0ICAgICwgcmVzdWx0ID0gW11cblx0ICAgICwgaSAgICAgID0gMFxuXHQgICAgLCBrZXk7XG5cdCAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG5cdCAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcblx0ICB9IHJldHVybiByZXN1bHQ7XG5cdH07XG5cdHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcblx0ICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG5cdCAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKVxuXHQgICAgLCByZXN1bHQgPSBbXVxuXHQgICAgLCBpICAgICAgPSAwXG5cdCAgICAsIGtleTtcblx0ICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcblx0ICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuXHQgIH0gcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0XG5cdC8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuXHRpZighVVNFX05BVElWRSl7XG5cdCAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuXHQgICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG5cdCAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcblx0ICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuXHQgICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG5cdCAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcblx0ICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcblx0ICAgIH07XG5cdCAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTtcblx0ICAgIHJldHVybiB3cmFwKHRhZyk7XG5cdCAgfTtcblx0ICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG5cdCAgICByZXR1cm4gdGhpcy5faztcblx0ICB9KTtcblx0XG5cdCAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cdCAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTtcblx0ICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMikuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuXHQgIF9fd2VicGFja19yZXF1aXJlX18oNDYpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHQgIF9fd2VicGFja19yZXF1aXJlX18oMTAwKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblx0XG5cdCAgaWYoREVTQ1JJUFRPUlMgJiYgIV9fd2VicGFja19yZXF1aXJlX18oNTMpKXtcblx0ICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuXHQgIH1cblx0XG5cdCAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcblx0ICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG5cdCAgfVxuXHR9XG5cdFxuXHQkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cdFxuXHRmb3IodmFyIHN5bWJvbHMgPSAoXG5cdCAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcblx0ICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG5cdCkuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXHRcblx0Zm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcblx0ICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcblx0ICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcblx0ICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcblx0ICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG5cdCAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcblx0ICB9LFxuXHQgIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuXHQgIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG5cdCAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcblx0ICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcblx0ICB9LFxuXHQgIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcblx0ICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG5cdH0pO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcblx0ICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG5cdCAgY3JlYXRlOiAkY3JlYXRlLFxuXHQgIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuXHQgIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG5cdCAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcblx0ICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcblx0ICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG5cdCAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuXHQgIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5cdCAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG5cdCAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuXHQgIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xuXHR9KTtcblx0XG5cdC8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuXHQkSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcblx0ICB2YXIgUyA9ICRTeW1ib2woKTtcblx0ICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuXHQgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuXHQgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG5cdCAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcblx0fSkpLCAnSlNPTicsIHtcblx0ICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG5cdCAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcblx0ICAgIHZhciBhcmdzID0gW2l0XVxuXHQgICAgICAsIGkgICAgPSAxXG5cdCAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcblx0ICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG5cdCAgICByZXBsYWNlciA9IGFyZ3NbMV07XG5cdCAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcblx0ICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcblx0ICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG5cdCAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuXHQgICAgfTtcblx0ICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcblx0ICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcblx0ICB9XG5cdH0pO1xuXHRcblx0Ly8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuXHQkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuXHQvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5cdHNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcblx0Ly8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuXHRzZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuXHQvLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuXHRzZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuLyoqKi8gfSxcbi8qIDk3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2xvYmFsICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHQgICwgY29yZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KVxuXHQgICwgTElCUkFSWSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKVxuXHQgICwgd2tzRXh0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKVxuXHQgICwgZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5mO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuXHQgIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG5cdCAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA5OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGdldEtleXMgICA9IF9fd2VicGFja19yZXF1aXJlX18oNylcblx0ICAsIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuXHQgIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuXHQgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG5cdCAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG5cdCAgICAsIGluZGV4ICA9IDBcblx0ICAgICwga2V5O1xuXHQgIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA5OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcblx0dmFyIGdldEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG5cdCAgLCBnT1BTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApXG5cdCAgLCBwSUUgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcblx0ICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcblx0ICBpZihnZXRTeW1ib2xzKXtcblx0ICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcblx0ICAgICAgLCBpc0VudW0gID0gcElFLmZcblx0ICAgICAgLCBpICAgICAgID0gMFxuXHQgICAgICAsIGtleTtcblx0ICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpO1xuXHQgIH0gcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0ZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqKi8gfSxcbi8qIDEwMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xuXHR2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMClcblx0ICAsIGdPUE4gICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTAyKS5mXG5cdCAgLCB0b1N0cmluZyAgPSB7fS50b1N0cmluZztcblx0XG5cdHZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG5cdCAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cdFxuXHR2YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiBnT1BOKGl0KTtcblx0ICB9IGNhdGNoKGUpe1xuXHQgICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuXHQgIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDEwMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuXHR2YXIgJGtleXMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcblx0ICAsIGhpZGRlbktleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblx0XG5cdGV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG5cdCAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KSgnYXN5bmNJdGVyYXRvcicpO1xuXG4vKioqLyB9LFxuLyogMTA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KSgnb2JzZXJ2YWJsZScpO1xuXG4vKioqLyB9LFxuLyogMTA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHR2YXIgX3NldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpO1xuXHRcblx0dmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cdFxuXHR2YXIgX2NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTtcblx0XG5cdHZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cdFxuXHR2YXIgX3R5cGVvZjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblx0XG5cdHZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuXHQgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcblx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuXHQgIH1cblx0XG5cdCAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcblx0ICAgIGNvbnN0cnVjdG9yOiB7XG5cdCAgICAgIHZhbHVlOiBzdWJDbGFzcyxcblx0ICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG5cdCAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH1cblx0ICB9KTtcblx0ICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNyksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDEwNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMDgpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcblxuLyoqKi8gfSxcbi8qIDEwOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcblx0dmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0JGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IF9fd2VicGFja19yZXF1aXJlX18oMTA5KS5zZXR9KTtcblxuLyoqKi8gfSxcbi8qIDEwOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG5cdC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXG5cdCAgLCBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHR2YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7XG5cdCAgYW5PYmplY3QoTyk7XG5cdCAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0ICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpe1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIHNldCA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpKEZ1bmN0aW9uLmNhbGwsIF9fd2VicGFja19yZXF1aXJlX18oNDUpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG5cdCAgICAgICAgc2V0KHRlc3QsIFtdKTtcblx0ICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcblx0ICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG5cdCAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuXHQgICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG5cdCAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuXHQgICAgICAgIHJldHVybiBPO1xuXHQgICAgICB9O1xuXHQgICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcblx0ICBjaGVjazogY2hlY2tcblx0fTtcblxuLyoqKi8gfSxcbi8qIDExMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDExMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMTIpO1xuXHR2YXIgJE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpLk9iamVjdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCl7XG5cdCAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG5cdC8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuXHQkZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IF9fd2VicGFja19yZXF1aXJlX18oNTcpfSk7XG5cbi8qKiovIH0sXG4vKiAxMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcblx0ICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxyXG5cdCAqIEBsaWNlbnNlXHJcblx0ICogSmF2YVNjcmlwdCBJbnRlcnByZXRlclxyXG5cdCAqXHJcblx0ICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlIEluYy5cclxuXHQgKlxyXG5cdCAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcblx0ICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5cdCAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cdCAqXHJcblx0ICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHQgKlxyXG5cdCAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuXHQgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcblx0ICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblx0ICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG5cdCAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG5cdCAqL1xuXHRcblx0LyoqXHJcblx0ICogQGZpbGVvdmVydmlldyBJbnRlcnByZXRpbmcgSmF2YVNjcmlwdCBpbiBKYXZhU2NyaXB0LlxyXG5cdCAqIEBhdXRob3IgZnJhc2VyQGdvb2dsZS5jb20gKE5laWwgRnJhc2VyKVxyXG5cdCAqL1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcclxuXHQgKiBDcmVhdGUgYSBuZXcgaW50ZXJwcmV0ZXIuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd8IU9iamVjdH0gY29kZSBSYXcgSmF2YVNjcmlwdCB0ZXh0IG9yIEFTVC5cclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRfaW5pdEZ1bmMgT3B0aW9uYWwgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uICBVc2VkIHRvXHJcblx0ICogICAgIGRlZmluZSBBUElzLiAgV2hlbiBjYWxsZWQgaXQgaXMgcGFzc2VkIHRoZSBpbnRlcnByZXRlciBvYmplY3QgYW5kIHRoZVxyXG5cdCAqICAgICBnbG9iYWwgc2NvcGUgb2JqZWN0LlxyXG5cdCAqIEBjb25zdHJ1Y3RvclxyXG5cdCAqL1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTtcblx0XG5cdHZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cdFxuXHR2YXIgX3N0cmluZ2lmeSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE1KTtcblx0XG5cdHZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7XG5cdFxuXHR2YXIgX3R5cGVvZjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblx0XG5cdHZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXHRcblx0dmFyIF9tYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNyk7XG5cdFxuXHR2YXIgX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXApO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMyk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oODUpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0dmFyIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19hY29ybkVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjEpO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovdmFyIGFjb3JuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2Fjb3JuRXMpO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgSW50ZXJwcmV0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovSW50ZXJwcmV0ZXIoY29kZSwgb3B0X2luaXRGdW5jKSB7XG5cdCAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJbnRlcnByZXRlcik7XG5cdFxuXHQgICAgaWYgKHR5cGVvZiBjb2RlID09ICdzdHJpbmcnKSB7XG5cdCAgICAgIGNvZGUgPSBhY29ybi5wYXJzZShjb2RlKTtcblx0ICAgIH1cblx0ICAgIHRoaXMub2JqZWN0TWFwID0gbmV3IC8qaXN0YW5idWwgaWdub3JlIG5leHQqL19tYXAyLmRlZmF1bHQoKTtcblx0ICAgIHRoaXMuYXN0ID0gY29kZTtcblx0ICAgIHRoaXMuaW5pdEZ1bmNfID0gb3B0X2luaXRGdW5jO1xuXHQgICAgdGhpcy5wYXVzZWRfID0gZmFsc2U7XG5cdCAgICAvLyBQcmVkZWZpbmUgc29tZSBjb21tb24gcHJpbWl0aXZlcyBmb3IgcGVyZm9ybWFuY2UuXG5cdCAgICB0aGlzLlVOREVGSU5FRCA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUodW5kZWZpbmVkLCB0aGlzKTtcblx0ICAgIHRoaXMuTlVMTCA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUobnVsbCwgdGhpcyk7XG5cdCAgICB0aGlzLlRSVUUgPSBuZXcgSW50ZXJwcmV0ZXIuUHJpbWl0aXZlKHRydWUsIHRoaXMpO1xuXHQgICAgdGhpcy5GQUxTRSA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoZmFsc2UsIHRoaXMpO1xuXHQgICAgdGhpcy5OVU1CRVJfWkVSTyA9IG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoMCwgdGhpcyk7XG5cdCAgICB0aGlzLk5VTUJFUl9PTkUgPSBuZXcgSW50ZXJwcmV0ZXIuUHJpbWl0aXZlKDEsIHRoaXMpO1xuXHQgICAgdGhpcy5TVFJJTkdfRU1QVFkgPSBuZXcgSW50ZXJwcmV0ZXIuUHJpbWl0aXZlKCcnLCB0aGlzKTtcblx0ICAgIHZhciBzY29wZSA9IHRoaXMuY3JlYXRlU2NvcGUodGhpcy5hc3QsIG51bGwpO1xuXHQgICAgLy8gRml4IHRoZSBwYXJlbnQgcHJvcGVydGllcyBub3cgdGhhdCB0aGUgZ2xvYmFsIHNjb3BlIGV4aXN0cy5cblx0ICAgIC8vdGhpcy5VTkRFRklORUQucGFyZW50ID0gdW5kZWZpbmVkO1xuXHQgICAgLy90aGlzLk5VTEwucGFyZW50ID0gdW5kZWZpbmVkO1xuXHQgICAgdGhpcy5UUlVFLnBhcmVudCA9IHRoaXMuQk9PTEVBTjtcblx0ICAgIHRoaXMuRkFMU0UucGFyZW50ID0gdGhpcy5CT09MRUFOO1xuXHQgICAgdGhpcy5OVU1CRVJfWkVSTy5wYXJlbnQgPSB0aGlzLk5VTUJFUjtcblx0ICAgIHRoaXMuTlVNQkVSX09ORS5wYXJlbnQgPSB0aGlzLk5VTUJFUjtcblx0ICAgIHRoaXMuU1RSSU5HX0VNUFRZLnBhcmVudCA9IHRoaXMuU1RSSU5HO1xuXHQgICAgdGhpcy5zdGF0ZVN0YWNrID0gW3tcblx0ICAgICAgbm9kZTogdGhpcy5hc3QsXG5cdCAgICAgIHNjb3BlOiBzY29wZSxcblx0ICAgICAgdGhpc0V4cHJlc3Npb246IHNjb3BlLFxuXHQgICAgICBkb25lOiBmYWxzZVxuXHQgICAgfV07XG5cdCAgfVxuXHRcblx0ICAvKipcclxuXHQgICAqIEFkZCBtb3JlIGNvZGUgdG8gdGhlIGludGVycHJldGVyLlxyXG5cdCAgICogQHBhcmFtIHtzdHJpbmd8IU9iamVjdH0gY29kZSBSYXcgSmF2YVNjcmlwdCB0ZXh0IG9yIEFTVC5cclxuXHQgICAqL1xuXHRcblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSW50ZXJwcmV0ZXIsIFt7XG5cdCAgICBrZXk6ICdhcHBlbmRDb2RlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRDb2RlKGNvZGUpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrW3RoaXMuc3RhdGVTdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgaWYgKCFzdGF0ZSB8fCBzdGF0ZS5ub2RlLnR5cGUgIT0gJ1Byb2dyYW0nKSB7XG5cdCAgICAgICAgdGhyb3cgRXJyb3IoJ0V4cGVjdGluZyBvcmlnaW5hbCBBU1QgdG8gc3RhcnQgd2l0aCBhIFByb2dyYW0gbm9kZS4nKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodHlwZW9mIGNvZGUgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBjb2RlID0gYWNvcm4ucGFyc2UoY29kZSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKCFjb2RlIHx8IGNvZGUudHlwZSAhPSAnUHJvZ3JhbScpIHtcblx0ICAgICAgICB0aHJvdyBFcnJvcignRXhwZWN0aW5nIG5ldyBBU1QgdG8gc3RhcnQgd2l0aCBhIFByb2dyYW0gbm9kZS4nKTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBBcHBlbmQgdGhlIG5ldyBwcm9ncmFtIHRvIHRoZSBvbGQgb25lLlxuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbm9kZTsgbm9kZSA9IGNvZGUuYm9keVtpXTsgaSsrKSB7XG5cdCAgICAgICAgc3RhdGUubm9kZS5ib2R5LnB1c2gobm9kZSk7XG5cdCAgICAgIH1cblx0ICAgICAgc3RhdGUuZG9uZSA9IGZhbHNlO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBFeGVjdXRlIG9uZSBzdGVwIG9mIHRoZSBpbnRlcnByZXRlci5cclxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIHN0ZXAgd2FzIGV4ZWN1dGVkLCBmYWxzZSBpZiBubyBtb3JlIGluc3RydWN0aW9ucy5cclxuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXAnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXAoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgaWYgKCFzdGF0ZSB8fCBzdGF0ZS5ub2RlLnR5cGUgPT0gJ1Byb2dyYW0nICYmIHN0YXRlLmRvbmUpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXVzZWRfKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpc1snc3RlcCcgKyBzdGF0ZS5ub2RlLnR5cGVdKCk7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBFeGVjdXRlIHRoZSBpbnRlcnByZXRlciB0byBwcm9ncmFtIGNvbXBsZXRpb24uICBWdWxuZXJhYmxlIHRvIGluZmluaXRlIGxvb3BzLlxyXG5cdCAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgZXhlY3V0aW9uIGlzIGFzeW5jaG9ub3VzbHkgYmxvY2tlZCxcclxuXHQgICAgICogICAgIGZhbHNlIGlmIG5vIG1vcmUgaW5zdHJ1Y3Rpb25zLlxyXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAncnVuJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBydW4oKSB7XG5cdCAgICAgIHdoaWxlICghdGhpcy5wYXVzZWRfICYmIHRoaXMuc3RlcCgpKSB7fVxuXHQgICAgICByZXR1cm4gdGhpcy5wYXVzZWRfO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJbml0aWFsaXplIHRoZSBnbG9iYWwgc2NvcGUgd2l0aCBidWl0aW4gcHJvcGVydGllcyBhbmQgZnVuY3Rpb25zLlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2luaXRHbG9iYWxTY29wZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdEdsb2JhbFNjb3BlKHNjb3BlKSB7XG5cdCAgICAgIC8vIEluaXRpYWxpemUgdW5lZGl0YWJsZSBnbG9iYWwgcHJvcGVydGllcy5cblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0luZmluaXR5JywgdGhpcy5jcmVhdGVQcmltaXRpdmUoSW5maW5pdHkpLCB0cnVlKTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ05hTicsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKE5hTiksIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAndW5kZWZpbmVkJywgdGhpcy5VTkRFRklORUQsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnd2luZG93Jywgc2NvcGUsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnc2VsZicsIHNjb3BlLCBmYWxzZSk7IC8vIEVkaXRhYmxlLlxuXHRcblx0ICAgICAgLy8gSW5pdGlhbGl6ZSBnbG9iYWwgb2JqZWN0cy5cblx0ICAgICAgdGhpcy5pbml0RnVuY3Rpb24oc2NvcGUpO1xuXHQgICAgICB0aGlzLmluaXRPYmplY3Qoc2NvcGUpO1xuXHQgICAgICAvLyBVbmFibGUgdG8gc2V0IHNjb3BlJ3MgcGFyZW50IHByaW9yICh0aGlzLk9CSkVDVCBkaWQgbm90IGV4aXN0KS5cblx0ICAgICAgc2NvcGUucGFyZW50ID0gdGhpcy5PQkpFQ1Q7XG5cdCAgICAgIHRoaXMuaW5pdEFycmF5KHNjb3BlKTtcblx0ICAgICAgdGhpcy5pbml0TnVtYmVyKHNjb3BlKTtcblx0ICAgICAgdGhpcy5pbml0U3RyaW5nKHNjb3BlKTtcblx0ICAgICAgdGhpcy5pbml0Qm9vbGVhbihzY29wZSk7XG5cdCAgICAgIHRoaXMuaW5pdERhdGUoc2NvcGUpO1xuXHQgICAgICB0aGlzLmluaXRNYXRoKHNjb3BlKTtcblx0ICAgICAgdGhpcy5pbml0UmVnRXhwKHNjb3BlKTtcblx0ICAgICAgdGhpcy5pbml0SlNPTihzY29wZSk7XG5cdCAgICAgIHRoaXMuaW5pdEVycm9yKHNjb3BlKTtcblx0XG5cdCAgICAgIC8vIEluaXRpYWxpemUgZ2xvYmFsIGZ1bmN0aW9ucy5cblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihudW0pIHtcblx0ICAgICAgICBudW0gPSBudW0gfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShpc05hTihudW0udG9OdW1iZXIoKSkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnaXNOYU4nLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIobnVtKSB7XG5cdCAgICAgICAgbnVtID0gbnVtIHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoaXNGaW5pdGUobnVtLnRvTnVtYmVyKCkpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ2lzRmluaXRlJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSk7XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKHN0cikge1xuXHQgICAgICAgIHN0ciA9IHN0ciB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHBhcnNlRmxvYXQoc3RyLnRvTnVtYmVyKCkpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ3BhcnNlRmxvYXQnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoc3RyLCByYWRpeCkge1xuXHQgICAgICAgIHN0ciA9IHN0ciB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuXHQgICAgICAgIHJhZGl4ID0gcmFkaXggfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShwYXJzZUludChzdHIudG9TdHJpbmcoKSwgcmFkaXgudG9OdW1iZXIoKSkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAncGFyc2VJbnQnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcblx0XG5cdCAgICAgIHZhciBmdW5jID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5GVU5DVElPTik7XG5cdCAgICAgIGZ1bmMuZXZhbCA9IHRydWU7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoZnVuYywgJ2xlbmd0aCcsIHRoaXMuTlVNQkVSX09ORSwgdHJ1ZSk7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdldmFsJywgZnVuYyk7XG5cdFxuXHQgICAgICB2YXIgc3RyRnVuY3Rpb25zID0gW1tlc2NhcGUsICdlc2NhcGUnXSwgW3VuZXNjYXBlLCAndW5lc2NhcGUnXSwgW2RlY29kZVVSSSwgJ2RlY29kZVVSSSddLCBbZGVjb2RlVVJJQ29tcG9uZW50LCAnZGVjb2RlVVJJQ29tcG9uZW50J10sIFtlbmNvZGVVUkksICdlbmNvZGVVUkknXSwgW2VuY29kZVVSSUNvbXBvbmVudCwgJ2VuY29kZVVSSUNvbXBvbmVudCddXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gKG5hdGl2ZUZ1bmMpIHtcblx0ICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7XG5cdCAgICAgICAgICAgIHN0ciA9IChzdHIgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICBzdHIgPSBuYXRpdmVGdW5jKHN0cik7XG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAvLyBkZWNvZGVVUkkoJyV4eScpIHdpbGwgdGhyb3cgYW4gZXJyb3IuICBDYXRjaCBhbmQgcmV0aHJvdy5cblx0ICAgICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24odGhpc0ludGVycHJldGVyLlVSSV9FUlJPUiwgZS5tZXNzYWdlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIpO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9KHN0ckZ1bmN0aW9uc1tpXVswXSk7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgc3RyRnVuY3Rpb25zW2ldWzFdLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gUnVuIGFueSB1c2VyLXByb3ZpZGVkIGluaXRpYWxpemF0aW9uLlxuXHQgICAgICBpZiAodGhpcy5pbml0RnVuY18pIHtcblx0ICAgICAgICB0aGlzLmluaXRGdW5jXyh0aGlzLCBzY29wZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvKipcclxuXHQgICAgICogSW5pdGlhbGl6ZSB0aGUgRnVuY3Rpb24gY2xhc3MuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxyXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdEZ1bmN0aW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0RnVuY3Rpb24oc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3Rvci5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIodmFyX2FyZ3MpIHtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLkZVTkNUSU9OKSB7XG5cdCAgICAgICAgICAvLyBDYWxsZWQgd2l0aCBuZXcuXG5cdCAgICAgICAgICB2YXIgbmV3RnVuYyA9IHRoaXM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBuZXdGdW5jID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuRlVOQ1RJT04pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuXHQgICAgICAgICAgdmFyIGNvZGUgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBjb2RlID0gJyc7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBhcmdzID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdCAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldLnRvU3RyaW5nKCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBhcmdzID0gYXJncy5qb2luKCcsICcpO1xuXHQgICAgICAgIGlmIChhcmdzLmluZGV4T2YoJyknKSAhPSAtMSkge1xuXHQgICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ0Z1bmN0aW9uIGFyZyBzdHJpbmcgY29udGFpbnMgcGFyZW50aGVzaXMnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gSW50ZXJlc3RpbmdseSwgdGhlIHNjb3BlIGZvciBjb25zdHJ1Y3RlZCBmdW5jdGlvbnMgaXMgdGhlIGdsb2JhbCBzY29wZSxcblx0ICAgICAgICAvLyBldmVuIGlmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBpbiBzb21lIG90aGVyIHNjb3BlLlxuXHQgICAgICAgIG5ld0Z1bmMucGFyZW50U2NvcGUgPSB0aGlzSW50ZXJwcmV0ZXIuc3RhdGVTdGFja1t0aGlzSW50ZXJwcmV0ZXIuc3RhdGVTdGFjay5sZW5ndGggLSAxXS5zY29wZTtcblx0ICAgICAgICB2YXIgYXN0ID0gYWNvcm4ucGFyc2UoJyQgPSBmdW5jdGlvbignICsgYXJncyArICcpIHsnICsgY29kZSArICd9Jyk7XG5cdCAgICAgICAgbmV3RnVuYy5ub2RlID0gYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi5yaWdodDtcblx0ICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkobmV3RnVuYywgJ2xlbmd0aCcsIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobmV3RnVuYy5ub2RlLmxlbmd0aCksIHRydWUpO1xuXHQgICAgICAgIHJldHVybiBuZXdGdW5jO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLkZVTkNUSU9OID0gdGhpcy5jcmVhdGVPYmplY3QobnVsbCk7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdGdW5jdGlvbicsIHRoaXMuRlVOQ1RJT04pO1xuXHQgICAgICAvLyBNYW51YWxseSBzZXR1cCB0eXBlIGFuZCBwcm90b3R5cGUgYmVjYXVzZSBjcmVhdGVPYmogZG9lc24ndCByZWNvZ25pemVcblx0ICAgICAgLy8gdGhpcyBvYmplY3QgYXMgYSBmdW5jdGlvbiAodGhpcy5GVU5DVElPTiBkaWQgbm90IGV4aXN0KS5cblx0ICAgICAgdGhpcy5GVU5DVElPTi50eXBlID0gJ2Z1bmN0aW9uJztcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkZVTkNUSU9OLCAncHJvdG90eXBlJywgdGhpcy5jcmVhdGVPYmplY3QobnVsbCkpO1xuXHQgICAgICB0aGlzLkZVTkNUSU9OLm5hdGl2ZUZ1bmMgPSB3cmFwcGVyO1xuXHRcblx0ICAgICAgLy8gQ3JlYXRlIHN0dWIgZnVuY3Rpb25zIGZvciBhcHBseSBhbmQgY2FsbC5cblx0ICAgICAgLy8gVGhlc2UgYXJlIHByb2Nlc3NlZCBhcyBzcGVjaWFsIGNhc2VzIGluIHN0ZXBDYWxsRXhwcmVzc2lvbi5cblx0ICAgICAgdmFyIG5vZGUgPSB7XG5cdCAgICAgICAgdHlwZTogJ0Z1bmN0aW9uQXBwbHlfJyxcblx0ICAgICAgICBwYXJhbXM6IFtdLFxuXHQgICAgICAgIGlkOiBudWxsLFxuXHQgICAgICAgIGJvZHk6IG51bGwsXG5cdCAgICAgICAgc3RhcnQ6IDAsXG5cdCAgICAgICAgZW5kOiAwXG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5GVU5DVElPTi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2FwcGx5JywgdGhpcy5jcmVhdGVGdW5jdGlvbihub2RlLCB7fSksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgbm9kZSA9IHtcblx0ICAgICAgICB0eXBlOiAnRnVuY3Rpb25DYWxsXycsXG5cdCAgICAgICAgcGFyYW1zOiBbXSxcblx0ICAgICAgICBpZDogbnVsbCxcblx0ICAgICAgICBib2R5OiBudWxsLFxuXHQgICAgICAgIHN0YXJ0OiAwLFxuXHQgICAgICAgIGVuZDogMFxuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRlVOQ1RJT04ucHJvcGVydGllcy5wcm90b3R5cGUsICdjYWxsJywgdGhpcy5jcmVhdGVGdW5jdGlvbihub2RlLCB7fSksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIC8vIEZ1bmN0aW9uIGhhcyBubyBwYXJlbnQgdG8gaW5oZXJpdCBmcm9tLCBzbyBpdCBuZWVkcyBpdHMgb3duIG1hbmRhdG9yeVxuXHQgICAgICAvLyB0b1N0cmluZyBhbmQgdmFsdWVPZiBmdW5jdGlvbnMuXG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMudG9TdHJpbmcoKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5GVU5DVElPTi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRlVOQ1RJT04sICd0b1N0cmluZycsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy52YWx1ZU9mKCkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRlVOQ1RJT04ucHJvcGVydGllcy5wcm90b3R5cGUsICd2YWx1ZU9mJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRlVOQ1RJT04sICd2YWx1ZU9mJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJbml0aWFsaXplIHRoZSBPYmplY3QgY2xhc3MuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxyXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdE9iamVjdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdE9iamVjdChzY29wZSkge1xuXHQgICAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcblx0ICAgICAgdmFyIHdyYXBwZXI7XG5cdCAgICAgIC8vIE9iamVjdCBjb25zdHJ1Y3Rvci5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIodmFyX2FyZ3MpIHtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLk9CSkVDVCkge1xuXHQgICAgICAgICAgLy8gQ2FsbGVkIHdpdGggbmV3LlxuXHQgICAgICAgICAgdmFyIG5ld09iaiA9IHRoaXM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBuZXdPYmogPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5PQkpFQ1QpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3T2JqO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLk9CSkVDVCA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcik7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdPYmplY3QnLCB0aGlzLk9CSkVDVCk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh0aGlzLnRvU3RyaW5nKCkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuT0JKRUNULnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh0aGlzLnZhbHVlT2YoKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QucHJvcGVydGllcy5wcm90b3R5cGUsICd2YWx1ZU9mJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIocHJvcCkge1xuXHQgICAgICAgIHByb3AgPSAocHJvcCB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgIGlmIChrZXkgPT0gcHJvcCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLlRSVUU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuRkFMU0U7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QucHJvcGVydGllcy5wcm90b3R5cGUsICdoYXNPd25Qcm9wZXJ0eScsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKGtleSkge1xuXHQgICAgICAgIGtleSA9IChrZXkgfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9TdHJpbmcoKTtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSghKGtleSBpbiB0aGlzLm5vbmVudW1lcmFibGUpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIob2JqKSB7XG5cdCAgICAgICAgdmFyIHBzZXVkb0xpc3QgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XG5cdCAgICAgICAgdmFyIGkgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmoucHJvcGVydGllcykge1xuXHQgICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHBzZXVkb0xpc3QsIGksIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoa2V5KSk7XG5cdCAgICAgICAgICBpKys7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBwc2V1ZG9MaXN0O1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuT0JKRUNULCAnZ2V0T3duUHJvcGVydHlOYW1lcycsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKG9iaikge1xuXHQgICAgICAgIHZhciBwc2V1ZG9MaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuXHQgICAgICAgIHZhciBpID0gMDtcblx0ICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLnByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgIGlmIChrZXkgaW4gb2JqLm5vbmVudW1lcmFibGUpIHtcblx0ICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkocHNldWRvTGlzdCwgaSwgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShrZXkpKTtcblx0ICAgICAgICAgIGkrKztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHBzZXVkb0xpc3Q7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5PQkpFQ1QsICdrZXlzJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIob2JqLCBwcm9wLCBkZXNjcmlwdG9yKSB7XG5cdCAgICAgICAgcHJvcCA9IChwcm9wIHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQpLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgaWYgKCEoZGVzY3JpcHRvciBpbnN0YW5jZW9mIEludGVycHJldGVyLk9iamVjdCkpIHtcblx0ICAgICAgICAgIHRocm93IEVycm9yKCdQcm9wZXJ0eSBkZXNjcmlwdGlvbiBtdXN0IGJlIGFuIG9iamVjdC4nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG9iajtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk9CSkVDVCwgJ2RlZmluZVByb3BlcnR5JywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJbml0aWFsaXplIHRoZSBBcnJheSBjbGFzcy5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0QXJyYXknLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRBcnJheShzY29wZSkge1xuXHQgICAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcblx0ICAgICAgdmFyIGdldEludCA9IGZ1bmN0aW9uIGdldEludChvYmosIGRlZikge1xuXHQgICAgICAgIC8vIFJldHVybiBhbiBpbnRlZ2VyLCBvciB0aGUgZGVmYXVsdC5cblx0ICAgICAgICB2YXIgbiA9IG9iaiA/IE1hdGguZmxvb3Iob2JqLnRvTnVtYmVyKCkpIDogZGVmO1xuXHQgICAgICAgIGlmIChpc05hTihuKSkge1xuXHQgICAgICAgICAgbiA9IGRlZjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG47XG5cdCAgICAgIH07XG5cdCAgICAgIHZhciBzdHJpY3RDb21wID0gZnVuY3Rpb24gc3RyaWN0Q29tcChhLCBiKSB7XG5cdCAgICAgICAgLy8gU3RyaWN0ID09PSBjb21wYXJpc29uLlxuXHQgICAgICAgIGlmIChhLmlzUHJpbWl0aXZlICYmIGIuaXNQcmltaXRpdmUpIHtcblx0ICAgICAgICAgIHJldHVybiBhLmRhdGEgPT09IGIuZGF0YTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGEgPT09IGI7XG5cdCAgICAgIH07XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBBcnJheSBjb25zdHJ1Y3Rvci5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIodmFyX2FyZ3MpIHtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLkFSUkFZKSB7XG5cdCAgICAgICAgICAvLyBDYWxsZWQgd2l0aCBuZXcuXG5cdCAgICAgICAgICB2YXIgbmV3QXJyYXkgPSB0aGlzO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgbmV3QXJyYXkgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBmaXJzdCA9IGFyZ3VtZW50c1swXTtcblx0ICAgICAgICBpZiAoZmlyc3QgJiYgZmlyc3QudHlwZSA9PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgaWYgKGlzTmFOKHRoaXNJbnRlcnByZXRlci5hcnJheUluZGV4KGZpcnN0KSkpIHtcblx0ICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLnRocm93RXhjZXB0aW9uKHRoaXNJbnRlcnByZXRlci5SQU5HRV9FUlJPUiwgJ0ludmFsaWQgYXJyYXkgbGVuZ3RoJyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBuZXdBcnJheS5sZW5ndGggPSBmaXJzdC5kYXRhO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBuZXdBcnJheS5wcm9wZXJ0aWVzW2ldID0gYXJndW1lbnRzW2ldO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgbmV3QXJyYXkubGVuZ3RoID0gaTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG5ld0FycmF5O1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLkFSUkFZID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0FycmF5JywgdGhpcy5BUlJBWSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcigpIHtcblx0ICAgICAgICBpZiAodGhpcy5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIDFdO1xuXHQgICAgICAgICAgZGVsZXRlIHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIDFdO1xuXHQgICAgICAgICAgdGhpcy5sZW5ndGgtLTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFyIHZhbHVlID0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdwb3AnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcih2YXJfYXJncykge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICB0aGlzLnByb3BlcnRpZXNbdGhpcy5sZW5ndGhdID0gYXJndW1lbnRzW2ldO1xuXHQgICAgICAgICAgdGhpcy5sZW5ndGgrKztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5sZW5ndGgpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdwdXNoJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BlcnRpZXNbMF07XG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW2kgLSAxXSA9IHRoaXMucHJvcGVydGllc1tpXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHRoaXMubGVuZ3RoLS07XG5cdCAgICAgICAgICBkZWxldGUgdGhpcy5wcm9wZXJ0aWVzW3RoaXMubGVuZ3RoXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFyIHZhbHVlID0gdGhpc0ludGVycHJldGVyLlVOREVGSU5FRDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdzaGlmdCcsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKHZhcl9hcmdzKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAgIHRoaXMucHJvcGVydGllc1tpICsgYXJndW1lbnRzLmxlbmd0aF0gPSB0aGlzLnByb3BlcnRpZXNbaV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMubGVuZ3RoICs9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5sZW5ndGgpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICd1bnNoaWZ0JywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAvIDI7IGkrKykge1xuXHQgICAgICAgICAgdmFyIHRtcCA9IHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIGkgLSAxXTtcblx0ICAgICAgICAgIHRoaXMucHJvcGVydGllc1t0aGlzLmxlbmd0aCAtIGkgLSAxXSA9IHRoaXMucHJvcGVydGllc1tpXTtcblx0ICAgICAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9IHRtcDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5BUlJBWS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3JldmVyc2UnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihpbmRleCwgaG93bWFueSwgdmFyX2FyZ3MpIHtcblx0ICAgICAgICBpbmRleCA9IGdldEludChpbmRleCwgMCk7XG5cdCAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuXHQgICAgICAgICAgaW5kZXggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCArIGluZGV4LCAwKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdGhpcy5sZW5ndGgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBob3dtYW55ID0gZ2V0SW50KGhvd21hbnksIEluZmluaXR5KTtcblx0ICAgICAgICBob3dtYW55ID0gTWF0aC5taW4oaG93bWFueSwgdGhpcy5sZW5ndGggLSBpbmRleCk7XG5cdCAgICAgICAgdmFyIHJlbW92ZWQgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XG5cdCAgICAgICAgLy8gUmVtb3ZlIHNwZWNpZmllZCBlbGVtZW50cy5cblx0ICAgICAgICBmb3IgKHZhciBpID0gaW5kZXg7IGkgPCBpbmRleCArIGhvd21hbnk7IGkrKykge1xuXHQgICAgICAgICAgcmVtb3ZlZC5wcm9wZXJ0aWVzW3JlbW92ZWQubGVuZ3RoKytdID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xuXHQgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzW2ldID0gdGhpcy5wcm9wZXJ0aWVzW2kgKyBob3dtYW55XTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gTW92ZSBvdGhlciBlbGVtZW50IHRvIGZpbGwgdGhlIGdhcC5cblx0ICAgICAgICBmb3IgKHZhciBpID0gaW5kZXggKyBob3dtYW55OyBpIDwgdGhpcy5sZW5ndGggLSBob3dtYW55OyBpKyspIHtcblx0ICAgICAgICAgIHRoaXMucHJvcGVydGllc1tpXSA9IHRoaXMucHJvcGVydGllc1tpICsgaG93bWFueV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIERlbGV0ZSBzdXBlcmZsdW91cyBwcm9wZXJ0aWVzLlxuXHQgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIGhvd21hbnk7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICBkZWxldGUgdGhpcy5wcm9wZXJ0aWVzW2ldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmxlbmd0aCAtPSBob3dtYW55O1xuXHQgICAgICAgIC8vIEluc2VydCBzcGVjaWZpZWQgaXRlbXMuXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaS0tKSB7XG5cdCAgICAgICAgICB0aGlzLnByb3BlcnRpZXNbaSArIGFyZ3VtZW50cy5sZW5ndGggLSAyXSA9IHRoaXMucHJvcGVydGllc1tpXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5sZW5ndGggKz0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHRoaXMucHJvcGVydGllc1tpbmRleCArIGkgLSAyXSA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJlbW92ZWQ7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5BUlJBWS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3NwbGljZScsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKG9wdF9iZWdpbiwgb3B0X2VuZCkge1xuXHQgICAgICAgIHZhciBsaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuXHQgICAgICAgIHZhciBiZWdpbiA9IGdldEludChvcHRfYmVnaW4sIDApO1xuXHQgICAgICAgIGlmIChiZWdpbiA8IDApIHtcblx0ICAgICAgICAgIGJlZ2luID0gdGhpcy5sZW5ndGggKyBiZWdpbjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmVnaW4gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihiZWdpbiwgdGhpcy5sZW5ndGgpKTtcblx0ICAgICAgICB2YXIgZW5kID0gZ2V0SW50KG9wdF9lbmQsIHRoaXMubGVuZ3RoKTtcblx0ICAgICAgICBpZiAoZW5kIDwgMCkge1xuXHQgICAgICAgICAgZW5kID0gdGhpcy5sZW5ndGggKyBlbmQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVuZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGVuZCwgdGhpcy5sZW5ndGgpKTtcblx0ICAgICAgICB2YXIgbGVuZ3RoID0gMDtcblx0ICAgICAgICBmb3IgKHZhciBpID0gYmVnaW47IGkgPCBlbmQ7IGkrKykge1xuXHQgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XG5cdCAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkobGlzdCwgbGVuZ3RoKyssIGVsZW1lbnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbGlzdDtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAnc2xpY2UnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihvcHRfc2VwYXJhdG9yKSB7XG5cdCAgICAgICAgaWYgKCFvcHRfc2VwYXJhdG9yIHx8IG9wdF9zZXBhcmF0b3IuZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICB2YXIgc2VwID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgc2VwID0gb3B0X3NlcGFyYXRvci50b1N0cmluZygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgdGV4dCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgdGV4dFtpXSA9IHRoaXMucHJvcGVydGllc1tpXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGV4dC5qb2luKHNlcCkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuQVJSQVkucHJvcGVydGllcy5wcm90b3R5cGUsICdqb2luJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIodmFyX2FyZ3MpIHtcblx0ICAgICAgICB2YXIgbGlzdCA9IHRoaXNJbnRlcnByZXRlci5jcmVhdGVPYmplY3QodGhpc0ludGVycHJldGVyLkFSUkFZKTtcblx0ICAgICAgICB2YXIgbGVuZ3RoID0gMDtcblx0ICAgICAgICAvLyBTdGFydCBieSBjb3B5aW5nIHRoZSBjdXJyZW50IGFycmF5LlxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodGhpcywgaSk7XG5cdCAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkobGlzdCwgbGVuZ3RoKyssIGVsZW1lbnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIGFyZ3VtZW50cyBhbmQgY29weSB0aGVtIGluLlxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbaV07XG5cdCAgICAgICAgICBpZiAodGhpc0ludGVycHJldGVyLmlzYSh2YWx1ZSwgdGhpc0ludGVycHJldGVyLkFSUkFZKSkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzSW50ZXJwcmV0ZXIuZ2V0UHJvcGVydHkodmFsdWUsIGopO1xuXHQgICAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShsaXN0LCBsZW5ndGgrKywgZWxlbWVudCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShsaXN0LCBsZW5ndGgrKywgdmFsdWUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbGlzdDtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAnY29uY2F0JywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoc2VhcmNoRWxlbWVudCwgb3B0X2Zyb21JbmRleCkge1xuXHQgICAgICAgIHNlYXJjaEVsZW1lbnQgPSBzZWFyY2hFbGVtZW50IHx8IHRoaXNJbnRlcnByZXRlci5VTkRFRklORUQ7XG5cdCAgICAgICAgdmFyIGZyb21JbmRleCA9IGdldEludChvcHRfZnJvbUluZGV4LCAwKTtcblx0ICAgICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgZnJvbUluZGV4ID0gdGhpcy5sZW5ndGggKyBmcm9tSW5kZXg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZyb21JbmRleCA9IE1hdGgubWF4KDAsIGZyb21JbmRleCk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IGZyb21JbmRleDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpc0ludGVycHJldGVyLmdldFByb3BlcnR5KHRoaXMsIGkpO1xuXHQgICAgICAgICAgaWYgKHN0cmljdENvbXAoZWxlbWVudCwgc2VhcmNoRWxlbWVudCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoaSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKC0xKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAnaW5kZXhPZicsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKHNlYXJjaEVsZW1lbnQsIG9wdF9mcm9tSW5kZXgpIHtcblx0ICAgICAgICBzZWFyY2hFbGVtZW50ID0gc2VhcmNoRWxlbWVudCB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuXHQgICAgICAgIHZhciBmcm9tSW5kZXggPSBnZXRJbnQob3B0X2Zyb21JbmRleCwgdGhpcy5sZW5ndGgpO1xuXHQgICAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG5cdCAgICAgICAgICBmcm9tSW5kZXggPSB0aGlzLmxlbmd0aCArIGZyb21JbmRleDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZnJvbUluZGV4ID0gTWF0aC5taW4oZnJvbUluZGV4LCB0aGlzLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNJbnRlcnByZXRlci5nZXRQcm9wZXJ0eSh0aGlzLCBpKTtcblx0ICAgICAgICAgIGlmIChzdHJpY3RDb21wKGVsZW1lbnQsIHNlYXJjaEVsZW1lbnQpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSgtMSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5BUlJBWS5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2xhc3RJbmRleE9mJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIob3B0X2NvbXBGdW5jKSB7XG5cdCAgICAgICAgdmFyIGpzTGlzdCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAganNMaXN0W2ldID0gdGhpcy5wcm9wZXJ0aWVzW2ldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBUT0RPOiBBZGQgY3VzdG9tIHNvcnQgY29tcGFyaXNvbiBmdW5jdGlvbihvcHRfY29tcEZ1bmMpLlxuXHQgICAgICAgIGpzTGlzdC5zb3J0KCk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc0xpc3QubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eSh0aGlzLCBpLCBqc0xpc3RbaV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkFSUkFZLnByb3BlcnRpZXMucHJvdG90eXBlLCAnc29ydCcsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0TnVtYmVyJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIEluaXRpYWxpemUgdGhlIE51bWJlciBjbGFzcy5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXROdW1iZXIoc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBOdW1iZXIgY29uc3RydWN0b3IuXG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKHZhbHVlKSB7XG5cdCAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlLnRvTnVtYmVyKCkgOiAwO1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmVudCAhPSB0aGlzSW50ZXJwcmV0ZXIuTlVNQkVSKSB7XG5cdCAgICAgICAgICAvLyBDYWxsZWQgYXMgTnVtYmVyKCkuXG5cdCAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIENhbGxlZCBhcyBuZXcgTnVtYmVyKCkuXG5cdCAgICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuTlVNQkVSID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ051bWJlcicsIHRoaXMuTlVNQkVSKTtcblx0XG5cdCAgICAgIHZhciBudW1Db25zdHMgPSBbJ01BWF9WQUxVRScsICdNSU5fVkFMVUUnLCAnTmFOJywgJ05FR0FUSVZFX0lORklOSVRZJywgJ1BPU0lUSVZFX0lORklOSVRZJ107XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQ29uc3RzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk5VTUJFUiwgbnVtQ29uc3RzW2ldLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShOdW1iZXJbbnVtQ29uc3RzW2ldXSkpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihmcmFjdGlvbkRpZ2l0cykge1xuXHQgICAgICAgIGZyYWN0aW9uRGlnaXRzID0gZnJhY3Rpb25EaWdpdHMgPyBmcmFjdGlvbkRpZ2l0cy50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHZhciBuID0gdGhpcy50b051bWJlcigpO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG4udG9FeHBvbmVudGlhbChmcmFjdGlvbkRpZ2l0cykpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9FeHBvbmVudGlhbCcsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKGRpZ2l0cykge1xuXHQgICAgICAgIGRpZ2l0cyA9IGRpZ2l0cyA/IGRpZ2l0cy50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHZhciBuID0gdGhpcy50b051bWJlcigpO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG4udG9GaXhlZChkaWdpdHMpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLk5VTUJFUi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RvRml4ZWQnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihwcmVjaXNpb24pIHtcblx0ICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPyBwcmVjaXNpb24udG9OdW1iZXIoKSA6IHVuZGVmaW5lZDtcblx0ICAgICAgICB2YXIgbiA9IHRoaXMudG9OdW1iZXIoKTtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShuLnRvUHJlY2lzaW9uKHByZWNpc2lvbikpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9QcmVjaXNpb24nLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihyYWRpeCkge1xuXHQgICAgICAgIHJhZGl4ID0gcmFkaXggPyByYWRpeC50b051bWJlcigpIDogMTA7XG5cdCAgICAgICAgdmFyIG4gPSB0aGlzLnRvTnVtYmVyKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobi50b1N0cmluZyhyYWRpeCkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuTlVNQkVSLnByb3BlcnRpZXMucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdFN0cmluZycsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJbml0aWFsaXplIHRoZSBTdHJpbmcgY2xhc3MuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0U3RyaW5nKHNjb3BlKSB7XG5cdCAgICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuXHQgICAgICB2YXIgd3JhcHBlcjtcblx0ICAgICAgLy8gU3RyaW5nIGNvbnN0cnVjdG9yLlxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcih2YWx1ZSkge1xuXHQgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZS50b1N0cmluZygpIDogJyc7XG5cdCAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IHRoaXNJbnRlcnByZXRlci5TVFJJTkcpIHtcblx0ICAgICAgICAgIC8vIENhbGxlZCBhcyBTdHJpbmcoKS5cblx0ICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBTdHJpbmcoKS5cblx0ICAgICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5TVFJJTkcgPSB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnU3RyaW5nJywgdGhpcy5TVFJJTkcpO1xuXHRcblx0ICAgICAgdmFyIGZ1bmN0aW9ucyA9IFsndG9Mb3dlckNhc2UnLCAndG9VcHBlckNhc2UnLCAndG9Mb2NhbGVMb3dlckNhc2UnLCAndG9Mb2NhbGVVcHBlckNhc2UnXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gKG5hdGl2ZUZ1bmMpIHtcblx0ICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZUZ1bmMuYXBwbHkodGhpcykpO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9KFN0cmluZy5wcm90b3R5cGVbZnVuY3Rpb25zW2ldXSk7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgZnVuY3Rpb25zW2ldLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8vIFRyaW0gZnVuY3Rpb24gbWF5IG5vdCBleGlzdCBpbiBob3N0IGJyb3dzZXIuICBXcml0ZSB0aGVtIGZyb20gc2NyYXRjaC5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoKSB7XG5cdCAgICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RyaW0nLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKCkge1xuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnJlcGxhY2UoL15cXHMrL2csICcnKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICd0cmltTGVmdCcsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoKSB7XG5cdCAgICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIucmVwbGFjZSgvXFxzKyQvZywgJycpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3RyaW1SaWdodCcsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKG51bSkge1xuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgbnVtID0gKG51bSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b051bWJlcigpO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5jaGFyQXQobnVtKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdjaGFyQXQnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihudW0pIHtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIG51bSA9IChudW0gfHwgdGhpc0ludGVycHJldGVyLlVOREVGSU5FRCkudG9OdW1iZXIoKTtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShzdHIuY2hhckNvZGVBdChudW0pKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2NoYXJDb2RlQXQnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSB7XG5cdCAgICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICBzZWFyY2hWYWx1ZSA9IChzZWFyY2hWYWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xuXHQgICAgICAgIGZyb21JbmRleCA9IGZyb21JbmRleCA/IGZyb21JbmRleC50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5pbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2luZGV4T2YnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSB7XG5cdCAgICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICBzZWFyY2hWYWx1ZSA9IChzZWFyY2hWYWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xuXHQgICAgICAgIGZyb21JbmRleCA9IGZyb21JbmRleCA/IGZyb21JbmRleC50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5sYXN0SW5kZXhPZihzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdsYXN0SW5kZXhPZicsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKGNvbXBhcmVTdHJpbmcpIHtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIGNvbXBhcmVTdHJpbmcgPSAoY29tcGFyZVN0cmluZyB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5sb2NhbGVDb21wYXJlKGNvbXBhcmVTdHJpbmcpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ2xvY2FsZUNvbXBhcmUnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihzZXBhcmF0b3IsIGxpbWl0KSB7XG5cdCAgICAgICAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICBpZiAoc2VwYXJhdG9yKSB7XG5cdCAgICAgICAgICBzZXBhcmF0b3IgPSB0aGlzSW50ZXJwcmV0ZXIuaXNhKHNlcGFyYXRvciwgdGhpc0ludGVycHJldGVyLlJFR0VYUCkgPyBzZXBhcmF0b3IuZGF0YSA6IHNlcGFyYXRvci50b1N0cmluZygpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBpcyB0aGlzIHJlYWxseSBuZWNlc3Nhcnk/XG5cdCAgICAgICAgICBzZXBhcmF0b3IgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxpbWl0ID0gbGltaXQgPyBsaW1pdC50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHZhciBqc0xpc3QgPSBzdHIuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG5cdCAgICAgICAgdmFyIHBzZXVkb0xpc3QgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5BUlJBWSk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc0xpc3QubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShwc2V1ZG9MaXN0LCBpLCB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKGpzTGlzdFtpXSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcHNldWRvTGlzdDtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3NwbGl0JywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoaW5kZXhBLCBpbmRleEIpIHtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIGluZGV4QSA9IGluZGV4QSA/IGluZGV4QS50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIGluZGV4QiA9IGluZGV4QiA/IGluZGV4Qi50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5zdWJzdHJpbmcoaW5kZXhBLCBpbmRleEIpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORy5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3N1YnN0cmluZycsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKHN0YXJ0LCBsZW5ndGgpIHtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIHN0YXJ0ID0gc3RhcnQgPyBzdGFydC50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIGxlbmd0aCA9IGxlbmd0aCA/IGxlbmd0aC50b051bWJlcigpIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5zdWJzdHIoc3RhcnQsIGxlbmd0aCkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuU1RSSU5HLnByb3BlcnRpZXMucHJvdG90eXBlLCAnc3Vic3RyJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIodmFyX2FyZ3MpIHtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICBzdHIgKz0gYXJndW1lbnRzW2ldLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0cik7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdjb25jYXQnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihiZWdpblNsaWNlLCBlbmRTbGljZSkge1xuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgYmVnaW5TbGljZSA9IGJlZ2luU2xpY2UgPyBiZWdpblNsaWNlLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgZW5kU2xpY2UgPSBlbmRTbGljZSA/IGVuZFNsaWNlLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoc3RyLnNsaWNlKGJlZ2luU2xpY2UsIGVuZFNsaWNlKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdzbGljZScsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKHJlZ2V4cCkge1xuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgcmVnZXhwID0gcmVnZXhwID8gcmVnZXhwLmRhdGEgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4cCk7XG5cdCAgICAgICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG5cdCAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLk5VTEw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBwc2V1ZG9MaXN0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2gubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHRoaXNJbnRlcnByZXRlci5zZXRQcm9wZXJ0eShwc2V1ZG9MaXN0LCBpLCB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG1hdGNoW2ldKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBwc2V1ZG9MaXN0O1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuU1RSSU5HLnByb3BlcnRpZXMucHJvdG90eXBlLCAnbWF0Y2gnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihyZWdleHApIHtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIHJlZ2V4cCA9IHJlZ2V4cCA/IHJlZ2V4cC5kYXRhIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5zZWFyY2gocmVnZXhwKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdzZWFyY2gnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihzdWJzdHIsIG5ld1N1YlN0cikge1xuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgc3Vic3RyID0gKHN1YnN0ciB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS52YWx1ZU9mKCk7XG5cdCAgICAgICAgbmV3U3ViU3RyID0gKG5ld1N1YlN0ciB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEKS50b1N0cmluZygpO1xuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHN0ci5yZXBsYWNlKHN1YnN0ciwgbmV3U3ViU3RyKSk7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5TVFJJTkcucHJvcGVydGllcy5wcm90b3R5cGUsICdyZXBsYWNlJywgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHRcblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIodmFyX2FyZ3MpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgYXJndW1lbnRzW2ldID0gYXJndW1lbnRzW2ldLnRvTnVtYmVyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBhcmd1bWVudHMpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlNUUklORywgJ2Zyb21DaGFyQ29kZScsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0Qm9vbGVhbicsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJbml0aWFsaXplIHRoZSBCb29sZWFuIGNsYXNzLlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdEJvb2xlYW4oc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBCb29sZWFuIGNvbnN0cnVjdG9yLlxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcih2YWx1ZSkge1xuXHQgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZS50b0Jvb2xlYW4oKSA6IGZhbHNlO1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmVudCAhPSB0aGlzSW50ZXJwcmV0ZXIuQk9PTEVBTikge1xuXHQgICAgICAgICAgLy8gQ2FsbGVkIGFzIEJvb2xlYW4oKS5cblx0ICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gQ2FsbGVkIGFzIG5ldyBCb29sZWFuKCkuXG5cdCAgICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuQk9PTEVBTiA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcik7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdCb29sZWFuJywgdGhpcy5CT09MRUFOKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0RGF0ZScsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJbml0aWFsaXplIHRoZSBEYXRlIGNsYXNzLlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IHNjb3BlIEdsb2JhbCBzY29wZS5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdERhdGUoc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBEYXRlIGNvbnN0cnVjdG9yLlxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihhLCBiLCBjLCBkLCBlLCBmLCBoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMucGFyZW50ID09IHRoaXNJbnRlcnByZXRlci5EQVRFKSB7XG5cdCAgICAgICAgICAvLyBDYWxsZWQgd2l0aCBuZXcuXG5cdCAgICAgICAgICB2YXIgbmV3RGF0ZSA9IHRoaXM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBuZXdEYXRlID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuREFURSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHQgICAgICAgICAgbmV3RGF0ZS5kYXRhID0gbmV3IERhdGUoKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSAmJiAoYS50eXBlID09ICdzdHJpbmcnIHx8IHRoaXNJbnRlcnByZXRlci5pc2EoYSwgdGhpc0ludGVycHJldGVyLlNUUklORykpKSB7XG5cdCAgICAgICAgICBuZXdEYXRlLmRhdGEgPSBuZXcgRGF0ZShhLnRvU3RyaW5nKCkpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgYXJncyA9IFtudWxsXTtcblx0ICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGFyZ3NbaSArIDFdID0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBuZXdEYXRlLmRhdGEgPSBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KERhdGUsIGFyZ3MpKSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3RGF0ZTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5EQVRFID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0RhdGUnLCB0aGlzLkRBVEUpO1xuXHRcblx0ICAgICAgLy8gU3RhdGljIG1ldGhvZHMgb24gRGF0ZS5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUobmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuREFURSwgJ25vdycsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKGRhdGVTdHJpbmcpIHtcblx0ICAgICAgICBkYXRlU3RyaW5nID0gZGF0ZVN0cmluZyA/IGRhdGVTdHJpbmcudG9TdHJpbmcoKSA6IHVuZGVmaW5lZDtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShEYXRlLnBhcnNlKGRhdGVTdHJpbmcpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkRBVEUsICdwYXJzZScsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKGEsIGIsIGMsIGQsIGUsIGYsIGgpIHtcblx0ICAgICAgICB2YXIgYXJncyA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKERhdGUuVVRDLmFwcGx5KERhdGUsIGFyZ3MpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkRBVEUsICdVVEMnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICAvLyBHZXR0ZXIgbWV0aG9kcy5cblx0ICAgICAgdmFyIGdldEZ1bmN0aW9ucyA9IFsnZ2V0RGF0ZScsICdnZXREYXknLCAnZ2V0RnVsbFllYXInLCAnZ2V0SG91cnMnLCAnZ2V0TWlsbGlzZWNvbmRzJywgJ2dldE1pbnV0ZXMnLCAnZ2V0TW9udGgnLCAnZ2V0U2Vjb25kcycsICdnZXRUaW1lJywgJ2dldFRpbWV6b25lT2Zmc2V0JywgJ2dldFVUQ0RhdGUnLCAnZ2V0VVRDRGF5JywgJ2dldFVUQ0Z1bGxZZWFyJywgJ2dldFVUQ0hvdXJzJywgJ2dldFVUQ01pbGxpc2Vjb25kcycsICdnZXRVVENNaW51dGVzJywgJ2dldFVUQ01vbnRoJywgJ2dldFVUQ1NlY29uZHMnLCAnZ2V0WWVhciddO1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdldEZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAobmF0aXZlRnVuYykge1xuXHQgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5kYXRhW25hdGl2ZUZ1bmNdKCkpO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9KGdldEZ1bmN0aW9uc1tpXSk7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkRBVEUucHJvcGVydGllcy5wcm90b3R5cGUsIGdldEZ1bmN0aW9uc1tpXSwgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBTZXR0ZXIgbWV0aG9kcy5cblx0ICAgICAgdmFyIHNldEZ1bmN0aW9ucyA9IFsnc2V0RGF0ZScsICdzZXRGdWxsWWVhcicsICdzZXRIb3VycycsICdzZXRNaWxsaXNlY29uZHMnLCAnc2V0TWludXRlcycsICdzZXRNb250aCcsICdzZXRTZWNvbmRzJywgJ3NldFRpbWUnLCAnc2V0VVRDRGF0ZScsICdzZXRVVENGdWxsWWVhcicsICdzZXRVVENIb3VycycsICdzZXRVVENNaWxsaXNlY29uZHMnLCAnc2V0VVRDTWludXRlcycsICdzZXRVVENNb250aCcsICdzZXRVVENTZWNvbmRzJywgJ3NldFllYXInXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXRGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gKG5hdGl2ZUZ1bmMpIHtcblx0ICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFyX2FyZ3MpIHtcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5kYXRhW25hdGl2ZUZ1bmNdLmFwcGx5KHRoaXMuZGF0YSwgYXJncykpO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9KHNldEZ1bmN0aW9uc1tpXSk7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkRBVEUucHJvcGVydGllcy5wcm90b3R5cGUsIHNldEZ1bmN0aW9uc1tpXSwgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBDb252ZXJzaW9uIGdldHRlciBtZXRob2RzLlxuXHQgICAgICBnZXRGdW5jdGlvbnMgPSBbJ3RvRGF0ZVN0cmluZycsICd0b0lTT1N0cmluZycsICd0b0dNVFN0cmluZycsICd0b0xvY2FsZURhdGVTdHJpbmcnLCAndG9Mb2NhbGVTdHJpbmcnLCAndG9Mb2NhbGVUaW1lU3RyaW5nJywgJ3RvVGltZVN0cmluZycsICd0b1VUQ1N0cmluZyddO1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdldEZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAobmF0aXZlRnVuYykge1xuXHQgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUodGhpcy5kYXRhW25hdGl2ZUZ1bmNdKCkpO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9KGdldEZ1bmN0aW9uc1tpXSk7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLkRBVEUucHJvcGVydGllcy5wcm90b3R5cGUsIGdldEZ1bmN0aW9uc1tpXSwgdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdE1hdGgnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogSW5pdGlhbGl6ZSBNYXRoIG9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRNYXRoKHNjb3BlKSB7XG5cdCAgICAgIHZhciB0aGlzSW50ZXJwcmV0ZXIgPSB0aGlzO1xuXHQgICAgICB2YXIgbXlNYXRoID0gdGhpcy5jcmVhdGVPYmplY3QodGhpcy5PQkpFQ1QpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCAnTWF0aCcsIG15TWF0aCk7XG5cdCAgICAgIHZhciBtYXRoQ29uc3RzID0gWydFJywgJ0xOMicsICdMTjEwJywgJ0xPRzJFJywgJ0xPRzEwRScsICdQSScsICdTUVJUMV8yJywgJ1NRUlQyJ107XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0aENvbnN0cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHRoaXMuc2V0UHJvcGVydHkobXlNYXRoLCBtYXRoQ29uc3RzW2ldLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShNYXRoW21hdGhDb25zdHNbaV1dKSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBudW1GdW5jdGlvbnMgPSBbJ2FicycsICdhY29zJywgJ2FzaW4nLCAnYXRhbicsICdhdGFuMicsICdjZWlsJywgJ2NvcycsICdleHAnLCAnZmxvb3InLCAnbG9nJywgJ21heCcsICdtaW4nLCAncG93JywgJ3JhbmRvbScsICdyb3VuZCcsICdzaW4nLCAnc3FydCcsICd0YW4nXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChuYXRpdmVGdW5jKSB7XG5cdCAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyZ3VtZW50cy5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgIGFyZ3VtZW50c1tqXSA9IGFyZ3VtZW50c1tqXS50b051bWJlcigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZUZ1bmMuYXBwbHkoTWF0aCwgYXJndW1lbnRzKSk7XG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0oTWF0aFtudW1GdW5jdGlvbnNbaV1dKTtcblx0ICAgICAgICB0aGlzLnNldFByb3BlcnR5KG15TWF0aCwgbnVtRnVuY3Rpb25zW2ldLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0UmVnRXhwJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIEluaXRpYWxpemUgUmVndWxhciBFeHByZXNzaW9uIG9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRSZWdFeHAoc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBSZWdleCBjb25zdHJ1Y3Rvci5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIocGF0dGVybiwgZmxhZ3MpIHtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLlJFR0VYUCkge1xuXHQgICAgICAgICAgLy8gQ2FsbGVkIHdpdGggbmV3LlxuXHQgICAgICAgICAgdmFyIHJneCA9IHRoaXM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciByZ3ggPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5SRUdFWFApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXR0ZXJuID0gcGF0dGVybiA/IHBhdHRlcm4udG9TdHJpbmcoKSA6ICcnO1xuXHQgICAgICAgIGZsYWdzID0gZmxhZ3MgPyBmbGFncy50b1N0cmluZygpIDogJyc7XG5cdCAgICAgICAgdGhpc0ludGVycHJldGVyLmNyZWF0ZVJlZ0V4cChyZ3gsIG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpKTtcblx0ICAgICAgICByZXR1cm4gcmd4O1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLlJFR0VYUCA9IHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlcik7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsICdSZWdFeHAnLCB0aGlzLlJFR0VYUCk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihzdHIpIHtcblx0ICAgICAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcblx0ICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZSh0aGlzLmRhdGEudGVzdChzdHIpKTtcblx0ICAgICAgfTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eSh0aGlzLlJFR0VYUC5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ3Rlc3QnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpLCBmYWxzZSwgdHJ1ZSk7XG5cdFxuXHQgICAgICB3cmFwcGVyID0gZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovd3JhcHBlcihzdHIpIHtcblx0ICAgICAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcblx0ICAgICAgICAvLyBHZXQgbGFzdEluZGV4IGZyb20gd3JhcHBlZCByZWdleCwgc2luY2UgdGhpcyBpcyBzZXR0YWJsZS5cblx0ICAgICAgICB0aGlzLmRhdGEubGFzdEluZGV4ID0gdGhpc0ludGVycHJldGVyLmdldFByb3BlcnR5KHRoaXMsICdsYXN0SW5kZXgnKS50b051bWJlcigpO1xuXHQgICAgICAgIHZhciBtYXRjaCA9IHRoaXMuZGF0YS5leGVjKHN0cik7XG5cdCAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHRoaXMsICdsYXN0SW5kZXgnLCB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKHRoaXMuZGF0YS5sYXN0SW5kZXgpKTtcblx0XG5cdCAgICAgICAgaWYgKG1hdGNoKSB7XG5cdCAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpc0ludGVycHJldGVyLmNyZWF0ZU9iamVjdCh0aGlzSW50ZXJwcmV0ZXIuQVJSQVkpO1xuXHQgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzSW50ZXJwcmV0ZXIuc2V0UHJvcGVydHkocmVzdWx0LCBpLCB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG1hdGNoW2ldKSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICAvLyBtYXRjaCBoYXMgYWRkaXRpb25hbCBwcm9wZXJ0aWVzLlxuXHQgICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHJlc3VsdCwgJ2luZGV4JywgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShtYXRjaC5pbmRleCkpO1xuXHQgICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KHJlc3VsdCwgJ2lucHV0JywgdGhpc0ludGVycHJldGVyLmNyZWF0ZVByaW1pdGl2ZShtYXRjaC5pbnB1dCkpO1xuXHQgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXNJbnRlcnByZXRlci5OVUxMO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuUkVHRVhQLnByb3BlcnRpZXMucHJvdG90eXBlLCAnZXhlYycsIHRoaXMuY3JlYXRlTmF0aXZlRnVuY3Rpb24od3JhcHBlciksIGZhbHNlLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjcmVhdGVQc2V1ZG9PYmplY3QnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogQ29udmVydHMgZnJvbSBuYXRpdmUgSlMgdmFsdWUgdG8gYSBKUyBpbnRlcnByZXRlciBvYmplY3QuXHJcblx0ICAgICAqIEBwYXJhbSB7Kn0gbmF0aXZlT2JqIFRoZSBuYXRpdmUgSlMgb2JqZWN0IHRvIGJlIGNvbnZlcnRlZC5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gVGhlIGVxdWl2YWxlbnQgdGhpcy5PQkpFQ1QuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVBzZXVkb09iamVjdChuYXRpdmVPYmopIHtcblx0ICAgICAgdmFyIHBzZXVkb09iamVjdCA9IHRoaXMub2JqZWN0TWFwLmdldChuYXRpdmVPYmopO1xuXHQgICAgICBpZiAocHNldWRvT2JqZWN0KSB7XG5cdCAgICAgICAgcmV0dXJuIHBzZXVkb09iamVjdDtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmF0aXZlT2JqID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcHNldWRvT2JqZWN0ID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbihuYXRpdmVPYmopO1xuXHQgICAgICB9IGVsc2UgaWYgKCAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8odHlwZW9mIG5hdGl2ZU9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShuYXRpdmVPYmopKSAhPT0gJ29iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVQcmltaXRpdmUobmF0aXZlT2JqKTtcblx0ICAgICAgfSBlbHNlIGlmIChuYXRpdmVPYmogaW5zdGFuY2VvZiBBcnJheSkge1xuXHQgICAgICAgIC8vIEFycmF5LlxuXHQgICAgICAgIHBzZXVkb09iamVjdCA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuQVJSQVkpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmF0aXZlT2JqLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICB0aGlzLnNldFByb3BlcnR5KHBzZXVkb09iamVjdCwgaSwgdGhpcy5jcmVhdGVQc2V1ZG9PYmplY3QobmF0aXZlT2JqW2ldKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIE9iamVjdC5cblx0ICAgICAgICBwc2V1ZG9PYmplY3QgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCk7XG5cdCAgICAgICAgcHNldWRvT2JqZWN0LmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLm9iamVjdE1hcC5zZXQobmF0aXZlT2JqLCBwc2V1ZG9PYmplY3QpO1xuXHQgICAgICBwc2V1ZG9PYmplY3QuZGF0YSA9IG5hdGl2ZU9iajtcblx0ICAgICAgcmV0dXJuIHBzZXVkb09iamVjdDtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcclxuXHQgICAgICogSW5pdGlhbGl6ZSBKU09OIG9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBzY29wZSBHbG9iYWwgc2NvcGUuXHJcblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0SlNPTicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdEpTT04oc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciBteUpTT04gPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXMuT0JKRUNUKTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0pTT04nLCBteUpTT04pO1xuXHRcblx0ICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAobmF0aXZlRnVuYykge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzWzBdLmRhdGE7XG5cdCAgICAgICAgICB2YXIgbmF0aXZlT2JqID0gbmF0aXZlRnVuYy5jYWxsKEpTT04sIGFyZyk7XG5cdCAgICAgICAgICByZXR1cm4gdGhpc0ludGVycHJldGVyLmNyZWF0ZVBzZXVkb09iamVjdChuYXRpdmVPYmopO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH0oSlNPTi5wYXJzZSk7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkobXlKU09OLCAncGFyc2UnLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcblx0XG5cdCAgICAgIC8qKlxyXG5cdCAgICAgICAqIENvbnZlcnRzIGZyb20gdGhpcy5PQkpFQ1Qgb2JqZWN0IHRvIG5hdGl2ZSBKUyBvYmplY3QuXHJcblx0ICAgICAgICogQHBhcmFtIHshT2JqZWN0fSBvYmogVGhlIHRoaXMuT0JKRUNUIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQuXHJcblx0ICAgICAgICogQHJldHVybiB7Kn0gVGhlIGVxdWl2YWxlbnQgbmF0aXZlIEpTIG9iamVjdCBvciB2YWx1ZS5cclxuXHQgICAgICAgKi9cblx0ICAgICAgZnVuY3Rpb24gdG9OYXRpdmVPYmplY3Qob2JqKSB7XG5cdCAgICAgICAgaWYgKG9iai5pc1ByaW1pdGl2ZSkge1xuXHQgICAgICAgICAgcmV0dXJuIG9iai5kYXRhO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIG5hdGl2ZU9iajtcblx0ICAgICAgICBpZiAob2JqLmxlbmd0aCkge1xuXHQgICAgICAgICAgLy8gQXJyYXkuXG5cdCAgICAgICAgICBuYXRpdmVPYmogPSBbXTtcblx0ICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIG5hdGl2ZU9ialtpXSA9IHRvTmF0aXZlT2JqZWN0KG9iai5wcm9wZXJ0aWVzW2ldKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgLy8gT2JqZWN0LlxuXHQgICAgICAgICAgbmF0aXZlT2JqID0ge307XG5cdCAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLnByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgbmF0aXZlT2JqW2tleV0gPSB0b05hdGl2ZU9iamVjdChvYmoucHJvcGVydGllc1trZXldKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBuYXRpdmVPYmo7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAobmF0aXZlRnVuYykge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgYXJnID0gdG9OYXRpdmVPYmplY3QoYXJndW1lbnRzWzBdKTtcblx0ICAgICAgICAgIHJldHVybiB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlUHJpbWl0aXZlKG5hdGl2ZUZ1bmMuY2FsbChKU09OLCBhcmcpKTtcblx0ICAgICAgICB9O1xuXHQgICAgICB9KCAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9fc3RyaW5naWZ5Mi5kZWZhdWx0KTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShteUpTT04sICdzdHJpbmdpZnknLCB0aGlzLmNyZWF0ZU5hdGl2ZUZ1bmN0aW9uKHdyYXBwZXIpKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0RXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogSW5pdGlhbGl6ZSB0aGUgRXJyb3IgY2xhc3MuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgR2xvYmFsIHNjb3BlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0RXJyb3Ioc2NvcGUpIHtcblx0ICAgICAgdmFyIHRoaXNJbnRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIHZhciB3cmFwcGVyO1xuXHQgICAgICAvLyBFcnJvciBjb25zdHJ1Y3Rvci5cblx0ICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3dyYXBwZXIob3B0X21lc3NhZ2UpIHtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gdGhpc0ludGVycHJldGVyLkVSUk9SKSB7XG5cdCAgICAgICAgICAvLyBDYWxsZWQgd2l0aCBuZXcuXG5cdCAgICAgICAgICB2YXIgbmV3RXJyb3IgPSB0aGlzO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgbmV3RXJyb3IgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlci5FUlJPUik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChvcHRfbWVzc2FnZSkge1xuXHQgICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KG5ld0Vycm9yLCAnbWVzc2FnZScsIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoU3RyaW5nKG9wdF9tZXNzYWdlKSksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG5ld0Vycm9yO1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLkVSUk9SID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKTtcblx0ICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ0Vycm9yJywgdGhpcy5FUlJPUik7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpcy5FUlJPUi5wcm9wZXJ0aWVzLnByb3RvdHlwZSwgJ21lc3NhZ2UnLCB0aGlzLlNUUklOR19FTVBUWSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KHRoaXMuRVJST1IucHJvcGVydGllcy5wcm90b3R5cGUsICduYW1lJywgdGhpcy5jcmVhdGVQcmltaXRpdmUoJ0Vycm9yJyksIGZhbHNlLCB0cnVlKTtcblx0XG5cdCAgICAgIC8vIENyZWF0ZSBoYWxmIGEgZG96ZW4gZXJyb3Igc3ViY2xhc3Nlcy5cblx0ICAgICAgdmFyIGVycm9ycyA9IHtcblx0ICAgICAgICBFVkFMX0VSUk9SOiAnRXZhbEVycm9yJyxcblx0ICAgICAgICBSQU5HRV9FUlJPUjogJ1JhbmdlRXJyb3InLFxuXHQgICAgICAgIFJFRkVSRU5DRV9FUlJPUjogJ1JlZmVyZW5jZUVycm9yJyxcblx0ICAgICAgICBTWU5UQVhfRVJST1I6ICdTeW50YXhFcnJvcicsXG5cdCAgICAgICAgVFlQRV9FUlJPUjogJ1R5cGVFcnJvcicsXG5cdCAgICAgICAgVVJJX0VSUk9SOiAnVVJJRXJyb3InXG5cdCAgICAgIH07XG5cdCAgICAgIGZvciAodmFyIGNvbnN0TmFtZSBpbiBlcnJvcnMpIHtcblx0ICAgICAgICB2YXIgZXJyb3JOYW1lID0gZXJyb3JzW2NvbnN0TmFtZV07XG5cdCAgICAgICAgLy9FdmFsRXJyb3IsIFJhbmdlRXJyb3IsIFJlZmVyZW5jZUVycm9yLCBTeW50YXhFcnJvciwgVHlwZUVycm9yLCBVUklFcnJvclxuXHQgICAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki93cmFwcGVyKG5hbWUpIHtcblx0ICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAob3B0X21lc3NhZ2UpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXNJbnRlcnByZXRlci5pc2EodGhpcy5wYXJlbnQsIHRoaXNJbnRlcnByZXRlci5FUlJPUikpIHtcblx0ICAgICAgICAgICAgICAvLyBDYWxsZWQgd2l0aCBuZXcuXG5cdCAgICAgICAgICAgICAgdmFyIG5ld0Vycm9yID0gdGhpcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICB2YXIgbmV3RXJyb3IgPSB0aGlzSW50ZXJwcmV0ZXIuY3JlYXRlT2JqZWN0KHRoaXNJbnRlcnByZXRlcltuYW1lXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG9wdF9tZXNzYWdlKSB7XG5cdCAgICAgICAgICAgICAgdGhpc0ludGVycHJldGVyLnNldFByb3BlcnR5KG5ld0Vycm9yLCAnbWVzc2FnZScsIHRoaXNJbnRlcnByZXRlci5jcmVhdGVQcmltaXRpdmUoU3RyaW5nKG9wdF9tZXNzYWdlKSksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gbmV3RXJyb3I7XG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpc1tjb25zdE5hbWVdID0gdGhpcy5jcmVhdGVOYXRpdmVGdW5jdGlvbih3cmFwcGVyKGNvbnN0TmFtZSkpO1xuXHQgICAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpc1tjb25zdE5hbWVdLCAncHJvdG90eXBlJywgdGhpcy5jcmVhdGVPYmplY3QodGhpcy5FUlJPUikpO1xuXHQgICAgICAgIHRoaXMuc2V0UHJvcGVydHkodGhpc1tjb25zdE5hbWVdLnByb3BlcnRpZXMucHJvdG90eXBlLCAnbmFtZScsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKGVycm9yTmFtZSksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCBlcnJvck5hbWUsIHRoaXNbY29uc3ROYW1lXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpc2EnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogSXMgYW4gb2JqZWN0IG9mIGEgY2VydGFpbiBjbGFzcz9cclxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IGNoaWxkIE9iamVjdCB0byBjaGVjay5cclxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudCBDb25zdHJ1Y3RvciBvZiBvYmplY3QuXHJcblx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgb2JqZWN0IGlzIHRoZSBjbGFzcyBvciBpbmhlcml0cyBmcm9tIGl0LlxyXG5cdCAgICAgKiAgICAgRmFsc2Ugb3RoZXJ3aXNlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpc2EoY2hpbGQsIHBhcmVudCkge1xuXHQgICAgICBpZiAoIWNoaWxkIHx8ICFwYXJlbnQpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKGNoaWxkLnBhcmVudCAhPSBwYXJlbnQpIHtcblx0ICAgICAgICBpZiAoIWNoaWxkLnBhcmVudCB8fCAhY2hpbGQucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlKSB7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNoaWxkID0gY2hpbGQucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbXAnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogQ29tcGFyZXMgdHdvIG9iamVjdHMgYWdhaW5zdCBlYWNoIG90aGVyLlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IGEgRmlyc3Qgb2JqZWN0LlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IGIgU2Vjb25kIG9iamVjdC5cclxuXHQgICAgICogQHJldHVybiB7bnVtYmVyfSAtMSBpZiBhIGlzIHNtYWxsZXIsIDAgaWYgYSA9PSBiLCAxIGlmIGEgaXMgYmlnZ2VyLFxyXG5cdCAgICAgKiAgICAgTmFOIGlmIHRoZXkgYXJlIG5vdCBjb21wYXJhYmxlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wKGEsIGIpIHtcblx0ICAgICAgaWYgKGEuaXNQcmltaXRpdmUgJiYgdHlwZW9mIGEgPT0gJ251bWJlcicgJiYgaXNOYU4oYS5kYXRhKSB8fCBiLmlzUHJpbWl0aXZlICYmIHR5cGVvZiBiID09ICdudW1iZXInICYmIGlzTmFOKGIuZGF0YSkpIHtcblx0ICAgICAgICByZXR1cm4gTmFOO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChhLmlzUHJpbWl0aXZlICYmIGIuaXNQcmltaXRpdmUpIHtcblx0ICAgICAgICBhID0gYS5kYXRhO1xuXHQgICAgICAgIGIgPSBiLmRhdGE7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gVE9ETzogSGFuZGxlIG90aGVyIHR5cGVzLlxuXHQgICAgICAgIHJldHVybiBOYU47XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGEgPCBiKSB7XG5cdCAgICAgICAgcmV0dXJuIC0xO1xuXHQgICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG5cdCAgICAgICAgcmV0dXJuIDE7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIDA7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnYXJyYXlJbmRleCcsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBJcyBhIHZhbHVlIGEgbGVnYWwgaW50ZWdlciBmb3IgYW4gYXJyYXk/XHJcblx0ICAgICAqIEBwYXJhbSB7Kn0gbiBWYWx1ZSB0byBjaGVjay5cclxuXHQgICAgICogQHJldHVybiB7bnVtYmVyfSBaZXJvLCBvciBhIHBvc2l0aXZlIGludGVnZXIgaWYgdGhlIHZhbHVlIGNhbiBiZVxyXG5cdCAgICAgKiAgICAgY29udmVydGVkIHRvIHN1Y2guICBOYU4gb3RoZXJ3aXNlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcnJheUluZGV4KG4pIHtcblx0ICAgICAgbiA9IE51bWJlcihuKTtcblx0ICAgICAgaWYgKCFpc0Zpbml0ZShuKSB8fCBuICE9IE1hdGguZmxvb3IobikgfHwgbiA8IDApIHtcblx0ICAgICAgICByZXR1cm4gTmFOO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBuO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NyZWF0ZVByaW1pdGl2ZScsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBDcmVhdGUgYSBuZXcgZGF0YSBvYmplY3QgZm9yIGEgcHJpbWl0aXZlLlxyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfHVuZGVmaW5lZHxSZWdFeHB9IGRhdGEgRGF0YSB0b1xyXG5cdCAgICAgKiAgICAgZW5jYXBzdWxhdGUuXHJcblx0ICAgICAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBkYXRhIG9iamVjdC5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlKGRhdGEpIHtcblx0ICAgICAgLy8gUmV1c2UgYSBwcmVkZWZpbmVkIHByaW1pdGl2ZSBjb25zdGFudCBpZiBwb3NzaWJsZS5cblx0ICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLlVOREVGSU5FRDtcblx0ICAgICAgfSBlbHNlIGlmIChkYXRhID09PSBudWxsKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuTlVMTDtcblx0ICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0cnVlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuVFJVRTtcblx0ICAgICAgfSBlbHNlIGlmIChkYXRhID09PSBmYWxzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLkZBTFNFO1xuXHQgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5OVU1CRVJfWkVSTztcblx0ICAgICAgfSBlbHNlIGlmIChkYXRhID09PSAxKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuTlVNQkVSX09ORTtcblx0ICAgICAgfSBlbHNlIGlmIChkYXRhID09PSAnJykge1xuXHQgICAgICAgIHJldHVybiB0aGlzLlNUUklOR19FTVBUWTtcblx0ICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVnRXhwKHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuUkVHRVhQKSwgZGF0YSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5ldyBJbnRlcnByZXRlci5QcmltaXRpdmUoZGF0YSwgdGhpcyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY3JlYXRlT2JqZWN0Jyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENyZWF0ZSBhIG5ldyBkYXRhIG9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudCBQYXJlbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXHJcblx0ICAgICAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBkYXRhIG9iamVjdC5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlT2JqZWN0KHBhcmVudCkge1xuXHQgICAgICB2YXIgb2JqID0gbmV3IEludGVycHJldGVyLk9iamVjdChwYXJlbnQpO1xuXHQgICAgICAvLyBGdW5jdGlvbnMgaGF2ZSBwcm90b3R5cGUgb2JqZWN0cy5cblx0ICAgICAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5GVU5DVElPTikpIHtcblx0ICAgICAgICBvYmoudHlwZSA9ICdmdW5jdGlvbic7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShvYmosICdwcm90b3R5cGUnLCB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCB8fCBudWxsKSk7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gQXJyYXlzIGhhdmUgbGVuZ3RoLlxuXHQgICAgICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSkge1xuXHQgICAgICAgIG9iai5sZW5ndGggPSAwO1xuXHQgICAgICAgIG9iai50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBzdHJzID0gW107XG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgc3Ryc1tpXSA9IHRoaXMucHJvcGVydGllc1tpXSA9PSB1bmRlZmluZWQgfHwgdGhpcy5wcm9wZXJ0aWVzW2ldID09IG51bGwgPyAnJyA6IHRoaXMucHJvcGVydGllc1tpXS50b1N0cmluZygpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgcmV0dXJuIHN0cnMuam9pbignLCcpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG9iajtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjcmVhdGVSZWdFeHAnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogQ3JlYXRlcyBhIG5ldyByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0LlxyXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBleGlzdGluZyBvYmplY3QgdG8gc2V0LlxyXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgbmF0aXZlIHJlZ3VsYXIgZXhwcmVzc2lvbi5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gTmV3IHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJlZ0V4cChvYmosIGRhdGEpIHtcblx0ICAgICAgb2JqLmRhdGEgPSBkYXRhO1xuXHQgICAgICAvLyBsYXN0SW5kZXggaXMgc2V0dGFibGUsIGFsbCBvdGhlcnMgYXJlIHJlYWQtb25seSBhdHRyaWJ1dGVzXG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkob2JqLCAnbGFzdEluZGV4JywgdGhpcy5jcmVhdGVQcmltaXRpdmUob2JqLmRhdGEubGFzdEluZGV4KSwgZmFsc2UsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwgJ3NvdXJjZScsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhLnNvdXJjZSksIHRydWUsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwgJ2dsb2JhbCcsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhLmdsb2JhbCksIHRydWUsIHRydWUpO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwgJ2lnbm9yZUNhc2UnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShvYmouZGF0YS5pZ25vcmVDYXNlKSwgdHJ1ZSwgdHJ1ZSk7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkob2JqLCAnbXVsdGlsaW5lJywgdGhpcy5jcmVhdGVQcmltaXRpdmUob2JqLmRhdGEubXVsdGlsaW5lKSwgdHJ1ZSwgdHJ1ZSk7XG5cdCAgICAgIC8vIE92ZXJyaWRlIGEgY291cGxlIG9mIE9iamVjdCdzIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHQgICAgICBvYmoudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLmRhdGEpO1xuXHQgICAgICB9O1xuXHQgICAgICBvYmoudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gb2JqO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NyZWF0ZUZ1bmN0aW9uJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENyZWF0ZSBhIG5ldyBmdW5jdGlvbi5cclxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IG5vZGUgQVNUIG5vZGUgZGVmaW5pbmcgdGhlIGZ1bmN0aW9uLlxyXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0X3Njb3BlIE9wdGlvbmFsIHBhcmVudCBzY29wZS5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gTmV3IGZ1bmN0aW9uLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVGdW5jdGlvbihub2RlLCBvcHRfc2NvcGUpIHtcblx0ICAgICAgdmFyIGZ1bmMgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkZVTkNUSU9OKTtcblx0ICAgICAgZnVuYy5wYXJlbnRTY29wZSA9IG9wdF9zY29wZSB8fCB0aGlzLmdldFNjb3BlKCk7XG5cdCAgICAgIGZ1bmMubm9kZSA9IG5vZGU7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoZnVuYywgJ2xlbmd0aCcsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKGZ1bmMubm9kZS5wYXJhbXMubGVuZ3RoKSwgdHJ1ZSk7XG5cdCAgICAgIHJldHVybiBmdW5jO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NyZWF0ZU5hdGl2ZUZ1bmN0aW9uJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENyZWF0ZSBhIG5ldyBuYXRpdmUgZnVuY3Rpb24uXHJcblx0ICAgICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBuYXRpdmVGdW5jIEphdmFTY3JpcHQgZnVuY3Rpb24uXHJcblx0ICAgICAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBmdW5jdGlvbi5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTmF0aXZlRnVuY3Rpb24obmF0aXZlRnVuYykge1xuXHQgICAgICB2YXIgZnVuYyA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuRlVOQ1RJT04pO1xuXHQgICAgICBmdW5jLm5hdGl2ZUZ1bmMgPSBuYXRpdmVGdW5jO1xuXHQgICAgICB0aGlzLnNldFByb3BlcnR5KGZ1bmMsICdsZW5ndGgnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShuYXRpdmVGdW5jLmxlbmd0aCksIHRydWUpO1xuXHQgICAgICByZXR1cm4gZnVuYztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjcmVhdGVBc3luY0Z1bmN0aW9uJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENyZWF0ZSBhIG5ldyBuYXRpdmUgYXN5bmNocm9ub3VzIGZ1bmN0aW9uLlxyXG5cdCAgICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gYXN5bmNGdW5jIEphdmFTY3JpcHQgZnVuY3Rpb24uXHJcblx0ICAgICAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBmdW5jdGlvbi5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQXN5bmNGdW5jdGlvbihhc3luY0Z1bmMpIHtcblx0ICAgICAgdmFyIGZ1bmMgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkZVTkNUSU9OKTtcblx0ICAgICAgZnVuYy5hc3luY0Z1bmMgPSBhc3luY0Z1bmM7XG5cdCAgICAgIHRoaXMuc2V0UHJvcGVydHkoZnVuYywgJ2xlbmd0aCcsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKGFzeW5jRnVuYy5sZW5ndGgpLCB0cnVlKTtcblx0ICAgICAgcmV0dXJuIGZ1bmM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0UHJvcGVydHknLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogRmV0Y2ggYSBwcm9wZXJ0eSB2YWx1ZSBmcm9tIGEgZGF0YSBvYmplY3QuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIERhdGEgb2JqZWN0LlxyXG5cdCAgICAgKiBAcGFyYW0geyp9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eS5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gUHJvcGVydHkgdmFsdWUgKG1heSBiZSBVTkRFRklORUQpLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0ICAgICAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcblx0ICAgICAgaWYgKG9iaiA9PSB0aGlzLlVOREVGSU5FRCB8fCBvYmogPT0gdGhpcy5OVUxMKSB7XG5cdCAgICAgICAgdGhpcy50aHJvd0V4Y2VwdGlvbih0aGlzLlRZUEVfRVJST1IsIFwiQ2Fubm90IHJlYWQgcHJvcGVydHkgJ1wiICsgbmFtZSArIFwiJyBvZiBcIiArIG9iaik7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gU3BlY2lhbCBjYXNlcyBmb3IgbWFnaWMgbGVuZ3RoIHByb3BlcnR5LlxuXHQgICAgICBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLlNUUklORykpIHtcblx0ICAgICAgICBpZiAobmFtZSA9PSAnbGVuZ3RoJykge1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhLmxlbmd0aCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBuID0gdGhpcy5hcnJheUluZGV4KG5hbWUpO1xuXHQgICAgICAgIGlmICghaXNOYU4obikgJiYgbiA8IG9iai5kYXRhLmxlbmd0aCkge1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5kYXRhW25dKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy5pc2Eob2JqLCB0aGlzLkFSUkFZKSAmJiBuYW1lID09ICdsZW5ndGgnKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG9iai5sZW5ndGgpO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgaWYgKG9iai5pc0luaXRpYWxpemVkID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgLy8gbGF6eSB3cmFwcGluZ1xuXHQgICAgICAgICAgdmFyIG5hdGl2ZU9iamVjdCA9IG9iai5kYXRhO1xuXHQgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5hdGl2ZU9iamVjdCkge1xuXHQgICAgICAgICAgICB0aGlzLnNldFByb3BlcnR5KG9iaiwga2V5LCB0aGlzLmNyZWF0ZVBzZXVkb09iamVjdChuYXRpdmVPYmplY3Rba2V5XSkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgb2JqLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAob2JqLnByb3BlcnRpZXMgJiYgbmFtZSBpbiBvYmoucHJvcGVydGllcykge1xuXHQgICAgICAgICAgcmV0dXJuIG9iai5wcm9wZXJ0aWVzW25hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAob2JqLnBhcmVudCAmJiBvYmoucGFyZW50LnByb3BlcnRpZXMgJiYgb2JqLnBhcmVudC5wcm9wZXJ0aWVzLnByb3RvdHlwZSkge1xuXHQgICAgICAgICAgb2JqID0gb2JqLnBhcmVudC5wcm9wZXJ0aWVzLnByb3RvdHlwZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgLy8gTm8gcGFyZW50LCByZWFjaGVkIHRoZSB0b3AuXG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRoaXMuVU5ERUZJTkVEO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhc1Byb3BlcnR5Jyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIERvZXMgdGhlIG5hbWVkIHByb3BlcnR5IGV4aXN0IG9uIGEgZGF0YSBvYmplY3QuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIERhdGEgb2JqZWN0LlxyXG5cdCAgICAgKiBAcGFyYW0geyp9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eS5cclxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBwcm9wZXJ0eSBleGlzdHMuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1Byb3BlcnR5KG9iaiwgbmFtZSkge1xuXHQgICAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xuXHQgICAgICBpZiAob2JqLmlzUHJpbWl0aXZlKSB7XG5cdCAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdQcmltaXRpdmUgZGF0YSB0eXBlIGhhcyBubyBwcm9wZXJ0aWVzJyk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG5hbWUgPT0gJ2xlbmd0aCcgJiYgKHRoaXMuaXNhKG9iaiwgdGhpcy5TVFJJTkcpIHx8IHRoaXMuaXNhKG9iaiwgdGhpcy5BUlJBWSkpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5TVFJJTkcpKSB7XG5cdCAgICAgICAgdmFyIG4gPSB0aGlzLmFycmF5SW5kZXgobmFtZSk7XG5cdCAgICAgICAgaWYgKCFpc05hTihuKSAmJiBuIDwgb2JqLmRhdGEubGVuZ3RoKSB7XG5cdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICBpZiAob2JqLnByb3BlcnRpZXMgJiYgbmFtZSBpbiBvYmoucHJvcGVydGllcykge1xuXHQgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChvYmoucGFyZW50ICYmIG9iai5wYXJlbnQucHJvcGVydGllcyAmJiBvYmoucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlKSB7XG5cdCAgICAgICAgICBvYmogPSBvYmoucGFyZW50LnByb3BlcnRpZXMucHJvdG90eXBlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBObyBwYXJlbnQsIHJlYWNoZWQgdGhlIHRvcC5cblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0UHJvcGVydHknLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogU2V0IGEgcHJvcGVydHkgdmFsdWUgb24gYSBkYXRhIG9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBvYmogRGF0YSBvYmplY3QuXHJcblx0ICAgICAqIEBwYXJhbSB7Kn0gbmFtZSBOYW1lIG9mIHByb3BlcnR5LlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IHZhbHVlIE5ldyBwcm9wZXJ0eSB2YWx1ZS5cclxuXHQgICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZml4ZWQgVW5jaGFuZ2VhYmxlIHByb3BlcnR5IGlmIHRydWUuXHJcblx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X25vbmVudW0gTm9uLWVudW1lcmFibGUgcHJvcGVydHkgaWYgdHJ1ZS5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJvcGVydHkob2JqLCBuYW1lLCB2YWx1ZSwgb3B0X2ZpeGVkLCBvcHRfbm9uZW51bSkge1xuXHQgICAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xuXHQgICAgICBpZiAoIC8qaXN0YW5idWwgaWdub3JlIG5leHQqLyh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpKSAhPSAnb2JqZWN0Jykge1xuXHQgICAgICAgIHRocm93IEVycm9yKCdGYWlsdXJlIHRvIHdyYXAgYSB2YWx1ZTogJyArIHZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAob2JqID09IHRoaXMuVU5ERUZJTkVEIHx8IG9iaiA9PSB0aGlzLk5VTEwpIHtcblx0ICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgXCJDYW5ub3Qgc2V0IHByb3BlcnR5ICdcIiArIG5hbWUgKyBcIicgb2YgXCIgKyBvYmopO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChvYmouaXNQcmltaXRpdmUgfHwgb2JqLmZpeGVkW25hbWVdKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLmlzYShvYmosIHRoaXMuU1RSSU5HKSkge1xuXHQgICAgICAgIHZhciBuID0gdGhpcy5hcnJheUluZGV4KG5hbWUpO1xuXHQgICAgICAgIGlmIChuYW1lID09ICdsZW5ndGgnIHx8ICFpc05hTihuKSAmJiBuIDwgb2JqLmRhdGEubGVuZ3RoKSB7XG5cdCAgICAgICAgICAvLyBDYW4ndCBzZXQgbGVuZ3RoIG9yIGxldHRlcnMgb24gU3RyaW5ncy5cblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuaXNhKG9iaiwgdGhpcy5BUlJBWSkpIHtcblx0ICAgICAgICAvLyBBcnJheXMgaGF2ZSBhIG1hZ2ljIGxlbmd0aCB2YXJpYWJsZSB0aGF0IGlzIGJvdW5kIHRvIHRoZSBlbGVtZW50cy5cblx0ICAgICAgICB2YXIgaTtcblx0ICAgICAgICBpZiAobmFtZSA9PSAnbGVuZ3RoJykge1xuXHQgICAgICAgICAgLy8gRGVsZXRlIGVsZW1lbnRzIGlmIGxlbmd0aCBpcyBzbWFsbGVyLlxuXHQgICAgICAgICAgdmFyIG5ld0xlbmd0aCA9IHRoaXMuYXJyYXlJbmRleCh2YWx1ZS50b051bWJlcigpKTtcblx0ICAgICAgICAgIGlmIChpc05hTihuZXdMZW5ndGgpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24odGhpcy5SQU5HRV9FUlJPUiwgJ0ludmFsaWQgYXJyYXkgbGVuZ3RoJyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAobmV3TGVuZ3RoIDwgb2JqLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBmb3IgKGkgaW4gb2JqLnByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICBpID0gdGhpcy5hcnJheUluZGV4KGkpO1xuXHQgICAgICAgICAgICAgIGlmICghaXNOYU4oaSkgJiYgbmV3TGVuZ3RoIDw9IGkpIHtcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmoucHJvcGVydGllc1tpXTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIG9iai5sZW5ndGggPSBuZXdMZW5ndGg7XG5cdCAgICAgICAgICByZXR1cm47IC8vIERvbid0IHNldCBhIHJlYWwgbGVuZ3RoIHByb3BlcnR5LlxuXHQgICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKGkgPSB0aGlzLmFycmF5SW5kZXgobmFtZSkpKSB7XG5cdCAgICAgICAgICAvLyBJbmNyZWFzZSBsZW5ndGggaWYgdGhpcyBpbmRleCBpcyBsYXJnZXIuXG5cdCAgICAgICAgICBvYmoubGVuZ3RoID0gTWF0aC5tYXgob2JqLmxlbmd0aCwgaSArIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICAvLyBTZXQgdGhlIHByb3BlcnR5LlxuXHQgICAgICBvYmoucHJvcGVydGllc1tuYW1lXSA9IHZhbHVlO1xuXHQgICAgICBpZiAob3B0X2ZpeGVkKSB7XG5cdCAgICAgICAgb2JqLmZpeGVkW25hbWVdID0gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAob3B0X25vbmVudW0pIHtcblx0ICAgICAgICBvYmoubm9uZW51bWVyYWJsZVtuYW1lXSA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkZWxldGVQcm9wZXJ0eScsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBEZWxldGUgYSBwcm9wZXJ0eSB2YWx1ZSBvbiBhIGRhdGEgb2JqZWN0LlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IG9iaiBEYXRhIG9iamVjdC5cclxuXHQgICAgICogQHBhcmFtIHsqfSBuYW1lIE5hbWUgb2YgcHJvcGVydHkuXHJcblx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgZGVsZXRlZCwgZmFsc2UgaWYgdW5kZWxldGFibGUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHQgICAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xuXHQgICAgICBpZiAob2JqLmlzUHJpbWl0aXZlIHx8IG9iai5maXhlZFtuYW1lXSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAobmFtZSA9PSAnbGVuZ3RoJyAmJiB0aGlzLmlzYShvYmosIHRoaXMuQVJSQVkpKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBkZWxldGUgb2JqLnByb3BlcnRpZXNbbmFtZV07XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0U2NvcGUnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBzY29wZSBmcm9tIHRoZSBzdGF0ZVN0YWNrLlxyXG5cdCAgICAgKiBAcmV0dXJuIHshT2JqZWN0fSBDdXJyZW50IHNjb3BlIGRpY3Rpb25hcnkuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNjb3BlKCkge1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhdGVTdGFjay5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2tbaV0uc2NvcGUpIHtcblx0ICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlU3RhY2tbaV0uc2NvcGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRocm93IEVycm9yKCdObyBzY29wZSBmb3VuZC4nKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjcmVhdGVTY29wZScsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBDcmVhdGUgYSBuZXcgc2NvcGUgZGljdGlvbmFyeS5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBub2RlIEFTVCBub2RlIGRlZmluaW5nIHRoZSBzY29wZSBjb250YWluZXJcclxuXHQgICAgICogICAgIChlLmcuIGEgZnVuY3Rpb24pLlxyXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50U2NvcGUgU2NvcGUgdG8gbGluayB0by5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gTmV3IHNjb3BlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTY29wZShub2RlLCBwYXJlbnRTY29wZSkge1xuXHQgICAgICB2YXIgc2NvcGUgPSB0aGlzLmNyZWF0ZU9iamVjdChudWxsKTtcblx0ICAgICAgc2NvcGUucGFyZW50U2NvcGUgPSBwYXJlbnRTY29wZTtcblx0ICAgICAgaWYgKCFwYXJlbnRTY29wZSkge1xuXHQgICAgICAgIHRoaXMuaW5pdEdsb2JhbFNjb3BlKHNjb3BlKTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLnBvcHVsYXRlU2NvcGVfKG5vZGUsIHNjb3BlKTtcblx0XG5cdCAgICAgIC8vIERldGVybWluZSBpZiB0aGlzIHNjb3BlIHN0YXJ0cyB3aXRoICd1c2Ugc3RyaWN0Jy5cblx0ICAgICAgc2NvcGUuc3RyaWN0ID0gZmFsc2U7XG5cdCAgICAgIGlmIChwYXJlbnRTY29wZSAmJiBwYXJlbnRTY29wZS5zdHJpY3QpIHtcblx0ICAgICAgICBzY29wZS5zdHJpY3QgPSB0cnVlO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBmaXJzdE5vZGUgPSBub2RlLmJvZHkgJiYgbm9kZS5ib2R5WzBdO1xuXHQgICAgICAgIGlmIChmaXJzdE5vZGUgJiYgZmlyc3ROb2RlLmV4cHJlc3Npb24gJiYgZmlyc3ROb2RlLmV4cHJlc3Npb24udHlwZSA9PSAnTGl0ZXJhbCcgJiYgZmlyc3ROb2RlLmV4cHJlc3Npb24udmFsdWUgPT0gJ3VzZSBzdHJpY3QnKSB7XG5cdCAgICAgICAgICBzY29wZS5zdHJpY3QgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gc2NvcGU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY3JlYXRlU3BlY2lhbFNjb3BlJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENyZWF0ZSBhIG5ldyBzcGVjaWFsIHNjb3BlIGRpY3Rpb25hcnkuIFNpbWlsYXIgdG8gY3JlYXRlU2NvcGUoKSwgYnV0XHJcblx0ICAgICAqIGRvZXNuJ3QgYXNzdW1lIHRoYXQgdGhlIHNjb3BlIGlzIGZvciBhIGZ1bmN0aW9uIGJvZHkuIFRoaXMgaXMgdXNlZCBmb3JcclxuXHQgICAgICogdGhlIGNhdGNoIGNsYXVzZSBhbmQgd2l0aCBzdGF0ZW1lbnQuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gcGFyZW50U2NvcGUgU2NvcGUgdG8gbGluayB0by5cclxuXHQgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2NvcGUgT3B0aW9uYWwgb2JqZWN0IHRvIHRyYW5zZm9ybSBpbnRvIHNjb3BlLlxyXG5cdCAgICAgKiBAcmV0dXJuIHshT2JqZWN0fSBOZXcgc2NvcGUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVNwZWNpYWxTY29wZShwYXJlbnRTY29wZSwgb3B0X3Njb3BlKSB7XG5cdCAgICAgIGlmICghcGFyZW50U2NvcGUpIHtcblx0ICAgICAgICB0aHJvdyBFcnJvcigncGFyZW50U2NvcGUgcmVxdWlyZWQnKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgc2NvcGUgPSBvcHRfc2NvcGUgfHwgdGhpcy5jcmVhdGVPYmplY3QobnVsbCk7XG5cdCAgICAgIHNjb3BlLnBhcmVudFNjb3BlID0gcGFyZW50U2NvcGU7XG5cdCAgICAgIHNjb3BlLnN0cmljdCA9IHBhcmVudFNjb3BlLnN0cmljdDtcblx0ICAgICAgcmV0dXJuIHNjb3BlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFZhbHVlRnJvbVNjb3BlJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIFJldHJpZXZlcyBhIHZhbHVlIGZyb20gdGhlIHNjb3BlIGNoYWluLlxyXG5cdCAgICAgKiBAcGFyYW0geyFPYmplY3R9IG5hbWUgTmFtZSBvZiB2YXJpYWJsZS5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gVGhlIHZhbHVlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZUZyb21TY29wZShuYW1lKSB7XG5cdCAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcblx0ICAgICAgdmFyIG5hbWVTdHIgPSBuYW1lLnRvU3RyaW5nKCk7XG5cdCAgICAgIHdoaWxlIChzY29wZSkge1xuXHQgICAgICAgIGlmIChuYW1lU3RyIGluIHNjb3BlLnByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgIHJldHVybiBzY29wZS5wcm9wZXJ0aWVzW25hbWVTdHJdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlO1xuXHQgICAgICB9XG5cdCAgICAgIC8qKlxyXG5cdCAgICAgICAqIExhenkgbG9va3VwIGZvciBnbG9iYWwgdmFyaWFibGVzXHJcblx0ICAgICAgICovXG5cdCAgICAgIC8vIFRPRE86IHN1cHBvcnQgb3RoZXIganMgZW52aXJvbm1lbnRzIGxpa2Ugc2VydmljZSB3b3JrZXIgYW5kIG5vZGUgYnkgY2hlY2tpbmcgd2hhdCB0aGUgZ2xvYmFsIHNjb3BlIGlzXG5cdCAgICAgIGlmIChuYW1lU3RyIGluIHdpbmRvdykge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVBzZXVkb09iamVjdCh3aW5kb3dbbmFtZVN0cl0pO1xuXHQgICAgICB9XG5cdCAgICAgIGNvbnNvbGUubG9nKG5hbWVTdHIsIHRoaXMpO1xuXHQgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuUkVGRVJFTkNFX0VSUk9SLCBuYW1lU3RyICsgJyBpcyBub3QgZGVmaW5lZCcpO1xuXHQgICAgICByZXR1cm4gdGhpcy5VTkRFRklORUQ7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0VmFsdWVUb1Njb3BlJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIFNldHMgYSB2YWx1ZSB0byB0aGUgY3VycmVudCBzY29wZS5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBuYW1lIE5hbWUgb2YgdmFyaWFibGUuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gdmFsdWUgVmFsdWUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlVG9TY29wZShuYW1lLCB2YWx1ZSkge1xuXHQgICAgICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG5cdCAgICAgIHZhciBzdHJpY3QgPSBzY29wZS5zdHJpY3Q7XG5cdCAgICAgIHZhciBuYW1lU3RyID0gbmFtZS50b1N0cmluZygpO1xuXHQgICAgICB3aGlsZSAoc2NvcGUpIHtcblx0ICAgICAgICBpZiAobmFtZVN0ciBpbiBzY29wZS5wcm9wZXJ0aWVzIHx8ICFzdHJpY3QgJiYgIXNjb3BlLnBhcmVudFNjb3BlKSB7XG5cdCAgICAgICAgICBpZiAoIXNjb3BlLmZpeGVkW25hbWVTdHJdKSB7XG5cdCAgICAgICAgICAgIHNjb3BlLnByb3BlcnRpZXNbbmFtZVN0cl0gPSB2YWx1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnRTY29wZTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuUkVGRVJFTkNFX0VSUk9SLCBuYW1lU3RyICsgJyBpcyBub3QgZGVmaW5lZCcpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3BvcHVsYXRlU2NvcGVfJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENyZWF0ZSBhIG5ldyBzY29wZSBmb3IgdGhlIGdpdmVuIG5vZGUuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gbm9kZSBBU1Qgbm9kZSAocHJvZ3JhbSBvciBmdW5jdGlvbikuXHJcblx0ICAgICAqIEBwYXJhbSB7IU9iamVjdH0gc2NvcGUgU2NvcGUgZGljdGlvbmFyeSB0byBwb3B1bGF0ZS5cclxuXHQgICAgICogQHByaXZhdGVcclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcG9wdWxhdGVTY29wZV8obm9kZSwgc2NvcGUpIHtcblx0ICAgICAgaWYgKG5vZGUudHlwZSA9PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuZGVjbGFyYXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCBub2RlLmRlY2xhcmF0aW9uc1tpXS5pZC5uYW1lLCB0aGlzLlVOREVGSU5FRCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICB0aGlzLnNldFByb3BlcnR5KHNjb3BlLCBub2RlLmlkLm5hbWUsIHRoaXMuY3JlYXRlRnVuY3Rpb24obm9kZSwgc2NvcGUpKTtcblx0ICAgICAgICByZXR1cm47IC8vIERvIG5vdCByZWN1cnNlIGludG8gZnVuY3Rpb24uXG5cdCAgICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09ICdGdW5jdGlvbkV4cHJlc3Npb24nKSB7XG5cdCAgICAgICAgcmV0dXJuOyAvLyBEbyBub3QgcmVjdXJzZSBpbnRvIGZ1bmN0aW9uLlxuXHQgICAgICB9XG5cdCAgICAgIHZhciB0aGlzSXRlcnByZXRlciA9IHRoaXM7XG5cdCAgICAgIGZ1bmN0aW9uIHJlY3Vyc2UoY2hpbGQpIHtcblx0ICAgICAgICBpZiAoY2hpbGQuY29uc3RydWN0b3IgPT0gdGhpc0l0ZXJwcmV0ZXIuYXN0LmNvbnN0cnVjdG9yKSB7XG5cdCAgICAgICAgICB0aGlzSXRlcnByZXRlci5wb3B1bGF0ZVNjb3BlXyhjaGlsZCwgc2NvcGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUpIHtcblx0ICAgICAgICB2YXIgcHJvcCA9IG5vZGVbbmFtZV07XG5cdCAgICAgICAgaWYgKHByb3AgJiYgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovKHR5cGVvZiBwcm9wID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHByb3ApKSA9PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wLmxlbmd0aCA9PSAnbnVtYmVyJyAmJiBwcm9wLnNwbGljZSkge1xuXHQgICAgICAgICAgICAvLyBQcm9wIGlzIGFuIGFycmF5LlxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3AubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICByZWN1cnNlKHByb3BbaV0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZWN1cnNlKHByb3ApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFZhbHVlJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIEdldHMgYSB2YWx1ZSBmcm9tIHRoZSBzY29wZSBjaGFpbiBvciBmcm9tIGFuIG9iamVjdCBwcm9wZXJ0eS5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fCFBcnJheX0gbGVmdCBOYW1lIG9mIHZhcmlhYmxlIG9yIG9iamVjdC9wcm9wbmFtZSB0dXBsZS5cclxuXHQgICAgICogQHJldHVybiB7IU9iamVjdH0gVmFsdWUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKGxlZnQpIHtcblx0ICAgICAgaWYgKGxlZnQubGVuZ3RoKSB7XG5cdCAgICAgICAgdmFyIG9iaiA9IGxlZnRbMF07XG5cdCAgICAgICAgdmFyIHByb3AgPSBsZWZ0WzFdO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFByb3BlcnR5KG9iaiwgcHJvcCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVGcm9tU2NvcGUobGVmdCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZXRWYWx1ZScsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBTZXRzIGEgdmFsdWUgdG8gdGhlIHNjb3BlIGNoYWluIG9yIHRvIGFuIG9iamVjdCBwcm9wZXJ0eS5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fCFBcnJheX0gbGVmdCBOYW1lIG9mIHZhcmlhYmxlIG9yIG9iamVjdC9wcm9wbmFtZSB0dXBsZS5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSB2YWx1ZSBWYWx1ZS5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUobGVmdCwgdmFsdWUpIHtcblx0ICAgICAgaWYgKGxlZnQubGVuZ3RoKSB7XG5cdCAgICAgICAgdmFyIG9iaiA9IGxlZnRbMF07XG5cdCAgICAgICAgdmFyIHByb3AgPSBsZWZ0WzFdO1xuXHQgICAgICAgIHRoaXMuc2V0UHJvcGVydHkob2JqLCBwcm9wLCB2YWx1ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zZXRWYWx1ZVRvU2NvcGUobGVmdCwgdmFsdWUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndGhyb3dFeGNlcHRpb24nLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogVGhyb3cgYW4gZXhjZXB0aW9uIGluIHRoZSBpbnRlcnByZXRlciB0aGF0IGNhbiBiZSBoYW5kbGVkIGJ5IGFcclxuXHQgICAgICogaW50ZXJwcmV0ZXIgdHJ5L2NhdGNoIHN0YXRlbWVudC4gIElmIHVuaGFuZGxlZCwgYSByZWFsIGV4Y2VwdGlvbiB3aWxsXHJcblx0ICAgICAqIGJlIHRocm93bi4gIENhbiBiZSBjYWxsZWQgd2l0aCBlaXRoZXIgYW4gZXJyb3IgY2xhc3MgYW5kIGEgbWVzc2FnZSwgb3JcclxuXHQgICAgICogd2l0aCBhbiBhY3R1YWwgb2JqZWN0IHRvIGJlIHRocm93bi5cclxuXHQgICAgICogQHBhcmFtIHshT2JqZWN0fSBlcnJvckNsYXNzIFR5cGUgb2YgZXJyb3IgKGlmIG1lc3NhZ2UgaXMgcHJvdmlkZWQpIG9yIHRoZVxyXG5cdCAgICAgKiAgIHZhbHVlIHRvIHRocm93IChpZiBubyBtZXNzYWdlKS5cclxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdF9tZXNzYWdlIE1lc3NhZ2UgYmVpbmcgdGhyb3duLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbihlcnJvckNsYXNzLCBvcHRfbWVzc2FnZSkge1xuXHQgICAgICBpZiAodGhpcy5zdGF0ZVN0YWNrWzBdLmludGVycHJldGVyKSB7XG5cdCAgICAgICAgLy8gVGhpcyBpcyB0aGUgd3JvbmcgaW50ZXJwcmV0ZXIsIHdlIGFyZSBzcGlubmluZyBvbiBhbiBldmFsLlxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0uaW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24oZXJyb3JDbGFzcywgb3B0X21lc3NhZ2UpO1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIC8vIFRoZSBldmFsIHRocmV3IGFuIGVycm9yIGFuZCBkaWQgbm90IGNhdGNoIGl0LlxuXHQgICAgICAgICAgLy8gQ29udGludWUgdG8gc2VlIGlmIHRoaXMgbGV2ZWwgY2FuIGNhdGNoIGl0LlxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAob3B0X21lc3NhZ2UgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciBlcnJvciA9IGVycm9yQ2xhc3M7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVPYmplY3QoZXJyb3JDbGFzcyk7XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnLCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShvcHRfbWVzc2FnZSksIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBTZWFyY2ggZm9yIGEgdHJ5IHN0YXRlbWVudC5cblx0ICAgICAgZG8ge1xuXHQgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB9IHdoaWxlIChzdGF0ZSAmJiBzdGF0ZS5ub2RlLnR5cGUgIT09ICdUcnlTdGF0ZW1lbnQnKTtcblx0ICAgICAgaWYgKHN0YXRlKSB7XG5cdCAgICAgICAgLy8gRXJyb3IgaXMgYmVpbmcgdHJhcHBlZC5cblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7XG5cdCAgICAgICAgICBub2RlOiBzdGF0ZS5ub2RlLmhhbmRsZXIsXG5cdCAgICAgICAgICB0aHJvd1ZhbHVlOiBlcnJvclxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIFRocm93IGEgcmVhbCBlcnJvci5cblx0ICAgICAgICB2YXIgcmVhbEVycm9yO1xuXHQgICAgICAgIGlmICh0aGlzLmlzYShlcnJvciwgdGhpcy5FUlJPUikpIHtcblx0ICAgICAgICAgIHZhciBlcnJvclRhYmxlID0ge1xuXHQgICAgICAgICAgICAnRXZhbEVycm9yJzogRXZhbEVycm9yLFxuXHQgICAgICAgICAgICAnUmFuZ2VFcnJvcic6IFJhbmdlRXJyb3IsXG5cdCAgICAgICAgICAgICdSZWZlcmVuY2VFcnJvcic6IFJlZmVyZW5jZUVycm9yLFxuXHQgICAgICAgICAgICAnU3ludGF4RXJyb3InOiBTeW50YXhFcnJvcixcblx0ICAgICAgICAgICAgJ1R5cGVFcnJvcic6IFR5cGVFcnJvcixcblx0ICAgICAgICAgICAgJ1VSSUVycm9yJzogVVJJRXJyb3Jcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgICB2YXIgdHlwZSA9IGVycm9yVGFibGVbdGhpcy5nZXRQcm9wZXJ0eShlcnJvciwgJ25hbWUnKV0gfHwgRXJyb3I7XG5cdCAgICAgICAgICByZWFsRXJyb3IgPSB0eXBlKHRoaXMuZ2V0UHJvcGVydHkoZXJyb3IsICdtZXNzYWdlJykpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZWFsRXJyb3IgPSBlcnJvci50b1N0cmluZygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aHJvdyByZWFsRXJyb3I7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwQXJyYXlFeHByZXNzaW9uJyxcblx0XG5cdFxuXHQgICAgLy8gRnVuY3Rpb25zIHRvIGhhbmRsZSBlYWNoIG5vZGUgdHlwZS5cblx0XG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcEFycmF5RXhwcmVzc2lvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHZhciBuID0gc3RhdGUubiB8fCAwO1xuXHQgICAgICBpZiAoIXN0YXRlLmFycmF5KSB7XG5cdCAgICAgICAgc3RhdGUuYXJyYXkgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLkFSUkFZKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnNldFByb3BlcnR5KHN0YXRlLmFycmF5LCBuIC0gMSwgc3RhdGUudmFsdWUpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChub2RlLmVsZW1lbnRzW25dKSB7XG5cdCAgICAgICAgc3RhdGUubiA9IG4gKyAxO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5lbGVtZW50c1tuXSB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBzdGF0ZS5hcnJheS5sZW5ndGggPSBzdGF0ZS5uIHx8IDA7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUuYXJyYXk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwQXNzaWdubWVudEV4cHJlc3Npb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBBc3NpZ25tZW50RXhwcmVzc2lvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIGlmICghc3RhdGUuZG9uZUxlZnQpIHtcblx0ICAgICAgICBzdGF0ZS5kb25lTGVmdCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLmxlZnQsIGNvbXBvbmVudHM6IHRydWUgfSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVSaWdodCkge1xuXHQgICAgICAgIHN0YXRlLmRvbmVSaWdodCA9IHRydWU7XG5cdCAgICAgICAgc3RhdGUubGVmdFNpZGUgPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUucmlnaHQgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgdmFyIGxlZnRTaWRlID0gc3RhdGUubGVmdFNpZGU7XG5cdCAgICAgICAgdmFyIHJpZ2h0U2lkZSA9IHN0YXRlLnZhbHVlO1xuXHQgICAgICAgIHZhciB2YWx1ZTtcblx0ICAgICAgICBpZiAobm9kZS5vcGVyYXRvciA9PSAnPScpIHtcblx0ICAgICAgICAgIHZhbHVlID0gcmlnaHRTaWRlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgbGVmdFZhbHVlID0gdGhpcy5nZXRWYWx1ZShsZWZ0U2lkZSk7XG5cdCAgICAgICAgICB2YXIgcmlnaHRWYWx1ZSA9IHJpZ2h0U2lkZTtcblx0ICAgICAgICAgIHZhciBsZWZ0TnVtYmVyID0gbGVmdFZhbHVlLnRvTnVtYmVyKCk7XG5cdCAgICAgICAgICB2YXIgcmlnaHROdW1iZXIgPSByaWdodFZhbHVlLnRvTnVtYmVyKCk7XG5cdCAgICAgICAgICBpZiAobm9kZS5vcGVyYXRvciA9PSAnKz0nKSB7XG5cdCAgICAgICAgICAgIHZhciBsZWZ0LCByaWdodDtcblx0ICAgICAgICAgICAgaWYgKGxlZnRWYWx1ZS50eXBlID09ICdzdHJpbmcnIHx8IHJpZ2h0VmFsdWUudHlwZSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgIGxlZnQgPSBsZWZ0VmFsdWUudG9TdHJpbmcoKTtcblx0ICAgICAgICAgICAgICByaWdodCA9IHJpZ2h0VmFsdWUudG9TdHJpbmcoKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBsZWZ0ID0gbGVmdE51bWJlcjtcblx0ICAgICAgICAgICAgICByaWdodCA9IHJpZ2h0TnVtYmVyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdCArIHJpZ2h0O1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICctPScpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyIC0gcmlnaHROdW1iZXI7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyo9Jykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgKiByaWdodE51bWJlcjtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnLz0nKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdE51bWJlciAvIHJpZ2h0TnVtYmVyO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICclPScpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyICUgcmlnaHROdW1iZXI7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJzw8PScpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyIDw8IHJpZ2h0TnVtYmVyO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+Pj0nKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdE51bWJlciA+PiByaWdodE51bWJlcjtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnPj4+PScpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyID4+PiByaWdodE51bWJlcjtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnJj0nKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdE51bWJlciAmIHJpZ2h0TnVtYmVyO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICdePScpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0TnVtYmVyIF4gcmlnaHROdW1iZXI7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ3w9Jykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnROdW1iZXIgfCByaWdodE51bWJlcjtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IFN5bnRheEVycm9yKCdVbmtub3duIGFzc2lnbm1lbnQgZXhwcmVzc2lvbjogJyArIG5vZGUub3BlcmF0b3IpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFsdWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc2V0VmFsdWUobGVmdFNpZGUsIHZhbHVlKTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBCaW5hcnlFeHByZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwQmluYXJ5RXhwcmVzc2lvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIGlmICghc3RhdGUuZG9uZUxlZnQpIHtcblx0ICAgICAgICBzdGF0ZS5kb25lTGVmdCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLmxlZnQgfSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVSaWdodCkge1xuXHQgICAgICAgIHN0YXRlLmRvbmVSaWdodCA9IHRydWU7XG5cdCAgICAgICAgc3RhdGUubGVmdFZhbHVlID0gc3RhdGUudmFsdWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLnJpZ2h0IH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICAgIHZhciBsZWZ0U2lkZSA9IHN0YXRlLmxlZnRWYWx1ZTtcblx0ICAgICAgICB2YXIgcmlnaHRTaWRlID0gc3RhdGUudmFsdWU7XG5cdCAgICAgICAgdmFyIHZhbHVlO1xuXHQgICAgICAgIHZhciBjb21wID0gdGhpcy5jb21wKGxlZnRTaWRlLCByaWdodFNpZGUpO1xuXHQgICAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICc9PScgfHwgbm9kZS5vcGVyYXRvciA9PSAnIT0nKSB7XG5cdCAgICAgICAgICBpZiAobGVmdFNpZGUuaXNQcmltaXRpdmUgJiYgcmlnaHRTaWRlLmlzUHJpbWl0aXZlKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdFNpZGUuZGF0YSA9PSByaWdodFNpZGUuZGF0YTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gY29tcCA9PT0gMDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICchPScpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSAhdmFsdWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc9PT0nIHx8IG5vZGUub3BlcmF0b3IgPT0gJyE9PScpIHtcblx0ICAgICAgICAgIGlmIChsZWZ0U2lkZS5pc1ByaW1pdGl2ZSAmJiByaWdodFNpZGUuaXNQcmltaXRpdmUpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0U2lkZS5kYXRhID09PSByaWdodFNpZGUuZGF0YTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdFNpZGUgPT09IHJpZ2h0U2lkZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICchPT0nKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gIXZhbHVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnPicpIHtcblx0ICAgICAgICAgIHZhbHVlID0gY29tcCA9PSAxO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnPj0nKSB7XG5cdCAgICAgICAgICB2YWx1ZSA9IGNvbXAgPT0gMSB8fCBjb21wID09PSAwO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnPCcpIHtcblx0ICAgICAgICAgIHZhbHVlID0gY29tcCA9PSAtMTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJzw9Jykge1xuXHQgICAgICAgICAgdmFsdWUgPSBjb21wID09IC0xIHx8IGNvbXAgPT09IDA7XG5cdCAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICcrJykge1xuXHQgICAgICAgICAgaWYgKGxlZnRTaWRlLnR5cGUgPT0gJ3N0cmluZycgfHwgcmlnaHRTaWRlLnR5cGUgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgdmFyIGxlZnRWYWx1ZSA9IGxlZnRTaWRlLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICAgIHZhciByaWdodFZhbHVlID0gcmlnaHRTaWRlLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgbGVmdFZhbHVlID0gbGVmdFNpZGUudG9OdW1iZXIoKTtcblx0ICAgICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSByaWdodFNpZGUudG9OdW1iZXIoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlICsgcmlnaHRWYWx1ZTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ2luJykge1xuXHQgICAgICAgICAgdmFsdWUgPSB0aGlzLmhhc1Byb3BlcnR5KHJpZ2h0U2lkZSwgbGVmdFNpZGUpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnaW5zdGFuY2VvZicpIHtcblx0ICAgICAgICAgIGlmICghdGhpcy5pc2EocmlnaHRTaWRlLCB0aGlzLkZVTkNUSU9OKSkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgJ0V4cGVjdGluZyBhIGZ1bmN0aW9uIGluIGluc3RhbmNlb2YgY2hlY2snKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZhbHVlID0gdGhpcy5pc2EobGVmdFNpZGUsIHJpZ2h0U2lkZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBsZWZ0VmFsdWUgPSBsZWZ0U2lkZS50b051bWJlcigpO1xuXHQgICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSByaWdodFNpZGUudG9OdW1iZXIoKTtcblx0ICAgICAgICAgIGlmIChub2RlLm9wZXJhdG9yID09ICctJykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAtIHJpZ2h0VmFsdWU7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyonKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlICogcmlnaHRWYWx1ZTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnLycpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgLyByaWdodFZhbHVlO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICclJykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAlIHJpZ2h0VmFsdWU7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyYnKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlICYgcmlnaHRWYWx1ZTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnfCcpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgfCByaWdodFZhbHVlO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICdeJykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSBeIHJpZ2h0VmFsdWU7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJzw8Jykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA8PCByaWdodFZhbHVlO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICc+PicpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgPj4gcmlnaHRWYWx1ZTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnPj4+Jykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA+Pj4gcmlnaHRWYWx1ZTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IFN5bnRheEVycm9yKCdVbmtub3duIGJpbmFyeSBvcGVyYXRvcjogJyArIG5vZGUub3BlcmF0b3IpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZSh2YWx1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwQmxvY2tTdGF0ZW1lbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBCbG9ja1N0YXRlbWVudCgpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHZhciBuID0gc3RhdGUubl8gfHwgMDtcblx0ICAgICAgaWYgKG5vZGUuYm9keVtuXSkge1xuXHQgICAgICAgIHN0YXRlLmRvbmUgPSBmYWxzZTtcblx0ICAgICAgICBzdGF0ZS5uXyA9IG4gKyAxO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5ib2R5W25dIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuXHQgICAgICAgIGlmIChzdGF0ZS5ub2RlLnR5cGUgIT0gJ1Byb2dyYW0nKSB7XG5cdCAgICAgICAgICAvLyBMZWF2ZSB0aGUgcm9vdCBzY29wZSBvbiB0aGUgdHJlZSBpbiBjYXNlIHRoZSBwcm9ncmFtIGlzIGFwcGVuZGVkIHRvLlxuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcEJyZWFrU3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwQnJlYWtTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHZhciBsYWJlbCA9IG51bGw7XG5cdCAgICAgIGlmIChub2RlLmxhYmVsKSB7XG5cdCAgICAgICAgbGFiZWwgPSBub2RlLmxhYmVsLm5hbWU7XG5cdCAgICAgIH1cblx0ICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgd2hpbGUgKHN0YXRlICYmIHN0YXRlLm5vZGUudHlwZSAhPSAnQ2FsbEV4cHJlc3Npb24nICYmIHN0YXRlLm5vZGUudHlwZSAhPSAnTmV3RXhwcmVzc2lvbicpIHtcblx0ICAgICAgICBpZiAobGFiZWwgPyBsYWJlbCA9PSBzdGF0ZS5sYWJlbCA6IHN0YXRlLmlzTG9vcCB8fCBzdGF0ZS5pc1N3aXRjaCkge1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIFN5bnRheCBlcnJvciwgZG8gbm90IGFsbG93IHRoaXMgZXJyb3IgdG8gYmUgdHJhcHBlZC5cblx0ICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ0lsbGVnYWwgYnJlYWsgc3RhdGVtZW50Jyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcENhbGxFeHByZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwQ2FsbEV4cHJlc3Npb24oKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuXHQgICAgICBpZiAoIXN0YXRlLmRvbmVDYWxsZWVfKSB7XG5cdCAgICAgICAgc3RhdGUuZG9uZUNhbGxlZV8gPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5jYWxsZWUsIGNvbXBvbmVudHM6IHRydWUgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKCFzdGF0ZS5mdW5jXykge1xuXHQgICAgICAgICAgLy8gRGV0ZXJtaW5lIHZhbHVlIG9mIHRoZSBmdW5jdGlvbi5cblx0ICAgICAgICAgIGlmIChzdGF0ZS52YWx1ZS50eXBlID09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgc3RhdGUuZnVuY18gPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChzdGF0ZS52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICBzdGF0ZS5tZW1iZXJfID0gc3RhdGUudmFsdWVbMF07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgc3RhdGUuZnVuY18gPSB0aGlzLmdldFZhbHVlKHN0YXRlLnZhbHVlKTtcblx0ICAgICAgICAgICAgaWYgKCFzdGF0ZS5mdW5jXyB8fCBzdGF0ZS5mdW5jXy50eXBlICE9ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHRoaXMuVFlQRV9FUlJPUiwgKHN0YXRlLnZhbHVlICYmIHN0YXRlLnZhbHVlLnR5cGUpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHQgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgLy8gRGV0ZXJtaW5lIHZhbHVlIG9mICd0aGlzJyBpbiBmdW5jdGlvbi5cblx0ICAgICAgICAgIGlmIChzdGF0ZS5ub2RlLnR5cGUgPT0gJ05ld0V4cHJlc3Npb24nKSB7XG5cdCAgICAgICAgICAgIHN0YXRlLmZ1bmNUaGlzXyA9IHRoaXMuY3JlYXRlT2JqZWN0KHN0YXRlLmZ1bmNfKTtcblx0ICAgICAgICAgICAgc3RhdGUuaXNDb25zdHJ1Y3Rvcl8gPSB0cnVlO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgc3RhdGUuZnVuY1RoaXNfID0gc3RhdGUudmFsdWVbMF07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzdGF0ZS5mdW5jVGhpc18gPSB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdLnRoaXNFeHByZXNzaW9uO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgc3RhdGUuYXJndW1lbnRzID0gW107XG5cdCAgICAgICAgICB2YXIgbiA9IDA7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBuID0gc3RhdGUubl87XG5cdCAgICAgICAgICBpZiAoc3RhdGUuYXJndW1lbnRzLmxlbmd0aCAhPSBub2RlLmFyZ3VtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgc3RhdGUuYXJndW1lbnRzW24gLSAxXSA9IHN0YXRlLnZhbHVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobm9kZS5hcmd1bWVudHNbbl0pIHtcblx0ICAgICAgICAgIHN0YXRlLm5fID0gbiArIDE7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUuYXJndW1lbnRzW25dIH0pO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVFeGVjKSB7XG5cdCAgICAgICAgICB0aGlzLmV4ZWN1dGVGdW5jdGlvbigpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICAgIGlmIChzdGF0ZS5pc0NvbnN0cnVjdG9yXyAmJiBzdGF0ZS52YWx1ZS50eXBlICE9PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSBzdGF0ZS5mdW5jVGhpc187XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdleGVjdXRlRnVuY3Rpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGVGdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHN0YXRlLmRvbmVFeGVjID0gdHJ1ZTtcblx0ICAgICAgaWYgKHN0YXRlLmZ1bmNfLm5vZGUgJiYgKHN0YXRlLmZ1bmNfLm5vZGUudHlwZSA9PSAnRnVuY3Rpb25BcHBseV8nIHx8IHN0YXRlLmZ1bmNfLm5vZGUudHlwZSA9PSAnRnVuY3Rpb25DYWxsXycpKSB7XG5cdCAgICAgICAgc3RhdGUuZnVuY1RoaXNfID0gc3RhdGUuYXJndW1lbnRzLnNoaWZ0KCk7XG5cdCAgICAgICAgaWYgKHN0YXRlLmZ1bmNfLm5vZGUudHlwZSA9PSAnRnVuY3Rpb25BcHBseV8nKSB7XG5cdCAgICAgICAgICAvLyBVbnBhY2sgYWxsIHRoZSBhcmd1bWVudHMgZnJvbSB0aGUgcHJvdmlkZWQgYXJyYXkuXG5cdCAgICAgICAgICB2YXIgYXJnc0xpc3QgPSBzdGF0ZS5hcmd1bWVudHMuc2hpZnQoKTtcblx0ICAgICAgICAgIGlmIChhcmdzTGlzdCAmJiB0aGlzLmlzYShhcmdzTGlzdCwgdGhpcy5BUlJBWSkpIHtcblx0ICAgICAgICAgICAgc3RhdGUuYXJndW1lbnRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnc0xpc3QubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICBzdGF0ZS5hcmd1bWVudHNbaV0gPSB0aGlzLmdldFByb3BlcnR5KGFyZ3NMaXN0LCBpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgc3RhdGUuYXJndW1lbnRzID0gW107XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0YXRlLmZ1bmNfID0gc3RhdGUubWVtYmVyXztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoc3RhdGUuZnVuY18ubm9kZSkge1xuXHQgICAgICAgIHZhciBzY29wZSA9IHRoaXMuY3JlYXRlU2NvcGUoc3RhdGUuZnVuY18ubm9kZS5ib2R5LCBzdGF0ZS5mdW5jXy5wYXJlbnRTY29wZSk7XG5cdCAgICAgICAgLy8gQWRkIGFsbCBhcmd1bWVudHMuXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5mdW5jXy5ub2RlLnBhcmFtcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgdmFyIHBhcmFtTmFtZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHN0YXRlLmZ1bmNfLm5vZGUucGFyYW1zW2ldLm5hbWUpO1xuXHQgICAgICAgICAgdmFyIHBhcmFtVmFsdWUgPSBzdGF0ZS5hcmd1bWVudHMubGVuZ3RoID4gaSA/IHN0YXRlLmFyZ3VtZW50c1tpXSA6IHRoaXMuVU5ERUZJTkVEO1xuXHQgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgcGFyYW1OYW1lLCBwYXJhbVZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gQnVpbGQgYXJndW1lbnRzIHZhcmlhYmxlLlxuXHQgICAgICAgIHZhciBhcmdzTGlzdCA9IHRoaXMuY3JlYXRlT2JqZWN0KHRoaXMuQVJSQVkpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICB0aGlzLnNldFByb3BlcnR5KGFyZ3NMaXN0LCB0aGlzLmNyZWF0ZVByaW1pdGl2ZShpKSwgc3RhdGUuYXJndW1lbnRzW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzY29wZSwgJ2FyZ3VtZW50cycsIGFyZ3NMaXN0KTtcblx0ICAgICAgICB2YXIgZnVuY1N0YXRlID0ge1xuXHQgICAgICAgICAgbm9kZTogc3RhdGUuZnVuY18ubm9kZS5ib2R5LFxuXHQgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuXHQgICAgICAgICAgdGhpc0V4cHJlc3Npb246IHN0YXRlLmZ1bmNUaGlzX1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoZnVuY1N0YXRlKTtcblx0ICAgICAgICBzdGF0ZS52YWx1ZSA9IHRoaXMuVU5ERUZJTkVEOyAvLyBEZWZhdWx0IHZhbHVlIGlmIG5vIGV4cGxpY2l0IHJldHVybi5cblx0ICAgICAgfSBlbHNlIGlmIChzdGF0ZS5mdW5jXy5uYXRpdmVGdW5jKSB7XG5cdCAgICAgICAgc3RhdGUudmFsdWUgPSBzdGF0ZS5mdW5jXy5uYXRpdmVGdW5jLmFwcGx5KHN0YXRlLmZ1bmNUaGlzXywgc3RhdGUuYXJndW1lbnRzKTtcblx0ICAgICAgfSBlbHNlIGlmIChzdGF0ZS5mdW5jXy5hc3luY0Z1bmMpIHtcblx0ICAgICAgICB2YXIgdGhpc0ludGVycHJldGVyID0gdGhpcztcblx0ICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayh2YWx1ZSkge1xuXHQgICAgICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZSB8fCB0aGlzSW50ZXJwcmV0ZXIuVU5ERUZJTkVEO1xuXHQgICAgICAgICAgdGhpc0ludGVycHJldGVyLnBhdXNlZF8gPSBmYWxzZTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHZhciBhcmdzV2l0aENhbGxiYWNrID0gc3RhdGUuYXJndW1lbnRzLmNvbmNhdChjYWxsYmFjayk7XG5cdCAgICAgICAgc3RhdGUuZnVuY18uYXN5bmNGdW5jLmFwcGx5KHN0YXRlLmZ1bmNUaGlzXywgYXJnc1dpdGhDYWxsYmFjayk7XG5cdCAgICAgICAgdGhpcy5wYXVzZWRfID0gdHJ1ZTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZnVuY18uZXZhbCkge1xuXHQgICAgICAgIHZhciBjb2RlID0gc3RhdGUuYXJndW1lbnRzWzBdO1xuXHQgICAgICAgIGlmICghY29kZSkge1xuXHQgICAgICAgICAgc3RhdGUudmFsdWUgPSB0aGlzLlVOREVGSU5FRDtcblx0ICAgICAgICB9IGVsc2UgaWYgKCFjb2RlLmlzUHJpbWl0aXZlKSB7XG5cdCAgICAgICAgICAvLyBKUyBkb2VzIG5vdCBwYXJzZSBTdHJpbmcgb2JqZWN0czpcblx0ICAgICAgICAgIC8vIGV2YWwobmV3IFN0cmluZygnMSArIDEnKSkgLT4gJzEgKyAxJ1xuXHQgICAgICAgICAgc3RhdGUudmFsdWUgPSBjb2RlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgZXZhbEludGVycHJldGVyID0gbmV3IEludGVycHJldGVyKGNvZGUudG9TdHJpbmcoKSk7XG5cdCAgICAgICAgICBldmFsSW50ZXJwcmV0ZXIuc3RhdGVTdGFja1swXS5zY29wZS5wYXJlbnRTY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcblx0ICAgICAgICAgIHN0YXRlID0ge1xuXHQgICAgICAgICAgICBub2RlOiB7IHR5cGU6ICdFdmFsXycgfSxcblx0ICAgICAgICAgICAgaW50ZXJwcmV0ZXI6IGV2YWxJbnRlcnByZXRlclxuXHQgICAgICAgICAgfTtcblx0ICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHN0YXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdmdW5jdGlvbiBub3QgYSBmdW5jdGlvbiAoaHVoPyknKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBDYXRjaENsYXVzZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcENhdGNoQ2xhdXNlKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcblx0ICAgICAgaWYgKCFzdGF0ZS5kb25lQm9keSkge1xuXHQgICAgICAgIHN0YXRlLmRvbmVCb2R5ID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgc2NvcGU7XG5cdCAgICAgICAgaWYgKG5vZGUucGFyYW0pIHtcblx0ICAgICAgICAgIHNjb3BlID0gdGhpcy5jcmVhdGVTcGVjaWFsU2NvcGUodGhpcy5nZXRTY29wZSgpKTtcblx0ICAgICAgICAgIC8vIEFkZCB0aGUgYXJndW1lbnQuXG5cdCAgICAgICAgICB2YXIgcGFyYW1OYW1lID0gdGhpcy5jcmVhdGVQcmltaXRpdmUobm9kZS5wYXJhbS5uYW1lKTtcblx0ICAgICAgICAgIHRoaXMuc2V0UHJvcGVydHkoc2NvcGUsIHBhcmFtTmFtZSwgc3RhdGUudGhyb3dWYWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5ib2R5LCBzY29wZTogc2NvcGUgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwQ29uZGl0aW9uYWxFeHByZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwQ29uZGl0aW9uYWxFeHByZXNzaW9uKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIGlmICghc3RhdGUuZG9uZSkge1xuXHQgICAgICAgIGlmICghc3RhdGUudGVzdCkge1xuXHQgICAgICAgICAgc3RhdGUudGVzdCA9IHRydWU7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IHN0YXRlLm5vZGUudGVzdCB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XG5cdCAgICAgICAgICBpZiAoc3RhdGUudmFsdWUudG9Cb29sZWFuKCkgJiYgc3RhdGUubm9kZS5jb25zZXF1ZW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogc3RhdGUubm9kZS5jb25zZXF1ZW50IH0pO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICghc3RhdGUudmFsdWUudG9Cb29sZWFuKCkgJiYgc3RhdGUubm9kZS5hbHRlcm5hdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBzdGF0ZS5ub2RlLmFsdGVybmF0ZSB9KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgaWYgKHN0YXRlLm5vZGUudHlwZSA9PSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUudmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcENvbnRpbnVlU3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwQ29udGludWVTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5zdGF0ZVN0YWNrWzBdLm5vZGU7XG5cdCAgICAgIHZhciBsYWJlbCA9IG51bGw7XG5cdCAgICAgIGlmIChub2RlLmxhYmVsKSB7XG5cdCAgICAgICAgbGFiZWwgPSBub2RlLmxhYmVsLm5hbWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB3aGlsZSAoc3RhdGUgJiYgc3RhdGUubm9kZS50eXBlICE9ICdDYWxsRXhwcmVzc2lvbicgJiYgc3RhdGUubm9kZS50eXBlICE9ICdOZXdFeHByZXNzaW9uJykge1xuXHQgICAgICAgIGlmIChzdGF0ZS5pc0xvb3ApIHtcblx0ICAgICAgICAgIGlmICghbGFiZWwgfHwgbGFiZWwgPT0gc3RhdGUubGFiZWwpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBTeW50YXggZXJyb3IsIGRvIG5vdCBhbGxvdyB0aGlzIGVycm9yIHRvIGJlIHRyYXBwZWQuXG5cdCAgICAgIHRocm93IFN5bnRheEVycm9yKCdJbGxlZ2FsIGNvbnRpbnVlIHN0YXRlbWVudCcpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBEb1doaWxlU3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwRG9XaGlsZVN0YXRlbWVudCgpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICBzdGF0ZS5pc0xvb3AgPSB0cnVlO1xuXHQgICAgICBpZiAoc3RhdGUubm9kZS50eXBlID09ICdEb1doaWxlU3RhdGVtZW50JyAmJiBzdGF0ZS50ZXN0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAvLyBGaXJzdCBpdGVyYXRpb24gb2YgZG8vd2hpbGUgZXhlY3V0ZXMgd2l0aG91dCBjaGVja2luZyB0ZXN0LlxuXHQgICAgICAgIHN0YXRlLnZhbHVlID0gdGhpcy5UUlVFO1xuXHQgICAgICAgIHN0YXRlLnRlc3QgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghc3RhdGUudGVzdCkge1xuXHQgICAgICAgIHN0YXRlLnRlc3QgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogc3RhdGUubm9kZS50ZXN0IH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHN0YXRlLnRlc3QgPSBmYWxzZTtcblx0ICAgICAgICBpZiAoIXN0YXRlLnZhbHVlLnRvQm9vbGVhbigpKSB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLm5vZGUuYm9keSkge1xuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBzdGF0ZS5ub2RlLmJvZHkgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcEVtcHR5U3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwRW1wdHlTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBFdmFsXycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcEV2YWxfKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIGlmICghc3RhdGUuaW50ZXJwcmV0ZXIuc3RlcCgpKSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUuaW50ZXJwcmV0ZXIudmFsdWUgfHwgdGhpcy5VTkRFRklORUQ7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwRXhwcmVzc2lvblN0YXRlbWVudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcEV4cHJlc3Npb25TdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgaWYgKCFzdGF0ZS5kb25lKSB7XG5cdCAgICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBzdGF0ZS5ub2RlLmV4cHJlc3Npb24gfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgLy8gU2F2ZSB0aGlzIHZhbHVlIHRvIHRoZSBpbnRlcnByZXRlciBmb3IgdXNlIGFzIGEgcmV0dXJuIHZhbHVlIGlmXG5cdCAgICAgICAgLy8gdGhpcyBjb2RlIGlzIGluc2lkZSBhbiBldmFsIGZ1bmN0aW9uLlxuXHQgICAgICAgIHRoaXMudmFsdWUgPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBGb3JJblN0YXRlbWVudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcEZvckluU3RhdGVtZW50KCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIHN0YXRlLmlzTG9vcCA9IHRydWU7XG5cdCAgICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcblx0ICAgICAgaWYgKCFzdGF0ZS5kb25lVmFyaWFibGVfKSB7XG5cdCAgICAgICAgc3RhdGUuZG9uZVZhcmlhYmxlXyA9IHRydWU7XG5cdCAgICAgICAgdmFyIGxlZnQgPSBub2RlLmxlZnQ7XG5cdCAgICAgICAgaWYgKGxlZnQudHlwZSA9PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICAgIC8vIElubGluZSB2YXJpYWJsZSBkZWNsYXJhdGlvbjogZm9yICh2YXIgeCBpbiB5KVxuXHQgICAgICAgICAgbGVmdCA9IGxlZnQuZGVjbGFyYXRpb25zWzBdLmlkO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IGxlZnQsIGNvbXBvbmVudHM6IHRydWUgfSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLmRvbmVPYmplY3RfKSB7XG5cdCAgICAgICAgc3RhdGUuZG9uZU9iamVjdF8gPSB0cnVlO1xuXHQgICAgICAgIHN0YXRlLnZhcmlhYmxlID0gc3RhdGUudmFsdWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLnJpZ2h0IH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUuaXRlcmF0b3IgPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgIC8vIEZpcnN0IGl0ZXJhdGlvbi5cblx0ICAgICAgICAgIHN0YXRlLm9iamVjdCA9IHN0YXRlLnZhbHVlO1xuXHQgICAgICAgICAgc3RhdGUuaXRlcmF0b3IgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG5cdCAgICAgICAgZG9uZTogZG8ge1xuXHQgICAgICAgICAgdmFyIGkgPSBzdGF0ZS5pdGVyYXRvcjtcblx0ICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc3RhdGUub2JqZWN0LnByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgaWYgKHByb3AgaW4gc3RhdGUub2JqZWN0Lm5vbmVudW1lcmFibGUpIHtcblx0ICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoaSA9PSAwKSB7XG5cdCAgICAgICAgICAgICAgbmFtZSA9IHByb3A7XG5cdCAgICAgICAgICAgICAgYnJlYWsgZG9uZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpLS07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBzdGF0ZS5vYmplY3QgPSBzdGF0ZS5vYmplY3QucGFyZW50ICYmIHN0YXRlLm9iamVjdC5wYXJlbnQucHJvcGVydGllcy5wcm90b3R5cGU7XG5cdCAgICAgICAgICBzdGF0ZS5pdGVyYXRvciA9IDA7XG5cdCAgICAgICAgfSB3aGlsZSAoc3RhdGUub2JqZWN0KTtcblx0ICAgICAgICBzdGF0ZS5pdGVyYXRvcisrO1xuXHQgICAgICAgIGlmIChuYW1lID09PSBudWxsKSB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhpcy5zZXRWYWx1ZVRvU2NvcGUoc3RhdGUudmFyaWFibGUsIHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5hbWUpKTtcblx0ICAgICAgICAgIGlmIChub2RlLmJvZHkpIHtcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLmJvZHkgfSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcEZvclN0YXRlbWVudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcEZvclN0YXRlbWVudCgpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICBzdGF0ZS5pc0xvb3AgPSB0cnVlO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHZhciBtb2RlID0gc3RhdGUubW9kZSB8fCAwO1xuXHQgICAgICBpZiAobW9kZSA9PSAwKSB7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IDE7XG5cdCAgICAgICAgaWYgKG5vZGUuaW5pdCkge1xuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLmluaXQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gMSkge1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSAyO1xuXHQgICAgICAgIGlmIChub2RlLnRlc3QpIHtcblx0ICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS50ZXN0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmIChtb2RlID09IDIpIHtcblx0ICAgICAgICBzdGF0ZS5tb2RlID0gMztcblx0ICAgICAgICBpZiAobm9kZS50ZXN0ICYmIHN0YXRlLnZhbHVlICYmICFzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKSkge1xuXHQgICAgICAgICAgLy8gTG9vcCBjb21wbGV0ZS4gIEJhaWwgb3V0LlxuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChub2RlLmJvZHkpIHtcblx0ICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5ib2R5IH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmIChtb2RlID09IDMpIHtcblx0ICAgICAgICBzdGF0ZS5tb2RlID0gMTtcblx0ICAgICAgICBpZiAobm9kZS51cGRhdGUpIHtcblx0ICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS51cGRhdGUgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcEZ1bmN0aW9uRGVjbGFyYXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBGdW5jdGlvbkRlY2xhcmF0aW9uKCkge1xuXHQgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwRnVuY3Rpb25FeHByZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwRnVuY3Rpb25FeHByZXNzaW9uKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gdGhpcy5jcmVhdGVGdW5jdGlvbihzdGF0ZS5ub2RlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwSWRlbnRpZmllcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcElkZW50aWZpZXIoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB2YXIgbmFtZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHN0YXRlLm5vZGUubmFtZSk7XG5cdCAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHN0YXRlLmNvbXBvbmVudHMgPyBuYW1lIDogdGhpcy5nZXRWYWx1ZUZyb21TY29wZShuYW1lKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwSWZTdGF0ZW1lbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBJZlN0YXRlbWVudCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc3RlcENvbmRpdGlvbmFsRXhwcmVzc2lvbigpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBMYWJlbGVkU3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwTGFiZWxlZFN0YXRlbWVudCgpIHtcblx0ICAgICAgLy8gTm8gbmVlZCB0byBoaXQgdGhpcyBub2RlIGFnYWluIG9uIHRoZSB3YXkgYmFjayB1cCB0aGUgc3RhY2suXG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IHN0YXRlLm5vZGUuYm9keSxcblx0ICAgICAgICBsYWJlbDogc3RhdGUubm9kZS5sYWJlbC5uYW1lIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBMaXRlcmFsJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwTGl0ZXJhbCgpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHN0YXRlLm5vZGUudmFsdWUpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBMb2dpY2FsRXhwcmVzc2lvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcExvZ2ljYWxFeHByZXNzaW9uKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcblx0ICAgICAgaWYgKG5vZGUub3BlcmF0b3IgIT0gJyYmJyAmJiBub2RlLm9wZXJhdG9yICE9ICd8fCcpIHtcblx0ICAgICAgICB0aHJvdyBTeW50YXhFcnJvcignVW5rbm93biBsb2dpY2FsIG9wZXJhdG9yOiAnICsgbm9kZS5vcGVyYXRvcik7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKCFzdGF0ZS5kb25lTGVmdF8pIHtcblx0ICAgICAgICBzdGF0ZS5kb25lTGVmdF8gPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5sZWZ0IH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lUmlnaHRfKSB7XG5cdCAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyYmJyAmJiAhc3RhdGUudmFsdWUudG9Cb29sZWFuKCkgfHwgbm9kZS5vcGVyYXRvciA9PSAnfHwnICYmIHN0YXRlLnZhbHVlLnRvQm9vbGVhbigpKSB7XG5cdCAgICAgICAgICAvLyBTaG9ydGN1dCBldmFsdWF0aW9uLlxuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc3RhdGUuZG9uZVJpZ2h0XyA9IHRydWU7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUucmlnaHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHN0YXRlLnZhbHVlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcE1lbWJlckV4cHJlc3Npb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBNZW1iZXJFeHByZXNzaW9uKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcblx0ICAgICAgaWYgKCFzdGF0ZS5kb25lT2JqZWN0Xykge1xuXHQgICAgICAgIHN0YXRlLmRvbmVPYmplY3RfID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUub2JqZWN0IH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lUHJvcGVydHlfKSB7XG5cdCAgICAgICAgc3RhdGUuZG9uZVByb3BlcnR5XyA9IHRydWU7XG5cdCAgICAgICAgc3RhdGUub2JqZWN0ID0gc3RhdGUudmFsdWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoe1xuXHQgICAgICAgICAgbm9kZTogbm9kZS5wcm9wZXJ0eSxcblx0ICAgICAgICAgIGNvbXBvbmVudHM6ICFub2RlLmNvbXB1dGVkXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgaWYgKHN0YXRlLmNvbXBvbmVudHMpIHtcblx0ICAgICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IFtzdGF0ZS5vYmplY3QsIHN0YXRlLnZhbHVlXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gdGhpcy5nZXRQcm9wZXJ0eShzdGF0ZS5vYmplY3QsIHN0YXRlLnZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwTmV3RXhwcmVzc2lvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcE5ld0V4cHJlc3Npb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnN0ZXBDYWxsRXhwcmVzc2lvbigpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBPYmplY3RFeHByZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwT2JqZWN0RXhwcmVzc2lvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHZhciB2YWx1ZVRvZ2dsZSA9IHN0YXRlLnZhbHVlVG9nZ2xlO1xuXHQgICAgICB2YXIgbiA9IHN0YXRlLm4gfHwgMDtcblx0ICAgICAgaWYgKCFzdGF0ZS5vYmplY3QpIHtcblx0ICAgICAgICBzdGF0ZS5vYmplY3QgPSB0aGlzLmNyZWF0ZU9iamVjdCh0aGlzLk9CSkVDVCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKHZhbHVlVG9nZ2xlKSB7XG5cdCAgICAgICAgICBzdGF0ZS5rZXkgPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShzdGF0ZS5vYmplY3QsIHN0YXRlLmtleSwgc3RhdGUudmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAobm9kZS5wcm9wZXJ0aWVzW25dKSB7XG5cdCAgICAgICAgaWYgKHZhbHVlVG9nZ2xlKSB7XG5cdCAgICAgICAgICBzdGF0ZS5uID0gbiArIDE7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUucHJvcGVydGllc1tuXS52YWx1ZSB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLnByb3BlcnRpZXNbbl0ua2V5LCBjb21wb25lbnRzOiB0cnVlIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdGF0ZS52YWx1ZVRvZ2dsZSA9ICF2YWx1ZVRvZ2dsZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSBzdGF0ZS5vYmplY3Q7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwUHJvZ3JhbScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcFByb2dyYW0oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnN0ZXBCbG9ja1N0YXRlbWVudCgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBSZXR1cm5TdGF0ZW1lbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBSZXR1cm5TdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuXHQgICAgICBpZiAobm9kZS5hcmd1bWVudCAmJiAhc3RhdGUuZG9uZSkge1xuXHQgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5hcmd1bWVudCB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZSB8fCB0aGlzLlVOREVGSU5FRDtcblx0ICAgICAgICBkbyB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2subGVuZ3RoID09IDApIHtcblx0ICAgICAgICAgICAgLy8gU3ludGF4IGVycm9yLCBkbyBub3QgYWxsb3cgdGhpcyBlcnJvciB0byBiZSB0cmFwcGVkLlxuXHQgICAgICAgICAgICB0aHJvdyBTeW50YXhFcnJvcignSWxsZWdhbCByZXR1cm4gc3RhdGVtZW50Jyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgICB9IHdoaWxlIChzdGF0ZS5ub2RlLnR5cGUgIT0gJ0NhbGxFeHByZXNzaW9uJyAmJiBzdGF0ZS5ub2RlLnR5cGUgIT0gJ05ld0V4cHJlc3Npb24nKTtcblx0ICAgICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcFNlcXVlbmNlRXhwcmVzc2lvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcFNlcXVlbmNlRXhwcmVzc2lvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIHZhciBuID0gc3RhdGUubiB8fCAwO1xuXHQgICAgICBpZiAobm9kZS5leHByZXNzaW9uc1tuXSkge1xuXHQgICAgICAgIHN0YXRlLm4gPSBuICsgMTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUuZXhwcmVzc2lvbnNbbl0gfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrWzBdLnZhbHVlID0gc3RhdGUudmFsdWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwU3dpdGNoU3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwU3dpdGNoU3RhdGVtZW50KCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIHN0YXRlLmNoZWNrZWQgPSBzdGF0ZS5jaGVja2VkIHx8IFtdO1xuXHQgICAgICBzdGF0ZS5pc1N3aXRjaCA9IHRydWU7XG5cdFxuXHQgICAgICBpZiAoIXN0YXRlLnRlc3QpIHtcblx0ICAgICAgICBzdGF0ZS50ZXN0ID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IHN0YXRlLm5vZGUuZGlzY3JpbWluYW50IH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmICghc3RhdGUuc3dpdGNoVmFsdWUpIHtcblx0ICAgICAgICAgIC8vIFByZXNlcnZlIHN3aXRjaCB2YWx1ZSBiZXR3ZWVuIGNhc2UgdGVzdHMuXG5cdCAgICAgICAgICBzdGF0ZS5zd2l0Y2hWYWx1ZSA9IHN0YXRlLnZhbHVlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXggfHwgMDtcblx0ICAgICAgICB2YXIgY3VycmVudENhc2UgPSBzdGF0ZS5ub2RlLmNhc2VzW2luZGV4XTtcblx0ICAgICAgICBpZiAoY3VycmVudENhc2UpIHtcblx0ICAgICAgICAgIGlmICghc3RhdGUuZG9uZSAmJiAhc3RhdGUuY2hlY2tlZFtpbmRleF0gJiYgY3VycmVudENhc2UudGVzdCkge1xuXHQgICAgICAgICAgICBzdGF0ZS5jaGVja2VkW2luZGV4XSA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogY3VycmVudENhc2UudGVzdCB9KTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIFRlc3Qgb24gdGhlIGRlZmF1bHQgY2FzZSB3aWxsIGJlIG51bGwuXG5cdCAgICAgICAgICAgIGlmIChzdGF0ZS5kb25lIHx8ICFjdXJyZW50Q2FzZS50ZXN0IHx8IHRoaXMuY29tcChzdGF0ZS52YWx1ZSwgc3RhdGUuc3dpdGNoVmFsdWUpID09IDApIHtcblx0ICAgICAgICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICB2YXIgbiA9IHN0YXRlLm4gfHwgMDtcblx0ICAgICAgICAgICAgICBpZiAoY3VycmVudENhc2UuY29uc2VxdWVudFtuXSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBjdXJyZW50Q2FzZS5jb25zZXF1ZW50W25dIH0pO1xuXHQgICAgICAgICAgICAgICAgc3RhdGUubiA9IG4gKyAxO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBzdGF0ZS5uID0gMDtcblx0ICAgICAgICAgICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBUaGlzRXhwcmVzc2lvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcFRoaXNFeHByZXNzaW9uKCkge1xuXHQgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXRlU3RhY2subGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBpZiAodGhpcy5zdGF0ZVN0YWNrW2ldLnRoaXNFeHByZXNzaW9uKSB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlU3RhY2tbMF0udmFsdWUgPSB0aGlzLnN0YXRlU3RhY2tbaV0udGhpc0V4cHJlc3Npb247XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRocm93IEVycm9yKCdObyB0aGlzIGV4cHJlc3Npb24gZm91bmQuJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcFRocm93U3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwVGhyb3dTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuXHQgICAgICBpZiAoIXN0YXRlLmFyZ3VtZW50KSB7XG5cdCAgICAgICAgc3RhdGUuYXJndW1lbnQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5hcmd1bWVudCB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnRocm93RXhjZXB0aW9uKHN0YXRlLnZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBUcnlTdGF0ZW1lbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBUcnlTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuXHQgICAgICBpZiAoIXN0YXRlLmRvbmVCbG9jaykge1xuXHQgICAgICAgIHN0YXRlLmRvbmVCbG9jayA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLmJsb2NrIH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lRmluYWxpemVyICYmIG5vZGUuZmluYWxpemVyKSB7XG5cdCAgICAgICAgc3RhdGUuZG9uZUZpbmFsaXplciA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQoeyBub2RlOiBub2RlLmZpbmFsaXplciB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBVbmFyeUV4cHJlc3Npb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBVbmFyeUV4cHJlc3Npb24oKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuXHQgICAgICBpZiAoIXN0YXRlLmRvbmUpIHtcblx0ICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgbmV4dFN0YXRlID0geyBub2RlOiBub2RlLmFyZ3VtZW50IH07XG5cdCAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ2RlbGV0ZScpIHtcblx0ICAgICAgICAgIG5leHRTdGF0ZS5jb21wb25lbnRzID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnVuc2hpZnQobmV4dFN0YXRlKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICB2YXIgdmFsdWU7XG5cdCAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJy0nKSB7XG5cdCAgICAgICAgICB2YWx1ZSA9IC1zdGF0ZS52YWx1ZS50b051bWJlcigpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnKycpIHtcblx0ICAgICAgICAgIHZhbHVlID0gc3RhdGUudmFsdWUudG9OdW1iZXIoKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJyEnKSB7XG5cdCAgICAgICAgICB2YWx1ZSA9ICFzdGF0ZS52YWx1ZS50b0Jvb2xlYW4oKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJ34nKSB7XG5cdCAgICAgICAgICB2YWx1ZSA9IH5zdGF0ZS52YWx1ZS50b051bWJlcigpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAndHlwZW9mJykge1xuXHQgICAgICAgICAgdmFsdWUgPSBzdGF0ZS52YWx1ZS50eXBlO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PSAnZGVsZXRlJykge1xuXHQgICAgICAgICAgaWYgKHN0YXRlLnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICB2YXIgb2JqID0gc3RhdGUudmFsdWVbMF07XG5cdCAgICAgICAgICAgIHZhciBuYW1lID0gc3RhdGUudmFsdWVbMV07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgb2JqID0gdGhpcy5nZXRTY29wZSgpO1xuXHQgICAgICAgICAgICB2YXIgbmFtZSA9IHN0YXRlLnZhbHVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFsdWUgPSB0aGlzLmRlbGV0ZVByb3BlcnR5KG9iaiwgbmFtZSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChub2RlLm9wZXJhdG9yID09ICd2b2lkJykge1xuXHQgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRocm93IFN5bnRheEVycm9yKCdVbmtub3duIHVuYXJ5IG9wZXJhdG9yOiAnICsgbm9kZS5vcGVyYXRvcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IHRoaXMuY3JlYXRlUHJpbWl0aXZlKHZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3N0ZXBVcGRhdGVFeHByZXNzaW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwVXBkYXRlRXhwcmVzc2lvbigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIGlmICghc3RhdGUuZG9uZSkge1xuXHQgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay51bnNoaWZ0KHsgbm9kZTogbm9kZS5hcmd1bWVudCwgY29tcG9uZW50czogdHJ1ZSB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2suc2hpZnQoKTtcblx0ICAgICAgICB2YXIgbGVmdFNpZGUgPSBzdGF0ZS52YWx1ZTtcblx0ICAgICAgICB2YXIgbGVmdFZhbHVlID0gdGhpcy5nZXRWYWx1ZShsZWZ0U2lkZSkudG9OdW1iZXIoKTtcblx0ICAgICAgICB2YXIgY2hhbmdlVmFsdWU7XG5cdCAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT0gJysrJykge1xuXHQgICAgICAgICAgY2hhbmdlVmFsdWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZShsZWZ0VmFsdWUgKyAxKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT0gJy0tJykge1xuXHQgICAgICAgICAgY2hhbmdlVmFsdWUgPSB0aGlzLmNyZWF0ZVByaW1pdGl2ZShsZWZ0VmFsdWUgLSAxKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoJ1Vua25vd24gdXBkYXRlIGV4cHJlc3Npb246ICcgKyBub2RlLm9wZXJhdG9yKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5zZXRWYWx1ZShsZWZ0U2lkZSwgY2hhbmdlVmFsdWUpO1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFja1swXS52YWx1ZSA9IG5vZGUucHJlZml4ID8gY2hhbmdlVmFsdWUgOiB0aGlzLmNyZWF0ZVByaW1pdGl2ZShsZWZ0VmFsdWUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcFZhcmlhYmxlRGVjbGFyYXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0ZXBWYXJpYWJsZURlY2xhcmF0aW9uKCkge1xuXHQgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2tbMF07XG5cdCAgICAgIHZhciBub2RlID0gc3RhdGUubm9kZTtcblx0ICAgICAgdmFyIG4gPSBzdGF0ZS5uIHx8IDA7XG5cdCAgICAgIGlmIChub2RlLmRlY2xhcmF0aW9uc1tuXSkge1xuXHQgICAgICAgIHN0YXRlLm4gPSBuICsgMTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUuZGVjbGFyYXRpb25zW25dIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcFZhcmlhYmxlRGVjbGFyYXRvcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcFZhcmlhYmxlRGVjbGFyYXRvcigpIHtcblx0ICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZVN0YWNrWzBdO1xuXHQgICAgICB2YXIgbm9kZSA9IHN0YXRlLm5vZGU7XG5cdCAgICAgIGlmIChub2RlLmluaXQgJiYgIXN0YXRlLmRvbmUpIHtcblx0ICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUuaW5pdCB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAoIXRoaXMuaGFzUHJvcGVydHkodGhpcywgbm9kZS5pZC5uYW1lKSB8fCBub2RlLmluaXQpIHtcblx0ICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuaW5pdCA/IHN0YXRlLnZhbHVlIDogdGhpcy5VTkRFRklORUQ7XG5cdCAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuY3JlYXRlUHJpbWl0aXZlKG5vZGUuaWQubmFtZSksIHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnNoaWZ0KCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGVwV2l0aFN0YXRlbWVudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RlcFdpdGhTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVTdGFja1swXTtcblx0ICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2RlO1xuXHQgICAgICBpZiAoIXN0YXRlLmRvbmVPYmplY3QpIHtcblx0ICAgICAgICBzdGF0ZS5kb25lT2JqZWN0ID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUub2JqZWN0IH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kb25lQm9keSkge1xuXHQgICAgICAgIHN0YXRlLmRvbmVCb2R5ID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLmNyZWF0ZVNwZWNpYWxTY29wZSh0aGlzLmdldFNjb3BlKCksIHN0YXRlLnZhbHVlKTtcblx0ICAgICAgICB0aGlzLnN0YXRlU3RhY2sudW5zaGlmdCh7IG5vZGU6IG5vZGUuYm9keSwgc2NvcGU6IHNjb3BlIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuc3RhdGVTdGFjay5zaGlmdCgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc3RlcFdoaWxlU3RhdGVtZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzdGVwV2hpbGVTdGF0ZW1lbnQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnN0ZXBEb1doaWxlU3RhdGVtZW50KCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBJbnRlcnByZXRlcjtcblx0fSgpO1xuXHRcblx0LyoqXHJcblx0ICogQ2xhc3MgZm9yIGEgbnVtYmVyLCBzdHJpbmcsIGJvb2xlYW4sIG51bGwsIG9yIHVuZGVmaW5lZC5cclxuXHQgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfHVuZGVmaW5lZH0gZGF0YSBQcmltaXRpdmUgdmFsdWUuXHJcblx0ICogQHBhcmFtIHshSW50ZXJwcmV0ZXJ9IGludGVycHJldGVyIFRoZSBKUyBJbnRlcnByZXRlciB0byBiaW5kIHRvLlxyXG5cdCAqIEBjb25zdHJ1Y3RvclxyXG5cdCAqL1xuXHRcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuZGVmYXVsdCA9IEludGVycHJldGVyO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovdmFyIFByaW1pdGl2ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9QcmltaXRpdmUoZGF0YSwgaW50ZXJwcmV0ZXIpIHtcblx0ICAgIC8qaXN0YW5idWwgaWdub3JlIG5leHQqLygwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFByaW1pdGl2ZSk7XG5cdFxuXHQgICAgdmFyIHR5cGUgPSAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki90eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKTtcblx0ICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cdCAgICB0aGlzLnR5cGUgPSB0eXBlO1xuXHQgICAgaWYgKHR5cGUgPT0gJ251bWJlcicpIHtcblx0ICAgICAgdGhpcy5wYXJlbnQgPSBpbnRlcnByZXRlci5OVU1CRVI7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgdGhpcy5wYXJlbnQgPSBpbnRlcnByZXRlci5TVFJJTkc7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICAgIHRoaXMucGFyZW50ID0gaW50ZXJwcmV0ZXIuQk9PTEVBTjtcblx0ICAgIH1cblx0ICAgIHRoaXMuaXNQcmltaXRpdmUgPSB0cnVlO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUHJpbWl0aXZlLCBbe1xuXHQgICAga2V5OiAndG9Cb29sZWFuJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENvbnZlcnQgdGhpcyBwcmltaXRpdmUgaW50byBhIGJvb2xlYW4uXHJcblx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IEJvb2xlYW4gdmFsdWUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvQm9vbGVhbigpIHtcblx0ICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5kYXRhKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICd0b051bWJlcicsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBDb252ZXJ0IHRoaXMgcHJpbWl0aXZlIGludG8gYSBudW1iZXIuXHJcblx0ICAgICAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIHZhbHVlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b051bWJlcigpIHtcblx0ICAgICAgcmV0dXJuIE51bWJlcih0aGlzLmRhdGEpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3RvU3RyaW5nJyxcblx0XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIENvbnZlcnQgdGhpcyBwcmltaXRpdmUgaW50byBhIHN0cmluZy5cclxuXHQgICAgICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgdmFsdWUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHQgICAgICByZXR1cm4gU3RyaW5nKHRoaXMuZGF0YSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndmFsdWVPZicsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBSZXR1cm4gdGhlIHByaW1pdGl2ZSB2YWx1ZS5cclxuXHQgICAgICogQHJldHVybiB7bnVtYmVyfHN0cmluZ3xib29sZWFufG51bGx8dW5kZWZpbmVkfSBQcmltaXRpdmUgdmFsdWUuXHJcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmRhdGE7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBQcmltaXRpdmU7XG5cdH0oKTtcblx0XG5cdC8qKlxyXG5cdCAqIENsYXNzIGZvciBhbiBvYmplY3QuXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IHBhcmVudCBQYXJlbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXHJcblx0ICogQGNvbnN0cnVjdG9yXHJcblx0ICovXG5cdFxuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovdmFyIEludGVycHJldGVyT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL0ludGVycHJldGVyT2JqZWN0KHBhcmVudCkge1xuXHQgICAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSW50ZXJwcmV0ZXJPYmplY3QpO1xuXHRcblx0ICAgIHRoaXMuZml4ZWQgPSAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NyZWF0ZTIuZGVmYXVsdCkobnVsbCk7XG5cdCAgICB0aGlzLm5vbmVudW1lcmFibGUgPSAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NyZWF0ZTIuZGVmYXVsdCkobnVsbCk7XG5cdCAgICB0aGlzLnByb3BlcnRpZXMgPSAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NyZWF0ZTIuZGVmYXVsdCkobnVsbCk7XG5cdCAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgIHRoaXMudHlwZSA9ICdvYmplY3QnO1xuXHQgICAgdGhpcy5pc1ByaW1pdGl2ZSA9IGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSW50ZXJwcmV0ZXJPYmplY3QsIFt7XG5cdCAgICBrZXk6ICd0b0Jvb2xlYW4nLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogQ29udmVydCB0aGlzIG9iamVjdCBpbnRvIGEgYm9vbGVhbi5cclxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gQm9vbGVhbiB2YWx1ZS5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9Cb29sZWFuKCkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICd0b051bWJlcicsXG5cdFxuXHRcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBDb252ZXJ0IHRoaXMgb2JqZWN0IGludG8gYSBudW1iZXIuXHJcblx0ICAgICAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIHZhbHVlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b051bWJlcigpIHtcblx0ICAgICAgcmV0dXJuIE51bWJlcih0aGlzLmRhdGEgPT09IHVuZGVmaW5lZCA/IHRoaXMudG9TdHJpbmcoKSA6IHRoaXMuZGF0YSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndG9TdHJpbmcnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogQ29udmVydCB0aGlzIG9iamVjdCBpbnRvIGEgc3RyaW5nLlxyXG5cdCAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFN0cmluZyB2YWx1ZS5cclxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmRhdGEgPT09IHVuZGVmaW5lZCA/ICdbJyArIHRoaXMudHlwZSArICddJyA6IFN0cmluZyh0aGlzLmRhdGEpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3ZhbHVlT2YnLFxuXHRcblx0XG5cdCAgICAvKipcclxuXHQgICAgICogUmV0dXJuIHRoZSBvYmplY3QgdmFsdWUuXHJcblx0ICAgICAqIEByZXR1cm4geyFPYmplY3R9IFZhbHVlLlxyXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5kYXRhID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5kYXRhO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gSW50ZXJwcmV0ZXJPYmplY3Q7XG5cdH0oKTtcblx0XG5cdEludGVycHJldGVyLlByaW1pdGl2ZSA9IFByaW1pdGl2ZTtcblx0SW50ZXJwcmV0ZXIuT2JqZWN0ID0gSW50ZXJwcmV0ZXJPYmplY3Q7XG5cbi8qKiovIH0sXG4vKiAxMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXygxMTYpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiAxMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBjb3JlICA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpXG5cdCAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdCAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDExNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDExOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0OSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMTkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCkuTWFwO1xuXG4vKioqLyB9LFxuLyogMTE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBzdHJvbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcblx0XG5cdC8vIDIzLjEgTWFwIE9iamVjdHNcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcblx0ICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xuXHR9LCB7XG5cdCAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuXHQgIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG5cdCAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcblx0ICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuXHQgIH0sXG5cdCAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcblx0ICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcblx0ICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcblx0ICB9XG5cdH0sIHN0cm9uZywgdHJ1ZSk7XG5cbi8qKiovIH0sXG4vKiAxMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cblx0dmFyICRleHBvcnQgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdFxuXHQkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IF9fd2VicGFja19yZXF1aXJlX18oODMpKCdNYXAnKX0pO1xuXG4vKioqLyB9LFxuLyogMTIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9cInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMubGluZUJyZWFrRz1leHBvcnRzLmxpbmVCcmVhaz1leHBvcnRzLmlzTmV3TGluZT1leHBvcnRzLlRva2VuPWV4cG9ydHMuaXNJZGVudGlmaWVyU3RhcnQ9ZXhwb3J0cy5pc0lkZW50aWZpZXJDaGFyPWV4cG9ydHMudG9rQ29udGV4dHM9ZXhwb3J0cy5Ub2tDb250ZXh0PWV4cG9ydHMudG9rVHlwZXM9ZXhwb3J0cy5Ub2tlblR5cGU9ZXhwb3J0cy5Ob2RlPWV4cG9ydHMuZ2V0TGluZUluZm89ZXhwb3J0cy5Tb3VyY2VMb2NhdGlvbj1leHBvcnRzLlBvc2l0aW9uPWV4cG9ydHMuZGVmYXVsdE9wdGlvbnM9ZXhwb3J0cy5wbHVnaW5zPWV4cG9ydHMuUGFyc2VyPWV4cG9ydHMudG9rZW5pemVyPWV4cG9ydHMucGFyc2VFeHByZXNzaW9uQXQ9ZXhwb3J0cy5wYXJzZT1leHBvcnRzLnZlcnNpb249dW5kZWZpbmVkO3ZhciBfaXRlcmF0b3I9X193ZWJwYWNrX3JlcXVpcmVfXyg5MSk7dmFyIF9pdGVyYXRvcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO3ZhciBfc3ltYm9sPV9fd2VicGFja19yZXF1aXJlX18oOTQpO3ZhciBfc3ltYm9sMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO3ZhciBfdHlwZW9mMj1fX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTt2YXIgX3R5cGVvZjM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O30vLyBSZXNlcnZlZCB3b3JkIGxpc3RzIGZvciB2YXJpb3VzIGRpYWxlY3RzIG9mIHRoZSBsYW5ndWFnZVxuXHR2YXIgcmVzZXJ2ZWRXb3Jkcz17MzpcImFic3RyYWN0IGJvb2xlYW4gYnl0ZSBjaGFyIGNsYXNzIGRvdWJsZSBlbnVtIGV4cG9ydCBleHRlbmRzIGZpbmFsIGZsb2F0IGdvdG8gaW1wbGVtZW50cyBpbXBvcnQgaW50IGludGVyZmFjZSBsb25nIG5hdGl2ZSBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzaG9ydCBzdGF0aWMgc3VwZXIgc3luY2hyb25pemVkIHRocm93cyB0cmFuc2llbnQgdm9sYXRpbGVcIiw1OlwiY2xhc3MgZW51bSBleHRlbmRzIHN1cGVyIGNvbnN0IGV4cG9ydCBpbXBvcnRcIiw2OlwiZW51bVwiLDc6XCJlbnVtXCIsc3RyaWN0OlwiaW1wbGVtZW50cyBpbnRlcmZhY2UgbGV0IHBhY2thZ2UgcHJpdmF0ZSBwcm90ZWN0ZWQgcHVibGljIHN0YXRpYyB5aWVsZFwiLHN0cmljdEJpbmQ6XCJldmFsIGFyZ3VtZW50c1wifTsvLyBBbmQgdGhlIGtleXdvcmRzXG5cdHZhciBlY21hNUFuZExlc3NLZXl3b3Jkcz1cImJyZWFrIGNhc2UgY2F0Y2ggY29udGludWUgZGVidWdnZXIgZGVmYXVsdCBkbyBlbHNlIGZpbmFsbHkgZm9yIGZ1bmN0aW9uIGlmIHJldHVybiBzd2l0Y2ggdGhyb3cgdHJ5IHZhciB3aGlsZSB3aXRoIG51bGwgdHJ1ZSBmYWxzZSBpbnN0YW5jZW9mIHR5cGVvZiB2b2lkIGRlbGV0ZSBuZXcgaW4gdGhpc1wiO3ZhciBrZXl3b3Jkcz17NTplY21hNUFuZExlc3NLZXl3b3Jkcyw2OmVjbWE1QW5kTGVzc0tleXdvcmRzK1wiIGNvbnN0IGNsYXNzIGV4dGVuZHMgZXhwb3J0IGltcG9ydCBzdXBlclwifTsvLyAjIyBDaGFyYWN0ZXIgY2F0ZWdvcmllc1xuXHQvLyBCaWcgdWdseSByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgbWF0Y2ggY2hhcmFjdGVycyBpbiB0aGVcblx0Ly8gd2hpdGVzcGFjZSwgaWRlbnRpZmllciwgYW5kIGlkZW50aWZpZXItc3RhcnQgY2F0ZWdvcmllcy4gVGhlc2Vcblx0Ly8gYXJlIG9ubHkgYXBwbGllZCB3aGVuIGEgY2hhcmFjdGVyIGlzIGZvdW5kIHRvIGFjdHVhbGx5IGhhdmUgYVxuXHQvLyBjb2RlIHBvaW50IGFib3ZlIDEyOC5cblx0Ly8gR2VuZXJhdGVkIGJ5IGBiaW4vZ2VuZXJhdGUtaWRlbnRpZmllci1yZWdleC5qc2AuXG5cdHZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzPVwiwqrCtcK6w4Atw5bDmC3DtsO4LcuBy4Yty5HLoC3LpMusy67NsC3NtM22zbfNui3Nvc2/zobOiC3Ois6Mzo4tzqHOoy3Ptc+3LdKB0oot1K/UsS3VltWZ1aEt1ofXkC3XqtewLdey2KAt2YrZrtmv2bEt25Pbldul26bbrtuv27ot27zbv9yQ3JIt3K/djS3epd6x34ot36rftN+137rgoIAt4KCV4KCa4KCk4KCo4KGALeChmOCioC3gorTgorYt4KK94KSELeCkueCkveClkOClmC3gpaHgpbEt4KaA4KaFLeCmjOCmj+CmkOCmky3gpqjgpqot4Kaw4Kay4Ka2LeCmueCmveCnjuCnnOCnneCnny3gp6Hgp7Dgp7HgqIUt4KiK4KiP4KiQ4KiTLeCoqOCoqi3gqLDgqLLgqLPgqLXgqLbgqLjgqLngqZkt4Kmc4Kme4KmyLeCptOCqhS3gqo3gqo8t4KqR4KqTLeCqqOCqqi3gqrDgqrLgqrPgqrUt4Kq54Kq94KuQ4Kug4Kuh4Ku54KyFLeCsjOCsj+CskOCsky3grKjgrKot4Kyw4Kyy4Kyz4Ky1LeCsueCsveCtnOCtneCtny3graHgrbHgroPgroUt4K6K4K6OLeCukOCuki3grpXgrpngrprgrpzgrp7grp/grqPgrqTgrqgt4K6q4K6uLeCuueCvkOCwhS3gsIzgsI4t4LCQ4LCSLeCwqOCwqi3gsLngsL3gsZgt4LGa4LGg4LGh4LKA4LKFLeCyjOCyji3gspDgspIt4LKo4LKqLeCys+CytS3gsrngsr3gs57gs6Dgs6Hgs7Hgs7LgtIUt4LSM4LSOLeC0kOC0ki3gtLrgtL3gtY7gtZQt4LWW4LWfLeC1oeC1ui3gtb/gtoUt4LaW4LaaLeC2seC2sy3gtrvgtr3gt4At4LeG4LiBLeC4sOC4suC4s+C5gC3guYbguoHguoLguoTguofguojguorguo3gupQt4LqX4LqZLeC6n+C6oS3guqPguqXguqfguqrguqvguq0t4Lqw4Lqy4Lqz4Lq94LuALeC7hOC7huC7nC3gu5/gvIDgvYAt4L2H4L2JLeC9rOC+iC3gvozhgIAt4YCq4YC/4YGQLeGBleGBmi3hgZ3hgaHhgaXhgabhga4t4YGw4YG1LeGCgeGCjuGCoC3hg4Xhg4fhg43hg5At4YO64YO8LeGJiOGJii3hiY3hiZAt4YmW4YmY4YmaLeGJneGJoC3hiojhioot4YqN4YqQLeGKsOGKsi3hirXhirgt4Yq+4YuA4YuCLeGLheGLiC3hi5bhi5gt4YyQ4YySLeGMleGMmC3hjZrhjoAt4Y6P4Y6gLeGPteGPuC3hj73hkIEt4Zms4ZmvLeGZv+GagS3hmprhmqAt4Zuq4ZuuLeGbuOGcgC3hnIzhnI4t4ZyR4ZygLeGcseGdgC3hnZHhnaAt4Z2s4Z2uLeGdsOGegC3hnrPhn5fhn5zhoKAt4aG34aKALeGiqOGiquGisC3ho7XhpIAt4aSe4aWQLeGlreGlsC3hpbThpoAt4aar4aawLeGnieGogC3hqJbhqKAt4amU4aqn4ayFLeGss+GthS3hrYvhroMt4a6g4a6u4a6v4a66LeGvpeGwgC3hsKPhsY0t4bGP4bGaLeGxveGygC3hsojhs6kt4bOs4bOuLeGzseGzteGztuG0gC3htr/huIAt4byV4byYLeG8neG8oC3hvYXhvYgt4b2N4b2QLeG9l+G9meG9m+G9neG9ny3hvb3hvoAt4b604b62LeG+vOG+vuG/gi3hv4Thv4Yt4b+M4b+QLeG/k+G/li3hv5vhv6At4b+s4b+yLeG/tOG/ti3hv7zigbHigb/igpAt4oKc4oSC4oSH4oSKLeKEk+KEleKEmC3ihJ3ihKTihKbihKjihKot4oS54oS8LeKEv+KFhS3ihYnihY7ihaAt4oaI4rCALeKwruKwsC3isZ7isaAt4rOk4rOrLeKzruKzsuKzs+K0gC3itKXitKfitK3itLAt4rWn4rWv4raALeK2luK2oC3itqbitqgt4rau4rawLeK2tuK2uC3itr7it4At4reG4reILeK3juK3kC3it5bit5gt4ree44CFLeOAh+OAoS3jgKnjgLEt44C144C4LeOAvOOBgS3jgpbjgpst44Kf44KhLeODuuODvC3jg7/jhIUt44St44SxLeOGjuOGoC3jhrrjh7At44e/45CALeS2teS4gC3pv5XqgIAt6pKM6pOQLeqTveqUgC3qmIzqmJAt6pif6piq6pir6pmALeqZruqZvy3qmp3qmqAt6puv6pyXLeqcn+qcoi3qnojqnost6p6u6p6wLeqet+qfty3qoIHqoIMt6qCF6qCHLeqgiuqgjC3qoKLqoYAt6qGz6qKCLeqis+qjsi3qo7fqo7vqo73qpIot6qSl6qSwLeqlhuqloC3qpbzqpoQt6qay6qeP6qegLeqnpOqnpi3qp6/qp7ot6qe+6qiALeqoqOqpgC3qqYLqqYQt6qmL6qmgLeqptuqpuuqpvi3qqq/qqrHqqrXqqrbqqrkt6qq96quA6quC6qubLeqrneqroC3qq6rqq7It6qu06qyBLeqshuqsiS3qrI7qrJEt6qyW6qygLeqspuqsqC3qrK7qrLAt6q2a6q2cLeqtpeqtsC3qr6LqsIAt7Z6j7Z6wLe2fhu2fiy3tn7vvpIAt76mt76mwLe+rme+sgC3vrIbvrJMt76yX76yd76yfLe+sqO+sqi3vrLbvrLgt76y876y+762A762B762D762E762GLe+use+vky3vtL3vtZAt77aP77aSLe+3h++3sC3vt7vvubAt77m077m2Le+7vO+8oS3vvLrvvYEt772a772mLe++vu+/gi3vv4fvv4ot77+P77+SLe+/l++/mi3vv5xcIjt2YXIgbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnM9XCLigIzigI3Ct8yALc2vzofSgy3Sh9aRLda91r/XgdeC14TXhdeH2JAt2JrZiy3Zqdmw25Yt25zbny3bpNun26jbqi3brduwLdu53JHcsC3dit6mLd6w34At34nfqy3fs+Cgli3goJngoJst4KCj4KClLeCgp+CgqS3goK3goZkt4KGb4KOULeCjoeCjoy3gpIPgpLot4KS84KS+LeClj+ClkS3gpZfgpaLgpaPgpaYt4KWv4KaBLeCmg+CmvOCmvi3gp4Tgp4fgp4jgp4st4KeN4KeX4Kei4Kej4KemLeCnr+CogS3gqIPgqLzgqL4t4KmC4KmH4KmI4KmLLeCpjeCpkeCppi3gqbHgqbXgqoEt4KqD4Kq84Kq+LeCrheCrhy3gq4ngq4st4KuN4Kui4Kuj4KumLeCrr+CsgS3grIPgrLzgrL4t4K2E4K2H4K2I4K2LLeCtjeCtluCtl+CtouCto+Ctpi3gra/groLgrr4t4K+C4K+GLeCviOCvii3gr43gr5fgr6Yt4K+v4LCALeCwg+Cwvi3gsYTgsYYt4LGI4LGKLeCxjeCxleCxluCxouCxo+Cxpi3gsa/gsoEt4LKD4LK84LK+LeCzhOCzhi3gs4jgs4ot4LON4LOV4LOW4LOi4LOj4LOmLeCzr+C0gS3gtIPgtL4t4LWE4LWGLeC1iOC1ii3gtY3gtZfgtaLgtaPgtaYt4LWv4LaC4LaD4LeK4LePLeC3lOC3luC3mC3gt5/gt6Yt4Lev4Ley4Lez4Lix4Li0LeC4uuC5hy3guY7guZAt4LmZ4Lqx4Lq0LeC6ueC6u+C6vOC7iC3gu43gu5At4LuZ4LyY4LyZ4LygLeC8qeC8teC8t+C8ueC8vuC8v+C9sS3gvoTgvobgvofgvo0t4L6X4L6ZLeC+vOC/huGAqy3hgL7hgYAt4YGJ4YGWLeGBmeGBni3hgaDhgaIt4YGk4YGnLeGBreGBsS3hgbThgoIt4YKN4YKPLeGCneGNnS3hjZ/hjakt4Y2x4ZySLeGclOGcsi3hnLThnZLhnZPhnbLhnbPhnrQt4Z+T4Z+d4Z+gLeGfqeGgiy3hoI3hoJAt4aCZ4aKp4aSgLeGkq+GksC3hpLvhpYYt4aWP4aeQLeGnmuGoly3hqJvhqZUt4ame4amgLeGpvOGpvy3hqonhqpAt4aqZ4aqwLeGqveGsgC3hrIThrLQt4a2E4a2QLeGtmeGtqy3hrbPhroAt4a6C4a6hLeGureGusC3hrrnhr6Yt4a+z4bCkLeGwt+GxgC3hsYnhsZAt4bGZ4bOQLeGzkuGzlC3hs6jhs63hs7It4bO04bO44bO54beALeG3teG3uy3ht7/igL/igYDigZTig5At4oOc4oOh4oOlLeKDsOKzry3is7Hitb/it6At4re/44CqLeOAr+OCmeOCmuqYoC3qmKnqma/qmbQt6pm96pqe6pqf6puw6pux6qCC6qCG6qCL6qCjLeqgp+qigOqigeqitC3qo4Xqo5At6qOZ6qOgLeqjseqkgC3qpInqpKYt6qSt6qWHLeqlk+qmgC3qpoPqprMt6qeA6qeQLeqnmeqnpeqnsC3qp7nqqKkt6qi26qmD6qmM6qmN6qmQLeqpmeqpuy3qqb3qqrDqqrIt6qq06qq36qq46qq+6qq/6quB6qurLeqrr+qrteqrtuqvoy3qr6rqr6zqr63qr7At6q+576ye77iALe+4j++4oC3vuK/vuLPvuLTvuY0t77mP77yQLe+8me+8v1wiO3ZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydD1uZXcgUmVnRXhwKFwiW1wiK25vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMrXCJdXCIpO3ZhciBub25BU0NJSWlkZW50aWZpZXI9bmV3IFJlZ0V4cChcIltcIitub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzK25vbkFTQ0lJaWRlbnRpZmllckNoYXJzK1wiXVwiKTtub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzPW5vbkFTQ0lJaWRlbnRpZmllckNoYXJzPW51bGw7Ly8gVGhlc2UgYXJlIGEgcnVuLWxlbmd0aCBhbmQgb2Zmc2V0IGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlXG5cdC8vID4weGZmZmYgY29kZSBwb2ludHMgdGhhdCBhcmUgYSB2YWxpZCBwYXJ0IG9mIGlkZW50aWZpZXJzLiBUaGVcblx0Ly8gb2Zmc2V0IHN0YXJ0cyBhdCAweDEwMDAwLCBhbmQgZWFjaCBwYWlyIG9mIG51bWJlcnMgcmVwcmVzZW50cyBhblxuXHQvLyBvZmZzZXQgdG8gdGhlIG5leHQgcmFuZ2UsIGFuZCB0aGVuIGEgc2l6ZSBvZiB0aGUgcmFuZ2UuIFRoZXkgd2VyZVxuXHQvLyBnZW5lcmF0ZWQgYnkgYmluL2dlbmVyYXRlLWlkZW50aWZpZXItcmVnZXguanNcblx0dmFyIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzPVswLDExLDIsMjUsMiwxOCwyLDEsMiwxNCwzLDEzLDM1LDEyMiw3MCw1MiwyNjgsMjgsNCw0OCw0OCwzMSwxNywyNiw2LDM3LDExLDI5LDMsMzUsNSw3LDIsNCw0MywxNTcsMTksMzUsNSwzNSw1LDM5LDksNTEsMTU3LDMxMCwxMCwyMSwxMSw3LDE1Myw1LDMsMCwyLDQzLDIsMSw0LDAsMywyMiwxMSwyMiwxMCwzMCw2NiwxOCwyLDEsMTEsMjEsMTEsMjUsNzEsNTUsNywxLDY1LDAsMTYsMywyLDIsMiwyNiw0NSwyOCw0LDI4LDM2LDcsMiwyNywyOCw1MywxMSwyMSwxMSwxOCwxNCwxNywxMTEsNzIsNTYsNTAsMTQsNTAsNzg1LDUyLDc2LDQ0LDMzLDI0LDI3LDM1LDQyLDM0LDQsMCwxMyw0NywxNSwzLDIyLDAsMiwwLDM2LDE3LDIsMjQsODUsNiwyLDAsMiwzLDIsMTQsMiw5LDgsNDYsMzksNywzLDEsMywyMSwyLDYsMiwxLDIsNCw0LDAsMTksMCwxMyw0LDE1OSw1MiwxOSwzLDU0LDQ3LDIxLDEsMiwwLDE4NSw0Niw0MiwzLDM3LDQ3LDIxLDAsNjAsNDIsODYsMjUsMzkxLDYzLDMyLDAsNDQ5LDU2LDI2NCw4LDIsMzYsMTgsMCw1MCwyOSw4ODEsOTIxLDEwMywxMTAsMTgsMTk1LDI3NDksMTA3MCw0MDUwLDU4Miw4NjM0LDU2OCw4LDMwLDExNCwyOSwxOSw0NywxNywzLDMyLDIwLDYsMTgsODgxLDY4LDEyLDAsNjcsMTIsNjUsMCwzMiw2MTI0LDIwLDc1NCw5NDg2LDEsMzA3MSwxMDYsNiwxMiw0LDgsOCw5LDU5OTEsODQsMiw3MCwyLDEsMywwLDMsMSwzLDMsMiwxMSwyLDAsMiw2LDIsNjQsMiwzLDMsNywyLDYsMiwyNywyLDMsMiw0LDIsMCw0LDYsMiwzMzksMywyNCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDcsNDE0OSwxOTYsNjAsNjcsMTIxMywzLDIsMjYsMiwxLDIsMCwzLDAsMiw5LDIsMywyLDAsMiwwLDcsMCw1LDAsMiwwLDIsMCwyLDIsMiwxLDIsMCwzLDAsMiwwLDIsMCwyLDAsMiwwLDIsMSwyLDAsMywzLDIsNiwyLDMsMiwzLDIsMCwyLDksMiwxNiw2LDIsMiw0LDIsMTYsNDQyMSw0MjcxMCw0Miw0MTQ4LDEyLDIyMSwzLDU3NjEsMTA1OTEsNTQxXTt2YXIgYXN0cmFsSWRlbnRpZmllckNvZGVzPVs1MDksMCwyMjcsMCwxNTAsNCwyOTQsOSwxMzY4LDIsMiwxLDYsMyw0MSwyLDUsMCwxNjYsMSwxMzA2LDIsNTQsMTQsMzIsOSwxNiwzLDQ2LDEwLDU0LDksNywyLDM3LDEzLDIsOSw1MiwwLDEzLDIsNDksMTMsMTAsMiw0LDksODMsMTEsNywwLDE2MSwxMSw2LDksNywzLDU3LDAsMiw2LDMsMSwzLDIsMTAsMCwxMSwxLDMsNiw0LDQsMTkzLDE3LDEwLDksODcsMTksMTMsOSwyMTQsNiwzLDgsMjgsMSw4MywxNiwxNiw5LDgyLDEyLDksOSw4NCwxNCw1LDksNDIzLDksODM4LDcsMiw3LDE3LDksNTcsMjEsMiwxMywxOTg4Miw5LDEzNSw0LDYwLDYsMjYsOSwxMDE2LDQ1LDE3LDMsMTk3MjMsMSw1MzE5LDQsNCw1LDksNywzLDYsMzEsMywxNDksMiwxNDE4LDQ5LDUxMyw1NCw1LDQ5LDksMCwxNSwwLDIzLDQsMiwxNCwxMzYxLDYsMiwxNiwzLDYsMiwxLDIsNCwyMjE0LDYsMTEwLDYsNiw5LDc5MjQ4NywyMzldOy8vIFRoaXMgaGFzIGEgY29tcGxleGl0eSBsaW5lYXIgdG8gdGhlIHZhbHVlIG9mIHRoZSBjb2RlLiBUaGVcblx0Ly8gYXNzdW1wdGlvbiBpcyB0aGF0IGxvb2tpbmcgdXAgYXN0cmFsIGlkZW50aWZpZXIgY2hhcmFjdGVycyBpc1xuXHQvLyByYXJlLlxuXHRmdW5jdGlvbiBpc0luQXN0cmFsU2V0KGNvZGUsc2V0KXt2YXIgcG9zPTB4MTAwMDA7Zm9yKHZhciBpPTA7aTxzZXQubGVuZ3RoO2krPTIpe3Bvcys9c2V0W2ldO2lmKHBvcz5jb2RlKXJldHVybiBmYWxzZTtwb3MrPXNldFtpKzFdO2lmKHBvcz49Y29kZSlyZXR1cm4gdHJ1ZTt9fS8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGNoYXJhY3RlciBjb2RlIHN0YXJ0cyBhbiBpZGVudGlmaWVyLlxuXHRmdW5jdGlvbiBpc0lkZW50aWZpZXJTdGFydChjb2RlLGFzdHJhbCl7aWYoY29kZTw2NSlyZXR1cm4gY29kZT09PTM2O2lmKGNvZGU8OTEpcmV0dXJuIHRydWU7aWYoY29kZTw5NylyZXR1cm4gY29kZT09PTk1O2lmKGNvZGU8MTIzKXJldHVybiB0cnVlO2lmKGNvZGU8PTB4ZmZmZilyZXR1cm4gY29kZT49MHhhYSYmbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKTtpZihhc3RyYWw9PT1mYWxzZSlyZXR1cm4gZmFsc2U7cmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSxhc3RyYWxJZGVudGlmaWVyU3RhcnRDb2Rlcyk7fS8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGNoYXJhY3RlciBpcyBwYXJ0IG9mIGFuIGlkZW50aWZpZXIuXG5cdGZ1bmN0aW9uIGlzSWRlbnRpZmllckNoYXIoY29kZSxhc3RyYWwpe2lmKGNvZGU8NDgpcmV0dXJuIGNvZGU9PT0zNjtpZihjb2RlPDU4KXJldHVybiB0cnVlO2lmKGNvZGU8NjUpcmV0dXJuIGZhbHNlO2lmKGNvZGU8OTEpcmV0dXJuIHRydWU7aWYoY29kZTw5NylyZXR1cm4gY29kZT09PTk1O2lmKGNvZGU8MTIzKXJldHVybiB0cnVlO2lmKGNvZGU8PTB4ZmZmZilyZXR1cm4gY29kZT49MHhhYSYmbm9uQVNDSUlpZGVudGlmaWVyLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSk7aWYoYXN0cmFsPT09ZmFsc2UpcmV0dXJuIGZhbHNlO3JldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpfHxpc0luQXN0cmFsU2V0KGNvZGUsYXN0cmFsSWRlbnRpZmllckNvZGVzKTt9Ly8gIyMgVG9rZW4gdHlwZXNcblx0Ly8gVGhlIGFzc2lnbm1lbnQgb2YgZmluZS1ncmFpbmVkLCBpbmZvcm1hdGlvbi1jYXJyeWluZyB0eXBlIG9iamVjdHNcblx0Ly8gYWxsb3dzIHRoZSB0b2tlbml6ZXIgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGl0IGhhcyBhYm91dCBhXG5cdC8vIHRva2VuIGluIGEgd2F5IHRoYXQgaXMgdmVyeSBjaGVhcCBmb3IgdGhlIHBhcnNlciB0byBsb29rIHVwLlxuXHQvLyBBbGwgdG9rZW4gdHlwZSB2YXJpYWJsZXMgc3RhcnQgd2l0aCBhbiB1bmRlcnNjb3JlLCB0byBtYWtlIHRoZW1cblx0Ly8gZWFzeSB0byByZWNvZ25pemUuXG5cdC8vIFRoZSBgYmVmb3JlRXhwcmAgcHJvcGVydHkgaXMgdXNlZCB0byBkaXNhbWJpZ3VhdGUgYmV0d2VlbiByZWd1bGFyXG5cdC8vIGV4cHJlc3Npb25zIGFuZCBkaXZpc2lvbnMuIEl0IGlzIHNldCBvbiBhbGwgdG9rZW4gdHlwZXMgdGhhdCBjYW5cblx0Ly8gYmUgZm9sbG93ZWQgYnkgYW4gZXhwcmVzc2lvbiAodGh1cywgYSBzbGFzaCBhZnRlciB0aGVtIHdvdWxkIGJlIGFcblx0Ly8gcmVndWxhciBleHByZXNzaW9uKS5cblx0Ly9cblx0Ly8gVGhlIGBzdGFydHNFeHByYCBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNoZWNrIGlmIHRoZSB0b2tlbiBlbmRzIGFcblx0Ly8gYHlpZWxkYCBleHByZXNzaW9uLiBJdCBpcyBzZXQgb24gYWxsIHRva2VuIHR5cGVzIHRoYXQgZWl0aGVyIGNhblxuXHQvLyBkaXJlY3RseSBzdGFydCBhbiBleHByZXNzaW9uIChsaWtlIGEgcXVvdGF0aW9uIG1hcmspIG9yIGNhblxuXHQvLyBjb250aW51ZSBhbiBleHByZXNzaW9uIChsaWtlIHRoZSBib2R5IG9mIGEgc3RyaW5nKS5cblx0Ly9cblx0Ly8gYGlzTG9vcGAgbWFya3MgYSBrZXl3b3JkIGFzIHN0YXJ0aW5nIGEgbG9vcCwgd2hpY2ggaXMgaW1wb3J0YW50XG5cdC8vIHRvIGtub3cgd2hlbiBwYXJzaW5nIGEgbGFiZWwsIGluIG9yZGVyIHRvIGFsbG93IG9yIGRpc2FsbG93XG5cdC8vIGNvbnRpbnVlIGp1bXBzIHRvIHRoYXQgbGFiZWwuXG5cdHZhciBUb2tlblR5cGU9ZnVuY3Rpb24gVG9rZW5UeXBlKGxhYmVsLGNvbmYpe2lmKGNvbmY9PT12b2lkIDApY29uZj17fTt0aGlzLmxhYmVsPWxhYmVsO3RoaXMua2V5d29yZD1jb25mLmtleXdvcmQ7dGhpcy5iZWZvcmVFeHByPSEhY29uZi5iZWZvcmVFeHByO3RoaXMuc3RhcnRzRXhwcj0hIWNvbmYuc3RhcnRzRXhwcjt0aGlzLmlzTG9vcD0hIWNvbmYuaXNMb29wO3RoaXMuaXNBc3NpZ249ISFjb25mLmlzQXNzaWduO3RoaXMucHJlZml4PSEhY29uZi5wcmVmaXg7dGhpcy5wb3N0Zml4PSEhY29uZi5wb3N0Zml4O3RoaXMuYmlub3A9Y29uZi5iaW5vcHx8bnVsbDt0aGlzLnVwZGF0ZUNvbnRleHQ9bnVsbDt9O2Z1bmN0aW9uIGJpbm9wKG5hbWUscHJlYyl7cmV0dXJuIG5ldyBUb2tlblR5cGUobmFtZSx7YmVmb3JlRXhwcjp0cnVlLGJpbm9wOnByZWN9KTt9dmFyIGJlZm9yZUV4cHI9e2JlZm9yZUV4cHI6dHJ1ZX07dmFyIHN0YXJ0c0V4cHI9e3N0YXJ0c0V4cHI6dHJ1ZX07Ly8gTWFwIGtleXdvcmQgbmFtZXMgdG8gdG9rZW4gdHlwZXMuXG5cdHZhciBrZXl3b3JkVHlwZXM9e307Ly8gU3VjY2luY3QgZGVmaW5pdGlvbnMgb2Yga2V5d29yZCB0b2tlbiB0eXBlc1xuXHRmdW5jdGlvbiBrdyhuYW1lLG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApb3B0aW9ucz17fTtvcHRpb25zLmtleXdvcmQ9bmFtZTtyZXR1cm4ga2V5d29yZFR5cGVzW25hbWVdPW5ldyBUb2tlblR5cGUobmFtZSxvcHRpb25zKTt9dmFyIHR0PXtudW06bmV3IFRva2VuVHlwZShcIm51bVwiLHN0YXJ0c0V4cHIpLHJlZ2V4cDpuZXcgVG9rZW5UeXBlKFwicmVnZXhwXCIsc3RhcnRzRXhwciksc3RyaW5nOm5ldyBUb2tlblR5cGUoXCJzdHJpbmdcIixzdGFydHNFeHByKSxuYW1lOm5ldyBUb2tlblR5cGUoXCJuYW1lXCIsc3RhcnRzRXhwciksZW9mOm5ldyBUb2tlblR5cGUoXCJlb2ZcIiksLy8gUHVuY3R1YXRpb24gdG9rZW4gdHlwZXMuXG5cdGJyYWNrZXRMOm5ldyBUb2tlblR5cGUoXCJbXCIse2JlZm9yZUV4cHI6dHJ1ZSxzdGFydHNFeHByOnRydWV9KSxicmFja2V0UjpuZXcgVG9rZW5UeXBlKFwiXVwiKSxicmFjZUw6bmV3IFRva2VuVHlwZShcIntcIix7YmVmb3JlRXhwcjp0cnVlLHN0YXJ0c0V4cHI6dHJ1ZX0pLGJyYWNlUjpuZXcgVG9rZW5UeXBlKFwifVwiKSxwYXJlbkw6bmV3IFRva2VuVHlwZShcIihcIix7YmVmb3JlRXhwcjp0cnVlLHN0YXJ0c0V4cHI6dHJ1ZX0pLHBhcmVuUjpuZXcgVG9rZW5UeXBlKFwiKVwiKSxjb21tYTpuZXcgVG9rZW5UeXBlKFwiLFwiLGJlZm9yZUV4cHIpLHNlbWk6bmV3IFRva2VuVHlwZShcIjtcIixiZWZvcmVFeHByKSxjb2xvbjpuZXcgVG9rZW5UeXBlKFwiOlwiLGJlZm9yZUV4cHIpLGRvdDpuZXcgVG9rZW5UeXBlKFwiLlwiKSxxdWVzdGlvbjpuZXcgVG9rZW5UeXBlKFwiP1wiLGJlZm9yZUV4cHIpLGFycm93Om5ldyBUb2tlblR5cGUoXCI9PlwiLGJlZm9yZUV4cHIpLHRlbXBsYXRlOm5ldyBUb2tlblR5cGUoXCJ0ZW1wbGF0ZVwiKSxlbGxpcHNpczpuZXcgVG9rZW5UeXBlKFwiLi4uXCIsYmVmb3JlRXhwciksYmFja1F1b3RlOm5ldyBUb2tlblR5cGUoXCJgXCIsc3RhcnRzRXhwciksZG9sbGFyQnJhY2VMOm5ldyBUb2tlblR5cGUoXCIke1wiLHtiZWZvcmVFeHByOnRydWUsc3RhcnRzRXhwcjp0cnVlfSksLy8gT3BlcmF0b3JzLiBUaGVzZSBjYXJyeSBzZXZlcmFsIGtpbmRzIG9mIHByb3BlcnRpZXMgdG8gaGVscCB0aGVcblx0Ly8gcGFyc2VyIHVzZSB0aGVtIHByb3Blcmx5ICh0aGUgcHJlc2VuY2Ugb2YgdGhlc2UgcHJvcGVydGllcyBpc1xuXHQvLyB3aGF0IGNhdGVnb3JpemVzIHRoZW0gYXMgb3BlcmF0b3JzKS5cblx0Ly9cblx0Ly8gYGJpbm9wYCwgd2hlbiBwcmVzZW50LCBzcGVjaWZpZXMgdGhhdCB0aGlzIG9wZXJhdG9yIGlzIGEgYmluYXJ5XG5cdC8vIG9wZXJhdG9yLCBhbmQgd2lsbCByZWZlciB0byBpdHMgcHJlY2VkZW5jZS5cblx0Ly9cblx0Ly8gYHByZWZpeGAgYW5kIGBwb3N0Zml4YCBtYXJrIHRoZSBvcGVyYXRvciBhcyBhIHByZWZpeCBvciBwb3N0Zml4XG5cdC8vIHVuYXJ5IG9wZXJhdG9yLlxuXHQvL1xuXHQvLyBgaXNBc3NpZ25gIG1hcmtzIGFsbCBvZiBgPWAsIGArPWAsIGAtPWAgZXRjZXRlcmEsIHdoaWNoIGFjdCBhc1xuXHQvLyBiaW5hcnkgb3BlcmF0b3JzIHdpdGggYSB2ZXJ5IGxvdyBwcmVjZWRlbmNlLCB0aGF0IHNob3VsZCByZXN1bHRcblx0Ly8gaW4gQXNzaWdubWVudEV4cHJlc3Npb24gbm9kZXMuXG5cdGVxOm5ldyBUb2tlblR5cGUoXCI9XCIse2JlZm9yZUV4cHI6dHJ1ZSxpc0Fzc2lnbjp0cnVlfSksYXNzaWduOm5ldyBUb2tlblR5cGUoXCJfPVwiLHtiZWZvcmVFeHByOnRydWUsaXNBc3NpZ246dHJ1ZX0pLGluY0RlYzpuZXcgVG9rZW5UeXBlKFwiKysvLS1cIix7cHJlZml4OnRydWUscG9zdGZpeDp0cnVlLHN0YXJ0c0V4cHI6dHJ1ZX0pLHByZWZpeDpuZXcgVG9rZW5UeXBlKFwicHJlZml4XCIse2JlZm9yZUV4cHI6dHJ1ZSxwcmVmaXg6dHJ1ZSxzdGFydHNFeHByOnRydWV9KSxsb2dpY2FsT1I6Ymlub3AoXCJ8fFwiLDEpLGxvZ2ljYWxBTkQ6Ymlub3AoXCImJlwiLDIpLGJpdHdpc2VPUjpiaW5vcChcInxcIiwzKSxiaXR3aXNlWE9SOmJpbm9wKFwiXlwiLDQpLGJpdHdpc2VBTkQ6Ymlub3AoXCImXCIsNSksZXF1YWxpdHk6Ymlub3AoXCI9PS8hPVwiLDYpLHJlbGF0aW9uYWw6Ymlub3AoXCI8Lz5cIiw3KSxiaXRTaGlmdDpiaW5vcChcIjw8Lz4+XCIsOCkscGx1c01pbjpuZXcgVG9rZW5UeXBlKFwiKy8tXCIse2JlZm9yZUV4cHI6dHJ1ZSxiaW5vcDo5LHByZWZpeDp0cnVlLHN0YXJ0c0V4cHI6dHJ1ZX0pLG1vZHVsbzpiaW5vcChcIiVcIiwxMCksc3RhcjpiaW5vcChcIipcIiwxMCksc2xhc2g6Ymlub3AoXCIvXCIsMTApLHN0YXJzdGFyOm5ldyBUb2tlblR5cGUoXCIqKlwiLHtiZWZvcmVFeHByOnRydWV9KSwvLyBLZXl3b3JkIHRva2VuIHR5cGVzLlxuXHRfYnJlYWs6a3coXCJicmVha1wiKSxfY2FzZTprdyhcImNhc2VcIixiZWZvcmVFeHByKSxfY2F0Y2g6a3coXCJjYXRjaFwiKSxfY29udGludWU6a3coXCJjb250aW51ZVwiKSxfZGVidWdnZXI6a3coXCJkZWJ1Z2dlclwiKSxfZGVmYXVsdDprdyhcImRlZmF1bHRcIixiZWZvcmVFeHByKSxfZG86a3coXCJkb1wiLHtpc0xvb3A6dHJ1ZSxiZWZvcmVFeHByOnRydWV9KSxfZWxzZTprdyhcImVsc2VcIixiZWZvcmVFeHByKSxfZmluYWxseTprdyhcImZpbmFsbHlcIiksX2ZvcjprdyhcImZvclwiLHtpc0xvb3A6dHJ1ZX0pLF9mdW5jdGlvbjprdyhcImZ1bmN0aW9uXCIsc3RhcnRzRXhwciksX2lmOmt3KFwiaWZcIiksX3JldHVybjprdyhcInJldHVyblwiLGJlZm9yZUV4cHIpLF9zd2l0Y2g6a3coXCJzd2l0Y2hcIiksX3Rocm93Omt3KFwidGhyb3dcIixiZWZvcmVFeHByKSxfdHJ5Omt3KFwidHJ5XCIpLF92YXI6a3coXCJ2YXJcIiksX2NvbnN0Omt3KFwiY29uc3RcIiksX3doaWxlOmt3KFwid2hpbGVcIix7aXNMb29wOnRydWV9KSxfd2l0aDprdyhcIndpdGhcIiksX25ldzprdyhcIm5ld1wiLHtiZWZvcmVFeHByOnRydWUsc3RhcnRzRXhwcjp0cnVlfSksX3RoaXM6a3coXCJ0aGlzXCIsc3RhcnRzRXhwciksX3N1cGVyOmt3KFwic3VwZXJcIixzdGFydHNFeHByKSxfY2xhc3M6a3coXCJjbGFzc1wiKSxfZXh0ZW5kczprdyhcImV4dGVuZHNcIixiZWZvcmVFeHByKSxfZXhwb3J0Omt3KFwiZXhwb3J0XCIpLF9pbXBvcnQ6a3coXCJpbXBvcnRcIiksX251bGw6a3coXCJudWxsXCIsc3RhcnRzRXhwciksX3RydWU6a3coXCJ0cnVlXCIsc3RhcnRzRXhwciksX2ZhbHNlOmt3KFwiZmFsc2VcIixzdGFydHNFeHByKSxfaW46a3coXCJpblwiLHtiZWZvcmVFeHByOnRydWUsYmlub3A6N30pLF9pbnN0YW5jZW9mOmt3KFwiaW5zdGFuY2VvZlwiLHtiZWZvcmVFeHByOnRydWUsYmlub3A6N30pLF90eXBlb2Y6a3coXCJ0eXBlb2ZcIix7YmVmb3JlRXhwcjp0cnVlLHByZWZpeDp0cnVlLHN0YXJ0c0V4cHI6dHJ1ZX0pLF92b2lkOmt3KFwidm9pZFwiLHtiZWZvcmVFeHByOnRydWUscHJlZml4OnRydWUsc3RhcnRzRXhwcjp0cnVlfSksX2RlbGV0ZTprdyhcImRlbGV0ZVwiLHtiZWZvcmVFeHByOnRydWUscHJlZml4OnRydWUsc3RhcnRzRXhwcjp0cnVlfSl9Oy8vIE1hdGNoZXMgYSB3aG9sZSBsaW5lIGJyZWFrICh3aGVyZSBDUkxGIGlzIGNvbnNpZGVyZWQgYSBzaW5nbGVcblx0Ly8gbGluZSBicmVhaykuIFVzZWQgdG8gY291bnQgbGluZXMuXG5cdHZhciBsaW5lQnJlYWs9L1xcclxcbj98XFxufFxcdTIwMjh8XFx1MjAyOS87dmFyIGxpbmVCcmVha0c9bmV3IFJlZ0V4cChsaW5lQnJlYWsuc291cmNlLFwiZ1wiKTtmdW5jdGlvbiBpc05ld0xpbmUoY29kZSl7cmV0dXJuIGNvZGU9PT0xMHx8Y29kZT09PTEzfHxjb2RlPT09MHgyMDI4fHxjb2RlPT0weDIwMjk7fXZhciBub25BU0NJSXdoaXRlc3BhY2U9L1tcXHUxNjgwXFx1MTgwZVxcdTIwMDAtXFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdWZlZmZdLzt2YXIgc2tpcFdoaXRlU3BhY2U9Lyg/Olxcc3xcXC9cXC8uKnxcXC9cXCpbXl0qP1xcKlxcLykqL2c7ZnVuY3Rpb24gaXNBcnJheShvYmope3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKT09PVwiW29iamVjdCBBcnJheV1cIjt9Ly8gQ2hlY2tzIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS5cblx0ZnVuY3Rpb24gaGFzKG9iaixwcm9wTmFtZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmoscHJvcE5hbWUpO30vLyBUaGVzZSBhcmUgdXNlZCB3aGVuIGBvcHRpb25zLmxvY2F0aW9uc2AgaXMgb24sIGZvciB0aGVcblx0Ly8gYHN0YXJ0TG9jYCBhbmQgYGVuZExvY2AgcHJvcGVydGllcy5cblx0dmFyIFBvc2l0aW9uPWZ1bmN0aW9uIFBvc2l0aW9uKGxpbmUsY29sKXt0aGlzLmxpbmU9bGluZTt0aGlzLmNvbHVtbj1jb2w7fTtQb3NpdGlvbi5wcm90b3R5cGUub2Zmc2V0PWZ1bmN0aW9uIG9mZnNldChuKXtyZXR1cm4gbmV3IFBvc2l0aW9uKHRoaXMubGluZSx0aGlzLmNvbHVtbituKTt9O3ZhciBTb3VyY2VMb2NhdGlvbj1mdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihwLHN0YXJ0LGVuZCl7dGhpcy5zdGFydD1zdGFydDt0aGlzLmVuZD1lbmQ7aWYocC5zb3VyY2VGaWxlIT09bnVsbCl0aGlzLnNvdXJjZT1wLnNvdXJjZUZpbGU7fTsvLyBUaGUgYGdldExpbmVJbmZvYCBmdW5jdGlvbiBpcyBtb3N0bHkgdXNlZnVsIHdoZW4gdGhlXG5cdC8vIGBsb2NhdGlvbnNgIG9wdGlvbiBpcyBvZmYgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSBhbmQgeW91XG5cdC8vIHdhbnQgdG8gZmluZCB0aGUgbGluZS9jb2x1bW4gcG9zaXRpb24gZm9yIGEgZ2l2ZW4gY2hhcmFjdGVyXG5cdC8vIG9mZnNldC4gYGlucHV0YCBzaG91bGQgYmUgdGhlIGNvZGUgc3RyaW5nIHRoYXQgdGhlIG9mZnNldCByZWZlcnNcblx0Ly8gaW50by5cblx0ZnVuY3Rpb24gZ2V0TGluZUluZm8oaW5wdXQsb2Zmc2V0KXtmb3IodmFyIGxpbmU9MSxjdXI9MDs7KXtsaW5lQnJlYWtHLmxhc3RJbmRleD1jdXI7dmFyIG1hdGNoPWxpbmVCcmVha0cuZXhlYyhpbnB1dCk7aWYobWF0Y2gmJm1hdGNoLmluZGV4PG9mZnNldCl7KytsaW5lO2N1cj1tYXRjaC5pbmRleCttYXRjaFswXS5sZW5ndGg7fWVsc2V7cmV0dXJuIG5ldyBQb3NpdGlvbihsaW5lLG9mZnNldC1jdXIpO319fS8vIEEgc2Vjb25kIG9wdGlvbmFsIGFyZ3VtZW50IGNhbiBiZSBnaXZlbiB0byBmdXJ0aGVyIGNvbmZpZ3VyZVxuXHQvLyB0aGUgcGFyc2VyIHByb2Nlc3MuIFRoZXNlIG9wdGlvbnMgYXJlIHJlY29nbml6ZWQ6XG5cdHZhciBkZWZhdWx0T3B0aW9ucz17Ly8gYGVjbWFWZXJzaW9uYCBpbmRpY2F0ZXMgdGhlIEVDTUFTY3JpcHQgdmVyc2lvbiB0byBwYXJzZS4gTXVzdFxuXHQvLyBiZSBlaXRoZXIgMywgb3IgNSwgb3IgNi4gVGhpcyBpbmZsdWVuY2VzIHN1cHBvcnQgZm9yIHN0cmljdFxuXHQvLyBtb2RlLCB0aGUgc2V0IG9mIHJlc2VydmVkIHdvcmRzLCBzdXBwb3J0IGZvciBnZXR0ZXJzIGFuZFxuXHQvLyBzZXR0ZXJzIGFuZCBvdGhlciBmZWF0dXJlcy4gVGhlIGRlZmF1bHQgaXMgNi5cblx0ZWNtYVZlcnNpb246NiwvLyBTb3VyY2UgdHlwZSAoXCJzY3JpcHRcIiBvciBcIm1vZHVsZVwiKSBmb3IgZGlmZmVyZW50IHNlbWFudGljc1xuXHRzb3VyY2VUeXBlOlwic2NyaXB0XCIsLy8gYG9uSW5zZXJ0ZWRTZW1pY29sb25gIGNhbiBiZSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWRcblx0Ly8gd2hlbiBhIHNlbWljb2xvbiBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkLiBJdCB3aWxsIGJlIHBhc3NlZFxuXHQvLyB0aCBwb3NpdGlvbiBvZiB0aGUgY29tbWEgYXMgYW4gb2Zmc2V0LCBhbmQgaWYgYGxvY2F0aW9uc2AgaXNcblx0Ly8gZW5hYmxlZCwgaXQgaXMgZ2l2ZW4gdGhlIGxvY2F0aW9uIGFzIGEgYHtsaW5lLCBjb2x1bW59YCBvYmplY3Rcblx0Ly8gYXMgc2Vjb25kIGFyZ3VtZW50LlxuXHRvbkluc2VydGVkU2VtaWNvbG9uOm51bGwsLy8gYG9uVHJhaWxpbmdDb21tYWAgaXMgc2ltaWxhciB0byBgb25JbnNlcnRlZFNlbWljb2xvbmAsIGJ1dCBmb3Jcblx0Ly8gdHJhaWxpbmcgY29tbWFzLlxuXHRvblRyYWlsaW5nQ29tbWE6bnVsbCwvLyBCeSBkZWZhdWx0LCByZXNlcnZlZCB3b3JkcyBhcmUgb25seSBlbmZvcmNlZCBpZiBlY21hVmVyc2lvbiA+PSA1LlxuXHQvLyBTZXQgYGFsbG93UmVzZXJ2ZWRgIHRvIGEgYm9vbGVhbiB2YWx1ZSB0byBleHBsaWNpdGx5IHR1cm4gdGhpcyBvblxuXHQvLyBhbiBvZmYuIFdoZW4gdGhpcyBvcHRpb24gaGFzIHRoZSB2YWx1ZSBcIm5ldmVyXCIsIHJlc2VydmVkIHdvcmRzXG5cdC8vIGFuZCBrZXl3b3JkcyBjYW4gYWxzbyBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eSBuYW1lcy5cblx0YWxsb3dSZXNlcnZlZDpudWxsLC8vIFdoZW4gZW5hYmxlZCwgYSByZXR1cm4gYXQgdGhlIHRvcCBsZXZlbCBpcyBub3QgY29uc2lkZXJlZCBhblxuXHQvLyBlcnJvci5cblx0YWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246ZmFsc2UsLy8gV2hlbiBlbmFibGVkLCBpbXBvcnQvZXhwb3J0IHN0YXRlbWVudHMgYXJlIG5vdCBjb25zdHJhaW5lZCB0b1xuXHQvLyBhcHBlYXJpbmcgYXQgdGhlIHRvcCBvZiB0aGUgcHJvZ3JhbS5cblx0YWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlOmZhbHNlLC8vIFdoZW4gZW5hYmxlZCwgaGFzaGJhbmcgZGlyZWN0aXZlIGluIHRoZSBiZWdpbm5pbmcgb2YgZmlsZVxuXHQvLyBpcyBhbGxvd2VkIGFuZCB0cmVhdGVkIGFzIGEgbGluZSBjb21tZW50LlxuXHRhbGxvd0hhc2hCYW5nOmZhbHNlLC8vIFdoZW4gYGxvY2F0aW9uc2AgaXMgb24sIGBsb2NgIHByb3BlcnRpZXMgaG9sZGluZyBvYmplY3RzIHdpdGhcblx0Ly8gYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllcyBpbiBge2xpbmUsIGNvbHVtbn1gIGZvcm0gKHdpdGhcblx0Ly8gbGluZSBiZWluZyAxLWJhc2VkIGFuZCBjb2x1bW4gMC1iYXNlZCkgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGVcblx0Ly8gbm9kZXMuXG5cdGxvY2F0aW9uczpmYWxzZSwvLyBBIGZ1bmN0aW9uIGNhbiBiZSBwYXNzZWQgYXMgYG9uVG9rZW5gIG9wdGlvbiwgd2hpY2ggd2lsbFxuXHQvLyBjYXVzZSBBY29ybiB0byBjYWxsIHRoYXQgZnVuY3Rpb24gd2l0aCBvYmplY3QgaW4gdGhlIHNhbWVcblx0Ly8gZm9ybWF0IGFzIHRva2VucyByZXR1cm5lZCBmcm9tIGB0b2tlbml6ZXIoKS5nZXRUb2tlbigpYC4gTm90ZVxuXHQvLyB0aGF0IHlvdSBhcmUgbm90IGFsbG93ZWQgdG8gY2FsbCB0aGUgcGFyc2VyIGZyb20gdGhlXG5cdC8vIGNhbGxiYWNr4oCUdGhhdCB3aWxsIGNvcnJ1cHQgaXRzIGludGVybmFsIHN0YXRlLlxuXHRvblRva2VuOm51bGwsLy8gQSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGBvbkNvbW1lbnRgIG9wdGlvbiwgd2hpY2ggd2lsbFxuXHQvLyBjYXVzZSBBY29ybiB0byBjYWxsIHRoYXQgZnVuY3Rpb24gd2l0aCBgKGJsb2NrLCB0ZXh0LCBzdGFydCxcblx0Ly8gZW5kKWAgcGFyYW1ldGVycyB3aGVuZXZlciBhIGNvbW1lbnQgaXMgc2tpcHBlZC4gYGJsb2NrYCBpcyBhXG5cdC8vIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgaXMgYSBibG9jayAoYC8qICovYCkgY29tbWVudCxcblx0Ly8gYHRleHRgIGlzIHRoZSBjb250ZW50IG9mIHRoZSBjb21tZW50LCBhbmQgYHN0YXJ0YCBhbmQgYGVuZGAgYXJlXG5cdC8vIGNoYXJhY3RlciBvZmZzZXRzIHRoYXQgZGVub3RlIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBjb21tZW50LlxuXHQvLyBXaGVuIHRoZSBgbG9jYXRpb25zYCBvcHRpb24gaXMgb24sIHR3byBtb3JlIHBhcmFtZXRlcnMgYXJlXG5cdC8vIHBhc3NlZCwgdGhlIGZ1bGwgYHtsaW5lLCBjb2x1bW59YCBsb2NhdGlvbnMgb2YgdGhlIHN0YXJ0IGFuZFxuXHQvLyBlbmQgb2YgdGhlIGNvbW1lbnRzLiBOb3RlIHRoYXQgeW91IGFyZSBub3QgYWxsb3dlZCB0byBjYWxsIHRoZVxuXHQvLyBwYXJzZXIgZnJvbSB0aGUgY2FsbGJhY2vigJR0aGF0IHdpbGwgY29ycnVwdCBpdHMgaW50ZXJuYWwgc3RhdGUuXG5cdG9uQ29tbWVudDpudWxsLC8vIE5vZGVzIGhhdmUgdGhlaXIgc3RhcnQgYW5kIGVuZCBjaGFyYWN0ZXJzIG9mZnNldHMgcmVjb3JkZWQgaW5cblx0Ly8gYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllcyAoZGlyZWN0bHkgb24gdGhlIG5vZGUsIHJhdGhlciB0aGFuXG5cdC8vIHRoZSBgbG9jYCBvYmplY3QsIHdoaWNoIGhvbGRzIGxpbmUvY29sdW1uIGRhdGEuIFRvIGFsc28gYWRkIGFcblx0Ly8gW3NlbWktc3RhbmRhcmRpemVkXVtyYW5nZV0gYHJhbmdlYCBwcm9wZXJ0eSBob2xkaW5nIGEgYFtzdGFydCxcblx0Ly8gZW5kXWAgYXJyYXkgd2l0aCB0aGUgc2FtZSBudW1iZXJzLCBzZXQgdGhlIGByYW5nZXNgIG9wdGlvbiB0b1xuXHQvLyBgdHJ1ZWAuXG5cdC8vXG5cdC8vIFtyYW5nZV06IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc0NTY3OFxuXHRyYW5nZXM6ZmFsc2UsLy8gSXQgaXMgcG9zc2libGUgdG8gcGFyc2UgbXVsdGlwbGUgZmlsZXMgaW50byBhIHNpbmdsZSBBU1QgYnlcblx0Ly8gcGFzc2luZyB0aGUgdHJlZSBwcm9kdWNlZCBieSBwYXJzaW5nIHRoZSBmaXJzdCBmaWxlIGFzXG5cdC8vIGBwcm9ncmFtYCBvcHRpb24gaW4gc3Vic2VxdWVudCBwYXJzZXMuIFRoaXMgd2lsbCBhZGQgdGhlXG5cdC8vIHRvcGxldmVsIGZvcm1zIG9mIHRoZSBwYXJzZWQgZmlsZSB0byB0aGUgYFByb2dyYW1gICh0b3ApIG5vZGVcblx0Ly8gb2YgYW4gZXhpc3RpbmcgcGFyc2UgdHJlZS5cblx0cHJvZ3JhbTpudWxsLC8vIFdoZW4gYGxvY2F0aW9uc2AgaXMgb24sIHlvdSBjYW4gcGFzcyB0aGlzIHRvIHJlY29yZCB0aGUgc291cmNlXG5cdC8vIGZpbGUgaW4gZXZlcnkgbm9kZSdzIGBsb2NgIG9iamVjdC5cblx0c291cmNlRmlsZTpudWxsLC8vIFRoaXMgdmFsdWUsIGlmIGdpdmVuLCBpcyBzdG9yZWQgaW4gZXZlcnkgbm9kZSwgd2hldGhlclxuXHQvLyBgbG9jYXRpb25zYCBpcyBvbiBvciBvZmYuXG5cdGRpcmVjdFNvdXJjZUZpbGU6bnVsbCwvLyBXaGVuIGVuYWJsZWQsIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbnMgYXJlIHJlcHJlc2VudGVkIGJ5XG5cdC8vIChub24tc3RhbmRhcmQpIFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uIG5vZGVzXG5cdHByZXNlcnZlUGFyZW5zOmZhbHNlLHBsdWdpbnM6e319Oy8vIEludGVycHJldCBhbmQgZGVmYXVsdCBhbiBvcHRpb25zIG9iamVjdFxuXHRmdW5jdGlvbiBnZXRPcHRpb25zKG9wdHMpe3ZhciBvcHRpb25zPXt9O2Zvcih2YXIgb3B0IGluIGRlZmF1bHRPcHRpb25zKS8qaXN0YW5idWwgaWdub3JlIG5leHQqL3tvcHRpb25zW29wdF09b3B0cyYmaGFzKG9wdHMsb3B0KT9vcHRzW29wdF06ZGVmYXVsdE9wdGlvbnNbb3B0XTt9aWYob3B0aW9ucy5hbGxvd1Jlc2VydmVkPT1udWxsKW9wdGlvbnMuYWxsb3dSZXNlcnZlZD1vcHRpb25zLmVjbWFWZXJzaW9uPDU7aWYoaXNBcnJheShvcHRpb25zLm9uVG9rZW4pKXt2YXIgdG9rZW5zPW9wdGlvbnMub25Ub2tlbjtvcHRpb25zLm9uVG9rZW49ZnVuY3Rpb24odG9rZW4pe3JldHVybiB0b2tlbnMucHVzaCh0b2tlbik7fTt9aWYoaXNBcnJheShvcHRpb25zLm9uQ29tbWVudCkpb3B0aW9ucy5vbkNvbW1lbnQ9cHVzaENvbW1lbnQob3B0aW9ucyxvcHRpb25zLm9uQ29tbWVudCk7cmV0dXJuIG9wdGlvbnM7fWZ1bmN0aW9uIHB1c2hDb21tZW50KG9wdGlvbnMsYXJyYXkpe3JldHVybiBmdW5jdGlvbihibG9jayx0ZXh0LHN0YXJ0LGVuZCxzdGFydExvYyxlbmRMb2Mpe3ZhciBjb21tZW50PXt0eXBlOmJsb2NrPydCbG9jayc6J0xpbmUnLHZhbHVlOnRleHQsc3RhcnQ6c3RhcnQsZW5kOmVuZH07aWYob3B0aW9ucy5sb2NhdGlvbnMpY29tbWVudC5sb2M9bmV3IFNvdXJjZUxvY2F0aW9uKHRoaXMsc3RhcnRMb2MsZW5kTG9jKTtpZihvcHRpb25zLnJhbmdlcyljb21tZW50LnJhbmdlPVtzdGFydCxlbmRdO2FycmF5LnB1c2goY29tbWVudCk7fTt9Ly8gUmVnaXN0ZXJlZCBwbHVnaW5zXG5cdHZhciBwbHVnaW5zPXt9O2Z1bmN0aW9uIGtleXdvcmRSZWdleHAod29yZHMpe3JldHVybiBuZXcgUmVnRXhwKFwiXihcIit3b3Jkcy5yZXBsYWNlKC8gL2csXCJ8XCIpK1wiKSRcIik7fXZhciBQYXJzZXI9ZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMsaW5wdXQsc3RhcnRQb3Mpe3RoaXMub3B0aW9ucz1vcHRpb25zPWdldE9wdGlvbnMob3B0aW9ucyk7dGhpcy5zb3VyY2VGaWxlPW9wdGlvbnMuc291cmNlRmlsZTt0aGlzLmtleXdvcmRzPWtleXdvcmRSZWdleHAoa2V5d29yZHNbb3B0aW9ucy5lY21hVmVyc2lvbj49Nj82OjVdKTt2YXIgcmVzZXJ2ZWQ9b3B0aW9ucy5hbGxvd1Jlc2VydmVkP1wiXCI6cmVzZXJ2ZWRXb3Jkc1tvcHRpb25zLmVjbWFWZXJzaW9uXSsob3B0aW9ucy5zb3VyY2VUeXBlPT1cIm1vZHVsZVwiP1wiIGF3YWl0XCI6XCJcIik7dGhpcy5yZXNlcnZlZFdvcmRzPWtleXdvcmRSZWdleHAocmVzZXJ2ZWQpO3ZhciByZXNlcnZlZFN0cmljdD0ocmVzZXJ2ZWQ/cmVzZXJ2ZWQrXCIgXCI6XCJcIikrcmVzZXJ2ZWRXb3Jkcy5zdHJpY3Q7dGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0PWtleXdvcmRSZWdleHAocmVzZXJ2ZWRTdHJpY3QpO3RoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQ9a2V5d29yZFJlZ2V4cChyZXNlcnZlZFN0cmljdCtcIiBcIityZXNlcnZlZFdvcmRzLnN0cmljdEJpbmQpO3RoaXMuaW5wdXQ9U3RyaW5nKGlucHV0KTsvLyBVc2VkIHRvIHNpZ25hbCB0byBjYWxsZXJzIG9mIGByZWFkV29yZDFgIHdoZXRoZXIgdGhlIHdvcmRcblx0Ly8gY29udGFpbmVkIGFueSBlc2NhcGUgc2VxdWVuY2VzLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHdvcmRzIHdpdGhcblx0Ly8gZXNjYXBlIHNlcXVlbmNlcyBtdXN0IG5vdCBiZSBpbnRlcnByZXRlZCBhcyBrZXl3b3Jkcy5cblx0dGhpcy5jb250YWluc0VzYz1mYWxzZTsvLyBMb2FkIHBsdWdpbnNcblx0dGhpcy5sb2FkUGx1Z2lucyhvcHRpb25zLnBsdWdpbnMpOy8vIFNldCB1cCB0b2tlbiBzdGF0ZVxuXHQvLyBUaGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgdG9rZW5pemVyIGluIHRoZSBpbnB1dC5cblx0aWYoc3RhcnRQb3Mpe3RoaXMucG9zPXN0YXJ0UG9zO3RoaXMubGluZVN0YXJ0PU1hdGgubWF4KDAsdGhpcy5pbnB1dC5sYXN0SW5kZXhPZihcIlxcblwiLHN0YXJ0UG9zKSk7dGhpcy5jdXJMaW5lPXRoaXMuaW5wdXQuc2xpY2UoMCx0aGlzLmxpbmVTdGFydCkuc3BsaXQobGluZUJyZWFrKS5sZW5ndGg7fWVsc2V7dGhpcy5wb3M9dGhpcy5saW5lU3RhcnQ9MDt0aGlzLmN1ckxpbmU9MTt9Ly8gUHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0b2tlbjpcblx0Ly8gSXRzIHR5cGVcblx0dGhpcy50eXBlPXR0LmVvZjsvLyBGb3IgdG9rZW5zIHRoYXQgaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIHRoYW4gdGhlaXIgdHlwZSwgdGhlIHZhbHVlXG5cdHRoaXMudmFsdWU9bnVsbDsvLyBJdHMgc3RhcnQgYW5kIGVuZCBvZmZzZXRcblx0dGhpcy5zdGFydD10aGlzLmVuZD10aGlzLnBvczsvLyBBbmQsIGlmIGxvY2F0aW9ucyBhcmUgdXNlZCwgdGhlIHtsaW5lLCBjb2x1bW59IG9iamVjdFxuXHQvLyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIG9mZnNldHNcblx0dGhpcy5zdGFydExvYz10aGlzLmVuZExvYz10aGlzLmN1clBvc2l0aW9uKCk7Ly8gUG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBwcmV2aW91cyB0b2tlblxuXHR0aGlzLmxhc3RUb2tFbmRMb2M9dGhpcy5sYXN0VG9rU3RhcnRMb2M9bnVsbDt0aGlzLmxhc3RUb2tTdGFydD10aGlzLmxhc3RUb2tFbmQ9dGhpcy5wb3M7Ly8gVGhlIGNvbnRleHQgc3RhY2sgaXMgdXNlZCB0byBzdXBlcmZpY2lhbGx5IHRyYWNrIHN5bnRhY3RpY1xuXHQvLyBjb250ZXh0IHRvIHByZWRpY3Qgd2hldGhlciBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBhbGxvd2VkIGluIGFcblx0Ly8gZ2l2ZW4gcG9zaXRpb24uXG5cdHRoaXMuY29udGV4dD10aGlzLmluaXRpYWxDb250ZXh0KCk7dGhpcy5leHByQWxsb3dlZD10cnVlOy8vIEZpZ3VyZSBvdXQgaWYgaXQncyBhIG1vZHVsZSBjb2RlLlxuXHR0aGlzLnN0cmljdD10aGlzLmluTW9kdWxlPW9wdGlvbnMuc291cmNlVHlwZT09PVwibW9kdWxlXCI7Ly8gVXNlZCB0byBzaWduaWZ5IHRoZSBzdGFydCBvZiBhIHBvdGVudGlhbCBhcnJvdyBmdW5jdGlvblxuXHR0aGlzLnBvdGVudGlhbEFycm93QXQ9LTE7Ly8gRmxhZ3MgdG8gdHJhY2sgd2hldGhlciB3ZSBhcmUgaW4gYSBmdW5jdGlvbiwgYSBnZW5lcmF0b3IuXG5cdHRoaXMuaW5GdW5jdGlvbj10aGlzLmluR2VuZXJhdG9yPWZhbHNlOy8vIExhYmVscyBpbiBzY29wZS5cblx0dGhpcy5sYWJlbHM9W107Ly8gSWYgZW5hYmxlZCwgc2tpcCBsZWFkaW5nIGhhc2hiYW5nIGxpbmUuXG5cdGlmKHRoaXMucG9zPT09MCYmb3B0aW9ucy5hbGxvd0hhc2hCYW5nJiZ0aGlzLmlucHV0LnNsaWNlKDAsMik9PT0nIyEnKXRoaXMuc2tpcExpbmVDb21tZW50KDIpO307Ly8gREVQUkVDQVRFRCBLZXB0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB1bnRpbCAzLjAgaW4gY2FzZSBhIHBsdWdpbiB1c2VzIHRoZW1cblx0UGFyc2VyLnByb3RvdHlwZS5pc0tleXdvcmQ9ZnVuY3Rpb24gaXNLZXl3b3JkKHdvcmQpe3JldHVybiB0aGlzLmtleXdvcmRzLnRlc3Qod29yZCk7fTtQYXJzZXIucHJvdG90eXBlLmlzUmVzZXJ2ZWRXb3JkPWZ1bmN0aW9uIGlzUmVzZXJ2ZWRXb3JkKHdvcmQpe3JldHVybiB0aGlzLnJlc2VydmVkV29yZHMudGVzdCh3b3JkKTt9O1BhcnNlci5wcm90b3R5cGUuZXh0ZW5kPWZ1bmN0aW9uIGV4dGVuZChuYW1lLGYpe3RoaXNbbmFtZV09Zih0aGlzW25hbWVdKTt9O1BhcnNlci5wcm90b3R5cGUubG9hZFBsdWdpbnM9ZnVuY3Rpb24gbG9hZFBsdWdpbnMocGx1Z2luQ29uZmlncyl7dmFyIHRoaXMkMT10aGlzO2Zvcih2YXIgbmFtZSBpbiBwbHVnaW5Db25maWdzKXt2YXIgcGx1Z2luPXBsdWdpbnNbbmFtZV07aWYoIXBsdWdpbil0aHJvdyBuZXcgRXJyb3IoXCJQbHVnaW4gJ1wiK25hbWUrXCInIG5vdCBmb3VuZFwiKTtwbHVnaW4odGhpcyQxLHBsdWdpbkNvbmZpZ3NbbmFtZV0pO319O1BhcnNlci5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24gcGFyc2UoKXt2YXIgbm9kZT10aGlzLm9wdGlvbnMucHJvZ3JhbXx8dGhpcy5zdGFydE5vZGUoKTt0aGlzLm5leHRUb2tlbigpO3JldHVybiB0aGlzLnBhcnNlVG9wTGV2ZWwobm9kZSk7fTt2YXIgcHA9UGFyc2VyLnByb3RvdHlwZTsvLyAjIyBQYXJzZXIgdXRpbGl0aWVzXG5cdC8vIFRlc3Qgd2hldGhlciBhIHN0YXRlbWVudCBub2RlIGlzIHRoZSBzdHJpbmcgbGl0ZXJhbCBgXCJ1c2Ugc3RyaWN0XCJgLlxuXHRwcC5pc1VzZVN0cmljdD1mdW5jdGlvbihzdG10KXtyZXR1cm4gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj01JiZzdG10LnR5cGU9PT1cIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiYmc3RtdC5leHByZXNzaW9uLnR5cGU9PT1cIkxpdGVyYWxcIiYmc3RtdC5leHByZXNzaW9uLnJhdy5zbGljZSgxLC0xKT09PVwidXNlIHN0cmljdFwiO307Ly8gUHJlZGljYXRlIHRoYXQgdGVzdHMgd2hldGhlciB0aGUgbmV4dCB0b2tlbiBpcyBvZiB0aGUgZ2l2ZW5cblx0Ly8gdHlwZSwgYW5kIGlmIHllcywgY29uc3VtZXMgaXQgYXMgYSBzaWRlIGVmZmVjdC5cblx0cHAuZWF0PWZ1bmN0aW9uKHR5cGUpe2lmKHRoaXMudHlwZT09PXR5cGUpe3RoaXMubmV4dCgpO3JldHVybiB0cnVlO31lbHNle3JldHVybiBmYWxzZTt9fTsvLyBUZXN0cyB3aGV0aGVyIHBhcnNlZCB0b2tlbiBpcyBhIGNvbnRleHR1YWwga2V5d29yZC5cblx0cHAuaXNDb250ZXh0dWFsPWZ1bmN0aW9uKG5hbWUpe3JldHVybiB0aGlzLnR5cGU9PT10dC5uYW1lJiZ0aGlzLnZhbHVlPT09bmFtZTt9Oy8vIENvbnN1bWVzIGNvbnRleHR1YWwga2V5d29yZCBpZiBwb3NzaWJsZS5cblx0cHAuZWF0Q29udGV4dHVhbD1mdW5jdGlvbihuYW1lKXtyZXR1cm4gdGhpcy52YWx1ZT09PW5hbWUmJnRoaXMuZWF0KHR0Lm5hbWUpO307Ly8gQXNzZXJ0cyB0aGF0IGZvbGxvd2luZyB0b2tlbiBpcyBnaXZlbiBjb250ZXh0dWFsIGtleXdvcmQuXG5cdHBwLmV4cGVjdENvbnRleHR1YWw9ZnVuY3Rpb24obmFtZSl7aWYoIXRoaXMuZWF0Q29udGV4dHVhbChuYW1lKSl0aGlzLnVuZXhwZWN0ZWQoKTt9Oy8vIFRlc3Qgd2hldGhlciBhIHNlbWljb2xvbiBjYW4gYmUgaW5zZXJ0ZWQgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG5cdHBwLmNhbkluc2VydFNlbWljb2xvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnR5cGU9PT10dC5lb2Z8fHRoaXMudHlwZT09PXR0LmJyYWNlUnx8bGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsdGhpcy5zdGFydCkpO307cHAuaW5zZXJ0U2VtaWNvbG9uPWZ1bmN0aW9uKCl7aWYodGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSl7aWYodGhpcy5vcHRpb25zLm9uSW5zZXJ0ZWRTZW1pY29sb24pdGhpcy5vcHRpb25zLm9uSW5zZXJ0ZWRTZW1pY29sb24odGhpcy5sYXN0VG9rRW5kLHRoaXMubGFzdFRva0VuZExvYyk7cmV0dXJuIHRydWU7fX07Ly8gQ29uc3VtZSBhIHNlbWljb2xvbiwgb3IsIGZhaWxpbmcgdGhhdCwgc2VlIGlmIHdlIGFyZSBhbGxvd2VkIHRvXG5cdC8vIHByZXRlbmQgdGhhdCB0aGVyZSBpcyBhIHNlbWljb2xvbiBhdCB0aGlzIHBvc2l0aW9uLlxuXHRwcC5zZW1pY29sb249ZnVuY3Rpb24oKXtpZighdGhpcy5lYXQodHQuc2VtaSkmJiF0aGlzLmluc2VydFNlbWljb2xvbigpKXRoaXMudW5leHBlY3RlZCgpO307cHAuYWZ0ZXJUcmFpbGluZ0NvbW1hPWZ1bmN0aW9uKHRva1R5cGUpe2lmKHRoaXMudHlwZT09dG9rVHlwZSl7aWYodGhpcy5vcHRpb25zLm9uVHJhaWxpbmdDb21tYSl0aGlzLm9wdGlvbnMub25UcmFpbGluZ0NvbW1hKHRoaXMubGFzdFRva1N0YXJ0LHRoaXMubGFzdFRva1N0YXJ0TG9jKTt0aGlzLm5leHQoKTtyZXR1cm4gdHJ1ZTt9fTsvLyBFeHBlY3QgYSB0b2tlbiBvZiBhIGdpdmVuIHR5cGUuIElmIGZvdW5kLCBjb25zdW1lIGl0LCBvdGhlcndpc2UsXG5cdC8vIHJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IuXG5cdHBwLmV4cGVjdD1mdW5jdGlvbih0eXBlKXt0aGlzLmVhdCh0eXBlKXx8dGhpcy51bmV4cGVjdGVkKCk7fTsvLyBSYWlzZSBhbiB1bmV4cGVjdGVkIHRva2VuIGVycm9yLlxuXHRwcC51bmV4cGVjdGVkPWZ1bmN0aW9uKHBvcyl7dGhpcy5yYWlzZShwb3MhPW51bGw/cG9zOnRoaXMuc3RhcnQsXCJVbmV4cGVjdGVkIHRva2VuXCIpO307dmFyIERlc3RydWN0dXJpbmdFcnJvcnM9ZnVuY3Rpb24gRGVzdHJ1Y3R1cmluZ0Vycm9ycygpe3RoaXMuc2hvcnRoYW5kQXNzaWduPTA7dGhpcy50cmFpbGluZ0NvbW1hPTA7fTtwcC5jaGVja1BhdHRlcm5FcnJvcnM9ZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyxhbmRUaHJvdyl7dmFyIHRyYWlsaW5nPXJlZkRlc3RydWN0dXJpbmdFcnJvcnMmJnJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYTtpZighYW5kVGhyb3cpcmV0dXJuISF0cmFpbGluZztpZih0cmFpbGluZyl0aGlzLnJhaXNlKHRyYWlsaW5nLFwiQ29tbWEgaXMgbm90IHBlcm1pdHRlZCBhZnRlciB0aGUgcmVzdCBlbGVtZW50XCIpO307cHAuY2hlY2tFeHByZXNzaW9uRXJyb3JzPWZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsYW5kVGhyb3cpe3ZhciBwb3M9cmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyYmcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ247aWYoIWFuZFRocm93KXJldHVybiEhcG9zO2lmKHBvcyl0aGlzLnJhaXNlKHBvcyxcIlNob3J0aGFuZCBwcm9wZXJ0eSBhc3NpZ25tZW50cyBhcmUgdmFsaWQgb25seSBpbiBkZXN0cnVjdHVyaW5nIHBhdHRlcm5zXCIpO307dmFyIHBwJDE9UGFyc2VyLnByb3RvdHlwZTsvLyAjIyMgU3RhdGVtZW50IHBhcnNpbmdcblx0Ly8gUGFyc2UgYSBwcm9ncmFtLiBJbml0aWFsaXplcyB0aGUgcGFyc2VyLCByZWFkcyBhbnkgbnVtYmVyIG9mXG5cdC8vIHN0YXRlbWVudHMsIGFuZCB3cmFwcyB0aGVtIGluIGEgUHJvZ3JhbSBub2RlLiAgT3B0aW9uYWxseSB0YWtlcyBhXG5cdC8vIGBwcm9ncmFtYCBhcmd1bWVudC4gIElmIHByZXNlbnQsIHRoZSBzdGF0ZW1lbnRzIHdpbGwgYmUgYXBwZW5kZWRcblx0Ly8gdG8gaXRzIGJvZHkgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBub2RlLlxuXHRwcCQxLnBhcnNlVG9wTGV2ZWw9ZnVuY3Rpb24obm9kZSl7dmFyIHRoaXMkMT10aGlzO3ZhciBmaXJzdD10cnVlO2lmKCFub2RlLmJvZHkpbm9kZS5ib2R5PVtdO3doaWxlKHRoaXMudHlwZSE9PXR0LmVvZil7dmFyIHN0bXQ9dGhpcyQxLnBhcnNlU3RhdGVtZW50KHRydWUsdHJ1ZSk7bm9kZS5ib2R5LnB1c2goc3RtdCk7aWYoZmlyc3Qpe2lmKHRoaXMkMS5pc1VzZVN0cmljdChzdG10KSl0aGlzJDEuc2V0U3RyaWN0KHRydWUpO2ZpcnN0PWZhbHNlO319dGhpcy5uZXh0KCk7aWYodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02KXtub2RlLnNvdXJjZVR5cGU9dGhpcy5vcHRpb25zLnNvdXJjZVR5cGU7fXJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIlByb2dyYW1cIik7fTt2YXIgbG9vcExhYmVsPXtraW5kOlwibG9vcFwifTt2YXIgc3dpdGNoTGFiZWw9e2tpbmQ6XCJzd2l0Y2hcIn07cHAkMS5pc0xldD1mdW5jdGlvbigpe2lmKHRoaXMudHlwZSE9PXR0Lm5hbWV8fHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbjw2fHx0aGlzLnZhbHVlIT1cImxldFwiKXJldHVybiBmYWxzZTtza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXg9dGhpcy5wb3M7dmFyIHNraXA9c2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KTt2YXIgbmV4dD10aGlzLnBvcytza2lwWzBdLmxlbmd0aCxuZXh0Q2g9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KG5leHQpO2lmKG5leHRDaD09PTkxfHxuZXh0Q2g9PTEyMylyZXR1cm4gdHJ1ZTsvLyAneycgYW5kICdbJ1xuXHRpZihpc0lkZW50aWZpZXJTdGFydChuZXh0Q2gsdHJ1ZSkpe2Zvcih2YXIgcG9zPW5leHQrMTtpc0lkZW50aWZpZXJDaGFyKHRoaXMuaW5wdXQuY2hhckNvZGVBdChwb3MpLHRydWUpOysrcG9zKXt9dmFyIGlkZW50PXRoaXMuaW5wdXQuc2xpY2UobmV4dCxwb3MpO2lmKCF0aGlzLmlzS2V5d29yZChpZGVudCkpcmV0dXJuIHRydWU7fXJldHVybiBmYWxzZTt9Oy8vIFBhcnNlIGEgc2luZ2xlIHN0YXRlbWVudC5cblx0Ly9cblx0Ly8gSWYgZXhwZWN0aW5nIGEgc3RhdGVtZW50IGFuZCBmaW5kaW5nIGEgc2xhc2ggb3BlcmF0b3IsIHBhcnNlIGFcblx0Ly8gcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwuIFRoaXMgaXMgdG8gaGFuZGxlIGNhc2VzIGxpa2Vcblx0Ly8gYGlmIChmb28pIC9ibGFoLy5leGVjKGZvbylgLCB3aGVyZSBsb29raW5nIGF0IHRoZSBwcmV2aW91cyB0b2tlblxuXHQvLyBkb2VzIG5vdCBoZWxwLlxuXHRwcCQxLnBhcnNlU3RhdGVtZW50PWZ1bmN0aW9uKGRlY2xhcmF0aW9uLHRvcExldmVsKXt2YXIgc3RhcnR0eXBlPXRoaXMudHlwZSxub2RlPXRoaXMuc3RhcnROb2RlKCksa2luZDtpZih0aGlzLmlzTGV0KCkpe3N0YXJ0dHlwZT10dC5fdmFyO2tpbmQ9XCJsZXRcIjt9Ly8gTW9zdCB0eXBlcyBvZiBzdGF0ZW1lbnRzIGFyZSByZWNvZ25pemVkIGJ5IHRoZSBrZXl3b3JkIHRoZXlcblx0Ly8gc3RhcnQgd2l0aC4gTWFueSBhcmUgdHJpdmlhbCB0byBwYXJzZSwgc29tZSByZXF1aXJlIGEgYml0IG9mXG5cdC8vIGNvbXBsZXhpdHkuXG5cdHN3aXRjaChzdGFydHR5cGUpe2Nhc2UgdHQuX2JyZWFrOmNhc2UgdHQuX2NvbnRpbnVlOnJldHVybiB0aGlzLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudChub2RlLHN0YXJ0dHlwZS5rZXl3b3JkKTtjYXNlIHR0Ll9kZWJ1Z2dlcjpyZXR1cm4gdGhpcy5wYXJzZURlYnVnZ2VyU3RhdGVtZW50KG5vZGUpO2Nhc2UgdHQuX2RvOnJldHVybiB0aGlzLnBhcnNlRG9TdGF0ZW1lbnQobm9kZSk7Y2FzZSB0dC5fZm9yOnJldHVybiB0aGlzLnBhcnNlRm9yU3RhdGVtZW50KG5vZGUpO2Nhc2UgdHQuX2Z1bmN0aW9uOmlmKCFkZWNsYXJhdGlvbiYmdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02KXRoaXMudW5leHBlY3RlZCgpO3JldHVybiB0aGlzLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQobm9kZSk7Y2FzZSB0dC5fY2xhc3M6aWYoIWRlY2xhcmF0aW9uKXRoaXMudW5leHBlY3RlZCgpO3JldHVybiB0aGlzLnBhcnNlQ2xhc3Mobm9kZSx0cnVlKTtjYXNlIHR0Ll9pZjpyZXR1cm4gdGhpcy5wYXJzZUlmU3RhdGVtZW50KG5vZGUpO2Nhc2UgdHQuX3JldHVybjpyZXR1cm4gdGhpcy5wYXJzZVJldHVyblN0YXRlbWVudChub2RlKTtjYXNlIHR0Ll9zd2l0Y2g6cmV0dXJuIHRoaXMucGFyc2VTd2l0Y2hTdGF0ZW1lbnQobm9kZSk7Y2FzZSB0dC5fdGhyb3c6cmV0dXJuIHRoaXMucGFyc2VUaHJvd1N0YXRlbWVudChub2RlKTtjYXNlIHR0Ll90cnk6cmV0dXJuIHRoaXMucGFyc2VUcnlTdGF0ZW1lbnQobm9kZSk7Y2FzZSB0dC5fY29uc3Q6Y2FzZSB0dC5fdmFyOmtpbmQ9a2luZHx8dGhpcy52YWx1ZTtpZighZGVjbGFyYXRpb24mJmtpbmQhPVwidmFyXCIpdGhpcy51bmV4cGVjdGVkKCk7cmV0dXJuIHRoaXMucGFyc2VWYXJTdGF0ZW1lbnQobm9kZSxraW5kKTtjYXNlIHR0Ll93aGlsZTpyZXR1cm4gdGhpcy5wYXJzZVdoaWxlU3RhdGVtZW50KG5vZGUpO2Nhc2UgdHQuX3dpdGg6cmV0dXJuIHRoaXMucGFyc2VXaXRoU3RhdGVtZW50KG5vZGUpO2Nhc2UgdHQuYnJhY2VMOnJldHVybiB0aGlzLnBhcnNlQmxvY2soKTtjYXNlIHR0LnNlbWk6cmV0dXJuIHRoaXMucGFyc2VFbXB0eVN0YXRlbWVudChub2RlKTtjYXNlIHR0Ll9leHBvcnQ6Y2FzZSB0dC5faW1wb3J0OmlmKCF0aGlzLm9wdGlvbnMuYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlKXtpZighdG9wTGV2ZWwpdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LFwiJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsXCIpO2lmKCF0aGlzLmluTW9kdWxlKXRoaXMucmFpc2UodGhpcy5zdGFydCxcIidpbXBvcnQnIGFuZCAnZXhwb3J0JyBtYXkgYXBwZWFyIG9ubHkgd2l0aCAnc291cmNlVHlwZTogbW9kdWxlJ1wiKTt9cmV0dXJuIHN0YXJ0dHlwZT09PXR0Ll9pbXBvcnQ/dGhpcy5wYXJzZUltcG9ydChub2RlKTp0aGlzLnBhcnNlRXhwb3J0KG5vZGUpOy8vIElmIHRoZSBzdGF0ZW1lbnQgZG9lcyBub3Qgc3RhcnQgd2l0aCBhIHN0YXRlbWVudCBrZXl3b3JkIG9yIGFcblx0Ly8gYnJhY2UsIGl0J3MgYW4gRXhwcmVzc2lvblN0YXRlbWVudCBvciBMYWJlbGVkU3RhdGVtZW50LiBXZVxuXHQvLyBzaW1wbHkgc3RhcnQgcGFyc2luZyBhbiBleHByZXNzaW9uLCBhbmQgYWZ0ZXJ3YXJkcywgaWYgdGhlXG5cdC8vIG5leHQgdG9rZW4gaXMgYSBjb2xvbiBhbmQgdGhlIGV4cHJlc3Npb24gd2FzIGEgc2ltcGxlXG5cdC8vIElkZW50aWZpZXIgbm9kZSwgd2Ugc3dpdGNoIHRvIGludGVycHJldGluZyBpdCBhcyBhIGxhYmVsLlxuXHRkZWZhdWx0OnZhciBtYXliZU5hbWU9dGhpcy52YWx1ZSxleHByPXRoaXMucGFyc2VFeHByZXNzaW9uKCk7aWYoc3RhcnR0eXBlPT09dHQubmFtZSYmZXhwci50eXBlPT09XCJJZGVudGlmaWVyXCImJnRoaXMuZWF0KHR0LmNvbG9uKSlyZXR1cm4gdGhpcy5wYXJzZUxhYmVsZWRTdGF0ZW1lbnQobm9kZSxtYXliZU5hbWUsZXhwcik7ZWxzZSByZXR1cm4gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSxleHByKTt9fTtwcCQxLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudD1mdW5jdGlvbihub2RlLGtleXdvcmQpe3ZhciB0aGlzJDE9dGhpczt2YXIgaXNCcmVhaz1rZXl3b3JkPT1cImJyZWFrXCI7dGhpcy5uZXh0KCk7aWYodGhpcy5lYXQodHQuc2VtaSl8fHRoaXMuaW5zZXJ0U2VtaWNvbG9uKCkpbm9kZS5sYWJlbD1udWxsO2Vsc2UgaWYodGhpcy50eXBlIT09dHQubmFtZSl0aGlzLnVuZXhwZWN0ZWQoKTtlbHNle25vZGUubGFiZWw9dGhpcy5wYXJzZUlkZW50KCk7dGhpcy5zZW1pY29sb24oKTt9Ly8gVmVyaWZ5IHRoYXQgdGhlcmUgaXMgYW4gYWN0dWFsIGRlc3RpbmF0aW9uIHRvIGJyZWFrIG9yXG5cdC8vIGNvbnRpbnVlIHRvLlxuXHRmb3IodmFyIGk9MDtpPHRoaXMubGFiZWxzLmxlbmd0aDsrK2kpe3ZhciBsYWI9dGhpcyQxLmxhYmVsc1tpXTtpZihub2RlLmxhYmVsPT1udWxsfHxsYWIubmFtZT09PW5vZGUubGFiZWwubmFtZSl7aWYobGFiLmtpbmQhPW51bGwmJihpc0JyZWFrfHxsYWIua2luZD09PVwibG9vcFwiKSlicmVhaztpZihub2RlLmxhYmVsJiZpc0JyZWFrKWJyZWFrO319aWYoaT09PXRoaXMubGFiZWxzLmxlbmd0aCl0aGlzLnJhaXNlKG5vZGUuc3RhcnQsXCJVbnN5bnRhY3RpYyBcIitrZXl3b3JkKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsaXNCcmVhaz9cIkJyZWFrU3RhdGVtZW50XCI6XCJDb250aW51ZVN0YXRlbWVudFwiKTt9O3BwJDEucGFyc2VEZWJ1Z2dlclN0YXRlbWVudD1mdW5jdGlvbihub2RlKXt0aGlzLm5leHQoKTt0aGlzLnNlbWljb2xvbigpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIkRlYnVnZ2VyU3RhdGVtZW50XCIpO307cHAkMS5wYXJzZURvU3RhdGVtZW50PWZ1bmN0aW9uKG5vZGUpe3RoaXMubmV4dCgpO3RoaXMubGFiZWxzLnB1c2gobG9vcExhYmVsKTtub2RlLmJvZHk9dGhpcy5wYXJzZVN0YXRlbWVudChmYWxzZSk7dGhpcy5sYWJlbHMucG9wKCk7dGhpcy5leHBlY3QodHQuX3doaWxlKTtub2RlLnRlc3Q9dGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49Nil0aGlzLmVhdCh0dC5zZW1pKTtlbHNlIHRoaXMuc2VtaWNvbG9uKCk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiRG9XaGlsZVN0YXRlbWVudFwiKTt9Oy8vIERpc2FtYmlndWF0aW5nIGJldHdlZW4gYSBgZm9yYCBhbmQgYSBgZm9yYC9gaW5gIG9yIGBmb3JgL2BvZmBcblx0Ly8gbG9vcCBpcyBub24tdHJpdmlhbC4gQmFzaWNhbGx5LCB3ZSBoYXZlIHRvIHBhcnNlIHRoZSBpbml0IGB2YXJgXG5cdC8vIHN0YXRlbWVudCBvciBleHByZXNzaW9uLCBkaXNhbGxvd2luZyB0aGUgYGluYCBvcGVyYXRvciAoc2VlXG5cdC8vIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGBwYXJzZUV4cHJlc3Npb25gKSwgYW5kIHRoZW4gY2hlY2tcblx0Ly8gd2hldGhlciB0aGUgbmV4dCB0b2tlbiBpcyBgaW5gIG9yIGBvZmAuIFdoZW4gdGhlcmUgaXMgbm8gaW5pdFxuXHQvLyBwYXJ0IChzZW1pY29sb24gaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIG9wZW5pbmcgcGFyZW50aGVzaXMpLCBpdFxuXHQvLyBpcyBhIHJlZ3VsYXIgYGZvcmAgbG9vcC5cblx0cHAkMS5wYXJzZUZvclN0YXRlbWVudD1mdW5jdGlvbihub2RlKXt0aGlzLm5leHQoKTt0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7dGhpcy5leHBlY3QodHQucGFyZW5MKTtpZih0aGlzLnR5cGU9PT10dC5zZW1pKXJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsbnVsbCk7dmFyIGlzTGV0PXRoaXMuaXNMZXQoKTtpZih0aGlzLnR5cGU9PT10dC5fdmFyfHx0aGlzLnR5cGU9PT10dC5fY29uc3R8fGlzTGV0KXt2YXIgaW5pdCQxPXRoaXMuc3RhcnROb2RlKCksa2luZD1pc0xldD9cImxldFwiOnRoaXMudmFsdWU7dGhpcy5uZXh0KCk7dGhpcy5wYXJzZVZhcihpbml0JDEsdHJ1ZSxraW5kKTt0aGlzLmZpbmlzaE5vZGUoaW5pdCQxLFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKTtpZigodGhpcy50eXBlPT09dHQuX2lufHx0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYmJnRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpJiZpbml0JDEuZGVjbGFyYXRpb25zLmxlbmd0aD09PTEmJiEoa2luZCE9PVwidmFyXCImJmluaXQkMS5kZWNsYXJhdGlvbnNbMF0uaW5pdCkpcmV0dXJuIHRoaXMucGFyc2VGb3JJbihub2RlLGluaXQkMSk7cmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSxpbml0JDEpO312YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycz1uZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycygpO3ZhciBpbml0PXRoaXMucGFyc2VFeHByZXNzaW9uKHRydWUscmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7aWYodGhpcy50eXBlPT09dHQuX2lufHx0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYmJnRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpe3RoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsdHJ1ZSk7dGhpcy50b0Fzc2lnbmFibGUoaW5pdCk7dGhpcy5jaGVja0xWYWwoaW5pdCk7cmV0dXJuIHRoaXMucGFyc2VGb3JJbihub2RlLGluaXQpO31lbHNle3RoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsdHJ1ZSk7fXJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsaW5pdCk7fTtwcCQxLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQ9ZnVuY3Rpb24obm9kZSl7dGhpcy5uZXh0KCk7cmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihub2RlLHRydWUpO307cHAkMS5wYXJzZUlmU3RhdGVtZW50PWZ1bmN0aW9uKG5vZGUpe3RoaXMubmV4dCgpO25vZGUudGVzdD10aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7bm9kZS5jb25zZXF1ZW50PXRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpO25vZGUuYWx0ZXJuYXRlPXRoaXMuZWF0KHR0Ll9lbHNlKT90aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTpudWxsO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIklmU3RhdGVtZW50XCIpO307cHAkMS5wYXJzZVJldHVyblN0YXRlbWVudD1mdW5jdGlvbihub2RlKXtpZighdGhpcy5pbkZ1bmN0aW9uJiYhdGhpcy5vcHRpb25zLmFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uKXRoaXMucmFpc2UodGhpcy5zdGFydCxcIidyZXR1cm4nIG91dHNpZGUgb2YgZnVuY3Rpb25cIik7dGhpcy5uZXh0KCk7Ly8gSW4gYHJldHVybmAgKGFuZCBgYnJlYWtgL2Bjb250aW51ZWApLCB0aGUga2V5d29yZHMgd2l0aFxuXHQvLyBvcHRpb25hbCBhcmd1bWVudHMsIHdlIGVhZ2VybHkgbG9vayBmb3IgYSBzZW1pY29sb24gb3IgdGhlXG5cdC8vIHBvc3NpYmlsaXR5IHRvIGluc2VydCBvbmUuXG5cdGlmKHRoaXMuZWF0KHR0LnNlbWkpfHx0aGlzLmluc2VydFNlbWljb2xvbigpKW5vZGUuYXJndW1lbnQ9bnVsbDtlbHNle25vZGUuYXJndW1lbnQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTt0aGlzLnNlbWljb2xvbigpO31yZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJSZXR1cm5TdGF0ZW1lbnRcIik7fTtwcCQxLnBhcnNlU3dpdGNoU3RhdGVtZW50PWZ1bmN0aW9uKG5vZGUpe3ZhciB0aGlzJDE9dGhpczt0aGlzLm5leHQoKTtub2RlLmRpc2NyaW1pbmFudD10aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7bm9kZS5jYXNlcz1bXTt0aGlzLmV4cGVjdCh0dC5icmFjZUwpO3RoaXMubGFiZWxzLnB1c2goc3dpdGNoTGFiZWwpOy8vIFN0YXRlbWVudHMgdW5kZXIgbXVzdCBiZSBncm91cGVkIChieSBsYWJlbCkgaW4gU3dpdGNoQ2FzZVxuXHQvLyBub2Rlcy4gYGN1cmAgaXMgdXNlZCB0byBrZWVwIHRoZSBub2RlIHRoYXQgd2UgYXJlIGN1cnJlbnRseVxuXHQvLyBhZGRpbmcgc3RhdGVtZW50cyB0by5cblx0Zm9yKHZhciBjdXIsc2F3RGVmYXVsdD1mYWxzZTt0aGlzLnR5cGUhPXR0LmJyYWNlUjspe2lmKHRoaXMkMS50eXBlPT09dHQuX2Nhc2V8fHRoaXMkMS50eXBlPT09dHQuX2RlZmF1bHQpe3ZhciBpc0Nhc2U9dGhpcyQxLnR5cGU9PT10dC5fY2FzZTtpZihjdXIpdGhpcyQxLmZpbmlzaE5vZGUoY3VyLFwiU3dpdGNoQ2FzZVwiKTtub2RlLmNhc2VzLnB1c2goY3VyPXRoaXMkMS5zdGFydE5vZGUoKSk7Y3VyLmNvbnNlcXVlbnQ9W107dGhpcyQxLm5leHQoKTtpZihpc0Nhc2Upe2N1ci50ZXN0PXRoaXMkMS5wYXJzZUV4cHJlc3Npb24oKTt9ZWxzZXtpZihzYXdEZWZhdWx0KXRoaXMkMS5yYWlzZVJlY292ZXJhYmxlKHRoaXMkMS5sYXN0VG9rU3RhcnQsXCJNdWx0aXBsZSBkZWZhdWx0IGNsYXVzZXNcIik7c2F3RGVmYXVsdD10cnVlO2N1ci50ZXN0PW51bGw7fXRoaXMkMS5leHBlY3QodHQuY29sb24pO31lbHNle2lmKCFjdXIpdGhpcyQxLnVuZXhwZWN0ZWQoKTtjdXIuY29uc2VxdWVudC5wdXNoKHRoaXMkMS5wYXJzZVN0YXRlbWVudCh0cnVlKSk7fX1pZihjdXIpdGhpcy5maW5pc2hOb2RlKGN1cixcIlN3aXRjaENhc2VcIik7dGhpcy5uZXh0KCk7Ly8gQ2xvc2luZyBicmFjZVxuXHR0aGlzLmxhYmVscy5wb3AoKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJTd2l0Y2hTdGF0ZW1lbnRcIik7fTtwcCQxLnBhcnNlVGhyb3dTdGF0ZW1lbnQ9ZnVuY3Rpb24obm9kZSl7dGhpcy5uZXh0KCk7aWYobGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsdGhpcy5zdGFydCkpKXRoaXMucmFpc2UodGhpcy5sYXN0VG9rRW5kLFwiSWxsZWdhbCBuZXdsaW5lIGFmdGVyIHRocm93XCIpO25vZGUuYXJndW1lbnQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTt0aGlzLnNlbWljb2xvbigpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIlRocm93U3RhdGVtZW50XCIpO307Ly8gUmV1c2VkIGVtcHR5IGFycmF5IGFkZGVkIGZvciBub2RlIGZpZWxkcyB0aGF0IGFyZSBhbHdheXMgZW1wdHkuXG5cdHZhciBlbXB0eT1bXTtwcCQxLnBhcnNlVHJ5U3RhdGVtZW50PWZ1bmN0aW9uKG5vZGUpe3RoaXMubmV4dCgpO25vZGUuYmxvY2s9dGhpcy5wYXJzZUJsb2NrKCk7bm9kZS5oYW5kbGVyPW51bGw7aWYodGhpcy50eXBlPT09dHQuX2NhdGNoKXt2YXIgY2xhdXNlPXRoaXMuc3RhcnROb2RlKCk7dGhpcy5uZXh0KCk7dGhpcy5leHBlY3QodHQucGFyZW5MKTtjbGF1c2UucGFyYW09dGhpcy5wYXJzZUJpbmRpbmdBdG9tKCk7dGhpcy5jaGVja0xWYWwoY2xhdXNlLnBhcmFtLHRydWUpO3RoaXMuZXhwZWN0KHR0LnBhcmVuUik7Y2xhdXNlLmJvZHk9dGhpcy5wYXJzZUJsb2NrKCk7bm9kZS5oYW5kbGVyPXRoaXMuZmluaXNoTm9kZShjbGF1c2UsXCJDYXRjaENsYXVzZVwiKTt9bm9kZS5maW5hbGl6ZXI9dGhpcy5lYXQodHQuX2ZpbmFsbHkpP3RoaXMucGFyc2VCbG9jaygpOm51bGw7aWYoIW5vZGUuaGFuZGxlciYmIW5vZGUuZmluYWxpemVyKXRoaXMucmFpc2Uobm9kZS5zdGFydCxcIk1pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBjbGF1c2VcIik7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiVHJ5U3RhdGVtZW50XCIpO307cHAkMS5wYXJzZVZhclN0YXRlbWVudD1mdW5jdGlvbihub2RlLGtpbmQpe3RoaXMubmV4dCgpO3RoaXMucGFyc2VWYXIobm9kZSxmYWxzZSxraW5kKTt0aGlzLnNlbWljb2xvbigpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIlZhcmlhYmxlRGVjbGFyYXRpb25cIik7fTtwcCQxLnBhcnNlV2hpbGVTdGF0ZW1lbnQ9ZnVuY3Rpb24obm9kZSl7dGhpcy5uZXh0KCk7bm9kZS50ZXN0PXRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTt0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7bm9kZS5ib2R5PXRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpO3RoaXMubGFiZWxzLnBvcCgpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIldoaWxlU3RhdGVtZW50XCIpO307cHAkMS5wYXJzZVdpdGhTdGF0ZW1lbnQ9ZnVuY3Rpb24obm9kZSl7aWYodGhpcy5zdHJpY3QpdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LFwiJ3dpdGgnIGluIHN0cmljdCBtb2RlXCIpO3RoaXMubmV4dCgpO25vZGUub2JqZWN0PXRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtub2RlLmJvZHk9dGhpcy5wYXJzZVN0YXRlbWVudChmYWxzZSk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiV2l0aFN0YXRlbWVudFwiKTt9O3BwJDEucGFyc2VFbXB0eVN0YXRlbWVudD1mdW5jdGlvbihub2RlKXt0aGlzLm5leHQoKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJFbXB0eVN0YXRlbWVudFwiKTt9O3BwJDEucGFyc2VMYWJlbGVkU3RhdGVtZW50PWZ1bmN0aW9uKG5vZGUsbWF5YmVOYW1lLGV4cHIpe3ZhciB0aGlzJDE9dGhpcztmb3IodmFyIGk9MDtpPHRoaXMubGFiZWxzLmxlbmd0aDsrK2kpLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCove2lmKHRoaXMkMS5sYWJlbHNbaV0ubmFtZT09PW1heWJlTmFtZSl0aGlzJDEucmFpc2UoZXhwci5zdGFydCxcIkxhYmVsICdcIittYXliZU5hbWUrXCInIGlzIGFscmVhZHkgZGVjbGFyZWRcIik7fXZhciBraW5kPXRoaXMudHlwZS5pc0xvb3A/XCJsb29wXCI6dGhpcy50eXBlPT09dHQuX3N3aXRjaD9cInN3aXRjaFwiOm51bGw7Zm9yKHZhciBpJDE9dGhpcy5sYWJlbHMubGVuZ3RoLTE7aSQxPj0wO2kkMS0tKXt2YXIgbGFiZWw9dGhpcyQxLmxhYmVsc1tpJDFdO2lmKGxhYmVsLnN0YXRlbWVudFN0YXJ0PT1ub2RlLnN0YXJ0KXtsYWJlbC5zdGF0ZW1lbnRTdGFydD10aGlzJDEuc3RhcnQ7bGFiZWwua2luZD1raW5kO31lbHNlIGJyZWFrO310aGlzLmxhYmVscy5wdXNoKHtuYW1lOm1heWJlTmFtZSxraW5kOmtpbmQsc3RhdGVtZW50U3RhcnQ6dGhpcy5zdGFydH0pO25vZGUuYm9keT10aGlzLnBhcnNlU3RhdGVtZW50KHRydWUpO3RoaXMubGFiZWxzLnBvcCgpO25vZGUubGFiZWw9ZXhwcjtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJMYWJlbGVkU3RhdGVtZW50XCIpO307cHAkMS5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQ9ZnVuY3Rpb24obm9kZSxleHByKXtub2RlLmV4cHJlc3Npb249ZXhwcjt0aGlzLnNlbWljb2xvbigpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIik7fTsvLyBQYXJzZSBhIHNlbWljb2xvbi1lbmNsb3NlZCBibG9jayBvZiBzdGF0ZW1lbnRzLCBoYW5kbGluZyBgXCJ1c2Vcblx0Ly8gc3RyaWN0XCJgIGRlY2xhcmF0aW9ucyB3aGVuIGBhbGxvd1N0cmljdGAgaXMgdHJ1ZSAodXNlZCBmb3Jcblx0Ly8gZnVuY3Rpb24gYm9kaWVzKS5cblx0cHAkMS5wYXJzZUJsb2NrPWZ1bmN0aW9uKGFsbG93U3RyaWN0KXt2YXIgdGhpcyQxPXRoaXM7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGUoKSxmaXJzdD10cnVlLG9sZFN0cmljdDtub2RlLmJvZHk9W107dGhpcy5leHBlY3QodHQuYnJhY2VMKTt3aGlsZSghdGhpcy5lYXQodHQuYnJhY2VSKSl7dmFyIHN0bXQ9dGhpcyQxLnBhcnNlU3RhdGVtZW50KHRydWUpO25vZGUuYm9keS5wdXNoKHN0bXQpO2lmKGZpcnN0JiZhbGxvd1N0cmljdCYmdGhpcyQxLmlzVXNlU3RyaWN0KHN0bXQpKXtvbGRTdHJpY3Q9dGhpcyQxLnN0cmljdDt0aGlzJDEuc2V0U3RyaWN0KHRoaXMkMS5zdHJpY3Q9dHJ1ZSk7fWZpcnN0PWZhbHNlO31pZihvbGRTdHJpY3Q9PT1mYWxzZSl0aGlzLnNldFN0cmljdChmYWxzZSk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiQmxvY2tTdGF0ZW1lbnRcIik7fTsvLyBQYXJzZSBhIHJlZ3VsYXIgYGZvcmAgbG9vcC4gVGhlIGRpc2FtYmlndWF0aW9uIGNvZGUgaW5cblx0Ly8gYHBhcnNlU3RhdGVtZW50YCB3aWxsIGFscmVhZHkgaGF2ZSBwYXJzZWQgdGhlIGluaXQgc3RhdGVtZW50IG9yXG5cdC8vIGV4cHJlc3Npb24uXG5cdHBwJDEucGFyc2VGb3I9ZnVuY3Rpb24obm9kZSxpbml0KXtub2RlLmluaXQ9aW5pdDt0aGlzLmV4cGVjdCh0dC5zZW1pKTtub2RlLnRlc3Q9dGhpcy50eXBlPT09dHQuc2VtaT9udWxsOnRoaXMucGFyc2VFeHByZXNzaW9uKCk7dGhpcy5leHBlY3QodHQuc2VtaSk7bm9kZS51cGRhdGU9dGhpcy50eXBlPT09dHQucGFyZW5SP251bGw6dGhpcy5wYXJzZUV4cHJlc3Npb24oKTt0aGlzLmV4cGVjdCh0dC5wYXJlblIpO25vZGUuYm9keT10aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTt0aGlzLmxhYmVscy5wb3AoKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJGb3JTdGF0ZW1lbnRcIik7fTsvLyBQYXJzZSBhIGBmb3JgL2BpbmAgYW5kIGBmb3JgL2BvZmAgbG9vcCwgd2hpY2ggYXJlIGFsbW9zdFxuXHQvLyBzYW1lIGZyb20gcGFyc2VyJ3MgcGVyc3BlY3RpdmUuXG5cdHBwJDEucGFyc2VGb3JJbj1mdW5jdGlvbihub2RlLGluaXQpe3ZhciB0eXBlPXRoaXMudHlwZT09PXR0Ll9pbj9cIkZvckluU3RhdGVtZW50XCI6XCJGb3JPZlN0YXRlbWVudFwiO3RoaXMubmV4dCgpO25vZGUubGVmdD1pbml0O25vZGUucmlnaHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTt0aGlzLmV4cGVjdCh0dC5wYXJlblIpO25vZGUuYm9keT10aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTt0aGlzLmxhYmVscy5wb3AoKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsdHlwZSk7fTsvLyBQYXJzZSBhIGxpc3Qgb2YgdmFyaWFibGUgZGVjbGFyYXRpb25zLlxuXHRwcCQxLnBhcnNlVmFyPWZ1bmN0aW9uKG5vZGUsaXNGb3Isa2luZCl7dmFyIHRoaXMkMT10aGlzO25vZGUuZGVjbGFyYXRpb25zPVtdO25vZGUua2luZD1raW5kO2Zvcig7Oyl7dmFyIGRlY2w9dGhpcyQxLnN0YXJ0Tm9kZSgpO3RoaXMkMS5wYXJzZVZhcklkKGRlY2wpO2lmKHRoaXMkMS5lYXQodHQuZXEpKXtkZWNsLmluaXQ9dGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24oaXNGb3IpO31lbHNlIGlmKGtpbmQ9PT1cImNvbnN0XCImJiEodGhpcyQxLnR5cGU9PT10dC5faW58fHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uPj02JiZ0aGlzJDEuaXNDb250ZXh0dWFsKFwib2ZcIikpKXt0aGlzJDEudW5leHBlY3RlZCgpO31lbHNlIGlmKGRlY2wuaWQudHlwZSE9XCJJZGVudGlmaWVyXCImJiEoaXNGb3ImJih0aGlzJDEudHlwZT09PXR0Ll9pbnx8dGhpcyQxLmlzQ29udGV4dHVhbChcIm9mXCIpKSkpe3RoaXMkMS5yYWlzZSh0aGlzJDEubGFzdFRva0VuZCxcIkNvbXBsZXggYmluZGluZyBwYXR0ZXJucyByZXF1aXJlIGFuIGluaXRpYWxpemF0aW9uIHZhbHVlXCIpO31lbHNle2RlY2wuaW5pdD1udWxsO31ub2RlLmRlY2xhcmF0aW9ucy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKGRlY2wsXCJWYXJpYWJsZURlY2xhcmF0b3JcIikpO2lmKCF0aGlzJDEuZWF0KHR0LmNvbW1hKSlicmVhazt9cmV0dXJuIG5vZGU7fTtwcCQxLnBhcnNlVmFySWQ9ZnVuY3Rpb24oZGVjbCl7ZGVjbC5pZD10aGlzLnBhcnNlQmluZGluZ0F0b20oKTt0aGlzLmNoZWNrTFZhbChkZWNsLmlkLHRydWUpO307Ly8gUGFyc2UgYSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBvciBsaXRlcmFsIChkZXBlbmRpbmcgb24gdGhlXG5cdC8vIGBpc1N0YXRlbWVudGAgcGFyYW1ldGVyKS5cblx0cHAkMS5wYXJzZUZ1bmN0aW9uPWZ1bmN0aW9uKG5vZGUsaXNTdGF0ZW1lbnQsYWxsb3dFeHByZXNzaW9uQm9keSl7dGhpcy5pbml0RnVuY3Rpb24obm9kZSk7aWYodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02KW5vZGUuZ2VuZXJhdG9yPXRoaXMuZWF0KHR0LnN0YXIpO3ZhciBvbGRJbkdlbj10aGlzLmluR2VuZXJhdG9yO3RoaXMuaW5HZW5lcmF0b3I9bm9kZS5nZW5lcmF0b3I7aWYoaXNTdGF0ZW1lbnR8fHRoaXMudHlwZT09PXR0Lm5hbWUpbm9kZS5pZD10aGlzLnBhcnNlSWRlbnQoKTt0aGlzLnBhcnNlRnVuY3Rpb25QYXJhbXMobm9kZSk7dGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLGFsbG93RXhwcmVzc2lvbkJvZHkpO3RoaXMuaW5HZW5lcmF0b3I9b2xkSW5HZW47cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLGlzU3RhdGVtZW50P1wiRnVuY3Rpb25EZWNsYXJhdGlvblwiOlwiRnVuY3Rpb25FeHByZXNzaW9uXCIpO307cHAkMS5wYXJzZUZ1bmN0aW9uUGFyYW1zPWZ1bmN0aW9uKG5vZGUpe3RoaXMuZXhwZWN0KHR0LnBhcmVuTCk7bm9kZS5wYXJhbXM9dGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR0LnBhcmVuUixmYWxzZSxmYWxzZSx0cnVlKTt9Oy8vIFBhcnNlIGEgY2xhc3MgZGVjbGFyYXRpb24gb3IgbGl0ZXJhbCAoZGVwZW5kaW5nIG9uIHRoZVxuXHQvLyBgaXNTdGF0ZW1lbnRgIHBhcmFtZXRlcikuXG5cdHBwJDEucGFyc2VDbGFzcz1mdW5jdGlvbihub2RlLGlzU3RhdGVtZW50KXt2YXIgdGhpcyQxPXRoaXM7dGhpcy5uZXh0KCk7dGhpcy5wYXJzZUNsYXNzSWQobm9kZSxpc1N0YXRlbWVudCk7dGhpcy5wYXJzZUNsYXNzU3VwZXIobm9kZSk7dmFyIGNsYXNzQm9keT10aGlzLnN0YXJ0Tm9kZSgpO3ZhciBoYWRDb25zdHJ1Y3Rvcj1mYWxzZTtjbGFzc0JvZHkuYm9keT1bXTt0aGlzLmV4cGVjdCh0dC5icmFjZUwpO3doaWxlKCF0aGlzLmVhdCh0dC5icmFjZVIpKXtpZih0aGlzJDEuZWF0KHR0LnNlbWkpKWNvbnRpbnVlO3ZhciBtZXRob2Q9dGhpcyQxLnN0YXJ0Tm9kZSgpO3ZhciBpc0dlbmVyYXRvcj10aGlzJDEuZWF0KHR0LnN0YXIpO3ZhciBpc01heWJlU3RhdGljPXRoaXMkMS50eXBlPT09dHQubmFtZSYmdGhpcyQxLnZhbHVlPT09XCJzdGF0aWNcIjt0aGlzJDEucGFyc2VQcm9wZXJ0eU5hbWUobWV0aG9kKTttZXRob2Quc3RhdGljPWlzTWF5YmVTdGF0aWMmJnRoaXMkMS50eXBlIT09dHQucGFyZW5MO2lmKG1ldGhvZC5zdGF0aWMpe2lmKGlzR2VuZXJhdG9yKXRoaXMkMS51bmV4cGVjdGVkKCk7aXNHZW5lcmF0b3I9dGhpcyQxLmVhdCh0dC5zdGFyKTt0aGlzJDEucGFyc2VQcm9wZXJ0eU5hbWUobWV0aG9kKTt9bWV0aG9kLmtpbmQ9XCJtZXRob2RcIjt2YXIgaXNHZXRTZXQ9ZmFsc2U7aWYoIW1ldGhvZC5jb21wdXRlZCl7dmFyIGtleT1tZXRob2Qua2V5O2lmKCFpc0dlbmVyYXRvciYma2V5LnR5cGU9PT1cIklkZW50aWZpZXJcIiYmdGhpcyQxLnR5cGUhPT10dC5wYXJlbkwmJihrZXkubmFtZT09PVwiZ2V0XCJ8fGtleS5uYW1lPT09XCJzZXRcIikpe2lzR2V0U2V0PXRydWU7bWV0aG9kLmtpbmQ9a2V5Lm5hbWU7a2V5PXRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShtZXRob2QpO31pZighbWV0aG9kLnN0YXRpYyYmKGtleS50eXBlPT09XCJJZGVudGlmaWVyXCImJmtleS5uYW1lPT09XCJjb25zdHJ1Y3RvclwifHxrZXkudHlwZT09PVwiTGl0ZXJhbFwiJiZrZXkudmFsdWU9PT1cImNvbnN0cnVjdG9yXCIpKXtpZihoYWRDb25zdHJ1Y3Rvcil0aGlzJDEucmFpc2Uoa2V5LnN0YXJ0LFwiRHVwbGljYXRlIGNvbnN0cnVjdG9yIGluIHRoZSBzYW1lIGNsYXNzXCIpO2lmKGlzR2V0U2V0KXRoaXMkMS5yYWlzZShrZXkuc3RhcnQsXCJDb25zdHJ1Y3RvciBjYW4ndCBoYXZlIGdldC9zZXQgbW9kaWZpZXJcIik7aWYoaXNHZW5lcmF0b3IpdGhpcyQxLnJhaXNlKGtleS5zdGFydCxcIkNvbnN0cnVjdG9yIGNhbid0IGJlIGEgZ2VuZXJhdG9yXCIpO21ldGhvZC5raW5kPVwiY29uc3RydWN0b3JcIjtoYWRDb25zdHJ1Y3Rvcj10cnVlO319dGhpcyQxLnBhcnNlQ2xhc3NNZXRob2QoY2xhc3NCb2R5LG1ldGhvZCxpc0dlbmVyYXRvcik7aWYoaXNHZXRTZXQpe3ZhciBwYXJhbUNvdW50PW1ldGhvZC5raW5kPT09XCJnZXRcIj8wOjE7aWYobWV0aG9kLnZhbHVlLnBhcmFtcy5sZW5ndGghPT1wYXJhbUNvdW50KXt2YXIgc3RhcnQ9bWV0aG9kLnZhbHVlLnN0YXJ0O2lmKG1ldGhvZC5raW5kPT09XCJnZXRcIil0aGlzJDEucmFpc2VSZWNvdmVyYWJsZShzdGFydCxcImdldHRlciBzaG91bGQgaGF2ZSBubyBwYXJhbXNcIik7ZWxzZSB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZShzdGFydCxcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTt9aWYobWV0aG9kLmtpbmQ9PT1cInNldFwiJiZtZXRob2QudmFsdWUucGFyYW1zWzBdLnR5cGU9PT1cIlJlc3RFbGVtZW50XCIpdGhpcyQxLnJhaXNlKG1ldGhvZC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsXCJTZXR0ZXIgY2Fubm90IHVzZSByZXN0IHBhcmFtc1wiKTt9fW5vZGUuYm9keT10aGlzLmZpbmlzaE5vZGUoY2xhc3NCb2R5LFwiQ2xhc3NCb2R5XCIpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxpc1N0YXRlbWVudD9cIkNsYXNzRGVjbGFyYXRpb25cIjpcIkNsYXNzRXhwcmVzc2lvblwiKTt9O3BwJDEucGFyc2VDbGFzc01ldGhvZD1mdW5jdGlvbihjbGFzc0JvZHksbWV0aG9kLGlzR2VuZXJhdG9yKXttZXRob2QudmFsdWU9dGhpcy5wYXJzZU1ldGhvZChpc0dlbmVyYXRvcik7Y2xhc3NCb2R5LmJvZHkucHVzaCh0aGlzLmZpbmlzaE5vZGUobWV0aG9kLFwiTWV0aG9kRGVmaW5pdGlvblwiKSk7fTtwcCQxLnBhcnNlQ2xhc3NJZD1mdW5jdGlvbihub2RlLGlzU3RhdGVtZW50KXtub2RlLmlkPXRoaXMudHlwZT09PXR0Lm5hbWU/dGhpcy5wYXJzZUlkZW50KCk6aXNTdGF0ZW1lbnQ/dGhpcy51bmV4cGVjdGVkKCk6bnVsbDt9O3BwJDEucGFyc2VDbGFzc1N1cGVyPWZ1bmN0aW9uKG5vZGUpe25vZGUuc3VwZXJDbGFzcz10aGlzLmVhdCh0dC5fZXh0ZW5kcyk/dGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKCk6bnVsbDt9Oy8vIFBhcnNlcyBtb2R1bGUgZXhwb3J0IGRlY2xhcmF0aW9uLlxuXHRwcCQxLnBhcnNlRXhwb3J0PWZ1bmN0aW9uKG5vZGUpe3ZhciB0aGlzJDE9dGhpczt0aGlzLm5leHQoKTsvLyBleHBvcnQgKiBmcm9tICcuLi4nXG5cdGlmKHRoaXMuZWF0KHR0LnN0YXIpKXt0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJmcm9tXCIpO25vZGUuc291cmNlPXRoaXMudHlwZT09PXR0LnN0cmluZz90aGlzLnBhcnNlRXhwckF0b20oKTp0aGlzLnVuZXhwZWN0ZWQoKTt0aGlzLnNlbWljb2xvbigpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIpO31pZih0aGlzLmVhdCh0dC5fZGVmYXVsdCkpey8vIGV4cG9ydCBkZWZhdWx0IC4uLlxuXHR2YXIgcGFyZW5zPXRoaXMudHlwZT09dHQucGFyZW5MO3ZhciBleHByPXRoaXMucGFyc2VNYXliZUFzc2lnbigpO3ZhciBuZWVkc1NlbWk9dHJ1ZTtpZighcGFyZW5zJiYoZXhwci50eXBlPT1cIkZ1bmN0aW9uRXhwcmVzc2lvblwifHxleHByLnR5cGU9PVwiQ2xhc3NFeHByZXNzaW9uXCIpKXtuZWVkc1NlbWk9ZmFsc2U7aWYoZXhwci5pZCl7ZXhwci50eXBlPWV4cHIudHlwZT09XCJGdW5jdGlvbkV4cHJlc3Npb25cIj9cIkZ1bmN0aW9uRGVjbGFyYXRpb25cIjpcIkNsYXNzRGVjbGFyYXRpb25cIjt9fW5vZGUuZGVjbGFyYXRpb249ZXhwcjtpZihuZWVkc1NlbWkpdGhpcy5zZW1pY29sb24oKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIik7fS8vIGV4cG9ydCB2YXJ8Y29uc3R8bGV0fGZ1bmN0aW9ufGNsYXNzIC4uLlxuXHRpZih0aGlzLnNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50KCkpe25vZGUuZGVjbGFyYXRpb249dGhpcy5wYXJzZVN0YXRlbWVudCh0cnVlKTtub2RlLnNwZWNpZmllcnM9W107bm9kZS5zb3VyY2U9bnVsbDt9ZWxzZXsvLyBleHBvcnQgeyB4LCB5IGFzIHogfSBbZnJvbSAnLi4uJ11cblx0bm9kZS5kZWNsYXJhdGlvbj1udWxsO25vZGUuc3BlY2lmaWVycz10aGlzLnBhcnNlRXhwb3J0U3BlY2lmaWVycygpO2lmKHRoaXMuZWF0Q29udGV4dHVhbChcImZyb21cIikpe25vZGUuc291cmNlPXRoaXMudHlwZT09PXR0LnN0cmluZz90aGlzLnBhcnNlRXhwckF0b20oKTp0aGlzLnVuZXhwZWN0ZWQoKTt9ZWxzZXsvLyBjaGVjayBmb3Iga2V5d29yZHMgdXNlZCBhcyBsb2NhbCBuYW1lc1xuXHRmb3IodmFyIGk9MDtpPG5vZGUuc3BlY2lmaWVycy5sZW5ndGg7aSsrKXtpZih0aGlzJDEua2V5d29yZHMudGVzdChub2RlLnNwZWNpZmllcnNbaV0ubG9jYWwubmFtZSl8fHRoaXMkMS5yZXNlcnZlZFdvcmRzLnRlc3Qobm9kZS5zcGVjaWZpZXJzW2ldLmxvY2FsLm5hbWUpKXt0aGlzJDEudW5leHBlY3RlZChub2RlLnNwZWNpZmllcnNbaV0ubG9jYWwuc3RhcnQpO319bm9kZS5zb3VyY2U9bnVsbDt9dGhpcy5zZW1pY29sb24oKTt9cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiRXhwb3J0TmFtZWREZWNsYXJhdGlvblwiKTt9O3BwJDEuc2hvdWxkUGFyc2VFeHBvcnRTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50eXBlLmtleXdvcmR8fHRoaXMuaXNMZXQoKTt9Oy8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG1vZHVsZSBleHBvcnRzLlxuXHRwcCQxLnBhcnNlRXhwb3J0U3BlY2lmaWVycz1mdW5jdGlvbigpe3ZhciB0aGlzJDE9dGhpczt2YXIgbm9kZXM9W10sZmlyc3Q9dHJ1ZTsvLyBleHBvcnQgeyB4LCB5IGFzIHogfSBbZnJvbSAnLi4uJ11cblx0dGhpcy5leHBlY3QodHQuYnJhY2VMKTt3aGlsZSghdGhpcy5lYXQodHQuYnJhY2VSKSl7aWYoIWZpcnN0KXt0aGlzJDEuZXhwZWN0KHR0LmNvbW1hKTtpZih0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR0LmJyYWNlUikpYnJlYWs7fWVsc2UgZmlyc3Q9ZmFsc2U7dmFyIG5vZGU9dGhpcyQxLnN0YXJ0Tm9kZSgpO25vZGUubG9jYWw9dGhpcyQxLnBhcnNlSWRlbnQodGhpcyQxLnR5cGU9PT10dC5fZGVmYXVsdCk7bm9kZS5leHBvcnRlZD10aGlzJDEuZWF0Q29udGV4dHVhbChcImFzXCIpP3RoaXMkMS5wYXJzZUlkZW50KHRydWUpOm5vZGUubG9jYWw7bm9kZXMucHVzaCh0aGlzJDEuZmluaXNoTm9kZShub2RlLFwiRXhwb3J0U3BlY2lmaWVyXCIpKTt9cmV0dXJuIG5vZGVzO307Ly8gUGFyc2VzIGltcG9ydCBkZWNsYXJhdGlvbi5cblx0cHAkMS5wYXJzZUltcG9ydD1mdW5jdGlvbihub2RlKXt0aGlzLm5leHQoKTsvLyBpbXBvcnQgJy4uLidcblx0aWYodGhpcy50eXBlPT09dHQuc3RyaW5nKXtub2RlLnNwZWNpZmllcnM9ZW1wdHk7bm9kZS5zb3VyY2U9dGhpcy5wYXJzZUV4cHJBdG9tKCk7fWVsc2V7bm9kZS5zcGVjaWZpZXJzPXRoaXMucGFyc2VJbXBvcnRTcGVjaWZpZXJzKCk7dGhpcy5leHBlY3RDb250ZXh0dWFsKFwiZnJvbVwiKTtub2RlLnNvdXJjZT10aGlzLnR5cGU9PT10dC5zdHJpbmc/dGhpcy5wYXJzZUV4cHJBdG9tKCk6dGhpcy51bmV4cGVjdGVkKCk7fXRoaXMuc2VtaWNvbG9uKCk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiSW1wb3J0RGVjbGFyYXRpb25cIik7fTsvLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBtb2R1bGUgaW1wb3J0cy5cblx0cHAkMS5wYXJzZUltcG9ydFNwZWNpZmllcnM9ZnVuY3Rpb24oKXt2YXIgdGhpcyQxPXRoaXM7dmFyIG5vZGVzPVtdLGZpcnN0PXRydWU7aWYodGhpcy50eXBlPT09dHQubmFtZSl7Ly8gaW1wb3J0IGRlZmF1bHRPYmosIHsgeCwgeSBhcyB6IH0gZnJvbSAnLi4uJ1xuXHR2YXIgbm9kZT10aGlzLnN0YXJ0Tm9kZSgpO25vZGUubG9jYWw9dGhpcy5wYXJzZUlkZW50KCk7dGhpcy5jaGVja0xWYWwobm9kZS5sb2NhbCx0cnVlKTtub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlLFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiKSk7aWYoIXRoaXMuZWF0KHR0LmNvbW1hKSlyZXR1cm4gbm9kZXM7fWlmKHRoaXMudHlwZT09PXR0LnN0YXIpe3ZhciBub2RlJDE9dGhpcy5zdGFydE5vZGUoKTt0aGlzLm5leHQoKTt0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJhc1wiKTtub2RlJDEubG9jYWw9dGhpcy5wYXJzZUlkZW50KCk7dGhpcy5jaGVja0xWYWwobm9kZSQxLmxvY2FsLHRydWUpO25vZGVzLnB1c2godGhpcy5maW5pc2hOb2RlKG5vZGUkMSxcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSk7cmV0dXJuIG5vZGVzO310aGlzLmV4cGVjdCh0dC5icmFjZUwpO3doaWxlKCF0aGlzLmVhdCh0dC5icmFjZVIpKXtpZighZmlyc3Qpe3RoaXMkMS5leHBlY3QodHQuY29tbWEpO2lmKHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEodHQuYnJhY2VSKSlicmVhazt9ZWxzZSBmaXJzdD1mYWxzZTt2YXIgbm9kZSQyPXRoaXMkMS5zdGFydE5vZGUoKTtub2RlJDIuaW1wb3J0ZWQ9dGhpcyQxLnBhcnNlSWRlbnQodHJ1ZSk7aWYodGhpcyQxLmVhdENvbnRleHR1YWwoXCJhc1wiKSl7bm9kZSQyLmxvY2FsPXRoaXMkMS5wYXJzZUlkZW50KCk7fWVsc2V7bm9kZSQyLmxvY2FsPW5vZGUkMi5pbXBvcnRlZDtpZih0aGlzJDEuaXNLZXl3b3JkKG5vZGUkMi5sb2NhbC5uYW1lKSl0aGlzJDEudW5leHBlY3RlZChub2RlJDIubG9jYWwuc3RhcnQpO2lmKHRoaXMkMS5yZXNlcnZlZFdvcmRzU3RyaWN0LnRlc3Qobm9kZSQyLmxvY2FsLm5hbWUpKXRoaXMkMS5yYWlzZShub2RlJDIubG9jYWwuc3RhcnQsXCJUaGUga2V5d29yZCAnXCIrbm9kZSQyLmxvY2FsLm5hbWUrXCInIGlzIHJlc2VydmVkXCIpO310aGlzJDEuY2hlY2tMVmFsKG5vZGUkMi5sb2NhbCx0cnVlKTtub2Rlcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMixcIkltcG9ydFNwZWNpZmllclwiKSk7fXJldHVybiBub2Rlczt9O3ZhciBwcCQyPVBhcnNlci5wcm90b3R5cGU7Ly8gQ29udmVydCBleGlzdGluZyBleHByZXNzaW9uIGF0b20gdG8gYXNzaWduYWJsZSBwYXR0ZXJuXG5cdC8vIGlmIHBvc3NpYmxlLlxuXHRwcCQyLnRvQXNzaWduYWJsZT1mdW5jdGlvbihub2RlLGlzQmluZGluZyl7dmFyIHRoaXMkMT10aGlzO2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49NiYmbm9kZSl7c3dpdGNoKG5vZGUudHlwZSl7Y2FzZVwiSWRlbnRpZmllclwiOmNhc2VcIk9iamVjdFBhdHRlcm5cIjpjYXNlXCJBcnJheVBhdHRlcm5cIjpicmVhaztjYXNlXCJPYmplY3RFeHByZXNzaW9uXCI6bm9kZS50eXBlPVwiT2JqZWN0UGF0dGVyblwiO2Zvcih2YXIgaT0wO2k8bm9kZS5wcm9wZXJ0aWVzLmxlbmd0aDtpKyspe3ZhciBwcm9wPW5vZGUucHJvcGVydGllc1tpXTtpZihwcm9wLmtpbmQhPT1cImluaXRcIil0aGlzJDEucmFpc2UocHJvcC5rZXkuc3RhcnQsXCJPYmplY3QgcGF0dGVybiBjYW4ndCBjb250YWluIGdldHRlciBvciBzZXR0ZXJcIik7dGhpcyQxLnRvQXNzaWduYWJsZShwcm9wLnZhbHVlLGlzQmluZGluZyk7fWJyZWFrO2Nhc2VcIkFycmF5RXhwcmVzc2lvblwiOm5vZGUudHlwZT1cIkFycmF5UGF0dGVyblwiO3RoaXMudG9Bc3NpZ25hYmxlTGlzdChub2RlLmVsZW1lbnRzLGlzQmluZGluZyk7YnJlYWs7Y2FzZVwiQXNzaWdubWVudEV4cHJlc3Npb25cIjppZihub2RlLm9wZXJhdG9yPT09XCI9XCIpe25vZGUudHlwZT1cIkFzc2lnbm1lbnRQYXR0ZXJuXCI7ZGVsZXRlIG5vZGUub3BlcmF0b3I7Ly8gZmFsbHMgdGhyb3VnaCB0byBBc3NpZ25tZW50UGF0dGVyblxuXHR9ZWxzZXt0aGlzLnJhaXNlKG5vZGUubGVmdC5lbmQsXCJPbmx5ICc9JyBvcGVyYXRvciBjYW4gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyBkZWZhdWx0IHZhbHVlLlwiKTticmVhazt9Y2FzZVwiQXNzaWdubWVudFBhdHRlcm5cIjppZihub2RlLnJpZ2h0LnR5cGU9PT1cIllpZWxkRXhwcmVzc2lvblwiKXRoaXMucmFpc2Uobm9kZS5yaWdodC5zdGFydCxcIllpZWxkIGV4cHJlc3Npb24gY2Fubm90IGJlIGEgZGVmYXVsdCB2YWx1ZVwiKTticmVhaztjYXNlXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOm5vZGUuZXhwcmVzc2lvbj10aGlzLnRvQXNzaWduYWJsZShub2RlLmV4cHJlc3Npb24saXNCaW5kaW5nKTticmVhaztjYXNlXCJNZW1iZXJFeHByZXNzaW9uXCI6aWYoIWlzQmluZGluZylicmVhaztkZWZhdWx0OnRoaXMucmFpc2Uobm9kZS5zdGFydCxcIkFzc2lnbmluZyB0byBydmFsdWVcIik7fX1yZXR1cm4gbm9kZTt9Oy8vIENvbnZlcnQgbGlzdCBvZiBleHByZXNzaW9uIGF0b21zIHRvIGJpbmRpbmcgbGlzdC5cblx0cHAkMi50b0Fzc2lnbmFibGVMaXN0PWZ1bmN0aW9uKGV4cHJMaXN0LGlzQmluZGluZyl7dmFyIHRoaXMkMT10aGlzO3ZhciBlbmQ9ZXhwckxpc3QubGVuZ3RoO2lmKGVuZCl7dmFyIGxhc3Q9ZXhwckxpc3RbZW5kLTFdO2lmKGxhc3QmJmxhc3QudHlwZT09XCJSZXN0RWxlbWVudFwiKXstLWVuZDt9ZWxzZSBpZihsYXN0JiZsYXN0LnR5cGU9PVwiU3ByZWFkRWxlbWVudFwiKXtsYXN0LnR5cGU9XCJSZXN0RWxlbWVudFwiO3ZhciBhcmc9bGFzdC5hcmd1bWVudDt0aGlzLnRvQXNzaWduYWJsZShhcmcsaXNCaW5kaW5nKTtpZihhcmcudHlwZSE9PVwiSWRlbnRpZmllclwiJiZhcmcudHlwZSE9PVwiTWVtYmVyRXhwcmVzc2lvblwiJiZhcmcudHlwZSE9PVwiQXJyYXlQYXR0ZXJuXCIpdGhpcy51bmV4cGVjdGVkKGFyZy5zdGFydCk7LS1lbmQ7fWlmKGlzQmluZGluZyYmbGFzdCYmbGFzdC50eXBlPT09XCJSZXN0RWxlbWVudFwiJiZsYXN0LmFyZ3VtZW50LnR5cGUhPT1cIklkZW50aWZpZXJcIil0aGlzLnVuZXhwZWN0ZWQobGFzdC5hcmd1bWVudC5zdGFydCk7fWZvcih2YXIgaT0wO2k8ZW5kO2krKyl7dmFyIGVsdD1leHByTGlzdFtpXTtpZihlbHQpdGhpcyQxLnRvQXNzaWduYWJsZShlbHQsaXNCaW5kaW5nKTt9cmV0dXJuIGV4cHJMaXN0O307Ly8gUGFyc2VzIHNwcmVhZCBlbGVtZW50LlxuXHRwcCQyLnBhcnNlU3ByZWFkPWZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpe3ZhciBub2RlPXRoaXMuc3RhcnROb2RlKCk7dGhpcy5uZXh0KCk7bm9kZS5hcmd1bWVudD10aGlzLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UscmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiU3ByZWFkRWxlbWVudFwiKTt9O3BwJDIucGFyc2VSZXN0PWZ1bmN0aW9uKGFsbG93Tm9uSWRlbnQpe3ZhciBub2RlPXRoaXMuc3RhcnROb2RlKCk7dGhpcy5uZXh0KCk7Ly8gUmVzdEVsZW1lbnQgaW5zaWRlIG9mIGEgZnVuY3Rpb24gcGFyYW1ldGVyIG11c3QgYmUgYW4gaWRlbnRpZmllclxuXHRpZihhbGxvd05vbklkZW50KW5vZGUuYXJndW1lbnQ9dGhpcy50eXBlPT09dHQubmFtZT90aGlzLnBhcnNlSWRlbnQoKTp0aGlzLnVuZXhwZWN0ZWQoKTtlbHNlIG5vZGUuYXJndW1lbnQ9dGhpcy50eXBlPT09dHQubmFtZXx8dGhpcy50eXBlPT09dHQuYnJhY2tldEw/dGhpcy5wYXJzZUJpbmRpbmdBdG9tKCk6dGhpcy51bmV4cGVjdGVkKCk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiUmVzdEVsZW1lbnRcIik7fTsvLyBQYXJzZXMgbHZhbHVlIChhc3NpZ25hYmxlKSBhdG9tLlxuXHRwcCQyLnBhcnNlQmluZGluZ0F0b209ZnVuY3Rpb24oKXtpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb248NilyZXR1cm4gdGhpcy5wYXJzZUlkZW50KCk7c3dpdGNoKHRoaXMudHlwZSl7Y2FzZSB0dC5uYW1lOnJldHVybiB0aGlzLnBhcnNlSWRlbnQoKTtjYXNlIHR0LmJyYWNrZXRMOnZhciBub2RlPXRoaXMuc3RhcnROb2RlKCk7dGhpcy5uZXh0KCk7bm9kZS5lbGVtZW50cz10aGlzLnBhcnNlQmluZGluZ0xpc3QodHQuYnJhY2tldFIsdHJ1ZSx0cnVlKTtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJBcnJheVBhdHRlcm5cIik7Y2FzZSB0dC5icmFjZUw6cmV0dXJuIHRoaXMucGFyc2VPYmoodHJ1ZSk7ZGVmYXVsdDp0aGlzLnVuZXhwZWN0ZWQoKTt9fTtwcCQyLnBhcnNlQmluZGluZ0xpc3Q9ZnVuY3Rpb24oY2xvc2UsYWxsb3dFbXB0eSxhbGxvd1RyYWlsaW5nQ29tbWEsYWxsb3dOb25JZGVudCl7dmFyIHRoaXMkMT10aGlzO3ZhciBlbHRzPVtdLGZpcnN0PXRydWU7d2hpbGUoIXRoaXMuZWF0KGNsb3NlKSl7aWYoZmlyc3QpZmlyc3Q9ZmFsc2U7ZWxzZSB0aGlzJDEuZXhwZWN0KHR0LmNvbW1hKTtpZihhbGxvd0VtcHR5JiZ0aGlzJDEudHlwZT09PXR0LmNvbW1hKXtlbHRzLnB1c2gobnVsbCk7fWVsc2UgaWYoYWxsb3dUcmFpbGluZ0NvbW1hJiZ0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSl7YnJlYWs7fWVsc2UgaWYodGhpcyQxLnR5cGU9PT10dC5lbGxpcHNpcyl7dmFyIHJlc3Q9dGhpcyQxLnBhcnNlUmVzdChhbGxvd05vbklkZW50KTt0aGlzJDEucGFyc2VCaW5kaW5nTGlzdEl0ZW0ocmVzdCk7ZWx0cy5wdXNoKHJlc3QpO2lmKHRoaXMkMS50eXBlPT09dHQuY29tbWEpdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCxcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTt0aGlzJDEuZXhwZWN0KGNsb3NlKTticmVhazt9ZWxzZXt2YXIgZWxlbT10aGlzJDEucGFyc2VNYXliZURlZmF1bHQodGhpcyQxLnN0YXJ0LHRoaXMkMS5zdGFydExvYyk7dGhpcyQxLnBhcnNlQmluZGluZ0xpc3RJdGVtKGVsZW0pO2VsdHMucHVzaChlbGVtKTt9fXJldHVybiBlbHRzO307cHAkMi5wYXJzZUJpbmRpbmdMaXN0SXRlbT1mdW5jdGlvbihwYXJhbSl7cmV0dXJuIHBhcmFtO307Ly8gUGFyc2VzIGFzc2lnbm1lbnQgcGF0dGVybiBhcm91bmQgZ2l2ZW4gYXRvbSBpZiBwb3NzaWJsZS5cblx0cHAkMi5wYXJzZU1heWJlRGVmYXVsdD1mdW5jdGlvbihzdGFydFBvcyxzdGFydExvYyxsZWZ0KXtsZWZ0PWxlZnR8fHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbjw2fHwhdGhpcy5lYXQodHQuZXEpKXJldHVybiBsZWZ0O3ZhciBub2RlPXRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3Msc3RhcnRMb2MpO25vZGUubGVmdD1sZWZ0O25vZGUucmlnaHQ9dGhpcy5wYXJzZU1heWJlQXNzaWduKCk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiQXNzaWdubWVudFBhdHRlcm5cIik7fTsvLyBWZXJpZnkgdGhhdCBhIG5vZGUgaXMgYW4gbHZhbCDigJQgc29tZXRoaW5nIHRoYXQgY2FuIGJlIGFzc2lnbmVkXG5cdC8vIHRvLlxuXHRwcCQyLmNoZWNrTFZhbD1mdW5jdGlvbihleHByLGlzQmluZGluZyxjaGVja0NsYXNoZXMpe3ZhciB0aGlzJDE9dGhpcztzd2l0Y2goZXhwci50eXBlKXtjYXNlXCJJZGVudGlmaWVyXCI6aWYodGhpcy5zdHJpY3QmJnRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQudGVzdChleHByLm5hbWUpKXRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LChpc0JpbmRpbmc/XCJCaW5kaW5nIFwiOlwiQXNzaWduaW5nIHRvIFwiKStleHByLm5hbWUrXCIgaW4gc3RyaWN0IG1vZGVcIik7aWYoY2hlY2tDbGFzaGVzKXtpZihoYXMoY2hlY2tDbGFzaGVzLGV4cHIubmFtZSkpdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsXCJBcmd1bWVudCBuYW1lIGNsYXNoXCIpO2NoZWNrQ2xhc2hlc1tleHByLm5hbWVdPXRydWU7fWJyZWFrO2Nhc2VcIk1lbWJlckV4cHJlc3Npb25cIjppZihpc0JpbmRpbmcpdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsKGlzQmluZGluZz9cIkJpbmRpbmdcIjpcIkFzc2lnbmluZyB0b1wiKStcIiBtZW1iZXIgZXhwcmVzc2lvblwiKTticmVhaztjYXNlXCJPYmplY3RQYXR0ZXJuXCI6Zm9yKHZhciBpPTA7aTxleHByLnByb3BlcnRpZXMubGVuZ3RoO2krKykvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki97dGhpcyQxLmNoZWNrTFZhbChleHByLnByb3BlcnRpZXNbaV0udmFsdWUsaXNCaW5kaW5nLGNoZWNrQ2xhc2hlcyk7fWJyZWFrO2Nhc2VcIkFycmF5UGF0dGVyblwiOmZvcih2YXIgaSQxPTA7aSQxPGV4cHIuZWxlbWVudHMubGVuZ3RoO2kkMSsrKXt2YXIgZWxlbT1leHByLmVsZW1lbnRzW2kkMV07aWYoZWxlbSl0aGlzJDEuY2hlY2tMVmFsKGVsZW0saXNCaW5kaW5nLGNoZWNrQ2xhc2hlcyk7fWJyZWFrO2Nhc2VcIkFzc2lnbm1lbnRQYXR0ZXJuXCI6dGhpcy5jaGVja0xWYWwoZXhwci5sZWZ0LGlzQmluZGluZyxjaGVja0NsYXNoZXMpO2JyZWFrO2Nhc2VcIlJlc3RFbGVtZW50XCI6dGhpcy5jaGVja0xWYWwoZXhwci5hcmd1bWVudCxpc0JpbmRpbmcsY2hlY2tDbGFzaGVzKTticmVhaztjYXNlXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOnRoaXMuY2hlY2tMVmFsKGV4cHIuZXhwcmVzc2lvbixpc0JpbmRpbmcsY2hlY2tDbGFzaGVzKTticmVhaztkZWZhdWx0OnRoaXMucmFpc2UoZXhwci5zdGFydCwoaXNCaW5kaW5nP1wiQmluZGluZ1wiOlwiQXNzaWduaW5nIHRvXCIpK1wiIHJ2YWx1ZVwiKTt9fTt2YXIgcHAkMz1QYXJzZXIucHJvdG90eXBlOy8vIENoZWNrIGlmIHByb3BlcnR5IG5hbWUgY2xhc2hlcyB3aXRoIGFscmVhZHkgYWRkZWQuXG5cdC8vIE9iamVjdC9jbGFzcyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGFyZSBub3QgYWxsb3dlZCB0byBjbGFzaCDigJRcblx0Ly8gZWl0aGVyIHdpdGggZWFjaCBvdGhlciBvciB3aXRoIGFuIGluaXQgcHJvcGVydHkg4oCUIGFuZCBpblxuXHQvLyBzdHJpY3QgbW9kZSwgaW5pdCBwcm9wZXJ0aWVzIGFyZSBhbHNvIG5vdCBhbGxvd2VkIHRvIGJlIHJlcGVhdGVkLlxuXHRwcCQzLmNoZWNrUHJvcENsYXNoPWZ1bmN0aW9uKHByb3AscHJvcEhhc2gpe2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49NiYmKHByb3AuY29tcHV0ZWR8fHByb3AubWV0aG9kfHxwcm9wLnNob3J0aGFuZCkpcmV0dXJuO3ZhciBrZXk9cHJvcC5rZXk7dmFyIG5hbWU7c3dpdGNoKGtleS50eXBlKXtjYXNlXCJJZGVudGlmaWVyXCI6bmFtZT1rZXkubmFtZTticmVhaztjYXNlXCJMaXRlcmFsXCI6bmFtZT1TdHJpbmcoa2V5LnZhbHVlKTticmVhaztkZWZhdWx0OnJldHVybjt9dmFyIGtpbmQ9cHJvcC5raW5kO2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49Nil7aWYobmFtZT09PVwiX19wcm90b19fXCImJmtpbmQ9PT1cImluaXRcIil7aWYocHJvcEhhc2gucHJvdG8pdGhpcy5yYWlzZVJlY292ZXJhYmxlKGtleS5zdGFydCxcIlJlZGVmaW5pdGlvbiBvZiBfX3Byb3RvX18gcHJvcGVydHlcIik7cHJvcEhhc2gucHJvdG89dHJ1ZTt9cmV0dXJuO31uYW1lPVwiJFwiK25hbWU7dmFyIG90aGVyPXByb3BIYXNoW25hbWVdO2lmKG90aGVyKXt2YXIgaXNHZXRTZXQ9a2luZCE9PVwiaW5pdFwiO2lmKCh0aGlzLnN0cmljdHx8aXNHZXRTZXQpJiZvdGhlcltraW5kXXx8IShpc0dldFNldF5vdGhlci5pbml0KSl0aGlzLnJhaXNlUmVjb3ZlcmFibGUoa2V5LnN0YXJ0LFwiUmVkZWZpbml0aW9uIG9mIHByb3BlcnR5XCIpO31lbHNle290aGVyPXByb3BIYXNoW25hbWVdPXtpbml0OmZhbHNlLGdldDpmYWxzZSxzZXQ6ZmFsc2V9O31vdGhlcltraW5kXT10cnVlO307Ly8gIyMjIEV4cHJlc3Npb24gcGFyc2luZ1xuXHQvLyBUaGVzZSBuZXN0LCBmcm9tIHRoZSBtb3N0IGdlbmVyYWwgZXhwcmVzc2lvbiB0eXBlIGF0IHRoZSB0b3AgdG9cblx0Ly8gJ2F0b21pYycsIG5vbmRpdmlzaWJsZSBleHByZXNzaW9uIHR5cGVzIGF0IHRoZSBib3R0b20uIE1vc3Qgb2Zcblx0Ly8gdGhlIGZ1bmN0aW9ucyB3aWxsIHNpbXBseSBsZXQgdGhlIGZ1bmN0aW9uKHMpIGJlbG93IHRoZW0gcGFyc2UsXG5cdC8vIGFuZCwgKmlmKiB0aGUgc3ludGFjdGljIGNvbnN0cnVjdCB0aGV5IGhhbmRsZSBpcyBwcmVzZW50LCB3cmFwXG5cdC8vIHRoZSBBU1Qgbm9kZSB0aGF0IHRoZSBpbm5lciBwYXJzZXIgZ2F2ZSB0aGVtIGluIGFub3RoZXIgbm9kZS5cblx0Ly8gUGFyc2UgYSBmdWxsIGV4cHJlc3Npb24uIFRoZSBvcHRpb25hbCBhcmd1bWVudHMgYXJlIHVzZWQgdG9cblx0Ly8gZm9yYmlkIHRoZSBgaW5gIG9wZXJhdG9yIChpbiBmb3IgbG9vcHMgaW5pdGFsaXphdGlvbiBleHByZXNzaW9ucylcblx0Ly8gYW5kIHByb3ZpZGUgcmVmZXJlbmNlIGZvciBzdG9yaW5nICc9JyBvcGVyYXRvciBpbnNpZGUgc2hvcnRoYW5kXG5cdC8vIHByb3BlcnR5IGFzc2lnbm1lbnQgaW4gY29udGV4dHMgd2hlcmUgYm90aCBvYmplY3QgZXhwcmVzc2lvblxuXHQvLyBhbmQgb2JqZWN0IHBhdHRlcm4gbWlnaHQgYXBwZWFyIChzbyBpdCdzIHBvc3NpYmxlIHRvIHJhaXNlXG5cdC8vIGRlbGF5ZWQgc3ludGF4IGVycm9yIGF0IGNvcnJlY3QgcG9zaXRpb24pLlxuXHRwcCQzLnBhcnNlRXhwcmVzc2lvbj1mdW5jdGlvbihub0luLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpe3ZhciB0aGlzJDE9dGhpczt2YXIgc3RhcnRQb3M9dGhpcy5zdGFydCxzdGFydExvYz10aGlzLnN0YXJ0TG9jO3ZhciBleHByPXRoaXMucGFyc2VNYXliZUFzc2lnbihub0luLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO2lmKHRoaXMudHlwZT09PXR0LmNvbW1hKXt2YXIgbm9kZT10aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLHN0YXJ0TG9jKTtub2RlLmV4cHJlc3Npb25zPVtleHByXTt3aGlsZSh0aGlzLmVhdCh0dC5jb21tYSkpLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCove25vZGUuZXhwcmVzc2lvbnMucHVzaCh0aGlzJDEucGFyc2VNYXliZUFzc2lnbihub0luLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKTt9cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiU2VxdWVuY2VFeHByZXNzaW9uXCIpO31yZXR1cm4gZXhwcjt9Oy8vIFBhcnNlIGFuIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi4gVGhpcyBpbmNsdWRlcyBhcHBsaWNhdGlvbnMgb2Zcblx0Ly8gb3BlcmF0b3JzIGxpa2UgYCs9YC5cblx0cHAkMy5wYXJzZU1heWJlQXNzaWduPWZ1bmN0aW9uKG5vSW4scmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyxhZnRlckxlZnRQYXJzZSl7aWYodGhpcy5pbkdlbmVyYXRvciYmdGhpcy5pc0NvbnRleHR1YWwoXCJ5aWVsZFwiKSlyZXR1cm4gdGhpcy5wYXJzZVlpZWxkKCk7dmFyIG93bkRlc3RydWN0dXJpbmdFcnJvcnM9ZmFsc2U7aWYoIXJlZkRlc3RydWN0dXJpbmdFcnJvcnMpe3JlZkRlc3RydWN0dXJpbmdFcnJvcnM9bmV3IERlc3RydWN0dXJpbmdFcnJvcnMoKTtvd25EZXN0cnVjdHVyaW5nRXJyb3JzPXRydWU7fXZhciBzdGFydFBvcz10aGlzLnN0YXJ0LHN0YXJ0TG9jPXRoaXMuc3RhcnRMb2M7aWYodGhpcy50eXBlPT10dC5wYXJlbkx8fHRoaXMudHlwZT09dHQubmFtZSl0aGlzLnBvdGVudGlhbEFycm93QXQ9dGhpcy5zdGFydDt2YXIgbGVmdD10aGlzLnBhcnNlTWF5YmVDb25kaXRpb25hbChub0luLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO2lmKGFmdGVyTGVmdFBhcnNlKWxlZnQ9YWZ0ZXJMZWZ0UGFyc2UuY2FsbCh0aGlzLGxlZnQsc3RhcnRQb3Msc3RhcnRMb2MpO2lmKHRoaXMudHlwZS5pc0Fzc2lnbil7dGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyx0cnVlKTtpZighb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycylEZXN0cnVjdHVyaW5nRXJyb3JzLmNhbGwocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyk7bm9kZS5vcGVyYXRvcj10aGlzLnZhbHVlO25vZGUubGVmdD10aGlzLnR5cGU9PT10dC5lcT90aGlzLnRvQXNzaWduYWJsZShsZWZ0KTpsZWZ0O3JlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduPTA7Ly8gcmVzZXQgYmVjYXVzZSBzaG9ydGhhbmQgZGVmYXVsdCB3YXMgdXNlZCBjb3JyZWN0bHlcblx0dGhpcy5jaGVja0xWYWwobGVmdCk7dGhpcy5uZXh0KCk7bm9kZS5yaWdodD10aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9Jbik7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiQXNzaWdubWVudEV4cHJlc3Npb25cIik7fWVsc2V7aWYob3duRGVzdHJ1Y3R1cmluZ0Vycm9ycyl0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLHRydWUpO31yZXR1cm4gbGVmdDt9Oy8vIFBhcnNlIGEgdGVybmFyeSBjb25kaXRpb25hbCAoYD86YCkgb3BlcmF0b3IuXG5cdHBwJDMucGFyc2VNYXliZUNvbmRpdGlvbmFsPWZ1bmN0aW9uKG5vSW4scmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyl7dmFyIHN0YXJ0UG9zPXRoaXMuc3RhcnQsc3RhcnRMb2M9dGhpcy5zdGFydExvYzt2YXIgZXhwcj10aGlzLnBhcnNlRXhwck9wcyhub0luLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO2lmKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKXJldHVybiBleHByO2lmKHRoaXMuZWF0KHR0LnF1ZXN0aW9uKSl7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyk7bm9kZS50ZXN0PWV4cHI7bm9kZS5jb25zZXF1ZW50PXRoaXMucGFyc2VNYXliZUFzc2lnbigpO3RoaXMuZXhwZWN0KHR0LmNvbG9uKTtub2RlLmFsdGVybmF0ZT10aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9Jbik7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIpO31yZXR1cm4gZXhwcjt9Oy8vIFN0YXJ0IHRoZSBwcmVjZWRlbmNlIHBhcnNlci5cblx0cHAkMy5wYXJzZUV4cHJPcHM9ZnVuY3Rpb24obm9JbixyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKXt2YXIgc3RhcnRQb3M9dGhpcy5zdGFydCxzdGFydExvYz10aGlzLnN0YXJ0TG9jO3ZhciBleHByPXRoaXMucGFyc2VNYXliZVVuYXJ5KHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsZmFsc2UpO2lmKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKXJldHVybiBleHByO3JldHVybiB0aGlzLnBhcnNlRXhwck9wKGV4cHIsc3RhcnRQb3Msc3RhcnRMb2MsLTEsbm9Jbik7fTsvLyBQYXJzZSBiaW5hcnkgb3BlcmF0b3JzIHdpdGggdGhlIG9wZXJhdG9yIHByZWNlZGVuY2UgcGFyc2luZ1xuXHQvLyBhbGdvcml0aG0uIGBsZWZ0YCBpcyB0aGUgbGVmdC1oYW5kIHNpZGUgb2YgdGhlIG9wZXJhdG9yLlxuXHQvLyBgbWluUHJlY2AgcHJvdmlkZXMgY29udGV4dCB0aGF0IGFsbG93cyB0aGUgZnVuY3Rpb24gdG8gc3RvcCBhbmRcblx0Ly8gZGVmZXIgZnVydGhlciBwYXJzZXIgdG8gb25lIG9mIGl0cyBjYWxsZXJzIHdoZW4gaXQgZW5jb3VudGVycyBhblxuXHQvLyBvcGVyYXRvciB0aGF0IGhhcyBhIGxvd2VyIHByZWNlZGVuY2UgdGhhbiB0aGUgc2V0IGl0IGlzIHBhcnNpbmcuXG5cdHBwJDMucGFyc2VFeHByT3A9ZnVuY3Rpb24obGVmdCxsZWZ0U3RhcnRQb3MsbGVmdFN0YXJ0TG9jLG1pblByZWMsbm9Jbil7dmFyIHByZWM9dGhpcy50eXBlLmJpbm9wO2lmKHByZWMhPW51bGwmJighbm9Jbnx8dGhpcy50eXBlIT09dHQuX2luKSl7aWYocHJlYz5taW5QcmVjKXt2YXIgbG9naWNhbD10aGlzLnR5cGU9PT10dC5sb2dpY2FsT1J8fHRoaXMudHlwZT09PXR0LmxvZ2ljYWxBTkQ7dmFyIG9wPXRoaXMudmFsdWU7dGhpcy5uZXh0KCk7dmFyIHN0YXJ0UG9zPXRoaXMuc3RhcnQsc3RhcnRMb2M9dGhpcy5zdGFydExvYzt2YXIgcmlnaHQ9dGhpcy5wYXJzZUV4cHJPcCh0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLGZhbHNlKSxzdGFydFBvcyxzdGFydExvYyxwcmVjLG5vSW4pO3ZhciBub2RlPXRoaXMuYnVpbGRCaW5hcnkobGVmdFN0YXJ0UG9zLGxlZnRTdGFydExvYyxsZWZ0LHJpZ2h0LG9wLGxvZ2ljYWwpO3JldHVybiB0aGlzLnBhcnNlRXhwck9wKG5vZGUsbGVmdFN0YXJ0UG9zLGxlZnRTdGFydExvYyxtaW5QcmVjLG5vSW4pO319cmV0dXJuIGxlZnQ7fTtwcCQzLmJ1aWxkQmluYXJ5PWZ1bmN0aW9uKHN0YXJ0UG9zLHN0YXJ0TG9jLGxlZnQscmlnaHQsb3AsbG9naWNhbCl7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyk7bm9kZS5sZWZ0PWxlZnQ7bm9kZS5vcGVyYXRvcj1vcDtub2RlLnJpZ2h0PXJpZ2h0O3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxsb2dpY2FsP1wiTG9naWNhbEV4cHJlc3Npb25cIjpcIkJpbmFyeUV4cHJlc3Npb25cIik7fTsvLyBQYXJzZSB1bmFyeSBvcGVyYXRvcnMsIGJvdGggcHJlZml4IGFuZCBwb3N0Zml4LlxuXHRwcCQzLnBhcnNlTWF5YmVVbmFyeT1mdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLHNhd1VuYXJ5KXt2YXIgdGhpcyQxPXRoaXM7dmFyIHN0YXJ0UG9zPXRoaXMuc3RhcnQsc3RhcnRMb2M9dGhpcy5zdGFydExvYyxleHByO2lmKHRoaXMudHlwZS5wcmVmaXgpe3ZhciBub2RlPXRoaXMuc3RhcnROb2RlKCksdXBkYXRlPXRoaXMudHlwZT09PXR0LmluY0RlYztub2RlLm9wZXJhdG9yPXRoaXMudmFsdWU7bm9kZS5wcmVmaXg9dHJ1ZTt0aGlzLm5leHQoKTtub2RlLmFyZ3VtZW50PXRoaXMucGFyc2VNYXliZVVuYXJ5KG51bGwsdHJ1ZSk7dGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyx0cnVlKTtpZih1cGRhdGUpdGhpcy5jaGVja0xWYWwobm9kZS5hcmd1bWVudCk7ZWxzZSBpZih0aGlzLnN0cmljdCYmbm9kZS5vcGVyYXRvcj09PVwiZGVsZXRlXCImJm5vZGUuYXJndW1lbnQudHlwZT09PVwiSWRlbnRpZmllclwiKXRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnN0YXJ0LFwiRGVsZXRpbmcgbG9jYWwgdmFyaWFibGUgaW4gc3RyaWN0IG1vZGVcIik7ZWxzZSBzYXdVbmFyeT10cnVlO2V4cHI9dGhpcy5maW5pc2hOb2RlKG5vZGUsdXBkYXRlP1wiVXBkYXRlRXhwcmVzc2lvblwiOlwiVW5hcnlFeHByZXNzaW9uXCIpO31lbHNle2V4cHI9dGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO2lmKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKXJldHVybiBleHByO3doaWxlKHRoaXMudHlwZS5wb3N0Zml4JiYhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSl7dmFyIG5vZGUkMT10aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3Msc3RhcnRMb2MpO25vZGUkMS5vcGVyYXRvcj10aGlzJDEudmFsdWU7bm9kZSQxLnByZWZpeD1mYWxzZTtub2RlJDEuYXJndW1lbnQ9ZXhwcjt0aGlzJDEuY2hlY2tMVmFsKGV4cHIpO3RoaXMkMS5uZXh0KCk7ZXhwcj10aGlzJDEuZmluaXNoTm9kZShub2RlJDEsXCJVcGRhdGVFeHByZXNzaW9uXCIpO319aWYoIXNhd1VuYXJ5JiZ0aGlzLmVhdCh0dC5zdGFyc3RhcikpcmV0dXJuIHRoaXMuYnVpbGRCaW5hcnkoc3RhcnRQb3Msc3RhcnRMb2MsZXhwcix0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLGZhbHNlKSxcIioqXCIsZmFsc2UpO2Vsc2UgcmV0dXJuIGV4cHI7fTsvLyBQYXJzZSBjYWxsLCBkb3QsIGFuZCBgW11gLXN1YnNjcmlwdCBleHByZXNzaW9ucy5cblx0cHAkMy5wYXJzZUV4cHJTdWJzY3JpcHRzPWZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpe3ZhciBzdGFydFBvcz10aGlzLnN0YXJ0LHN0YXJ0TG9jPXRoaXMuc3RhcnRMb2M7dmFyIGV4cHI9dGhpcy5wYXJzZUV4cHJBdG9tKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO3ZhciBza2lwQXJyb3dTdWJzY3JpcHRzPWV4cHIudHlwZT09PVwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiYmdGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tTdGFydCx0aGlzLmxhc3RUb2tFbmQpIT09XCIpXCI7aWYodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyl8fHNraXBBcnJvd1N1YnNjcmlwdHMpcmV0dXJuIGV4cHI7cmV0dXJuIHRoaXMucGFyc2VTdWJzY3JpcHRzKGV4cHIsc3RhcnRQb3Msc3RhcnRMb2MpO307cHAkMy5wYXJzZVN1YnNjcmlwdHM9ZnVuY3Rpb24oYmFzZSxzdGFydFBvcyxzdGFydExvYyxub0NhbGxzKXt2YXIgdGhpcyQxPXRoaXM7Zm9yKDs7KXtpZih0aGlzJDEuZWF0KHR0LmRvdCkpe3ZhciBub2RlPXRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyk7bm9kZS5vYmplY3Q9YmFzZTtub2RlLnByb3BlcnR5PXRoaXMkMS5wYXJzZUlkZW50KHRydWUpO25vZGUuY29tcHV0ZWQ9ZmFsc2U7YmFzZT10aGlzJDEuZmluaXNoTm9kZShub2RlLFwiTWVtYmVyRXhwcmVzc2lvblwiKTt9ZWxzZSBpZih0aGlzJDEuZWF0KHR0LmJyYWNrZXRMKSl7dmFyIG5vZGUkMT10aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3Msc3RhcnRMb2MpO25vZGUkMS5vYmplY3Q9YmFzZTtub2RlJDEucHJvcGVydHk9dGhpcyQxLnBhcnNlRXhwcmVzc2lvbigpO25vZGUkMS5jb21wdXRlZD10cnVlO3RoaXMkMS5leHBlY3QodHQuYnJhY2tldFIpO2Jhc2U9dGhpcyQxLmZpbmlzaE5vZGUobm9kZSQxLFwiTWVtYmVyRXhwcmVzc2lvblwiKTt9ZWxzZSBpZighbm9DYWxscyYmdGhpcyQxLmVhdCh0dC5wYXJlbkwpKXt2YXIgbm9kZSQyPXRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyk7bm9kZSQyLmNhbGxlZT1iYXNlO25vZGUkMi5hcmd1bWVudHM9dGhpcyQxLnBhcnNlRXhwckxpc3QodHQucGFyZW5SLGZhbHNlKTtiYXNlPXRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMixcIkNhbGxFeHByZXNzaW9uXCIpO31lbHNlIGlmKHRoaXMkMS50eXBlPT09dHQuYmFja1F1b3RlKXt2YXIgbm9kZSQzPXRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyk7bm9kZSQzLnRhZz1iYXNlO25vZGUkMy5xdWFzaT10aGlzJDEucGFyc2VUZW1wbGF0ZSgpO2Jhc2U9dGhpcyQxLmZpbmlzaE5vZGUobm9kZSQzLFwiVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uXCIpO31lbHNle3JldHVybiBiYXNlO319fTsvLyBQYXJzZSBhbiBhdG9taWMgZXhwcmVzc2lvbiDigJQgZWl0aGVyIGEgc2luZ2xlIHRva2VuIHRoYXQgaXMgYW5cblx0Ly8gZXhwcmVzc2lvbiwgYW4gZXhwcmVzc2lvbiBzdGFydGVkIGJ5IGEga2V5d29yZCBsaWtlIGBmdW5jdGlvbmAgb3Jcblx0Ly8gYG5ld2AsIG9yIGFuIGV4cHJlc3Npb24gd3JhcHBlZCBpbiBwdW5jdHVhdGlvbiBsaWtlIGAoKWAsIGBbXWAsXG5cdC8vIG9yIGB7fWAuXG5cdHBwJDMucGFyc2VFeHByQXRvbT1mdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKXt2YXIgbm9kZSxjYW5CZUFycm93PXRoaXMucG90ZW50aWFsQXJyb3dBdD09dGhpcy5zdGFydDtzd2l0Y2godGhpcy50eXBlKXtjYXNlIHR0Ll9zdXBlcjppZighdGhpcy5pbkZ1bmN0aW9uKXRoaXMucmFpc2UodGhpcy5zdGFydCxcIidzdXBlcicgb3V0c2lkZSBvZiBmdW5jdGlvbiBvciBjbGFzc1wiKTtjYXNlIHR0Ll90aGlzOnZhciB0eXBlPXRoaXMudHlwZT09PXR0Ll90aGlzP1wiVGhpc0V4cHJlc3Npb25cIjpcIlN1cGVyXCI7bm9kZT10aGlzLnN0YXJ0Tm9kZSgpO3RoaXMubmV4dCgpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSx0eXBlKTtjYXNlIHR0Lm5hbWU6dmFyIHN0YXJ0UG9zPXRoaXMuc3RhcnQsc3RhcnRMb2M9dGhpcy5zdGFydExvYzt2YXIgaWQ9dGhpcy5wYXJzZUlkZW50KHRoaXMudHlwZSE9PXR0Lm5hbWUpO2lmKGNhbkJlQXJyb3cmJiF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpJiZ0aGlzLmVhdCh0dC5hcnJvdykpcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcyxzdGFydExvYyksW2lkXSk7cmV0dXJuIGlkO2Nhc2UgdHQucmVnZXhwOnZhciB2YWx1ZT10aGlzLnZhbHVlO25vZGU9dGhpcy5wYXJzZUxpdGVyYWwodmFsdWUudmFsdWUpO25vZGUucmVnZXg9e3BhdHRlcm46dmFsdWUucGF0dGVybixmbGFnczp2YWx1ZS5mbGFnc307cmV0dXJuIG5vZGU7Y2FzZSB0dC5udW06Y2FzZSB0dC5zdHJpbmc6cmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKHRoaXMudmFsdWUpO2Nhc2UgdHQuX251bGw6Y2FzZSB0dC5fdHJ1ZTpjYXNlIHR0Ll9mYWxzZTpub2RlPXRoaXMuc3RhcnROb2RlKCk7bm9kZS52YWx1ZT10aGlzLnR5cGU9PT10dC5fbnVsbD9udWxsOnRoaXMudHlwZT09PXR0Ll90cnVlO25vZGUucmF3PXRoaXMudHlwZS5rZXl3b3JkO3RoaXMubmV4dCgpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIkxpdGVyYWxcIik7Y2FzZSB0dC5wYXJlbkw6cmV0dXJuIHRoaXMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbihjYW5CZUFycm93KTtjYXNlIHR0LmJyYWNrZXRMOm5vZGU9dGhpcy5zdGFydE5vZGUoKTt0aGlzLm5leHQoKTtub2RlLmVsZW1lbnRzPXRoaXMucGFyc2VFeHByTGlzdCh0dC5icmFja2V0Uix0cnVlLHRydWUscmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiQXJyYXlFeHByZXNzaW9uXCIpO2Nhc2UgdHQuYnJhY2VMOnJldHVybiB0aGlzLnBhcnNlT2JqKGZhbHNlLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO2Nhc2UgdHQuX2Z1bmN0aW9uOm5vZGU9dGhpcy5zdGFydE5vZGUoKTt0aGlzLm5leHQoKTtyZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKG5vZGUsZmFsc2UpO2Nhc2UgdHQuX2NsYXNzOnJldHVybiB0aGlzLnBhcnNlQ2xhc3ModGhpcy5zdGFydE5vZGUoKSxmYWxzZSk7Y2FzZSB0dC5fbmV3OnJldHVybiB0aGlzLnBhcnNlTmV3KCk7Y2FzZSB0dC5iYWNrUXVvdGU6cmV0dXJuIHRoaXMucGFyc2VUZW1wbGF0ZSgpO2RlZmF1bHQ6dGhpcy51bmV4cGVjdGVkKCk7fX07cHAkMy5wYXJzZUxpdGVyYWw9ZnVuY3Rpb24odmFsdWUpe3ZhciBub2RlPXRoaXMuc3RhcnROb2RlKCk7bm9kZS52YWx1ZT12YWx1ZTtub2RlLnJhdz10aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsdGhpcy5lbmQpO3RoaXMubmV4dCgpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIkxpdGVyYWxcIik7fTtwcCQzLnBhcnNlUGFyZW5FeHByZXNzaW9uPWZ1bmN0aW9uKCl7dGhpcy5leHBlY3QodHQucGFyZW5MKTt2YXIgdmFsPXRoaXMucGFyc2VFeHByZXNzaW9uKCk7dGhpcy5leHBlY3QodHQucGFyZW5SKTtyZXR1cm4gdmFsO307cHAkMy5wYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uPWZ1bmN0aW9uKGNhbkJlQXJyb3cpe3ZhciB0aGlzJDE9dGhpczt2YXIgc3RhcnRQb3M9dGhpcy5zdGFydCxzdGFydExvYz10aGlzLnN0YXJ0TG9jLHZhbDtpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYpe3RoaXMubmV4dCgpO3ZhciBpbm5lclN0YXJ0UG9zPXRoaXMuc3RhcnQsaW5uZXJTdGFydExvYz10aGlzLnN0YXJ0TG9jO3ZhciBleHByTGlzdD1bXSxmaXJzdD10cnVlO3ZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzPW5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzKCksc3ByZWFkU3RhcnQsaW5uZXJQYXJlblN0YXJ0O3doaWxlKHRoaXMudHlwZSE9PXR0LnBhcmVuUil7Zmlyc3Q/Zmlyc3Q9ZmFsc2U6dGhpcyQxLmV4cGVjdCh0dC5jb21tYSk7aWYodGhpcyQxLnR5cGU9PT10dC5lbGxpcHNpcyl7c3ByZWFkU3RhcnQ9dGhpcyQxLnN0YXJ0O2V4cHJMaXN0LnB1c2godGhpcyQxLnBhcnNlUGFyZW5JdGVtKHRoaXMkMS5wYXJzZVJlc3QoKSkpO2JyZWFrO31lbHNle2lmKHRoaXMkMS50eXBlPT09dHQucGFyZW5MJiYhaW5uZXJQYXJlblN0YXJ0KXtpbm5lclBhcmVuU3RhcnQ9dGhpcyQxLnN0YXJ0O31leHByTGlzdC5wdXNoKHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGZhbHNlLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsdGhpcyQxLnBhcnNlUGFyZW5JdGVtKSk7fX12YXIgaW5uZXJFbmRQb3M9dGhpcy5zdGFydCxpbm5lckVuZExvYz10aGlzLnN0YXJ0TG9jO3RoaXMuZXhwZWN0KHR0LnBhcmVuUik7aWYoY2FuQmVBcnJvdyYmIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkmJnRoaXMuZWF0KHR0LmFycm93KSl7dGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyx0cnVlKTtpZihpbm5lclBhcmVuU3RhcnQpdGhpcy51bmV4cGVjdGVkKGlubmVyUGFyZW5TdGFydCk7cmV0dXJuIHRoaXMucGFyc2VQYXJlbkFycm93TGlzdChzdGFydFBvcyxzdGFydExvYyxleHByTGlzdCk7fWlmKCFleHByTGlzdC5sZW5ndGgpdGhpcy51bmV4cGVjdGVkKHRoaXMubGFzdFRva1N0YXJ0KTtpZihzcHJlYWRTdGFydCl0aGlzLnVuZXhwZWN0ZWQoc3ByZWFkU3RhcnQpO3RoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsdHJ1ZSk7aWYoZXhwckxpc3QubGVuZ3RoPjEpe3ZhbD10aGlzLnN0YXJ0Tm9kZUF0KGlubmVyU3RhcnRQb3MsaW5uZXJTdGFydExvYyk7dmFsLmV4cHJlc3Npb25zPWV4cHJMaXN0O3RoaXMuZmluaXNoTm9kZUF0KHZhbCxcIlNlcXVlbmNlRXhwcmVzc2lvblwiLGlubmVyRW5kUG9zLGlubmVyRW5kTG9jKTt9ZWxzZXt2YWw9ZXhwckxpc3RbMF07fX1lbHNle3ZhbD10aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7fWlmKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZVBhcmVucyl7dmFyIHBhcj10aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLHN0YXJ0TG9jKTtwYXIuZXhwcmVzc2lvbj12YWw7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShwYXIsXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiKTt9ZWxzZXtyZXR1cm4gdmFsO319O3BwJDMucGFyc2VQYXJlbkl0ZW09ZnVuY3Rpb24oaXRlbSl7cmV0dXJuIGl0ZW07fTtwcCQzLnBhcnNlUGFyZW5BcnJvd0xpc3Q9ZnVuY3Rpb24oc3RhcnRQb3Msc3RhcnRMb2MsZXhwckxpc3Qpe3JldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3Msc3RhcnRMb2MpLGV4cHJMaXN0KTt9Oy8vIE5ldydzIHByZWNlZGVuY2UgaXMgc2xpZ2h0bHkgdHJpY2t5LiBJdCBtdXN0IGFsbG93IGl0cyBhcmd1bWVudCB0b1xuXHQvLyBiZSBhIGBbXWAgb3IgZG90IHN1YnNjcmlwdCBleHByZXNzaW9uLCBidXQgbm90IGEgY2FsbCDigJQgYXQgbGVhc3QsXG5cdC8vIG5vdCB3aXRob3V0IHdyYXBwaW5nIGl0IGluIHBhcmVudGhlc2VzLiBUaHVzLCBpdCB1c2VzIHRoZSBub0NhbGxzXG5cdC8vIGFyZ3VtZW50IHRvIHBhcnNlU3Vic2NyaXB0cyB0byBwcmV2ZW50IGl0IGZyb20gY29uc3VtaW5nIHRoZVxuXHQvLyBhcmd1bWVudCBsaXN0LlxuXHR2YXIgZW1wdHkkMT1bXTtwcCQzLnBhcnNlTmV3PWZ1bmN0aW9uKCl7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGUoKTt2YXIgbWV0YT10aGlzLnBhcnNlSWRlbnQodHJ1ZSk7aWYodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02JiZ0aGlzLmVhdCh0dC5kb3QpKXtub2RlLm1ldGE9bWV0YTtub2RlLnByb3BlcnR5PXRoaXMucGFyc2VJZGVudCh0cnVlKTtpZihub2RlLnByb3BlcnR5Lm5hbWUhPT1cInRhcmdldFwiKXRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnByb3BlcnR5LnN0YXJ0LFwiVGhlIG9ubHkgdmFsaWQgbWV0YSBwcm9wZXJ0eSBmb3IgbmV3IGlzIG5ldy50YXJnZXRcIik7aWYoIXRoaXMuaW5GdW5jdGlvbil0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCxcIm5ldy50YXJnZXQgY2FuIG9ubHkgYmUgdXNlZCBpbiBmdW5jdGlvbnNcIik7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiTWV0YVByb3BlcnR5XCIpO312YXIgc3RhcnRQb3M9dGhpcy5zdGFydCxzdGFydExvYz10aGlzLnN0YXJ0TG9jO25vZGUuY2FsbGVlPXRoaXMucGFyc2VTdWJzY3JpcHRzKHRoaXMucGFyc2VFeHByQXRvbSgpLHN0YXJ0UG9zLHN0YXJ0TG9jLHRydWUpO2lmKHRoaXMuZWF0KHR0LnBhcmVuTCkpbm9kZS5hcmd1bWVudHM9dGhpcy5wYXJzZUV4cHJMaXN0KHR0LnBhcmVuUixmYWxzZSk7ZWxzZSBub2RlLmFyZ3VtZW50cz1lbXB0eSQxO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIk5ld0V4cHJlc3Npb25cIik7fTsvLyBQYXJzZSB0ZW1wbGF0ZSBleHByZXNzaW9uLlxuXHRwcCQzLnBhcnNlVGVtcGxhdGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIGVsZW09dGhpcy5zdGFydE5vZGUoKTtlbGVtLnZhbHVlPXtyYXc6dGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LHRoaXMuZW5kKS5yZXBsYWNlKC9cXHJcXG4/L2csJ1xcbicpLGNvb2tlZDp0aGlzLnZhbHVlfTt0aGlzLm5leHQoKTtlbGVtLnRhaWw9dGhpcy50eXBlPT09dHQuYmFja1F1b3RlO3JldHVybiB0aGlzLmZpbmlzaE5vZGUoZWxlbSxcIlRlbXBsYXRlRWxlbWVudFwiKTt9O3BwJDMucGFyc2VUZW1wbGF0ZT1mdW5jdGlvbigpe3ZhciB0aGlzJDE9dGhpczt2YXIgbm9kZT10aGlzLnN0YXJ0Tm9kZSgpO3RoaXMubmV4dCgpO25vZGUuZXhwcmVzc2lvbnM9W107dmFyIGN1ckVsdD10aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KCk7bm9kZS5xdWFzaXM9W2N1ckVsdF07d2hpbGUoIWN1ckVsdC50YWlsKXt0aGlzJDEuZXhwZWN0KHR0LmRvbGxhckJyYWNlTCk7bm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMkMS5wYXJzZUV4cHJlc3Npb24oKSk7dGhpcyQxLmV4cGVjdCh0dC5icmFjZVIpO25vZGUucXVhc2lzLnB1c2goY3VyRWx0PXRoaXMkMS5wYXJzZVRlbXBsYXRlRWxlbWVudCgpKTt9dGhpcy5uZXh0KCk7cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiVGVtcGxhdGVMaXRlcmFsXCIpO307Ly8gUGFyc2UgYW4gb2JqZWN0IGxpdGVyYWwgb3IgYmluZGluZyBwYXR0ZXJuLlxuXHRwcCQzLnBhcnNlT2JqPWZ1bmN0aW9uKGlzUGF0dGVybixyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKXt2YXIgdGhpcyQxPXRoaXM7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGUoKSxmaXJzdD10cnVlLHByb3BIYXNoPXt9O25vZGUucHJvcGVydGllcz1bXTt0aGlzLm5leHQoKTt3aGlsZSghdGhpcy5lYXQodHQuYnJhY2VSKSl7aWYoIWZpcnN0KXt0aGlzJDEuZXhwZWN0KHR0LmNvbW1hKTtpZih0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR0LmJyYWNlUikpYnJlYWs7fWVsc2UgZmlyc3Q9ZmFsc2U7dmFyIHByb3A9dGhpcyQxLnN0YXJ0Tm9kZSgpLGlzR2VuZXJhdG9yLHN0YXJ0UG9zLHN0YXJ0TG9jO2lmKHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uPj02KXtwcm9wLm1ldGhvZD1mYWxzZTtwcm9wLnNob3J0aGFuZD1mYWxzZTtpZihpc1BhdHRlcm58fHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpe3N0YXJ0UG9zPXRoaXMkMS5zdGFydDtzdGFydExvYz10aGlzJDEuc3RhcnRMb2M7fWlmKCFpc1BhdHRlcm4paXNHZW5lcmF0b3I9dGhpcyQxLmVhdCh0dC5zdGFyKTt9dGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKHByb3ApO3RoaXMkMS5wYXJzZVByb3BlcnR5VmFsdWUocHJvcCxpc1BhdHRlcm4saXNHZW5lcmF0b3Isc3RhcnRQb3Msc3RhcnRMb2MscmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7dGhpcyQxLmNoZWNrUHJvcENsYXNoKHByb3AscHJvcEhhc2gpO25vZGUucHJvcGVydGllcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKHByb3AsXCJQcm9wZXJ0eVwiKSk7fXJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxpc1BhdHRlcm4/XCJPYmplY3RQYXR0ZXJuXCI6XCJPYmplY3RFeHByZXNzaW9uXCIpO307cHAkMy5wYXJzZVByb3BlcnR5VmFsdWU9ZnVuY3Rpb24ocHJvcCxpc1BhdHRlcm4saXNHZW5lcmF0b3Isc3RhcnRQb3Msc3RhcnRMb2MscmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyl7aWYodGhpcy5lYXQodHQuY29sb24pKXtwcm9wLnZhbHVlPWlzUGF0dGVybj90aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHRoaXMuc3RhcnQsdGhpcy5zdGFydExvYyk6dGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO3Byb3Aua2luZD1cImluaXRcIjt9ZWxzZSBpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYmJnRoaXMudHlwZT09PXR0LnBhcmVuTCl7aWYoaXNQYXR0ZXJuKXRoaXMudW5leHBlY3RlZCgpO3Byb3Aua2luZD1cImluaXRcIjtwcm9wLm1ldGhvZD10cnVlO3Byb3AudmFsdWU9dGhpcy5wYXJzZU1ldGhvZChpc0dlbmVyYXRvcik7fWVsc2UgaWYodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj01JiYhcHJvcC5jb21wdXRlZCYmcHJvcC5rZXkudHlwZT09PVwiSWRlbnRpZmllclwiJiYocHJvcC5rZXkubmFtZT09PVwiZ2V0XCJ8fHByb3Aua2V5Lm5hbWU9PT1cInNldFwiKSYmdGhpcy50eXBlIT10dC5jb21tYSYmdGhpcy50eXBlIT10dC5icmFjZVIpe2lmKGlzR2VuZXJhdG9yfHxpc1BhdHRlcm4pdGhpcy51bmV4cGVjdGVkKCk7cHJvcC5raW5kPXByb3Aua2V5Lm5hbWU7dGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wKTtwcm9wLnZhbHVlPXRoaXMucGFyc2VNZXRob2QoZmFsc2UpO3ZhciBwYXJhbUNvdW50PXByb3Aua2luZD09PVwiZ2V0XCI/MDoxO2lmKHByb3AudmFsdWUucGFyYW1zLmxlbmd0aCE9PXBhcmFtQ291bnQpe3ZhciBzdGFydD1wcm9wLnZhbHVlLnN0YXJ0O2lmKHByb3Aua2luZD09PVwiZ2V0XCIpdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LFwiZ2V0dGVyIHNob3VsZCBoYXZlIG5vIHBhcmFtc1wiKTtlbHNlIHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCxcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTt9aWYocHJvcC5raW5kPT09XCJzZXRcIiYmcHJvcC52YWx1ZS5wYXJhbXNbMF0udHlwZT09PVwiUmVzdEVsZW1lbnRcIil0aGlzLnJhaXNlUmVjb3ZlcmFibGUocHJvcC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsXCJTZXR0ZXIgY2Fubm90IHVzZSByZXN0IHBhcmFtc1wiKTt9ZWxzZSBpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYmJiFwcm9wLmNvbXB1dGVkJiZwcm9wLmtleS50eXBlPT09XCJJZGVudGlmaWVyXCIpe2lmKHRoaXMua2V5d29yZHMudGVzdChwcm9wLmtleS5uYW1lKXx8KHRoaXMuc3RyaWN0P3RoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQ6dGhpcy5yZXNlcnZlZFdvcmRzKS50ZXN0KHByb3Aua2V5Lm5hbWUpfHx0aGlzLmluR2VuZXJhdG9yJiZwcm9wLmtleS5uYW1lPT1cInlpZWxkXCIpdGhpcy5yYWlzZVJlY292ZXJhYmxlKHByb3Aua2V5LnN0YXJ0LFwiJ1wiK3Byb3Aua2V5Lm5hbWUrXCInIGNhbiBub3QgYmUgdXNlZCBhcyBzaG9ydGhhbmQgcHJvcGVydHlcIik7cHJvcC5raW5kPVwiaW5pdFwiO2lmKGlzUGF0dGVybil7cHJvcC52YWx1ZT10aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHN0YXJ0UG9zLHN0YXJ0TG9jLHByb3Aua2V5KTt9ZWxzZSBpZih0aGlzLnR5cGU9PT10dC5lcSYmcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyl7aWYoIXJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduKXJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduPXRoaXMuc3RhcnQ7cHJvcC52YWx1ZT10aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHN0YXJ0UG9zLHN0YXJ0TG9jLHByb3Aua2V5KTt9ZWxzZXtwcm9wLnZhbHVlPXByb3Aua2V5O31wcm9wLnNob3J0aGFuZD10cnVlO31lbHNlIHRoaXMudW5leHBlY3RlZCgpO307cHAkMy5wYXJzZVByb3BlcnR5TmFtZT1mdW5jdGlvbihwcm9wKXtpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYpe2lmKHRoaXMuZWF0KHR0LmJyYWNrZXRMKSl7cHJvcC5jb21wdXRlZD10cnVlO3Byb3Aua2V5PXRoaXMucGFyc2VNYXliZUFzc2lnbigpO3RoaXMuZXhwZWN0KHR0LmJyYWNrZXRSKTtyZXR1cm4gcHJvcC5rZXk7fWVsc2V7cHJvcC5jb21wdXRlZD1mYWxzZTt9fXJldHVybiBwcm9wLmtleT10aGlzLnR5cGU9PT10dC5udW18fHRoaXMudHlwZT09PXR0LnN0cmluZz90aGlzLnBhcnNlRXhwckF0b20oKTp0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7fTsvLyBJbml0aWFsaXplIGVtcHR5IGZ1bmN0aW9uIG5vZGUuXG5cdHBwJDMuaW5pdEZ1bmN0aW9uPWZ1bmN0aW9uKG5vZGUpe25vZGUuaWQ9bnVsbDtpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYpe25vZGUuZ2VuZXJhdG9yPWZhbHNlO25vZGUuZXhwcmVzc2lvbj1mYWxzZTt9fTsvLyBQYXJzZSBvYmplY3Qgb3IgY2xhc3MgbWV0aG9kLlxuXHRwcCQzLnBhcnNlTWV0aG9kPWZ1bmN0aW9uKGlzR2VuZXJhdG9yKXt2YXIgbm9kZT10aGlzLnN0YXJ0Tm9kZSgpLG9sZEluR2VuPXRoaXMuaW5HZW5lcmF0b3I7dGhpcy5pbkdlbmVyYXRvcj1pc0dlbmVyYXRvcjt0aGlzLmluaXRGdW5jdGlvbihub2RlKTt0aGlzLmV4cGVjdCh0dC5wYXJlbkwpO25vZGUucGFyYW1zPXRoaXMucGFyc2VCaW5kaW5nTGlzdCh0dC5wYXJlblIsZmFsc2UsZmFsc2UpO2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49Nilub2RlLmdlbmVyYXRvcj1pc0dlbmVyYXRvcjt0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsZmFsc2UpO3RoaXMuaW5HZW5lcmF0b3I9b2xkSW5HZW47cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiRnVuY3Rpb25FeHByZXNzaW9uXCIpO307Ly8gUGFyc2UgYXJyb3cgZnVuY3Rpb24gZXhwcmVzc2lvbiB3aXRoIGdpdmVuIHBhcmFtZXRlcnMuXG5cdHBwJDMucGFyc2VBcnJvd0V4cHJlc3Npb249ZnVuY3Rpb24obm9kZSxwYXJhbXMpe3ZhciBvbGRJbkdlbj10aGlzLmluR2VuZXJhdG9yO3RoaXMuaW5HZW5lcmF0b3I9ZmFsc2U7dGhpcy5pbml0RnVuY3Rpb24obm9kZSk7bm9kZS5wYXJhbXM9dGhpcy50b0Fzc2lnbmFibGVMaXN0KHBhcmFtcyx0cnVlKTt0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsdHJ1ZSk7dGhpcy5pbkdlbmVyYXRvcj1vbGRJbkdlbjtyZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKTt9Oy8vIFBhcnNlIGZ1bmN0aW9uIGJvZHkgYW5kIGNoZWNrIHBhcmFtZXRlcnMuXG5cdHBwJDMucGFyc2VGdW5jdGlvbkJvZHk9ZnVuY3Rpb24obm9kZSxpc0Fycm93RnVuY3Rpb24pe3ZhciBpc0V4cHJlc3Npb249aXNBcnJvd0Z1bmN0aW9uJiZ0aGlzLnR5cGUhPT10dC5icmFjZUw7aWYoaXNFeHByZXNzaW9uKXtub2RlLmJvZHk9dGhpcy5wYXJzZU1heWJlQXNzaWduKCk7bm9kZS5leHByZXNzaW9uPXRydWU7fWVsc2V7Ly8gU3RhcnQgYSBuZXcgc2NvcGUgd2l0aCByZWdhcmQgdG8gbGFiZWxzIGFuZCB0aGUgYGluRnVuY3Rpb25gXG5cdC8vIGZsYWcgKHJlc3RvcmUgdGhlbSB0byB0aGVpciBvbGQgdmFsdWUgYWZ0ZXJ3YXJkcykuXG5cdHZhciBvbGRJbkZ1bmM9dGhpcy5pbkZ1bmN0aW9uLG9sZExhYmVscz10aGlzLmxhYmVsczt0aGlzLmluRnVuY3Rpb249dHJ1ZTt0aGlzLmxhYmVscz1bXTtub2RlLmJvZHk9dGhpcy5wYXJzZUJsb2NrKHRydWUpO25vZGUuZXhwcmVzc2lvbj1mYWxzZTt0aGlzLmluRnVuY3Rpb249b2xkSW5GdW5jO3RoaXMubGFiZWxzPW9sZExhYmVsczt9Ly8gSWYgdGhpcyBpcyBhIHN0cmljdCBtb2RlIGZ1bmN0aW9uLCB2ZXJpZnkgdGhhdCBhcmd1bWVudCBuYW1lc1xuXHQvLyBhcmUgbm90IHJlcGVhdGVkLCBhbmQgaXQgZG9lcyBub3QgdHJ5IHRvIGJpbmQgdGhlIHdvcmRzIGBldmFsYFxuXHQvLyBvciBgYXJndW1lbnRzYC5cblx0dmFyIHVzZVN0cmljdD0haXNFeHByZXNzaW9uJiZub2RlLmJvZHkuYm9keS5sZW5ndGgmJnRoaXMuaXNVc2VTdHJpY3Qobm9kZS5ib2R5LmJvZHlbMF0pP25vZGUuYm9keS5ib2R5WzBdOm51bGw7aWYodGhpcy5zdHJpY3R8fHVzZVN0cmljdCl7dmFyIG9sZFN0cmljdD10aGlzLnN0cmljdDt0aGlzLnN0cmljdD10cnVlO2lmKG5vZGUuaWQpdGhpcy5jaGVja0xWYWwobm9kZS5pZCx0cnVlKTt0aGlzLmNoZWNrUGFyYW1zKG5vZGUsdXNlU3RyaWN0KTt0aGlzLnN0cmljdD1vbGRTdHJpY3Q7fWVsc2UgaWYoaXNBcnJvd0Z1bmN0aW9uKXt0aGlzLmNoZWNrUGFyYW1zKG5vZGUsdXNlU3RyaWN0KTt9fTsvLyBDaGVja3MgZnVuY3Rpb24gcGFyYW1zIGZvciB2YXJpb3VzIGRpc2FsbG93ZWQgcGF0dGVybnMgc3VjaCBhcyB1c2luZyBcImV2YWxcIlxuXHQvLyBvciBcImFyZ3VtZW50c1wiIGFuZCBkdXBsaWNhdGUgcGFyYW1ldGVycy5cblx0cHAkMy5jaGVja1BhcmFtcz1mdW5jdGlvbihub2RlLHVzZVN0cmljdCl7dmFyIHRoaXMkMT10aGlzO3ZhciBuYW1lSGFzaD17fTtmb3IodmFyIGk9MDtpPG5vZGUucGFyYW1zLmxlbmd0aDtpKyspe2lmKHVzZVN0cmljdCYmdGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24+PTcmJm5vZGUucGFyYW1zW2ldLnR5cGUhPT1cIklkZW50aWZpZXJcIil0aGlzJDEucmFpc2VSZWNvdmVyYWJsZSh1c2VTdHJpY3Quc3RhcnQsXCJJbGxlZ2FsICd1c2Ugc3RyaWN0JyBkaXJlY3RpdmUgaW4gZnVuY3Rpb24gd2l0aCBub24tc2ltcGxlIHBhcmFtZXRlciBsaXN0XCIpO3RoaXMkMS5jaGVja0xWYWwobm9kZS5wYXJhbXNbaV0sdHJ1ZSxuYW1lSGFzaCk7fX07Ly8gUGFyc2VzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZXhwcmVzc2lvbnMsIGFuZCByZXR1cm5zIHRoZW0gYXNcblx0Ly8gYW4gYXJyYXkuIGBjbG9zZWAgaXMgdGhlIHRva2VuIHR5cGUgdGhhdCBlbmRzIHRoZSBsaXN0LCBhbmRcblx0Ly8gYGFsbG93RW1wdHlgIGNhbiBiZSB0dXJuZWQgb24gdG8gYWxsb3cgc3Vic2VxdWVudCBjb21tYXMgd2l0aFxuXHQvLyBub3RoaW5nIGluIGJldHdlZW4gdGhlbSB0byBiZSBwYXJzZWQgYXMgYG51bGxgICh3aGljaCBpcyBuZWVkZWRcblx0Ly8gZm9yIGFycmF5IGxpdGVyYWxzKS5cblx0cHAkMy5wYXJzZUV4cHJMaXN0PWZ1bmN0aW9uKGNsb3NlLGFsbG93VHJhaWxpbmdDb21tYSxhbGxvd0VtcHR5LHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpe3ZhciB0aGlzJDE9dGhpczt2YXIgZWx0cz1bXSxmaXJzdD10cnVlO3doaWxlKCF0aGlzLmVhdChjbG9zZSkpe2lmKCFmaXJzdCl7dGhpcyQxLmV4cGVjdCh0dC5jb21tYSk7aWYoYWxsb3dUcmFpbGluZ0NvbW1hJiZ0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSlicmVhazt9ZWxzZSBmaXJzdD1mYWxzZTt2YXIgZWx0O2lmKGFsbG93RW1wdHkmJnRoaXMkMS50eXBlPT09dHQuY29tbWEpZWx0PW51bGw7ZWxzZSBpZih0aGlzJDEudHlwZT09PXR0LmVsbGlwc2lzKXtlbHQ9dGhpcyQxLnBhcnNlU3ByZWFkKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO2lmKHRoaXMkMS50eXBlPT09dHQuY29tbWEmJnJlZkRlc3RydWN0dXJpbmdFcnJvcnMmJiFyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEpe3JlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYT10aGlzJDEubGFzdFRva1N0YXJ0O319ZWxzZSBlbHQ9dGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UscmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7ZWx0cy5wdXNoKGVsdCk7fXJldHVybiBlbHRzO307Ly8gUGFyc2UgdGhlIG5leHQgdG9rZW4gYXMgYW4gaWRlbnRpZmllci4gSWYgYGxpYmVyYWxgIGlzIHRydWUgKHVzZWRcblx0Ly8gd2hlbiBwYXJzaW5nIHByb3BlcnRpZXMpLCBpdCB3aWxsIGFsc28gY29udmVydCBrZXl3b3JkcyBpbnRvXG5cdC8vIGlkZW50aWZpZXJzLlxuXHRwcCQzLnBhcnNlSWRlbnQ9ZnVuY3Rpb24obGliZXJhbCl7dmFyIG5vZGU9dGhpcy5zdGFydE5vZGUoKTtpZihsaWJlcmFsJiZ0aGlzLm9wdGlvbnMuYWxsb3dSZXNlcnZlZD09XCJuZXZlclwiKWxpYmVyYWw9ZmFsc2U7aWYodGhpcy50eXBlPT09dHQubmFtZSl7aWYoIWxpYmVyYWwmJih0aGlzLnN0cmljdD90aGlzLnJlc2VydmVkV29yZHNTdHJpY3Q6dGhpcy5yZXNlcnZlZFdvcmRzKS50ZXN0KHRoaXMudmFsdWUpJiYodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02fHx0aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsdGhpcy5lbmQpLmluZGV4T2YoXCJcXFxcXCIpPT0tMSkpdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsXCJUaGUga2V5d29yZCAnXCIrdGhpcy52YWx1ZStcIicgaXMgcmVzZXJ2ZWRcIik7aWYoIWxpYmVyYWwmJnRoaXMuaW5HZW5lcmF0b3ImJnRoaXMudmFsdWU9PT1cInlpZWxkXCIpdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsXCJDYW4gbm90IHVzZSAneWllbGQnIGFzIGlkZW50aWZpZXIgaW5zaWRlIGEgZ2VuZXJhdG9yXCIpO25vZGUubmFtZT10aGlzLnZhbHVlO31lbHNlIGlmKGxpYmVyYWwmJnRoaXMudHlwZS5rZXl3b3JkKXtub2RlLm5hbWU9dGhpcy50eXBlLmtleXdvcmQ7fWVsc2V7dGhpcy51bmV4cGVjdGVkKCk7fXRoaXMubmV4dCgpO3JldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSxcIklkZW50aWZpZXJcIik7fTsvLyBQYXJzZXMgeWllbGQgZXhwcmVzc2lvbiBpbnNpZGUgZ2VuZXJhdG9yLlxuXHRwcCQzLnBhcnNlWWllbGQ9ZnVuY3Rpb24oKXt2YXIgbm9kZT10aGlzLnN0YXJ0Tm9kZSgpO3RoaXMubmV4dCgpO2lmKHRoaXMudHlwZT09dHQuc2VtaXx8dGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKXx8dGhpcy50eXBlIT10dC5zdGFyJiYhdGhpcy50eXBlLnN0YXJ0c0V4cHIpe25vZGUuZGVsZWdhdGU9ZmFsc2U7bm9kZS5hcmd1bWVudD1udWxsO31lbHNle25vZGUuZGVsZWdhdGU9dGhpcy5lYXQodHQuc3Rhcik7bm9kZS5hcmd1bWVudD10aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTt9cmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLFwiWWllbGRFeHByZXNzaW9uXCIpO307dmFyIHBwJDQ9UGFyc2VyLnByb3RvdHlwZTsvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmFpc2UgZXhjZXB0aW9ucyBvbiBwYXJzZSBlcnJvcnMuIEl0XG5cdC8vIHRha2VzIGFuIG9mZnNldCBpbnRlZ2VyIChpbnRvIHRoZSBjdXJyZW50IGBpbnB1dGApIHRvIGluZGljYXRlXG5cdC8vIHRoZSBsb2NhdGlvbiBvZiB0aGUgZXJyb3IsIGF0dGFjaGVzIHRoZSBwb3NpdGlvbiB0byB0aGUgZW5kXG5cdC8vIG9mIHRoZSBlcnJvciBtZXNzYWdlLCBhbmQgdGhlbiByYWlzZXMgYSBgU3ludGF4RXJyb3JgIHdpdGggdGhhdFxuXHQvLyBtZXNzYWdlLlxuXHRwcCQ0LnJhaXNlPWZ1bmN0aW9uKHBvcyxtZXNzYWdlKXt2YXIgbG9jPWdldExpbmVJbmZvKHRoaXMuaW5wdXQscG9zKTttZXNzYWdlKz1cIiAoXCIrbG9jLmxpbmUrXCI6XCIrbG9jLmNvbHVtbitcIilcIjt2YXIgZXJyPW5ldyBTeW50YXhFcnJvcihtZXNzYWdlKTtlcnIucG9zPXBvcztlcnIubG9jPWxvYztlcnIucmFpc2VkQXQ9dGhpcy5wb3M7dGhyb3cgZXJyO307cHAkNC5yYWlzZVJlY292ZXJhYmxlPXBwJDQucmFpc2U7cHAkNC5jdXJQb3NpdGlvbj1mdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpe3JldHVybiBuZXcgUG9zaXRpb24odGhpcy5jdXJMaW5lLHRoaXMucG9zLXRoaXMubGluZVN0YXJ0KTt9fTt2YXIgTm9kZT1mdW5jdGlvbiBOb2RlKHBhcnNlcixwb3MsbG9jKXt0aGlzLnR5cGU9XCJcIjt0aGlzLnN0YXJ0PXBvczt0aGlzLmVuZD0wO2lmKHBhcnNlci5vcHRpb25zLmxvY2F0aW9ucyl0aGlzLmxvYz1uZXcgU291cmNlTG9jYXRpb24ocGFyc2VyLGxvYyk7aWYocGFyc2VyLm9wdGlvbnMuZGlyZWN0U291cmNlRmlsZSl0aGlzLnNvdXJjZUZpbGU9cGFyc2VyLm9wdGlvbnMuZGlyZWN0U291cmNlRmlsZTtpZihwYXJzZXIub3B0aW9ucy5yYW5nZXMpdGhpcy5yYW5nZT1bcG9zLDBdO307Ly8gU3RhcnQgYW4gQVNUIG5vZGUsIGF0dGFjaGluZyBhIHN0YXJ0IG9mZnNldC5cblx0dmFyIHBwJDU9UGFyc2VyLnByb3RvdHlwZTtwcCQ1LnN0YXJ0Tm9kZT1mdW5jdGlvbigpe3JldHVybiBuZXcgTm9kZSh0aGlzLHRoaXMuc3RhcnQsdGhpcy5zdGFydExvYyk7fTtwcCQ1LnN0YXJ0Tm9kZUF0PWZ1bmN0aW9uKHBvcyxsb2Mpe3JldHVybiBuZXcgTm9kZSh0aGlzLHBvcyxsb2MpO307Ly8gRmluaXNoIGFuIEFTVCBub2RlLCBhZGRpbmcgYHR5cGVgIGFuZCBgZW5kYCBwcm9wZXJ0aWVzLlxuXHRmdW5jdGlvbiBmaW5pc2hOb2RlQXQobm9kZSx0eXBlLHBvcyxsb2Mpe25vZGUudHlwZT10eXBlO25vZGUuZW5kPXBvcztpZih0aGlzLm9wdGlvbnMubG9jYXRpb25zKW5vZGUubG9jLmVuZD1sb2M7aWYodGhpcy5vcHRpb25zLnJhbmdlcylub2RlLnJhbmdlWzFdPXBvcztyZXR1cm4gbm9kZTt9cHAkNS5maW5pc2hOb2RlPWZ1bmN0aW9uKG5vZGUsdHlwZSl7cmV0dXJuIGZpbmlzaE5vZGVBdC5jYWxsKHRoaXMsbm9kZSx0eXBlLHRoaXMubGFzdFRva0VuZCx0aGlzLmxhc3RUb2tFbmRMb2MpO307Ly8gRmluaXNoIG5vZGUgYXQgZ2l2ZW4gcG9zaXRpb25cblx0cHAkNS5maW5pc2hOb2RlQXQ9ZnVuY3Rpb24obm9kZSx0eXBlLHBvcyxsb2Mpe3JldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLG5vZGUsdHlwZSxwb3MsbG9jKTt9O3ZhciBUb2tDb250ZXh0PWZ1bmN0aW9uIFRva0NvbnRleHQodG9rZW4saXNFeHByLHByZXNlcnZlU3BhY2Usb3ZlcnJpZGUpe3RoaXMudG9rZW49dG9rZW47dGhpcy5pc0V4cHI9ISFpc0V4cHI7dGhpcy5wcmVzZXJ2ZVNwYWNlPSEhcHJlc2VydmVTcGFjZTt0aGlzLm92ZXJyaWRlPW92ZXJyaWRlO307dmFyIHR5cGVzPXtiX3N0YXQ6bmV3IFRva0NvbnRleHQoXCJ7XCIsZmFsc2UpLGJfZXhwcjpuZXcgVG9rQ29udGV4dChcIntcIix0cnVlKSxiX3RtcGw6bmV3IFRva0NvbnRleHQoXCIke1wiLHRydWUpLHBfc3RhdDpuZXcgVG9rQ29udGV4dChcIihcIixmYWxzZSkscF9leHByOm5ldyBUb2tDb250ZXh0KFwiKFwiLHRydWUpLHFfdG1wbDpuZXcgVG9rQ29udGV4dChcImBcIix0cnVlLHRydWUsZnVuY3Rpb24ocCl7cmV0dXJuIHAucmVhZFRtcGxUb2tlbigpO30pLGZfZXhwcjpuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsdHJ1ZSl9O3ZhciBwcCQ2PVBhcnNlci5wcm90b3R5cGU7cHAkNi5pbml0aWFsQ29udGV4dD1mdW5jdGlvbigpe3JldHVyblt0eXBlcy5iX3N0YXRdO307cHAkNi5icmFjZUlzQmxvY2s9ZnVuY3Rpb24ocHJldlR5cGUpe2lmKHByZXZUeXBlPT09dHQuY29sb24pe3ZhciBwYXJlbnQ9dGhpcy5jdXJDb250ZXh0KCk7aWYocGFyZW50PT09dHlwZXMuYl9zdGF0fHxwYXJlbnQ9PT10eXBlcy5iX2V4cHIpcmV0dXJuIXBhcmVudC5pc0V4cHI7fWlmKHByZXZUeXBlPT09dHQuX3JldHVybilyZXR1cm4gbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsdGhpcy5zdGFydCkpO2lmKHByZXZUeXBlPT09dHQuX2Vsc2V8fHByZXZUeXBlPT09dHQuc2VtaXx8cHJldlR5cGU9PT10dC5lb2Z8fHByZXZUeXBlPT09dHQucGFyZW5SKXJldHVybiB0cnVlO2lmKHByZXZUeXBlPT10dC5icmFjZUwpcmV0dXJuIHRoaXMuY3VyQ29udGV4dCgpPT09dHlwZXMuYl9zdGF0O3JldHVybiF0aGlzLmV4cHJBbGxvd2VkO307cHAkNi51cGRhdGVDb250ZXh0PWZ1bmN0aW9uKHByZXZUeXBlKXt2YXIgdXBkYXRlLHR5cGU9dGhpcy50eXBlO2lmKHR5cGUua2V5d29yZCYmcHJldlR5cGU9PXR0LmRvdCl0aGlzLmV4cHJBbGxvd2VkPWZhbHNlO2Vsc2UgaWYodXBkYXRlPXR5cGUudXBkYXRlQ29udGV4dCl1cGRhdGUuY2FsbCh0aGlzLHByZXZUeXBlKTtlbHNlIHRoaXMuZXhwckFsbG93ZWQ9dHlwZS5iZWZvcmVFeHByO307Ly8gVG9rZW4tc3BlY2lmaWMgY29udGV4dCB1cGRhdGUgY29kZVxuXHR0dC5wYXJlblIudXBkYXRlQ29udGV4dD10dC5icmFjZVIudXBkYXRlQ29udGV4dD1mdW5jdGlvbigpe2lmKHRoaXMuY29udGV4dC5sZW5ndGg9PTEpe3RoaXMuZXhwckFsbG93ZWQ9dHJ1ZTtyZXR1cm47fXZhciBvdXQ9dGhpcy5jb250ZXh0LnBvcCgpO2lmKG91dD09PXR5cGVzLmJfc3RhdCYmdGhpcy5jdXJDb250ZXh0KCk9PT10eXBlcy5mX2V4cHIpe3RoaXMuY29udGV4dC5wb3AoKTt0aGlzLmV4cHJBbGxvd2VkPWZhbHNlO31lbHNlIGlmKG91dD09PXR5cGVzLmJfdG1wbCl7dGhpcy5leHByQWxsb3dlZD10cnVlO31lbHNle3RoaXMuZXhwckFsbG93ZWQ9IW91dC5pc0V4cHI7fX07dHQuYnJhY2VMLnVwZGF0ZUNvbnRleHQ9ZnVuY3Rpb24ocHJldlR5cGUpe3RoaXMuY29udGV4dC5wdXNoKHRoaXMuYnJhY2VJc0Jsb2NrKHByZXZUeXBlKT90eXBlcy5iX3N0YXQ6dHlwZXMuYl9leHByKTt0aGlzLmV4cHJBbGxvd2VkPXRydWU7fTt0dC5kb2xsYXJCcmFjZUwudXBkYXRlQ29udGV4dD1mdW5jdGlvbigpe3RoaXMuY29udGV4dC5wdXNoKHR5cGVzLmJfdG1wbCk7dGhpcy5leHByQWxsb3dlZD10cnVlO307dHQucGFyZW5MLnVwZGF0ZUNvbnRleHQ9ZnVuY3Rpb24ocHJldlR5cGUpe3ZhciBzdGF0ZW1lbnRQYXJlbnM9cHJldlR5cGU9PT10dC5faWZ8fHByZXZUeXBlPT09dHQuX2Zvcnx8cHJldlR5cGU9PT10dC5fd2l0aHx8cHJldlR5cGU9PT10dC5fd2hpbGU7dGhpcy5jb250ZXh0LnB1c2goc3RhdGVtZW50UGFyZW5zP3R5cGVzLnBfc3RhdDp0eXBlcy5wX2V4cHIpO3RoaXMuZXhwckFsbG93ZWQ9dHJ1ZTt9O3R0LmluY0RlYy51cGRhdGVDb250ZXh0PWZ1bmN0aW9uKCl7Ly8gdG9rRXhwckFsbG93ZWQgc3RheXMgdW5jaGFuZ2VkXG5cdH07dHQuX2Z1bmN0aW9uLnVwZGF0ZUNvbnRleHQ9ZnVuY3Rpb24ocHJldlR5cGUpe2lmKHByZXZUeXBlLmJlZm9yZUV4cHImJnByZXZUeXBlIT09dHQuc2VtaSYmcHJldlR5cGUhPT10dC5fZWxzZSYmISgocHJldlR5cGU9PT10dC5jb2xvbnx8cHJldlR5cGU9PT10dC5icmFjZUwpJiZ0aGlzLmN1ckNvbnRleHQoKT09PXR5cGVzLmJfc3RhdCkpdGhpcy5jb250ZXh0LnB1c2godHlwZXMuZl9leHByKTt0aGlzLmV4cHJBbGxvd2VkPWZhbHNlO307dHQuYmFja1F1b3RlLnVwZGF0ZUNvbnRleHQ9ZnVuY3Rpb24oKXtpZih0aGlzLmN1ckNvbnRleHQoKT09PXR5cGVzLnFfdG1wbCl0aGlzLmNvbnRleHQucG9wKCk7ZWxzZSB0aGlzLmNvbnRleHQucHVzaCh0eXBlcy5xX3RtcGwpO3RoaXMuZXhwckFsbG93ZWQ9ZmFsc2U7fTsvLyBPYmplY3QgdHlwZSB1c2VkIHRvIHJlcHJlc2VudCB0b2tlbnMuIE5vdGUgdGhhdCBub3JtYWxseSwgdG9rZW5zXG5cdC8vIHNpbXBseSBleGlzdCBhcyBwcm9wZXJ0aWVzIG9uIHRoZSBwYXJzZXIgb2JqZWN0LiBUaGlzIGlzIG9ubHlcblx0Ly8gdXNlZCBmb3IgdGhlIG9uVG9rZW4gY2FsbGJhY2sgYW5kIHRoZSBleHRlcm5hbCB0b2tlbml6ZXIuXG5cdHZhciBUb2tlbj1mdW5jdGlvbiBUb2tlbihwKXt0aGlzLnR5cGU9cC50eXBlO3RoaXMudmFsdWU9cC52YWx1ZTt0aGlzLnN0YXJ0PXAuc3RhcnQ7dGhpcy5lbmQ9cC5lbmQ7aWYocC5vcHRpb25zLmxvY2F0aW9ucyl0aGlzLmxvYz1uZXcgU291cmNlTG9jYXRpb24ocCxwLnN0YXJ0TG9jLHAuZW5kTG9jKTtpZihwLm9wdGlvbnMucmFuZ2VzKXRoaXMucmFuZ2U9W3Auc3RhcnQscC5lbmRdO307Ly8gIyMgVG9rZW5pemVyXG5cdHZhciBwcCQ3PVBhcnNlci5wcm90b3R5cGU7Ly8gQXJlIHdlIHJ1bm5pbmcgdW5kZXIgUmhpbm8/XG5cdHZhciBpc1JoaW5vPS8qaXN0YW5idWwgaWdub3JlIG5leHQqLyh0eXBlb2YgUGFja2FnZXM9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6KDAsX3R5cGVvZjMuZGVmYXVsdCkoUGFja2FnZXMpKT09XCJvYmplY3RcIiYmT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFBhY2thZ2VzKT09XCJbb2JqZWN0IEphdmFQYWNrYWdlXVwiOy8vIE1vdmUgdG8gdGhlIG5leHQgdG9rZW5cblx0cHAkNy5uZXh0PWZ1bmN0aW9uKCl7aWYodGhpcy5vcHRpb25zLm9uVG9rZW4pdGhpcy5vcHRpb25zLm9uVG9rZW4obmV3IFRva2VuKHRoaXMpKTt0aGlzLmxhc3RUb2tFbmQ9dGhpcy5lbmQ7dGhpcy5sYXN0VG9rU3RhcnQ9dGhpcy5zdGFydDt0aGlzLmxhc3RUb2tFbmRMb2M9dGhpcy5lbmRMb2M7dGhpcy5sYXN0VG9rU3RhcnRMb2M9dGhpcy5zdGFydExvYzt0aGlzLm5leHRUb2tlbigpO307cHAkNy5nZXRUb2tlbj1mdW5jdGlvbigpe3RoaXMubmV4dCgpO3JldHVybiBuZXcgVG9rZW4odGhpcyk7fTsvLyBJZiB3ZSdyZSBpbiBhbiBFUzYgZW52aXJvbm1lbnQsIG1ha2UgcGFyc2VycyBpdGVyYWJsZVxuXHRpZih0eXBlb2YvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9fc3ltYm9sMi5kZWZhdWx0IT09XCJ1bmRlZmluZWRcIilwcCQ3Wy8qaXN0YW5idWwgaWdub3JlIG5leHQqL19pdGVyYXRvcjIuZGVmYXVsdF09ZnVuY3Rpb24oKXt2YXIgc2VsZj10aGlzO3JldHVybntuZXh0OmZ1bmN0aW9uLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovbmV4dCgpe3ZhciB0b2tlbj1zZWxmLmdldFRva2VuKCk7cmV0dXJue2RvbmU6dG9rZW4udHlwZT09PXR0LmVvZix2YWx1ZTp0b2tlbn07fX07fTsvLyBUb2dnbGUgc3RyaWN0IG1vZGUuIFJlLXJlYWRzIHRoZSBuZXh0IG51bWJlciBvciBzdHJpbmcgdG8gcGxlYXNlXG5cdC8vIHBlZGFudGljIHRlc3RzIChgXCJ1c2Ugc3RyaWN0XCI7IDAxMDtgIHNob3VsZCBmYWlsKS5cblx0cHAkNy5zZXRTdHJpY3Q9ZnVuY3Rpb24oc3RyaWN0KXt2YXIgdGhpcyQxPXRoaXM7dGhpcy5zdHJpY3Q9c3RyaWN0O2lmKHRoaXMudHlwZSE9PXR0Lm51bSYmdGhpcy50eXBlIT09dHQuc3RyaW5nKXJldHVybjt0aGlzLnBvcz10aGlzLnN0YXJ0O2lmKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpe3doaWxlKHRoaXMucG9zPHRoaXMubGluZVN0YXJ0KXt0aGlzJDEubGluZVN0YXJ0PXRoaXMkMS5pbnB1dC5sYXN0SW5kZXhPZihcIlxcblwiLHRoaXMkMS5saW5lU3RhcnQtMikrMTstLXRoaXMkMS5jdXJMaW5lO319dGhpcy5uZXh0VG9rZW4oKTt9O3BwJDcuY3VyQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRleHRbdGhpcy5jb250ZXh0Lmxlbmd0aC0xXTt9Oy8vIFJlYWQgYSBzaW5nbGUgdG9rZW4sIHVwZGF0aW5nIHRoZSBwYXJzZXIgb2JqZWN0J3MgdG9rZW4tcmVsYXRlZFxuXHQvLyBwcm9wZXJ0aWVzLlxuXHRwcCQ3Lm5leHRUb2tlbj1mdW5jdGlvbigpe3ZhciBjdXJDb250ZXh0PXRoaXMuY3VyQ29udGV4dCgpO2lmKCFjdXJDb250ZXh0fHwhY3VyQ29udGV4dC5wcmVzZXJ2ZVNwYWNlKXRoaXMuc2tpcFNwYWNlKCk7dGhpcy5zdGFydD10aGlzLnBvcztpZih0aGlzLm9wdGlvbnMubG9jYXRpb25zKXRoaXMuc3RhcnRMb2M9dGhpcy5jdXJQb3NpdGlvbigpO2lmKHRoaXMucG9zPj10aGlzLmlucHV0Lmxlbmd0aClyZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5lb2YpO2lmKGN1ckNvbnRleHQub3ZlcnJpZGUpcmV0dXJuIGN1ckNvbnRleHQub3ZlcnJpZGUodGhpcyk7ZWxzZSB0aGlzLnJlYWRUb2tlbih0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpO307cHAkNy5yZWFkVG9rZW49ZnVuY3Rpb24oY29kZSl7Ly8gSWRlbnRpZmllciBvciBrZXl3b3JkLiAnXFx1WFhYWCcgc2VxdWVuY2VzIGFyZSBhbGxvd2VkIGluXG5cdC8vIGlkZW50aWZpZXJzLCBzbyAnXFwnIGFsc28gZGlzcGF0Y2hlcyB0byB0aGF0LlxuXHRpZihpc0lkZW50aWZpZXJTdGFydChjb2RlLHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49Nil8fGNvZGU9PT05Mi8qICdcXCcgKi8pcmV0dXJuIHRoaXMucmVhZFdvcmQoKTtyZXR1cm4gdGhpcy5nZXRUb2tlbkZyb21Db2RlKGNvZGUpO307cHAkNy5mdWxsQ2hhckNvZGVBdFBvcz1mdW5jdGlvbigpe3ZhciBjb2RlPXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7aWYoY29kZTw9MHhkN2ZmfHxjb2RlPj0weGUwMDApcmV0dXJuIGNvZGU7dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO3JldHVybihjb2RlPDwxMCkrbmV4dC0weDM1ZmRjMDA7fTtwcCQ3LnNraXBCbG9ja0NvbW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdGhpcyQxPXRoaXM7dmFyIHN0YXJ0TG9jPXRoaXMub3B0aW9ucy5vbkNvbW1lbnQmJnRoaXMuY3VyUG9zaXRpb24oKTt2YXIgc3RhcnQ9dGhpcy5wb3MsZW5kPXRoaXMuaW5wdXQuaW5kZXhPZihcIiovXCIsdGhpcy5wb3MrPTIpO2lmKGVuZD09PS0xKXRoaXMucmFpc2UodGhpcy5wb3MtMixcIlVudGVybWluYXRlZCBjb21tZW50XCIpO3RoaXMucG9zPWVuZCsyO2lmKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpe2xpbmVCcmVha0cubGFzdEluZGV4PXN0YXJ0O3ZhciBtYXRjaDt3aGlsZSgobWF0Y2g9bGluZUJyZWFrRy5leGVjKHRoaXMuaW5wdXQpKSYmbWF0Y2guaW5kZXg8dGhpcy5wb3MpeysrdGhpcyQxLmN1ckxpbmU7dGhpcyQxLmxpbmVTdGFydD1tYXRjaC5pbmRleCttYXRjaFswXS5sZW5ndGg7fX1pZih0aGlzLm9wdGlvbnMub25Db21tZW50KXRoaXMub3B0aW9ucy5vbkNvbW1lbnQodHJ1ZSx0aGlzLmlucHV0LnNsaWNlKHN0YXJ0KzIsZW5kKSxzdGFydCx0aGlzLnBvcyxzdGFydExvYyx0aGlzLmN1clBvc2l0aW9uKCkpO307cHAkNy5za2lwTGluZUNvbW1lbnQ9ZnVuY3Rpb24oc3RhcnRTa2lwKXt2YXIgdGhpcyQxPXRoaXM7dmFyIHN0YXJ0PXRoaXMucG9zO3ZhciBzdGFydExvYz10aGlzLm9wdGlvbnMub25Db21tZW50JiZ0aGlzLmN1clBvc2l0aW9uKCk7dmFyIGNoPXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcys9c3RhcnRTa2lwKTt3aGlsZSh0aGlzLnBvczx0aGlzLmlucHV0Lmxlbmd0aCYmY2ghPT0xMCYmY2ghPT0xMyYmY2ghPT04MjMyJiZjaCE9PTgyMzMpeysrdGhpcyQxLnBvcztjaD10aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKTt9aWYodGhpcy5vcHRpb25zLm9uQ29tbWVudCl0aGlzLm9wdGlvbnMub25Db21tZW50KGZhbHNlLHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQrc3RhcnRTa2lwLHRoaXMucG9zKSxzdGFydCx0aGlzLnBvcyxzdGFydExvYyx0aGlzLmN1clBvc2l0aW9uKCkpO307Ly8gQ2FsbGVkIGF0IHRoZSBzdGFydCBvZiB0aGUgcGFyc2UgYW5kIGFmdGVyIGV2ZXJ5IHRva2VuLiBTa2lwc1xuXHQvLyB3aGl0ZXNwYWNlIGFuZCBjb21tZW50cywgYW5kLlxuXHRwcCQ3LnNraXBTcGFjZT1mdW5jdGlvbigpe3ZhciB0aGlzJDE9dGhpcztsb29wOndoaWxlKHRoaXMucG9zPHRoaXMuaW5wdXQubGVuZ3RoKXt2YXIgY2g9dGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyk7c3dpdGNoKGNoKXtjYXNlIDMyOmNhc2UgMTYwOi8vICcgJ1xuXHQrK3RoaXMkMS5wb3M7YnJlYWs7Y2FzZSAxMzppZih0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKzEpPT09MTApeysrdGhpcyQxLnBvczt9Y2FzZSAxMDpjYXNlIDgyMzI6Y2FzZSA4MjMzOisrdGhpcyQxLnBvcztpZih0aGlzJDEub3B0aW9ucy5sb2NhdGlvbnMpeysrdGhpcyQxLmN1ckxpbmU7dGhpcyQxLmxpbmVTdGFydD10aGlzJDEucG9zO31icmVhaztjYXNlIDQ3Oi8vICcvJ1xuXHRzd2l0Y2godGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcysxKSl7Y2FzZSA0MjovLyAnKidcblx0dGhpcyQxLnNraXBCbG9ja0NvbW1lbnQoKTticmVhaztjYXNlIDQ3OnRoaXMkMS5za2lwTGluZUNvbW1lbnQoMik7YnJlYWs7ZGVmYXVsdDpicmVhayBsb29wO31icmVhaztkZWZhdWx0OmlmKGNoPjgmJmNoPDE0fHxjaD49NTc2MCYmbm9uQVNDSUl3aGl0ZXNwYWNlLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpKXsrK3RoaXMkMS5wb3M7fWVsc2V7YnJlYWsgbG9vcDt9fX19Oy8vIENhbGxlZCBhdCB0aGUgZW5kIG9mIGV2ZXJ5IHRva2VuLiBTZXRzIGBlbmRgLCBgdmFsYCwgYW5kXG5cdC8vIG1haW50YWlucyBgY29udGV4dGAgYW5kIGBleHByQWxsb3dlZGAsIGFuZCBza2lwcyB0aGUgc3BhY2UgYWZ0ZXJcblx0Ly8gdGhlIHRva2VuLCBzbyB0aGF0IHRoZSBuZXh0IG9uZSdzIGBzdGFydGAgd2lsbCBwb2ludCBhdCB0aGVcblx0Ly8gcmlnaHQgcG9zaXRpb24uXG5cdHBwJDcuZmluaXNoVG9rZW49ZnVuY3Rpb24odHlwZSx2YWwpe3RoaXMuZW5kPXRoaXMucG9zO2lmKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpdGhpcy5lbmRMb2M9dGhpcy5jdXJQb3NpdGlvbigpO3ZhciBwcmV2VHlwZT10aGlzLnR5cGU7dGhpcy50eXBlPXR5cGU7dGhpcy52YWx1ZT12YWw7dGhpcy51cGRhdGVDb250ZXh0KHByZXZUeXBlKTt9Oy8vICMjIyBUb2tlbiByZWFkaW5nXG5cdC8vIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHRvIGZldGNoIHRoZSBuZXh0IHRva2VuLiBJdFxuXHQvLyBpcyBzb21ld2hhdCBvYnNjdXJlLCBiZWNhdXNlIGl0IHdvcmtzIGluIGNoYXJhY3RlciBjb2RlcyByYXRoZXJcblx0Ly8gdGhhbiBjaGFyYWN0ZXJzLCBhbmQgYmVjYXVzZSBvcGVyYXRvciBwYXJzaW5nIGhhcyBiZWVuIGlubGluZWRcblx0Ly8gaW50byBpdC5cblx0Ly9cblx0Ly8gQWxsIGluIHRoZSBuYW1lIG9mIHNwZWVkLlxuXHQvL1xuXHRwcCQ3LnJlYWRUb2tlbl9kb3Q9ZnVuY3Rpb24oKXt2YXIgbmV4dD10aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MrMSk7aWYobmV4dD49NDgmJm5leHQ8PTU3KXJldHVybiB0aGlzLnJlYWROdW1iZXIodHJ1ZSk7dmFyIG5leHQyPXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcysyKTtpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYmJm5leHQ9PT00NiYmbmV4dDI9PT00Nil7Ly8gNDYgPSBkb3QgJy4nXG5cdHRoaXMucG9zKz0zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmVsbGlwc2lzKTt9ZWxzZXsrK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmRvdCk7fX07cHAkNy5yZWFkVG9rZW5fc2xhc2g9ZnVuY3Rpb24oKXsvLyAnLydcblx0dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO2lmKHRoaXMuZXhwckFsbG93ZWQpeysrdGhpcy5wb3M7cmV0dXJuIHRoaXMucmVhZFJlZ2V4cCgpO31pZihuZXh0PT09NjEpcmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLDIpO3JldHVybiB0aGlzLmZpbmlzaE9wKHR0LnNsYXNoLDEpO307cHAkNy5yZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwPWZ1bmN0aW9uKGNvZGUpey8vICclKidcblx0dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO3ZhciBzaXplPTE7dmFyIHRva2VudHlwZT1jb2RlPT09NDI/dHQuc3Rhcjp0dC5tb2R1bG87Ly8gZXhwb25lbnRpYXRpb24gb3BlcmF0b3IgKiogYW5kICoqPVxuXHRpZih0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTcmJm5leHQ9PT00Mil7KytzaXplO3Rva2VudHlwZT10dC5zdGFyc3RhcjtuZXh0PXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcysyKTt9aWYobmV4dD09PTYxKXJldHVybiB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbixzaXplKzEpO3JldHVybiB0aGlzLmZpbmlzaE9wKHRva2VudHlwZSxzaXplKTt9O3BwJDcucmVhZFRva2VuX3BpcGVfYW1wPWZ1bmN0aW9uKGNvZGUpey8vICd8Jidcblx0dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO2lmKG5leHQ9PT1jb2RlKXJldHVybiB0aGlzLmZpbmlzaE9wKGNvZGU9PT0xMjQ/dHQubG9naWNhbE9SOnR0LmxvZ2ljYWxBTkQsMik7aWYobmV4dD09PTYxKXJldHVybiB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbiwyKTtyZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlPT09MTI0P3R0LmJpdHdpc2VPUjp0dC5iaXR3aXNlQU5ELDEpO307cHAkNy5yZWFkVG9rZW5fY2FyZXQ9ZnVuY3Rpb24oKXsvLyAnXidcblx0dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO2lmKG5leHQ9PT02MSlyZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5hc3NpZ24sMik7cmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYml0d2lzZVhPUiwxKTt9O3BwJDcucmVhZFRva2VuX3BsdXNfbWluPWZ1bmN0aW9uKGNvZGUpey8vICcrLSdcblx0dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO2lmKG5leHQ9PT1jb2RlKXtpZihuZXh0PT00NSYmdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzIpPT02MiYmbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsdGhpcy5wb3MpKSl7Ly8gQSBgLS0+YCBsaW5lIGNvbW1lbnRcblx0dGhpcy5za2lwTGluZUNvbW1lbnQoMyk7dGhpcy5za2lwU3BhY2UoKTtyZXR1cm4gdGhpcy5uZXh0VG9rZW4oKTt9cmV0dXJuIHRoaXMuZmluaXNoT3AodHQuaW5jRGVjLDIpO31pZihuZXh0PT09NjEpcmV0dXJuIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLDIpO3JldHVybiB0aGlzLmZpbmlzaE9wKHR0LnBsdXNNaW4sMSk7fTtwcCQ3LnJlYWRUb2tlbl9sdF9ndD1mdW5jdGlvbihjb2RlKXsvLyAnPD4nXG5cdHZhciBuZXh0PXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcysxKTt2YXIgc2l6ZT0xO2lmKG5leHQ9PT1jb2RlKXtzaXplPWNvZGU9PT02MiYmdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzIpPT09NjI/MzoyO2lmKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcytzaXplKT09PTYxKXJldHVybiB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbixzaXplKzEpO3JldHVybiB0aGlzLmZpbmlzaE9wKHR0LmJpdFNoaWZ0LHNpemUpO31pZihuZXh0PT0zMyYmY29kZT09NjAmJnRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcysyKT09NDUmJnRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyszKT09NDUpe2lmKHRoaXMuaW5Nb2R1bGUpdGhpcy51bmV4cGVjdGVkKCk7Ly8gYDwhLS1gLCBhbiBYTUwtc3R5bGUgY29tbWVudCB0aGF0IHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhIGxpbmUgY29tbWVudFxuXHR0aGlzLnNraXBMaW5lQ29tbWVudCg0KTt0aGlzLnNraXBTcGFjZSgpO3JldHVybiB0aGlzLm5leHRUb2tlbigpO31pZihuZXh0PT09NjEpc2l6ZT0yO3JldHVybiB0aGlzLmZpbmlzaE9wKHR0LnJlbGF0aW9uYWwsc2l6ZSk7fTtwcCQ3LnJlYWRUb2tlbl9lcV9leGNsPWZ1bmN0aW9uKGNvZGUpey8vICc9ISdcblx0dmFyIG5leHQ9dGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKzEpO2lmKG5leHQ9PT02MSlyZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5lcXVhbGl0eSx0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MrMik9PT02MT8zOjIpO2lmKGNvZGU9PT02MSYmbmV4dD09PTYyJiZ0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24+PTYpey8vICc9Pidcblx0dGhpcy5wb3MrPTI7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuYXJyb3cpO31yZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlPT09NjE/dHQuZXE6dHQucHJlZml4LDEpO307cHAkNy5nZXRUb2tlbkZyb21Db2RlPWZ1bmN0aW9uKGNvZGUpe3N3aXRjaChjb2RlKXsvLyBUaGUgaW50ZXJwcmV0YXRpb24gb2YgYSBkb3QgZGVwZW5kcyBvbiB3aGV0aGVyIGl0IGlzIGZvbGxvd2VkXG5cdC8vIGJ5IGEgZGlnaXQgb3IgYW5vdGhlciB0d28gZG90cy5cblx0Y2FzZSA0NjovLyAnLidcblx0cmV0dXJuIHRoaXMucmVhZFRva2VuX2RvdCgpOy8vIFB1bmN0dWF0aW9uIHRva2Vucy5cblx0Y2FzZSA0MDorK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LnBhcmVuTCk7Y2FzZSA0MTorK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LnBhcmVuUik7Y2FzZSA1OTorK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LnNlbWkpO2Nhc2UgNDQ6Kyt0aGlzLnBvcztyZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5jb21tYSk7Y2FzZSA5MTorK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNrZXRMKTtjYXNlIDkzOisrdGhpcy5wb3M7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuYnJhY2tldFIpO2Nhc2UgMTIzOisrdGhpcy5wb3M7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuYnJhY2VMKTtjYXNlIDEyNTorK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNlUik7Y2FzZSA1ODorK3RoaXMucG9zO3JldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmNvbG9uKTtjYXNlIDYzOisrdGhpcy5wb3M7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQucXVlc3Rpb24pO2Nhc2UgOTY6Ly8gJ2AnXG5cdGlmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbjw2KWJyZWFrOysrdGhpcy5wb3M7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuYmFja1F1b3RlKTtjYXNlIDQ4Oi8vICcwJ1xuXHR2YXIgbmV4dD10aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MrMSk7aWYobmV4dD09PTEyMHx8bmV4dD09PTg4KXJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcigxNik7Ly8gJzB4JywgJzBYJyAtIGhleCBudW1iZXJcblx0aWYodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02KXtpZihuZXh0PT09MTExfHxuZXh0PT09NzkpcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDgpOy8vICcwbycsICcwTycgLSBvY3RhbCBudW1iZXJcblx0aWYobmV4dD09PTk4fHxuZXh0PT09NjYpcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDIpOy8vICcwYicsICcwQicgLSBiaW5hcnkgbnVtYmVyXG5cdH0vLyBBbnl0aGluZyBlbHNlIGJlZ2lubmluZyB3aXRoIGEgZGlnaXQgaXMgYW4gaW50ZWdlciwgb2N0YWxcblx0Ly8gbnVtYmVyLCBvciBmbG9hdC5cblx0Y2FzZSA0OTpjYXNlIDUwOmNhc2UgNTE6Y2FzZSA1MjpjYXNlIDUzOmNhc2UgNTQ6Y2FzZSA1NTpjYXNlIDU2OmNhc2UgNTc6Ly8gMS05XG5cdHJldHVybiB0aGlzLnJlYWROdW1iZXIoZmFsc2UpOy8vIFF1b3RlcyBwcm9kdWNlIHN0cmluZ3MuXG5cdGNhc2UgMzQ6Y2FzZSAzOTovLyAnXCInLCBcIidcIlxuXHRyZXR1cm4gdGhpcy5yZWFkU3RyaW5nKGNvZGUpOy8vIE9wZXJhdG9ycyBhcmUgcGFyc2VkIGlubGluZSBpbiB0aW55IHN0YXRlIG1hY2hpbmVzLiAnPScgKDYxKSBpc1xuXHQvLyBvZnRlbiByZWZlcnJlZCB0by4gYGZpbmlzaE9wYCBzaW1wbHkgc2tpcHMgdGhlIGFtb3VudCBvZlxuXHQvLyBjaGFyYWN0ZXJzIGl0IGlzIGdpdmVuIGFzIHNlY29uZCBhcmd1bWVudCwgYW5kIHJldHVybnMgYSB0b2tlblxuXHQvLyBvZiB0aGUgdHlwZSBnaXZlbiBieSBpdHMgZmlyc3QgYXJndW1lbnQuXG5cdGNhc2UgNDc6Ly8gJy8nXG5cdHJldHVybiB0aGlzLnJlYWRUb2tlbl9zbGFzaCgpO2Nhc2UgMzc6Y2FzZSA0MjovLyAnJSonXG5cdHJldHVybiB0aGlzLnJlYWRUb2tlbl9tdWx0X21vZHVsb19leHAoY29kZSk7Y2FzZSAxMjQ6Y2FzZSAzODovLyAnfCYnXG5cdHJldHVybiB0aGlzLnJlYWRUb2tlbl9waXBlX2FtcChjb2RlKTtjYXNlIDk0Oi8vICdeJ1xuXHRyZXR1cm4gdGhpcy5yZWFkVG9rZW5fY2FyZXQoKTtjYXNlIDQzOmNhc2UgNDU6Ly8gJystJ1xuXHRyZXR1cm4gdGhpcy5yZWFkVG9rZW5fcGx1c19taW4oY29kZSk7Y2FzZSA2MDpjYXNlIDYyOi8vICc8Pidcblx0cmV0dXJuIHRoaXMucmVhZFRva2VuX2x0X2d0KGNvZGUpO2Nhc2UgNjE6Y2FzZSAzMzovLyAnPSEnXG5cdHJldHVybiB0aGlzLnJlYWRUb2tlbl9lcV9leGNsKGNvZGUpO2Nhc2UgMTI2Oi8vICd+J1xuXHRyZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5wcmVmaXgsMSk7fXRoaXMucmFpc2UodGhpcy5wb3MsXCJVbmV4cGVjdGVkIGNoYXJhY3RlciAnXCIrY29kZVBvaW50VG9TdHJpbmcoY29kZSkrXCInXCIpO307cHAkNy5maW5pc2hPcD1mdW5jdGlvbih0eXBlLHNpemUpe3ZhciBzdHI9dGhpcy5pbnB1dC5zbGljZSh0aGlzLnBvcyx0aGlzLnBvcytzaXplKTt0aGlzLnBvcys9c2l6ZTtyZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlLHN0cik7fTsvLyBQYXJzZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4gU29tZSBjb250ZXh0LWF3YXJlbmVzcyBpcyBuZWNlc3NhcnksXG5cdC8vIHNpbmNlIGEgJy8nIGluc2lkZSBhICdbXScgc2V0IGRvZXMgbm90IGVuZCB0aGUgZXhwcmVzc2lvbi5cblx0ZnVuY3Rpb24gdHJ5Q3JlYXRlUmVnZXhwKHNyYyxmbGFncyx0aHJvd0Vycm9yQXQscGFyc2VyKXt0cnl7cmV0dXJuIG5ldyBSZWdFeHAoc3JjLGZsYWdzKTt9Y2F0Y2goZSl7aWYodGhyb3dFcnJvckF0IT09dW5kZWZpbmVkKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpcGFyc2VyLnJhaXNlKHRocm93RXJyb3JBdCxcIkVycm9yIHBhcnNpbmcgcmVndWxhciBleHByZXNzaW9uOiBcIitlLm1lc3NhZ2UpO3Rocm93IGU7fX19dmFyIHJlZ2V4cFVuaWNvZGVTdXBwb3J0PSEhdHJ5Q3JlYXRlUmVnZXhwKFwi77+/XCIsXCJ1XCIpO3BwJDcucmVhZFJlZ2V4cD1mdW5jdGlvbigpe3ZhciB0aGlzJDE9dGhpczt2YXIgZXNjYXBlZCxpbkNsYXNzLHN0YXJ0PXRoaXMucG9zO2Zvcig7Oyl7aWYodGhpcyQxLnBvcz49dGhpcyQxLmlucHV0Lmxlbmd0aCl0aGlzJDEucmFpc2Uoc3RhcnQsXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpO3ZhciBjaD10aGlzJDEuaW5wdXQuY2hhckF0KHRoaXMkMS5wb3MpO2lmKGxpbmVCcmVhay50ZXN0KGNoKSl0aGlzJDEucmFpc2Uoc3RhcnQsXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpO2lmKCFlc2NhcGVkKXtpZihjaD09PVwiW1wiKWluQ2xhc3M9dHJ1ZTtlbHNlIGlmKGNoPT09XCJdXCImJmluQ2xhc3MpaW5DbGFzcz1mYWxzZTtlbHNlIGlmKGNoPT09XCIvXCImJiFpbkNsYXNzKWJyZWFrO2VzY2FwZWQ9Y2g9PT1cIlxcXFxcIjt9ZWxzZSBlc2NhcGVkPWZhbHNlOysrdGhpcyQxLnBvczt9dmFyIGNvbnRlbnQ9dGhpcy5pbnB1dC5zbGljZShzdGFydCx0aGlzLnBvcyk7Kyt0aGlzLnBvczsvLyBOZWVkIHRvIHVzZSBgcmVhZFdvcmQxYCBiZWNhdXNlICdcXHVYWFhYJyBzZXF1ZW5jZXMgYXJlIGFsbG93ZWRcblx0Ly8gaGVyZSAoZG9uJ3QgYXNrKS5cblx0dmFyIG1vZHM9dGhpcy5yZWFkV29yZDEoKTt2YXIgdG1wPWNvbnRlbnQsdG1wRmxhZ3M9XCJcIjtpZihtb2RzKXt2YXIgdmFsaWRGbGFncz0vXltnaW1dKiQvO2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49Nil2YWxpZEZsYWdzPS9eW2dpbXV5XSokLztpZighdmFsaWRGbGFncy50ZXN0KG1vZHMpKXRoaXMucmFpc2Uoc3RhcnQsXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiBmbGFnXCIpO2lmKG1vZHMuaW5kZXhPZihcInVcIik+PTApe2lmKHJlZ2V4cFVuaWNvZGVTdXBwb3J0KXt0bXBGbGFncz1cInVcIjt9ZWxzZXsvLyBSZXBsYWNlIGVhY2ggYXN0cmFsIHN5bWJvbCBhbmQgZXZlcnkgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UgdGhhdFxuXHQvLyBwb3NzaWJseSByZXByZXNlbnRzIGFuIGFzdHJhbCBzeW1ib2wgb3IgYSBwYWlyZWQgc3Vycm9nYXRlIHdpdGggYVxuXHQvLyBzaW5nbGUgQVNDSUkgc3ltYm9sIHRvIGF2b2lkIHRocm93aW5nIG9uIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdFxuXHQvLyBhcmUgb25seSB2YWxpZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBgL3VgIGZsYWcuXG5cdC8vIE5vdGU6IHJlcGxhY2luZyB3aXRoIHRoZSBBU0NJSSBzeW1ib2wgYHhgIG1pZ2h0IGNhdXNlIGZhbHNlXG5cdC8vIG5lZ2F0aXZlcyBpbiB1bmxpa2VseSBzY2VuYXJpb3MuIEZvciBleGFtcGxlLCBgW1xcdXs2MX0tYl1gIGlzIGFcblx0Ly8gcGVyZmVjdGx5IHZhbGlkIHBhdHRlcm4gdGhhdCBpcyBlcXVpdmFsZW50IHRvIGBbYS1iXWAsIGJ1dCBpdCB3b3VsZFxuXHQvLyBiZSByZXBsYWNlZCBieSBgW3gtYl1gIHdoaWNoIHRocm93cyBhbiBlcnJvci5cblx0dG1wPXRtcC5yZXBsYWNlKC9cXFxcdVxceyhbMC05YS1mQS1GXSspXFx9L2csZnVuY3Rpb24oX21hdGNoLGNvZGUsb2Zmc2V0KXtjb2RlPU51bWJlcihcIjB4XCIrY29kZSk7aWYoY29kZT4weDEwRkZGRil0aGlzJDEucmFpc2Uoc3RhcnQrb2Zmc2V0KzMsXCJDb2RlIHBvaW50IG91dCBvZiBib3VuZHNcIik7cmV0dXJuXCJ4XCI7fSk7dG1wPXRtcC5yZXBsYWNlKC9cXFxcdShbYS1mQS1GMC05XXs0fSl8W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nLFwieFwiKTt0bXBGbGFncz10bXBGbGFncy5yZXBsYWNlKFwidVwiLFwiXCIpO319fS8vIERldGVjdCBpbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG5cdHZhciB2YWx1ZT1udWxsOy8vIFJoaW5vJ3MgcmVndWxhciBleHByZXNzaW9uIHBhcnNlciBpcyBmbGFreSBhbmQgdGhyb3dzIHVuY2F0Y2hhYmxlIGV4Y2VwdGlvbnMsXG5cdC8vIHNvIGRvbid0IGRvIGRldGVjdGlvbiBpZiB3ZSBhcmUgcnVubmluZyB1bmRlciBSaGlub1xuXHRpZighaXNSaGlubyl7dHJ5Q3JlYXRlUmVnZXhwKHRtcCx0bXBGbGFncyxzdGFydCx0aGlzKTsvLyBHZXQgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0IGZvciB0aGlzIHBhdHRlcm4tZmxhZyBwYWlyLCBvciBgbnVsbGAgaW5cblx0Ly8gY2FzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZsYWdzIGl0IHVzZXMuXG5cdHZhbHVlPXRyeUNyZWF0ZVJlZ2V4cChjb250ZW50LG1vZHMpO31yZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5yZWdleHAse3BhdHRlcm46Y29udGVudCxmbGFnczptb2RzLHZhbHVlOnZhbHVlfSk7fTsvLyBSZWFkIGFuIGludGVnZXIgaW4gdGhlIGdpdmVuIHJhZGl4LiBSZXR1cm4gbnVsbCBpZiB6ZXJvIGRpZ2l0c1xuXHQvLyB3ZXJlIHJlYWQsIHRoZSBpbnRlZ2VyIHZhbHVlIG90aGVyd2lzZS4gV2hlbiBgbGVuYCBpcyBnaXZlbiwgdGhpc1xuXHQvLyB3aWxsIHJldHVybiBgbnVsbGAgdW5sZXNzIHRoZSBpbnRlZ2VyIGhhcyBleGFjdGx5IGBsZW5gIGRpZ2l0cy5cblx0cHAkNy5yZWFkSW50PWZ1bmN0aW9uKHJhZGl4LGxlbil7dmFyIHRoaXMkMT10aGlzO3ZhciBzdGFydD10aGlzLnBvcyx0b3RhbD0wO2Zvcih2YXIgaT0wLGU9bGVuPT1udWxsP0luZmluaXR5OmxlbjtpPGU7KytpKXt2YXIgY29kZT10aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKSx2YWw7aWYoY29kZT49OTcpdmFsPWNvZGUtOTcrMTA7Ly8gYVxuXHRlbHNlIGlmKGNvZGU+PTY1KXZhbD1jb2RlLTY1KzEwOy8vIEFcblx0ZWxzZSBpZihjb2RlPj00OCYmY29kZTw9NTcpdmFsPWNvZGUtNDg7Ly8gMC05XG5cdGVsc2UgdmFsPUluZmluaXR5O2lmKHZhbD49cmFkaXgpYnJlYWs7Kyt0aGlzJDEucG9zO3RvdGFsPXRvdGFsKnJhZGl4K3ZhbDt9aWYodGhpcy5wb3M9PT1zdGFydHx8bGVuIT1udWxsJiZ0aGlzLnBvcy1zdGFydCE9PWxlbilyZXR1cm4gbnVsbDtyZXR1cm4gdG90YWw7fTtwcCQ3LnJlYWRSYWRpeE51bWJlcj1mdW5jdGlvbihyYWRpeCl7dGhpcy5wb3MrPTI7Ly8gMHhcblx0dmFyIHZhbD10aGlzLnJlYWRJbnQocmFkaXgpO2lmKHZhbD09bnVsbCl0aGlzLnJhaXNlKHRoaXMuc3RhcnQrMixcIkV4cGVjdGVkIG51bWJlciBpbiByYWRpeCBcIityYWRpeCk7aWYoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSl0aGlzLnJhaXNlKHRoaXMucG9zLFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIik7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQubnVtLHZhbCk7fTsvLyBSZWFkIGFuIGludGVnZXIsIG9jdGFsIGludGVnZXIsIG9yIGZsb2F0aW5nLXBvaW50IG51bWJlci5cblx0cHAkNy5yZWFkTnVtYmVyPWZ1bmN0aW9uKHN0YXJ0c1dpdGhEb3Qpe3ZhciBzdGFydD10aGlzLnBvcyxpc0Zsb2F0PWZhbHNlLG9jdGFsPXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk9PT00ODtpZighc3RhcnRzV2l0aERvdCYmdGhpcy5yZWFkSW50KDEwKT09PW51bGwpdGhpcy5yYWlzZShzdGFydCxcIkludmFsaWQgbnVtYmVyXCIpO3ZhciBuZXh0PXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7aWYobmV4dD09PTQ2KXsvLyAnLidcblx0Kyt0aGlzLnBvczt0aGlzLnJlYWRJbnQoMTApO2lzRmxvYXQ9dHJ1ZTtuZXh0PXRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7fWlmKG5leHQ9PT02OXx8bmV4dD09PTEwMSl7Ly8gJ2VFJ1xuXHRuZXh0PXRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKTtpZihuZXh0PT09NDN8fG5leHQ9PT00NSkrK3RoaXMucG9zOy8vICcrLSdcblx0aWYodGhpcy5yZWFkSW50KDEwKT09PW51bGwpdGhpcy5yYWlzZShzdGFydCxcIkludmFsaWQgbnVtYmVyXCIpO2lzRmxvYXQ9dHJ1ZTt9aWYoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSl0aGlzLnJhaXNlKHRoaXMucG9zLFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIik7dmFyIHN0cj10aGlzLmlucHV0LnNsaWNlKHN0YXJ0LHRoaXMucG9zKSx2YWw7aWYoaXNGbG9hdCl2YWw9cGFyc2VGbG9hdChzdHIpO2Vsc2UgaWYoIW9jdGFsfHxzdHIubGVuZ3RoPT09MSl2YWw9cGFyc2VJbnQoc3RyLDEwKTtlbHNlIGlmKC9bODldLy50ZXN0KHN0cil8fHRoaXMuc3RyaWN0KXRoaXMucmFpc2Uoc3RhcnQsXCJJbnZhbGlkIG51bWJlclwiKTtlbHNlIHZhbD1wYXJzZUludChzdHIsOCk7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQubnVtLHZhbCk7fTsvLyBSZWFkIGEgc3RyaW5nIHZhbHVlLCBpbnRlcnByZXRpbmcgYmFja3NsYXNoLWVzY2FwZXMuXG5cdHBwJDcucmVhZENvZGVQb2ludD1mdW5jdGlvbigpe3ZhciBjaD10aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpLGNvZGU7aWYoY2g9PT0xMjMpe2lmKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbjw2KXRoaXMudW5leHBlY3RlZCgpO3ZhciBjb2RlUG9zPSsrdGhpcy5wb3M7Y29kZT10aGlzLnJlYWRIZXhDaGFyKHRoaXMuaW5wdXQuaW5kZXhPZignfScsdGhpcy5wb3MpLXRoaXMucG9zKTsrK3RoaXMucG9zO2lmKGNvZGU+MHgxMEZGRkYpdGhpcy5yYWlzZShjb2RlUG9zLFwiQ29kZSBwb2ludCBvdXQgb2YgYm91bmRzXCIpO31lbHNle2NvZGU9dGhpcy5yZWFkSGV4Q2hhcig0KTt9cmV0dXJuIGNvZGU7fTtmdW5jdGlvbiBjb2RlUG9pbnRUb1N0cmluZyhjb2RlKXsvLyBVVEYtMTYgRGVjb2Rpbmdcblx0aWYoY29kZTw9MHhGRkZGKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO2NvZGUtPTB4MTAwMDA7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGU+PjEwKSsweEQ4MDAsKGNvZGUmMTAyMykrMHhEQzAwKTt9cHAkNy5yZWFkU3RyaW5nPWZ1bmN0aW9uKHF1b3RlKXt2YXIgdGhpcyQxPXRoaXM7dmFyIG91dD1cIlwiLGNodW5rU3RhcnQ9Kyt0aGlzLnBvcztmb3IoOzspe2lmKHRoaXMkMS5wb3M+PXRoaXMkMS5pbnB1dC5sZW5ndGgpdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCxcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7dmFyIGNoPXRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpO2lmKGNoPT09cXVvdGUpYnJlYWs7aWYoY2g9PT05Mil7Ly8gJ1xcJ1xuXHRvdXQrPXRoaXMkMS5pbnB1dC5zbGljZShjaHVua1N0YXJ0LHRoaXMkMS5wb3MpO291dCs9dGhpcyQxLnJlYWRFc2NhcGVkQ2hhcihmYWxzZSk7Y2h1bmtTdGFydD10aGlzJDEucG9zO31lbHNle2lmKGlzTmV3TGluZShjaCkpdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCxcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7Kyt0aGlzJDEucG9zO319b3V0Kz10aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsdGhpcy5wb3MrKyk7cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuc3RyaW5nLG91dCk7fTsvLyBSZWFkcyB0ZW1wbGF0ZSBzdHJpbmcgdG9rZW5zLlxuXHRwcCQ3LnJlYWRUbXBsVG9rZW49ZnVuY3Rpb24oKXt2YXIgdGhpcyQxPXRoaXM7dmFyIG91dD1cIlwiLGNodW5rU3RhcnQ9dGhpcy5wb3M7Zm9yKDs7KXtpZih0aGlzJDEucG9zPj10aGlzJDEuaW5wdXQubGVuZ3RoKXRoaXMkMS5yYWlzZSh0aGlzJDEuc3RhcnQsXCJVbnRlcm1pbmF0ZWQgdGVtcGxhdGVcIik7dmFyIGNoPXRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpO2lmKGNoPT09OTZ8fGNoPT09MzYmJnRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MrMSk9PT0xMjMpey8vICdgJywgJyR7J1xuXHRpZih0aGlzJDEucG9zPT09dGhpcyQxLnN0YXJ0JiZ0aGlzJDEudHlwZT09PXR0LnRlbXBsYXRlKXtpZihjaD09PTM2KXt0aGlzJDEucG9zKz0yO3JldHVybiB0aGlzJDEuZmluaXNoVG9rZW4odHQuZG9sbGFyQnJhY2VMKTt9ZWxzZXsrK3RoaXMkMS5wb3M7cmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0dC5iYWNrUXVvdGUpO319b3V0Kz10aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCx0aGlzJDEucG9zKTtyZXR1cm4gdGhpcyQxLmZpbmlzaFRva2VuKHR0LnRlbXBsYXRlLG91dCk7fWlmKGNoPT09OTIpey8vICdcXCdcblx0b3V0Kz10aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCx0aGlzJDEucG9zKTtvdXQrPXRoaXMkMS5yZWFkRXNjYXBlZENoYXIodHJ1ZSk7Y2h1bmtTdGFydD10aGlzJDEucG9zO31lbHNlIGlmKGlzTmV3TGluZShjaCkpe291dCs9dGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsdGhpcyQxLnBvcyk7Kyt0aGlzJDEucG9zO3N3aXRjaChjaCl7Y2FzZSAxMzppZih0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKT09PTEwKSsrdGhpcyQxLnBvcztjYXNlIDEwOm91dCs9XCJcXG5cIjticmVhaztkZWZhdWx0Om91dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjaCk7YnJlYWs7fWlmKHRoaXMkMS5vcHRpb25zLmxvY2F0aW9ucyl7Kyt0aGlzJDEuY3VyTGluZTt0aGlzJDEubGluZVN0YXJ0PXRoaXMkMS5wb3M7fWNodW5rU3RhcnQ9dGhpcyQxLnBvczt9ZWxzZXsrK3RoaXMkMS5wb3M7fX19Oy8vIFVzZWQgdG8gcmVhZCBlc2NhcGVkIGNoYXJhY3RlcnNcblx0cHAkNy5yZWFkRXNjYXBlZENoYXI9ZnVuY3Rpb24oaW5UZW1wbGF0ZSl7dmFyIGNoPXRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKTsrK3RoaXMucG9zO3N3aXRjaChjaCl7Y2FzZSAxMTA6cmV0dXJuXCJcXG5cIjsvLyAnbicgLT4gJ1xcbidcblx0Y2FzZSAxMTQ6cmV0dXJuXCJcXHJcIjsvLyAncicgLT4gJ1xccidcblx0Y2FzZSAxMjA6cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkSGV4Q2hhcigyKSk7Ly8gJ3gnXG5cdGNhc2UgMTE3OnJldHVybiBjb2RlUG9pbnRUb1N0cmluZyh0aGlzLnJlYWRDb2RlUG9pbnQoKSk7Ly8gJ3UnXG5cdGNhc2UgMTE2OnJldHVyblwiXFx0XCI7Ly8gJ3QnIC0+ICdcXHQnXG5cdGNhc2UgOTg6cmV0dXJuXCJcXGJcIjsvLyAnYicgLT4gJ1xcYidcblx0Y2FzZSAxMTg6cmV0dXJuXCJcXHUwMDBiXCI7Ly8gJ3YnIC0+ICdcXHUwMDBiJ1xuXHRjYXNlIDEwMjpyZXR1cm5cIlxcZlwiOy8vICdmJyAtPiAnXFxmJ1xuXHRjYXNlIDEzOmlmKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk9PT0xMCkrK3RoaXMucG9zOy8vICdcXHJcXG4nXG5cdGNhc2UgMTA6Ly8gJyBcXG4nXG5cdGlmKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpe3RoaXMubGluZVN0YXJ0PXRoaXMucG9zOysrdGhpcy5jdXJMaW5lO31yZXR1cm5cIlwiO2RlZmF1bHQ6aWYoY2g+PTQ4JiZjaDw9NTUpe3ZhciBvY3RhbFN0cj10aGlzLmlucHV0LnN1YnN0cih0aGlzLnBvcy0xLDMpLm1hdGNoKC9eWzAtN10rLylbMF07dmFyIG9jdGFsPXBhcnNlSW50KG9jdGFsU3RyLDgpO2lmKG9jdGFsPjI1NSl7b2N0YWxTdHI9b2N0YWxTdHIuc2xpY2UoMCwtMSk7b2N0YWw9cGFyc2VJbnQob2N0YWxTdHIsOCk7fWlmKG9jdGFsU3RyIT09XCIwXCImJih0aGlzLnN0cmljdHx8aW5UZW1wbGF0ZSkpe3RoaXMucmFpc2UodGhpcy5wb3MtMixcIk9jdGFsIGxpdGVyYWwgaW4gc3RyaWN0IG1vZGVcIik7fXRoaXMucG9zKz1vY3RhbFN0ci5sZW5ndGgtMTtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvY3RhbCk7fXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTt9fTsvLyBVc2VkIHRvIHJlYWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZXMgKCdcXHgnLCAnXFx1JywgJ1xcVScpLlxuXHRwcCQ3LnJlYWRIZXhDaGFyPWZ1bmN0aW9uKGxlbil7dmFyIGNvZGVQb3M9dGhpcy5wb3M7dmFyIG49dGhpcy5yZWFkSW50KDE2LGxlbik7aWYobj09PW51bGwpdGhpcy5yYWlzZShjb2RlUG9zLFwiQmFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VcIik7cmV0dXJuIG47fTsvLyBSZWFkIGFuIGlkZW50aWZpZXIsIGFuZCByZXR1cm4gaXQgYXMgYSBzdHJpbmcuIFNldHMgYHRoaXMuY29udGFpbnNFc2NgXG5cdC8vIHRvIHdoZXRoZXIgdGhlIHdvcmQgY29udGFpbmVkIGEgJ1xcdScgZXNjYXBlLlxuXHQvL1xuXHQvLyBJbmNyZW1lbnRhbGx5IGFkZHMgb25seSBlc2NhcGVkIGNoYXJzLCBhZGRpbmcgb3RoZXIgY2h1bmtzIGFzLWlzXG5cdC8vIGFzIGEgbWljcm8tb3B0aW1pemF0aW9uLlxuXHRwcCQ3LnJlYWRXb3JkMT1mdW5jdGlvbigpe3ZhciB0aGlzJDE9dGhpczt0aGlzLmNvbnRhaW5zRXNjPWZhbHNlO3ZhciB3b3JkPVwiXCIsZmlyc3Q9dHJ1ZSxjaHVua1N0YXJ0PXRoaXMucG9zO3ZhciBhc3RyYWw9dGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uPj02O3doaWxlKHRoaXMucG9zPHRoaXMuaW5wdXQubGVuZ3RoKXt2YXIgY2g9dGhpcyQxLmZ1bGxDaGFyQ29kZUF0UG9zKCk7aWYoaXNJZGVudGlmaWVyQ2hhcihjaCxhc3RyYWwpKXt0aGlzJDEucG9zKz1jaDw9MHhmZmZmPzE6Mjt9ZWxzZSBpZihjaD09PTkyKXsvLyBcIlxcXCJcblx0dGhpcyQxLmNvbnRhaW5zRXNjPXRydWU7d29yZCs9dGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsdGhpcyQxLnBvcyk7dmFyIGVzY1N0YXJ0PXRoaXMkMS5wb3M7aWYodGhpcyQxLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzJDEucG9zKSE9MTE3KS8vIFwidVwiXG5cdHRoaXMkMS5yYWlzZSh0aGlzJDEucG9zLFwiRXhwZWN0aW5nIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlIFxcXFx1WFhYWFwiKTsrK3RoaXMkMS5wb3M7dmFyIGVzYz10aGlzJDEucmVhZENvZGVQb2ludCgpO2lmKCEoZmlyc3Q/aXNJZGVudGlmaWVyU3RhcnQ6aXNJZGVudGlmaWVyQ2hhcikoZXNjLGFzdHJhbCkpdGhpcyQxLnJhaXNlKGVzY1N0YXJ0LFwiSW52YWxpZCBVbmljb2RlIGVzY2FwZVwiKTt3b3JkKz1jb2RlUG9pbnRUb1N0cmluZyhlc2MpO2NodW5rU3RhcnQ9dGhpcyQxLnBvczt9ZWxzZXticmVhazt9Zmlyc3Q9ZmFsc2U7fXJldHVybiB3b3JkK3RoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCx0aGlzLnBvcyk7fTsvLyBSZWFkIGFuIGlkZW50aWZpZXIgb3Iga2V5d29yZCB0b2tlbi4gV2lsbCBjaGVjayBmb3IgcmVzZXJ2ZWRcblx0Ly8gd29yZHMgd2hlbiBuZWNlc3NhcnkuXG5cdHBwJDcucmVhZFdvcmQ9ZnVuY3Rpb24oKXt2YXIgd29yZD10aGlzLnJlYWRXb3JkMSgpO3ZhciB0eXBlPXR0Lm5hbWU7aWYoKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbj49Nnx8IXRoaXMuY29udGFpbnNFc2MpJiZ0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkpdHlwZT1rZXl3b3JkVHlwZXNbd29yZF07cmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSx3b3JkKTt9O3ZhciB2ZXJzaW9uPVwiMy4zLjBcIjsvLyBUaGUgbWFpbiBleHBvcnRlZCBpbnRlcmZhY2UgKHVuZGVyIGBzZWxmLmFjb3JuYCB3aGVuIGluIHRoZVxuXHQvLyBicm93c2VyKSBpcyBhIGBwYXJzZWAgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGNvZGUgc3RyaW5nIGFuZFxuXHQvLyByZXR1cm5zIGFuIGFic3RyYWN0IHN5bnRheCB0cmVlIGFzIHNwZWNpZmllZCBieSBbTW96aWxsYSBwYXJzZXJcblx0Ly8gQVBJXVthcGldLlxuXHQvL1xuXHQvLyBbYXBpXTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9TcGlkZXJNb25rZXkvUGFyc2VyX0FQSVxuXHRmdW5jdGlvbiBwYXJzZShpbnB1dCxvcHRpb25zKXtyZXR1cm4gbmV3IFBhcnNlcihvcHRpb25zLGlucHV0KS5wYXJzZSgpO30vLyBUaGlzIGZ1bmN0aW9uIHRyaWVzIHRvIHBhcnNlIGEgc2luZ2xlIGV4cHJlc3Npb24gYXQgYSBnaXZlblxuXHQvLyBvZmZzZXQgaW4gYSBzdHJpbmcuIFVzZWZ1bCBmb3IgcGFyc2luZyBtaXhlZC1sYW5ndWFnZSBmb3JtYXRzXG5cdC8vIHRoYXQgZW1iZWQgSmF2YVNjcmlwdCBleHByZXNzaW9ucy5cblx0ZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uQXQoaW5wdXQscG9zLG9wdGlvbnMpe3ZhciBwPW5ldyBQYXJzZXIob3B0aW9ucyxpbnB1dCxwb3MpO3AubmV4dFRva2VuKCk7cmV0dXJuIHAucGFyc2VFeHByZXNzaW9uKCk7fS8vIEFjb3JuIGlzIG9yZ2FuaXplZCBhcyBhIHRva2VuaXplciBhbmQgYSByZWN1cnNpdmUtZGVzY2VudCBwYXJzZXIuXG5cdC8vIFRoZSBgdG9rZW5pemVyYCBleHBvcnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIHRoZSB0b2tlbml6ZXIuXG5cdGZ1bmN0aW9uIHRva2VuaXplcihpbnB1dCxvcHRpb25zKXtyZXR1cm4gbmV3IFBhcnNlcihvcHRpb25zLGlucHV0KTt9Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy52ZXJzaW9uPXZlcnNpb247Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy5wYXJzZT1wYXJzZTsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLnBhcnNlRXhwcmVzc2lvbkF0PXBhcnNlRXhwcmVzc2lvbkF0Oy8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMudG9rZW5pemVyPXRva2VuaXplcjsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLlBhcnNlcj1QYXJzZXI7Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy5wbHVnaW5zPXBsdWdpbnM7Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy5kZWZhdWx0T3B0aW9ucz1kZWZhdWx0T3B0aW9uczsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLlBvc2l0aW9uPVBvc2l0aW9uOy8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuU291cmNlTG9jYXRpb249U291cmNlTG9jYXRpb247Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy5nZXRMaW5lSW5mbz1nZXRMaW5lSW5mbzsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLk5vZGU9Tm9kZTsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLlRva2VuVHlwZT1Ub2tlblR5cGU7Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy50b2tUeXBlcz10dDsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLlRva0NvbnRleHQ9VG9rQ29udGV4dDsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLnRva0NvbnRleHRzPXR5cGVzOy8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuaXNJZGVudGlmaWVyQ2hhcj1pc0lkZW50aWZpZXJDaGFyOy8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuaXNJZGVudGlmaWVyU3RhcnQ9aXNJZGVudGlmaWVyU3RhcnQ7Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy5Ub2tlbj1Ub2tlbjsvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLmlzTmV3TGluZT1pc05ld0xpbmU7Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZXhwb3J0cy5saW5lQnJlYWs9bGluZUJyZWFrOy8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMubGluZUJyZWFrRz1saW5lQnJlYWtHO1xuXG4vKioqLyB9LFxuLyogMTIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRcdGlmKHRydWUpXG5cdFx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0XHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRcdGRlZmluZShcInN0YWNrLWVzMjAxNS1tb2R1bGVzXCIsIFtdLCBmYWN0b3J5KTtcblx0XHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRcdGV4cG9ydHNbXCJzdGFjay1lczIwMTUtbW9kdWxlc1wiXSA9IGZhY3RvcnkoKTtcblx0XHRlbHNlXG5cdFx0XHRyb290W1wic3RhY2stZXMyMDE1LW1vZHVsZXNcIl0gPSBmYWN0b3J5KCk7XG5cdH0pKHRoaXMsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuXHQvKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcblx0LyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5cdC8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdC8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcblx0LyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cdC8qKioqKiovXG5cdC8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHQvKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuXHQvKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcblx0LyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuXHQvKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG5cdC8qKioqKiovIFx0XHR9O1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdC8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0LyoqKioqKi9cblx0LyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0LyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0LyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcblx0LyoqKioqKi8gXHR9XG5cdC8qKioqKiovXG5cdC8qKioqKiovXG5cdC8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcblx0LyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5cdC8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblx0LyoqKioqKi9cblx0LyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuXHQvKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cdC8qKioqKiovXG5cdC8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5cdC8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cdC8qKioqKiovIH0pXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cdC8qKioqKiovIChbXG5cdC8qIDAgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL1widXNlIHN0cmljdFwiO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdFxuXHRcdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XHRcblx0XHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFx0XG5cdFx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcdFxuXHRcdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XHRcblx0XHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcdFxuXHRcdHZhciBTdGFjayA9IGZ1bmN0aW9uICgpIHtcblx0XHQgICAgZnVuY3Rpb24gLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovU3RhY2soKSB7XG5cdFx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTdGFjayk7XG5cdFx0XG5cdFx0ICAgICAgICB0aGlzLmFyciA9IFtdO1xuXHRcdCAgICB9XG5cdFx0XG5cdFx0ICAgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFN0YWNrLCBbe1xuXHRcdCAgICAgICAga2V5OiBcInB1c2hcIixcblx0XHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwdXNoKGVsKSB7XG5cdFx0ICAgICAgICAgICAgdGhpcy5hcnIucHVzaChlbCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH0sIHtcblx0XHQgICAgICAgIGtleTogXCJwb3BcIixcblx0XHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3AoKSB7XG5cdFx0ICAgICAgICAgICAgdGhpcy5hcnIubGVuZ3RoLS07XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH0sIHtcblx0XHQgICAgICAgIGtleTogXCJ0b3BcIixcblx0XHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b3AoKSB7XG5cdFx0ICAgICAgICAgICAgLy8gVE9ETzogLmxhc3QoKSBub3QgZGVmaW5lZCBpbiBvbGRlciBub2RlIHZlcnNpb25zXG5cdFx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuYXJyLmxhc3QoKTtcblx0XHQgICAgICAgICAgICByZXR1cm4gdGhpcy5hcnJbdGhpcy5hcnIubGVuZ3RoIC0gMV07XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH0sIHtcblx0XHQgICAgICAgIGtleTogXCJ3aXRoRWxlbWVudFwiLFxuXHRcdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdpdGhFbGVtZW50KGVsLCBjYWxsYmFjaywgY29udGV4dCkge1xuXHRcdCAgICAgICAgICAgIHRoaXMucHVzaChlbCk7XG5cdFx0ICAgICAgICAgICAgdHJ5IHtcblx0XHQgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0KTtcblx0XHQgICAgICAgICAgICB9IGZpbmFsbHkge1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLnBvcCgpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgfV0pO1xuXHRcdCAgICByZXR1cm4gU3RhY2s7XG5cdFx0fSgpO1xuXHRcdFxuXHRcdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuZGVmYXVsdCA9IFN0YWNrO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XHRcblx0XHRleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG5cdFx0ICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuXHRcdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuXHRcdCAgfVxuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XHRcblx0XHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcdFxuXHRcdHZhciBfZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcdFxuXHRcdHZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFx0XG5cdFx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuXHRcdCAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG5cdFx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuXHRcdCAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcblx0XHQgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG5cdFx0ICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcblx0XHQgICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcdFxuXHRcdCAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcblx0XHQgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcblx0XHQgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG5cdFx0ICAgIHJldHVybiBDb25zdHJ1Y3Rvcjtcblx0XHQgIH07XG5cdFx0fSgpO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMyAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA0ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcdHZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KS5PYmplY3Q7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXtcblx0XHQgIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA1ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHR2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFx0Ly8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcblx0XHQkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogX193ZWJwYWNrX3JlcXVpcmVfXygxMikuZn0pO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNiAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0dmFyIGdsb2JhbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNylcblx0XHQgICwgY29yZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KVxuXHRcdCAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdFx0ICAsIGhpZGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpXG5cdFx0ICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXHRcdFxuXHRcdHZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcblx0XHQgIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG5cdFx0ICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuXHRcdCAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcblx0XHQgICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG5cdFx0ICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuXHRcdCAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0Lldcblx0XHQgICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuXHRcdCAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuXHRcdCAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cblx0XHQgICAgLCBrZXksIG93biwgb3V0O1xuXHRcdCAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG5cdFx0ICBmb3Ioa2V5IGluIHNvdXJjZSl7XG5cdFx0ICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuXHRcdCAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuXHRcdCAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG5cdFx0ICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG5cdFx0ICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG5cdFx0ICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuXHRcdCAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuXHRcdCAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuXHRcdCAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuXHRcdCAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuXHRcdCAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuXHRcdCAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XG5cdFx0ICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG5cdFx0ICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcblx0XHQgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcblx0XHQgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcblx0XHQgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcblx0XHQgICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG5cdFx0ICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0ICAgICAgfTtcblx0XHQgICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG5cdFx0ICAgICAgcmV0dXJuIEY7XG5cdFx0ICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuXHRcdCAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG5cdFx0ICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuXHRcdCAgICBpZihJU19QUk9UTyl7XG5cdFx0ICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuXHRcdCAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG5cdFx0ICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG5cdFx0ICAgIH1cblx0XHQgIH1cblx0XHR9O1xuXHRcdC8vIHR5cGUgYml0bWFwXG5cdFx0JGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcblx0XHQkZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuXHRcdCRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG5cdFx0JGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuXHRcdCRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuXHRcdCRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuXHRcdCRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuXHRcdCRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcblx0XHRtb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA3ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxuXHRcdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuXHRcdCAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRcdGlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cdFxuXHQvKioqLyB9LFxuXHQvKiA4ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHR2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuXHRcdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXHRcblx0LyoqKi8gfSxcblx0LyogOSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0Ly8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5cdFx0dmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG5cdFx0ICBhRnVuY3Rpb24oZm4pO1xuXHRcdCAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcblx0XHQgIHN3aXRjaChsZW5ndGgpe1xuXHRcdCAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcblx0XHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcblx0XHQgICAgfTtcblx0XHQgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG5cdFx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG5cdFx0ICAgIH07XG5cdFx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuXHRcdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuXHRcdCAgICB9O1xuXHRcdCAgfVxuXHRcdCAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuXHRcdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcblx0XHQgIH07XG5cdFx0fTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDEwICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0XHQgIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG5cdFx0ICByZXR1cm4gaXQ7XG5cdFx0fTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDExICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHR2YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG5cdFx0ICAsIGNyZWF0ZURlc2MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcblx0XHQgIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG5cdFx0fSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG5cdFx0ICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuXHRcdCAgcmV0dXJuIG9iamVjdDtcblx0XHR9O1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTIgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdHZhciBhbk9iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG5cdFx0ICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcblx0XHQgICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHRcdCAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0XHRcblx0XHRleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuXHRcdCAgYW5PYmplY3QoTyk7XG5cdFx0ICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG5cdFx0ICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcblx0XHQgIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG5cdFx0ICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcblx0XHQgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblx0XHQgIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuXHRcdCAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuXHRcdCAgcmV0dXJuIE87XG5cdFx0fTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDEzICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHR2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0XHQgIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuXHRcdCAgcmV0dXJuIGl0O1xuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxNCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdFx0ICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxNSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygxNikgJiYgIV9fd2VicGFja19yZXF1aXJlX18oMTcpKGZ1bmN0aW9uKCl7XG5cdFx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19yZXF1aXJlX18oMTgpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcblx0XHR9KTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDE2ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygxNykoZnVuY3Rpb24oKXtcblx0XHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG5cdFx0fSk7XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxNyAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcblx0XHQgIHRyeSB7XG5cdFx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0XHQgIH0gY2F0Y2goZSl7XG5cdFx0ICAgIHJldHVybiB0cnVlO1xuXHRcdCAgfVxuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxOCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0XHQgICwgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLmRvY3VtZW50XG5cdFx0ICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCdcblx0XHQgICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdFx0ICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxOSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0Ly8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cdFx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdFx0Ly8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcblx0XHQvLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuXHRcdCAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG5cdFx0ICB2YXIgZm4sIHZhbDtcblx0XHQgIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcblx0XHQgIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcblx0XHQgIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdFx0ICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG5cdFx0fTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDIwICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuXHRcdCAgcmV0dXJuIHtcblx0XHQgICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuXHRcdCAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG5cdFx0ICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcblx0XHQgICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuXHRcdCAgfTtcblx0XHR9O1xuXHRcblx0LyoqKi8gfVxuXHQvKioqKioqLyBdKVxuXHR9KTtcblx0O1xuXHQvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NBeU5tTmxPVE01TnprM01EZ3hNV0U0TWpNMk5pSXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM1JoWTJzdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyZHNiMkpoYkM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIzSmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMk4wZUM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aExXWjFibU4wYVc5dUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaHBaR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXVTRMV1J2YlMxa1pXWnBibVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptRnBiSE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkc5dExXTnlaV0YwWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXdjbWx0YVhScGRtVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjSEp2Y0dWeWRIa3RaR1Z6WXk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFFzVHp0QlExWkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWQ1FVRmxPMEZCUTJZN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzB0RGRFTnhRaXhMTzBGQlEycENMRGhEUVVGak8wRkJRVUU3TzBGQlExWXNZMEZCU3l4SFFVRk1MRWRCUVZjc1JVRkJXRHRCUVVOSU96czdPemhDUVVWSkxFVXNSVUZCU1R0QlFVTk1MR3RDUVVGTExFZEJRVXdzUTBGQlV5eEpRVUZVTEVOQlFXTXNSVUZCWkR0QlFVTklPenM3SzBKQlJVczdRVUZEUml4clFrRkJTeXhIUVVGTUxFTkJRVk1zVFVGQlZEdEJRVU5JT3pzN0swSkJSVXM3UVVGRFJqdEJRVU5CTzBGQlEwRXNiMEpCUVU4c1MwRkJTeXhIUVVGTUxFTkJRVk1zUzBGQlN5eEhRVUZNTEVOQlFWTXNUVUZCVkN4SFFVRnJRaXhEUVVFelFpeERRVUZRTzBGQlEwZzdPenR4UTBGRlZ5eEZMRVZCUVVrc1VTeEZRVUZWTEU4c1JVRkJVenRCUVVNdlFpeHJRa0ZCU3l4SlFVRk1MRU5CUVZVc1JVRkJWanRCUVVOQkxHbENRVUZKTzBGQlEwRXNNRUpCUVZNc1NVRkJWQ3hEUVVGakxFOUJRV1E3UVVGRFNDeGpRVVpFTEZOQlJWVTdRVUZEVGl4elFrRkJTeXhIUVVGTU8wRkJRMGc3UVVGRFNqczdPenM3TWtOQk1VSm5RaXhMT3pzN096czdRVU5CY2tJN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5TUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRU3gxUTBGQmMwTXNkVU5CUVhWRExHZENRVUZuUWpzN1FVRkZOMFk3UVVGRFFUdEJRVU5CTEc5Q1FVRnRRaXhyUWtGQmEwSTdRVUZEY2tNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVWQlFVTXNSenM3T3pzN08wRkRNVUpFTEcxQ1FVRnJRaXgxUkRzN096czdPMEZEUVd4Q08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSenM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTEhORlFVRjFSU3d3UTBGQk1FTXNSVHM3T3pzN08wRkRSbXBJTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h2UlVGQmJVVTdRVUZEYmtVN1FVRkRRU3h6UmtGQmNVWTdRVUZEY2tZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVmM3UVVGRFdDeFZRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEdkRVFVRXJRenRCUVVNdlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hsUVVGak8wRkJRMlFzWlVGQll6dEJRVU5rTEdWQlFXTTdRVUZEWkN4bFFVRmpPMEZCUTJRc1owSkJRV1U3UVVGRFppeG5Ra0ZCWlR0QlFVTm1MR2RDUVVGbE8wRkJRMllzYVVKQlFXZENPMEZCUTJoQ0xEQkNPenM3T3pzN1FVTTFSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkME5CUVhWRExHZERPenM3T3pzN1FVTklka01zT0VKQlFUWkNPMEZCUXpkQ0xITkRRVUZ4UXl4blF6czdPenM3TzBGRFJISkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1J6czdPenM3TzBGRGJrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhMRlZCUVZVN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTBwQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTkdRVHRCUVVOQkxITkZRVUZ6UlN4blFrRkJaMElzVlVGQlZTeEhRVUZITzBGQlEyNUhMRVZCUVVNc1JUczdPenM3TzBGRFJrUTdRVUZEUVR0QlFVTkJMR3REUVVGcFF5eFJRVUZSTEdkQ1FVRm5RaXhWUVVGVkxFZEJRVWM3UVVGRGRFVXNSVUZCUXl4Rk96czdPenM3UVVOSVJEdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWNpTENKbWFXeGxJam9pYzNSaFkyc3RaWE15TURFMUxXMXZaSFZzWlhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRnZDJWaWNHRmphMVZ1YVhabGNuTmhiRTF2WkhWc1pVUmxabWx1YVhScGIyNG9jbTl2ZEN3Z1ptRmpkRzl5ZVNrZ2UxeHVYSFJwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MGJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXTjBiM0o1S0NrN1hHNWNkR1ZzYzJVZ2FXWW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0tWeHVYSFJjZEdSbFptbHVaU2hjSW5OMFlXTnJMV1Z6TWpBeE5TMXRiMlIxYkdWelhDSXNJRnRkTENCbVlXTjBiM0o1S1R0Y2JseDBaV3h6WlNCcFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MFpYaHdiM0owYzF0Y0luTjBZV05yTFdWek1qQXhOUzF0YjJSMWJHVnpYQ0pkSUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJsYkhObFhHNWNkRngwY205dmRGdGNJbk4wWVdOckxXVnpNakF4TlMxdGIyUjFiR1Z6WENKZElEMGdabUZqZEc5eWVTZ3BPMXh1ZlNrb2RHaHBjeXdnWm5WdVkzUnBiMjRvS1NCN1hHNXlaWFIxY200Z1hHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVYRzRnS2lvdklpd2lJRngwTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBkbUZ5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE1nUFNCN2ZUdGNibHh1SUZ4MEx5OGdWR2hsSUhKbGNYVnBjbVVnWm5WdVkzUnBiMjVjYmlCY2RHWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4dUlGeDBYSFF2THlCRGFHVmpheUJwWmlCdGIyUjFiR1VnYVhNZ2FXNGdZMkZqYUdWY2JpQmNkRngwYVdZb2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwcFhHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc1Y2JpQmNkRngwTHk4Z1EzSmxZWFJsSUdFZ2JtVjNJRzF2WkhWc1pTQW9ZVzVrSUhCMWRDQnBkQ0JwYm5SdklIUm9aU0JqWVdOb1pTbGNiaUJjZEZ4MGRtRnlJRzF2WkhWc1pTQTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRJRDBnZTF4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OUxGeHVJRngwWEhSY2RHbGtPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzYjJGa1pXUTZJR1poYkhObFhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBPMXh1WEc0Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmlCY2RGeDBiVzlrZFd4bExteHZZV1JsWkNBOUlIUnlkV1U3WEc1Y2JpQmNkRngwTHk4Z1VtVjBkWEp1SUhSb1pTQmxlSEJ2Y25SeklHOW1JSFJvWlNCdGIyUjFiR1ZjYmlCY2RGeDBjbVYwZFhKdUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dUlGeDBmVnh1WEc1Y2JpQmNkQzh2SUdWNGNHOXpaU0IwYUdVZ2JXOWtkV3hsY3lCdlltcGxZM1FnS0Y5ZmQyVmljR0ZqYTE5dGIyUjFiR1Z6WDE4cFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG0wZ1BTQnRiMlIxYkdWek8xeHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVqSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3p0Y2JseHVJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0E5SUZ3aVhDSTdYRzVjYmlCY2RDOHZJRXh2WVdRZ1pXNTBjbmtnYlc5a2RXeGxJR0Z1WkNCeVpYUjFjbTRnWlhod2IzSjBjMXh1SUZ4MGNtVjBkWEp1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b01DazdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQjNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQXlObU5sT1RNNU56azNNRGd4TVdFNE1qTTJObHh1SUNvcUx5SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZOMFlXTnJJSHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYSnlJRDBnVzEwN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEIxYzJnb1pXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ5Y2k1d2RYTm9LR1ZzS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQndiM0FvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aGNuSXViR1Z1WjNSb0xTMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZEc5d0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUM1c1lYTjBLQ2tnYm05MElHUmxabWx1WldRZ2FXNGdiMnhrWlhJZ2JtOWtaU0IyWlhKemFXOXVjMXh5WEc0Z0lDQWdJQ0FnSUM4dklISmxkSFZ5YmlCMGFHbHpMbUZ5Y2k1c1lYTjBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5VzNSb2FYTXVZWEp5TG14bGJtZDBhQ0F0SURGZE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSGRwZEdoRmJHVnRaVzUwS0dWc0xDQmpZV3hzWW1GamF5d2dZMjl1ZEdWNGRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSFZ6YUNobGJDazdYSEpjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzdVkyRnNiQ2hqYjI1MFpYaDBLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHWnBibUZzYkhrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Y0NncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5emRHRmpheTVxYzF4dUlDb3FMeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9hVzV6ZEdGdVkyVXNJRU52Ym5OMGNuVmpkRzl5S1NCN1hHNGdJR2xtSUNnaEtHbHVjM1JoYm1ObElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtUdGNiaUFnZlZ4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHh1ZG1GeUlGOWtaV1pwYm1WUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhsY0lpazdYRzVjYm5aaGNpQmZaR1ZtYVc1bFVISnZjR1Z5ZEhreUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlpHVm1hVzVsVUhKdmNHVnlkSGtwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHRnlaMlYwTENCd2NtOXdjeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmtaWE5qY21sd2RHOXlJRDBnY0hKdmNITmJhVjA3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9YQ0oyWVd4MVpWd2lJR2x1SUdSbGMyTnlhWEIwYjNJcElHUmxjMk55YVhCMGIzSXVkM0pwZEdGaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0tEQXNJRjlrWldacGJtVlFjbTl3WlhKMGVUSXVaR1ZtWVhWc2RDa29kR0Z5WjJWMExDQmtaWE5qY21sd2RHOXlMbXRsZVN3Z1pHVnpZM0pwY0hSdmNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaERiMjV6ZEhKMVkzUnZjaXdnY0hKdmRHOVFjbTl3Y3l3Z2MzUmhkR2xqVUhKdmNITXBJSHRjYmlBZ0lDQnBaaUFvY0hKdmRHOVFjbTl3Y3lrZ1pHVm1hVzVsVUhKdmNHVnlkR2xsY3loRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXNJSEJ5YjNSdlVISnZjSE1wTzF4dUlDQWdJR2xtSUNoemRHRjBhV05RY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE8xeHVJQ0FnSUhKbGRIVnliaUJEYjI1emRISjFZM1J2Y2p0Y2JpQWdmVHRjYm4wb0tUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNNdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ00xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTY3BPMXh1ZG1GeUlDUlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUxDQmtaWE5qS1h0Y2JpQWdjbVYwZFhKdUlDUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU3dnWkdWell5azdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTkZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiaTh2SURFNUxqRXVNaTQwSUM4Z01UVXVNaTR6TGpZZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcExDQW5UMkpxWldOMEp5d2dlMlJsWm1sdVpWQnliM0JsY25SNU9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bWZTazdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJRkJTVDFSUFZGbFFSU0E5SUNkd2NtOTBiM1I1Y0dVbk8xeHVYRzUyWVhJZ0pHVjRjRzl5ZENBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUc1aGJXVXNJSE52ZFhKalpTbDdYRzRnSUhaaGNpQkpVMTlHVDFKRFJVUWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUdYRzRnSUNBZ0xDQkpVMTlIVEU5Q1FVd2dQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUhYRzRnSUNBZ0xDQkpVMTlUVkVGVVNVTWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVRYRzRnSUNBZ0xDQkpVMTlRVWs5VVR5QWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVFYRzRnSUNBZ0xDQkpVMTlDU1U1RUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUNYRzRnSUNBZ0xDQkpVMTlYVWtGUUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVhYRzRnSUNBZ0xDQmxlSEJ2Y25SeklDQWdQU0JKVTE5SFRFOUNRVXdnUHlCamIzSmxJRG9nWTI5eVpWdHVZVzFsWFNCOGZDQW9ZMjl5WlZ0dVlXMWxYU0E5SUh0OUtWeHVJQ0FnSUN3Z1pYaHdVSEp2ZEc4Z0lEMGdaWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQjBZWEpuWlhRZ0lDQWdQU0JKVTE5SFRFOUNRVXdnUHlCbmJHOWlZV3dnT2lCSlUxOVRWRUZVU1VNZ1B5Qm5iRzlpWVd4YmJtRnRaVjBnT2lBb1oyeHZZbUZzVzI1aGJXVmRJSHg4SUh0OUtWdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQnJaWGtzSUc5M2Jpd2diM1YwTzF4dUlDQnBaaWhKVTE5SFRFOUNRVXdwYzI5MWNtTmxJRDBnYm1GdFpUdGNiaUFnWm05eUtHdGxlU0JwYmlCemIzVnlZMlVwZTF4dUlDQWdJQzh2SUdOdmJuUmhhVzV6SUdsdUlHNWhkR2wyWlZ4dUlDQWdJRzkzYmlBOUlDRkpVMTlHVDFKRFJVUWdKaVlnZEdGeVoyVjBJQ1ltSUhSaGNtZGxkRnRyWlhsZElDRTlQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvYjNkdUlDWW1JR3RsZVNCcGJpQmxlSEJ2Y25SektXTnZiblJwYm5WbE8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCdVlYUnBkbVVnYjNJZ2NHRnpjMlZrWEc0Z0lDQWdiM1YwSUQwZ2IzZHVJRDhnZEdGeVoyVjBXMnRsZVYwZ09pQnpiM1Z5WTJWYmEyVjVYVHRjYmlBZ0lDQXZMeUJ3Y21WMlpXNTBJR2RzYjJKaGJDQndiMnhzZFhScGIyNGdabTl5SUc1aGJXVnpjR0ZqWlhOY2JpQWdJQ0JsZUhCdmNuUnpXMnRsZVYwZ1BTQkpVMTlIVEU5Q1FVd2dKaVlnZEhsd1pXOW1JSFJoY21kbGRGdHJaWGxkSUNFOUlDZG1kVzVqZEdsdmJpY2dQeUJ6YjNWeVkyVmJhMlY1WFZ4dUlDQWdJQzh2SUdKcGJtUWdkR2x0WlhKeklIUnZJR2RzYjJKaGJDQm1iM0lnWTJGc2JDQm1jbTl0SUdWNGNHOXlkQ0JqYjI1MFpYaDBYRzRnSUNBZ09pQkpVMTlDU1U1RUlDWW1JRzkzYmlBL0lHTjBlQ2h2ZFhRc0lHZHNiMkpoYkNsY2JpQWdJQ0F2THlCM2NtRndJR2RzYjJKaGJDQmpiMjV6ZEhKMVkzUnZjbk1nWm05eUlIQnlaWFpsYm5RZ1kyaGhibWRsSUhSb1pXMGdhVzRnYkdsaWNtRnllVnh1SUNBZ0lEb2dTVk5mVjFKQlVDQW1KaUIwWVhKblpYUmJhMlY1WFNBOVBTQnZkWFFnUHlBb1puVnVZM1JwYjI0b1F5bDdYRzRnSUNBZ0lDQjJZWElnUmlBOUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdseklHbHVjM1JoYm1ObGIyWWdReWw3WEc0Z0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBd09pQnlaWFIxY200Z2JtVjNJRU03WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCdVpYY2dReWhoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb2djbVYwZFhKdUlHNWxkeUJES0dFc0lHSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ2NtVjBkWEp1SUc1bGR5QkRLR0VzSUdJc0lHTXBPMXh1SUNBZ0lDQWdJQ0I5SUhKbGRIVnliaUJETG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdSbHRRVWs5VVQxUlpVRVZkSUQwZ1ExdFFVazlVVDFSWlVFVmRPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFWTdYRzRnSUNBZ0x5OGdiV0ZyWlNCemRHRjBhV01nZG1WeWMybHZibk1nWm05eUlIQnliM1J2ZEhsd1pTQnRaWFJvYjJSelhHNGdJQ0FnZlNrb2IzVjBLU0E2SUVsVFgxQlNUMVJQSUNZbUlIUjVjR1Z2WmlCdmRYUWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTjBlQ2hHZFc1amRHbHZiaTVqWVd4c0xDQnZkWFFwSURvZ2IzVjBPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQndjbTkwYnlCdFpYUm9iMlJ6SUhSdklHTnZjbVV1SlVOUFRsTlVVbFZEVkU5U0pTNXRaWFJvYjJSekxpVk9RVTFGSlZ4dUlDQWdJR2xtS0VsVFgxQlNUMVJQS1h0Y2JpQWdJQ0FnSUNobGVIQnZjblJ6TG5acGNuUjFZV3dnZkh3Z0tHVjRjRzl5ZEhNdWRtbHlkSFZoYkNBOUlIdDlLU2xiYTJWNVhTQTlJRzkxZER0Y2JpQWdJQ0FnSUM4dklHVjRjRzl5ZENCd2NtOTBieUJ0WlhSb2IyUnpJSFJ2SUdOdmNtVXVKVU5QVGxOVVVsVkRWRTlTSlM1d2NtOTBiM1I1Y0dVdUpVNUJUVVVsWEc0Z0lDQWdJQ0JwWmloMGVYQmxJQ1lnSkdWNGNHOXlkQzVTSUNZbUlHVjRjRkJ5YjNSdklDWW1JQ0ZsZUhCUWNtOTBiMXRyWlhsZEtXaHBaR1VvWlhod1VISnZkRzhzSUd0bGVTd2diM1YwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc0dkx5QjBlWEJsSUdKcGRHMWhjRnh1SkdWNGNHOXlkQzVHSUQwZ01Uc2dJQ0F2THlCbWIzSmpaV1JjYmlSbGVIQnZjblF1UnlBOUlESTdJQ0FnTHk4Z1oyeHZZbUZzWEc0a1pYaHdiM0owTGxNZ1BTQTBPeUFnSUM4dklITjBZWFJwWTF4dUpHVjRjRzl5ZEM1UUlEMGdPRHNnSUNBdkx5QndjbTkwYjF4dUpHVjRjRzl5ZEM1Q0lEMGdNVFk3SUNBdkx5QmlhVzVrWEc0a1pYaHdiM0owTGxjZ1BTQXpNanNnSUM4dklIZHlZWEJjYmlSbGVIQnZjblF1VlNBOUlEWTBPeUFnTHk4Z2MyRm1aVnh1SkdWNGNHOXlkQzVTSUQwZ01USTRPeUF2THlCeVpXRnNJSEJ5YjNSdklHMWxkR2h2WkNCbWIzSWdZR3hwWW5KaGNubGdJRnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FrWlhod2IzSjBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWxlSEJ2Y25RdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTJYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZlbXh2YVhKdlkyc3ZZMjl5WlMxcWN5OXBjM04xWlhNdk9EWWphWE56ZFdWamIyMXRaVzUwTFRFeE5UYzFPVEF5T0Z4dWRtRnlJR2RzYjJKaGJDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1VFdGMGFDQTlQU0JOWVhSb1hHNGdJRDhnZDJsdVpHOTNJRG9nZEhsd1pXOW1JSE5sYkdZZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2MyVnNaaTVOWVhSb0lEMDlJRTFoZEdnZ1B5QnpaV3htSURvZ1JuVnVZM1JwYjI0b0ozSmxkSFZ5YmlCMGFHbHpKeWtvS1R0Y2JtbG1LSFI1Y0dWdlppQmZYMmNnUFQwZ0oyNTFiV0psY2ljcFgxOW5JRDBnWjJ4dlltRnNPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJkc2IySmhiQzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURkY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJblpoY2lCamIzSmxJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZG1WeWMybHZiam9nSnpJdU5DNHdKMzA3WEc1cFppaDBlWEJsYjJZZ1gxOWxJRDA5SUNkdWRXMWlaWEluS1Y5ZlpTQTlJR052Y21VN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNWtaV1pjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMjl5WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEaGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSWk4dklHOXdkR2x2Ym1Gc0lDOGdjMmx0Y0d4bElHTnZiblJsZUhRZ1ltbHVaR2x1WjF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOMGVDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGxjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaDBlWEJsYjJZZ2FYUWdJVDBnSjJaMWJtTjBhVzl1SnlsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhRZ0t5QW5JR2x6SUc1dmRDQmhJR1oxYm1OMGFXOXVJU2NwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloTFdaMWJtTjBhVzl1TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UQmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5aaGNpQmtVQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5bGNiaUFnTENCamNtVmhkR1ZFWlhOaklEMGdjbVZ4ZFdseVpTZ25MaTlmY0hKdmNHVnlkSGt0WkdWell5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0JyWlhrc0lIWmhiSFZsS1h0Y2JpQWdjbVYwZFhKdUlHUlFMbVlvYjJKcVpXTjBMQ0JyWlhrc0lHTnlaV0YwWlVSbGMyTW9NU3dnZG1Gc2RXVXBLVHRjYm4wZ09pQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHdGxlU3dnZG1Gc2RXVXBlMXh1SUNCdlltcGxZM1JiYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0J5WlhSMWNtNGdiMkpxWldOME8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXhYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJRWxGT0Y5RVQwMWZSRVZHU1U1RklEMGdjbVZ4ZFdseVpTZ25MaTlmYVdVNExXUnZiUzFrWldacGJtVW5LVnh1SUNBc0lIUnZVSEpwYldsMGFYWmxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVR0Y2JseHVaWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTQTZJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcGUxeHVJQ0JoYms5aWFtVmpkQ2hQS1R0Y2JpQWdVQ0E5SUhSdlVISnBiV2wwYVhabEtGQXNJSFJ5ZFdVcE8xeHVJQ0JoYms5aWFtVmpkQ2hCZEhSeWFXSjFkR1Z6S1R0Y2JpQWdhV1lvU1VVNFgwUlBUVjlFUlVaSlRrVXBkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdaRkFvVHl3Z1VDd2dRWFIwY21saWRYUmxjeWs3WEc0Z0lIMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdhV1lvSjJkbGRDY2dhVzRnUVhSMGNtbGlkWFJsY3lCOGZDQW5jMlYwSnlCcGJpQkJkSFJ5YVdKMWRHVnpLWFJvY205M0lGUjVjR1ZGY25KdmNpZ25RV05qWlhOemIzSnpJRzV2ZENCemRYQndiM0owWldRaEp5azdYRzRnSUdsbUtDZDJZV3gxWlNjZ2FXNGdRWFIwY21saWRYUmxjeWxQVzFCZElEMGdRWFIwY21saWRYUmxjeTUyWVd4MVpUdGNiaUFnY21WMGRYSnVJRTg3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WkhBdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhNbHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdhV1lvSVdselQySnFaV04wS0dsMEtTbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUWdLeUFuSUdseklHNXZkQ0JoYmlCdlltcGxZM1FoSnlrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXpYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFQwZ0oyOWlhbVZqZENjZ1B5QnBkQ0FoUFQwZ2JuVnNiQ0E2SUhSNWNHVnZaaUJwZENBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsekxXOWlhbVZqZEM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTBYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUNZbUlDRnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29jbVZ4ZFdseVpTZ25MaTlmWkc5dExXTnlaV0YwWlNjcEtDZGthWFluS1N3Z0oyRW5MQ0I3WjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdOenNnZlgwcExtRWdJVDBnTnp0Y2JuMHBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBaVGd0Wkc5dExXUmxabWx1WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5QlVhR0Z1YXlkeklFbEZPQ0JtYjNJZ2FHbHpJR1oxYm01NUlHUmxabWx1WlZCeWIzQmxjblI1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2UzMHNJQ2RoSnl3Z2UyZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SURjN0lIMTlLUzVoSUNFOUlEYzdYRzU5S1R0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhObHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGVHVmpLWHRjYmlBZ2RISjVJSHRjYmlBZ0lDQnlaWFIxY200Z0lTRmxlR1ZqS0NrN1hHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlpoYVd4ekxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVGRjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1pHOWpkVzFsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVrYjJOMWJXVnVkRnh1SUNBdkx5QnBiaUJ2YkdRZ1NVVWdkSGx3Wlc5bUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFnYVhNZ0oyOWlhbVZqZENkY2JpQWdMQ0JwY3lBOUlHbHpUMkpxWldOMEtHUnZZM1Z0Wlc1MEtTQW1KaUJwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYTWdQeUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtHbDBLU0E2SUh0OU8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaRzl0TFdOeVpXRjBaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFNFhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlBM0xqRXVNU0JVYjFCeWFXMXBkR2wyWlNocGJuQjFkQ0JiTENCUWNtVm1aWEp5WldSVWVYQmxYU2xjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcE8xeHVMeThnYVc1emRHVmhaQ0J2WmlCMGFHVWdSVk0ySUhOd1pXTWdkbVZ5YzJsdmJpd2dkMlVnWkdsa2JpZDBJR2x0Y0d4bGJXVnVkQ0JBUUhSdlVISnBiV2wwYVhabElHTmhjMlZjYmk4dklHRnVaQ0IwYUdVZ2MyVmpiMjVrSUdGeVozVnRaVzUwSUMwZ1pteGhaeUF0SUhCeVpXWmxjbkpsWkNCMGVYQmxJR2x6SUdFZ2MzUnlhVzVuWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMExDQlRLWHRjYmlBZ2FXWW9JV2x6VDJKcVpXTjBLR2wwS1NseVpYUjFjbTRnYVhRN1hHNGdJSFpoY2lCbWJpd2dkbUZzTzF4dUlDQnBaaWhUSUNZbUlIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MGIxTjBjbWx1WnlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzRnSUdsbUtIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MllXeDFaVTltS1NBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNGcGMwOWlhbVZqZENoMllXd2dQU0JtYmk1allXeHNLR2wwS1NrcGNtVjBkWEp1SUhaaGJEdGNiaUFnYVdZb0lWTWdKaVlnZEhsd1pXOW1JQ2htYmlBOUlHbDBMblJ2VTNSeWFXNW5LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twY21WMGRYSnVJSFpoYkR0Y2JpQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1SjNRZ1kyOXVkbVZ5ZENCdlltcGxZM1FnZEc4Z2NISnBiV2wwYVhabElIWmhiSFZsWENJcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0Y0hKcGJXbDBhWFpsTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UbGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWW1sMGJXRndMQ0IyWVd4MVpTbDdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdaVzUxYldWeVlXSnNaU0FnT2lBaEtHSnBkRzFoY0NBbUlERXBMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nSVNoaWFYUnRZWEFnSmlBeUtTeGNiaUFnSUNCM2NtbDBZV0pzWlNBZ0lDQTZJQ0VvWW1sMGJXRndJQ1lnTkNrc1hHNGdJQ0FnZG1Gc2RXVWdJQ0FnSUNBZ09pQjJZV3gxWlZ4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY0hKdmNHVnlkSGt0WkdWell5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREl3WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxuXG4vKioqLyB9LFxuLyogMTIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8ndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLkxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9zZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0XG5cdHZhciBfc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldCk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEzKTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHR2YXIgX21hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMTE3KTtcblx0XG5cdHZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cdFxuXHR2YXIgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3Byb3BlcnR5QWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7XG5cdFxuXHR2YXIgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjUpO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBMSVNURU5FUlNfQllfQUNDRVNTT1IgPSBuZXcgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX21hcDIuZGVmYXVsdCgpO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovdmFyIExpc3RlbmVyID0gZXhwb3J0cy5MaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL0xpc3RlbmVyKG9iaiwgcHJvcE5hbWUpIHtcblx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki92YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBMaXN0ZW5lcik7XG5cdFxuXHQgICAgICAgIHRoaXMuc2VsZWN0aW9uSXRlbXMgPSBuZXcgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3NldDIuZGVmYXVsdCgpO1xuXHRcblx0ICAgICAgICB0aGlzLnByb3BlcnR5QWNjZXNzb3IgPSBuZXcgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3Byb3BlcnR5QWNjZXNzb3IuUHJvcGVydHlBY2Nlc3NvcihvYmosIHByb3BOYW1lKTtcblx0ICAgICAgICB0aGlzLnByb3BlcnR5QWNjZXNzb3Iuc2V0dGVyQ2FsbGJhY2soZnVuY3Rpb24gKG5ld1ZhbHVlKSAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki97XG5cdCAgICAgICAgICAgIHJldHVybiAoLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovX3RoaXMubmV3VmFsdWVTZXQobmV3VmFsdWUpXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTGlzdGVuZXIsIFt7XG5cdCAgICAgICAga2V5OiAnYWRkSGFuZGxlcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEhhbmRsZXIoc2VsZWN0aW9uSXRlbSkge1xuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkl0ZW1zLmFkZChzZWxlY3Rpb25JdGVtKTtcblx0ICAgICAgICAgICAgc2VsZWN0aW9uSXRlbS5wcm9wZXJ0eUFjY2Vzc29ycy5hZGQodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ25ld1ZhbHVlU2V0Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmV3VmFsdWVTZXQobmV3VmFsdWUpIHtcblx0ICAgICAgICAgICAgaWYgKCEgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovKDAsIF91dGlscy5pc1ByaW1pdGl2ZSkobmV3VmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlY2FsY3VsYXRlKCk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHRoaXMuYXBwbHlDYWxsYmFja3MoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnYXBwbHlDYWxsYmFja3MnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUNhbGxiYWNrcygpIHtcblx0ICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25JdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb25JdGVtKSB7XG5cdCAgICAgICAgICAgICAgICBzZWxlY3Rpb25JdGVtLnByb3BlcnR5QXNzaWduZWQoKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlY2FsY3VsYXRlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjYWxjdWxhdGUoKSB7XG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaG91bGQgcmVjYWxjdWxhdGUnKTtcblx0XG5cdCAgICAgICAgICAgIHZhciBzZWxlY3Rpb25JdGVtcyA9IFtdO1xuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbkl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgIHNlbGVjdGlvbkl0ZW1zLnB1c2goc2VsZWN0aW9uSXRlbSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgICAgc2VsZWN0aW9uSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0aW9uSXRlbSkge1xuXHQgICAgICAgICAgICAgICAgc2VsZWN0aW9uSXRlbS5yZW1vdmVMaXN0ZW5lcnMoKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHNlbGVjdGlvbkl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbkl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgIHNlbGVjdGlvbkl0ZW0uaW5zdGFsbExpc3RlbmVycygpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XSwgW3tcblx0ICAgICAgICBrZXk6ICd3YXRjaFByb3BlcnR5Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd2F0Y2hQcm9wZXJ0eShvYmosIHByb3BOYW1lKSB7XG5cdCAgICAgICAgICAgIHZhciBtYXBPYmo7XG5cdCAgICAgICAgICAgIGlmIChMSVNURU5FUlNfQllfQUNDRVNTT1IuaGFzKG9iaikpIHtcblx0ICAgICAgICAgICAgICAgIG1hcE9iaiA9IExJU1RFTkVSU19CWV9BQ0NFU1NPUi5nZXQob2JqKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIG1hcE9iaiA9IHt9O1xuXHQgICAgICAgICAgICAgICAgTElTVEVORVJTX0JZX0FDQ0VTU09SLnNldChvYmosIG1hcE9iaik7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGlmICghbWFwT2JqLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgbWFwT2JqW3Byb3BOYW1lXSA9IG5ldyBMaXN0ZW5lcihvYmosIHByb3BOYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG1hcE9ialtwcm9wTmFtZV07XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHQgICAgcmV0dXJuIExpc3RlbmVyO1xuXHR9KCk7XG5cbi8qKiovIH0sXG4vKiAxMjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqLyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuUHJvcGVydHlBY2Nlc3NvciA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgUFJPUEVSVFlfQUNDRVNTT1JfTkFNRSA9ICd3cmFwcGVkVmFsdWUnO1xuXHRcblx0Lyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovdmFyIFByb3BlcnR5QWNjZXNzb3IgPSBleHBvcnRzLlByb3BlcnR5QWNjZXNzb3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9Qcm9wZXJ0eUFjY2Vzc29yKG9iaiwgcHJvcE5hbWUpIHtcblx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQcm9wZXJ0eUFjY2Vzc29yKTtcblx0XG5cdCAgICAgICAgdGhpcy5zYWZlT2xkQWNjZXNzb3JzKG9iaiwgcHJvcE5hbWUpO1xuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBvYmouX19kZWZpbmVHZXR0ZXJfXyhwcm9wTmFtZSwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHByb3BOYW1lID09PSAncHJvcCcpIGRlYnVnZ2VyO1xuXHQgICAgICAgICAgICAgICAgb2JqO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbUFJPUEVSVFlfQUNDRVNTT1JfTkFNRV07XG5cdCAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgfSBjYXRjaCAoZSkgey8qIEZpcmVmb3ggcmFpc2VzIGZvciBBcnJheS5sZW5ndGggKi99XG5cdCAgICAgICAgdmFyIG5ld0dldHRlciA9IG9iai5fX2xvb2t1cEdldHRlcl9fKHByb3BOYW1lKTtcblx0ICAgICAgICBpZiAoIW5ld0dldHRlcikge1xuXHQgICAgICAgICAgICAvLyBDaHJvbWUgc2lsZW50bHkgaWdub3JlcyBfX2RlZmluZUdldHRlcl9fIGZvciBBcnJheS5sZW5ndGhcblx0ICAgICAgICAgICAgdGhpcy5leHRlcm5hbFZhcmlhYmxlcyhzb2x2ZXIsIG51bGwpO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBvYmouX19kZWZpbmVTZXR0ZXJfXyhwcm9wTmFtZSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG5cdCAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHRoaXNbUFJPUEVSVFlfQUNDRVNTT1JfTkFNRV0gPSBuZXdWYWx1ZTtcblx0ICAgICAgICAgICAgY29uc29sZS5sb2coJ25ld1ZhbHVlIGZvcicsIG9iaiwgcHJvcE5hbWUsIG5ld1ZhbHVlKTtcblx0ICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eVdpdGgobmV3VmFsdWUpO1xuXHQgICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgIH1cblx0XG5cdCAgICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQcm9wZXJ0eUFjY2Vzc29yLCBbe1xuXHQgICAgICAgIGtleTogJ3NhZmVPbGRBY2Nlc3NvcnMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYWZlT2xkQWNjZXNzb3JzKG9iaiwgcHJvcE5hbWUpIHtcblx0ICAgICAgICAgICAgLy8gdGFrZSBleGlzdGluZyBnZXR0ZXIsIGlmIGV4aXN0ZW50LCBhbmQgYXNzaWduIHRvXG5cdCAgICAgICAgICAgIHZhciBleGlzdGluZ1NldHRlciA9IG9iai5fX2xvb2t1cFNldHRlcl9fKHByb3BOYW1lKSxcblx0ICAgICAgICAgICAgICAgIGV4aXN0aW5nR2V0dGVyID0gb2JqLl9fbG9va3VwR2V0dGVyX18ocHJvcE5hbWUpO1xuXHQgICAgICAgICAgICBpZiAoZXhpc3RpbmdHZXR0ZXIgJiYgZXhpc3RpbmdTZXR0ZXIpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX19kZWZpbmVHZXR0ZXJfXyhQUk9QRVJUWV9BQ0NFU1NPUl9OQU1FLCBleGlzdGluZ0dldHRlcik7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9fZGVmaW5lU2V0dGVyX18oUFJPUEVSVFlfQUNDRVNTT1JfTkFNRSwgZXhpc3RpbmdTZXR0ZXIpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAvLyBhc3NpZ24gb2xkIHZhbHVlIHRvIG5ldyBzbG90XG5cdCAgICAgICAgICAgIGlmICghZXhpc3RpbmdHZXR0ZXIgJiYgIWV4aXN0aW5nU2V0dGVyICYmIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXNbUFJPUEVSVFlfQUNDRVNTT1JfTkFNRV0gPSBvYmpbcHJvcE5hbWVdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3NldHRlckNhbGxiYWNrJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dGVyQ2FsbGJhY2soY2FsbGJhY2spIHtcblx0ICAgICAgICAgICAgdGhpcy5jYWxsYmFja0ZvclNldFByb3BlcnR5ID0gY2FsbGJhY2s7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3NldFByb3BlcnR5V2l0aCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb3BlcnR5V2l0aChuZXdWYWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLmNhbGxiYWNrRm9yU2V0UHJvcGVydHkgJiYgdGhpcy5jYWxsYmFja0ZvclNldFByb3BlcnR5KG5ld1ZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgICByZXR1cm4gUHJvcGVydHlBY2Nlc3Nvcjtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogMTI1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8ndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLnB1c2hJZk1pc3NpbmcgPSBwdXNoSWZNaXNzaW5nO1xuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLnJlbW92ZUlmRXhpc3RpbmcgPSByZW1vdmVJZkV4aXN0aW5nO1xuXHQvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcblx0Ly8gVE9ETyB0aGlzIGlzIGEgY29weSBmcm9tIHJlYWN0aXZlIG9iamVjdCBxdWVyaWVzIHJlcG9zaXRvcnkgKG5vdCBjb21wbGV0ZWx5IGFueW1vcmUpXG5cdC8vIFRPRE8gZXh0cmFjdCB0aGlzIGludG8gaXRzIG93biBsaWJyYXJ5XG5cdFxuXHRmdW5jdGlvbiBwdXNoSWZNaXNzaW5nKGFycmF5LCBpdGVtKSB7XG5cdCAgICAvLyBjaGVjayBmb3IgYWxyZWFkeSBleGlzdGluZy5cblx0ICAgIHZhciBleGlzdHMgPSBmYWxzZTtcblx0ICAgIHZhciBsZW4gPSBhcnJheS5sZW5ndGg7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki97XG5cdCAgICAgICAgaWYgKGFycmF5W2ldID09IGl0ZW0pIHtcblx0ICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgfSAvLyBkbyBub3QgYWRkIGFuIGFscmVhZHkgZXhpc3RpbmcgaXRlbVxuXHQgICAgaWYgKCFleGlzdHMpIHtcblx0ICAgICAgICBhcnJheS5wdXNoKGl0ZW0pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSBnaXZlbiBlbGVtZW50IHdhcyBwdXNoZWQsIG90aGVyd2lzZSBmYWxzZVxuXHQgICAgcmV0dXJuICFleGlzdHM7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlbW92ZUlmRXhpc3RpbmcoYXJyYXksIGl0ZW0pIHtcblx0ICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG5cdCAgICBpZiAoaW5kZXggIT09IC0xKSB7XG5cdCAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgICAgICAvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgZ2l2ZW4gZWxlbWVudCB3YXMgYWN0dWFsbHkgcmVtb3ZlZFxuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc1ByaW1pdGl2ZShlbGVtKSB7XG5cdCAgICB2YXIgZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUoZWxlbSkge1xuXHQgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZWxlbSkuc2xpY2UoOCwgLTEpO1xuXHQgICAgfTtcblx0XG5cdCAgICB2YXIgdHlwZSA9IGdldFR5cGUoZWxlbSk7XG5cdFxuXHQgICAgcmV0dXJuIHR5cGUgPT09ICdTdHJpbmcnIHx8IHR5cGUgPT09ICdSZWdFeHAnIHx8IHR5cGUgPT09ICdCb29sZWFuJyB8fCB0eXBlID09PSAnTnVtYmVyJyB8fCB0eXBlID09PSAnTnVsbCcgfHwgdHlwZSA9PT0gJ1VuZGVmaW5lZCc7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcblx0ICAgIHJldHVybiB4O1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxMjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqLyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuQmFzZUFjdGl2ZUV4cHJlc3Npb24gPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEzKTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEJhc2VBY3RpdmVFeHByZXNzaW9uID0gZXhwb3J0cy5CYXNlQWN0aXZlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0XG5cdCAgICAvKipcclxuXHQgICAgICpcclxuXHQgICAgICogQHBhcmFtIGZ1bmMgKEZ1bmN0aW9uKSB0aGUgZXhwcmVzc2lvbiB0byBiZSBvYnNlcnZlZFxyXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL0Jhc2VBY3RpdmVFeHByZXNzaW9uKGZ1bmMpIHtcblx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBCYXNlQWN0aXZlRXhwcmVzc2lvbik7XG5cdFxuXHQgICAgICAgIC8vIGNvbnNvbGUubG9nKGZ1bmMpO1xuXHQgICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XG5cdCAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZSgpO1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXHJcblx0ICAgICAqIGFsaWFzZXMgd2l0aCAnbm93J1xyXG5cdCAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb25cclxuXHQgICAgICovXG5cdFxuXHRcblx0ICAgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEJhc2VBY3RpdmVFeHByZXNzaW9uLCBbe1xuXHQgICAgICAgIGtleTogJ2dldEN1cnJlbnRWYWx1ZScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRWYWx1ZSgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuYygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdvbkNoYW5nZScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NoZWNrQW5kTm90aWZ5Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tBbmROb3RpZnkoKSB7XG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZSgpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5sYXN0VmFsdWUgPT09IGN1cnJlbnRWYWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICB2YXIgbGFzdFZhbHVlID0gdGhpcy5sYXN0VmFsdWU7XG5cdCAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlID0gY3VycmVudFZhbHVlO1xuXHRcblx0ICAgICAgICAgICAgdGhpcy5ub3RpZnkoY3VycmVudFZhbHVlLCB7XG5cdCAgICAgICAgICAgICAgICBsYXN0VmFsdWU6IGxhc3RWYWx1ZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnbm90aWZ5Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbm90aWZ5KCkge1xuXHQgICAgICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9mb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3tcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovY2FsbGJhY2suYXBwbHkoIC8qaXN0YW5idWwgaWdub3JlIG5leHQqL3VuZGVmaW5lZCwgYXJncylcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiBUT0RPXHJcblx0ICAgICAgICAgKiBsaWtlIGEgYmluZCBmb3IgQUV4cHJcclxuXHQgICAgICAgICAqIEBwYXJhbSBpdGVtc1xyXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2FwcGx5T24nLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseU9uKCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQnKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgICByZXR1cm4gQmFzZUFjdGl2ZUV4cHJlc3Npb247XG5cdH0oKTtcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuZGVmYXVsdCA9IEJhc2VBY3RpdmVFeHByZXNzaW9uO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NBek1HRTJOR1F6WW1KaU4yUTJaalV4TWpaak1pSXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZV04wYVhabExXVjRjSEpsYzNOcGIyNXpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5cGJuUmxjbkJ5WlhSaGRHbHZiaTlwYm5SbGNuQnlaWFJoZEdsdmJpMWhZM1JwZG1VdFpYaHdjbVZ6YzJsdmJuTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJ0bGVYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMnRsZVhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtdGxlWE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGIySnFaV04wTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJSbFptbHVaV1F1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV3RsZVhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXd3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR0Z6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXbHZZbXBsWTNRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXOWlhbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIyWXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZWEp5WVhrdGFXNWpiSFZrWlhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRiR1Z1WjNSb0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMV2x1ZEdWblpYSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xXdGxlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6YUdGeVpXUXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaMnh2WW1Gc0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzVnBaQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlsYm5WdExXSjFaeTFyWlhsekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxellYQXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyTnZjbVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTNSNExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRXRablZ1WTNScGIyNHVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WkhBdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZllXNHRiMkpxWldOMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHpMVzlpYW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBaVGd0Wkc5dExXUmxabWx1WlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5a1pYTmpjbWx3ZEc5eWN5NXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOW1ZV2xzY3k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5a2IyMHRZM0psWVhSbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMWEJ5YVcxcGRHbDJaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl3Y205d1pYSjBlUzFrWlhOakxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJkbGRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaM0J2TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMmRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCa0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxd2FXVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmMyVjBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNObGRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VhWFJsY21GMGIzSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM1J5YVc1bkxXRjBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmwwWlhJdFpHVm1hVzVsTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJ4cFluSmhjbmt1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY21Wa1pXWnBibVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNtRjBiM0p6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRZM0psWVhSbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxamNtVmhkR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3Y3k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5b2RHMXNMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM2RyY3k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YVhSbGNtRjBiM0l1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRjM1JsY0M1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXpaWFF1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTI5c2JHVmpkR2x2YmkxemRISnZibWN1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY21Wa1pXWnBibVV0WVd4c0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnVMV2x1YzNSaGJtTmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlp2Y2kxdlppNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdOaGJHd3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWE10WVhKeVlYa3RhWFJsY2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJOdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYkdGemMyOW1MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05sZEMxemNHVmphV1Z6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDIxbGRHRXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMjlzYkdWamRHbHZiaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloY25KaGVTMXRaWFJvYjJSekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnljbUY1TFhOd1pXTnBaWE10WTNKbFlYUmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMkZ5Y21GNUxYTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWE10WVhKeVlYa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjemN1YzJWMExuUnZMV3B6YjI0dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlkyOXNiR1ZqZEdsdmJpMTBieTFxYzI5dUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnljbUY1TFdaeWIyMHRhWFJsY21GaWJHVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmNHOXpjMmxpYkdWRGIyNXpkSEoxWTNSdmNsSmxkSFZ5Ymk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTkwZVhCbGIyWXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmMzbHRZbTlzTDJsMFpYSmhkRzl5TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5M2EzTXRaWGgwTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMM041YldKdmJDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl6ZVcxaWIyd3ZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVjM2x0WW05c0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzZHJjeTFrWldacGJtVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhMlY1YjJZdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpXNTFiUzFyWlhsekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQnpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5iM0J1TFdWNGRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFoyOXdiaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tnk1emVXMWliMnd1WVhONWJtTXRhWFJsY21GMGIzSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjemN1YzNsdFltOXNMbTlpYzJWeWRtRmliR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZhVzVvWlhKcGRITXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5ObGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJWMExYQnliM1J2TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOWpjbVZoZEdVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyTnlaV0YwWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVkzSmxZWFJsTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk5zWVhOelEyRnNiRU5vWldOckxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlpWVdKbGJITmlaWEpuTDJwemFXNTBaWEp3Y21WMFpYSXZhVzUwWlhKd2NtVjBaWEl1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZhbk52Ymk5emRISnBibWRwWm5rdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZhbk52Ymk5emRISnBibWRwWm5rdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YldGd0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjFoY0M1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXRZWEF1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pjdWJXRndMblJ2TFdwemIyNHVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDJKaFltVnNjMkpsY21jdmFuTnBiblJsY25CeVpYUmxjaTloWTI5eWJpNWxjeTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDNOMFlXTnJMV1Z6TWpBeE5TMXRiMlIxYkdWekwyUnBjM1F2YzNSaFkyc3RaWE15TURFMUxXMXZaSFZzWlhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMmx1ZEdWeWNISmxkR0YwYVc5dUwyeHBjM1JsYm1WeUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlwYm5SbGNuQnlaWFJoZEdsdmJpOXdjbTl3WlhKMGVTMWhZMk5sYzNOdmNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12ZFhScGJITXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDJKaGMyVXZZbUZ6WlMxaFkzUnBkbVV0Wlhod2NtVnpjMmx2Ym5NdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTEU4N1FVTldRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4MVFrRkJaVHRCUVVObU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096czdOa05EY2tOVExFczdPenM3T3pzN096dHRRMEZGUVN4dlFqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdVME15UTA4c1N5eEhRVUZCTEVzN08wRkJPVU5vUWpzN096dEJRVU5CT3pzN08wRkJRMEU3TzBGQlEwRTdPenM3UVVGRlFTeExRVUZOTEdOQlFXTXNNRVJCUVhCQ096czJRa0ZGVFN4UExFZEJRMFlzTWtOQlFXTTdRVUZCUVR0QlFVVmlMRVU3T3paQ1FVZERMREpDT3pzN1FVRkZSaXhyUlVGQldTeEpRVUZhTEVWQlFXdENMRXRCUVd4Q0xFVkJRWGxDTzBGQlFVRTdPMEZCUVVFc01FbEJRMllzU1VGRVpUczdRVUZGY2tJc2RVTkJRVXNzUzBGQlRDeEhRVUZoTEV0QlFXSTdRVUZEUVN4MVEwRkJTeXhwUWtGQlRDeEhRVUY1UWl3eVEwRkJla0k3TzBGQlJVRXNkVU5CUVVzc1owSkJRVXc3UVVGTWNVSTdRVUZOZUVJN08wRkJSVVE3T3pzN096UkRRVU50UWp0QlFVTm1MR3RDUVVGTExHTkJRVXc3UVVGRFNEczdPMnREUVVWUk8wRkJRMHdzYTBKQlFVc3NaVUZCVER0QlFVTklPenM3TkVOQlJXdENPMEZCUVVFN08wRkJRMllzZVVKQlFWa3NWMEZCV2l4RFFVRjNRaXhKUVVGNFFpeEZRVUU0UWl4WlFVRk5PMEZCUTJoRExEWkRRVUUwUWl4WlFVRTFRaXhEUVVGNVF5eG5RMEZCU3l4SlFVRTVReXhGUVVGdlJDd3JRa0ZCU3l4TFFVRjZSRHRCUVVOSUxHTkJSa1E3UVVGSFNEczdPekpEUVVWcFFqdEJRVU5rTEd0Q1FVRkxMR2xDUVVGTUxFTkJRWFZDTEU5QlFYWkNMRU5CUVN0Q0xGVkJRVk1zWjBKQlFWUXNSVUZCTWtJN1FVRkRkRVFzYTBOQlFXbENMR05CUVdwQ0xFTkJRV2RETEUxQlFXaERMRU5CUVhWRExFbEJRWFpETzBGQlEwZ3NZMEZHUkN4RlFVVkhMRWxCUmtnN1FVRkhRU3hyUWtGQlN5eHBRa0ZCVEN4RFFVRjFRaXhMUVVGMlFqdEJRVU5JT3pzN096dEJRVWRGTEZWQlFWTXNTMEZCVkN4RFFVRmxMRWxCUVdZc1JVRkJjVUlzUzBGQmNrSXNSVUZCTkVJN1FVRkJSU3haUVVGUExFbEJRVWtzTWtKQlFVb3NRMEZCWjBNc1NVRkJhRU1zUlVGQmMwTXNTMEZCZEVNc1EwRkJVRHRCUVVGelJEczdOa0pCUlRsRkxESkNMRmRCUVVFc01rSTdPenM3T3pzN096czdjVU5CYzBKSExFY3NSVUZCU3l4SkxFVkJRVTA3UVVGRGJrSXNhVUpCUVVrc1UwRkJVeXhKUVVGSkxFOUJRVW9zUlVGQllqdEJRVUZCTEdsQ1FVTkpMRTlCUVU4c1MwRkJTeXhQUVVGTUxFVkJSRmc3TzBGQlIwRXNkMFJCUTBzc1lVRkVUQ3hEUVVOdFFpeE5RVVJ1UWl4RlFVTXlRaXhKUVVRelFpeEZRVVZMTEZWQlJrd3NRMEZGWjBJc1dVRkJXU3hIUVVGYUxFVkJSbWhDT3p0QlFVbEJMSE5MUVVGNVFpeEhRVUY2UWl4RlFVRTRRaXhKUVVFNVFqdEJRVUZCTzBGQlEwZzdPenM0UTBGRk1rSTdRVUZEZUVJc2FVSkJRVWNzUzBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEZOQlFXNUNMRWRCUVN0Q0xFTkJRV3hETEVWQlFYRkRPMEZCUTJwRExIbENRVUZSTEVkQlFWSXNRMEZCV1N4cFFrRkJXanRCUVVOQk8wRkJRMGc3UVVGRFJDeHBRa0ZCU1N4aFFVRmhMRXRCUVVzc1ZVRkJkRUk3UVVGQlFTeHBRa0ZEU1N4UlFVRlJMRmRCUVZjc1EwRkJXQ3hEUVVSYU8wRkJRVUVzYVVKQlJVa3NUMEZCVHl4TlFVRk5MRWxCUm1wQ08wRkJRVUVzYVVKQlIwa3NUMEZCVHl4TlFVRk5MRXRCU0dwQ096dEJRVTFCTzBGQlFVRTdRVUZEU0RzN08zTkRRVE5EYlVJc1NTeEZRVUZOTEZFc1JVRkJWVHRCUVVOb1F5eHBRa0ZCU1N4UlFVRlJMRmxCUVZrc1JVRkJlRUk3UVVGRFFTeHBRa0ZCU1N4SlFVRkpMRWxCUVVrc01rSkJRVW9zYTBSQlEydENMRXRCUVVzc1VVRkJUQ3hGUVVSc1FpeFhRVVZLTEZWQlFVTXNTVUZCUkN4RlFVRlBMRk5CUVZBc1JVRkJjVUk3UVVGRGFrSXNlVUpCUVZFc1IwRkJVaXhEUVVGWkxFOUJRVm9zUlVGQmNVSXNTMEZCY2tJN1FVRkRRU3cyUkVGQldTeExRVUZhTEVWQlFXMUNMRTlCUVc1Q0xFTkJRVEpDTEZWQlFVTXNRMEZCUkN4RlFVRlBPMEZCUXpsQ0xIbENRVUZKTEZGQlFWRXNUVUZCVFN4RFFVRk9MRU5CUVZvN1FVRkRRU3cyUWtGQlVTeEhRVUZTTEVOQlFWa3NRMEZCV2l4RlFVRmxMRXRCUVdZN1FVRkRRU3d3UWtGQlN5eFhRVUZNTEVOQlFXbENMRk5CUVdwQ0xFVkJRVFJDTEVOQlFUVkNMRVZCUVN0Q0xFdEJRVXNzYTBKQlFVd3NRMEZCZDBJc1MwRkJlRUlzUTBGQkwwSTdRVUZEU0N4clFrRktSRHRCUVV0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwZ3NZMEZpUnl4RFFVRlNPMEZCWTBFc1pVRkJSU3hIUVVGR08wRkJRMEVzYjBKQlFVOHNSVUZCUlN4VlFVRkdMRU5CUVdFc1EwRkJZaXhGUVVGblFpeExRVUZvUWl4RFFVRnpRaXhWUVVGMFFpeERRVUZwUXl4WFFVRnFReXhEUVVFMlF5eFBRVUUzUXl4RlFVRlFPMEZCUTBnN096czdPenM3T3p0QlEzQkZUQ3h0UWtGQmEwSXNkVVE3T3pzN096dEJRMEZzUWp0QlFVTkJMSE5FT3pzN096czdRVU5FUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RlFVRkRMRVU3T3pzN096dEJRMUpFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1J6czdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5LUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5vUWtFc2QwSkJRWFZDTzBGQlEzWkNPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUnpzN096czdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTktRU3hyUWtGQmFVSTdPMEZCUldwQ08wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTFCUVVzc1YwRkJWeXhsUVVGbE8wRkJReTlDTzBGQlEwRXNUVUZCU3p0QlFVTk1PMEZCUTBFc1J6czdPenM3TzBGRGNFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzTkVSQlFUSkVPMEZCUXpORUxFYzdPenM3T3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRMHBCTzBGQlEwRTdRVUZEUVN4dlJFRkJiVVE3UVVGRGJrUTdRVUZEUVN4M1EwRkJkVU03UVVGRGRrTXNSenM3T3pzN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkME5CUVhWRExHZERPenM3T3pzN1FVTklka003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVN4ak96czdPenM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc0swSkJRVGhDTzBGQlF6bENPMEZCUTBFN1FVRkRRU3h2UkVGQmJVUXNUMEZCVHl4RlFVRkZPMEZCUXpWRUxFYzdPenM3T3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHZSVUZCYlVVN1FVRkRia1U3UVVGRFFTeHpSa0ZCY1VZN1FVRkRja1k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZsQlFWYzdRVUZEV0N4VlFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeE5RVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJMR2RFUVVFclF6dEJRVU12UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGxRVUZqTzBGQlEyUXNaVUZCWXp0QlFVTmtMR1ZCUVdNN1FVRkRaQ3hsUVVGak8wRkJRMlFzWjBKQlFXVTdRVUZEWml4blFrRkJaVHRCUVVObUxHZENRVUZsTzBGQlEyWXNhVUpCUVdkQ08wRkJRMmhDTERCQ096czdPenM3UVVNMVJFRXNPRUpCUVRaQ08wRkJRemRDTEhORFFVRnhReXhuUXpzN096czdPMEZEUkhKRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUnpzN096czdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSExGVkJRVlU3UVVGRFlqdEJRVU5CTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRMHBCTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOR1FUdEJRVU5CTEhORlFVRnpSU3huUWtGQlowSXNWVUZCVlN4SFFVRkhPMEZCUTI1SExFVkJRVU1zUlRzN096czdPMEZEUmtRN1FVRkRRVHRCUVVOQkxHdERRVUZwUXl4UlFVRlJMR2RDUVVGblFpeFZRVUZWTEVkQlFVYzdRVUZEZEVVc1JVRkJReXhGT3pzN096czdRVU5JUkR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlExQkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJMSFZEUVVGelF5eDFRMEZCZFVNc1owSkJRV2RDT3p0QlFVVTNSanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVFVGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRU3hKUVVGSE8wRkJRMGc3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTnlRMEVzYlVKQlFXdENMSGRFT3pzN096czdRVU5CYkVJN1FVRkRRU3huUlRzN096czdPMEZEUkVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JVRkJReXhGT3pzN096czdRVU5TUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSE8wRkJRMGdzUnpzN096czdPMEZEV2tFc2JVSkJRV3RDTEhkRU96czdPenM3UVVOQmJFSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5LUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RlFVRkRMRVU3T3pzN096dEJRMUpFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSExGVkJRVlU3UVVGRFlqdEJRVU5CTEVjN096czdPenRCUTJaQkxHVkJRV01zYzBJN096czdPenRCUTBGa0xHMUNRVUZyUWl4M1JEczdPenM3TzBGRFFXeENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTdzRRenM3T3pzN096czdPenM3TzBGRFRFRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzT0VKQlFUWkNPMEZCUXpkQ0xHVkJRV003UVVGRFpEdEJRVU5CTEVWQlFVTTdRVUZEUkR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUTBGQkswSTdRVUZETDBJN1FVRkRRVHRCUVVOQkxGZEJRVlU3UVVGRFZpeEZRVUZETEVVN096czdPenRCUTJoQ1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEyaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc05rSkJRVFJDTEdGQlFXRTdPMEZCUlhwRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4NVEwRkJkME1zYjBOQlFXOURPMEZCUXpWRkxEWkRRVUUwUXl4dlEwRkJiME03UVVGRGFFWXNUVUZCU3l3eVFrRkJNa0lzYjBOQlFXOURPMEZCUTNCRk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBRa0ZCWjBJc2JVSkJRVzFDTzBGQlEyNURPMEZCUTBFN1FVRkRRU3hyUTBGQmFVTXNNa0pCUVRKQ08wRkJRelZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOeVJVRXNkVUk3T3pzN096dEJRMEZCTERCRE96czdPenM3UVVOQlFTeHhRanM3T3pzN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxEUkdRVUZuUml4aFFVRmhMRVZCUVVVN08wRkJSUzlHTzBGQlEwRXNjMFJCUVhGRUxEQkNRVUV3UWp0QlFVTXZSVHRCUVVOQkxFYzdPenM3T3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTdzRRa0ZCTmtJN1FVRkROMEk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3NFFrRkJOa0k3UVVGRE4wSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQk96czdPenM3TzBGRGVFTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUnpzN096czdPMEZEV2tFc0swVTdPenM3T3p0QlEwRkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEcxRlFVRnJSU3dyUWtGQkswSTdRVUZEYWtjc1J6czdPenM3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2QwSTdPenM3T3p0QlExWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNlVWRCUVhkSExFOUJRVTg3UVVGREwwYzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbERRVUZuUXp0QlFVTm9ReXhsUVVGak8wRkJRMlFzYTBKQlFXbENPMEZCUTJwQ08wRkJRMEVzUlVGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUXpzN1FVRkZSRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN3MlFqczdPenM3TzBGRGFrTkJMRFpDUVVFMFFpeGxPenM3T3pzN1FVTkJOVUk3UVVGRFFTeFhRVUZWTzBGQlExWXNSenM3T3pzN08wRkRSa0U3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2VVSkJRWGRDTEcxRlFVRnRSVHRCUVVNelJpeEZRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGUVVGRExGVTdPenM3T3p0QlExaEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIVkNRVUZ6UWl4UFFVRlBPMEZCUXpkQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEaENRVUUyUWp0QlFVTTNRaXd5UWtGQk1FSTdRVUZETVVJc01rSkJRVEJDTzBGQlF6RkNMSE5DUVVGeFFqdEJRVU55UWp0QlFVTkJMRTFCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERoRVFVRTJSQ3hQUVVGUE8wRkJRM0JGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hWUVVGVE8wRkJRMVFzVVVGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UlFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEUxQlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVXM3UVVGRFREdEJRVU5CTEVsQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEUxQlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVXM3UVVGRFRDeEpRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEQkNRVUY1UWp0QlFVTjZRaXh6UWtGQmNVSTdRVUZEY2tJc01rSkJRVEJDTzBGQlF6RkNMRTFCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TlFVRkxPenRCUVVWTU8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUXpkSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJSenRCUVVOSUxFYzdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFbEJRVWM3UVVGRFNDeEhPenM3T3pzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h6UTBGQmNVTXNhVUpCUVdsQ0xFVkJRVVU3UVVGRGVFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbEZRVUZuUlN4blFrRkJaMEk3UVVGRGFFWTdRVUZEUVR0QlFVTkJMRWxCUVVjc01rTkJRVEpETEdkRFFVRm5RenRCUVVNNVJUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2VVSTdPenM3T3p0QlEzaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1J6czdPenM3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERCQ1FVRjVRaXhyUWtGQmEwSXNSVUZCUlRzN1FVRkZOME03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhMRlZCUVZVN1FVRkRZanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTjBRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjVUpCUVc5Q0xHRkJRV0U3UVVGRGFrTXNTVUZCUnp0QlFVTklMRWM3T3pzN096dEJRMkpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0RVFVRnBSRHRCUVVOcVJDeEZRVUZETzBGQlEwUTdRVUZEUVN4elFrRkJjVUk3UVVGRGNrSTdRVUZEUVN4VlFVRlRPMEZCUTFRc1MwRkJTVHRCUVVOS08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTndSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVVVGQlR6dEJRVU5RTEUxQlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVXM3UVVGRFREczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFc1J6czdPenM3TzBGRE1VUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJVeXhsUVVGbE8wRkJRM2hDTzBGQlEwRTdRVUZEUVR0QlFVTkJMSFZEUVVGelF6dEJRVU4wUXp0QlFVTkJMQ3RDUVVFNFFqdEJRVU01UWl3NFFrRkJOa0k3UVVGRE4wSXNaME5CUVN0Q08wRkJReTlDTEc5RFFVRnRRenRCUVVOdVF5eFZRVUZUTEN0Q1FVRXJRanRCUVVONFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRek5EUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTk1RVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnc1J6czdPenM3TzBGRFprRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5LUVR0QlFVTkJPenRCUVVWQkxIZERRVUYxUXl4MVEwRkJaMFFzUlRzN096czdPMEZEU0haR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5TUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPMEZEVGtFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUVzZFVOQlFYTkRMSFZEUVVGMVF5eG5Ra0ZCWjBJN08wRkJSVGRHTzBGQlEwRTdRVUZEUVN4dlFrRkJiVUlzYTBKQlFXdENPMEZCUTNKRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RlFVRkRMRWM3T3pzN096dEJRekZDUkN4dFFrRkJhMElzZDBRN096czdPenRCUTBGc1FqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRMHBCTzBGQlEwRTdRVUZEUVN4elJVRkJkVVVzTUVOQlFUQkRMRVU3T3pzN096dEJRMFpxU0RzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRU3gxUTBGQmMwTXNkVU5CUVhWRExHZENRVUZuUWpzN1FVRkZOMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hIT3pzN096czdRVU5vUWtFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFc2EwaEJRV2xJTEcxQ1FVRnRRaXhGUVVGRkxHMUNRVUZ0UWl4elNFRkJjMGc3TzBGQlJTOVJMSFZEUVVGelF5eDFRMEZCZFVNc1owSkJRV2RDT3p0QlFVVTNSanRCUVVOQk8wRkJRMEVzUlVGQlF6dEJRVU5FTzBGQlEwRXNSenM3T3pzN08wRkRjRUpCTEcxQ1FVRnJRaXgzUkRzN096czdPMEZEUVd4Q08wRkJRMEU3UVVGRFFTeDNSRHM3T3pzN08wRkRSa0VzY1VNN096czdPenRCUTBGQkxHMUNRVUZyUWl4M1JEczdPenM3TzBGRFFXeENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVRN096czdPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIZENRVUYxUWp0QlFVTjJRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeDFRa0ZCYzBJN1FVRkRkRUlzY1VKQlFXOUNMSFZDUVVGMVFpeFRRVUZUTEVsQlFVazdRVUZEZUVRc1NVRkJSenRCUVVOSUxFVkJRVU03UVVGRFJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVZCUVVNN08wRkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUlVGQlF6dEJRVU5FTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3d1JFRkJlVVE3UVVGRGVrUTdRVUZEUVN4TlFVRkxPMEZCUTB3N1FVRkRRU3gxUWtGQmMwSXNhVU5CUVdsRE8wRkJRM1pFTEUxQlFVczdRVUZEVEN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEN0RVFVRTRSQ3c0UWtGQk9FSTdRVUZETlVZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZIT3p0QlFVVklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMREpFUVVFd1JDeG5Ra0ZCWjBJN08wRkJSVEZGTzBGQlEwRTdRVUZEUVR0QlFVTkJMSEZDUVVGdlFpeHZRa0ZCYjBJN08wRkJSWGhETERKRFFVRXdReXh2UWtGQmIwSTdPMEZCUlRsRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVYzdRVUZEU0N4NVFrRkJkMElzWlVGQlpTeEZRVUZGTzBGQlEzcERMSGxDUVVGM1FpeG5Ra0ZCWjBJN1FVRkRlRU1zUlVGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVkJRVU03TzBGQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzY1VSQlFXOUVMRXRCUVVzc1VVRkJVU3hwUTBGQmFVTTdRVUZEYkVjc1JVRkJRenRCUVVORU8wRkJRMEVzWjBSQlFTdERPMEZCUXk5RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUXpzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMREpET3pzN096czdRVU14VDBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNNa1JCUVRCRUxITkNRVUZ6UWp0QlFVTm9SaXhwUmtGQlowWXNjMEpCUVhOQ08wRkJRM1JITEVjN096czdPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzU1VGQlJ6dEJRVU5JTEVjN096czdPenRCUTJSQkxEQkRPenM3T3pzN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHRRa0ZCYTBJN08wRkJSV3hDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzU1VGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3T3pzN096czdRVU5zUWtFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOT1FTd3dRenM3T3pzN08wRkRRVUVzZFVNN096czdPenRCUTBGQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJMSFZEUVVGelF5eDFRMEZCZFVNc1owSkJRV2RDT3p0QlFVVTNSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVYzdRVUZEU0R0QlFVTkJMRWM3T3pzN096dEJRMmhEUVN4dFFrRkJhMElzZVVRN096czdPenRCUTBGc1FqdEJRVU5CTEdkRk96czdPenM3UVVORVFUdEJRVU5CTzBGQlEwRXNLMEpCUVRoQ0xEWkRRVUUwUXl4Rk96czdPenM3UVVOR01VVTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNiVVJCUVd0RU8wRkJRMnhFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hSUVVGUExGVkJRVlVzWTBGQll6dEJRVU12UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeE5RVUZMTEVkQlFVYzdRVUZEVWp0QlFVTkJMRWM3T3pzN096dEJRM2hDUVN4dFFrRkJhMElzZVVRN096czdPenRCUTBGc1FqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRMHBCTzBGQlEwRTdRVUZEUVN3clFrRkJPRUlzWjBOQlFXOURMRVU3T3pzN096dEJRMFpzUlRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWM3T3pzN096dEJRMUpCT3pzN096czdPenM3T3pzN096czdPenM3TzBGQmJVSkJPenM3TzBGQlNVRTdPMEZCUlVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRlRRVHM3TmtKQlFWa3NTenM3T3pzN08wdEJSVk1zVnp0QlFVTnVRaXhuUkVGQldTeEpRVUZhTEVWQlFXdENMRmxCUVd4Q0xFVkJRV2RETzBGQlFVRTdPMEZCUXpsQ0xGTkJRVWtzVDBGQlR5eEpRVUZRTEVsQlFXVXNVVUZCYmtJc1JVRkJOa0k3UVVGRE0wSXNZMEZCVHl4TlFVRk5MRXRCUVU0c1EwRkJXU3hKUVVGYUxFTkJRVkE3UVVGRFJEdEJRVU5FTEZWQlFVc3NVMEZCVEN4SFFVRnBRaXd5UTBGQmFrSTdRVUZEUVN4VlFVRkxMRWRCUVV3c1IwRkJWeXhKUVVGWU8wRkJRMEVzVlVGQlN5eFRRVUZNTEVkQlFXbENMRmxCUVdwQ08wRkJRMEVzVlVGQlN5eFBRVUZNTEVkQlFXVXNTMEZCWmp0QlFVTkJPMEZCUTBFc1ZVRkJTeXhUUVVGTUxFZEJRV2xDTEVsQlFVa3NXVUZCV1N4VFFVRm9RaXhEUVVFd1FpeFRRVUV4UWl4RlFVRnhReXhKUVVGeVF5eERRVUZxUWp0QlFVTkJMRlZCUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVWtzV1VGQldTeFRRVUZvUWl4RFFVRXdRaXhKUVVFeFFpeEZRVUZuUXl4SlFVRm9ReXhEUVVGYU8wRkJRMEVzVlVGQlN5eEpRVUZNTEVkQlFWa3NTVUZCU1N4WlFVRlpMRk5CUVdoQ0xFTkJRVEJDTEVsQlFURkNMRVZCUVdkRExFbEJRV2hETEVOQlFWbzdRVUZEUVN4VlFVRkxMRXRCUVV3c1IwRkJZU3hKUVVGSkxGbEJRVmtzVTBGQmFFSXNRMEZCTUVJc1MwRkJNVUlzUlVGQmFVTXNTVUZCYWtNc1EwRkJZanRCUVVOQkxGVkJRVXNzVjBGQlRDeEhRVUZ0UWl4SlFVRkpMRmxCUVZrc1UwRkJhRUlzUTBGQk1FSXNRMEZCTVVJc1JVRkJOa0lzU1VGQk4wSXNRMEZCYmtJN1FVRkRRU3hWUVVGTExGVkJRVXdzUjBGQmEwSXNTVUZCU1N4WlFVRlpMRk5CUVdoQ0xFTkJRVEJDTEVOQlFURkNMRVZCUVRaQ0xFbEJRVGRDTEVOQlFXeENPMEZCUTBFc1ZVRkJTeXhaUVVGTUxFZEJRVzlDTEVsQlFVa3NXVUZCV1N4VFFVRm9RaXhEUVVFd1FpeEZRVUV4UWl4RlFVRTRRaXhKUVVFNVFpeERRVUZ3UWp0QlFVTkJMRk5CUVVrc1VVRkJVU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCU3l4SFFVRjBRaXhGUVVFeVFpeEpRVUV6UWl4RFFVRmFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlN5eEpRVUZNTEVOQlFWVXNUVUZCVml4SFFVRnRRaXhMUVVGTExFOUJRWGhDTzBGQlEwRXNWVUZCU3l4TFFVRk1MRU5CUVZjc1RVRkJXQ3hIUVVGdlFpeExRVUZMTEU5QlFYcENPMEZCUTBFc1ZVRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRWRCUVRCQ0xFdEJRVXNzVFVGQkwwSTdRVUZEUVN4VlFVRkxMRlZCUVV3c1EwRkJaMElzVFVGQmFFSXNSMEZCZVVJc1MwRkJTeXhOUVVFNVFqdEJRVU5CTEZWQlFVc3NXVUZCVEN4RFFVRnJRaXhOUVVGc1FpeEhRVUV5UWl4TFFVRkxMRTFCUVdoRE8wRkJRMEVzVlVGQlN5eFZRVUZNTEVkQlFXdENMRU5CUVVNN1FVRkRha0lzWVVGQlRTeExRVUZMTEVkQlJFMDdRVUZGYWtJc1kwRkJUeXhMUVVaVk8wRkJSMnBDTEhWQ1FVRm5RaXhMUVVoRE8wRkJTV3BDTEdGQlFVMDdRVUZLVnl4TlFVRkVMRU5CUVd4Q08wRkJUVVE3TzBGQlJVUTdPenM3T3pzN08yZERRVWxYTEVrc1JVRkJUVHRCUVVObUxGZEJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEUxQlFXaENMRWRCUVhsQ0xFTkJRWHBETEVOQlFWbzdRVUZEUVN4WFFVRkpMRU5CUVVNc1MwRkJSQ3hKUVVGVkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTVUZCYlVJc1UwRkJha01zUlVGQk5FTTdRVUZETVVNc1pVRkJUU3hOUVVGTkxITkVRVUZPTEVOQlFVNDdRVUZEUkR0QlFVTkVMRmRCUVVrc1QwRkJUeXhKUVVGUUxFbEJRV1VzVVVGQmJrSXNSVUZCTmtJN1FVRkRNMElzWjBKQlFVOHNUVUZCVFN4TFFVRk9MRU5CUVZrc1NVRkJXaXhEUVVGUU8wRkJRMFE3UVVGRFJDeFhRVUZKTEVOQlFVTXNTVUZCUkN4SlFVRlRMRXRCUVVzc1NVRkJUQ3hKUVVGaExGTkJRVEZDTEVWQlFYRkRPMEZCUTI1RExHVkJRVTBzVFVGQlRTeHBSRUZCVGl4RFFVRk9PMEZCUTBRN1FVRkRSRHRCUVVOQkxGbEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFWSXNSVUZCVnl4SlFVRm9RaXhGUVVGelFpeFBRVUZQTEV0QlFVc3NTVUZCVEN4RFFVRlZMRU5CUVZZc1EwRkJOMElzUlVGQk1rTXNSMEZCTTBNc1JVRkJaMFE3UVVGRE9VTXNaVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hEUVVGblFpeEpRVUZvUWl4RFFVRnhRaXhKUVVGeVFqdEJRVU5FTzBGQlEwUXNZVUZCVFN4SlFVRk9MRWRCUVdFc1MwRkJZanRCUVVORU96dEJRVVZFT3pzN096czdPelJDUVVsUE8wRkJRMHdzVjBGQlNTeFJRVUZSTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeERRVUZhTzBGQlEwRXNWMEZCU1N4RFFVRkRMRXRCUVVRc1NVRkJWU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTEVsQlFXMUNMRk5CUVc1Q0xFbEJRV2RETEUxQlFVMHNTVUZCY0VRc1JVRkJNRVE3UVVGRGVFUXNaMEpCUVU4c1MwRkJVRHRCUVVORUxGRkJSa1FzVFVGRlR5eEpRVUZKTEV0QlFVc3NUMEZCVkN4RlFVRnJRanRCUVVOMlFpeG5Ra0ZCVHl4SlFVRlFPMEZCUTBRN1FVRkRSQ3haUVVGTExGTkJRVk1zVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCZWtJN1FVRkRRU3hqUVVGUExFbEJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3TWtKQlMwMDdRVUZEU2l4alFVRlBMRU5CUVVNc1MwRkJTeXhQUVVGT0xFbEJRV2xDTEV0QlFVc3NTVUZCVEN4RlFVRjRRaXhGUVVGeFF5eERRVUZGTzBGQlEzWkRMR05CUVU4c1MwRkJTeXhQUVVGYU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN2NVTkJTV2RDTEVzc1JVRkJUenRCUVVOeVFqdEJRVU5CTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeEZRVUYzUWl4VlFVRjRRaXhGUVVGdlF5eExRVUZMTEdWQlFVd3NRMEZCY1VJc1VVRkJja0lzUTBGQmNFTXNSVUZCYjBVc1NVRkJjRVU3UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNTMEZCZUVJc1JVRkJLMElzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRWRCUVhKQ0xFTkJRUzlDTEVWQlFUQkVMRWxCUVRGRU8wRkJRMEVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFVkJRWGRDTEZkQlFYaENMRVZCUVhGRExFdEJRVXNzVTBGQk1VTXNSVUZCY1VRc1NVRkJja1E3UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNVVUZCZUVJc1JVRkJhME1zUzBGQmJFTXNSVUZCZVVNc1NVRkJla003UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNUVUZCZUVJc1JVRkJaME1zUzBGQmFFTXNSVUZCZFVNc1MwRkJka01zUlVGT2NVSXNRMEZOTUVJN08wRkJSUzlETzBGQlEwRXNXVUZCU3l4WlFVRk1MRU5CUVd0Q0xFdEJRV3hDTzBGQlEwRXNXVUZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTzBGQlEwRTdRVUZEUVN4aFFVRk5MRTFCUVU0c1IwRkJaU3hMUVVGTExFMUJRWEJDTzBGQlEwRXNXVUZCU3l4VFFVRk1MRU5CUVdVc1MwRkJaanRCUVVOQkxGbEJRVXNzVlVGQlRDeERRVUZuUWl4TFFVRm9RanRCUVVOQkxGbEJRVXNzVlVGQlRDeERRVUZuUWl4TFFVRm9RanRCUVVOQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRnFRanRCUVVOQkxGbEJRVXNzVVVGQlRDeERRVUZqTEV0QlFXUTdRVUZEUVN4WlFVRkxMRkZCUVV3c1EwRkJZeXhMUVVGa08wRkJRMEVzV1VGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ08wRkJRMEVzV1VGQlN5eFJRVUZNTEVOQlFXTXNTMEZCWkR0QlFVTkJMRmxCUVVzc1UwRkJUQ3hEUVVGbExFdEJRV1k3TzBGQlJVRTdRVUZEUVN4WFFVRkpMR3RDUVVGclFpeEpRVUYwUWp0QlFVTkJMRmRCUVVrc1QwRkJTanRCUVVOQkxHbENRVUZWTEhsRFFVRlRMRWRCUVZRc1JVRkJZenRCUVVOMFFpeGxRVUZOTEU5QlFVOHNaMEpCUVdkQ0xGTkJRVGRDTzBGQlEwRXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFMUJRVTBzU1VGQlNTeFJRVUZLTEVWQlFVNHNRMEZCYUVNc1EwRkJVRHRCUVVORUxGRkJTRVE3UVVGSlFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNUMEZCZUVJc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWp0QlFVVkJMR2xDUVVGVkxIbERRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTjBRaXhsUVVGTkxFOUJRVThzWjBKQlFXZENMRk5CUVRkQ08wRkJRMEVzWjBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRk5CUVZNc1NVRkJTU3hSUVVGS0xFVkJRVlFzUTBGQmFFTXNRMEZCVUR0QlFVTkVMRkZCU0VRN1FVRkpRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1JVRkJkMElzVlVGQmVFSXNSVUZEYVVJc1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4UFFVRXhRaXhEUVVScVFqdEJRVVZCTEdsQ1FVRlZMSGxEUVVGVExFZEJRVlFzUlVGQll6dEJRVU4wUWl4bFFVRk5MRTlCUVU4c1owSkJRV2RDTEZOQlFUZENPMEZCUTBFc1owSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEZkQlFWY3NTVUZCU1N4UlFVRktMRVZCUVZnc1EwRkJhRU1zUTBGQlVEdEJRVU5FTEZGQlNFUTdRVUZKUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQmFrSXNSVUZCZDBJc1dVRkJlRUlzUlVGRGFVSXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFBRVUV4UWl4RFFVUnFRanRCUVVWQkxHbENRVUZWTEhsRFFVRlRMRWRCUVZRc1JVRkJZeXhMUVVGa0xFVkJRWEZDTzBGQlF6ZENMR1ZCUVUwc1QwRkJUeXhuUWtGQlowSXNVMEZCTjBJN1FVRkRRU3hwUWtGQlVTeFRRVUZUTEdkQ1FVRm5RaXhUUVVGcVF6dEJRVU5CTEdkQ1FVRlBMR2RDUVVGblFpeGxRVUZvUWl4RFFVTklMRk5CUVZNc1NVRkJTU3hSUVVGS0xFVkJRVlFzUlVGQmVVSXNUVUZCVFN4UlFVRk9MRVZCUVhwQ0xFTkJSRWNzUTBGQlVEdEJRVVZFTEZGQlRFUTdRVUZOUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQmFrSXNSVUZCZDBJc1ZVRkJlRUlzUlVGRGFVSXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFBRVUV4UWl4RFFVUnFRanM3UVVGSFFTeFhRVUZKTEU5QlFVOHNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFdEJRVXNzVVVGQmRrSXNRMEZCV0R0QlFVTkJMRmxCUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNVVUZCZGtJc1JVRkJhVU1zUzBGQlN5eFZRVUYwUXl4RlFVRnJSQ3hKUVVGc1JEdEJRVU5CTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeEZRVUYzUWl4TlFVRjRRaXhGUVVGblF5eEpRVUZvUXpzN1FVRkZRU3hYUVVGSkxHVkJRV1VzUTBGRGFrSXNRMEZCUXl4TlFVRkVMRVZCUVZNc1VVRkJWQ3hEUVVScFFpeEZRVU5ITEVOQlFVTXNVVUZCUkN4RlFVRlhMRlZCUVZnc1EwRkVTQ3hGUVVWcVFpeERRVUZETEZOQlFVUXNSVUZCV1N4WFFVRmFMRU5CUm1sQ0xFVkJSVk1zUTBGQlF5eHJRa0ZCUkN4RlFVRnhRaXh2UWtGQmNrSXNRMEZHVkN4RlFVZHFRaXhEUVVGRExGTkJRVVFzUlVGQldTeFhRVUZhTEVOQlNHbENMRVZCUjFNc1EwRkJReXhyUWtGQlJDeEZRVUZ4UWl4dlFrRkJja0lzUTBGSVZDeERRVUZ1UWp0QlFVdEJMRmxCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4aFFVRmhMRTFCUVdwRExFVkJRWGxETEVkQlFYcERMRVZCUVRoRE8wRkJRelZETEcxQ1FVRlhMRlZCUVZNc1ZVRkJWQ3hGUVVGeFFqdEJRVU01UWl4clFrRkJUeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU51UWl4dFFrRkJUU3hEUVVGRExFOUJRVThzWjBKQlFXZENMRk5CUVhoQ0xFVkJRVzFETEZGQlFXNURMRVZCUVU0N1FVRkRRU3hwUWtGQlNUdEJRVU5HTEhGQ1FVRk5MRmRCUVZjc1IwRkJXQ3hEUVVGT08wRkJRMFFzWTBGR1JDeERRVVZGTEU5QlFVOHNRMEZCVUN4RlFVRlZPMEZCUTFZN1FVRkRRU3dyUWtGQlowSXNZMEZCYUVJc1EwRkJLMElzWjBKQlFXZENMRk5CUVM5RExFVkJRVEJFTEVWQlFVVXNUMEZCTlVRN1FVRkRSRHRCUVVORUxHOUNRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4SFFVRm9ReXhEUVVGUU8wRkJRMFFzV1VGVVJEdEJRVlZFTEZWQldGTXNRMEZYVUN4aFFVRmhMRU5CUVdJc1JVRkJaMElzUTBGQmFFSXNRMEZZVHl4RFFVRldPMEZCV1VFc1kwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xHRkJRV0VzUTBGQllpeEZRVUZuUWl4RFFVRm9RaXhEUVVGNFFpeEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ08wRkJSVVE3TzBGQlJVUTdRVUZEUVN4WFFVRkpMRXRCUVVzc1UwRkJWQ3hGUVVGdlFqdEJRVU5zUWl4alFVRkxMRk5CUVV3c1EwRkJaU3hKUVVGbUxFVkJRWEZDTEV0QlFYSkNPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3p0clEwRkpZU3hMTEVWQlFVODdRVUZEYkVJc1YwRkJTU3hyUWtGQmEwSXNTVUZCZEVJN1FVRkRRU3hYUVVGSkxFOUJRVW83UVVGRFFUdEJRVU5CTEdsQ1FVRlZMSGxEUVVGVExGRkJRVlFzUlVGQmJVSTdRVUZETTBJc1lVRkJTU3hMUVVGTExFMUJRVXdzU1VGQlpTeG5Ra0ZCWjBJc1VVRkJia01zUlVGQk5rTTdRVUZETTBNN1FVRkRRU3hsUVVGSkxGVkJRVlVzU1VGQlpEdEJRVU5FTEZWQlNFUXNUVUZIVHp0QlFVTk1MR1ZCUVVrc1ZVRkJWU3huUWtGQlowSXNXVUZCYUVJc1EwRkJOa0lzWjBKQlFXZENMRkZCUVRkRExFTkJRV1E3UVVGRFJEdEJRVU5FTEdGQlFVa3NWVUZCVlN4TlFVRmtMRVZCUVhOQ08wRkJRM0JDTEdWQlFVa3NUMEZCVHl4VlFVRlZMRlZCUVZVc1RVRkJWaXhIUVVGdFFpeERRVUUzUWl4RlFVRm5ReXhSUVVGb1F5eEZRVUZZTzBGQlEwUXNWVUZHUkN4TlFVVlBPMEZCUTB3c1pVRkJTU3hQUVVGUExFVkJRVmc3UVVGRFJEdEJRVU5FTEdGQlFVa3NUMEZCVHl4RlFVRllPMEZCUTBFc1kwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRlZCUVZVc1RVRkJWaXhIUVVGdFFpeERRVUYyUXl4RlFVRXdReXhIUVVFeFF5eEZRVUVyUXp0QlFVTTNReXhuUWtGQlN5eEpRVUZNTEVOQlFWVXNWVUZCVlN4RFFVRldMRVZCUVdFc1VVRkJZaXhGUVVGV08wRkJRMFE3UVVGRFJDeG5Ra0ZCVHl4TFFVRkxMRWxCUVV3c1EwRkJWU3hKUVVGV0xFTkJRVkE3UVVGRFFTeGhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1MwRkJjVUlzUTBGQlF5eERRVUV4UWl4RlFVRTJRanRCUVVNelFpeHBRa0ZCVFN4WlFVRlpMREJEUVVGYUxFTkJRVTQ3UVVGRFJEdEJRVU5FTzBGQlEwRTdRVUZEUVN4cFFrRkJVU3hYUVVGU0xFZEJRMGtzWjBKQlFXZENMRlZCUVdoQ0xFTkJRVEpDTEdkQ1FVRm5RaXhWUVVGb1FpeERRVUV5UWl4TlFVRXpRaXhIUVVGdlF5eERRVUV2UkN4RlFVRnJSU3hMUVVSMFJUdEJRVVZCTEdGQlFVa3NUVUZCVFN4TlFVRk5MRXRCUVU0c1EwRkJXU3hyUWtGQmEwSXNTVUZCYkVJc1IwRkJlVUlzUzBGQmVrSXNSMEZCYVVNc1NVRkJha01zUjBGQmQwTXNSMEZCY0VRc1EwRkJWanRCUVVOQkxHbENRVUZSTEVsQlFWSXNSMEZCWlN4SlFVRkpMRWxCUVVvc1EwRkJVeXhEUVVGVUxFVkJRVmtzVlVGQldpeERRVUYxUWl4TFFVRjBRenRCUVVOQkxIbENRVUZuUWl4WFFVRm9RaXhEUVVFMFFpeFBRVUUxUWl4RlFVRnhReXhSUVVGeVF5eEZRVU5KTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4UlFVRlJMRWxCUVZJc1EwRkJZU3hOUVVFM1F5eERRVVJLTEVWQlF6QkVMRWxCUkRGRU8wRkJSVUVzWjBKQlFVOHNUMEZCVUR0QlFVTkVMRkZCTjBKRU8wRkJPRUpCTEZsQlFVc3NVVUZCVEN4SFFVRm5RaXhMUVVGTExGbEJRVXdzUTBGQmEwSXNTVUZCYkVJc1EwRkJhRUk3UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNWVUZCZUVJc1JVRkJiME1zUzBGQlN5eFJRVUY2UXp0QlFVTkJPMEZCUTBFN1FVRkRRU3haUVVGTExGRkJRVXdzUTBGQll5eEpRVUZrTEVkQlFYRkNMRlZCUVhKQ08wRkJRMEVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVVzc1VVRkJkRUlzUlVGQlowTXNWMEZCYUVNc1JVRkJOa01zUzBGQlN5eFpRVUZNTEVOQlFXdENMRWxCUVd4Q0xFTkJRVGRETzBGQlEwRXNXVUZCU3l4UlFVRk1MRU5CUVdNc1ZVRkJaQ3hIUVVFeVFpeFBRVUV6UWpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVjBGQlNTeFBRVUZQTzBGQlExUXNaVUZCVFN4blFrRkVSenRCUVVWVUxHbENRVUZSTEVWQlJrTTdRVUZIVkN4aFFVRkpMRWxCU0VzN1FVRkpWQ3hsUVVGTkxFbEJTa2M3UVVGTFZDeG5Ra0ZCVHl4RFFVeEZPMEZCVFZRc1kwRkJTenRCUVU1SkxGRkJRVmc3UVVGUlFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhSUVVGTUxFTkJRV01zVlVGQlpDeERRVUY1UWl4VFFVRXhReXhGUVVGeFJDeFBRVUZ5UkN4RlFVTnBRaXhMUVVGTExHTkJRVXdzUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzUlVGQk1VSXNRMEZFYWtJc1JVRkRaMFFzUzBGRWFFUXNSVUZEZFVRc1NVRkVka1E3UVVGRlFTeGpRVUZQTzBGQlEwd3NaVUZCVFN4bFFVUkVPMEZCUlV3c2FVSkJRVkVzUlVGR1NEdEJRVWRNTEdGQlFVa3NTVUZJUXp0QlFVbE1MR1ZCUVUwc1NVRktSRHRCUVV0TUxHZENRVUZQTEVOQlRFWTdRVUZOVEN4alFVRkxPMEZCVGtFc1VVRkJVRHRCUVZGQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRkZCUVV3c1EwRkJZeXhWUVVGa0xFTkJRWGxDTEZOQlFURkRMRVZCUVhGRUxFMUJRWEpFTEVWQlEybENMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeEpRVUZ3UWl4RlFVRXdRaXhGUVVFeFFpeERRVVJxUWl4RlFVTm5SQ3hMUVVSb1JDeEZRVU4xUkN4SlFVUjJSRHM3UVVGSFFUdEJRVU5CTzBGQlEwRXNhVUpCUVZVc01rTkJRVmM3UVVGRGJrSXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFdEJRVXNzVVVGQlRDeEZRVUZvUXl4RFFVRlFPMEZCUTBRc1VVRkdSRHRCUVVkQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRkZCUVV3c1EwRkJZeXhWUVVGa0xFTkJRWGxDTEZOQlFURkRMRVZCUVhGRUxGVkJRWEpFTEVWQlEybENMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkVha0lzUlVGRGNVUXNTMEZFY2tRc1JVRkRORVFzU1VGRU5VUTdRVUZGUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQlN5eFJRVUYwUWl4RlFVRm5ReXhWUVVGb1F5eEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFTzBGQlJVRXNhVUpCUVZVc01rTkJRVmM3UVVGRGJrSXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFdEJRVXNzVDBGQlRDeEZRVUZvUXl4RFFVRlFPMEZCUTBRc1VVRkdSRHRCUVVkQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRkZCUVV3c1EwRkJZeXhWUVVGa0xFTkJRWGxDTEZOQlFURkRMRVZCUVhGRUxGTkJRWEpFTEVWQlEybENMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkVha0lzUlVGRGNVUXNTMEZFY2tRc1JVRkRORVFzU1VGRU5VUTdRVUZGUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQlN5eFJRVUYwUWl4RlFVRm5ReXhUUVVGb1F5eEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFTzBGQlJVUTdPMEZCUlVRN096czdPenM3WjBOQlNWY3NTeXhGUVVGUE8wRkJRMmhDTEZkQlFVa3NhMEpCUVd0Q0xFbEJRWFJDTzBGQlEwRXNWMEZCU1N4UFFVRktPMEZCUTBFN1FVRkRRU3hwUWtGQlZTeDVRMEZCVXl4UlFVRlVMRVZCUVcxQ08wRkJRek5DTEdGQlFVa3NTMEZCU3l4TlFVRk1MRWxCUVdVc1owSkJRV2RDTEUxQlFXNURMRVZCUVRKRE8wRkJRM3BETzBGQlEwRXNaVUZCU1N4VFFVRlRMRWxCUVdJN1FVRkRSQ3hWUVVoRUxFMUJSMDg3UVVGRFRDeGxRVUZKTEZOQlFWTXNaMEpCUVdkQ0xGbEJRV2hDTEVOQlFUWkNMR2RDUVVGblFpeE5RVUUzUXl4RFFVRmlPMEZCUTBRN1FVRkRSQ3huUWtGQlR5eE5RVUZRTzBGQlEwUXNVVUZTUkR0QlFWTkJMRmxCUVVzc1RVRkJUQ3hIUVVGakxFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGQlpEdEJRVU5CTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeEZRVUYzUWl4UlFVRjRRaXhGUVVGclF5eExRVUZMTEUxQlFYWkRPenRCUVVWQkxHbENRVUZWTERKRFFVRlhPMEZCUTI1Q0xHZENRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4TFFVRkxMRkZCUVV3c1JVRkJhRU1zUTBGQlVEdEJRVU5FTEZGQlJrUTdRVUZIUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQlN5eE5RVUZNTEVOQlFWa3NWVUZCV2l4RFFVRjFRaXhUUVVGNFF5eEZRVUZ0UkN4VlFVRnVSQ3hGUVVOcFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFOUJRVEZDTEVOQlJHcENMRVZCUTNGRUxFdEJSSEpFTEVWQlF6UkVMRWxCUkRWRU96dEJRVWRCTEdsQ1FVRlZMREpEUVVGWE8wRkJRMjVDTEdkQ1FVRlBMR2RDUVVGblFpeGxRVUZvUWl4RFFVRm5ReXhMUVVGTExFOUJRVXdzUlVGQmFFTXNRMEZCVUR0QlFVTkVMRkZCUmtRN1FVRkhRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1ZVRkJXaXhEUVVGMVFpeFRRVUY0UXl4RlFVRnRSQ3hUUVVGdVJDeEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFT3p0QlFVZEJMR2xDUVVGVkxIbERRVUZUTEVsQlFWUXNSVUZCWlR0QlFVTjJRaXhuUWtGQlR5eERRVUZETEZGQlFWRXNaMEpCUVdkQ0xGTkJRWHBDTEVWQlFXOURMRkZCUVhCRExFVkJRVkE3UVVGRFFTeGpRVUZMTEVsQlFVa3NSMEZCVkN4SlFVRm5RaXhMUVVGTExGVkJRWEpDTEVWQlFXbERPMEZCUXk5Q0xHVkJRVWtzVDBGQlR5eEpRVUZZTEVWQlFXbENPMEZCUTJZc2IwSkJRVThzWjBKQlFXZENMRWxCUVhaQ08wRkJRMFE3UVVGRFJqdEJRVU5FTEdkQ1FVRlBMR2RDUVVGblFpeExRVUYyUWp0QlFVTkVMRkZCVWtRN1FVRlRRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1ZVRkJXaXhEUVVGMVFpeFRRVUY0UXl4RlFVRnRSQ3huUWtGQmJrUXNSVUZEYVVJc1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4UFFVRXhRaXhEUVVScVFpeEZRVU54UkN4TFFVUnlSQ3hGUVVNMFJDeEpRVVExUkRzN1FVRkhRU3hwUWtGQlZTeDVRMEZCVXl4SFFVRlVMRVZCUVdNN1FVRkRkRUlzWlVGQlRTeERRVUZETEU5QlFVOHNaMEpCUVdkQ0xGTkJRWGhDTEVWQlFXMURMRkZCUVc1RExFVkJRVTQ3UVVGRFFTeG5Ra0ZCVHl4blFrRkJaMElzWlVGQmFFSXNRMEZCWjBNc1JVRkJSU3hQUVVGUExFdEJRVXNzWVVGQlpDeERRVUZvUXl4RFFVRlFPMEZCUTBRc1VVRklSRHRCUVVsQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hWUVVGYUxFTkJRWFZDTEZOQlFYaERMRVZCUVcxRUxITkNRVUZ1UkN4RlFVTnBRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJSR3BDTEVWQlEzRkVMRXRCUkhKRUxFVkJRelJFTEVsQlJEVkVPenRCUVVkQkxHbENRVUZWTEhsRFFVRlRMRWRCUVZRc1JVRkJZenRCUVVOMFFpeGhRVUZKTEdGQlFXRXNaMEpCUVdkQ0xGbEJRV2hDTEVOQlFUWkNMR2RDUVVGblFpeExRVUUzUXl4RFFVRnFRanRCUVVOQkxHRkJRVWtzU1VGQlNTeERRVUZTTzBGQlEwRXNZMEZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzU1VGQlNTeFZRVUZ3UWl4RlFVRm5RenRCUVVNNVFpd3lRa0ZCWjBJc1YwRkJhRUlzUTBGQk5FSXNWVUZCTlVJc1JVRkJkME1zUTBGQmVFTXNSVUZEU1N4blFrRkJaMElzWlVGQmFFSXNRMEZCWjBNc1IwRkJhRU1zUTBGRVNqdEJRVVZCTzBGQlEwUTdRVUZEUkN4blFrRkJUeXhWUVVGUU8wRkJRMFFzVVVGVVJEdEJRVlZCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFMUJRWFJDTEVWQlFUaENMSEZDUVVFNVFpeEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFT3p0QlFVZEJMR2xDUVVGVkxIbERRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTjBRaXhoUVVGSkxHRkJRV0VzWjBKQlFXZENMRmxCUVdoQ0xFTkJRVFpDTEdkQ1FVRm5RaXhMUVVFM1F5eERRVUZxUWp0QlFVTkJMR0ZCUVVrc1NVRkJTU3hEUVVGU08wRkJRMEVzWTBGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1NVRkJTU3hWUVVGd1FpeEZRVUZuUXp0QlFVTTVRaXhsUVVGSkxFOUJRVThzU1VGQlNTeGhRVUZtTEVWQlFUaENPMEZCUXpWQ08wRkJRMFE3UVVGRFJDd3lRa0ZCWjBJc1YwRkJhRUlzUTBGQk5FSXNWVUZCTlVJc1JVRkJkME1zUTBGQmVFTXNSVUZEU1N4blFrRkJaMElzWlVGQmFFSXNRMEZCWjBNc1IwRkJhRU1zUTBGRVNqdEJRVVZCTzBGQlEwUTdRVUZEUkN4blFrRkJUeXhWUVVGUU8wRkJRMFFzVVVGYVJEdEJRV0ZCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFMUJRWFJDTEVWQlFUaENMRTFCUVRsQ0xFVkJRMmxDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFYWtJc1JVRkRjVVFzUzBGRWNrUXNSVUZETkVRc1NVRkVOVVE3TzBGQlIwRXNhVUpCUVZVc2VVTkJRVk1zUjBGQlZDeEZRVUZqTEVsQlFXUXNSVUZCYjBJc1ZVRkJjRUlzUlVGQlowTTdRVUZEZUVNc1owSkJRVThzUTBGQlF5eFJRVUZSTEdkQ1FVRm5RaXhUUVVGNlFpeEZRVUZ2UXl4UlFVRndReXhGUVVGUU8wRkJRMEVzWVVGQlNTeEZRVUZGTEhOQ1FVRnpRaXhaUVVGWkxFMUJRWEJETEVOQlFVb3NSVUZCYVVRN1FVRkRMME1zYVVKQlFVMHNUVUZCVFN4NVEwRkJUaXhEUVVGT08wRkJRMFE3UVVGRFJDeG5Ra0ZCVHl4SFFVRlFPMEZCUTBRc1VVRk9SRHRCUVU5QkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRTFCUVhSQ0xFVkJRVGhDTEdkQ1FVRTVRaXhGUVVOcFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFOUJRVEZDTEVOQlJHcENMRVZCUTNGRUxFdEJSSEpFTEVWQlF6UkVMRWxCUkRWRU8wRkJSVVE3TzBGQlJVUTdPenM3T3pzN0swSkJTVlVzU3l4RlFVRlBPMEZCUTJZc1YwRkJTU3hyUWtGQmEwSXNTVUZCZEVJN1FVRkRRU3hYUVVGSkxGTkJRVk1zVTBGQlZDeE5RVUZUTEVOQlFWTXNSMEZCVkN4RlFVRmpMRWRCUVdRc1JVRkJiVUk3UVVGRE9VSTdRVUZEUVN4aFFVRkpMRWxCUVVrc1RVRkJUU3hMUVVGTExFdEJRVXdzUTBGQlZ5eEpRVUZKTEZGQlFVb3NSVUZCV0N4RFFVRk9MRWRCUVcxRExFZEJRVE5ETzBGQlEwRXNZVUZCU1N4TlFVRk5MRU5CUVU0c1EwRkJTaXhGUVVGak8wRkJRMW9zWlVGQlNTeEhRVUZLTzBGQlEwUTdRVUZEUkN4blFrRkJUeXhEUVVGUU8wRkJRMFFzVVVGUVJEdEJRVkZCTEZkQlFVa3NZVUZCWVN4VFFVRmlMRlZCUVdFc1EwRkJVeXhEUVVGVUxFVkJRVmtzUTBGQldpeEZRVUZsTzBGQlF6bENPMEZCUTBFc1lVRkJTU3hGUVVGRkxGZEJRVVlzU1VGQmFVSXNSVUZCUlN4WFFVRjJRaXhGUVVGdlF6dEJRVU5zUXl4clFrRkJUeXhGUVVGRkxFbEJRVVlzUzBGQlZ5eEZRVUZGTEVsQlFYQkNPMEZCUTBRN1FVRkRSQ3huUWtGQlR5eE5RVUZOTEVOQlFXSTdRVUZEUkN4UlFVNUVPMEZCVDBFc1YwRkJTU3hQUVVGS08wRkJRMEU3UVVGRFFTeHBRa0ZCVlN4NVEwRkJVeXhSUVVGVUxFVkJRVzFDTzBGQlF6TkNMR0ZCUVVrc1MwRkJTeXhOUVVGTUxFbEJRV1VzWjBKQlFXZENMRXRCUVc1RExFVkJRVEJETzBGQlEzaERPMEZCUTBFc1pVRkJTU3hYUVVGWExFbEJRV1k3UVVGRFJDeFZRVWhFTEUxQlIwODdRVUZEVEN4bFFVRkpMRmRCUVZjc1owSkJRV2RDTEZsQlFXaENMRU5CUVRaQ0xHZENRVUZuUWl4TFFVRTNReXhEUVVGbU8wRkJRMFE3UVVGRFJDeGhRVUZKTEZGQlFWRXNWVUZCVlN4RFFVRldMRU5CUVZvN1FVRkRRU3hoUVVGSkxGTkJRVk1zVFVGQlRTeEpRVUZPTEVsQlFXTXNVVUZCTTBJc1JVRkJjVU03UVVGRGJrTXNaVUZCU1N4TlFVRk5MR2RDUVVGblFpeFZRVUZvUWl4RFFVRXlRaXhMUVVFelFpeERRVUZPTEVOQlFVb3NSVUZCT0VNN1FVRkROVU1zTmtKQlFXZENMR05CUVdoQ0xFTkJRU3RDTEdkQ1FVRm5RaXhYUVVFdlF5eEZRVU1yUWl4elFrRkVMMEk3UVVGRlJEdEJRVU5FTEc5Q1FVRlRMRTFCUVZRc1IwRkJhMElzVFVGQlRTeEpRVUY0UWp0QlFVTkVMRlZCVGtRc1RVRk5UenRCUVVOTUxHZENRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzVlVGQlZTeE5RVUU1UWl4RlFVRnpReXhIUVVGMFF5eEZRVUV5UXp0QlFVTjZReXh6UWtGQlV5eFZRVUZVTEVOQlFXOUNMRU5CUVhCQ0xFbEJRWGxDTEZWQlFWVXNRMEZCVml4RFFVRjZRanRCUVVORU8wRkJRMFFzYjBKQlFWTXNUVUZCVkN4SFFVRnJRaXhEUVVGc1FqdEJRVU5FTzBGQlEwUXNaMEpCUVU4c1VVRkJVRHRCUVVORUxGRkJja0pFTzBGQmMwSkJMRmxCUVVzc1MwRkJUQ3hIUVVGaExFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGQllqdEJRVU5CTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeEZRVUYzUWl4UFFVRjRRaXhGUVVGcFF5eExRVUZMTEV0QlFYUkRPenRCUVVWQkxHbENRVUZWTERKRFFVRlhPMEZCUTI1Q0xHRkJRVWtzUzBGQlN5eE5RVUZVTEVWQlFXbENPMEZCUTJZc1pVRkJTU3hSUVVGUkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4TFFVRkxMRTFCUVV3c1IwRkJZeXhEUVVFNVFpeERRVUZhTzBGQlEwRXNhMEpCUVU4c1MwRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFVc3NUVUZCVEN4SFFVRmpMRU5CUVRsQ0xFTkJRVkE3UVVGRFFTeG5Ra0ZCU3l4TlFVRk1PMEZCUTBRc1ZVRktSQ3hOUVVsUE8wRkJRMHdzWlVGQlNTeFJRVUZSTEdkQ1FVRm5RaXhUUVVFMVFqdEJRVU5FTzBGQlEwUXNaMEpCUVU4c1MwRkJVRHRCUVVORUxGRkJWRVE3UVVGVlFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhMUVVGTUxFTkJRVmNzVlVGQldDeERRVUZ6UWl4VFFVRjJReXhGUVVGclJDeExRVUZzUkN4RlFVTnBRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJSR3BDTEVWQlEzRkVMRXRCUkhKRUxFVkJRelJFTEVsQlJEVkVPenRCUVVkQkxHbENRVUZWTEhsRFFVRlRMRkZCUVZRc1JVRkJiVUk3UVVGRE0wSXNZMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEZWQlFWVXNUVUZCT1VJc1JVRkJjME1zUjBGQmRFTXNSVUZCTWtNN1FVRkRla01zWjBKQlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGTExFMUJRWEpDTEVsQlFTdENMRlZCUVZVc1EwRkJWaXhEUVVFdlFqdEJRVU5CTEdkQ1FVRkxMRTFCUVV3N1FVRkRSRHRCUVVORUxHZENRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4TFFVRkxMRTFCUVhKRExFTkJRVkE3UVVGRFJDeFJRVTVFTzBGQlQwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1UwRkJka01zUlVGQmEwUXNUVUZCYkVRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN3eVEwRkJWenRCUVVOdVFpeGhRVUZKTEV0QlFVc3NUVUZCVkN4RlFVRnBRanRCUVVObUxHVkJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEdkQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NTMEZCU3l4TlFVRjZRaXhGUVVGcFF5eEhRVUZxUXl4RlFVRnpRenRCUVVOd1F5eHJRa0ZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRVWtzUTBGQmNFSXNTVUZCZVVJc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRU5CUVhwQ08wRkJRMFE3UVVGRFJDeG5Ra0ZCU3l4TlFVRk1PMEZCUTBFc2EwSkJRVThzUzBGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVVzc1RVRkJja0lzUTBGQlVEdEJRVU5FTEZWQlVFUXNUVUZQVHp0QlFVTk1MR1ZCUVVrc1VVRkJVU3huUWtGQlowSXNVMEZCTlVJN1FVRkRSRHRCUVVORUxHZENRVUZQTEV0QlFWQTdRVUZEUkN4UlFWcEVPMEZCWVVFc1dVRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRlZCUVZnc1EwRkJjMElzVTBGQmRrTXNSVUZCYTBRc1QwRkJiRVFzUlVGRGFVSXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFBRVUV4UWl4RFFVUnFRaXhGUVVOeFJDeExRVVJ5UkN4RlFVTTBSQ3hKUVVRMVJEczdRVUZIUVN4cFFrRkJWU3g1UTBGQlV5eFJRVUZVTEVWQlFXMUNPMEZCUXpOQ0xHTkJRVXNzU1VGQlNTeEpRVUZKTEV0QlFVc3NUVUZCVEN4SFFVRmpMRU5CUVROQ0xFVkJRVGhDTEV0QlFVc3NRMEZCYmtNc1JVRkJjME1zUjBGQmRFTXNSVUZCTWtNN1FVRkRla01zWjBKQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGSkxGVkJRVlVzVFVGQk9VSXNTVUZCZDBNc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRU5CUVhoRE8wRkJRMFE3UVVGRFJDeGpRVUZMTEUxQlFVd3NTVUZCWlN4VlFVRlZMRTFCUVhwQ08wRkJRMEVzWTBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxGVkJRVlVzVFVGQk9VSXNSVUZCYzBNc1IwRkJkRU1zUlVGQk1rTTdRVUZEZWtNc1owSkJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhKUVVGeFFpeFZRVUZWTEVOQlFWWXNRMEZCY2tJN1FVRkRSRHRCUVVORUxHZENRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4TFFVRkxMRTFCUVhKRExFTkJRVkE3UVVGRFJDeFJRVlJFTzBGQlZVRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1UwRkJka01zUlVGQmEwUXNVMEZCYkVRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN3eVEwRkJWenRCUVVOdVFpeGpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzUzBGQlN5eE5RVUZNTEVkQlFXTXNRMEZCYkVNc1JVRkJjVU1zUjBGQmNrTXNSVUZCTUVNN1FVRkRlRU1zWlVGQlNTeE5RVUZOTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGTExFMUJRVXdzUjBGQll5eERRVUZrTEVkQlFXdENMRU5CUVd4RExFTkJRVlk3UVVGRFFTeG5Ra0ZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRVXNzVFVGQlRDeEhRVUZqTEVOQlFXUXNSMEZCYTBJc1EwRkJiRU1zU1VGQmRVTXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFYWkRPMEZCUTBFc1owSkJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhKUVVGeFFpeEhRVUZ5UWp0QlFVTkVPMEZCUTBRc1owSkJRVThzWjBKQlFXZENMRk5CUVhaQ08wRkJRMFFzVVVGUVJEdEJRVkZCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFdEJRVXdzUTBGQlZ5eFZRVUZZTEVOQlFYTkNMRk5CUVhaRExFVkJRV3RFTEZOQlFXeEVMRVZCUTJsQ0xFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGRWFrSXNSVUZEY1VRc1MwRkVja1FzUlVGRE5FUXNTVUZFTlVRN08wRkJSMEVzYVVKQlFWVXNlVU5CUVZNc1MwRkJWQ3hGUVVGblFpeFBRVUZvUWl4RlFVRjVRaXhSUVVGNlFpeEZRVUZ0UXp0QlFVTXpReXhwUWtGQlVTeFBRVUZQTEV0QlFWQXNSVUZCWXl4RFFVRmtMRU5CUVZJN1FVRkRRU3hoUVVGSkxGRkJRVkVzUTBGQldpeEZRVUZsTzBGQlEySXNiVUpCUVZFc1MwRkJTeXhIUVVGTUxFTkJRVk1zUzBGQlN5eE5RVUZNTEVkQlFXTXNTMEZCZGtJc1JVRkJPRUlzUTBGQk9VSXNRMEZCVWp0QlFVTkVMRlZCUmtRc1RVRkZUenRCUVVOTUxHMUNRVUZSTEV0QlFVc3NSMEZCVEN4RFFVRlRMRXRCUVZRc1JVRkJaMElzUzBGQlN5eE5RVUZ5UWl4RFFVRlNPMEZCUTBRN1FVRkRSQ3h0UWtGQlZTeFBRVUZQTEU5QlFWQXNSVUZCWjBJc1VVRkJhRUlzUTBGQlZqdEJRVU5CTEcxQ1FVRlZMRXRCUVVzc1IwRkJUQ3hEUVVGVExFOUJRVlFzUlVGQmEwSXNTMEZCU3l4TlFVRk1MRWRCUVdNc1MwRkJhRU1zUTBGQlZqdEJRVU5CTEdGQlFVa3NWVUZCVlN4blFrRkJaMElzV1VGQmFFSXNRMEZCTmtJc1owSkJRV2RDTEV0QlFUZERMRU5CUVdRN1FVRkRRVHRCUVVOQkxHTkJRVXNzU1VGQlNTeEpRVUZKTEV0QlFXSXNSVUZCYjBJc1NVRkJTU3hSUVVGUkxFOUJRV2hETEVWQlFYbERMRWRCUVhwRExFVkJRVGhETzBGQlF6VkRMRzFDUVVGUkxGVkJRVklzUTBGQmJVSXNVVUZCVVN4TlFVRlNMRVZCUVc1Q0xFbEJRWFZETEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeERRVUYyUXp0QlFVTkJMR2RDUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1NVRkJjVUlzUzBGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVVrc1QwRkJjRUlzUTBGQmNrSTdRVUZEUkR0QlFVTkVPMEZCUTBFc1kwRkJTeXhKUVVGSkxFbEJRVWtzVVVGQlVTeFBRVUZ5UWl4RlFVRTRRaXhKUVVGSkxFdEJRVXNzVFVGQlRDeEhRVUZqTEU5QlFXaEVMRVZCUVhsRUxFZEJRWHBFTEVWQlFUaEVPMEZCUXpWRUxHZENRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzU1VGQmNVSXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRVWtzVDBGQmNFSXNRMEZCY2tJN1FVRkRSRHRCUVVORU8wRkJRMEVzWTBGQlN5eEpRVUZKTEVsQlFVa3NTMEZCU3l4TlFVRk1MRWRCUVdNc1QwRkJNMElzUlVGQmIwTXNTVUZCU1N4TFFVRkxMRTFCUVRkRExFVkJRWEZFTEVkQlFYSkVMRVZCUVRCRU8wRkJRM2hFTEd0Q1FVRlBMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRlFPMEZCUTBRN1FVRkRSQ3hqUVVGTExFMUJRVXdzU1VGQlpTeFBRVUZtTzBGQlEwRTdRVUZEUVN4alFVRkxMRWxCUVVrc1NVRkJTU3hMUVVGTExFMUJRVXdzUjBGQll5eERRVUV6UWl4RlFVRTRRaXhMUVVGTExFdEJRVzVETEVWQlFUQkRMRWRCUVRGRExFVkJRU3RETzBGQlF6ZERMR2RDUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCU1N4VlFVRlZMRTFCUVdRc1IwRkJkVUlzUTBGQmRrTXNTVUZCTkVNc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRU5CUVRWRE8wRkJRMFE3UVVGRFJDeGpRVUZMTEUxQlFVd3NTVUZCWlN4VlFVRlZMRTFCUVZZc1IwRkJiVUlzUTBGQmJFTTdRVUZEUVN4alFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NWVUZCVlN4TlFVRTVRaXhGUVVGelF5eEhRVUYwUXl4RlFVRXlRenRCUVVONlF5eG5Ra0ZCU3l4VlFVRk1MRU5CUVdkQ0xGRkJRVkVzUTBGQlVpeEhRVUZaTEVOQlFUVkNMRWxCUVdsRExGVkJRVlVzUTBGQlZpeERRVUZxUXp0QlFVTkVPMEZCUTBRc1owSkJRVThzVDBGQlVEdEJRVU5FTEZGQmFrTkVPMEZCYTBOQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhWUVVGWUxFTkJRWE5DTEZOQlFYWkRMRVZCUVd0RUxGRkJRV3hFTEVWQlEybENMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkVha0lzUlVGRGNVUXNTMEZFY2tRc1JVRkRORVFzU1VGRU5VUTdPMEZCUjBFc2FVSkJRVlVzZVVOQlFWTXNVMEZCVkN4RlFVRnZRaXhQUVVGd1FpeEZRVUUyUWp0QlFVTnlReXhoUVVGSkxFOUJRVThzWjBKQlFXZENMRmxCUVdoQ0xFTkJRVFpDTEdkQ1FVRm5RaXhMUVVFM1F5eERRVUZZTzBGQlEwRXNZVUZCU1N4UlFVRlJMRTlCUVU4c1UwRkJVQ3hGUVVGclFpeERRVUZzUWl4RFFVRmFPMEZCUTBFc1lVRkJTU3hSUVVGUkxFTkJRVm9zUlVGQlpUdEJRVU5pTEcxQ1FVRlJMRXRCUVVzc1RVRkJUQ3hIUVVGakxFdEJRWFJDTzBGQlEwUTdRVUZEUkN4cFFrRkJVU3hMUVVGTExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWa3NTMEZCU3l4SFFVRk1MRU5CUVZNc1MwRkJWQ3hGUVVGblFpeExRVUZMTEUxQlFYSkNMRU5CUVZvc1EwRkJVanRCUVVOQkxHRkJRVWtzVFVGQlRTeFBRVUZQTEU5QlFWQXNSVUZCWjBJc1MwRkJTeXhOUVVGeVFpeERRVUZXTzBGQlEwRXNZVUZCU1N4TlFVRk5MRU5CUVZZc1JVRkJZVHRCUVVOWUxHbENRVUZOTEV0QlFVc3NUVUZCVEN4SFFVRmpMRWRCUVhCQ08wRkJRMFE3UVVGRFJDeGxRVUZOTEV0QlFVc3NSMEZCVEN4RFFVRlRMRU5CUVZRc1JVRkJXU3hMUVVGTExFZEJRVXdzUTBGQlV5eEhRVUZVTEVWQlFXTXNTMEZCU3l4TlFVRnVRaXhEUVVGYUxFTkJRVTQ3UVVGRFFTeGhRVUZKTEZOQlFWTXNRMEZCWWp0QlFVTkJMR05CUVVzc1NVRkJTU3hKUVVGSkxFdEJRV0lzUlVGQmIwSXNTVUZCU1N4SFFVRjRRaXhGUVVFMlFpeEhRVUUzUWl4RlFVRnJRenRCUVVOb1F5eGxRVUZKTEZWQlFWVXNaMEpCUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRWxCUVRWQ0xFVkJRV3RETEVOQlFXeERMRU5CUVdRN1FVRkRRU3d5UWtGQlowSXNWMEZCYUVJc1EwRkJORUlzU1VGQk5VSXNSVUZCYTBNc1VVRkJiRU1zUlVGQk5FTXNUMEZCTlVNN1FVRkRSRHRCUVVORUxHZENRVUZQTEVsQlFWQTdRVUZEUkN4UlFXeENSRHRCUVcxQ1FTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhMUVVGTUxFTkJRVmNzVlVGQldDeERRVUZ6UWl4VFFVRjJReXhGUVVGclJDeFBRVUZzUkN4RlFVTnBRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJSR3BDTEVWQlEzRkVMRXRCUkhKRUxFVkJRelJFTEVsQlJEVkVPenRCUVVkQkxHbENRVUZWTEhsRFFVRlRMR0ZCUVZRc1JVRkJkMEk3UVVGRGFFTXNZVUZCU1N4RFFVRkRMR0ZCUVVRc1NVRkJhMElzWTBGQll5eEpRVUZrTEV0QlFYVkNMRk5CUVRkRExFVkJRWGRFTzBGQlEzUkVMR1ZCUVVrc1RVRkJUU3hUUVVGV08wRkJRMFFzVlVGR1JDeE5RVVZQTzBGQlEwd3NaVUZCU1N4TlFVRk5MR05CUVdNc1VVRkJaQ3hGUVVGV08wRkJRMFE3UVVGRFJDeGhRVUZKTEU5QlFVOHNSVUZCV0R0QlFVTkJMR05CUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4TFFVRkxMRTFCUVhwQ0xFVkJRV2xETEVkQlFXcERMRVZCUVhORE8wRkJRM0JETEdkQ1FVRkxMRU5CUVV3c1NVRkJWU3hMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1EwRkJWanRCUVVORU8wRkJRMFFzWjBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFZEJRVllzUTBGQmFFTXNRMEZCVUR0QlFVTkVMRkZCV0VRN1FVRlpRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1ZVRkJXQ3hEUVVGelFpeFRRVUYyUXl4RlFVRnJSQ3hOUVVGc1JDeEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFT3p0QlFVZEJMR2xDUVVGVkxIbERRVUZUTEZGQlFWUXNSVUZCYlVJN1FVRkRNMElzWVVGQlNTeFBRVUZQTEdkQ1FVRm5RaXhaUVVGb1FpeERRVUUyUWl4blFrRkJaMElzUzBGQk4wTXNRMEZCV0R0QlFVTkJMR0ZCUVVrc1UwRkJVeXhEUVVGaU8wRkJRMEU3UVVGRFFTeGpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzUzBGQlN5eE5RVUY2UWl4RlFVRnBReXhIUVVGcVF5eEZRVUZ6UXp0QlFVTndReXhsUVVGSkxGVkJRVlVzWjBKQlFXZENMRmRCUVdoQ0xFTkJRVFJDTEVsQlFUVkNMRVZCUVd0RExFTkJRV3hETEVOQlFXUTdRVUZEUVN3eVFrRkJaMElzVjBGQmFFSXNRMEZCTkVJc1NVRkJOVUlzUlVGQmEwTXNVVUZCYkVNc1JVRkJORU1zVDBGQk5VTTdRVUZEUkR0QlFVTkVPMEZCUTBFc1kwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRlZCUVZVc1RVRkJPVUlzUlVGQmMwTXNSMEZCZEVNc1JVRkJNa003UVVGRGVrTXNaVUZCU1N4UlFVRlJMRlZCUVZVc1EwRkJWaXhEUVVGYU8wRkJRMEVzWlVGQlNTeG5Ra0ZCWjBJc1IwRkJhRUlzUTBGQmIwSXNTMEZCY0VJc1JVRkJNa0lzWjBKQlFXZENMRXRCUVRORExFTkJRVW9zUlVGQmRVUTdRVUZEY2tRc2EwSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hOUVVGTkxFMUJRVEZDTEVWQlFXdERMRWRCUVd4RExFVkJRWFZETzBGQlEzSkRMRzFDUVVGSkxGVkJRVlVzWjBKQlFXZENMRmRCUVdoQ0xFTkJRVFJDTEV0QlFUVkNMRVZCUVcxRExFTkJRVzVETEVOQlFXUTdRVUZEUVN3clFrRkJaMElzVjBGQmFFSXNRMEZCTkVJc1NVRkJOVUlzUlVGQmEwTXNVVUZCYkVNc1JVRkJORU1zVDBGQk5VTTdRVUZEUkR0QlFVTkdMRmxCVEVRc1RVRkxUenRCUVVOTUxEWkNRVUZuUWl4WFFVRm9RaXhEUVVFMFFpeEpRVUUxUWl4RlFVRnJReXhSUVVGc1F5eEZRVUUwUXl4TFFVRTFRenRCUVVORU8wRkJRMFk3UVVGRFJDeG5Ra0ZCVHl4SlFVRlFPMEZCUTBRc1VVRnlRa1E3UVVGelFrRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1UwRkJka01zUlVGQmEwUXNVVUZCYkVRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhoUVVGVUxFVkJRWGRDTEdGQlFYaENMRVZCUVhWRE8wRkJReTlETEhsQ1FVRm5RaXhwUWtGQmFVSXNaMEpCUVdkQ0xGTkJRV3BFTzBGQlEwRXNZVUZCU1N4WlFVRlpMRTlCUVU4c1lVRkJVQ3hGUVVGelFpeERRVUYwUWl4RFFVRm9RanRCUVVOQkxHRkJRVWtzV1VGQldTeERRVUZvUWl4RlFVRnRRanRCUVVOcVFpeDFRa0ZCV1N4TFFVRkxMRTFCUVV3c1IwRkJZeXhUUVVFeFFqdEJRVU5FTzBGQlEwUXNjVUpCUVZrc1MwRkJTeXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaTEZOQlFWb3NRMEZCV2p0QlFVTkJMR05CUVVzc1NVRkJTU3hKUVVGSkxGTkJRV0lzUlVGQmQwSXNTVUZCU1N4TFFVRkxMRTFCUVdwRExFVkJRWGxETEVkQlFYcERMRVZCUVRoRE8wRkJRelZETEdWQlFVa3NWVUZCVlN4blFrRkJaMElzVjBGQmFFSXNRMEZCTkVJc1NVRkJOVUlzUlVGQmEwTXNRMEZCYkVNc1EwRkJaRHRCUVVOQkxHVkJRVWtzVjBGQlZ5eFBRVUZZTEVWQlFXOUNMR0ZCUVhCQ0xFTkJRVW9zUlVGQmQwTTdRVUZEZEVNc2IwSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEVOQlFXaERMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJRMFFzWjBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRU5CUVVNc1EwRkJha01zUTBGQlVEdEJRVU5FTEZGQlpFUTdRVUZsUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQlN5eExRVUZNTEVOQlFWY3NWVUZCV0N4RFFVRnpRaXhUUVVGMlF5eEZRVUZyUkN4VFFVRnNSQ3hGUVVOcFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFOUJRVEZDTEVOQlJHcENMRVZCUTNGRUxFdEJSSEpFTEVWQlF6UkVMRWxCUkRWRU96dEJRVWRCTEdsQ1FVRlZMSGxEUVVGVExHRkJRVlFzUlVGQmQwSXNZVUZCZUVJc1JVRkJkVU03UVVGREwwTXNlVUpCUVdkQ0xHbENRVUZwUWl4blFrRkJaMElzVTBGQmFrUTdRVUZEUVN4aFFVRkpMRmxCUVZrc1QwRkJUeXhoUVVGUUxFVkJRWE5DTEV0QlFVc3NUVUZCTTBJc1EwRkJhRUk3UVVGRFFTeGhRVUZKTEZsQlFWa3NRMEZCYUVJc1JVRkJiVUk3UVVGRGFrSXNkVUpCUVZrc1MwRkJTeXhOUVVGTUxFZEJRV01zVTBGQk1VSTdRVUZEUkR0QlFVTkVMSEZDUVVGWkxFdEJRVXNzUjBGQlRDeERRVUZUTEZOQlFWUXNSVUZCYjBJc1MwRkJTeXhOUVVGTUxFZEJRV01zUTBGQmJFTXNRMEZCV2p0QlFVTkJMR05CUVVzc1NVRkJTU3hKUVVGSkxGTkJRV0lzUlVGQmQwSXNTMEZCU3l4RFFVRTNRaXhGUVVGblF5eEhRVUZvUXl4RlFVRnhRenRCUVVOdVF5eGxRVUZKTEZWQlFWVXNaMEpCUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRWxCUVRWQ0xFVkJRV3RETEVOQlFXeERMRU5CUVdRN1FVRkRRU3hsUVVGSkxGZEJRVmNzVDBGQldDeEZRVUZ2UWl4aFFVRndRaXhEUVVGS0xFVkJRWGRETzBGQlEzUkRMRzlDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eERRVUZvUXl4RFFVRlFPMEZCUTBRN1FVRkRSanRCUVVORUxHZENRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4RFFVRkRMRU5CUVdwRExFTkJRVkE3UVVGRFJDeFJRV1JFTzBGQlpVRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1UwRkJka01zUlVGQmEwUXNZVUZCYkVRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhaUVVGVUxFVkJRWFZDTzBGQlF5OUNMR0ZCUVVrc1UwRkJVeXhGUVVGaU8wRkJRMEVzWTBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFdEJRVXNzVFVGQmVrSXNSVUZCYVVNc1IwRkJha01zUlVGQmMwTTdRVUZEY0VNc2EwSkJRVThzUTBGQlVDeEpRVUZaTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeERRVUZhTzBGQlEwUTdRVUZEUkR0QlFVTkJMR2RDUVVGUExFbEJRVkE3UVVGRFFTeGpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzVDBGQlR5eE5RVUV6UWl4RlFVRnRReXhIUVVGdVF5eEZRVUYzUXp0QlFVTjBReXd5UWtGQlowSXNWMEZCYUVJc1EwRkJORUlzU1VGQk5VSXNSVUZCYTBNc1EwRkJiRU1zUlVGQmNVTXNUMEZCVHl4RFFVRlFMRU5CUVhKRE8wRkJRMFE3UVVGRFJDeG5Ra0ZCVHl4SlFVRlFPMEZCUTBRc1VVRllSRHRCUVZsQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhWUVVGWUxFTkJRWE5DTEZOQlFYWkRMRVZCUVd0RUxFMUJRV3hFTEVWQlEybENMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkVha0lzUlVGRGNVUXNTMEZFY2tRc1JVRkRORVFzU1VGRU5VUTdRVUZGUkRzN096czdRVUZGUkRzN096dG5RMEZKVnl4TExFVkJRVTg3UVVGRGFFSXNWMEZCU1N4clFrRkJhMElzU1VGQmRFSTdRVUZEUVN4WFFVRkpMRTlCUVVvN1FVRkRRVHRCUVVOQkxHbENRVUZWTEhsRFFVRlRMRXRCUVZRc1JVRkJaMEk3UVVGRGVFSXNhVUpCUVZFc1VVRkJVU3hOUVVGTkxGRkJRVTRzUlVGQlVpeEhRVUV5UWl4RFFVRnVRenRCUVVOQkxHRkJRVWtzUzBGQlN5eE5RVUZNTEVsQlFXVXNaMEpCUVdkQ0xFMUJRVzVETEVWQlFUSkRPMEZCUTNwRE8wRkJRMEVzYTBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRXRCUVdoRExFTkJRVkE3UVVGRFJEdEJRVU5FTzBGQlEwRXNZMEZCU3l4SlFVRk1MRWRCUVZrc1MwRkJXanRCUVVOQkxHZENRVUZQTEVsQlFWQTdRVUZEUkN4UlFWUkVPMEZCVlVFc1dVRkJTeXhOUVVGTUxFZEJRV01zUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVUZrTzBGQlEwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVWQlFYZENMRkZCUVhoQ0xFVkJRV3RETEV0QlFVc3NUVUZCZGtNN08wRkJSVUVzVjBGQlNTeFpRVUZaTEVOQlFVTXNWMEZCUkN4RlFVRmpMRmRCUVdRc1JVRkJNa0lzUzBGQk0wSXNSVUZCYTBNc2JVSkJRV3hETEVWQlEwTXNiVUpCUkVRc1EwRkJhRUk3UVVGRlFTeFpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzVlVGQlZTeE5RVUU1UWl4RlFVRnpReXhIUVVGMFF5eEZRVUV5UXp0QlFVTjZReXhqUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCU3l4TlFVRjBRaXhGUVVFNFFpeFZRVUZWTEVOQlFWWXNRMEZCT1VJc1JVRkRhVUlzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRTlCUVU4c1ZVRkJWU3hEUVVGV0xFTkJRVkFzUTBGQmNrSXNRMEZFYWtJN1FVRkZSRHM3UVVGRlJDeHBRa0ZCVlN4NVEwRkJVeXhqUVVGVUxFVkJRWGxDTzBGQlEycERMREJDUVVGcFFpeHBRa0ZCYVVJc1pVRkJaU3hSUVVGbUxFVkJRV3BDTEVkQlFUWkRMRk5CUVRsRU8wRkJRMEVzWVVGQlNTeEpRVUZKTEV0QlFVc3NVVUZCVEN4RlFVRlNPMEZCUTBFc1owSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEVWQlFVVXNZVUZCUml4RFFVRm5RaXhqUVVGb1FpeERRVUZvUXl4RFFVRlFPMEZCUTBRc1VVRktSRHRCUVV0QkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hWUVVGYUxFTkJRWFZDTEZOQlFYaERMRVZCUVcxRUxHVkJRVzVFTEVWQlEybENMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkVha0lzUlVGRGNVUXNTMEZFY2tRc1JVRkRORVFzU1VGRU5VUTdPMEZCUjBFc2FVSkJRVlVzZVVOQlFWTXNUVUZCVkN4RlFVRnBRanRCUVVONlFpeHJRa0ZCVXl4VFFVRlRMRTlCUVU4c1VVRkJVQ3hGUVVGVUxFZEJRVFpDTEZOQlFYUkRPMEZCUTBFc1lVRkJTU3hKUVVGSkxFdEJRVXNzVVVGQlRDeEZRVUZTTzBGQlEwRXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFVkJRVVVzVDBGQlJpeERRVUZWTEUxQlFWWXNRMEZCYUVNc1EwRkJVRHRCUVVORUxGRkJTa1E3UVVGTFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhOUVVGTUxFTkJRVmtzVlVGQldpeERRVUYxUWl4VFFVRjRReXhGUVVGdFJDeFRRVUZ1UkN4RlFVTnBRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJSR3BDTEVWQlEzRkVMRXRCUkhKRUxFVkJRelJFTEVsQlJEVkVPenRCUVVkQkxHbENRVUZWTEhsRFFVRlRMRk5CUVZRc1JVRkJiMEk3UVVGRE5VSXNjVUpCUVZrc1dVRkJXU3hWUVVGVkxGRkJRVllzUlVGQldpeEhRVUZ0UXl4VFFVRXZRenRCUVVOQkxHRkJRVWtzU1VGQlNTeExRVUZMTEZGQlFVd3NSVUZCVWp0QlFVTkJMR2RDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eEZRVUZGTEZkQlFVWXNRMEZCWXl4VFFVRmtMRU5CUVdoRExFTkJRVkE3UVVGRFJDeFJRVXBFTzBGQlMwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NRMEZCZFVJc1UwRkJlRU1zUlVGQmJVUXNZVUZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhMUVVGVUxFVkJRV2RDTzBGQlEzaENMR2xDUVVGUkxGRkJRVkVzVFVGQlRTeFJRVUZPTEVWQlFWSXNSMEZCTWtJc1JVRkJia003UVVGRFFTeGhRVUZKTEVsQlFVa3NTMEZCU3l4UlFVRk1MRVZCUVZJN1FVRkRRU3huUWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNSVUZCUlN4UlFVRkdMRU5CUVZjc1MwRkJXQ3hEUVVGb1F5eERRVUZRTzBGQlEwUXNVVUZLUkR0QlFVdEJMRmxCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEUxQlFVd3NRMEZCV1N4VlFVRmFMRU5CUVhWQ0xGTkJRWGhETEVWQlFXMUVMRlZCUVc1RUxFVkJRMmxDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFYWtJc1JVRkRjVVFzUzBGRWNrUXNSVUZETkVRc1NVRkVOVVE3UVVGRlJEczdPenM3UVVGRlJEczdPenRuUTBGSlZ5eExMRVZCUVU4N1FVRkRhRUlzVjBGQlNTeHJRa0ZCYTBJc1NVRkJkRUk3UVVGRFFTeFhRVUZKTEU5QlFVbzdRVUZEUVR0QlFVTkJMR2xDUVVGVkxIbERRVUZUTEV0QlFWUXNSVUZCWjBJN1FVRkRlRUlzYVVKQlFWRXNVVUZCVVN4TlFVRk5MRkZCUVU0c1JVRkJVaXhIUVVFeVFpeEZRVUZ1UXp0QlFVTkJMR0ZCUVVrc1MwRkJTeXhOUVVGTUxFbEJRV1VzWjBKQlFXZENMRTFCUVc1RExFVkJRVEpETzBGQlEzcERPMEZCUTBFc2EwSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEV0QlFXaERMRU5CUVZBN1FVRkRSRHRCUVVORU8wRkJRMEVzWTBGQlN5eEpRVUZNTEVkQlFWa3NTMEZCV2p0QlFVTkJMR2RDUVVGUExFbEJRVkE3UVVGRFJDeFJRVlJFTzBGQlZVRXNXVUZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4UFFVRXhRaXhEUVVGa08wRkJRMEVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFVkJRWGRDTEZGQlFYaENMRVZCUVd0RExFdEJRVXNzVFVGQmRrTTdPMEZCUlVFc1YwRkJTU3haUVVGWkxFTkJRVU1zWVVGQlJDeEZRVUZuUWl4aFFVRm9RaXhGUVVORExHMUNRVVJFTEVWQlEzTkNMRzFDUVVSMFFpeERRVUZvUWp0QlFVVkJMRmxCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4VlFVRlZMRTFCUVRsQ0xFVkJRWE5ETEVkQlFYUkRMRVZCUVRKRE8wRkJRM3BETEcxQ1FVRlhMRlZCUVZNc1ZVRkJWQ3hGUVVGeFFqdEJRVU01UWl4clFrRkJUeXhaUVVGWE8wRkJRMmhDTEc5Q1FVRlBMR2RDUVVGblFpeGxRVUZvUWl4RFFVRm5ReXhYUVVGWExFdEJRVmdzUTBGQmFVSXNTVUZCYWtJc1EwRkJhRU1zUTBGQlVEdEJRVU5FTEZsQlJrUTdRVUZIUkN4VlFVcFRMRU5CU1ZBc1QwRkJUeXhUUVVGUUxFTkJRV2xDTEZWQlFWVXNRMEZCVml4RFFVRnFRaXhEUVVwUExFTkJRVlk3UVVGTFFTeGpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhOUVVGTUxFTkJRVmtzVlVGQldpeERRVUYxUWl4VFFVRjRReXhGUVVGdFJDeFZRVUZWTEVOQlFWWXNRMEZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHRCUVVWRU96dEJRVVZFTzBGQlEwRXNhVUpCUVZVc01rTkJRVmM3UVVGRGJrSXNZVUZCU1N4TlFVRk5MRXRCUVVzc1VVRkJUQ3hGUVVGV08wRkJRMEVzWjBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRWxCUVVrc1QwRkJTaXhEUVVGWkxGbEJRVm9zUlVGQk1FSXNSVUZCTVVJc1EwRkJhRU1zUTBGQlVEdEJRVU5FTEZGQlNFUTdRVUZKUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQlN5eE5RVUZNTEVOQlFWa3NWVUZCV2l4RFFVRjFRaXhUUVVGNFF5eEZRVUZ0UkN4TlFVRnVSQ3hGUVVOcFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFOUJRVEZDTEVOQlJHcENMRVZCUTNGRUxFdEJSSEpFTEVWQlF6UkVMRWxCUkRWRU8wRkJSVUVzYVVKQlFWVXNNa05CUVZjN1FVRkRia0lzWVVGQlNTeE5RVUZOTEV0QlFVc3NVVUZCVEN4RlFVRldPMEZCUTBFc1owSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEVsQlFVa3NUMEZCU2l4RFFVRlpMRTlCUVZvc1JVRkJjVUlzUlVGQmNrSXNRMEZCYUVNc1EwRkJVRHRCUVVORUxGRkJTRVE3UVVGSlFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhOUVVGTUxFTkJRVmtzVlVGQldpeERRVUYxUWl4VFFVRjRReXhGUVVGdFJDeFZRVUZ1UkN4RlFVTnBRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJSR3BDTEVWQlEzRkVMRXRCUkhKRUxFVkJRelJFTEVsQlJEVkVPMEZCUlVFc2FVSkJRVlVzTWtOQlFWYzdRVUZEYmtJc1lVRkJTU3hOUVVGTkxFdEJRVXNzVVVGQlRDeEZRVUZXTzBGQlEwRXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFbEJRVWtzVDBGQlNpeERRVUZaTEU5QlFWb3NSVUZCY1VJc1JVRkJja0lzUTBGQmFFTXNRMEZCVUR0QlFVTkVMRkZCU0VRN1FVRkpRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1ZVRkJXaXhEUVVGMVFpeFRRVUY0UXl4RlFVRnRSQ3hYUVVGdVJDeEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFT3p0QlFVZEJMR2xDUVVGVkxIbERRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTjBRaXhoUVVGSkxFMUJRVTBzUzBGQlN5eFJRVUZNTEVWQlFWWTdRVUZEUVN4bFFVRk5MRU5CUVVNc1QwRkJUeXhuUWtGQlowSXNVMEZCZUVJc1JVRkJiVU1zVVVGQmJrTXNSVUZCVGp0QlFVTkJMR2RDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eEpRVUZKTEUxQlFVb3NRMEZCVnl4SFFVRllMRU5CUVdoRExFTkJRVkE3UVVGRFJDeFJRVXBFTzBGQlMwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NRMEZCZFVJc1UwRkJlRU1zUlVGQmJVUXNVVUZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhIUVVGVUxFVkJRV003UVVGRGRFSXNZVUZCU1N4TlFVRk5MRXRCUVVzc1VVRkJUQ3hGUVVGV08wRkJRMEVzWlVGQlRTeERRVUZETEU5QlFVOHNaMEpCUVdkQ0xGTkJRWGhDTEVWQlFXMURMRkZCUVc1RExFVkJRVTQ3UVVGRFFTeG5Ra0ZCVHl4blFrRkJaMElzWlVGQmFFSXNRMEZCWjBNc1NVRkJTU3hWUVVGS0xFTkJRV1VzUjBGQlppeERRVUZvUXl4RFFVRlFPMEZCUTBRc1VVRktSRHRCUVV0QkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hWUVVGYUxFTkJRWFZDTEZOQlFYaERMRVZCUVcxRUxGbEJRVzVFTEVWQlEybENMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkVha0lzUlVGRGNVUXNTMEZFY2tRc1JVRkRORVFzU1VGRU5VUTdPMEZCUjBFc2FVSkJRVlVzZVVOQlFWTXNWMEZCVkN4RlFVRnpRaXhUUVVGMFFpeEZRVUZwUXp0QlFVTjZReXhoUVVGSkxFMUJRVTBzUzBGQlN5eFJRVUZNTEVWQlFWWTdRVUZEUVN4MVFrRkJZeXhEUVVGRExHVkJRV1VzWjBKQlFXZENMRk5CUVdoRExFVkJRVEpETEZGQlFUTkRMRVZCUVdRN1FVRkRRU3h4UWtGQldTeFpRVUZaTEZWQlFWVXNVVUZCVml4RlFVRmFMRWRCUVcxRExGTkJRUzlETzBGQlEwRXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUTBnc1NVRkJTU3hQUVVGS0xFTkJRVmtzVjBGQldpeEZRVUY1UWl4VFFVRjZRaXhEUVVSSExFTkJRVkE3UVVGRlJDeFJRVTVFTzBGQlQwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NRMEZCZFVJc1UwRkJlRU1zUlVGQmJVUXNVMEZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhYUVVGVUxFVkJRWE5DTEZOQlFYUkNMRVZCUVdsRE8wRkJRM3BETEdGQlFVa3NUVUZCVFN4TFFVRkxMRkZCUVV3c1JVRkJWanRCUVVOQkxIVkNRVUZqTEVOQlFVTXNaVUZCWlN4blFrRkJaMElzVTBGQmFFTXNSVUZCTWtNc1VVRkJNME1zUlVGQlpEdEJRVU5CTEhGQ1FVRlpMRmxCUVZrc1ZVRkJWU3hSUVVGV0xFVkJRVm9zUjBGQmJVTXNVMEZCTDBNN1FVRkRRU3huUWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGRFNDeEpRVUZKTEZkQlFVb3NRMEZCWjBJc1YwRkJhRUlzUlVGQk5rSXNVMEZCTjBJc1EwRkVSeXhEUVVGUU8wRkJSVVFzVVVGT1JEdEJRVTlCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFMUJRVXdzUTBGQldTeFZRVUZhTEVOQlFYVkNMRk5CUVhoRExFVkJRVzFFTEdGQlFXNUVMRVZCUTJsQ0xFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGRWFrSXNSVUZEY1VRc1MwRkVja1FzUlVGRE5FUXNTVUZFTlVRN08wRkJSMEVzYVVKQlFWVXNlVU5CUVZNc1lVRkJWQ3hGUVVGM1FqdEJRVU5vUXl4aFFVRkpMRTFCUVUwc1MwRkJTeXhSUVVGTUxFVkJRVlk3UVVGRFFTeDVRa0ZCWjBJc1EwRkJReXhwUWtGQmFVSXNaMEpCUVdkQ0xGTkJRV3hETEVWQlFUWkRMRkZCUVRkRExFVkJRV2hDTzBGQlEwRXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFbEJRVWtzWVVGQlNpeERRVUZyUWl4aFFVRnNRaXhEUVVGb1F5eERRVUZRTzBGQlEwUXNVVUZLUkR0QlFVdEJMRmxCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEUxQlFVd3NRMEZCV1N4VlFVRmFMRU5CUVhWQ0xGTkJRWGhETEVWQlFXMUVMR1ZCUVc1RUxFVkJRMmxDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFYWtJc1JVRkRjVVFzUzBGRWNrUXNSVUZETkVRc1NVRkVOVVE3TzBGQlIwRXNhVUpCUVZVc2VVTkJRVk1zVTBGQlZDeEZRVUZ2UWl4TFFVRndRaXhGUVVFeVFqdEJRVU51UXl4aFFVRkpMRTFCUVUwc1MwRkJTeXhSUVVGTUxFVkJRVlk3UVVGRFFTeGhRVUZKTEZOQlFVb3NSVUZCWlR0QlFVTmlMSFZDUVVGWkxHZENRVUZuUWl4SFFVRm9RaXhEUVVGdlFpeFRRVUZ3UWl4RlFVRXJRaXhuUWtGQlowSXNUVUZCTDBNc1NVRkRVaXhWUVVGVkxFbEJSRVlzUjBGRFV5eFZRVUZWTEZGQlFWWXNSVUZFY2tJN1FVRkZSQ3hWUVVoRUxFMUJSMDg3UVVGQlJUdEJRVU5RTEhWQ1FVRlpMRk5CUVZvN1FVRkRSRHRCUVVORUxHbENRVUZSTEZGQlFWRXNUVUZCVFN4UlFVRk9MRVZCUVZJc1IwRkJNa0lzVTBGQmJrTTdRVUZEUVN4aFFVRkpMRk5CUVZNc1NVRkJTU3hMUVVGS0xFTkJRVlVzVTBGQlZpeEZRVUZ4UWl4TFFVRnlRaXhEUVVGaU8wRkJRMEVzWVVGQlNTeGhRVUZoTEdkQ1FVRm5RaXhaUVVGb1FpeERRVUUyUWl4blFrRkJaMElzUzBGQk4wTXNRMEZCYWtJN1FVRkRRU3hqUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhOUVVFelFpeEZRVUZ0UXl4SFFVRnVReXhGUVVGM1F6dEJRVU4wUXl3eVFrRkJaMElzVjBGQmFFSXNRMEZCTkVJc1ZVRkJOVUlzUlVGQmQwTXNRMEZCZUVNc1JVRkRTU3huUWtGQlowSXNaVUZCYUVJc1EwRkJaME1zVDBGQlR5eERRVUZRTEVOQlFXaERMRU5CUkVvN1FVRkZSRHRCUVVORUxHZENRVUZQTEZWQlFWQTdRVUZEUkN4UlFXaENSRHRCUVdsQ1FTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhOUVVGTUxFTkJRVmtzVlVGQldpeERRVUYxUWl4VFFVRjRReXhGUVVGdFJDeFBRVUZ1UkN4RlFVTnBRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJSR3BDTEVWQlEzRkVMRXRCUkhKRUxFVkJRelJFTEVsQlJEVkVPenRCUVVkQkxHbENRVUZWTEhsRFFVRlRMRTFCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN1FVRkRha01zWVVGQlNTeE5RVUZOTEV0QlFVc3NVVUZCVEN4RlFVRldPMEZCUTBFc2EwSkJRVk1zVTBGQlV5eFBRVUZQTEZGQlFWQXNSVUZCVkN4SFFVRTJRaXhUUVVGMFF6dEJRVU5CTEd0Q1FVRlRMRk5CUVZNc1QwRkJUeXhSUVVGUUxFVkJRVlFzUjBGQk5rSXNVMEZCZEVNN1FVRkRRU3huUWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNTVUZCU1N4VFFVRktMRU5CUVdNc1RVRkJaQ3hGUVVGelFpeE5RVUYwUWl4RFFVRm9ReXhEUVVGUU8wRkJRMFFzVVVGTVJEdEJRVTFCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFMUJRVXdzUTBGQldTeFZRVUZhTEVOQlFYVkNMRk5CUVhoRExFVkJRVzFFTEZkQlFXNUVMRVZCUTJsQ0xFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGRWFrSXNSVUZEY1VRc1MwRkVja1FzUlVGRE5FUXNTVUZFTlVRN08wRkJSMEVzYVVKQlFWVXNlVU5CUVZNc1MwRkJWQ3hGUVVGblFpeE5RVUZvUWl4RlFVRjNRanRCUVVOb1F5eGhRVUZKTEUxQlFVMHNTMEZCU3l4UlFVRk1MRVZCUVZZN1FVRkRRU3hwUWtGQlVTeFJRVUZSTEUxQlFVMHNVVUZCVGl4RlFVRlNMRWRCUVRKQ0xGTkJRVzVETzBGQlEwRXNhMEpCUVZNc1UwRkJVeXhQUVVGUExGRkJRVkFzUlVGQlZDeEhRVUUyUWl4VFFVRjBRenRCUVVOQkxHZENRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4SlFVRkpMRTFCUVVvc1EwRkJWeXhMUVVGWUxFVkJRV3RDTEUxQlFXeENMRU5CUVdoRExFTkJRVkE3UVVGRFJDeFJRVXhFTzBGQlRVRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NRMEZCZFVJc1UwRkJlRU1zUlVGQmJVUXNVVUZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhSUVVGVUxFVkJRVzFDTzBGQlF6TkNMR0ZCUVVrc1RVRkJUU3hMUVVGTExGRkJRVXdzUlVGQlZqdEJRVU5CTEdOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFZRVUZWTEUxQlFUbENMRVZCUVhORExFZEJRWFJETEVWQlFUSkRPMEZCUTNwRExHdENRVUZQTEZWQlFWVXNRMEZCVml4RlFVRmhMRkZCUVdJc1JVRkJVRHRCUVVORU8wRkJRMFFzWjBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRWRCUVdoRExFTkJRVkE3UVVGRFJDeFJRVTVFTzBGQlQwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NRMEZCZFVJc1UwRkJlRU1zUlVGQmJVUXNVVUZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhWUVVGVUxFVkJRWEZDTEZGQlFYSkNMRVZCUVN0Q08wRkJRM1pETEdGQlFVa3NUVUZCVFN4TFFVRkxMRkZCUVV3c1JVRkJWanRCUVVOQkxITkNRVUZoTEdGQlFXRXNWMEZCVnl4UlFVRllMRVZCUVdJc1IwRkJjVU1zVTBGQmJFUTdRVUZEUVN4dlFrRkJWeXhYUVVGWExGTkJRVk1zVVVGQlZDeEZRVUZZTEVkQlFXbERMRk5CUVRWRE8wRkJRMEVzWjBKQlFVOHNaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRWxCUVVrc1MwRkJTaXhEUVVGVkxGVkJRVllzUlVGQmMwSXNVVUZCZEVJc1EwRkJhRU1zUTBGQlVEdEJRVU5FTEZGQlRFUTdRVUZOUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQlN5eE5RVUZNTEVOQlFWa3NWVUZCV2l4RFFVRjFRaXhUUVVGNFF5eEZRVUZ0UkN4UFFVRnVSQ3hGUVVOcFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFOUJRVEZDTEVOQlJHcENMRVZCUTNGRUxFdEJSSEpFTEVWQlF6UkVMRWxCUkRWRU96dEJRVWRCTEdsQ1FVRlZMSGxEUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEZWtJc1lVRkJTU3hOUVVGTkxFdEJRVXNzVVVGQlRDeEZRVUZXTzBGQlEwRXNhMEpCUVZNc1UwRkJVeXhQUVVGUExFbEJRV2hDTEVkQlFYVkNMRk5CUVdoRE8wRkJRMEVzWVVGQlNTeFJRVUZSTEVsQlFVa3NTMEZCU2l4RFFVRlZMRTFCUVZZc1EwRkJXanRCUVVOQkxHRkJRVWtzVlVGQlZTeEpRVUZrTEVWQlFXOUNPMEZCUTJ4Q0xHdENRVUZQTEdkQ1FVRm5RaXhKUVVGMlFqdEJRVU5FTzBGQlEwUXNZVUZCU1N4aFFVRmhMR2RDUVVGblFpeFpRVUZvUWl4RFFVRTJRaXhuUWtGQlowSXNTMEZCTjBNc1EwRkJha0k3UVVGRFFTeGpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzVFVGQlRTeE5RVUV4UWl4RlFVRnJReXhIUVVGc1F5eEZRVUYxUXp0QlFVTnlReXd5UWtGQlowSXNWMEZCYUVJc1EwRkJORUlzVlVGQk5VSXNSVUZCZDBNc1EwRkJlRU1zUlVGRFNTeG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNUVUZCVFN4RFFVRk9MRU5CUVdoRExFTkJSRW83UVVGRlJEdEJRVU5FTEdkQ1FVRlBMRlZCUVZBN1FVRkRSQ3hSUVdKRU8wRkJZMEVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVVzc1RVRkJUQ3hEUVVGWkxGVkJRVm9zUTBGQmRVSXNVMEZCZUVNc1JVRkJiVVFzVDBGQmJrUXNSVUZEYVVJc1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4UFFVRXhRaXhEUVVScVFpeEZRVU54UkN4TFFVUnlSQ3hGUVVNMFJDeEpRVVExUkRzN1FVRkhRU3hwUWtGQlZTeDVRMEZCVXl4TlFVRlVMRVZCUVdsQ08wRkJRM3BDTEdGQlFVa3NUVUZCVFN4TFFVRkxMRkZCUVV3c1JVRkJWanRCUVVOQkxHdENRVUZUTEZOQlFWTXNUMEZCVHl4SlFVRm9RaXhIUVVGMVFpeFRRVUZvUXp0QlFVTkJMR2RDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eEpRVUZKTEUxQlFVb3NRMEZCVnl4TlFVRllMRU5CUVdoRExFTkJRVkE3UVVGRFJDeFJRVXBFTzBGQlMwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NRMEZCZFVJc1UwRkJlRU1zUlVGQmJVUXNVVUZCYmtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHM3UVVGSFFTeHBRa0ZCVlN4NVEwRkJVeXhOUVVGVUxFVkJRV2xDTEZOQlFXcENMRVZCUVRSQ08wRkJRM0JETEdGQlFVa3NUVUZCVFN4TFFVRkxMRkZCUVV3c1JVRkJWanRCUVVOQkxHdENRVUZUTEVOQlFVTXNWVUZCVlN4blFrRkJaMElzVTBGQk0wSXNSVUZCYzBNc1QwRkJkRU1zUlVGQlZEdEJRVU5CTEhGQ1FVRlpMRU5CUVVNc1lVRkJZU3huUWtGQlowSXNVMEZCT1VJc1JVRkJlVU1zVVVGQmVrTXNSVUZCV2p0QlFVTkJMR2RDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eEpRVUZKTEU5QlFVb3NRMEZCV1N4TlFVRmFMRVZCUVc5Q0xGTkJRWEJDTEVOQlFXaERMRU5CUVZBN1FVRkRSQ3hSUVV4RU8wRkJUVUVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVVzc1RVRkJUQ3hEUVVGWkxGVkJRVm9zUTBGQmRVSXNVMEZCZUVNc1JVRkJiVVFzVTBGQmJrUXNSVUZEYVVJc1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4UFFVRXhRaXhEUVVScVFpeEZRVU54UkN4TFFVUnlSQ3hGUVVNMFJDeEpRVVExUkRzN1FVRkhRU3hwUWtGQlZTeDVRMEZCVXl4UlFVRlVMRVZCUVcxQ08wRkJRek5DTEdOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFZRVUZWTEUxQlFUbENMRVZCUVhORExFZEJRWFJETEVWQlFUSkRPMEZCUTNwRExIRkNRVUZWTEVOQlFWWXNTVUZCWlN4VlFVRlZMRU5CUVZZc1JVRkJZU3hSUVVGaUxFVkJRV1k3UVVGRFJEdEJRVU5FTEdkQ1FVRlBMR2RDUVVGblFpeGxRVUZvUWl4RFFVTklMRTlCUVU4c1dVRkJVQ3hEUVVGdlFpeExRVUZ3UWl4RFFVRXdRaXhOUVVFeFFpeEZRVUZyUXl4VFFVRnNReXhEUVVSSExFTkJRVkE3UVVGRlJDeFJRVTVFTzBGQlQwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzVFVGQmRFSXNSVUZCT0VJc1kwRkJPVUlzUlVGRGFVSXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFBRVUV4UWl4RFFVUnFRaXhGUVVOeFJDeExRVVJ5UkN4RlFVTTBSQ3hKUVVRMVJEdEJRVWRFT3pzN096dEJRVVZFT3pzN08ybERRVWxaTEVzc1JVRkJUenRCUVVOcVFpeFhRVUZKTEd0Q1FVRnJRaXhKUVVGMFFqdEJRVU5CTEZkQlFVa3NUMEZCU2p0QlFVTkJPMEZCUTBFc2FVSkJRVlVzZVVOQlFWTXNTMEZCVkN4RlFVRm5RanRCUVVONFFpeHBRa0ZCVVN4UlFVRlJMRTFCUVUwc1UwRkJUaXhGUVVGU0xFZEJRVFJDTEV0QlFYQkRPMEZCUTBFc1lVRkJTU3hMUVVGTExFMUJRVXdzU1VGQlpTeG5Ra0ZCWjBJc1QwRkJia01zUlVGQk5FTTdRVUZETVVNN1FVRkRRU3hyUWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNTMEZCYUVNc1EwRkJVRHRCUVVORU8wRkJRMFE3UVVGRFFTeGpRVUZMTEVsQlFVd3NSMEZCV1N4TFFVRmFPMEZCUTBFc1owSkJRVThzU1VGQlVEdEJRVU5FTEZGQlZFUTdRVUZWUVN4WlFVRkxMRTlCUVV3c1IwRkJaU3hMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJRV1k3UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNVMEZCZUVJc1JVRkJiVU1zUzBGQlN5eFBRVUY0UXp0QlFVTkVPenM3T3p0QlFVVkVPenM3T3poQ1FVbFRMRXNzUlVGQlR6dEJRVU5rTEZkQlFVa3NhMEpCUVd0Q0xFbEJRWFJDTzBGQlEwRXNWMEZCU1N4UFFVRktPMEZCUTBFN1FVRkRRU3hwUWtGQlZTeDVRMEZCVXl4RFFVRlVMRVZCUVZrc1EwRkJXaXhGUVVGbExFTkJRV1lzUlVGQmEwSXNRMEZCYkVJc1JVRkJjVUlzUTBGQmNrSXNSVUZCZDBJc1EwRkJlRUlzUlVGQk1rSXNRMEZCTTBJc1JVRkJPRUk3UVVGRGRFTXNZVUZCU1N4TFFVRkxMRTFCUVV3c1NVRkJaU3huUWtGQlowSXNTVUZCYmtNc1JVRkJlVU03UVVGRGRrTTdRVUZEUVN4bFFVRkpMRlZCUVZVc1NVRkJaRHRCUVVORUxGVkJTRVFzVFVGSFR6dEJRVU5NTEdWQlFVa3NWVUZCVlN4blFrRkJaMElzV1VGQmFFSXNRMEZCTmtJc1owSkJRV2RDTEVsQlFUZERMRU5CUVdRN1FVRkRSRHRCUVVORUxHRkJRVWtzUTBGQlF5eFZRVUZWTEUxQlFXWXNSVUZCZFVJN1FVRkRja0lzYlVKQlFWRXNTVUZCVWl4SFFVRmxMRWxCUVVrc1NVRkJTaXhGUVVGbU8wRkJRMFFzVlVGR1JDeE5RVVZQTEVsQlFVa3NWVUZCVlN4TlFVRldMRWxCUVc5Q0xFTkJRWEJDTEV0QlFUQkNMRVZCUVVVc1NVRkJSaXhKUVVGVkxGRkJRVllzU1VGRGFrTXNaMEpCUVdkQ0xFZEJRV2hDTEVOQlFXOUNMRU5CUVhCQ0xFVkJRWFZDTEdkQ1FVRm5RaXhOUVVGMlF5eERRVVJQTEVOQlFVb3NSVUZET0VNN1FVRkRia1FzYlVKQlFWRXNTVUZCVWl4SFFVRmxMRWxCUVVrc1NVRkJTaXhEUVVGVExFVkJRVVVzVVVGQlJpeEZRVUZVTEVOQlFXWTdRVUZEUkN4VlFVaE5MRTFCUjBFN1FVRkRUQ3hsUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZFTEVOQlFWZzdRVUZEUVN4blFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRlZCUVZVc1RVRkJPVUlzUlVGQmMwTXNSMEZCZEVNc1JVRkJNa003UVVGRGVrTXNhMEpCUVVzc1NVRkJTU3hEUVVGVUxFbEJRV01zVlVGQlZTeERRVUZXTEVsQlFXVXNWVUZCVlN4RFFVRldMRVZCUVdFc1VVRkJZaXhGUVVGbUxFZEJRWGxETEZOQlFYWkVPMEZCUTBRN1FVRkRSQ3h0UWtGQlVTeEpRVUZTTEVkQlFXVXNTMEZCU3l4VFFVRlRMRk5CUVZRc1EwRkJiVUlzU1VGQmJrSXNRMEZCZDBJc1MwRkJlRUlzUTBGQk9FSXNTVUZCT1VJc1JVRkJiME1zU1VGQmNFTXNRMEZCVEN4SFFVRm1PMEZCUTBRN1FVRkRSQ3huUWtGQlR5eFBRVUZRTzBGQlEwUXNVVUZ3UWtRN1FVRnhRa0VzV1VGQlN5eEpRVUZNTEVkQlFWa3NTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFBRVUV4UWl4RFFVRmFPMEZCUTBFc1dVRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xFMUJRWGhDTEVWQlFXZERMRXRCUVVzc1NVRkJja003TzBGQlJVRTdRVUZEUVN4cFFrRkJWU3d5UTBGQlZ6dEJRVU51UWl4blFrRkJUeXhuUWtGQlowSXNaVUZCYUVJc1EwRkJaME1zU1VGQlNTeEpRVUZLTEVkQlFWY3NUMEZCV0N4RlFVRm9ReXhEUVVGUU8wRkJRMFFzVVVGR1JEdEJRVWRCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFbEJRWFJDTEVWQlFUUkNMRXRCUVRWQ0xFVkJRMmxDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFYWtJc1JVRkRjVVFzUzBGRWNrUXNSVUZETkVRc1NVRkVOVVE3TzBGQlIwRXNhVUpCUVZVc2VVTkJRVk1zVlVGQlZDeEZRVUZ4UWp0QlFVTTNRaXh6UWtGQllTeGhRVUZoTEZkQlFWY3NVVUZCV0N4RlFVRmlMRWRCUVhGRExGTkJRV3hFTzBGQlEwRXNaMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYUVNc1EwRkJVRHRCUVVORUxGRkJTRVE3UVVGSlFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhKUVVGMFFpeEZRVUUwUWl4UFFVRTFRaXhGUVVOcFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFOUJRVEZDTEVOQlJHcENMRVZCUTNGRUxFdEJSSEpFTEVWQlF6UkVMRWxCUkRWRU96dEJRVWRCTEdsQ1FVRlZMSGxEUVVGVExFTkJRVlFzUlVGQldTeERRVUZhTEVWQlFXVXNRMEZCWml4RlFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4RFFVRnlRaXhGUVVGM1FpeERRVUY0UWl4RlFVRXlRaXhEUVVFelFpeEZRVUU0UWp0QlFVTjBReXhoUVVGSkxFOUJRVThzUlVGQldEdEJRVU5CTEdOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFZRVUZWTEUxQlFUbENMRVZCUVhORExFZEJRWFJETEVWQlFUSkRPMEZCUTNwRExHZENRVUZMTEVOQlFVd3NTVUZCVlN4VlFVRlZMRU5CUVZZc1NVRkJaU3hWUVVGVkxFTkJRVllzUlVGQllTeFJRVUZpTEVWQlFXWXNSMEZCZVVNc1UwRkJia1E3UVVGRFJEdEJRVU5FTEdkQ1FVRlBMR2RDUVVGblFpeGxRVUZvUWl4RFFVRm5ReXhMUVVGTExFZEJRVXdzUTBGQlV5eExRVUZVTEVOQlFXVXNTVUZCWml4RlFVRnhRaXhKUVVGeVFpeERRVUZvUXl4RFFVRlFPMEZCUTBRc1VVRk9SRHRCUVU5QkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRWxCUVhSQ0xFVkJRVFJDTEV0QlFUVkNMRVZCUTJsQ0xFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGRWFrSXNSVUZEY1VRc1MwRkVja1FzUlVGRE5FUXNTVUZFTlVRN08wRkJSMEU3UVVGRFFTeFhRVUZKTEdWQlFXVXNRMEZCUXl4VFFVRkVMRVZCUVZrc1VVRkJXaXhGUVVGelFpeGhRVUYwUWl4RlFVRnhReXhWUVVGeVF5eEZRVU5tTEdsQ1FVUmxMRVZCUTBrc1dVRkVTaXhGUVVOclFpeFZRVVJzUWl4RlFVTTRRaXhaUVVRNVFpeEZRVU0wUXl4VFFVUTFReXhGUVVWbUxHMUNRVVpsTEVWQlJVMHNXVUZHVGl4RlFVVnZRaXhYUVVad1FpeEZRVVZwUXl4blFrRkdha01zUlVGSFppeGhRVWhsTEVWQlIwRXNiMEpCU0VFc1JVRkhjMElzWlVGSWRFSXNSVUZIZFVNc1lVRklka01zUlVGSlppeGxRVXBsTEVWQlNVVXNVMEZLUml4RFFVRnVRanRCUVV0QkxGbEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hoUVVGaExFMUJRV3BETEVWQlFYbERMRWRCUVhwRExFVkJRVGhETzBGQlF6VkRMRzFDUVVGWExGVkJRVk1zVlVGQlZDeEZRVUZ4UWp0QlFVTTVRaXhyUWtGQlR5eFpRVUZYTzBGQlEyaENMRzlDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eExRVUZMTEVsQlFVd3NRMEZCVlN4VlFVRldMRWRCUVdoRExFTkJRVkE3UVVGRFJDeFpRVVpFTzBGQlIwUXNWVUZLVXl4RFFVbFFMR0ZCUVdFc1EwRkJZaXhEUVVwUExFTkJRVlk3UVVGTFFTeGpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhKUVVGTUxFTkJRVlVzVlVGQlZpeERRVUZ4UWl4VFFVRjBReXhGUVVGcFJDeGhRVUZoTEVOQlFXSXNRMEZCYWtRc1JVRkRhVUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVVJxUWl4RlFVTnhSQ3hMUVVSeVJDeEZRVU0wUkN4SlFVUTFSRHRCUVVWRU96dEJRVVZFTzBGQlEwRXNWMEZCU1N4bFFVRmxMRU5CUVVNc1UwRkJSQ3hGUVVGWkxHRkJRVm9zUlVGQk1rSXNWVUZCTTBJc1JVRkJkVU1zYVVKQlFYWkRMRVZCUTJZc1dVRkVaU3hGUVVORUxGVkJSRU1zUlVGRFZ5eFpRVVJZTEVWQlEzbENMRk5CUkhwQ0xFVkJRMjlETEZsQlJIQkRMRVZCUldZc1owSkJSbVVzUlVGRlJ5eGhRVVpJTEVWQlJXdENMRzlDUVVac1FpeEZRVVYzUXl4bFFVWjRReXhGUVVkbUxHRkJTR1VzUlVGSFFTeGxRVWhCTEVWQlIybENMRk5CU0dwQ0xFTkJRVzVDTzBGQlNVRXNXVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEdGQlFXRXNUVUZCYWtNc1JVRkJlVU1zUjBGQmVrTXNSVUZCT0VNN1FVRkROVU1zYlVKQlFWY3NWVUZCVXl4VlFVRlVMRVZCUVhGQ08wRkJRemxDTEd0Q1FVRlBMRlZCUVZNc1VVRkJWQ3hGUVVGdFFqdEJRVU40UWl4cFFrRkJTU3hQUVVGUExFVkJRVmc3UVVGRFFTeHJRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEZWQlFWVXNUVUZCT1VJc1JVRkJjME1zUjBGQmRFTXNSVUZCTWtNN1FVRkRla01zYjBKQlFVc3NRMEZCVEN4SlFVRlZMRlZCUVZVc1EwRkJWaXhKUVVGbExGVkJRVlVzUTBGQlZpeEZRVUZoTEZGQlFXSXNSVUZCWml4SFFVRjVReXhUUVVGdVJEdEJRVU5FTzBGQlEwUXNiMEpCUVU4c1owSkJRV2RDTEdWQlFXaENMRU5CUTBnc1MwRkJTeXhKUVVGTUxFTkJRVlVzVlVGQlZpeEZRVUZ6UWl4TFFVRjBRaXhEUVVFMFFpeExRVUZMTEVsQlFXcERMRVZCUVhWRExFbEJRWFpETEVOQlJFY3NRMEZCVUR0QlFVVkVMRmxCVUVRN1FVRlJSQ3hWUVZSVExFTkJVMUFzWVVGQllTeERRVUZpTEVOQlZFOHNRMEZCVmp0QlFWVkJMR05CUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEVsQlFVd3NRMEZCVlN4VlFVRldMRU5CUVhGQ0xGTkJRWFJETEVWQlFXbEVMR0ZCUVdFc1EwRkJZaXhEUVVGcVJDeEZRVU5wUWl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEU5QlFURkNMRU5CUkdwQ0xFVkJRM0ZFTEV0QlJISkVMRVZCUXpSRUxFbEJSRFZFTzBGQlJVUTdPMEZCUlVRN1FVRkRRU3h6UWtGQlpTeERRVUZETEdOQlFVUXNSVUZCYVVJc1lVRkJha0lzUlVGQlowTXNZVUZCYUVNc1JVRkRXQ3h2UWtGRVZ5eEZRVU5YTEdkQ1FVUllMRVZCUXpaQ0xHOUNRVVEzUWl4RlFVVllMR05CUmxjc1JVRkZTeXhoUVVaTUxFTkJRV1k3UVVGSFFTeFpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzWVVGQllTeE5RVUZxUXl4RlFVRjVReXhIUVVGNlF5eEZRVUU0UXp0QlFVTTFReXh0UWtGQlZ5eFZRVUZUTEZWQlFWUXNSVUZCY1VJN1FVRkRPVUlzYTBKQlFVOHNXVUZCVnp0QlFVTm9RaXh2UWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNTMEZCU3l4SlFVRk1MRU5CUVZVc1ZVRkJWaXhIUVVGb1F5eERRVUZRTzBGQlEwUXNXVUZHUkR0QlFVZEVMRlZCU2xNc1EwRkpVQ3hoUVVGaExFTkJRV0lzUTBGS1R5eERRVUZXTzBGQlMwRXNZMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzU1VGQlRDeERRVUZWTEZWQlFWWXNRMEZCY1VJc1UwRkJkRU1zUlVGQmFVUXNZVUZCWVN4RFFVRmlMRU5CUVdwRUxFVkJRMmxDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFYWtJc1JVRkRjVVFzUzBGRWNrUXNSVUZETkVRc1NVRkVOVVE3UVVGRlJEdEJRVU5HT3pzN096dEJRVVZFT3pzN096aENRVWxUTEVzc1JVRkJUenRCUVVOa0xGZEJRVWtzYTBKQlFXdENMRWxCUVhSQ08wRkJRMEVzVjBGQlNTeFRRVUZUTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhMUVVGTExFMUJRWFpDTEVOQlFXSTdRVUZEUVN4WlFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQmFrSXNSVUZCZDBJc1RVRkJlRUlzUlVGQlowTXNUVUZCYUVNN1FVRkRRU3hYUVVGSkxHRkJRV0VzUTBGQlF5eEhRVUZFTEVWQlFVMHNTMEZCVGl4RlFVRmhMRTFCUVdJc1JVRkJjVUlzVDBGQmNrSXNSVUZCT0VJc1VVRkJPVUlzUlVGQmQwTXNTVUZCZUVNc1JVRkRReXhUUVVSRUxFVkJRMWtzVDBGRVdpeERRVUZxUWp0QlFVVkJMRmxCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4WFFVRlhMRTFCUVM5Q0xFVkJRWFZETEVkQlFYWkRMRVZCUVRSRE8wRkJRekZETEdOQlFVc3NWMEZCVEN4RFFVRnBRaXhOUVVGcVFpeEZRVUY1UWl4WFFVRlhMRU5CUVZnc1EwRkJla0lzUlVGRFNTeExRVUZMTEdWQlFVd3NRMEZCY1VJc1MwRkJTeXhYUVVGWExFTkJRVmdzUTBGQlRDeERRVUZ5UWl4RFFVUktMRVZCUXl0RExFdEJSQzlETEVWQlEzTkVMRWxCUkhSRU8wRkJSVVE3UVVGRFJDeFhRVUZKTEdWQlFXVXNRMEZCUXl4TFFVRkVMRVZCUVZFc1RVRkJVaXhGUVVGblFpeE5RVUZvUWl4RlFVRjNRaXhOUVVGNFFpeEZRVUZuUXl4UFFVRm9ReXhGUVVGNVF5eE5RVUY2UXl4RlFVRnBSQ3hMUVVGcVJDeEZRVU5ETEV0QlJFUXNSVUZEVVN4UFFVUlNMRVZCUTJsQ0xFdEJSR3BDTEVWQlEzZENMRXRCUkhoQ0xFVkJReXRDTEV0QlJDOUNMRVZCUTNORExFdEJSSFJETEVWQlF6WkRMRkZCUkRkRExFVkJSVU1zVDBGR1JDeEZRVVZWTEV0QlJsWXNSVUZGYVVJc1RVRkdha0lzUlVGRmVVSXNTMEZHZWtJc1EwRkJia0k3UVVGSFFTeFpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzWVVGQllTeE5RVUZxUXl4RlFVRjVReXhIUVVGNlF5eEZRVUU0UXp0QlFVTTFReXhoUVVGSkxGVkJRVmNzVlVGQlV5eFZRVUZVTEVWQlFYRkNPMEZCUTJ4RExHdENRVUZQTEZsQlFWYzdRVUZEYUVJc2EwSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hWUVVGVkxFMUJRVGxDTEVWQlFYTkRMRWRCUVhSRExFVkJRVEpETzBGQlEzcERMSGxDUVVGVkxFTkJRVllzU1VGQlpTeFZRVUZWTEVOQlFWWXNSVUZCWVN4UlFVRmlMRVZCUVdZN1FVRkRSRHRCUVVORUxHOUNRVUZQTEdkQ1FVRm5RaXhsUVVGb1FpeERRVU5JTEZkQlFWY3NTMEZCV0N4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4VFFVRjJRaXhEUVVSSExFTkJRVkE3UVVGRlJDeFpRVTVFTzBGQlQwUXNWVUZTWVN4RFFWRllMRXRCUVVzc1lVRkJZU3hEUVVGaUxFTkJRVXdzUTBGU1Z5eERRVUZrTzBGQlUwRXNZMEZCU3l4WFFVRk1MRU5CUVdsQ0xFMUJRV3BDTEVWQlFYbENMR0ZCUVdFc1EwRkJZaXhEUVVGNlFpeEZRVU5KTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFU2l4RlFVTjNReXhMUVVSNFF5eEZRVU1yUXl4SlFVUXZRenRCUVVWRU8wRkJRMFk3T3pzN08wRkJSVVE3T3pzN1owTkJTVmNzU3l4RlFVRlBPMEZCUTJoQ0xGZEJRVWtzYTBKQlFXdENMRWxCUVhSQ08wRkJRMEVzVjBGQlNTeFBRVUZLTzBGQlEwRTdRVUZEUVN4cFFrRkJWU3g1UTBGQlV5eFBRVUZVTEVWQlFXdENMRXRCUVd4Q0xFVkJRWGxDTzBGQlEycERMR0ZCUVVrc1MwRkJTeXhOUVVGTUxFbEJRV1VzWjBKQlFXZENMRTFCUVc1RExFVkJRVEpETzBGQlEzcERPMEZCUTBFc1pVRkJTU3hOUVVGTkxFbEJRVlk3UVVGRFJDeFZRVWhFTEUxQlIwODdRVUZEVEN4bFFVRkpMRTFCUVUwc1owSkJRV2RDTEZsQlFXaENMRU5CUVRaQ0xHZENRVUZuUWl4TlFVRTNReXhEUVVGV08wRkJRMFE3UVVGRFJDeHRRa0ZCVlN4VlFVRlZMRkZCUVZFc1VVRkJVaXhGUVVGV0xFZEJRU3RDTEVWQlFYcERPMEZCUTBFc2FVSkJRVkVzVVVGQlVTeE5RVUZOTEZGQlFVNHNSVUZCVWl4SFFVRXlRaXhGUVVGdVF6dEJRVU5CTEhsQ1FVRm5RaXhaUVVGb1FpeERRVUUyUWl4SFFVRTNRaXhGUVVGclF5eEpRVUZKTEUxQlFVb3NRMEZCVnl4UFFVRllMRVZCUVc5Q0xFdEJRWEJDTEVOQlFXeERPMEZCUTBFc1owSkJRVThzUjBGQlVEdEJRVU5FTEZGQldFUTdRVUZaUVN4WlFVRkxMRTFCUVV3c1IwRkJZeXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ0xFTkJRV1E3UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNVVUZCZUVJc1JVRkJhME1zUzBGQlN5eE5RVUYyUXpzN1FVRkZRU3hwUWtGQlZTeDVRMEZCVXl4SFFVRlVMRVZCUVdNN1FVRkRkRUlzWlVGQlRTeEpRVUZKTEZGQlFVb3NSVUZCVGp0QlFVTkJMR2RDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eExRVUZMTEVsQlFVd3NRMEZCVlN4SlFVRldMRU5CUVdVc1IwRkJaaXhEUVVGb1F5eERRVUZRTzBGQlEwUXNVVUZJUkR0QlFVbEJMRmxCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEUxQlFVd3NRMEZCV1N4VlFVRmFMRU5CUVhWQ0xGTkJRWGhETEVWQlFXMUVMRTFCUVc1RUxFVkJRMmxDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVDBGQk1VSXNRMEZFYWtJc1JVRkRjVVFzUzBGRWNrUXNSVUZETkVRc1NVRkVOVVE3TzBGQlIwRXNhVUpCUVZVc2VVTkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzUkNMR1ZCUVUwc1NVRkJTU3hSUVVGS0xFVkJRVTQ3UVVGRFFUdEJRVU5CTEdOQlFVc3NTVUZCVEN4RFFVRlZMRk5CUVZZc1IwRkRTU3huUWtGQlowSXNWMEZCYUVJc1EwRkJORUlzU1VGQk5VSXNSVUZCYTBNc1YwRkJiRU1zUlVGQkswTXNVVUZCTDBNc1JVRkVTanRCUVVWQkxHRkJRVWtzVVVGQlVTeExRVUZMTEVsQlFVd3NRMEZCVlN4SlFVRldMRU5CUVdVc1IwRkJaaXhEUVVGYU8wRkJRMEVzZVVKQlFXZENMRmRCUVdoQ0xFTkJRVFJDTEVsQlFUVkNMRVZCUVd0RExGZEJRV3hETEVWQlEwa3NaMEpCUVdkQ0xHVkJRV2hDTEVOQlFXZERMRXRCUVVzc1NVRkJUQ3hEUVVGVkxGTkJRVEZETEVOQlJFbzdPMEZCUjBFc1lVRkJTU3hMUVVGS0xFVkJRVmM3UVVGRFZDeGxRVUZKTEZOQlFWTXNaMEpCUVdkQ0xGbEJRV2hDTEVOQlFUWkNMR2RDUVVGblFpeExRVUUzUXl4RFFVRmlPMEZCUTBFc1owSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hOUVVGTkxFMUJRVEZDTEVWQlFXdERMRWRCUVd4RExFVkJRWFZETzBGQlEzSkRMRFpDUVVGblFpeFhRVUZvUWl4RFFVRTBRaXhOUVVFMVFpeEZRVUZ2UXl4RFFVRndReXhGUVVOSkxHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eE5RVUZOTEVOQlFVNHNRMEZCYUVNc1EwRkVTanRCUVVWRU8wRkJRMFE3UVVGRFFTd3lRa0ZCWjBJc1YwRkJhRUlzUTBGQk5FSXNUVUZCTlVJc1JVRkJiME1zVDBGQmNFTXNSVUZEU1N4blFrRkJaMElzWlVGQmFFSXNRMEZCWjBNc1RVRkJUU3hMUVVGMFF5eERRVVJLTzBGQlJVRXNNa0pCUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRTFCUVRWQ0xFVkJRVzlETEU5QlFYQkRMRVZCUTBrc1owSkJRV2RDTEdWQlFXaENMRU5CUVdkRExFMUJRVTBzUzBGQmRFTXNRMEZFU2p0QlFVVkJMR3RDUVVGUExFMUJRVkE3UVVGRFJEdEJRVU5FTEdkQ1FVRlBMR2RDUVVGblFpeEpRVUYyUWp0QlFVTkVMRkZCZGtKRU8wRkJkMEpCTEZsQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFMUJRVXdzUTBGQldTeFZRVUZhTEVOQlFYVkNMRk5CUVhoRExFVkJRVzFFTEUxQlFXNUVMRVZCUTJsQ0xFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1QwRkJNVUlzUTBGRWFrSXNSVUZEY1VRc1MwRkVja1FzUlVGRE5FUXNTVUZFTlVRN1FVRkZSRHM3T3pzN1FVRkZSRHM3T3pzN2QwTkJTMjFDTEZNc1JVRkJWenRCUVVNMVFpeFhRVUZKTEdWQlFXVXNTMEZCU3l4VFFVRk1MRU5CUVdVc1IwRkJaaXhEUVVGdFFpeFRRVUZ1UWl4RFFVRnVRanRCUVVOQkxGZEJRVWtzV1VGQlNpeEZRVUZyUWp0QlFVTm9RaXhuUWtGQlR5eFpRVUZRTzBGQlEwUXNVVUZHUkN4TlFVVlBMRWxCUVVrc1QwRkJUeXhUUVVGUUxFdEJRWEZDTEZWQlFYcENMRVZCUVhGRE8wRkJRekZETEhkQ1FVRmxMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNVMEZCTVVJc1EwRkJaanRCUVVORUxGRkJSazBzVFVGRlFTeEpRVUZKTEdsRFFVRlBMRk5CUVZBc2RVUkJRVThzVTBGQlVDeFBRVUZ4UWl4UlFVRjZRaXhGUVVGdFF6dEJRVU40UXl4blFrRkJUeXhMUVVGTExHVkJRVXdzUTBGQmNVSXNVMEZCY2tJc1EwRkJVRHRCUVVORUxGRkJSazBzVFVGRlFTeEpRVUZKTEhGQ1FVRnhRaXhMUVVGNlFpeEZRVUZuUXp0QlFVRkZPMEZCUTNaRExIZENRVUZsTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhMUVVGTExFdEJRWFpDTEVOQlFXWTdRVUZEUVN4alFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NWVUZCVlN4TlFVRTVRaXhGUVVGelF5eEhRVUYwUXl4RlFVRXlRenRCUVVONlF5eG5Ra0ZCU3l4WFFVRk1MRU5CUVdsQ0xGbEJRV3BDTEVWQlFTdENMRU5CUVM5Q0xFVkJRelJDTEV0QlFVc3NhMEpCUVV3c1EwRkJkMElzVlVGQlZTeERRVUZXTEVOQlFYaENMRU5CUkRWQ08wRkJSVVE3UVVGRFJpeFJRVTVOTEUxQlRVRTdRVUZCUlR0QlFVTlFMSGRDUVVGbExFdEJRVXNzV1VGQlRDeERRVUZyUWl4TFFVRkxMRTFCUVhaQ0xFTkJRV1k3UVVGRFFTeHpRa0ZCWVN4aFFVRmlMRWRCUVRaQ0xFdEJRVGRDTzBGQlEwUTdRVUZEUkN4WlFVRkxMRk5CUVV3c1EwRkJaU3hIUVVGbUxFTkJRVzFDTEZOQlFXNUNMRVZCUVRoQ0xGbEJRVGxDTzBGQlEwRXNiMEpCUVdFc1NVRkJZaXhIUVVGdlFpeFRRVUZ3UWp0QlFVTkJMR05CUVU4c1dVRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPemhDUVVsVExFc3NSVUZCVHp0QlFVTmtMRmRCUVVrc2EwSkJRV3RDTEVsQlFYUkNPMEZCUTBFc1YwRkJTU3hUUVVGVExHZENRVUZuUWl4WlFVRm9RaXhEUVVFMlFpeExRVUZMTEUxQlFXeERMRU5CUVdJN1FVRkRRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1JVRkJkMElzVFVGQmVFSXNSVUZCWjBNc1RVRkJhRU03TzBGQlJVRXNWMEZCU1N4VlFVRlhMRlZCUVZNc1ZVRkJWQ3hGUVVGeFFqdEJRVU5zUXl4blFrRkJUeXhaUVVGWE8wRkJRMmhDTEdWQlFVa3NUVUZCVFN4VlFVRlZMRU5CUVZZc1JVRkJZU3hKUVVGMlFqdEJRVU5CTEdWQlFVa3NXVUZCV1N4WFFVRlhMRWxCUVZnc1EwRkJaMElzU1VGQmFFSXNSVUZCYzBJc1IwRkJkRUlzUTBGQmFFSTdRVUZEUVN4clFrRkJUeXhuUWtGQlowSXNhMEpCUVdoQ0xFTkJRVzFETEZOQlFXNURMRU5CUVZBN1FVRkRSQ3hWUVVwRU8wRkJTMFFzVVVGT1lTeERRVTFZTEV0QlFVc3NTMEZPVFN4RFFVRmtPMEZCVDBFc1dVRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRVZCUVhsQ0xFOUJRWHBDTEVWQlFXdERMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNUMEZCTVVJc1EwRkJiRU03TzBGQlJVRTdPenM3TzBGQlMwRXNaMEpCUVZNc1kwRkJWQ3hEUVVGM1FpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFpeGhRVUZKTEVsQlFVa3NWMEZCVWl4RlFVRnhRanRCUVVOdVFpeHJRa0ZCVHl4SlFVRkpMRWxCUVZnN1FVRkRSRHM3UVVGRlJDeGhRVUZKTEZOQlFVbzdRVUZEUVN4aFFVRkpMRWxCUVVrc1RVRkJVaXhGUVVGblFqdEJRVUZGTzBGQlEyaENMSFZDUVVGWkxFVkJRVm83UVVGRFFTeG5Ra0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEVsQlFVa3NUVUZCZUVJc1JVRkJaME1zUjBGQmFFTXNSVUZCY1VNN1FVRkRia01zZFVKQlFWVXNRMEZCVml4SlFVRmxMR1ZCUVdVc1NVRkJTU3hWUVVGS0xFTkJRV1VzUTBGQlppeERRVUZtTEVOQlFXWTdRVUZEUkR0QlFVTkdMRlZCVEVRc1RVRkxUenRCUVVGRk8wRkJRMUFzZFVKQlFWa3NSVUZCV2p0QlFVTkJMR2RDUVVGTExFbEJRVWtzUjBGQlZDeEpRVUZuUWl4SlFVRkpMRlZCUVhCQ0xFVkJRV2RETzBGQlF6bENMSFZDUVVGVkxFZEJRVllzU1VGQmFVSXNaVUZCWlN4SlFVRkpMRlZCUVVvc1EwRkJaU3hIUVVGbUxFTkJRV1lzUTBGQmFrSTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHZENRVUZQTEZOQlFWQTdRVUZEUkRzN1FVRkZSQ3hwUWtGQlZ5eFZRVUZUTEZWQlFWUXNSVUZCY1VJN1FVRkRPVUlzWjBKQlFVOHNXVUZCVnp0QlFVTm9RaXhsUVVGSkxFMUJRVTBzWlVGQlpTeFZRVUZWTEVOQlFWWXNRMEZCWml4RFFVRldPMEZCUTBFc2EwSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEZkQlFWY3NTVUZCV0N4RFFVRm5RaXhKUVVGb1FpeEZRVUZ6UWl4SFFVRjBRaXhEUVVGb1F5eERRVUZRTzBGQlEwUXNWVUZJUkR0QlFVbEVMRkZCVEZNc09FTkJRVlk3UVVGTlFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1RVRkJha0lzUlVGQmVVSXNWMEZCZWtJc1JVRkJjME1zUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhQUVVFeFFpeERRVUYwUXp0QlFVTkVPenM3T3p0QlFVVkVPenM3T3l0Q1FVbFZMRXNzUlVGQlR6dEJRVU5tTEZkQlFVa3NhMEpCUVd0Q0xFbEJRWFJDTzBGQlEwRXNWMEZCU1N4UFFVRktPMEZCUTBFN1FVRkRRU3hwUWtGQlZTeDVRMEZCVXl4WFFVRlVMRVZCUVhOQ08wRkJRemxDTEdGQlFVa3NTMEZCU3l4TlFVRk1MRWxCUVdVc1owSkJRV2RDTEV0QlFXNURMRVZCUVRCRE8wRkJRM2hETzBGQlEwRXNaVUZCU1N4WFFVRlhMRWxCUVdZN1FVRkRSQ3hWUVVoRUxFMUJSMDg3UVVGRFRDeGxRVUZKTEZkQlFWY3NaMEpCUVdkQ0xGbEJRV2hDTEVOQlFUWkNMR2RDUVVGblFpeExRVUUzUXl4RFFVRm1PMEZCUTBRN1FVRkRSQ3hoUVVGSkxGZEJRVW9zUlVGQmFVSTdRVUZEWml3eVFrRkJaMElzVjBGQmFFSXNRMEZCTkVJc1VVRkJOVUlzUlVGQmMwTXNVMEZCZEVNc1JVRkRTU3huUWtGQlowSXNaVUZCYUVJc1EwRkJaME1zVDBGQlR5eFhRVUZRTEVOQlFXaERMRU5CUkVvc1JVRkRNRVFzUzBGRU1VUXNSVUZEYVVVc1NVRkVha1U3UVVGRlJEdEJRVU5FTEdkQ1FVRlBMRkZCUVZBN1FVRkRSQ3hSUVZwRU8wRkJZVUVzV1VGQlN5eExRVUZNTEVkQlFXRXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFBRVUV4UWl4RFFVRmlPMEZCUTBFc1dVRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xFOUJRWGhDTEVWQlFXbERMRXRCUVVzc1MwRkJkRU03UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhMUVVGTUxFTkJRVmNzVlVGQldDeERRVUZ6UWl4VFFVRjJReXhGUVVOcFFpeFRRVVJxUWl4RlFVTTBRaXhMUVVGTExGbEJSR3BETEVWQlF5dERMRXRCUkM5RExFVkJRM05FTEVsQlJIUkVPMEZCUlVFc1dVRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRlZCUVZnc1EwRkJjMElzVTBGQmRrTXNSVUZEYVVJc1RVRkVha0lzUlVGRGVVSXNTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFOUJRWEpDTEVOQlJIcENMRVZCUTNkRUxFdEJSSGhFTEVWQlF5dEVMRWxCUkM5RU96dEJRVWRCTzBGQlEwRXNWMEZCU1N4VFFVRlRPMEZCUTFnc2NVSkJRVmtzVjBGRVJEdEJRVVZZTEhOQ1FVRmhMRmxCUmtZN1FVRkhXQ3d3UWtGQmFVSXNaMEpCU0U0N1FVRkpXQ3gxUWtGQll5eGhRVXBJTzBGQlMxZ3NjVUpCUVZrc1YwRk1SRHRCUVUxWUxHOUNRVUZYTzBGQlRrRXNVVUZCWWp0QlFWRkJMRmxCUVVzc1NVRkJTU3hUUVVGVUxFbEJRWE5DTEUxQlFYUkNMRVZCUVRoQ08wRkJRelZDTEdGQlFVa3NXVUZCV1N4UFFVRlBMRk5CUVZBc1EwRkJhRUk3UVVGRFFUdEJRVU5CTEcxQ1FVRlZMSGxEUVVGVExFbEJRVlFzUlVGQlpUdEJRVU4yUWl4clFrRkJUeXhWUVVGVExGZEJRVlFzUlVGQmMwSTdRVUZETTBJc2FVSkJRVWtzWjBKQlFXZENMRWRCUVdoQ0xFTkJRVzlDTEV0QlFVc3NUVUZCZWtJc1JVRkJhVU1zWjBKQlFXZENMRXRCUVdwRUxFTkJRVW9zUlVGQk5rUTdRVUZETTBRN1FVRkRRU3h0UWtGQlNTeFhRVUZYTEVsQlFXWTdRVUZEUkN4alFVaEVMRTFCUjA4N1FVRkRUQ3h0UWtGQlNTeFhRVUZYTEdkQ1FVRm5RaXhaUVVGb1FpeERRVUUyUWl4blFrRkJaMElzU1VGQmFFSXNRMEZCTjBJc1EwRkJaanRCUVVORU8wRkJRMFFzYVVKQlFVa3NWMEZCU2l4RlFVRnBRanRCUVVObUxDdENRVUZuUWl4WFFVRm9RaXhEUVVFMFFpeFJRVUUxUWl4RlFVRnpReXhUUVVGMFF5eEZRVU5KTEdkQ1FVRm5RaXhsUVVGb1FpeERRVUZuUXl4UFFVRlBMRmRCUVZBc1EwRkJhRU1zUTBGRVNpeEZRVU13UkN4TFFVUXhSQ3hGUVVOcFJTeEpRVVJxUlR0QlFVVkVPMEZCUTBRc2IwSkJRVThzVVVGQlVEdEJRVU5FTEZsQldrUTdRVUZoUkN4VlFXUkVPMEZCWlVFc1kwRkJTeXhUUVVGTUxFbEJRV3RDTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVVVGQlVTeFRRVUZTTEVOQlFURkNMRU5CUVd4Q08wRkJRMEVzWTBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVVzc1UwRkJUQ3hEUVVGcVFpeEZRVUZyUXl4WFFVRnNReXhGUVVFclF5eExRVUZMTEZsQlFVd3NRMEZCYTBJc1MwRkJTeXhMUVVGMlFpeERRVUV2UXp0QlFVTkJMR05CUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEZOQlFVd3NSVUZCWjBJc1ZVRkJhRUlzUTBGQk1rSXNVMEZCTlVNc1JVRkRhVUlzVFVGRWFrSXNSVUZEZVVJc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEZOQlFYSkNMRU5CUkhwQ0xFVkJRekJFTEV0QlJERkVMRVZCUTJsRkxFbEJSR3BGTzBGQlJVRXNZMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVWQlFYZENMRk5CUVhoQ0xFVkJRVzFETEV0QlFVc3NVMEZCVEN4RFFVRnVRenRCUVVORU8wRkJRMFk3T3pzN08wRkJSVVE3T3pzN096czdlVUpCVDBrc1N5eEZRVUZQTEUwc1JVRkJVVHRCUVVOcVFpeFhRVUZKTEVOQlFVTXNTMEZCUkN4SlFVRlZMRU5CUVVNc1RVRkJaaXhGUVVGMVFqdEJRVU55UWl4blFrRkJUeXhMUVVGUU8wRkJRMFE3UVVGRFJDeGpRVUZQTEUxQlFVMHNUVUZCVGl4SlFVRm5RaXhOUVVGMlFpeEZRVUVyUWp0QlFVTTNRaXhoUVVGSkxFTkJRVU1zVFVGQlRTeE5RVUZRTEVsQlFXbENMRU5CUVVNc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRTVReXhGUVVGNVJEdEJRVU4yUkN4clFrRkJUeXhMUVVGUU8wRkJRMFE3UVVGRFJDeHBRa0ZCVVN4TlFVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFXaERPMEZCUTBRN1FVRkRSQ3hqUVVGUExFbEJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzd1FrRlBTeXhETEVWQlFVY3NReXhGUVVGSE8wRkJRMVFzVjBGQlNTeEZRVUZGTEZkQlFVWXNTVUZCYVVJc1QwRkJUeXhEUVVGUUxFbEJRVmtzVVVGQk4wSXNTVUZCZVVNc1RVRkJUU3hGUVVGRkxFbEJRVklzUTBGQmVrTXNTVUZEUVN4RlFVRkZMRmRCUVVZc1NVRkJhVUlzVDBGQlR5eERRVUZRTEVsQlFWa3NVVUZCTjBJc1NVRkJlVU1zVFVGQlRTeEZRVUZGTEVsQlFWSXNRMEZFTjBNc1JVRkRORVE3UVVGRE1VUXNaMEpCUVU4c1IwRkJVRHRCUVVORU8wRkJRMFFzVjBGQlNTeEZRVUZGTEZkQlFVWXNTVUZCYVVJc1JVRkJSU3hYUVVGMlFpeEZRVUZ2UXp0QlFVTnNReXhoUVVGSkxFVkJRVVVzU1VGQlRqdEJRVU5CTEdGQlFVa3NSVUZCUlN4SlFVRk9PMEZCUTBRc1VVRklSQ3hOUVVkUE8wRkJRMHc3UVVGRFFTeG5Ra0ZCVHl4SFFVRlFPMEZCUTBRN1FVRkRSQ3hYUVVGSkxFbEJRVWtzUTBGQlVpeEZRVUZYTzBGQlExUXNaMEpCUVU4c1EwRkJReXhEUVVGU08wRkJRMFFzVVVGR1JDeE5RVVZQTEVsQlFVa3NTVUZCU1N4RFFVRlNMRVZCUVZjN1FVRkRhRUlzWjBKQlFVOHNRMEZCVUR0QlFVTkVPMEZCUTBRc1kwRkJUeXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096dG5RMEZOVnl4RExFVkJRVWM3UVVGRFdpeFhRVUZKTEU5QlFVOHNRMEZCVUN4RFFVRktPMEZCUTBFc1YwRkJTU3hEUVVGRExGTkJRVk1zUTBGQlZDeERRVUZFTEVsQlFXZENMRXRCUVVzc1MwRkJTeXhMUVVGTUxFTkJRVmNzUTBGQldDeERRVUZ5UWl4SlFVRnpReXhKUVVGSkxFTkJRVGxETEVWQlFXbEVPMEZCUXk5RExHZENRVUZQTEVkQlFWQTdRVUZEUkR0QlFVTkVMR05CUVU4c1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3Y1VOQlRXZENMRWtzUlVGQlRUdEJRVU53UWp0QlFVTkJMRmRCUVVrc1UwRkJVeXhUUVVGaUxFVkJRWGRDTzBGQlEzUkNMR2RDUVVGUExFdEJRVXNzVTBGQldqdEJRVU5FTEZGQlJrUXNUVUZGVHl4SlFVRkpMRk5CUVZNc1NVRkJZaXhGUVVGdFFqdEJRVU40UWl4blFrRkJUeXhMUVVGTExFbEJRVm83UVVGRFJDeFJRVVpOTEUxQlJVRXNTVUZCU1N4VFFVRlRMRWxCUVdJc1JVRkJiVUk3UVVGRGVFSXNaMEpCUVU4c1MwRkJTeXhKUVVGYU8wRkJRMFFzVVVGR1RTeE5RVVZCTEVsQlFVa3NVMEZCVXl4TFFVRmlMRVZCUVc5Q08wRkJRM3BDTEdkQ1FVRlBMRXRCUVVzc1MwRkJXanRCUVVORUxGRkJSazBzVFVGRlFTeEpRVUZKTEZOQlFWTXNRMEZCWWl4RlFVRm5RanRCUVVOeVFpeG5Ra0ZCVHl4TFFVRkxMRmRCUVZvN1FVRkRSQ3hSUVVaTkxFMUJSVUVzU1VGQlNTeFRRVUZUTEVOQlFXSXNSVUZCWjBJN1FVRkRja0lzWjBKQlFVOHNTMEZCU3l4VlFVRmFPMEZCUTBRc1VVRkdUU3hOUVVWQkxFbEJRVWtzVTBGQlV5eEZRVUZpTEVWQlFXbENPMEZCUTNSQ0xHZENRVUZQTEV0QlFVc3NXVUZCV2p0QlFVTkVMRkZCUmswc1RVRkZRU3hKUVVGSkxHZENRVUZuUWl4TlFVRndRaXhGUVVFMFFqdEJRVU5xUXl4blFrRkJUeXhMUVVGTExGbEJRVXdzUTBGQmEwSXNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFdEJRVXNzVFVGQmRrSXNRMEZCYkVJc1JVRkJhMFFzU1VGQmJFUXNRMEZCVUR0QlFVTkVPMEZCUTBRc1kwRkJUeXhKUVVGSkxGbEJRVmtzVTBGQmFFSXNRMEZCTUVJc1NVRkJNVUlzUlVGQlowTXNTVUZCYUVNc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenRyUTBGTFlTeE5MRVZCUVZFN1FVRkRia0lzVjBGQlNTeE5RVUZOTEVsQlFVa3NXVUZCV1N4TlFVRm9RaXhEUVVGMVFpeE5RVUYyUWl4RFFVRldPMEZCUTBFN1FVRkRRU3hYUVVGSkxFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFWUXNSVUZCWXl4TFFVRkxMRkZCUVc1Q0xFTkJRVW9zUlVGQmEwTTdRVUZEYUVNc1lVRkJTU3hKUVVGS0xFZEJRVmNzVlVGQldEdEJRVU5CTEdOQlFVc3NWMEZCVEN4RFFVRnBRaXhIUVVGcVFpeEZRVUZ6UWl4WFFVRjBRaXhGUVVGdFF5eExRVUZMTEZsQlFVd3NRMEZCYTBJc1MwRkJTeXhOUVVGTUxFbEJRV1VzU1VGQmFrTXNRMEZCYmtNN1FVRkRSRHRCUVVORU8wRkJRMEVzVjBGQlNTeExRVUZMTEVkQlFVd3NRMEZCVXl4SFFVRlVMRVZCUVdNc1MwRkJTeXhMUVVGdVFpeERRVUZLTEVWQlFTdENPMEZCUXpkQ0xHRkJRVWtzVFVGQlNpeEhRVUZoTEVOQlFXSTdRVUZEUVN4aFFVRkpMRkZCUVVvc1IwRkJaU3haUVVGWE8wRkJRM2hDTEdWQlFVa3NUMEZCVHl4RlFVRllPMEZCUTBFc1owSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hMUVVGTExFMUJRWHBDTEVWQlFXbERMRWRCUVdwRExFVkJRWE5ETzBGQlEzQkRMR3RDUVVGTExFTkJRVXdzU1VGQlZ5eExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUzBGQmMwSXNVMEZCZEVJc1NVRkRRU3hMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1MwRkJjMElzU1VGRWRrSXNSMEZGUXl4RlFVWkVMRWRCUlUwc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xGRkJRVzVDTEVWQlJtaENPMEZCUjBRN1FVRkRSQ3hyUWtGQlR5eExRVUZMTEVsQlFVd3NRMEZCVlN4SFFVRldMRU5CUVZBN1FVRkRSQ3hWUVZKRU8wRkJVMFE3UVVGRFJDeGpRVUZQTEVkQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdPMnREUVUxaExFY3NSVUZCU3l4SkxFVkJRVTA3UVVGRGRFSXNWMEZCU1N4SlFVRktMRWRCUVZjc1NVRkJXRHRCUVVOQk8wRkJRMEVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRWRCUVdwQ0xFVkJRWE5DTEZkQlFYUkNMRVZCUVcxRExFdEJRVXNzWlVGQlRDeERRVUZ4UWl4SlFVRkpMRWxCUVVvc1EwRkJVeXhUUVVFNVFpeERRVUZ1UXl4RlFVTnBRaXhMUVVScVFpeEZRVU4zUWl4SlFVUjRRanRCUVVWQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4SFFVRnFRaXhGUVVGelFpeFJRVUYwUWl4RlFVRm5ReXhMUVVGTExHVkJRVXdzUTBGQmNVSXNTVUZCU1N4SlFVRktMRU5CUVZNc1RVRkJPVUlzUTBGQmFFTXNSVUZEYVVJc1NVRkVha0lzUlVGRGRVSXNTVUZFZGtJN1FVRkZRU3haUVVGTExGZEJRVXdzUTBGQmFVSXNSMEZCYWtJc1JVRkJjMElzVVVGQmRFSXNSVUZCWjBNc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEVsQlFVa3NTVUZCU2l4RFFVRlRMRTFCUVRsQ0xFTkJRV2hETEVWQlEybENMRWxCUkdwQ0xFVkJRM1ZDTEVsQlJIWkNPMEZCUlVFc1dVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFXcENMRVZCUVhOQ0xGbEJRWFJDTEVWQlFXOURMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeEpRVUZKTEVsQlFVb3NRMEZCVXl4VlFVRTVRaXhEUVVGd1F5eEZRVU5wUWl4SlFVUnFRaXhGUVVOMVFpeEpRVVIyUWp0QlFVVkJMRmxCUVVzc1YwRkJUQ3hEUVVGcFFpeEhRVUZxUWl4RlFVRnpRaXhYUVVGMFFpeEZRVUZ0UXl4TFFVRkxMR1ZCUVV3c1EwRkJjVUlzU1VGQlNTeEpRVUZLTEVOQlFWTXNVMEZCT1VJc1EwRkJia01zUlVGRGFVSXNTVUZFYWtJc1JVRkRkVUlzU1VGRWRrSTdRVUZGUVR0QlFVTkJMRmRCUVVrc1VVRkJTaXhIUVVGbExGbEJRVmM3UVVGQlF5eG5Ra0ZCVHl4UFFVRlBMRXRCUVVzc1NVRkJXaXhEUVVGUU8wRkJRVEJDTEZGQlFYSkVPMEZCUTBFc1YwRkJTU3hQUVVGS0xFZEJRV01zV1VGQlZ6dEJRVUZETEdkQ1FVRlBMRXRCUVVzc1NVRkJXanRCUVVGclFpeFJRVUUxUXp0QlFVTkJMR05CUVU4c1IwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3YjBOQlRXVXNTU3hGUVVGTkxGTXNSVUZCVnp0QlFVTTVRaXhYUVVGSkxFOUJRVThzUzBGQlN5eFpRVUZNTEVOQlFXdENMRXRCUVVzc1VVRkJka0lzUTBGQldEdEJRVU5CTEZsQlFVc3NWMEZCVEN4SFFVRnRRaXhoUVVGaExFdEJRVXNzVVVGQlRDeEZRVUZvUXp0QlFVTkJMRmxCUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFFTeFpRVUZMTEZkQlFVd3NRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNVVUZCZGtJc1JVRkRhVUlzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFMUJRVllzUTBGQmFVSXNUVUZCZEVNc1EwRkVha0lzUlVGRFowVXNTVUZFYUVVN1FVRkZRU3hqUVVGUExFbEJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3TUVOQlMzRkNMRlVzUlVGQldUdEJRVU12UWl4WFFVRkpMRTlCUVU4c1MwRkJTeXhaUVVGTUxFTkJRV3RDTEV0QlFVc3NVVUZCZGtJc1EwRkJXRHRCUVVOQkxGbEJRVXNzVlVGQlRDeEhRVUZyUWl4VlFVRnNRanRCUVVOQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeFJRVUYyUWl4RlFVTnBRaXhMUVVGTExHVkJRVXdzUTBGQmNVSXNWMEZCVnl4TlFVRm9ReXhEUVVScVFpeEZRVU13UkN4SlFVUXhSRHRCUVVWQkxHTkJRVThzU1VGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096dDVRMEZMYjBJc1V5eEZRVUZYTzBGQlF6ZENMRmRCUVVrc1QwRkJUeXhMUVVGTExGbEJRVXdzUTBGQmEwSXNTMEZCU3l4UlFVRjJRaXhEUVVGWU8wRkJRMEVzV1VGQlN5eFRRVUZNTEVkQlFXbENMRk5CUVdwQ08wRkJRMEVzV1VGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEZGQlFYWkNMRVZCUTJsQ0xFdEJRVXNzWlVGQlRDeERRVUZ4UWl4VlFVRlZMRTFCUVM5Q0xFTkJSR3BDTEVWQlEzbEVMRWxCUkhwRU8wRkJSVUVzWTBGQlR5eEpRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3p0cFEwRk5XU3hITEVWQlFVc3NTU3hGUVVGTk8wRkJRM0pDTEdOQlFVOHNTMEZCU3l4UlFVRk1MRVZCUVZBN1FVRkRRU3hYUVVGSkxFOUJRVThzUzBGQlN5eFRRVUZhTEVsQlFYbENMRTlCUVU4c1MwRkJTeXhKUVVGNlF5eEZRVUVyUXp0QlFVTTNReXhqUVVGTExHTkJRVXdzUTBGQmIwSXNTMEZCU3l4VlFVRjZRaXhGUVVOdlFpd3lRa0ZCTWtJc1NVRkJNMElzUjBGQmEwTXNUMEZCYkVNc1IwRkJORU1zUjBGRWFFVTdRVUZGUkR0QlFVTkVPMEZCUTBFc1YwRkJTU3hMUVVGTExFZEJRVXdzUTBGQlV5eEhRVUZVTEVWQlFXTXNTMEZCU3l4TlFVRnVRaXhEUVVGS0xFVkJRV2RETzBGQlF6bENMR0ZCUVVrc1VVRkJVU3hSUVVGYUxFVkJRWE5DTzBGQlEzQkNMR3RDUVVGUExFdEJRVXNzWlVGQlRDeERRVUZ4UWl4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVFNVFpeERRVUZRTzBGQlEwUTdRVUZEUkN4aFFVRkpMRWxCUVVrc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVZJN1FVRkRRU3hoUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZPTEVOQlFVUXNTVUZCWVN4SlFVRkpMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRVGxDTEVWQlFYTkRPMEZCUTNCRExHdENRVUZQTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhKUVVGSkxFbEJRVW9zUTBGQlV5eERRVUZVTEVOQlFYSkNMRU5CUVZBN1FVRkRSRHRCUVVOR0xGRkJVa1FzVFVGUlR5eEpRVUZKTEV0QlFVc3NSMEZCVEN4RFFVRlRMRWRCUVZRc1JVRkJZeXhMUVVGTExFdEJRVzVDTEV0QlFUWkNMRkZCUVZFc1VVRkJla01zUlVGQmJVUTdRVUZEZUVRc1owSkJRVThzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRWxCUVVrc1RVRkJla0lzUTBGQlVEdEJRVU5FTzBGQlEwUXNZMEZCVHl4SlFVRlFMRVZCUVdFN1FVRkRXQ3hoUVVGSkxFbEJRVWtzWVVGQlNpeExRVUZ6UWl4TFFVRXhRaXhGUVVGcFF6dEJRVU12UWp0QlFVTkJMR1ZCUVVrc1pVRkJaU3hKUVVGSkxFbEJRWFpDTzBGQlEwRXNaMEpCUVVzc1NVRkJTU3hIUVVGVUxFbEJRV2RDTEZsQlFXaENMRVZCUVRoQ08wRkJRelZDTEd0Q1FVRkxMRmRCUVV3c1EwRkJhVUlzUjBGQmFrSXNSVUZCYzBJc1IwRkJkRUlzUlVGRGEwSXNTMEZCU3l4clFrRkJUQ3hEUVVGM1FpeGhRVUZoTEVkQlFXSXNRMEZCZUVJc1EwRkViRUk3UVVGRlJEdEJRVU5FTEdWQlFVa3NZVUZCU2l4SFFVRnZRaXhKUVVGd1FqdEJRVU5FTzBGQlEwUXNZVUZCU1N4SlFVRkpMRlZCUVVvc1NVRkJhMElzVVVGQlVTeEpRVUZKTEZWQlFXeERMRVZCUVRoRE8wRkJRelZETEd0Q1FVRlBMRWxCUVVrc1ZVRkJTaXhEUVVGbExFbEJRV1lzUTBGQlVEdEJRVU5FTzBGQlEwUXNZVUZCU1N4SlFVRkpMRTFCUVVvc1NVRkJZeXhKUVVGSkxFMUJRVW9zUTBGQlZ5eFZRVUY2UWl4SlFVTkJMRWxCUVVrc1RVRkJTaXhEUVVGWExGVkJRVmdzUTBGQmMwSXNVMEZFTVVJc1JVRkRjVU03UVVGRGJrTXNhVUpCUVUwc1NVRkJTU3hOUVVGS0xFTkJRVmNzVlVGQldDeERRVUZ6UWl4VFFVRTFRanRCUVVORUxGVkJTRVFzVFVGSFR6dEJRVU5NTzBGQlEwRTdRVUZEUkR0QlFVTkdPMEZCUTBRc1kwRkJUeXhMUVVGTExGTkJRVm83UVVGRFJEczdPenM3UVVGRlJEczdPenM3TzJsRFFVMVpMRWNzUlVGQlN5eEpMRVZCUVUwN1FVRkRja0lzWTBGQlR5eExRVUZMTEZGQlFVd3NSVUZCVUR0QlFVTkJMRmRCUVVrc1NVRkJTU3hYUVVGU0xFVkJRWEZDTzBGQlEyNUNMR1ZCUVUwc1ZVRkJWU3gxUTBGQlZpeERRVUZPTzBGQlEwUTdRVUZEUkN4WFFVRkpMRkZCUVZFc1VVRkJVaXhMUVVORExFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFWUXNSVUZCWXl4TFFVRkxMRTFCUVc1Q0xFdEJRVGhDTEV0QlFVc3NSMEZCVEN4RFFVRlRMRWRCUVZRc1JVRkJZeXhMUVVGTExFdEJRVzVDTEVOQlJDOUNMRU5CUVVvc1JVRkRLMFE3UVVGRE4wUXNaMEpCUVU4c1NVRkJVRHRCUVVORU8wRkJRMFFzVjBGQlNTeExRVUZMTEVkQlFVd3NRMEZCVXl4SFFVRlVMRVZCUVdNc1MwRkJTeXhOUVVGdVFpeERRVUZLTEVWQlFXZERPMEZCUXpsQ0xHRkJRVWtzU1VGQlNTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1NVRkJhRUlzUTBGQlVqdEJRVU5CTEdGQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVU0c1EwRkJSQ3hKUVVGaExFbEJRVWtzU1VGQlNTeEpRVUZLTEVOQlFWTXNUVUZCT1VJc1JVRkJjME03UVVGRGNFTXNhMEpCUVU4c1NVRkJVRHRCUVVORU8wRkJRMFk3UVVGRFJDeGpRVUZQTEVsQlFWQXNSVUZCWVR0QlFVTllMR0ZCUVVrc1NVRkJTU3hWUVVGS0xFbEJRV3RDTEZGQlFWRXNTVUZCU1N4VlFVRnNReXhGUVVFNFF6dEJRVU0xUXl4clFrRkJUeXhKUVVGUU8wRkJRMFE3UVVGRFJDeGhRVUZKTEVsQlFVa3NUVUZCU2l4SlFVRmpMRWxCUVVrc1RVRkJTaXhEUVVGWExGVkJRWHBDTEVsQlEwRXNTVUZCU1N4TlFVRktMRU5CUVZjc1ZVRkJXQ3hEUVVGelFpeFRRVVF4UWl4RlFVTnhRenRCUVVOdVF5eHBRa0ZCVFN4SlFVRkpMRTFCUVVvc1EwRkJWeXhWUVVGWUxFTkJRWE5DTEZOQlFUVkNPMEZCUTBRc1ZVRklSQ3hOUVVkUE8wRkJRMHc3UVVGRFFUdEJRVU5FTzBGQlEwWTdRVUZEUkN4alFVRlBMRXRCUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdhVU5CVVZrc1J5eEZRVUZMTEVrc1JVRkJUU3hMTEVWQlEzTkNMRk1zUlVGQlZ5eFhMRVZCUVdFN1FVRkRia1VzWTBGQlR5eExRVUZMTEZGQlFVd3NSVUZCVUR0QlFVTkJMRmRCUVVrc2FVTkJRVThzUzBGQlVDeDFSRUZCVHl4TFFVRlFMRTFCUVdkQ0xGRkJRWEJDTEVWQlFUaENPMEZCUXpWQ0xHVkJRVTBzVFVGQlRTdzRRa0ZCT0VJc1MwRkJjRU1zUTBGQlRqdEJRVU5FTzBGQlEwUXNWMEZCU1N4UFFVRlBMRXRCUVVzc1UwRkJXaXhKUVVGNVFpeFBRVUZQTEV0QlFVc3NTVUZCZWtNc1JVRkJLME03UVVGRE4wTXNZMEZCU3l4alFVRk1MRU5CUVc5Q0xFdEJRVXNzVlVGQmVrSXNSVUZEYjBJc01FSkJRVEJDTEVsQlFURkNMRWRCUVdsRExFOUJRV3BETEVkQlFUSkRMRWRCUkM5RU8wRkJSVVE3UVVGRFJDeFhRVUZKTEVsQlFVa3NWMEZCU2l4SlFVRnRRaXhKUVVGSkxFdEJRVW9zUTBGQlZTeEpRVUZXTEVOQlFYWkNMRVZCUVhkRE8wRkJRM1JETzBGQlEwUTdRVUZEUkN4WFFVRkpMRXRCUVVzc1IwRkJUQ3hEUVVGVExFZEJRVlFzUlVGQll5eExRVUZMTEUxQlFXNUNMRU5CUVVvc1JVRkJaME03UVVGRE9VSXNZVUZCU1N4SlFVRkpMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRlNPMEZCUTBFc1lVRkJTU3hSUVVGUkxGRkJRVklzU1VGQmNVSXNRMEZCUXl4TlFVRk5MRU5CUVU0c1EwRkJSQ3hKUVVGaExFbEJRVWtzU1VGQlNTeEpRVUZLTEVOQlFWTXNUVUZCYmtRc1JVRkJORVE3UVVGRE1VUTdRVUZEUVR0QlFVTkVPMEZCUTBZN1FVRkRSQ3hYUVVGSkxFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFWUXNSVUZCWXl4TFFVRkxMRXRCUVc1Q0xFTkJRVW9zUlVGQkswSTdRVUZETjBJN1FVRkRRU3hoUVVGSkxFTkJRVW83UVVGRFFTeGhRVUZKTEZGQlFWRXNVVUZCV2l4RlFVRnpRanRCUVVOd1FqdEJRVU5CTEdWQlFVa3NXVUZCV1N4TFFVRkxMRlZCUVV3c1EwRkJaMElzVFVGQlRTeFJRVUZPTEVWQlFXaENMRU5CUVdoQ08wRkJRMEVzWlVGQlNTeE5RVUZOTEZOQlFVNHNRMEZCU2l4RlFVRnpRanRCUVVOd1FpeHJRa0ZCU3l4alFVRk1MRU5CUVc5Q0xFdEJRVXNzVjBGQmVrSXNSVUZCYzBNc2MwSkJRWFJETzBGQlEwUTdRVUZEUkN4bFFVRkpMRmxCUVZrc1NVRkJTU3hOUVVGd1FpeEZRVUUwUWp0QlFVTXhRaXhyUWtGQlN5eERRVUZNTEVsQlFWVXNTVUZCU1N4VlFVRmtMRVZCUVRCQ08wRkJRM2hDTEcxQ1FVRkpMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRktPMEZCUTBFc2JVSkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVNHNRMEZCUkN4SlFVRmhMR0ZCUVdFc1EwRkJPVUlzUlVGQmFVTTdRVUZETDBJc2QwSkJRVThzU1VGQlNTeFZRVUZLTEVOQlFXVXNRMEZCWml4RFFVRlFPMEZCUTBRN1FVRkRSanRCUVVOR08wRkJRMFFzWlVGQlNTeE5RVUZLTEVkQlFXRXNVMEZCWWp0QlFVTkJMR3RDUVdadlFpeERRV1ZZTzBGQlExWXNWVUZvUWtRc1RVRm5RazhzU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4TFFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCVml4RFFVRk1MRVZCUVhWRE8wRkJRelZETzBGQlEwRXNaVUZCU1N4TlFVRktMRWRCUVdFc1MwRkJTeXhIUVVGTUxFTkJRVk1zU1VGQlNTeE5RVUZpTEVWQlFYRkNMRWxCUVVrc1EwRkJla0lzUTBGQllqdEJRVU5FTzBGQlEwWTdRVUZEUkR0QlFVTkJMRmRCUVVrc1ZVRkJTaXhEUVVGbExFbEJRV1lzU1VGQmRVSXNTMEZCZGtJN1FVRkRRU3hYUVVGSkxGTkJRVW9zUlVGQlpUdEJRVU5pTEdGQlFVa3NTMEZCU2l4RFFVRlZMRWxCUVZZc1NVRkJhMElzU1VGQmJFSTdRVUZEUkR0QlFVTkVMRmRCUVVrc1YwRkJTaXhGUVVGcFFqdEJRVU5tTEdGQlFVa3NZVUZCU2l4RFFVRnJRaXhKUVVGc1FpeEpRVUV3UWl4SlFVRXhRanRCUVVORU8wRkJRMFk3T3pzN08wRkJSVVE3T3pzN096dHZRMEZOWlN4SExFVkJRVXNzU1N4RlFVRk5PMEZCUTNoQ0xHTkJRVThzUzBGQlN5eFJRVUZNTEVWQlFWQTdRVUZEUVN4WFFVRkpMRWxCUVVrc1YwRkJTaXhKUVVGdFFpeEpRVUZKTEV0QlFVb3NRMEZCVlN4SlFVRldMRU5CUVhaQ0xFVkJRWGRETzBGQlEzUkRMR2RDUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5FTEZkQlFVa3NVVUZCVVN4UlFVRlNMRWxCUVc5Q0xFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFWUXNSVUZCWXl4TFFVRkxMRXRCUVc1Q0xFTkJRWGhDTEVWQlFXMUVPMEZCUTJwRUxHZENRVUZQTEV0QlFWQTdRVUZEUkR0QlFVTkVMR05CUVU4c1QwRkJUeXhKUVVGSkxGVkJRVW9zUTBGQlpTeEpRVUZtTEVOQlFXUTdRVUZEUkRzN096czdRVUZGUkRzN096dG5RMEZKVnp0QlFVTlVMRmxCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4TFFVRkxMRlZCUVV3c1EwRkJaMElzVFVGQmNFTXNSVUZCTkVNc1IwRkJOVU1zUlVGQmFVUTdRVUZETDBNc1lVRkJTU3hMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUlzUzBGQmRrSXNSVUZCT0VJN1FVRkROVUlzYTBKQlFVOHNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRXRCUVRGQ08wRkJRMFE3UVVGRFJqdEJRVU5FTEdGQlFVMHNUVUZCVFN4cFFrRkJUaXhEUVVGT08wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdhVU5CVDFrc1NTeEZRVUZOTEZjc1JVRkJZVHRCUVVNM1FpeFhRVUZKTEZGQlFWRXNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFbEJRV3hDTEVOQlFWbzdRVUZEUVN4aFFVRk5MRmRCUVU0c1IwRkJiMElzVjBGQmNFSTdRVUZEUVN4WFFVRkpMRU5CUVVNc1YwRkJUQ3hGUVVGclFqdEJRVU5vUWl4alFVRkxMR1ZCUVV3c1EwRkJjVUlzUzBGQmNrSTdRVUZEUkR0QlFVTkVMRmxCUVVzc1kwRkJUQ3hEUVVGdlFpeEpRVUZ3UWl4RlFVRXdRaXhMUVVFeFFqczdRVUZGUVR0QlFVTkJMR0ZCUVUwc1RVRkJUaXhIUVVGbExFdEJRV1k3UVVGRFFTeFhRVUZKTEdWQlFXVXNXVUZCV1N4TlFVRXZRaXhGUVVGMVF6dEJRVU55UXl4bFFVRk5MRTFCUVU0c1IwRkJaU3hKUVVGbU8wRkJRMFFzVVVGR1JDeE5RVVZQTzBGQlEwd3NZVUZCU1N4WlFVRlpMRXRCUVVzc1NVRkJUQ3hKUVVGaExFdEJRVXNzU1VGQlRDeERRVUZWTEVOQlFWWXNRMEZCTjBJN1FVRkRRU3hoUVVGSkxHRkJRV0VzVlVGQlZTeFZRVUYyUWl4SlFVTkJMRlZCUVZVc1ZVRkJWaXhEUVVGeFFpeEpRVUZ5UWl4SlFVRTJRaXhUUVVRM1FpeEpRVVZCTEZWQlFWVXNWVUZCVml4RFFVRnhRaXhMUVVGeVFpeEpRVUU0UWl4WlFVWnNReXhGUVVWblJEdEJRVU01UXl4cFFrRkJUU3hOUVVGT0xFZEJRV1VzU1VGQlpqdEJRVU5FTzBGQlEwWTdRVUZEUkN4alFVRlBMRXRCUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdkME5CVVcxQ0xGY3NSVUZCWVN4VExFVkJRVmM3UVVGRGVrTXNWMEZCU1N4RFFVRkRMRmRCUVV3c1JVRkJhMEk3UVVGRGFFSXNaVUZCVFN4TlFVRk5MSE5DUVVGT0xFTkJRVTQ3UVVGRFJEdEJRVU5FTEZkQlFVa3NVVUZCVVN4aFFVRmhMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeEpRVUZzUWl4RFFVRjZRanRCUVVOQkxHRkJRVTBzVjBGQlRpeEhRVUZ2UWl4WFFVRndRanRCUVVOQkxHRkJRVTBzVFVGQlRpeEhRVUZsTEZsQlFWa3NUVUZCTTBJN1FVRkRRU3hqUVVGUExFdEJRVkE3UVVGRFJEczdPenM3UVVGSFJEczdPenM3ZFVOQlMydENMRWtzUlVGQlRUdEJRVU4wUWl4WFFVRkpMRkZCUVZFc1MwRkJTeXhSUVVGTUxFVkJRVm83UVVGRFFTeFhRVUZKTEZWQlFWVXNTMEZCU3l4UlFVRk1MRVZCUVdRN1FVRkRRU3hqUVVGUExFdEJRVkFzUlVGQll6dEJRVU5hTEdGQlFVa3NWMEZCVnl4TlFVRk5MRlZCUVhKQ0xFVkJRV2xETzBGQlF5OUNMR3RDUVVGUExFMUJRVTBzVlVGQlRpeERRVUZwUWl4UFFVRnFRaXhEUVVGUU8wRkJRMFE3UVVGRFJDeHBRa0ZCVVN4TlFVRk5MRmRCUVdRN1FVRkRSRHRCUVVORU96czdRVUZIUVR0QlFVTkJMRmRCUVVjc1YwRkJWeXhOUVVGa0xFVkJRWE5DTzBGQlEzQkNMR2RDUVVGUExFdEJRVXNzYTBKQlFVd3NRMEZCZDBJc1QwRkJUeXhQUVVGUUxFTkJRWGhDTEVOQlFWQTdRVUZEUkR0QlFVTkVMR1ZCUVZFc1IwRkJVaXhEUVVGWkxFOUJRVm9zUlVGQmNVSXNTVUZCY2tJN1FVRkRRU3haUVVGTExHTkJRVXdzUTBGQmIwSXNTMEZCU3l4bFFVRjZRaXhGUVVFd1F5eFZRVUZWTEdsQ1FVRndSRHRCUVVOQkxHTkJRVThzUzBGQlN5eFRRVUZhTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3TzNGRFFVdG5RaXhKTEVWQlFVMHNTeXhGUVVGUE8wRkJRek5DTEZkQlFVa3NVVUZCVVN4TFFVRkxMRkZCUVV3c1JVRkJXanRCUVVOQkxGZEJRVWtzVTBGQlV5eE5RVUZOTEUxQlFXNUNPMEZCUTBFc1YwRkJTU3hWUVVGVkxFdEJRVXNzVVVGQlRDeEZRVUZrTzBGQlEwRXNZMEZCVHl4TFFVRlFMRVZCUVdNN1FVRkRXaXhoUVVGTExGZEJRVmNzVFVGQlRTeFZRVUZzUWl4SlFVRnJReXhEUVVGRExFMUJRVVFzU1VGQlZ5eERRVUZETEUxQlFVMHNWMEZCZUVRc1JVRkJjMFU3UVVGRGNFVXNaVUZCU1N4RFFVRkRMRTFCUVUwc1MwRkJUaXhEUVVGWkxFOUJRVm9zUTBGQlRDeEZRVUV5UWp0QlFVTjZRaXh0UWtGQlRTeFZRVUZPTEVOQlFXbENMRTlCUVdwQ0xFbEJRVFJDTEV0QlFUVkNPMEZCUTBRN1FVRkRSRHRCUVVORU8wRkJRMFFzYVVKQlFWRXNUVUZCVFN4WFFVRmtPMEZCUTBRN1FVRkRSQ3haUVVGTExHTkJRVXdzUTBGQmIwSXNTMEZCU3l4bFFVRjZRaXhGUVVFd1F5eFZRVUZWTEdsQ1FVRndSRHRCUVVORU96czdPenRCUVVWRU96czdPenM3YjBOQlRXVXNTU3hGUVVGTkxFc3NSVUZCVHp0QlFVTXhRaXhYUVVGSkxFdEJRVXNzU1VGQlRDeEpRVUZoTEhGQ1FVRnFRaXhGUVVGM1F6dEJRVU4wUXl4alFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFMUJRWFJETEVWQlFUaERMRWRCUVRsRExFVkJRVzFFTzBGQlEycEVMR2RDUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1JVRkJkMElzUzBGQlN5eFpRVUZNTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEVWQlFYSkNMRU5CUVhkQ0xFbEJRV2hFTEVWQlFYTkVMRXRCUVVzc1UwRkJNMFE3UVVGRFJEdEJRVU5HTEZGQlNrUXNUVUZKVHl4SlFVRkpMRXRCUVVzc1NVRkJUQ3hKUVVGaExIRkNRVUZxUWl4RlFVRjNRenRCUVVNM1F5eGpRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNTMEZCU3l4RlFVRk1MRU5CUVZFc1NVRkJhRU1zUlVGQmMwTXNTMEZCU3l4alFVRk1MRU5CUVc5Q0xFbEJRWEJDTEVWQlFUQkNMRXRCUVRGQ0xFTkJRWFJETzBGQlEwRXNaMEpCUmpaRExFTkJSWEJETzBGQlExWXNVVUZJVFN4TlFVZEJMRWxCUVVrc1MwRkJTeXhKUVVGTUxFbEJRV0VzYjBKQlFXcENMRVZCUVhWRE8wRkJRelZETEdkQ1FVUTBReXhEUVVOdVF6dEJRVU5XTzBGQlEwUXNWMEZCU1N4cFFrRkJhVUlzU1VGQmNrSTdRVUZEUVN4blFrRkJVeXhQUVVGVUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ08wRkJRM1JDTEdGQlFVa3NUVUZCVFN4WFFVRk9MRWxCUVhGQ0xHVkJRV1VzUjBGQlppeERRVUZ0UWl4WFFVRTFReXhGUVVGNVJEdEJRVU4yUkN3d1FrRkJaU3hqUVVGbUxFTkJRVGhDTEV0QlFUbENMRVZCUVhGRExFdEJRWEpETzBGQlEwUTdRVUZEUmp0QlFVTkVMRmxCUVVzc1NVRkJTU3hKUVVGVUxFbEJRV2xDTEVsQlFXcENMRVZCUVhWQ08wRkJRM0pDTEdGQlFVa3NUMEZCVHl4TFFVRkxMRWxCUVV3c1EwRkJXRHRCUVVOQkxHRkJRVWtzVVVGQlVTeG5RMEZCVHl4SlFVRlFMSFZFUVVGUExFbEJRVkFzVFVGQlpTeFJRVUV6UWl4RlFVRnhRenRCUVVOdVF5eGxRVUZKTEU5QlFVOHNTMEZCU3l4TlFVRmFMRWxCUVhOQ0xGRkJRWFJDTEVsQlFXdERMRXRCUVVzc1RVRkJNME1zUlVGQmJVUTdRVUZEYWtRN1FVRkRRU3hyUWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFdEJRVXNzVFVGQmVrSXNSVUZCYVVNc1IwRkJha01zUlVGQmMwTTdRVUZEY0VNc2RVSkJRVkVzUzBGQlN5eERRVUZNTEVOQlFWSTdRVUZEUkR0QlFVTkdMRmxCVEVRc1RVRkxUenRCUVVOTUxIRkNRVUZSTEVsQlFWSTdRVUZEUkR0QlFVTkdPMEZCUTBZN1FVRkRSanM3T3pzN1FVRkZSRHM3T3pzN09FSkJTMU1zU1N4RlFVRk5PMEZCUTJJc1YwRkJTU3hMUVVGTExFMUJRVlFzUlVGQmFVSTdRVUZEWml4aFFVRkpMRTFCUVUwc1MwRkJTeXhEUVVGTUxFTkJRVlk3UVVGRFFTeGhRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRk1MRU5CUVZnN1FVRkRRU3huUWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1IwRkJha0lzUlVGQmMwSXNTVUZCZEVJc1EwRkJVRHRCUVVORUxGRkJTa1FzVFVGSlR6dEJRVU5NTEdkQ1FVRlBMRXRCUVVzc2FVSkJRVXdzUTBGQmRVSXNTVUZCZGtJc1EwRkJVRHRCUVVORU8wRkJRMFk3T3pzN08wRkJSVVE3T3pzN096aENRVXRUTEVrc1JVRkJUU3hMTEVWQlFVODdRVUZEY0VJc1YwRkJTU3hMUVVGTExFMUJRVlFzUlVGQmFVSTdRVUZEWml4aFFVRkpMRTFCUVUwc1MwRkJTeXhEUVVGTUxFTkJRVlk3UVVGRFFTeGhRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRk1MRU5CUVZnN1FVRkRRU3hqUVVGTExGZEJRVXdzUTBGQmFVSXNSMEZCYWtJc1JVRkJjMElzU1VGQmRFSXNSVUZCTkVJc1MwRkJOVUk3UVVGRFJDeFJRVXBFTEUxQlNVODdRVUZEVEN4alFVRkxMR1ZCUVV3c1EwRkJjVUlzU1VGQmNrSXNSVUZCTWtJc1MwRkJNMEk3UVVGRFJEdEJRVU5HT3pzN096dEJRVVZFT3pzN096czdPenM3YjBOQlUyVXNWU3hGUVVGWkxGY3NSVUZCWVR0QlFVTjBReXhYUVVGSkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFpeFhRVUYyUWl4RlFVRnZRenRCUVVOc1F6dEJRVU5CTEdGQlFVazdRVUZEUml4blFrRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xGZEJRVzVDTEVOQlFTdENMR05CUVM5Q0xFTkJRVGhETEZWQlFUbERMRVZCUVRCRUxGZEJRVEZFTzBGQlEwRTdRVUZEUkN4VlFVaEVMRU5CUjBVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFZqdEJRVU5CTzBGQlEwUTdRVUZEUmp0QlFVTkVMRmRCUVVrc1owSkJRV2RDTEZOQlFYQkNMRVZCUVN0Q08wRkJRemRDTEdGQlFVa3NVVUZCVVN4VlFVRmFPMEZCUTBRc1VVRkdSQ3hOUVVWUE8wRkJRMHdzWVVGQlNTeFJRVUZSTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhWUVVGc1FpeERRVUZhTzBGQlEwRXNZMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVWQlFYZENMRk5CUVhoQ0xFVkJRMGtzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRmRCUVhKQ0xFTkJSRW9zUlVGRGRVTXNTMEZFZGtNc1JVRkRPRU1zU1VGRU9VTTdRVUZGUkR0QlFVTkVPMEZCUTBFc1ZVRkJSenRCUVVORUxHRkJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJhRUlzUlVGQldqdEJRVU5FTEZGQlJrUXNVVUZGVXl4VFFVRlRMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRVmdzUzBGQmIwSXNZMEZHZEVNN1FVRkhRU3hYUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5VTzBGQlEwRXNZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENPMEZCUTNSQ0xHbENRVUZOTEUxQlFVMHNTVUZCVGl4RFFVRlhMRTlCUkVzN1FVRkZkRUlzZFVKQlFWazdRVUZHVlN4VlFVRjRRanRCUVVsRUxGRkJUa1FzVFVGTlR6dEJRVU5NTzBGQlEwRXNZVUZCU1N4VFFVRktPMEZCUTBFc1lVRkJTU3hMUVVGTExFZEJRVXdzUTBGQlV5eExRVUZVTEVWQlFXZENMRXRCUVVzc1MwRkJja0lzUTBGQlNpeEZRVUZwUXp0QlFVTXZRaXhsUVVGSkxHRkJRV0U3UVVGRFppd3dRa0ZCWVN4VFFVUkZPMEZCUldZc01rSkJRV01zVlVGR1F6dEJRVWRtTEN0Q1FVRnJRaXhqUVVoSU8wRkJTV1lzTkVKQlFXVXNWMEZLUVR0QlFVdG1MREJDUVVGaExGTkJURVU3UVVGTlppeDVRa0ZCV1R0QlFVNUhMRmxCUVdwQ08wRkJVVUVzWlVGQlNTeFBRVUZQTEZkQlFWY3NTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVWQlFYZENMRTFCUVhoQ0xFTkJRVmdzUzBGQkswTXNTMEZCTVVRN1FVRkRRU3gxUWtGQldTeExRVUZMTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeEZRVUYzUWl4VFFVRjRRaXhEUVVGTUxFTkJRVm83UVVGRFJDeFZRVmhFTEUxQlYwODdRVUZEVEN4MVFrRkJXU3hOUVVGTkxGRkJRVTRzUlVGQldqdEJRVU5FTzBGQlEwUXNaVUZCVFN4VFFVRk9PMEZCUTBRN1FVRkRSanM3T3pzN1FVRkZSRHM3TWtOQlJYTkNPMEZCUTNCQ0xGZEJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEZkQlFVa3NUMEZCVHl4TlFVRk5MRWxCUVdwQ08wRkJRMEVzVjBGQlNTeEpRVUZKTEUxQlFVMHNRMEZCVGl4SlFVRlhMRU5CUVc1Q08wRkJRMEVzVjBGQlNTeERRVUZETEUxQlFVMHNTMEZCV0N4RlFVRnJRanRCUVVOb1FpeGxRVUZOTEV0QlFVNHNSMEZCWXl4TFFVRkxMRmxCUVV3c1EwRkJhMElzUzBGQlN5eExRVUYyUWl4RFFVRmtPMEZCUTBRc1VVRkdSQ3hOUVVWUE8wRkJRMHdzWTBGQlN5eFhRVUZNTEVOQlFXbENMRTFCUVUwc1MwRkJka0lzUlVGQk9FSXNTVUZCU1N4RFFVRnNReXhGUVVGeFF5eE5RVUZOTEV0QlFUTkRPMEZCUTBRN1FVRkRSQ3hYUVVGSkxFdEJRVXNzVVVGQlRDeERRVUZqTEVOQlFXUXNRMEZCU2l4RlFVRnpRanRCUVVOd1FpeGxRVUZOTEVOQlFVNHNSMEZCVlN4SlFVRkpMRU5CUVdRN1FVRkRRU3hqUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEV0QlFVc3NVVUZCVEN4RFFVRmpMRU5CUVdRc1EwRkJVQ3hGUVVGNFFqdEJRVU5FTEZGQlNFUXNUVUZIVHp0QlFVTk1MR1ZCUVUwc1MwRkJUaXhEUVVGWkxFMUJRVm9zUjBGQmNVSXNUVUZCVFN4RFFVRk9MRWxCUVZjc1EwRkJhRU03UVVGRFFTeGpRVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJhRUk3UVVGRFFTeGpRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNTMEZCYmtJc1IwRkJNa0lzVFVGQlRTeExRVUZxUXp0QlFVTkVPMEZCUTBZN096dG5SRUZGTUVJN1FVRkRla0lzVjBGQlNTeFJRVUZSTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeERRVUZhTzBGQlEwRXNWMEZCU1N4UFFVRlBMRTFCUVUwc1NVRkJha0k3UVVGRFFTeFhRVUZKTEVOQlFVTXNUVUZCVFN4UlFVRllMRVZCUVhGQ08wRkJRMjVDTEdWQlFVMHNVVUZCVGl4SFFVRnBRaXhKUVVGcVFqdEJRVU5CTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4RlFVRkRMRTFCUVUwc1MwRkJTeXhKUVVGYUxFVkJRV3RDTEZsQlFWa3NTVUZCT1VJc1JVRkJlRUk3UVVGRFJDeFJRVWhFTEUxQlIwOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1UwRkJXQ3hGUVVGelFqdEJRVU16UWl4bFFVRk5MRk5CUVU0c1IwRkJhMElzU1VGQmJFSTdRVUZEUVN4bFFVRk5MRkZCUVU0c1IwRkJhVUlzVFVGQlRTeExRVUYyUWp0QlFVTkJMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExFMUJRVTBzUzBGQlN5eExRVUZhTEVWQlFYaENPMEZCUTBRc1VVRktUU3hOUVVsQk8wRkJRMHdzWTBGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ08wRkJRMEVzWVVGQlNTeFhRVUZYTEUxQlFVMHNVVUZCY2tJN1FVRkRRU3hoUVVGSkxGbEJRVmtzVFVGQlRTeExRVUYwUWp0QlFVTkJMR0ZCUVVrc1MwRkJTanRCUVVOQkxHRkJRVWtzUzBGQlN5eFJRVUZNTEVsQlFXbENMRWRCUVhKQ0xFVkJRVEJDTzBGQlEzaENMRzFDUVVGUkxGTkJRVkk3UVVGRFJDeFZRVVpFTEUxQlJVODdRVUZEVEN4bFFVRkpMRmxCUVZrc1MwRkJTeXhSUVVGTUxFTkJRV01zVVVGQlpDeERRVUZvUWp0QlFVTkJMR1ZCUVVrc1lVRkJZU3hUUVVGcVFqdEJRVU5CTEdWQlFVa3NZVUZCWVN4VlFVRlZMRkZCUVZZc1JVRkJha0k3UVVGRFFTeGxRVUZKTEdOQlFXTXNWMEZCVnl4UlFVRllMRVZCUVd4Q08wRkJRMEVzWlVGQlNTeExRVUZMTEZGQlFVd3NTVUZCYVVJc1NVRkJja0lzUlVGQk1rSTdRVUZEZWtJc2FVSkJRVWtzU1VGQlNpeEZRVUZWTEV0QlFWWTdRVUZEUVN4cFFrRkJTU3hWUVVGVkxFbEJRVllzU1VGQmEwSXNVVUZCYkVJc1NVRkJPRUlzVjBGQlZ5eEpRVUZZTEVsQlFXMUNMRkZCUVhKRUxFVkJRU3RFTzBGQlF6ZEVMSE5DUVVGUExGVkJRVlVzVVVGQlZpeEZRVUZRTzBGQlEwRXNkVUpCUVZFc1YwRkJWeXhSUVVGWUxFVkJRVkk3UVVGRFJDeGpRVWhFTEUxQlIwODdRVUZEVEN4elFrRkJUeXhWUVVGUU8wRkJRMEVzZFVKQlFWRXNWMEZCVWp0QlFVTkVPMEZCUTBRc2NVSkJRVkVzVDBGQlR5eExRVUZtTzBGQlEwUXNXVUZXUkN4TlFWVlBMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEVsQlFYSkNMRVZCUVRKQ08wRkJRMmhETEhGQ1FVRlJMR0ZCUVdFc1YwRkJja0k3UVVGRFJDeFpRVVpOTEUxQlJVRXNTVUZCU1N4TFFVRkxMRkZCUVV3c1NVRkJhVUlzU1VGQmNrSXNSVUZCTWtJN1FVRkRhRU1zY1VKQlFWRXNZVUZCWVN4WFFVRnlRanRCUVVORUxGbEJSazBzVFVGRlFTeEpRVUZKTEV0QlFVc3NVVUZCVEN4SlFVRnBRaXhKUVVGeVFpeEZRVUV5UWp0QlFVTm9ReXh4UWtGQlVTeGhRVUZoTEZkQlFYSkNPMEZCUTBRc1dVRkdUU3hOUVVWQkxFbEJRVWtzUzBGQlN5eFJRVUZNTEVsQlFXbENMRWxCUVhKQ0xFVkJRVEpDTzBGQlEyaERMSEZDUVVGUkxHRkJRV0VzVjBGQmNrSTdRVUZEUkN4WlFVWk5MRTFCUlVFc1NVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNTMEZCY2tJc1JVRkJORUk3UVVGRGFrTXNjVUpCUVZFc1kwRkJZeXhYUVVGMFFqdEJRVU5FTEZsQlJrMHNUVUZGUVN4SlFVRkpMRXRCUVVzc1VVRkJUQ3hKUVVGcFFpeExRVUZ5UWl4RlFVRTBRanRCUVVOcVF5eHhRa0ZCVVN4alFVRmpMRmRCUVhSQ08wRkJRMFFzV1VGR1RTeE5RVVZCTEVsQlFVa3NTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFMUJRWEpDTEVWQlFUWkNPMEZCUTJ4RExIRkNRVUZSTEdWQlFXVXNWMEZCZGtJN1FVRkRSQ3haUVVaTkxFMUJSVUVzU1VGQlNTeExRVUZMTEZGQlFVd3NTVUZCYVVJc1NVRkJja0lzUlVGQk1rSTdRVUZEYUVNc2NVSkJRVkVzWVVGQllTeFhRVUZ5UWp0QlFVTkVMRmxCUmswc1RVRkZRU3hKUVVGSkxFdEJRVXNzVVVGQlRDeEpRVUZwUWl4SlFVRnlRaXhGUVVFeVFqdEJRVU5vUXl4eFFrRkJVU3hoUVVGaExGZEJRWEpDTzBGQlEwUXNXVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEVsQlFYSkNMRVZCUVRKQ08wRkJRMmhETEhGQ1FVRlJMR0ZCUVdFc1YwRkJja0k3UVVGRFJDeFpRVVpOTEUxQlJVRTdRVUZEVEN4dFFrRkJUU3haUVVGWkxHOURRVUZ2UXl4TFFVRkxMRkZCUVhKRUxFTkJRVTQ3UVVGRFJEdEJRVU5FTEcxQ1FVRlJMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeExRVUZ5UWl4RFFVRlNPMEZCUTBRN1FVRkRSQ3hqUVVGTExGRkJRVXdzUTBGQll5eFJRVUZrTEVWQlFYZENMRXRCUVhoQ08wRkJRMEVzWTBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEV0QlFXNUNMRWRCUVRKQ0xFdEJRVE5DTzBGQlEwUTdRVUZEUmpzN096UkRRVVZ6UWp0QlFVTnlRaXhYUVVGSkxGRkJRVkVzUzBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFTkJRVm83UVVGRFFTeFhRVUZKTEU5QlFVOHNUVUZCVFN4SlFVRnFRanRCUVVOQkxGZEJRVWtzUTBGQlF5eE5RVUZOTEZGQlFWZ3NSVUZCY1VJN1FVRkRia0lzWlVGQlRTeFJRVUZPTEVkQlFXbENMRWxCUVdwQ08wRkJRMEVzWTBGQlN5eFZRVUZNTEVOQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEVWQlFVTXNUVUZCVFN4TFFVRkxMRWxCUVZvc1JVRkJlRUk3UVVGRFJDeFJRVWhFTEUxQlIwOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1UwRkJXQ3hGUVVGelFqdEJRVU16UWl4bFFVRk5MRk5CUVU0c1IwRkJhMElzU1VGQmJFSTdRVUZEUVN4bFFVRk5MRk5CUVU0c1IwRkJhMElzVFVGQlRTeExRVUY0UWp0QlFVTkJMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExFMUJRVTBzUzBGQlN5eExRVUZhTEVWQlFYaENPMEZCUTBRc1VVRktUU3hOUVVsQk8wRkJRMHdzWTBGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ08wRkJRMEVzWVVGQlNTeFhRVUZYTEUxQlFVMHNVMEZCY2tJN1FVRkRRU3hoUVVGSkxGbEJRVmtzVFVGQlRTeExRVUYwUWp0QlFVTkJMR0ZCUVVrc1MwRkJTanRCUVVOQkxHRkJRVWtzVDBGQlR5eExRVUZMTEVsQlFVd3NRMEZCVlN4UlFVRldMRVZCUVc5Q0xGTkJRWEJDTEVOQlFWZzdRVUZEUVN4aFFVRkpMRXRCUVVzc1VVRkJUQ3hKUVVGcFFpeEpRVUZxUWl4SlFVRjVRaXhMUVVGTExGRkJRVXdzU1VGQmFVSXNTVUZCT1VNc1JVRkJiMFE3UVVGRGJFUXNaVUZCU1N4VFFVRlRMRmRCUVZRc1NVRkJkMElzVlVGQlZTeFhRVUYwUXl4RlFVRnRSRHRCUVVOcVJDeHhRa0ZCVVN4VFFVRlRMRWxCUVZRc1NVRkJhVUlzVlVGQlZTeEpRVUZ1UXp0QlFVTkVMRmxCUmtRc1RVRkZUenRCUVVOTUxIRkNRVUZSTEZOQlFWTXNRMEZCYWtJN1FVRkRSRHRCUVVORUxHVkJRVWtzUzBGQlN5eFJRVUZNTEVsQlFXbENMRWxCUVhKQ0xFVkJRVEpDTzBGQlEzcENMSEZDUVVGUkxFTkJRVU1zUzBGQlZEdEJRVU5FTzBGQlEwWXNWVUZVUkN4TlFWTlBMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEV0QlFXcENMRWxCUVRCQ0xFdEJRVXNzVVVGQlRDeEpRVUZwUWl4TFFVRXZReXhGUVVGelJEdEJRVU16UkN4bFFVRkpMRk5CUVZNc1YwRkJWQ3hKUVVGM1FpeFZRVUZWTEZkQlFYUkRMRVZCUVcxRU8wRkJRMnBFTEhGQ1FVRlJMRk5CUVZNc1NVRkJWQ3hMUVVGclFpeFZRVUZWTEVsQlFYQkRPMEZCUTBRc1dVRkdSQ3hOUVVWUE8wRkJRMHdzY1VKQlFWRXNZVUZCWVN4VFFVRnlRanRCUVVORU8wRkJRMFFzWlVGQlNTeExRVUZMTEZGQlFVd3NTVUZCYVVJc1MwRkJja0lzUlVGQk5FSTdRVUZETVVJc2NVSkJRVkVzUTBGQlF5eExRVUZVTzBGQlEwUTdRVUZEUml4VlFWUk5MRTFCVTBFc1NVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNSMEZCY2tJc1JVRkJNRUk3UVVGREwwSXNiVUpCUVZFc1VVRkJVU3hEUVVGb1FqdEJRVU5FTEZWQlJrMHNUVUZGUVN4SlFVRkpMRXRCUVVzc1VVRkJUQ3hKUVVGcFFpeEpRVUZ5UWl4RlFVRXlRanRCUVVOb1F5eHRRa0ZCVVN4UlFVRlJMRU5CUVZJc1NVRkJZU3hUUVVGVExFTkJRVGxDTzBGQlEwUXNWVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEVkQlFYSkNMRVZCUVRCQ08wRkJReTlDTEcxQ1FVRlJMRkZCUVZFc1EwRkJReXhEUVVGcVFqdEJRVU5FTEZWQlJrMHNUVUZGUVN4SlFVRkpMRXRCUVVzc1VVRkJUQ3hKUVVGcFFpeEpRVUZ5UWl4RlFVRXlRanRCUVVOb1F5eHRRa0ZCVVN4UlFVRlJMRU5CUVVNc1EwRkJWQ3hKUVVGakxGTkJRVk1zUTBGQkwwSTdRVUZEUkN4VlFVWk5MRTFCUlVFc1NVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNSMEZCY2tJc1JVRkJNRUk3UVVGREwwSXNaVUZCU1N4VFFVRlRMRWxCUVZRc1NVRkJhVUlzVVVGQmFrSXNTVUZCTmtJc1ZVRkJWU3hKUVVGV0xFbEJRV3RDTEZGQlFXNUVMRVZCUVRaRU8wRkJRek5FTEdsQ1FVRkpMRmxCUVZrc1UwRkJVeXhSUVVGVUxFVkJRV2hDTzBGQlEwRXNhVUpCUVVrc1lVRkJZU3hWUVVGVkxGRkJRVllzUlVGQmFrSTdRVUZEUkN4WlFVaEVMRTFCUjA4N1FVRkRUQ3hwUWtGQlNTeFpRVUZaTEZOQlFWTXNVVUZCVkN4RlFVRm9RanRCUVVOQkxHbENRVUZKTEdGQlFXRXNWVUZCVlN4UlFVRldMRVZCUVdwQ08wRkJRMFE3UVVGRFJDeHRRa0ZCVVN4WlFVRlpMRlZCUVhCQ08wRkJRMFFzVlVGVVRTeE5RVk5CTEVsQlFVa3NTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFbEJRWEpDTEVWQlFUSkNPMEZCUTJoRExHMUNRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhUUVVGcVFpeEZRVUUwUWl4UlFVRTFRaXhEUVVGU08wRkJRMFFzVlVGR1RTeE5RVVZCTEVsQlFVa3NTMEZCU3l4UlFVRk1MRWxCUVdsQ0xGbEJRWEpDTEVWQlFXMURPMEZCUTNoRExHVkJRVWtzUTBGQlF5eExRVUZMTEVkQlFVd3NRMEZCVXl4VFFVRlVMRVZCUVc5Q0xFdEJRVXNzVVVGQmVrSXNRMEZCVEN4RlFVRjVRenRCUVVOMlF5eHJRa0ZCU3l4alFVRk1MRU5CUVc5Q0xFdEJRVXNzVlVGQmVrSXNSVUZEU1N3d1EwRkVTanRCUVVWRU8wRkJRMFFzYlVKQlFWRXNTMEZCU3l4SFFVRk1MRU5CUVZNc1VVRkJWQ3hGUVVGdFFpeFRRVUZ1UWl4RFFVRlNPMEZCUTBRc1ZVRk9UU3hOUVUxQk8wRkJRMHdzWlVGQlNTeFpRVUZaTEZOQlFWTXNVVUZCVkN4RlFVRm9RanRCUVVOQkxHVkJRVWtzWVVGQllTeFZRVUZWTEZGQlFWWXNSVUZCYWtJN1FVRkRRU3hsUVVGSkxFdEJRVXNzVVVGQlRDeEpRVUZwUWl4SFFVRnlRaXhGUVVFd1FqdEJRVU40UWl4eFFrRkJVU3haUVVGWkxGVkJRWEJDTzBGQlEwUXNXVUZHUkN4TlFVVlBMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEVkQlFYSkNMRVZCUVRCQ08wRkJReTlDTEhGQ1FVRlJMRmxCUVZrc1ZVRkJjRUk3UVVGRFJDeFpRVVpOTEUxQlJVRXNTVUZCU1N4TFFVRkxMRkZCUVV3c1NVRkJhVUlzUjBGQmNrSXNSVUZCTUVJN1FVRkRMMElzY1VKQlFWRXNXVUZCV1N4VlFVRndRanRCUVVORUxGbEJSazBzVFVGRlFTeEpRVUZKTEV0QlFVc3NVVUZCVEN4SlFVRnBRaXhIUVVGeVFpeEZRVUV3UWp0QlFVTXZRaXh4UWtGQlVTeFpRVUZaTEZWQlFYQkNPMEZCUTBRc1dVRkdUU3hOUVVWQkxFbEJRVWtzUzBGQlN5eFJRVUZNTEVsQlFXbENMRWRCUVhKQ0xFVkJRVEJDTzBGQlF5OUNMSEZDUVVGUkxGbEJRVmtzVlVGQmNFSTdRVUZEUkN4WlFVWk5MRTFCUlVFc1NVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNSMEZCY2tJc1JVRkJNRUk3UVVGREwwSXNjVUpCUVZFc1dVRkJXU3hWUVVGd1FqdEJRVU5FTEZsQlJrMHNUVUZGUVN4SlFVRkpMRXRCUVVzc1VVRkJUQ3hKUVVGcFFpeEhRVUZ5UWl4RlFVRXdRanRCUVVNdlFpeHhRa0ZCVVN4WlFVRlpMRlZCUVhCQ08wRkJRMFFzV1VGR1RTeE5RVVZCTEVsQlFVa3NTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFbEJRWEpDTEVWQlFUSkNPMEZCUTJoRExIRkNRVUZSTEdGQlFXRXNWVUZCY2tJN1FVRkRSQ3haUVVaTkxFMUJSVUVzU1VGQlNTeExRVUZMTEZGQlFVd3NTVUZCYVVJc1NVRkJja0lzUlVGQk1rSTdRVUZEYUVNc2NVSkJRVkVzWVVGQllTeFZRVUZ5UWp0QlFVTkVMRmxCUmswc1RVRkZRU3hKUVVGSkxFdEJRVXNzVVVGQlRDeEpRVUZwUWl4TFFVRnlRaXhGUVVFMFFqdEJRVU5xUXl4eFFrRkJVU3hqUVVGakxGVkJRWFJDTzBGQlEwUXNXVUZHVFN4TlFVVkJPMEZCUTB3c2JVSkJRVTBzV1VGQldTdzRRa0ZCT0VJc1MwRkJTeXhSUVVFdlF5eERRVUZPTzBGQlEwUTdRVUZEUmp0QlFVTkVMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGdVFpeEhRVUV5UWl4TFFVRkxMR1ZCUVV3c1EwRkJjVUlzUzBGQmNrSXNRMEZCTTBJN1FVRkRSRHRCUVVOR096czdNRU5CUlc5Q08wRkJRMjVDTEZkQlFVa3NVVUZCVVN4TFFVRkxMRlZCUVV3c1EwRkJaMElzUTBGQmFFSXNRMEZCV2p0QlFVTkJMRmRCUVVrc1QwRkJUeXhOUVVGTkxFbEJRV3BDTzBGQlEwRXNWMEZCU1N4SlFVRkpMRTFCUVUwc1JVRkJUaXhKUVVGWkxFTkJRWEJDTzBGQlEwRXNWMEZCU1N4TFFVRkxMRWxCUVV3c1EwRkJWU3hEUVVGV0xFTkJRVW9zUlVGQmEwSTdRVUZEYUVJc1pVRkJUU3hKUVVGT0xFZEJRV0VzUzBGQllqdEJRVU5CTEdWQlFVMHNSVUZCVGl4SFFVRlhMRWxCUVVrc1EwRkJaanRCUVVOQkxHTkJRVXNzVlVGQlRDeERRVUZuUWl4UFFVRm9RaXhEUVVGM1FpeEZRVUZETEUxQlFVMHNTMEZCU3l4SlFVRk1MRU5CUVZVc1EwRkJWaXhEUVVGUUxFVkJRWGhDTzBGQlEwUXNVVUZLUkN4TlFVbFBPMEZCUTB3c1pVRkJUU3hKUVVGT0xFZEJRV0VzU1VGQllqdEJRVU5CTEdGQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hKUVVGdFFpeFRRVUYyUWl4RlFVRnJRenRCUVVOb1F6dEJRVU5CTEdkQ1FVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSTdRVUZEUkR0QlFVTkdPMEZCUTBZN096c3dRMEZGYjBJN1FVRkRia0lzVjBGQlNTeFJRVUZSTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FpeEZRVUZhTzBGQlEwRXNWMEZCU1N4UFFVRlBMRTFCUVUwc1NVRkJha0k3UVVGRFFTeFhRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRmRCUVVrc1MwRkJTeXhMUVVGVUxFVkJRV2RDTzBGQlEyUXNhVUpCUVZFc1MwRkJTeXhMUVVGTUxFTkJRVmNzU1VGQmJrSTdRVUZEUkR0QlFVTkVMR1ZCUVZFc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFXaENMRVZCUVZJN1FVRkRRU3hqUVVGUExGTkJRMEVzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4SlFVRnRRaXhuUWtGRWJrSXNTVUZGUVN4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFbEJRVzFDTEdWQlJqRkNMRVZCUlRKRE8wRkJRM3BETEdGQlFVa3NVVUZCVVN4VFFVRlRMRTFCUVUwc1MwRkJka0lzUjBGQlowTXNUVUZCVFN4TlFVRk9MRWxCUVdkQ0xFMUJRVTBzVVVGQk1VUXNSVUZCY1VVN1FVRkRia1U3UVVGRFJEdEJRVU5FTEdsQ1FVRlJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeExRVUZvUWl4RlFVRlNPMEZCUTBRN1FVRkRSRHRCUVVOQkxHRkJRVTBzV1VGQldTeDVRa0ZCV2l4RFFVRk9PMEZCUTBRN096c3dRMEZGYjBJN1FVRkRia0lzVjBGQlNTeFJRVUZSTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeERRVUZhTzBGQlEwRXNWMEZCU1N4UFFVRlBMRTFCUVUwc1NVRkJha0k3UVVGRFFTeFhRVUZKTEVOQlFVTXNUVUZCVFN4WFFVRllMRVZCUVhkQ08wRkJRM1JDTEdWQlFVMHNWMEZCVGl4SFFVRnZRaXhKUVVGd1FqdEJRVU5CTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4RlFVRkRMRTFCUVUwc1MwRkJTeXhOUVVGYUxFVkJRVzlDTEZsQlFWa3NTVUZCYUVNc1JVRkJlRUk3UVVGRFJDeFJRVWhFTEUxQlIwODdRVUZEVEN4aFFVRkpMRU5CUVVNc1RVRkJUU3hMUVVGWUxFVkJRV3RDTzBGQlEyaENPMEZCUTBFc1pVRkJTU3hOUVVGTkxFdEJRVTRzUTBGQldTeEpRVUZhTEVsQlFXOUNMRlZCUVhoQ0xFVkJRVzlETzBGQlEyeERMRzFDUVVGTkxFdEJRVTRzUjBGQll5eE5RVUZOTEV0QlFYQkNPMEZCUTBRc1dVRkdSQ3hOUVVWUE8wRkJRMHdzYVVKQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1RVRkJhRUlzUlVGQmQwSTdRVUZEZEVJc2NVSkJRVTBzVDBGQlRpeEhRVUZuUWl4TlFVRk5MRXRCUVU0c1EwRkJXU3hEUVVGYUxFTkJRV2hDTzBGQlEwUTdRVUZEUkN4dFFrRkJUU3hMUVVGT0xFZEJRV01zUzBGQlN5eFJRVUZNTEVOQlFXTXNUVUZCVFN4TFFVRndRaXhEUVVGa08wRkJRMEVzYVVKQlFVa3NRMEZCUXl4TlFVRk5MRXRCUVZBc1NVRkJaMElzVFVGQlRTeExRVUZPTEVOQlFWa3NTVUZCV2l4SlFVRnZRaXhWUVVGNFF5eEZRVUZ2UkR0QlFVTnNSQ3h2UWtGQlN5eGpRVUZNTEVOQlFXOUNMRXRCUVVzc1ZVRkJla0lzUlVGRFNTeERRVUZETEUxQlFVMHNTMEZCVGl4SlFVRmxMRTFCUVUwc1MwRkJUaXhEUVVGWkxFbEJRVFZDTEVsQlFXOURMRzlDUVVSNFF6dEJRVVZCTzBGQlEwUTdRVUZEUmp0QlFVTkVPMEZCUTBFc1pVRkJTU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTEVsQlFXMUNMR1ZCUVhaQ0xFVkJRWGRETzBGQlEzUkRMRzFDUVVGTkxGTkJRVTRzUjBGQmEwSXNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFMUJRVTBzUzBGQmVFSXNRMEZCYkVJN1FVRkRRU3h0UWtGQlRTeGpRVUZPTEVkQlFYVkNMRWxCUVhaQ08wRkJRMFFzV1VGSVJDeE5RVWRQTEVsQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1RVRkJhRUlzUlVGQmQwSTdRVUZETjBJc2JVSkJRVTBzVTBGQlRpeEhRVUZyUWl4TlFVRk5MRXRCUVU0c1EwRkJXU3hEUVVGYUxFTkJRV3hDTzBGQlEwUXNXVUZHVFN4TlFVVkJPMEZCUTB3c2JVSkJRVTBzVTBGQlRpeEhRVU5KTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGTExGVkJRVXdzUTBGQlowSXNUVUZCYUVJc1IwRkJlVUlzUTBGQmVrTXNSVUZCTkVNc1kwRkVhRVE3UVVGRlJEdEJRVU5FTEdsQ1FVRk5MRk5CUVU0c1IwRkJhMElzUlVGQmJFSTdRVUZEUVN4bFFVRkpMRWxCUVVrc1EwRkJVanRCUVVORUxGVkJNMEpFTEUxQk1rSlBPMEZCUTB3c1pVRkJTU3hKUVVGSkxFMUJRVTBzUlVGQlpEdEJRVU5CTEdWQlFVa3NUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFMUJRV2hDTEVsQlFUQkNMRXRCUVVzc1UwRkJUQ3hEUVVGbExFMUJRVGRETEVWQlFYRkVPMEZCUTI1RUxHMUNRVUZOTEZOQlFVNHNRMEZCWjBJc1NVRkJTU3hEUVVGd1FpeEpRVUY1UWl4TlFVRk5MRXRCUVM5Q08wRkJRMFE3UVVGRFJqdEJRVU5FTEdGQlFVa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1EwRkJaaXhEUVVGS0xFVkJRWFZDTzBGQlEzSkNMR2xDUVVGTkxFVkJRVTRzUjBGQlZ5eEpRVUZKTEVOQlFXWTdRVUZEUVN4blFrRkJTeXhWUVVGTUxFTkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xFVkJRVU1zVFVGQlRTeExRVUZMTEZOQlFVd3NRMEZCWlN4RFFVRm1MRU5CUVZBc1JVRkJlRUk3UVVGRFJDeFZRVWhFTEUxQlIwOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1VVRkJXQ3hGUVVGeFFqdEJRVU14UWl4blFrRkJTeXhsUVVGTU8wRkJRMFFzVlVGR1RTeE5RVVZCTzBGQlEwd3NaMEpCUVVzc1ZVRkJUQ3hEUVVGblFpeExRVUZvUWp0QlFVTkJMR1ZCUVVrc1RVRkJUU3hqUVVGT0xFbEJRWGRDTEUxQlFVMHNTMEZCVGl4RFFVRlpMRWxCUVZvc1MwRkJjVUlzVVVGQmFrUXNSVUZCTWtRN1FVRkRla1FzYTBKQlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TFFVRnVRaXhIUVVFeVFpeE5RVUZOTEZOQlFXcERPMEZCUTBRc1dVRkdSQ3hOUVVWUE8wRkJRMHdzYTBKQlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TFFVRnVRaXhIUVVFeVFpeE5RVUZOTEV0QlFXcERPMEZCUTBRN1FVRkRSanRCUVVOR08wRkJRMFk3T3p0MVEwRkZhVUk3UVVGRGFFSXNWMEZCU1N4UlFVRlJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRmFPMEZCUTBFc1YwRkJTU3hQUVVGUExFMUJRVTBzU1VGQmFrSTdRVUZEUVN4aFFVRk5MRkZCUVU0c1IwRkJhVUlzU1VGQmFrSTdRVUZEUVN4WFFVRkpMRTFCUVUwc1MwRkJUaXhEUVVGWkxFbEJRVm9zUzBGRFF5eE5RVUZOTEV0QlFVNHNRMEZCV1N4SlFVRmFMRU5CUVdsQ0xFbEJRV3BDTEVsQlFYbENMR2RDUVVGNlFpeEpRVU5CTEUxQlFVMHNTMEZCVGl4RFFVRlpMRWxCUVZvc1EwRkJhVUlzU1VGQmFrSXNTVUZCZVVJc1pVRkdNVUlzUTBGQlNpeEZRVVZuUkR0QlFVTTVReXhsUVVGTkxGTkJRVTRzUjBGQmEwSXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFdEJRV2hDTEVWQlFXeENPMEZCUTBFc1lVRkJTU3hOUVVGTkxFdEJRVTRzUTBGQldTeEpRVUZhTEVOQlFXbENMRWxCUVdwQ0xFbEJRWGxDTEdkQ1FVRTNRaXhGUVVFclF6dEJRVU0zUXp0QlFVTkJMR1ZCUVVrc1YwRkJWeXhOUVVGTkxGTkJRVTRzUTBGQlowSXNTMEZCYUVJc1JVRkJaanRCUVVOQkxHVkJRVWtzV1VGQldTeExRVUZMTEVkQlFVd3NRMEZCVXl4UlFVRlVMRVZCUVcxQ0xFdEJRVXNzUzBGQmVFSXNRMEZCYUVJc1JVRkJaMFE3UVVGRE9VTXNiVUpCUVUwc1UwRkJUaXhIUVVGclFpeEZRVUZzUWp0QlFVTkJMR3RDUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1UwRkJVeXhOUVVFM1FpeEZRVUZ4UXl4SFFVRnlReXhGUVVFd1F6dEJRVU40UXl4eFFrRkJUU3hUUVVGT0xFTkJRV2RDTEVOQlFXaENMRWxCUVhGQ0xFdEJRVXNzVjBGQlRDeERRVUZwUWl4UlFVRnFRaXhGUVVFeVFpeERRVUV6UWl4RFFVRnlRanRCUVVORU8wRkJRMFlzV1VGTVJDeE5RVXRQTzBGQlEwd3NiVUpCUVUwc1UwRkJUaXhIUVVGclFpeEZRVUZzUWp0QlFVTkVPMEZCUTBZN1FVRkRSQ3hsUVVGTkxFdEJRVTRzUjBGQll5eE5RVUZOTEU5QlFYQkNPMEZCUTBRN1FVRkRSQ3hYUVVGSkxFMUJRVTBzUzBGQlRpeERRVUZaTEVsQlFXaENMRVZCUVhOQ08wRkJRM0JDTEdGQlFVa3NVVUZEUVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVFVGQlRTeExRVUZPTEVOQlFWa3NTVUZCV2l4RFFVRnBRaXhKUVVGc1F5eEZRVUYzUXl4TlFVRk5MRXRCUVU0c1EwRkJXU3hYUVVGd1JDeERRVVJLTzBGQlJVRTdRVUZEUVN4alFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1NVRkJXaXhEUVVGcFFpeE5RVUZxUWl4RFFVRjNRaXhOUVVFMVF5eEZRVUZ2UkN4SFFVRndSQ3hGUVVGNVJEdEJRVU4yUkN4bFFVRkpMRmxCUVZrc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEUxQlFVMHNTMEZCVGl4RFFVRlpMRWxCUVZvc1EwRkJhVUlzVFVGQmFrSXNRMEZCZDBJc1EwRkJlRUlzUlVGQk1rSXNTVUZCYUVRc1EwRkJhRUk3UVVGRFFTeGxRVUZKTEdGQlFXRXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFMUJRV2hDTEVkQlFYbENMRU5CUVhwQ0xFZEJRVFpDTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhEUVVGb1FpeERRVUUzUWl4SFFVTmlMRXRCUVVzc1UwRkVWRHRCUVVWQkxHZENRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSXNVMEZCZUVJc1JVRkJiVU1zVlVGQmJrTTdRVUZEUkR0QlFVTkVPMEZCUTBFc1lVRkJTU3hYUVVGWExFdEJRVXNzV1VGQlRDeERRVUZyUWl4TFFVRkxMRXRCUVhaQ0xFTkJRV1k3UVVGRFFTeGpRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzVFVGQlRTeFRRVUZPTEVOQlFXZENMRTFCUVhCRExFVkJRVFJETEVkQlFUVkRMRVZCUVdsRU8wRkJReTlETEdkQ1FVRkxMRmRCUVV3c1EwRkJhVUlzVVVGQmFrSXNSVUZCTWtJc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEVOQlFYSkNMRU5CUVROQ0xFVkJRMmxDTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhEUVVGb1FpeERRVVJxUWp0QlFVVkVPMEZCUTBRc1kwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xGZEJRWGhDTEVWQlFYRkRMRkZCUVhKRE8wRkJRMEVzWVVGQlNTeFpRVUZaTzBGQlEyUXNhVUpCUVUwc1RVRkJUU3hMUVVGT0xFTkJRVmtzU1VGQldpeERRVUZwUWl4SlFVUlVPMEZCUldRc2EwSkJRVThzUzBGR1R6dEJRVWRrTERKQ1FVRm5RaXhOUVVGTk8wRkJTRklzVlVGQmFFSTdRVUZMUVN4alFVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1UwRkJlRUk3UVVGRFFTeGxRVUZOTEV0QlFVNHNSMEZCWXl4TFFVRkxMRk5CUVc1Q0xFTkJka0p2UWl4RFFYVkNWenRCUVVOb1F5eFJRWGhDUkN4TlFYZENUeXhKUVVGSkxFMUJRVTBzUzBGQlRpeERRVUZaTEZWQlFXaENMRVZCUVRSQ08wRkJRMnBETEdWQlFVMHNTMEZCVGl4SFFVRmpMRTFCUVUwc1MwRkJUaXhEUVVGWkxGVkJRVm9zUTBGQmRVSXNTMEZCZGtJc1EwRkJOa0lzVFVGQlRTeFRRVUZ1UXl4RlFVTTJRaXhOUVVGTkxGTkJSRzVETEVOQlFXUTdRVUZGUkN4UlFVaE5MRTFCUjBFc1NVRkJTU3hOUVVGTkxFdEJRVTRzUTBGQldTeFRRVUZvUWl4RlFVRXlRanRCUVVOb1F5eGhRVUZKTEd0Q1FVRnJRaXhKUVVGMFFqdEJRVU5CTEdGQlFVa3NWMEZCVnl4VFFVRllMRkZCUVZjc1EwRkJVeXhMUVVGVUxFVkJRV2RDTzBGQlF6ZENMR2xDUVVGTkxFdEJRVTRzUjBGQll5eFRRVUZUTEdkQ1FVRm5RaXhUUVVGMlF6dEJRVU5CTERKQ1FVRm5RaXhQUVVGb1FpeEhRVUV3UWl4TFFVRXhRanRCUVVORUxGVkJTRVE3UVVGSlFTeGhRVUZKTEcxQ1FVRnRRaXhOUVVGTkxGTkJRVTRzUTBGQlowSXNUVUZCYUVJc1EwRkJkVUlzVVVGQmRrSXNRMEZCZGtJN1FVRkRRU3hsUVVGTkxFdEJRVTRzUTBGQldTeFRRVUZhTEVOQlFYTkNMRXRCUVhSQ0xFTkJRVFJDTEUxQlFVMHNVMEZCYkVNc1JVRkJOa01zWjBKQlFUZERPMEZCUTBFc1kwRkJTeXhQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5CTzBGQlEwUXNVVUZXVFN4TlFWVkJMRWxCUVVrc1RVRkJUU3hMUVVGT0xFTkJRVmtzU1VGQmFFSXNSVUZCYzBJN1FVRkRNMElzWVVGQlNTeFBRVUZQTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhEUVVGb1FpeERRVUZZTzBGQlEwRXNZVUZCU1N4RFFVRkRMRWxCUVV3c1JVRkJWenRCUVVOVUxHbENRVUZOTEV0QlFVNHNSMEZCWXl4TFFVRkxMRk5CUVc1Q08wRkJRMFFzVlVGR1JDeE5RVVZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRmRCUVZZc1JVRkJkVUk3UVVGRE5VSTdRVUZEUVR0QlFVTkJMR2xDUVVGTkxFdEJRVTRzUjBGQll5eEpRVUZrTzBGQlEwUXNWVUZLVFN4TlFVbEJPMEZCUTB3c1pVRkJTU3hyUWtGQmEwSXNTVUZCU1N4WFFVRktMRU5CUVdkQ0xFdEJRVXNzVVVGQlRDeEZRVUZvUWl4RFFVRjBRanRCUVVOQkxESkNRVUZuUWl4VlFVRm9RaXhEUVVFeVFpeERRVUV6UWl4RlFVRTRRaXhMUVVFNVFpeERRVUZ2UXl4WFFVRndReXhIUVVGclJDeExRVUZMTEZGQlFVd3NSVUZCYkVRN1FVRkRRU3h0UWtGQlVUdEJRVU5PTEcxQ1FVRk5MRVZCUVVNc1RVRkJUU3hQUVVGUUxFVkJSRUU3UVVGRlRpd3dRa0ZCWVR0QlFVWlFMRmxCUVZJN1FVRkpRU3huUWtGQlN5eFZRVUZNTEVOQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEV0QlFYaENPMEZCUTBRN1FVRkRSaXhSUVdwQ1RTeE5RV2xDUVR0QlFVTk1MR1ZCUVUwc1ZVRkJWU3huUTBGQlZpeERRVUZPTzBGQlEwUTdRVUZGUmpzN08zVkRRVVZwUWp0QlFVTm9RaXhYUVVGSkxGRkJRVkVzUzBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFTkJRVm83UVVGRFFTeFhRVUZKTEU5QlFVOHNUVUZCVFN4SlFVRnFRanRCUVVOQkxGZEJRVWtzUTBGQlF5eE5RVUZOTEZGQlFWZ3NSVUZCY1VJN1FVRkRia0lzWlVGQlRTeFJRVUZPTEVkQlFXbENMRWxCUVdwQ08wRkJRMEVzWVVGQlNTeExRVUZLTzBGQlEwRXNZVUZCU1N4TFFVRkxMRXRCUVZRc1JVRkJaMEk3UVVGRFpDeHRRa0ZCVVN4TFFVRkxMR3RDUVVGTUxFTkJRWGRDTEV0QlFVc3NVVUZCVEN4RlFVRjRRaXhEUVVGU08wRkJRMEU3UVVGRFFTeGxRVUZKTEZsQlFWa3NTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEVsQlFXaERMRU5CUVdoQ08wRkJRMEVzWjBKQlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeEZRVUYzUWl4VFFVRjRRaXhGUVVGdFF5eE5RVUZOTEZWQlFYcERPMEZCUTBRN1FVRkRSQ3hqUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEV0QlFVc3NTVUZCV2l4RlFVRnJRaXhQUVVGUExFdEJRWHBDTEVWQlFYaENPMEZCUTBRc1VVRldSQ3hOUVZWUE8wRkJRMHdzWTBGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ08wRkJRMFE3UVVGRFJqczdPMmxFUVVVeVFqdEJRVU14UWl4WFFVRkpMRkZCUVZFc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRU5CUVZvN1FVRkRRU3hYUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZZTEVWQlFXbENPMEZCUTJZc1lVRkJTU3hEUVVGRExFMUJRVTBzU1VGQldDeEZRVUZwUWp0QlFVTm1MR2xDUVVGTkxFbEJRVTRzUjBGQllTeEpRVUZpTzBGQlEwRXNaMEpCUVVzc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExFMUJRVTBzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCYkVJc1JVRkJlRUk3UVVGRFJDeFZRVWhFTEUxQlIwODdRVUZEVEN4cFFrRkJUU3hKUVVGT0xFZEJRV0VzU1VGQllqdEJRVU5CTEdWQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1UwRkJXaXhOUVVFeVFpeE5RVUZOTEVsQlFVNHNRMEZCVnl4VlFVRXhReXhGUVVGelJEdEJRVU53UkN4clFrRkJTeXhWUVVGTUxFTkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xFVkJRVU1zVFVGQlRTeE5RVUZOTEVsQlFVNHNRMEZCVnl4VlFVRnNRaXhGUVVGNFFqdEJRVU5FTEZsQlJrUXNUVUZGVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hMUVVGT0xFTkJRVmtzVTBGQldpeEZRVUZFTEVsQlFUUkNMRTFCUVUwc1NVRkJUaXhEUVVGWExGTkJRVE5ETEVWQlFYTkVPMEZCUXpORUxHdENRVUZMTEZWQlFVd3NRMEZCWjBJc1QwRkJhRUlzUTBGQmQwSXNSVUZCUXl4TlFVRk5MRTFCUVUwc1NVRkJUaXhEUVVGWExGTkJRV3hDTEVWQlFYaENPMEZCUTBRN1FVRkRSanRCUVVOR0xGRkJXa1FzVFVGWlR6dEJRVU5NTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FqdEJRVU5CTEdGQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hKUVVGdFFpeDFRa0ZCZGtJc1JVRkJaMFE3UVVGRE9VTXNaMEpCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGdVFpeEhRVUV5UWl4TlFVRk5MRXRCUVdwRE8wRkJRMFE3UVVGRFJqdEJRVU5HT3pzN05rTkJSWFZDTzBGQlEzUkNMRmRCUVVrc1QwRkJUeXhMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUlzU1VGQk9VSTdRVUZEUVN4WFFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGZEJRVWtzUzBGQlN5eExRVUZVTEVWQlFXZENPMEZCUTJRc2FVSkJRVkVzUzBGQlN5eExRVUZNTEVOQlFWY3NTVUZCYmtJN1FVRkRSRHRCUVVORUxGZEJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEdOQlFVOHNVMEZEUVN4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFbEJRVzFDTEdkQ1FVUnVRaXhKUVVWQkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTVUZCYlVJc1pVRkdNVUlzUlVGRk1rTTdRVUZEZWtNc1lVRkJTU3hOUVVGTkxFMUJRVllzUlVGQmEwSTdRVUZEYUVJc1pVRkJTU3hEUVVGRExFdEJRVVFzU1VGQlZ5eFRRVUZUTEUxQlFVMHNTMEZCT1VJc1JVRkJjME03UVVGRGNFTTdRVUZEUkR0QlFVTkdPMEZCUTBRc1kwRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFXaENPMEZCUTBFc2FVSkJRVkVzUzBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFTkJRVkk3UVVGRFJEdEJRVU5FTzBGQlEwRXNZVUZCVFN4WlFVRlpMRFJDUVVGYUxFTkJRVTQ3UVVGRFJEczdPelJEUVVWelFqdEJRVU55UWl4WFFVRkpMRkZCUVZFc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRU5CUVZvN1FVRkRRU3hoUVVGTkxFMUJRVTRzUjBGQlpTeEpRVUZtTzBGQlEwRXNWMEZCU1N4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFbEJRVzFDTEd0Q1FVRnVRaXhKUVVGNVF5eE5RVUZOTEVsQlFVNHNTMEZCWlN4VFFVRTFSQ3hGUVVGMVJUdEJRVU55UlR0QlFVTkJMR1ZCUVUwc1MwRkJUaXhIUVVGakxFdEJRVXNzU1VGQmJrSTdRVUZEUVN4bFFVRk5MRWxCUVU0c1IwRkJZU3hKUVVGaU8wRkJRMFE3UVVGRFJDeFhRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRllMRVZCUVdsQ08wRkJRMllzWlVGQlRTeEpRVUZPTEVkQlFXRXNTVUZCWWp0QlFVTkJMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExFMUJRVTBzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCYkVJc1JVRkJlRUk3UVVGRFJDeFJRVWhFTEUxQlIwODdRVUZEVEN4bFFVRk5MRWxCUVU0c1IwRkJZU3hMUVVGaU8wRkJRMEVzWVVGQlNTeERRVUZETEUxQlFVMHNTMEZCVGl4RFFVRlpMRk5CUVZvc1JVRkJUQ3hGUVVFNFFqdEJRVU0xUWl4blFrRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFXaENPMEZCUTBRc1ZVRkdSQ3hOUVVWUExFbEJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCWml4RlFVRnhRanRCUVVNeFFpeG5Ra0ZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRVZCUVVNc1RVRkJUU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZzUWl4RlFVRjRRanRCUVVORU8wRkJRMFk3UVVGRFJqczdPekJEUVVWdlFqdEJRVU51UWl4WlFVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSTdRVUZEUkRzN08ybERRVVZYTzBGQlExWXNWMEZCU1N4UlFVRlJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRmFPMEZCUTBFc1YwRkJTU3hEUVVGRExFMUJRVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRaXhGUVVGTUxFVkJRU3RDTzBGQlF6ZENMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeExRVUZvUWp0QlFVTkJMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGdVFpeEhRVUV5UWl4TlFVRk5MRmRCUVU0c1EwRkJhMElzUzBGQmJFSXNTVUZCTWtJc1MwRkJTeXhUUVVFelJEdEJRVU5FTzBGQlEwWTdPenNyUTBGRmVVSTdRVUZEZUVJc1YwRkJTU3hSUVVGUkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhEUVVGYU8wRkJRMEVzVjBGQlNTeERRVUZETEUxQlFVMHNTVUZCV0N4RlFVRnBRanRCUVVObUxHVkJRVTBzU1VGQlRpeEhRVUZoTEVsQlFXSTdRVUZEUVN4alFVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1JVRkJReXhOUVVGTkxFMUJRVTBzU1VGQlRpeERRVUZYTEZWQlFXeENMRVZCUVhoQ08wRkJRMFFzVVVGSVJDeE5RVWRQTzBGQlEwd3NZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTzBGQlEwRTdRVUZEUVR0QlFVTkJMR05CUVVzc1MwRkJUQ3hIUVVGaExFMUJRVTBzUzBGQmJrSTdRVUZEUkR0QlFVTkdPenM3TUVOQlJXOUNPMEZCUTI1Q0xGZEJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEdGQlFVMHNUVUZCVGl4SFFVRmxMRWxCUVdZN1FVRkRRU3hYUVVGSkxFOUJRVThzVFVGQlRTeEpRVUZxUWp0QlFVTkJMRmRCUVVrc1EwRkJReXhOUVVGTkxHRkJRVmdzUlVGQk1FSTdRVUZEZUVJc1pVRkJUU3hoUVVGT0xFZEJRWE5DTEVsQlFYUkNPMEZCUTBFc1lVRkJTU3hQUVVGUExFdEJRVXNzU1VGQmFFSTdRVUZEUVN4aFFVRkpMRXRCUVVzc1NVRkJUQ3hKUVVGaExIRkNRVUZxUWl4RlFVRjNRenRCUVVOMFF6dEJRVU5CTEd0Q1FVRlBMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhGUVVFMVFqdEJRVU5FTzBGQlEwUXNZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRVZCUVVNc1RVRkJUU3hKUVVGUUxFVkJRV0VzV1VGQldTeEpRVUY2UWl4RlFVRjRRanRCUVVORUxGRkJVa1FzVFVGUlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4WFFVRllMRVZCUVhkQ08wRkJRemRDTEdWQlFVMHNWMEZCVGl4SFFVRnZRaXhKUVVGd1FqdEJRVU5CTEdWQlFVMHNVVUZCVGl4SFFVRnBRaXhOUVVGTkxFdEJRWFpDTzBGQlEwRXNZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRVZCUVVNc1RVRkJUU3hMUVVGTExFdEJRVm9zUlVGQmVFSTdRVUZEUkN4UlFVcE5MRTFCU1VFN1FVRkRUQ3hoUVVGSkxFOUJRVThzVFVGQlRTeFJRVUZpTEVsQlFYbENMRmRCUVRkQ0xFVkJRVEJETzBGQlEzaERPMEZCUTBFc2FVSkJRVTBzVFVGQlRpeEhRVUZsTEUxQlFVMHNTMEZCY2tJN1FVRkRRU3hwUWtGQlRTeFJRVUZPTEVkQlFXbENMRU5CUVdwQ08wRkJRMFE3UVVGRFJDeGhRVUZKTEU5QlFVOHNTVUZCV0R0QlFVTkJMR1ZCUVUwc1IwRkJSenRCUVVOUUxHVkJRVWtzU1VGQlNTeE5RVUZOTEZGQlFXUTdRVUZEUVN4blFrRkJTeXhKUVVGSkxFbEJRVlFzU1VGQmFVSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJPVUlzUlVGQk1FTTdRVUZEZUVNc2FVSkJRVWtzVVVGQlVTeE5RVUZOTEUxQlFVNHNRMEZCWVN4aFFVRjZRaXhGUVVGM1F6dEJRVU4wUXp0QlFVTkVPMEZCUTBRc2FVSkJRVWtzUzBGQlN5eERRVUZVTEVWQlFWazdRVUZEVml4elFrRkJUeXhKUVVGUU8wRkJRMEVzY1VKQlFVMHNTVUZCVGp0QlFVTkVPMEZCUTBRN1FVRkRSRHRCUVVORUxHbENRVUZOTEUxQlFVNHNSMEZCWlN4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFbEJRMWdzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhWUVVGd1FpeERRVUVyUWl4VFFVUnVRenRCUVVWQkxHbENRVUZOTEZGQlFVNHNSMEZCYVVJc1EwRkJha0k3UVVGRFJDeFZRV1pMTEZGQlpVY3NUVUZCVFN4TlFXWlVPMEZCWjBKT0xHVkJRVTBzVVVGQlRqdEJRVU5CTEdGQlFVa3NVMEZCVXl4SlFVRmlMRVZCUVcxQ08wRkJRMnBDTEdkQ1FVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSTdRVUZEUkN4VlFVWkVMRTFCUlU4N1FVRkRUQ3huUWtGQlN5eGxRVUZNTEVOQlFYRkNMRTFCUVUwc1VVRkJNMElzUlVGQmNVTXNTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFbEJRWEpDTEVOQlFYSkRPMEZCUTBFc1pVRkJTU3hMUVVGTExFbEJRVlFzUlVGQlpUdEJRVU5pTEd0Q1FVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1JVRkJReXhOUVVGTkxFdEJRVXNzU1VGQldpeEZRVUY0UWp0QlFVTkVPMEZCUTBZN1FVRkRSanRCUVVOR096czdkME5CUld0Q08wRkJRMnBDTEZkQlFVa3NVVUZCVVN4TFFVRkxMRlZCUVV3c1EwRkJaMElzUTBGQmFFSXNRMEZCV2p0QlFVTkJMR0ZCUVUwc1RVRkJUaXhIUVVGbExFbEJRV1k3UVVGRFFTeFhRVUZKTEU5QlFVOHNUVUZCVFN4SlFVRnFRanRCUVVOQkxGZEJRVWtzVDBGQlR5eE5RVUZOTEVsQlFVNHNTVUZCWXl4RFFVRjZRanRCUVVOQkxGZEJRVWtzVVVGQlVTeERRVUZhTEVWQlFXVTdRVUZEWWl4bFFVRk5MRWxCUVU0c1IwRkJZU3hEUVVGaU8wRkJRMEVzWVVGQlNTeExRVUZMTEVsQlFWUXNSVUZCWlR0QlFVTmlMR2RDUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEV0QlFVc3NTVUZCV2l4RlFVRjRRanRCUVVORU8wRkJRMFlzVVVGTVJDeE5RVXRQTEVsQlFVa3NVVUZCVVN4RFFVRmFMRVZCUVdVN1FVRkRjRUlzWlVGQlRTeEpRVUZPTEVkQlFXRXNRMEZCWWp0QlFVTkJMR0ZCUVVrc1MwRkJTeXhKUVVGVUxFVkJRV1U3UVVGRFlpeG5Ra0ZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRVZCUVVNc1RVRkJUU3hMUVVGTExFbEJRVm9zUlVGQmVFSTdRVUZEUkR0QlFVTkdMRkZCVEUwc1RVRkxRU3hKUVVGSkxGRkJRVkVzUTBGQldpeEZRVUZsTzBGQlEzQkNMR1ZCUVUwc1NVRkJUaXhIUVVGaExFTkJRV0k3UVVGRFFTeGhRVUZKTEV0QlFVc3NTVUZCVEN4SlFVRmhMRTFCUVUwc1MwRkJia0lzU1VGQk5FSXNRMEZCUXl4TlFVRk5MRXRCUVU0c1EwRkJXU3hUUVVGYUxFVkJRV3BETEVWQlFUQkVPMEZCUTNoRU8wRkJRMEVzWjBKQlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FqdEJRVU5FTEZWQlNFUXNUVUZIVHl4SlFVRkpMRXRCUVVzc1NVRkJWQ3hGUVVGbE8wRkJRM0JDTEdkQ1FVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1JVRkJReXhOUVVGTkxFdEJRVXNzU1VGQldpeEZRVUY0UWp0QlFVTkVPMEZCUTBZc1VVRlNUU3hOUVZGQkxFbEJRVWtzVVVGQlVTeERRVUZhTEVWQlFXVTdRVUZEY0VJc1pVRkJUU3hKUVVGT0xFZEJRV0VzUTBGQllqdEJRVU5CTEdGQlFVa3NTMEZCU3l4TlFVRlVMRVZCUVdsQ08wRkJRMllzWjBKQlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4RlFVRkRMRTFCUVUwc1MwRkJTeXhOUVVGYUxFVkJRWGhDTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3SzBOQlJYbENPMEZCUTNoQ0xGbEJRVXNzVlVGQlRDeERRVUZuUWl4TFFVRm9RanRCUVVORU96czdPRU5CUlhkQ08wRkJRM1pDTEZkQlFVa3NVVUZCVVN4TFFVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSXNSVUZCV2p0QlFVTkJMRmxCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGdVFpeEhRVUV5UWl4TFFVRkxMR05CUVV3c1EwRkJiMElzVFVGQlRTeEpRVUV4UWl4RFFVRXpRanRCUVVORU96czdjME5CUldkQ08wRkJRMllzVjBGQlNTeFJRVUZSTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FpeEZRVUZhTzBGQlEwRXNWMEZCU1N4UFFVRlBMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeE5RVUZOTEVsQlFVNHNRMEZCVnl4SlFVRm9ReXhEUVVGWU8wRkJRMEVzV1VGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEV0QlFXNUNMRWRCUTBrc1RVRkJUU3hWUVVGT0xFZEJRVzFDTEVsQlFXNUNMRWRCUVRCQ0xFdEJRVXNzYVVKQlFVd3NRMEZCZFVJc1NVRkJka0lzUTBGRU9VSTdRVUZGUkRzN08zVkRRVVZwUWp0QlFVTm9RaXhqUVVGUExFdEJRVXNzZVVKQlFVd3NSVUZCVUR0QlFVTkVPenM3TkVOQlJYTkNPMEZCUTNKQ08wRkJRMEVzVjBGQlNTeFJRVUZSTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FpeEZRVUZhTzBGQlEwRXNXVUZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRVZCUVVNc1RVRkJUU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZzUWp0QlFVTkJMR2RDUVVGUExFMUJRVTBzU1VGQlRpeERRVUZYTEV0QlFWZ3NRMEZCYVVJc1NVRkVlRUlzUlVGQmVFSTdRVUZGUkRzN08yMURRVVZoTzBGQlExb3NWMEZCU1N4UlFVRlJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeExRVUZvUWl4RlFVRmFPMEZCUTBFc1dVRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xFdEJRVzVDTEVkQlFUSkNMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeE5RVUZOTEVsQlFVNHNRMEZCVnl4TFFVRm9ReXhEUVVFelFqdEJRVU5FT3pzN05rTkJSWFZDTzBGQlEzUkNMRmRCUVVrc1VVRkJVU3hMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1EwRkJXanRCUVVOQkxGZEJRVWtzVDBGQlR5eE5RVUZOTEVsQlFXcENPMEZCUTBFc1YwRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNTVUZCYWtJc1NVRkJlVUlzUzBGQlN5eFJRVUZNTEVsQlFXbENMRWxCUVRsRExFVkJRVzlFTzBGQlEyeEVMR1ZCUVUwc1dVRkJXU3dyUWtGQkswSXNTMEZCU3l4UlFVRm9SQ3hEUVVGT08wRkJRMFE3UVVGRFJDeFhRVUZKTEVOQlFVTXNUVUZCVFN4VFFVRllMRVZCUVhOQ08wRkJRM0JDTEdWQlFVMHNVMEZCVGl4SFFVRnJRaXhKUVVGc1FqdEJRVU5CTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4RlFVRkRMRTFCUVUwc1MwRkJTeXhKUVVGYUxFVkJRWGhDTzBGQlEwUXNVVUZJUkN4TlFVZFBMRWxCUVVrc1EwRkJReXhOUVVGTkxGVkJRVmdzUlVGQmRVSTdRVUZETlVJc1lVRkJTeXhMUVVGTExGRkJRVXdzU1VGQmFVSXNTVUZCYWtJc1NVRkJlVUlzUTBGQlF5eE5RVUZOTEV0QlFVNHNRMEZCV1N4VFFVRmFMRVZCUVROQ0xFbEJRME1zUzBGQlN5eFJRVUZNTEVsQlFXbENMRWxCUVdwQ0xFbEJRWGxDTEUxQlFVMHNTMEZCVGl4RFFVRlpMRk5CUVZvc1JVRkVPVUlzUlVGRGQwUTdRVUZEZEVRN1FVRkRRU3huUWtGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ08wRkJRMEVzWjBKQlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TFFVRnVRaXhIUVVFeVFpeE5RVUZOTEV0QlFXcERPMEZCUTBRc1ZVRk1SQ3hOUVV0UE8wRkJRMHdzYVVKQlFVMHNWVUZCVGl4SFFVRnRRaXhKUVVGdVFqdEJRVU5CTEdkQ1FVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1JVRkJReXhOUVVGTkxFdEJRVXNzUzBGQldpeEZRVUY0UWp0QlFVTkVPMEZCUTBZc1VVRldUU3hOUVZWQk8wRkJRMHdzWTBGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ08wRkJRMEVzWTBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEV0QlFXNUNMRWRCUVRKQ0xFMUJRVTBzUzBGQmFrTTdRVUZEUkR0QlFVTkdPenM3TkVOQlJYTkNPMEZCUTNKQ0xGZEJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEZkQlFVa3NUMEZCVHl4TlFVRk5MRWxCUVdwQ08wRkJRMEVzVjBGQlNTeERRVUZETEUxQlFVMHNWMEZCV0N4RlFVRjNRanRCUVVOMFFpeGxRVUZOTEZkQlFVNHNSMEZCYjBJc1NVRkJjRUk3UVVGRFFTeGpRVUZMTEZWQlFVd3NRMEZCWjBJc1QwRkJhRUlzUTBGQmQwSXNSVUZCUXl4TlFVRk5MRXRCUVVzc1RVRkJXaXhGUVVGNFFqdEJRVU5FTEZGQlNFUXNUVUZIVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hoUVVGWUxFVkJRVEJDTzBGQlF5OUNMR1ZCUVUwc1lVRkJUaXhIUVVGelFpeEpRVUYwUWp0QlFVTkJMR1ZCUVUwc1RVRkJUaXhIUVVGbExFMUJRVTBzUzBGQmNrSTdRVUZEUVN4alFVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJN1FVRkRkRUlzYVVKQlFVMHNTMEZCU3l4UlFVUlhPMEZCUlhSQ0xIVkNRVUZaTEVOQlFVTXNTMEZCU3p0QlFVWkpMRlZCUVhoQ08wRkJTVVFzVVVGUVRTeE5RVTlCTzBGQlEwd3NZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTzBGQlEwRXNZVUZCU1N4TlFVRk5MRlZCUVZZc1JVRkJjMEk3UVVGRGNFSXNaMEpCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGdVFpeEhRVUV5UWl4RFFVRkRMRTFCUVUwc1RVRkJVQ3hGUVVGbExFMUJRVTBzUzBGQmNrSXNRMEZCTTBJN1FVRkRSQ3hWUVVaRUxFMUJSVTg3UVVGRFRDeG5Ra0ZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRXRCUVc1Q0xFZEJRVEpDTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhOUVVGTkxFMUJRWFpDTEVWQlFTdENMRTFCUVUwc1MwRkJja01zUTBGQk0wSTdRVUZEUkR0QlFVTkdPMEZCUTBZN096dDVRMEZGYlVJN1FVRkRiRUlzWTBGQlR5eExRVUZMTEd0Q1FVRk1MRVZCUVZBN1FVRkRSRHM3T3pSRFFVVnpRanRCUVVOeVFpeFhRVUZKTEZGQlFWRXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFWbzdRVUZEUVN4WFFVRkpMRTlCUVU4c1RVRkJUU3hKUVVGcVFqdEJRVU5CTEZkQlFVa3NZMEZCWXl4TlFVRk5MRmRCUVhoQ08wRkJRMEVzVjBGQlNTeEpRVUZKTEUxQlFVMHNRMEZCVGl4SlFVRlhMRU5CUVc1Q08wRkJRMEVzVjBGQlNTeERRVUZETEUxQlFVMHNUVUZCV0N4RlFVRnRRanRCUVVOcVFpeGxRVUZOTEUxQlFVNHNSMEZCWlN4TFFVRkxMRmxCUVV3c1EwRkJhMElzUzBGQlN5eE5RVUYyUWl4RFFVRm1PMEZCUTBRc1VVRkdSQ3hOUVVWUE8wRkJRMHdzWVVGQlNTeFhRVUZLTEVWQlFXbENPMEZCUTJZc2FVSkJRVTBzUjBGQlRpeEhRVUZaTEUxQlFVMHNTMEZCYkVJN1FVRkRSQ3hWUVVaRUxFMUJSVTg3UVVGRFRDeG5Ra0ZCU3l4WFFVRk1MRU5CUVdsQ0xFMUJRVTBzVFVGQmRrSXNSVUZCSzBJc1RVRkJUU3hIUVVGeVF5eEZRVUV3UXl4TlFVRk5MRXRCUVdoRU8wRkJRMFE3UVVGRFJqdEJRVU5FTEZkQlFVa3NTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFVb3NSVUZCZDBJN1FVRkRkRUlzWVVGQlNTeFhRVUZLTEVWQlFXbENPMEZCUTJZc2FVSkJRVTBzUTBGQlRpeEhRVUZWTEVsQlFVa3NRMEZCWkR0QlFVTkJMR2RDUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TFFVRXhRaXhGUVVGNFFqdEJRVU5FTEZWQlNFUXNUVUZIVHp0QlFVTk1MR2RDUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4SFFVRXhRaXhGUVVFclFpeFpRVUZaTEVsQlFUTkRMRVZCUVhoQ08wRkJRMFE3UVVGRFJDeGxRVUZOTEZkQlFVNHNSMEZCYjBJc1EwRkJReXhYUVVGeVFqdEJRVU5FTEZGQlVrUXNUVUZSVHp0QlFVTk1MR05CUVVzc1ZVRkJUQ3hEUVVGblFpeExRVUZvUWp0QlFVTkJMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGdVFpeEhRVUV5UWl4TlFVRk5MRTFCUVdwRE8wRkJRMFE3UVVGRFJqczdPMjFEUVVWaE8wRkJRMW9zWTBGQlR5eExRVUZMTEd0Q1FVRk1MRVZCUVZBN1FVRkRSRHM3T3pKRFFVVnhRanRCUVVOd1FpeFhRVUZKTEZGQlFWRXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFWbzdRVUZEUVN4WFFVRkpMRTlCUVU4c1RVRkJUU3hKUVVGcVFqdEJRVU5CTEZkQlFVa3NTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFTkJRVU1zVFVGQlRTeEpRVUUxUWl4RlFVRnJRenRCUVVOb1F5eGxRVUZOTEVsQlFVNHNSMEZCWVN4SlFVRmlPMEZCUTBFc1kwRkJTeXhWUVVGTUxFTkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xFVkJRVU1zVFVGQlRTeExRVUZMTEZGQlFWb3NSVUZCZUVJN1FVRkRSQ3hSUVVoRUxFMUJSMDg3UVVGRFRDeGhRVUZKTEZGQlFWRXNUVUZCVFN4TFFVRk9MRWxCUVdVc1MwRkJTeXhUUVVGb1F6dEJRVU5CTEZsQlFVYzdRVUZEUkN4blFrRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFXaENPMEZCUTBFc1pVRkJTU3hMUVVGTExGVkJRVXdzUTBGQlowSXNUVUZCYUVJc1NVRkJNRUlzUTBGQk9VSXNSVUZCYVVNN1FVRkRMMEk3UVVGRFFTeHRRa0ZCVFN4WlFVRlpMREJDUVVGYUxFTkJRVTQ3UVVGRFJEdEJRVU5FTEcxQ1FVRlJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRlNPMEZCUTBRc1ZVRlFSQ3hSUVU5VExFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTVUZCYlVJc1owSkJRVzVDTEVsQlEwRXNUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hKUVVGdFFpeGxRVkkxUWp0QlFWTkJMR1ZCUVUwc1MwRkJUaXhIUVVGakxFdEJRV1E3UVVGRFJEdEJRVU5HT3pzN09FTkJSWGRDTzBGQlEzWkNMRmRCUVVrc1VVRkJVU3hMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1EwRkJXanRCUVVOQkxGZEJRVWtzVDBGQlR5eE5RVUZOTEVsQlFXcENPMEZCUTBFc1YwRkJTU3hKUVVGSkxFMUJRVTBzUTBGQlRpeEpRVUZYTEVOQlFXNUNPMEZCUTBFc1YwRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNRMEZCYWtJc1EwRkJTaXhGUVVGNVFqdEJRVU4yUWl4bFFVRk5MRU5CUVU0c1IwRkJWU3hKUVVGSkxFTkJRV1E3UVVGRFFTeGpRVUZMTEZWQlFVd3NRMEZCWjBJc1QwRkJhRUlzUTBGQmQwSXNSVUZCUXl4TlFVRk5MRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeERRVUZxUWl4RFFVRlFMRVZCUVhoQ08wRkJRMFFzVVVGSVJDeE5RVWRQTzBGQlEwd3NZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTzBGQlEwRXNZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRXRCUVc1Q0xFZEJRVEpDTEUxQlFVMHNTMEZCYWtNN1FVRkRSRHRCUVVOR096czdNa05CUlhGQ08wRkJRM0JDTEZkQlFVa3NVVUZCVVN4TFFVRkxMRlZCUVV3c1EwRkJaMElzUTBGQmFFSXNRMEZCV2p0QlFVTkJMR0ZCUVUwc1QwRkJUaXhIUVVGblFpeE5RVUZOTEU5QlFVNHNTVUZCYVVJc1JVRkJha003UVVGRFFTeGhRVUZOTEZGQlFVNHNSMEZCYVVJc1NVRkJha0k3TzBGQlJVRXNWMEZCU1N4RFFVRkRMRTFCUVUwc1NVRkJXQ3hGUVVGcFFqdEJRVU5tTEdWQlFVMHNTVUZCVGl4SFFVRmhMRWxCUVdJN1FVRkRRU3hqUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEUxQlFVMHNTVUZCVGl4RFFVRlhMRmxCUVd4Q0xFVkJRWGhDTzBGQlEwUXNVVUZJUkN4TlFVZFBPMEZCUTB3c1lVRkJTU3hEUVVGRExFMUJRVTBzVjBGQldDeEZRVUYzUWp0QlFVTjBRanRCUVVOQkxHbENRVUZOTEZkQlFVNHNSMEZCYjBJc1RVRkJUU3hMUVVFeFFqdEJRVU5FT3p0QlFVVkVMR0ZCUVVrc1VVRkJVU3hOUVVGTkxFdEJRVTRzU1VGQlpTeERRVUV6UWp0QlFVTkJMR0ZCUVVrc1kwRkJZeXhOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUZZTEVOQlFXbENMRXRCUVdwQ0xFTkJRV3hDTzBGQlEwRXNZVUZCU1N4WFFVRktMRVZCUVdsQ08wRkJRMllzWlVGQlNTeERRVUZETEUxQlFVMHNTVUZCVUN4SlFVRmxMRU5CUVVNc1RVRkJUU3hQUVVGT0xFTkJRV01zUzBGQlpDeERRVUZvUWl4SlFVRjNReXhaUVVGWkxFbEJRWGhFTEVWQlFUaEVPMEZCUXpWRUxHMUNRVUZOTEU5QlFVNHNRMEZCWXl4TFFVRmtMRWxCUVhWQ0xFbEJRWFpDTzBGQlEwRXNhMEpCUVVzc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExFMUJRVTBzV1VGQldTeEpRVUZ1UWl4RlFVRjRRanRCUVVORUxGbEJTRVFzVFVGSFR6dEJRVU5NTzBGQlEwRXNhVUpCUVVrc1RVRkJUU3hKUVVGT0xFbEJRV01zUTBGQlF5eFpRVUZaTEVsQlFUTkNMRWxCUTBFc1MwRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlRTeExRVUZvUWl4RlFVRjFRaXhOUVVGTkxGZEJRVGRDTEV0QlFUWkRMRU5CUkdwRUxFVkJRMjlFTzBGQlEyeEVMSEZDUVVGTkxFbEJRVTRzUjBGQllTeEpRVUZpTzBGQlEwRXNiVUpCUVVrc1NVRkJTU3hOUVVGTkxFTkJRVTRzU1VGQlZ5eERRVUZ1UWp0QlFVTkJMRzFDUVVGSkxGbEJRVmtzVlVGQldpeERRVUYxUWl4RFFVRjJRaXhEUVVGS0xFVkJRU3RDTzBGQlF6ZENMSE5DUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEZsQlFWa3NWVUZCV2l4RFFVRjFRaXhEUVVGMlFpeERRVUZRTEVWQlFYaENPMEZCUTBFc2RVSkJRVTBzUTBGQlRpeEhRVUZWTEVsQlFVa3NRMEZCWkR0QlFVTkJPMEZCUTBRN1FVRkRSanRCUVVORUxHMUNRVUZOTEVOQlFVNHNSMEZCVlN4RFFVRldPMEZCUTBFc2JVSkJRVTBzUzBGQlRpeEhRVUZqTEZGQlFWRXNRMEZCZEVJN1FVRkRSRHRCUVVOR0xGVkJia0pFTEUxQmJVSlBPMEZCUTB3c1owSkJRVXNzVlVGQlRDeERRVUZuUWl4TFFVRm9RanRCUVVORU8wRkJRMFk3UVVGRFJqczdPekJEUVVWdlFqdEJRVU51UWl4WlFVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSTdRVUZEUVN4WlFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFMUJRWEJETEVWQlFUUkRMRWRCUVRWRExFVkJRV2xFTzBGQlF5OURMR0ZCUVVrc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xHTkJRWFpDTEVWQlFYVkRPMEZCUTNKRExHZENRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNTMEZCYmtJc1IwRkJNa0lzUzBGQlN5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEdOQlFUbERPMEZCUTBFN1FVRkRSRHRCUVVOR08wRkJRMFFzWVVGQlRTeE5RVUZOTERKQ1FVRk9MRU5CUVU0N1FVRkRSRHM3T3pCRFFVVnZRanRCUVVOdVFpeFhRVUZKTEZGQlFWRXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFWbzdRVUZEUVN4WFFVRkpMRTlCUVU4c1RVRkJUU3hKUVVGcVFqdEJRVU5CTEZkQlFVa3NRMEZCUXl4TlFVRk5MRkZCUVZnc1JVRkJjVUk3UVVGRGJrSXNaVUZCVFN4UlFVRk9MRWRCUVdsQ0xFbEJRV3BDTzBGQlEwRXNZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRVZCUVVNc1RVRkJUU3hMUVVGTExGRkJRVm9zUlVGQmVFSTdRVUZEUkN4UlFVaEVMRTFCUjA4N1FVRkRUQ3hqUVVGTExHTkJRVXdzUTBGQmIwSXNUVUZCVFN4TFFVRXhRanRCUVVORU8wRkJRMFk3T3p0M1EwRkZhMEk3UVVGRGFrSXNWMEZCU1N4UlFVRlJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RFFVRmFPMEZCUTBFc1YwRkJTU3hQUVVGUExFMUJRVTBzU1VGQmFrSTdRVUZEUVN4WFFVRkpMRU5CUVVNc1RVRkJUU3hUUVVGWUxFVkJRWE5DTzBGQlEzQkNMR1ZCUVUwc1UwRkJUaXhIUVVGclFpeEpRVUZzUWp0QlFVTkJMR05CUVVzc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExFMUJRVTBzUzBGQlN5eExRVUZhTEVWQlFYaENPMEZCUTBRc1VVRklSQ3hOUVVkUExFbEJRVWtzUTBGQlF5eE5RVUZOTEdGQlFWQXNTVUZCZDBJc1MwRkJTeXhUUVVGcVF5eEZRVUUwUXp0QlFVTnFSQ3hsUVVGTkxHRkJRVTRzUjBGQmMwSXNTVUZCZEVJN1FVRkRRU3hqUVVGTExGVkJRVXdzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eE5RVUZOTEV0QlFVc3NVMEZCV2l4RlFVRjRRanRCUVVORUxGRkJTRTBzVFVGSFFUdEJRVU5NTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FqdEJRVU5FTzBGQlEwWTdPenN5UTBGRmNVSTdRVUZEY0VJc1YwRkJTU3hSUVVGUkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhEUVVGYU8wRkJRMEVzVjBGQlNTeFBRVUZQTEUxQlFVMHNTVUZCYWtJN1FVRkRRU3hYUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZZTEVWQlFXbENPMEZCUTJZc1pVRkJUU3hKUVVGT0xFZEJRV0VzU1VGQllqdEJRVU5CTEdGQlFVa3NXVUZCV1N4RlFVRkRMRTFCUVUwc1MwRkJTeXhSUVVGYUxFVkJRV2hDTzBGQlEwRXNZVUZCU1N4TFFVRkxMRkZCUVV3c1NVRkJhVUlzVVVGQmNrSXNSVUZCSzBJN1FVRkROMElzY1VKQlFWVXNWVUZCVml4SFFVRjFRaXhKUVVGMlFqdEJRVU5FTzBGQlEwUXNZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRk5CUVhoQ08wRkJRMFFzVVVGUVJDeE5RVTlQTzBGQlEwd3NZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTzBGQlEwRXNZVUZCU1N4TFFVRktPMEZCUTBFc1lVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNSMEZCY2tJc1JVRkJNRUk3UVVGRGVFSXNiVUpCUVZFc1EwRkJReXhOUVVGTkxFdEJRVTRzUTBGQldTeFJRVUZhTEVWQlFWUTdRVUZEUkN4VlFVWkVMRTFCUlU4c1NVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNSMEZCY2tJc1JVRkJNRUk3UVVGREwwSXNiVUpCUVZFc1RVRkJUU3hMUVVGT0xFTkJRVmtzVVVGQldpeEZRVUZTTzBGQlEwUXNWVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEVkQlFYSkNMRVZCUVRCQ08wRkJReTlDTEcxQ1FVRlJMRU5CUVVNc1RVRkJUU3hMUVVGT0xFTkJRVmtzVTBGQldpeEZRVUZVTzBGQlEwUXNWVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEVkQlFYSkNMRVZCUVRCQ08wRkJReTlDTEcxQ1FVRlJMRU5CUVVNc1RVRkJUU3hMUVVGT0xFTkJRVmtzVVVGQldpeEZRVUZVTzBGQlEwUXNWVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEZGQlFYSkNMRVZCUVN0Q08wRkJRM0JETEcxQ1FVRlJMRTFCUVUwc1MwRkJUaXhEUVVGWkxFbEJRWEJDTzBGQlEwUXNWVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEZGQlFYSkNMRVZCUVN0Q08wRkJRM0JETEdWQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1RVRkJhRUlzUlVGQmQwSTdRVUZEZEVJc2FVSkJRVWtzVFVGQlRTeE5RVUZOTEV0QlFVNHNRMEZCV1N4RFFVRmFMRU5CUVZZN1FVRkRRU3hwUWtGQlNTeFBRVUZQTEUxQlFVMHNTMEZCVGl4RFFVRlpMRU5CUVZvc1EwRkJXRHRCUVVORUxGbEJTRVFzVFVGSFR6dEJRVU5NTEdsQ1FVRkpMRTFCUVUwc1MwRkJTeXhSUVVGTUxFVkJRVlk3UVVGRFFTeHBRa0ZCU1N4UFFVRlBMRTFCUVUwc1MwRkJha0k3UVVGRFJEdEJRVU5FTEcxQ1FVRlJMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeEhRVUZ3UWl4RlFVRjVRaXhKUVVGNlFpeERRVUZTTzBGQlEwUXNWVUZVVFN4TlFWTkJMRWxCUVVrc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEUxQlFYSkNMRVZCUVRaQ08wRkJRMnhETEcxQ1FVRlJMRk5CUVZJN1FVRkRSQ3hWUVVaTkxFMUJSVUU3UVVGRFRDeHBRa0ZCVFN4WlFVRlpMRFpDUVVFMlFpeExRVUZMTEZGQlFUbERMRU5CUVU0N1FVRkRSRHRCUVVORUxHTkJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFpeExRVUZ1UWl4SFFVRXlRaXhMUVVGTExHVkJRVXdzUTBGQmNVSXNTMEZCY2tJc1EwRkJNMEk3UVVGRFJEdEJRVU5HT3pzN05FTkJSWE5DTzBGQlEzSkNMRmRCUVVrc1VVRkJVU3hMUVVGTExGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1EwRkJXanRCUVVOQkxGZEJRVWtzVDBGQlR5eE5RVUZOTEVsQlFXcENPMEZCUTBFc1YwRkJTU3hEUVVGRExFMUJRVTBzU1VGQldDeEZRVUZwUWp0QlFVTm1MR1ZCUVUwc1NVRkJUaXhIUVVGaExFbEJRV0k3UVVGRFFTeGpRVUZMTEZWQlFVd3NRMEZCWjBJc1QwRkJhRUlzUTBGQmQwSXNSVUZCUXl4TlFVRk5MRXRCUVVzc1VVRkJXaXhGUVVGelFpeFpRVUZaTEVsQlFXeERMRVZCUVhoQ08wRkJRMFFzVVVGSVJDeE5RVWRQTzBGQlEwd3NZMEZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTzBGQlEwRXNZVUZCU1N4WFFVRlhMRTFCUVUwc1MwRkJja0k3UVVGRFFTeGhRVUZKTEZsQlFWa3NTMEZCU3l4UlFVRk1MRU5CUVdNc1VVRkJaQ3hGUVVGM1FpeFJRVUY0UWl4RlFVRm9RanRCUVVOQkxHRkJRVWtzVjBGQlNqdEJRVU5CTEdGQlFVa3NTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFbEJRWEpDTEVWQlFUSkNPMEZCUTNwQ0xIbENRVUZqTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhaUVVGWkxFTkJRV3BETEVOQlFXUTdRVUZEUkN4VlFVWkVMRTFCUlU4c1NVRkJTU3hMUVVGTExGRkJRVXdzU1VGQmFVSXNTVUZCY2tJc1JVRkJNa0k3UVVGRGFFTXNlVUpCUVdNc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEZsQlFWa3NRMEZCYWtNc1EwRkJaRHRCUVVORUxGVkJSazBzVFVGRlFUdEJRVU5NTEdsQ1FVRk5MRmxCUVZrc1owTkJRV2RETEV0QlFVc3NVVUZCYWtRc1EwRkJUanRCUVVORU8wRkJRMFFzWTBGQlN5eFJRVUZNTEVOQlFXTXNVVUZCWkN4RlFVRjNRaXhYUVVGNFFqdEJRVU5CTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TFFVRnVRaXhIUVVFeVFpeExRVUZMTEUxQlFVd3NSMEZEZGtJc1YwRkVkVUlzUjBGRFZDeExRVUZMTEdWQlFVd3NRMEZCY1VJc1UwRkJja0lzUTBGRWJFSTdRVUZGUkR0QlFVTkdPenM3SzBOQlJYbENPMEZCUTNoQ0xGZEJRVWtzVVVGQlVTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEZkQlFVa3NUMEZCVHl4TlFVRk5MRWxCUVdwQ08wRkJRMEVzVjBGQlNTeEpRVUZKTEUxQlFVMHNRMEZCVGl4SlFVRlhMRU5CUVc1Q08wRkJRMEVzVjBGQlNTeExRVUZMTEZsQlFVd3NRMEZCYTBJc1EwRkJiRUlzUTBGQlNpeEZRVUV3UWp0QlFVTjRRaXhsUVVGTkxFTkJRVTRzUjBGQlZTeEpRVUZKTEVOQlFXUTdRVUZEUVN4alFVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1JVRkJReXhOUVVGTkxFdEJRVXNzV1VGQlRDeERRVUZyUWl4RFFVRnNRaXhEUVVGUUxFVkJRWGhDTzBGQlEwUXNVVUZJUkN4TlFVZFBPMEZCUTB3c1kwRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFXaENPMEZCUTBRN1FVRkRSanM3T3poRFFVVjNRanRCUVVOMlFpeFhRVUZKTEZGQlFWRXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFWbzdRVUZEUVN4WFFVRkpMRTlCUVU4c1RVRkJUU3hKUVVGcVFqdEJRVU5CTEZkQlFVa3NTMEZCU3l4SlFVRk1MRWxCUVdFc1EwRkJReXhOUVVGTkxFbEJRWGhDTEVWQlFUaENPMEZCUXpWQ0xHVkJRVTBzU1VGQlRpeEhRVUZoTEVsQlFXSTdRVUZEUVN4alFVRkxMRlZCUVV3c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1JVRkJReXhOUVVGTkxFdEJRVXNzU1VGQldpeEZRVUY0UWp0QlFVTkVMRkZCU0VRc1RVRkhUenRCUVVOTUxHRkJRVWtzUTBGQlF5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNTMEZCU3l4RlFVRk1MRU5CUVZFc1NVRkJMMElzUTBGQlJDeEpRVUY1UXl4TFFVRkxMRWxCUVd4RUxFVkJRWGRFTzBGQlEzUkVMR1ZCUVVrc1VVRkJVU3hMUVVGTExFbEJRVXdzUjBGQldTeE5RVUZOTEV0QlFXeENMRWRCUVRCQ0xFdEJRVXNzVTBGQk0wTTdRVUZEUVN4blFrRkJTeXhSUVVGTUxFTkJRV01zUzBGQlN5eGxRVUZNTEVOQlFYRkNMRXRCUVVzc1JVRkJUQ3hEUVVGUkxFbEJRVGRDTEVOQlFXUXNSVUZCYTBRc1MwRkJiRVE3UVVGRFJEdEJRVU5FTEdOQlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FqdEJRVU5FTzBGQlEwWTdPenQ1UTBGRmJVSTdRVUZEYkVJc1YwRkJTU3hSUVVGUkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4RFFVRm9RaXhEUVVGYU8wRkJRMEVzVjBGQlNTeFBRVUZQTEUxQlFVMHNTVUZCYWtJN1FVRkRRU3hYUVVGSkxFTkJRVU1zVFVGQlRTeFZRVUZZTEVWQlFYVkNPMEZCUTNKQ0xHVkJRVTBzVlVGQlRpeEhRVUZ0UWl4SlFVRnVRanRCUVVOQkxHTkJRVXNzVlVGQlRDeERRVUZuUWl4UFFVRm9RaXhEUVVGM1FpeEZRVUZETEUxQlFVMHNTMEZCU3l4TlFVRmFMRVZCUVhoQ08wRkJRMFFzVVVGSVJDeE5RVWRQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRkZCUVZnc1JVRkJjVUk3UVVGRE1VSXNaVUZCVFN4UlFVRk9MRWRCUVdsQ0xFbEJRV3BDTzBGQlEwRXNZVUZCU1N4UlFVRlJMRXRCUVVzc2EwSkJRVXdzUTBGQmQwSXNTMEZCU3l4UlFVRk1MRVZCUVhoQ0xFVkJRWGxETEUxQlFVMHNTMEZCTDBNc1EwRkJXanRCUVVOQkxHTkJRVXNzVlVGQlRDeERRVUZuUWl4UFFVRm9RaXhEUVVGM1FpeEZRVUZETEUxQlFVMHNTMEZCU3l4SlFVRmFMRVZCUVd0Q0xFOUJRVThzUzBGQmVrSXNSVUZCZUVJN1FVRkRSQ3hSUVVwTkxFMUJTVUU3UVVGRFRDeGpRVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJhRUk3UVVGRFJEdEJRVU5HT3pzN01FTkJSVzlDTzBGQlEyNUNMR05CUVU4c1MwRkJTeXh2UWtGQlRDeEZRVUZRTzBGQlEwUTdPenM3TzBGQlIwZzdPenM3T3pzN096SkRRWEp2Um5GQ0xGYzdPelpDUVRKdlJtWXNVenRCUVVOS0xEaERRVUZaTEVsQlFWb3NSVUZCYTBJc1YwRkJiRUlzUlVGQkswSTdRVUZCUVRzN1FVRkROMElzVTBGQlNTeHpRMEZCWXl4SlFVRmtMSFZFUVVGakxFbEJRV1FzUTBGQlNqdEJRVU5CTEZWQlFVc3NTVUZCVEN4SFFVRlpMRWxCUVZvN1FVRkRRU3hWUVVGTExFbEJRVXdzUjBGQldTeEpRVUZhTzBGQlEwRXNVMEZCU1N4UlFVRlJMRkZCUVZvc1JVRkJjMEk3UVVGRGNFSXNXVUZCU3l4TlFVRk1MRWRCUVdNc1dVRkJXU3hOUVVFeFFqdEJRVU5FTEUxQlJrUXNUVUZGVHl4SlFVRkpMRkZCUVZFc1VVRkJXaXhGUVVGelFqdEJRVU16UWl4WlFVRkxMRTFCUVV3c1IwRkJZeXhaUVVGWkxFMUJRVEZDTzBGQlEwUXNUVUZHVFN4TlFVVkJMRWxCUVVrc1VVRkJVU3hUUVVGYUxFVkJRWFZDTzBGQlF6VkNMRmxCUVVzc1RVRkJUQ3hIUVVGakxGbEJRVmtzVDBGQk1VSTdRVUZEUkR0QlFVTkVMRlZCUVVzc1YwRkJUQ3hIUVVGdFFpeEpRVUZ1UWp0QlFVTkVPenM3T3pzN1FVRkZSRHM3T3p0cFEwRkpXVHRCUVVOV0xHTkJRVThzVVVGQlVTeExRVUZMTEVsQlFXSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3TzJkRFFVbFhPMEZCUTFRc1kwRkJUeXhQUVVGUExFdEJRVXNzU1VGQldpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3WjBOQlNWYzdRVUZEVkN4alFVRlBMRTlCUVU4c1MwRkJTeXhKUVVGYUxFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenNyUWtGSlZUdEJRVU5TTEdOQlFVOHNTMEZCU3l4SlFVRmFPMEZCUTBRN096czdPMEZCUjBnN096czdPenM3TmtKQlMwMHNhVUk3UVVGRFNpeHpSRUZCV1N4TlFVRmFMRVZCUVc5Q08wRkJRVUU3TzBGQlEyeENMRlZCUVVzc1MwRkJUQ3hIUVVGaExEaERRVUZqTEVsQlFXUXNRMEZCWWp0QlFVTkJMRlZCUVVzc1lVRkJUQ3hIUVVGeFFpdzRRMEZCWXl4SlFVRmtMRU5CUVhKQ08wRkJRMEVzVlVGQlN5eFZRVUZNTEVkQlFXdENMRGhEUVVGakxFbEJRV1FzUTBGQmJFSTdRVUZEUVN4VlFVRkxMRTFCUVV3c1IwRkJZeXhOUVVGa08wRkJRMEVzVlVGQlN5eEpRVUZNTEVkQlFWa3NVVUZCV2p0QlFVTkJMRlZCUVVzc1YwRkJUQ3hIUVVGdFFpeExRVUZ1UWp0QlFVTkVPenM3T3pzN1FVRkZSRHM3T3p0cFEwRkpXVHRCUVVOV0xHTkJRVThzU1VGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN08yZERRVWxYTzBGQlExUXNZMEZCVHl4UFFVRlBMRXRCUVVzc1NVRkJUQ3hMUVVGakxGTkJRV1FzUjBGQk1FSXNTMEZCU3l4UlFVRk1MRVZCUVRGQ0xFZEJRVFJETEV0QlFVc3NTVUZCZUVRc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPMmREUVVsWE8wRkJRMVFzWTBGQlR5eExRVUZMTEVsQlFVd3NTMEZCWXl4VFFVRmtMRWRCUVRKQ0xFMUJRVTBzUzBGQlN5eEpRVUZZTEVkQlFXdENMRWRCUVRkRExFZEJRVzlFTEU5QlFVOHNTMEZCU3l4SlFVRmFMRU5CUVRORU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN0swSkJTVlU3UVVGRFVpeGpRVUZQTEV0QlFVc3NTVUZCVEN4TFFVRmpMRk5CUVdRc1IwRkJNRUlzU1VGQk1VSXNSMEZCYVVNc1MwRkJTeXhKUVVFM1F6dEJRVU5FT3pzN096dEJRVWRJTEdGQlFWa3NVMEZCV2l4SFFVRjNRaXhUUVVGNFFqdEJRVU5CTEdGQlFWa3NUVUZCV2l4SFFVRnhRaXhwUWtGQmNrSXNRenM3T3pzN08wRkRhSGhHUVN4dFFrRkJhMElzZVVRN096czdPenRCUTBGc1FqdEJRVU5CTEhkRFFVRjFReXd3UWtGQk1FSTdRVUZEYWtVc2VVTkJRWGRETzBGQlEzaERPMEZCUTBFc1J6czdPenM3TzBGRFNrRXNiVUpCUVd0Q0xIbEVPenM3T3pzN1FVTkJiRUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRGhET3pzN096czdRVU5NUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeDVRa0ZCZDBJc2JVVkJRVzFGTzBGQlF6TkdMRVZCUVVNN1FVRkRSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVkJRVU1zWjBJN096czdPenRCUTJoQ1JEdEJRVU5CT3p0QlFVVkJMSGREUVVGMVF5eDFRMEZCWjBRc1JUczdPenM3TzJzd1FrTklka1k3UVVGRlFTeEpRVUZKTEdWQlFXZENMRU5CUTJ4Q0xFVkJRVWNzY1U1QlJHVXNRMEZGYkVJc1JVRkJSeXc0UTBGR1pTeERRVWRzUWl4RlFVRkhMRTFCU0dVc1EwRkpiRUlzUlVGQlJ5eE5RVXBsTEVOQlMyeENMRTlCUVZFc2QwVkJURlVzUTBGTmJFSXNWMEZCV1N4blFrRk9UU3hEUVVGd1FpeERRVk5CTzBGQlJVRXNTVUZCU1N4elFrRkJkVUlzTmt0QlFUTkNMRU5CUlVFc1IwRkJTU3hWUVVGWExFTkJRMklzUlVGQlJ5eHZRa0ZFVlN4RFFVVmlMRVZCUVVjc2NVSkJRWFZDTERCRFFVWmlMRU5CUVdZc1EwRkxRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVN4SlFVRkpMRGhDUVVFclFpeHhOa0pCUVc1RExFTkJRMEVzUjBGQlNTeDVRa0ZCTUVJc2QybENRVUU1UWl4RFFVVkJMRWRCUVVrc2VVSkJRVEJDTEVkQlFVa3NUMEZCU2l4RFFVRlhMRWxCUVUwc05FSkJRVTRzUTBGQmNVTXNSMEZCYUVRc1EwRkJPVUlzUTBGRFFTeEhRVUZKTEc5Q1FVRnhRaXhIUVVGSkxFOUJRVW9zUTBGQlZ5eEpRVUZOTERSQ1FVRk9MRU5CUVhGRExIVkNRVUZ5UXl4RFFVRXJSQ3hIUVVFeFJTeERRVUY2UWl4RFFVVkJMRFpDUVVFclFpeDNRa0ZCTUVJc1NVRkJla1FzUTBGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJTU3cwUWtGQk5rSXNRMEZCUXl4RFFVRkVMRU5CUVVjc1JVRkJTQ3hEUVVGTkxFTkJRVTRzUTBGQlVTeEZRVUZTTEVOQlFWY3NRMEZCV0N4RFFVRmhMRVZCUVdJc1EwRkJaMElzUTBGQmFFSXNRMEZCYTBJc1EwRkJiRUlzUTBGQmIwSXNRMEZCY0VJc1EwRkJjMElzUlVGQmRFSXNRMEZCZVVJc1EwRkJla0lzUTBGQk1rSXNSVUZCTTBJc1EwRkJPRUlzUlVGQk9VSXNRMEZCYVVNc1IwRkJha01zUTBGQmNVTXNSVUZCY2tNc1EwRkJkME1zUlVGQmVFTXNRMEZCTWtNc1IwRkJNME1zUTBGQkswTXNSVUZCTDBNc1EwRkJhMFFzUTBGQmJFUXNRMEZCYjBRc1JVRkJjRVFzUTBGQmRVUXNSVUZCZGtRc1EwRkJNRVFzUlVGQk1VUXNRMEZCTmtRc1JVRkJOMFFzUTBGQlowVXNSVUZCYUVVc1EwRkJiVVVzUTBGQmJrVXNRMEZCY1VVc1JVRkJja1VzUTBGQmQwVXNSVUZCZUVVc1EwRkJNa1VzUlVGQk0wVXNRMEZCT0VVc1EwRkJPVVVzUTBGQlowWXNSVUZCYUVZc1EwRkJiVVlzUTBGQmJrWXNRMEZCY1VZc1EwRkJja1lzUTBGQmRVWXNRMEZCZGtZc1EwRkJlVVlzUTBGQmVrWXNRMEZCTWtZc1JVRkJNMFlzUTBGQk9FWXNSMEZCT1VZc1EwRkJhMGNzUlVGQmJFY3NRMEZCY1Vjc1JVRkJja2NzUTBGQmQwY3NRMEZCZUVjc1EwRkJNRWNzUlVGQk1VY3NRMEZCTmtjc1EwRkJOMGNzUTBGQkswY3NSVUZCTDBjc1EwRkJhMGdzUTBGQmJFZ3NRMEZCYjBnc1JVRkJjRWdzUTBGQmRVZ3NSMEZCZGtnc1EwRkJNa2dzUjBGQk0wZ3NRMEZCSzBnc1JVRkJMMGdzUTBGQmEwa3NSVUZCYkVrc1EwRkJjVWtzUlVGQmNra3NRMEZCZDBrc1EwRkJlRWtzUTBGQk1Fa3NSMEZCTVVrc1EwRkJPRWtzUTBGQk9Va3NRMEZCWjBvc1EwRkJhRW9zUTBGQmEwb3NRMEZCYkVvc1EwRkJiMG9zUTBGQmNFb3NRMEZCYzBvc1JVRkJkRW9zUTBGQmVVb3NRMEZCZWtvc1EwRkJNa29zUTBGQk0wb3NRMEZCTmtvc1EwRkJOMG9zUTBGQkswb3NRMEZCTDBvc1EwRkJhVXNzUTBGQmFrc3NRMEZCYlVzc1JVRkJia3NzUTBGQmMwc3NSVUZCZEVzc1EwRkJlVXNzUlVGQmVrc3NRMEZCTkVzc1JVRkJOVXNzUTBGQkswc3NSVUZCTDBzc1EwRkJhMHdzUlVGQmJFd3NRMEZCY1V3c1JVRkJja3dzUTBGQmQwd3NRMEZCZUV3c1EwRkJNRXdzUTBGQk1Vd3NRMEZCTkV3c1JVRkJOVXdzUTBGQkswd3NSVUZCTDB3c1EwRkJhMDBzUlVGQmJFMHNRMEZCY1Uwc1JVRkJjazBzUTBGQmQwMHNSVUZCZUUwc1EwRkJNazBzUlVGQk0wMHNRMEZCT0Uwc1EwRkJPVTBzUTBGQlowNHNRMEZCYUU0c1EwRkJhMDRzUlVGQmJFNHNRMEZCY1U0c1EwRkJjazRzUTBGQmRVNHNSVUZCZGs0c1EwRkJNRTRzUTBGQk1VNHNRMEZCTkU0c1EwRkJOVTRzUTBGQk9FNHNRMEZCT1U0c1EwRkJaMDhzUTBGQmFFOHNRMEZCYTA4c1JVRkJiRThzUTBGQmNVOHNSVUZCY2s4c1EwRkJkMDhzUlVGQmVFOHNRMEZCTWs4c1EwRkJNMDhzUTBGQk5rOHNSVUZCTjA4c1EwRkJaMUFzUlVGQmFGQXNRMEZCYlZBc1EwRkJibEFzUTBGQmNWQXNRMEZCY2xBc1EwRkJkVkFzUlVGQmRsQXNRMEZCTUZBc1JVRkJNVkFzUTBGQk5sQXNSVUZCTjFBc1EwRkJaMUVzUlVGQmFGRXNRMEZCYlZFc1JVRkJibEVzUTBGQmMxRXNSVUZCZEZFc1EwRkJlVkVzUlVGQmVsRXNRMEZCTkZFc1JVRkJOVkVzUTBGQksxRXNSVUZCTDFFc1EwRkJhMUlzUjBGQmJGSXNRMEZCYzFJc1JVRkJkRklzUTBGQmVWSXNSVUZCZWxJc1EwRkJORklzUlVGQk5WSXNRMEZCSzFJc1JVRkJMMUlzUTBGQmExTXNSVUZCYkZNc1EwRkJjVk1zUjBGQmNsTXNRMEZCZVZNc1JVRkJlbE1zUTBGQk5GTXNSVUZCTlZNc1EwRkJLMU1zUlVGQkwxTXNRMEZCYTFRc1JVRkJiRlFzUTBGQmNWUXNSVUZCY2xRc1EwRkJkMVFzUlVGQmVGUXNRMEZCTWxRc1JVRkJNMVFzUTBGQk9GUXNSVUZCT1ZRc1EwRkJhVlVzUlVGQmFsVXNRMEZCYjFVc1EwRkJjRlVzUTBGQmMxVXNRMEZCZEZVc1EwRkJkMVVzUlVGQmVGVXNRMEZCTWxVc1JVRkJNMVVzUTBGQk9GVXNSVUZCT1ZVc1EwRkJhVllzUTBGQmFsWXNRMEZCYlZZc1JVRkJibFlzUTBGQmMxWXNRMEZCZEZZc1EwRkJkMVlzUTBGQmVGWXNRMEZCTUZZc1EwRkJNVllzUTBGQk5GWXNSVUZCTlZZc1EwRkJLMVlzUlVGQkwxWXNRMEZCYTFjc1EwRkJiRmNzUTBGQmIxY3NSVUZCY0Zjc1EwRkJkVmNzUlVGQmRsY3NRMEZCTUZjc1EwRkJNVmNzUTBGQk5GY3NRMEZCTlZjc1EwRkJPRmNzUTBGQk9WY3NRMEZCWjFnc1EwRkJhRmdzUTBGQmExZ3NRMEZCYkZnc1EwRkJiMWdzUTBGQmNGZ3NRMEZCYzFnc1JVRkJkRmdzUTBGQmVWZ3NRMEZCZWxnc1EwRkJNbGdzUTBGQk0xZ3NRMEZCTmxnc1EwRkJOMWdzUTBGQksxZ3NSVUZCTDFnc1EwRkJhMWtzUlVGQmJGa3NRMEZCY1Zrc1EwRkJjbGtzUTBGQmRWa3NRMEZCZGxrc1EwRkJlVmtzUTBGQmVsa3NRMEZCTWxrc1EwRkJNMWtzUTBGQk5sa3NSVUZCTjFrc1EwRkJaMW9zUTBGQmFGb3NRMEZCYTFvc1EwRkJiRm9zUTBGQmIxb3NRMEZCY0Zvc1EwRkJjMW9zUTBGQmRGb3NRMEZCZDFvc1EwRkJlRm9zUTBGQk1Gb3NRMEZCTVZvc1EwRkJORm9zUTBGQk5Wb3NRMEZCT0Zvc1EwRkJPVm9zUTBGQloyRXNSVUZCYUdFc1EwRkJiV0VzUTBGQmJtRXNRMEZCY1dFc1JVRkJjbUVzUTBGQmQyRXNRMEZCZUdFc1EwRkJNR0VzUjBGQk1XRXNRMEZCT0dFc1JVRkJPV0VzUTBGQmFXSXNSVUZCYW1Jc1EwRkJiMklzUTBGQmNHSXNRMEZCYzJJc1JVRkJkR0lzUTBGQmVXSXNSVUZCZW1Jc1EwRkJOR0lzUlVGQk5XSXNRMEZCSzJJc1EwRkJMMklzUTBGQmFXTXNRMEZCYW1Nc1EwRkJiV01zUTBGQmJtTXNRMEZCY1dNc1IwRkJjbU1zUTBGQmVXTXNSVUZCZW1Nc1EwRkJOR01zUlVGQk5XTXNRMEZCSzJNc1EwRkJMMk1zUTBGQmFXUXNSVUZCYW1Rc1EwRkJiMlFzUlVGQmNHUXNRMEZCZFdRc1JVRkJkbVFzUTBGQk1HUXNRMEZCTVdRc1EwRkJOR1FzUlVGQk5XUXNRMEZCSzJRc1JVRkJMMlFzUTBGQmEyVXNSVUZCYkdVc1EwRkJjV1VzUlVGQmNtVXNRMEZCZDJVc1IwRkJlR1VzUTBGQk5HVXNSVUZCTldVc1EwRkJLMlVzUlVGQkwyVXNRMEZCYTJZc1EwRkJiR1lzUTBGQmIyWXNSMEZCY0dZc1EwRkJkMllzUlVGQmVHWXNRMEZCTW1Zc1IwRkJNMllzUTBGQksyWXNRMEZCTDJZc1EwRkJhV2RDTEVOQlFXcG5RaXhEUVVGdFowSXNSVUZCYm1kQ0xFTkJRWE5uUWl4RlFVRjBaMElzUTBGQmVXZENMRU5CUVhwblFpeERRVUV5WjBJc1JVRkJNMmRDTEVOQlFUaG5RaXhGUVVFNVowSXNRMEZCYVdoQ0xFZEJRV3BvUWl4RFFVRnhhRUlzUjBGQmNtaENMRU5CUVhsb1FpeEhRVUY2YUVJc1EwRkJObWhDTEVkQlFUZG9RaXhEUVVGcGFVSXNSVUZCYW1sQ0xFTkJRVzlwUWl4SFFVRndhVUlzUTBGQmQybENMRWxCUVhocFFpeERRVUUyYVVJc1NVRkJOMmxDTEVOQlFXdHFRaXhKUVVGc2FrSXNRMEZCZFdwQ0xFZEJRWFpxUWl4RFFVRXlha0lzU1VGQk0ycENMRU5CUVdkclFpeEhRVUZvYTBJc1EwRkJiMnRDTEVOQlFYQnJRaXhEUVVGemEwSXNSVUZCZEd0Q0xFTkJRWGxyUWl4SFFVRjZhMElzUTBGQk5tdENMRVZCUVRkclFpeERRVUZuYkVJc1JVRkJhR3hDTEVOQlFXMXNRaXhGUVVGdWJFSXNRMEZCYzJ4Q0xFVkJRWFJzUWl4RFFVRjViRUlzUTBGQmVteENMRU5CUVRKc1FpeEZRVUV6YkVJc1EwRkJPR3hDTEVWQlFUbHNRaXhEUVVGcGJVSXNRMEZCYW0xQ0xFTkJRVzF0UWl4RlFVRnViVUlzUTBGQmMyMUNMRWRCUVhSdFFpeERRVUV3YlVJc1JVRkJNVzFDTEVOQlFUWnRRaXhGUVVFM2JVSXNRMEZCWjI1Q0xFTkJRV2h1UWl4RFFVRnJia0lzUlVGQmJHNUNMRU5CUVhGdVFpeEZRVUZ5YmtJc1EwRkJkMjVDTEVWQlFYaHVRaXhEUVVFeWJrSXNRMEZCTTI1Q0xFTkJRVFp1UWl4RlFVRTNia0lzUTBGQloyOUNMRWxCUVdodlFpeERRVUZ4YjBJc1JVRkJjbTlDTEVOQlFYZHZRaXhIUVVGNGIwSXNRMEZCTkc5Q0xFbEJRVFZ2UWl4RFFVRnBjRUlzUTBGQmFuQkNMRU5CUVcxd1FpeEpRVUZ1Y0VJc1EwRkJkM0JDTEVkQlFYaHdRaXhEUVVFMGNFSXNRMEZCTlhCQ0xFTkJRVGh3UWl4RlFVRTVjRUlzUTBGQmFYRkNMRU5CUVdweFFpeERRVUZ0Y1VJc1EwRkJibkZDTEVOQlFYRnhRaXhEUVVGeWNVSXNRMEZCZFhGQ0xFTkJRWFp4UWl4RFFVRjVjVUlzU1VGQmVuRkNMRU5CUVRoeFFpeEZRVUU1Y1VJc1EwRkJhWEpDTEVOQlFXcHlRaXhEUVVGdGNrSXNSVUZCYm5KQ0xFTkJRWE55UWl4RFFVRjBja0lzUTBGQmQzSkNMRU5CUVhoeVFpeERRVUV3Y2tJc1EwRkJNWEpDTEVOQlFUUnlRaXhEUVVFMWNrSXNRMEZCT0hKQ0xFTkJRVGx5UWl4RFFVRm5jMElzUTBGQmFITkNMRU5CUVd0elFpeERRVUZzYzBJc1EwRkJiM05DTEVOQlFYQnpRaXhEUVVGemMwSXNRMEZCZEhOQ0xFTkJRWGR6UWl4RlFVRjRjMElzUTBGQk1uTkNMRU5CUVROelFpeERRVUUyYzBJc1EwRkJOM05DTEVOQlFTdHpRaXhEUVVFdmMwSXNRMEZCYVhSQ0xFTkJRV3AwUWl4RFFVRnRkRUlzUTBGQmJuUkNMRU5CUVhGMFFpeEZRVUZ5ZEVJc1EwRkJkM1JDTEVOQlFYaDBRaXhEUVVFd2RFSXNRMEZCTVhSQ0xFTkJRVFIwUWl4RFFVRTFkRUlzUTBGQk9IUkNMRU5CUVRsMFFpeERRVUZuZFVJc1EwRkJhSFZDTEVOQlFXdDFRaXhEUVVGc2RVSXNRMEZCYjNWQ0xFTkJRWEIxUWl4RFFVRnpkVUlzUlVGQmRIVkNMRU5CUVhsMVFpeERRVUY2ZFVJc1EwRkJNblZDTEVOQlFUTjFRaXhEUVVFMmRVSXNRMEZCTjNWQ0xFTkJRU3QxUWl4RFFVRXZkVUlzUTBGQmFYWkNMRU5CUVdwMlFpeERRVUZ0ZGtJc1EwRkJiblpDTEVOQlFYRjJRaXhEUVVGeWRrSXNRMEZCZFhaQ0xFTkJRWFoyUWl4RFFVRjVka0lzUTBGQmVuWkNMRU5CUVRKMlFpeEhRVUV6ZGtJc1EwRkJLM1pDTEVOQlFTOTJRaXhEUVVGcGQwSXNSVUZCYW5kQ0xFTkJRVzkzUWl4RFFVRndkMElzUTBGQmMzZENMRVZCUVhSM1FpeERRVUY1ZDBJc1EwRkJlbmRDTEVOQlFUSjNRaXhGUVVFemQwSXNRMEZCT0hkQ0xFTkJRVGwzUWl4RFFVRm5lRUlzUlVGQmFIaENMRU5CUVcxNFFpeERRVUZ1ZUVJc1EwRkJjWGhDTEVWQlFYSjRRaXhEUVVGM2VFSXNRMEZCZUhoQ0xFTkJRVEI0UWl4RlFVRXhlRUlzUTBGQk5uaENMRU5CUVRkNFFpeERRVUVyZUVJc1JVRkJMM2hDTEVOQlFXdDVRaXhEUVVGc2VVSXNRMEZCYjNsQ0xFVkJRWEI1UWl4RFFVRjFlVUlzUTBGQmRubENMRU5CUVhsNVFpeEZRVUY2ZVVJc1EwRkJOSGxDTEVOQlFUVjVRaXhEUVVFNGVVSXNSVUZCT1hsQ0xFTkJRV2w2UWl4RFFVRnFla0lzUTBGQmJYcENMRU5CUVc1NlFpeERRVUZ4ZWtJc1NVRkJjbnBDTEVOQlFUQjZRaXhIUVVFeGVrSXNRMEZCT0hwQ0xFVkJRVGw2UWl4RFFVRnBNRUlzUlVGQmFqQkNMRU5CUVc4d1FpeEpRVUZ3TUVJc1EwRkJlVEJDTEVOQlFYb3dRaXhEUVVFeU1FSXNRMEZCTXpCQ0xFTkJRVFl3UWl4RlFVRTNNRUlzUTBGQlp6RkNMRU5CUVdneFFpeERRVUZyTVVJc1EwRkJiREZDTEVOQlFXOHhRaXhEUVVGd01VSXNRMEZCY3pGQ0xFTkJRWFF4UWl4RFFVRjNNVUlzUTBGQmVERkNMRU5CUVRBeFFpeERRVUV4TVVJc1EwRkJOREZDTEVOQlFUVXhRaXhEUVVFNE1VSXNRMEZCT1RGQ0xFTkJRV2N5UWl4RFFVRm9Na0lzUTBGQmF6SkNMRU5CUVd3eVFpeERRVUZ2TWtJc1EwRkJjREpDTEVOQlFYTXlRaXhEUVVGME1rSXNRMEZCZHpKQ0xFTkJRWGd5UWl4RFFVRXdNa0lzUTBGQk1USkNMRU5CUVRReVFpeERRVUUxTWtJc1EwRkJPREpDTEVOQlFUa3lRaXhEUVVGbk0wSXNRMEZCYUROQ0xFTkJRV3N6UWl4RFFVRnNNMElzUTBGQmJ6TkNMRU5CUVhBelFpeERRVUZ6TTBJc1EwRkJkRE5DTEVOQlFYY3pRaXhEUVVGNE0wSXNRMEZCTUROQ0xFTkJRVEV6UWl4RFFVRTBNMElzUTBGQk5UTkNMRU5CUVRnelFpeERRVUU1TTBJc1EwRkJaelJDTEVOQlFXZzBRaXhEUVVGck5FSXNRMEZCYkRSQ0xFTkJRVzgwUWl4RFFVRndORUlzUTBGQmN6UkNMRU5CUVhRMFFpeERRVUYzTkVJc1EwRkJlRFJDTEVOQlFUQTBRaXhEUVVFeE5FSXNRMEZCTkRSQ0xFTkJRVFUwUWl4RFFVRTRORUlzUTBGQk9UUkNMRU5CUVdjMVFpeERRVUZvTlVJc1EwRkJhelZDTEVOQlFXdzFRaXhEUVVGdk5VSXNRMEZCY0RWQ0xFTkJRWE0xUWl4RFFVRjBOVUlzUTBGQmR6VkNMRU5CUVhnMVFpeERRVUV3TlVJc1EwRkJNVFZDTEVOQlFUUTFRaXhEUVVFMU5VSXNRMEZCT0RWQ0xFTkJRVGsxUWl4RFFVRm5Oa0lzUTBGQmFEWkNMRU5CUVdzMlFpeERRVUZzTmtJc1EwRkJielpDTEVOQlFYQTJRaXhEUVVGek5rSXNRMEZCZERaQ0xFTkJRWGMyUWl4RFFVRjROa0lzUTBGQk1EWkNMRU5CUVRFMlFpeERRVUUwTmtJc1EwRkJOVFpDTEVOQlFUZzJRaXhEUVVFNU5rSXNRMEZCWnpkQ0xFTkJRV2czUWl4RFFVRnJOMElzUTBGQmJEZENMRU5CUVc4M1FpeERRVUZ3TjBJc1EwRkJjemRDTEVOQlFYUTNRaXhEUVVGM04wSXNRMEZCZURkQ0xFTkJRVEEzUWl4RFFVRXhOMElzUTBGQk5EZENMRU5CUVRVM1FpeERRVUU0TjBJc1JVRkJPVGRDTEVOQlFXazRRaXhEUVVGcU9FSXNRMEZCYlRoQ0xFTkJRVzQ0UWl4RFFVRnhPRUlzUTBGQmNqaENMRU5CUVhVNFFpeERRVUYyT0VJc1EwRkJlVGhDTEVOQlFYbzRRaXhEUVVFeU9FSXNSVUZCTXpoQ0xFTkJRVGc0UWl4SlFVRTVPRUlzUTBGQmJUbENMRXRCUVc0NVFpeERRVUY1T1VJc1JVRkJlamxDTEVOQlFUUTVRaXhKUVVFMU9VSXNRMEZCYVN0Q0xFVkJRV29yUWl4RFFVRnZLMElzUjBGQmNDdENMRU5CUVhjclFpeERRVUY0SzBJc1EwRkJNQ3RDTEVsQlFURXJRaXhEUVVFckswSXNTMEZCTHl0Q0xFTkJRWEV2UWl4SFFVRnlMMElzUTBGQmFrTXNRMEZEUVN4SFFVRkpMSFZDUVVGM1FpeERRVUZETEVkQlFVUXNRMEZCU3l4RFFVRk1MRU5CUVU4c1IwRkJVQ3hEUVVGWExFTkJRVmdzUTBGQllTeEhRVUZpTEVOQlFXbENMRU5CUVdwQ0xFTkJRVzFDTEVkQlFXNUNMRU5CUVhWQ0xFTkJRWFpDTEVOQlFYbENMRWxCUVhwQ0xFTkJRVGhDTEVOQlFUbENMRU5CUVdkRExFTkJRV2hETEVOQlFXdERMRU5CUVd4RExFTkJRVzlETEVOQlFYQkRMRU5CUVhORExFTkJRWFJETEVOQlFYZERMRVZCUVhoRExFTkJRVEpETEVOQlFUTkRMRU5CUVRaRExFTkJRVGRETEVOQlFTdERMRU5CUVM5RExFTkJRV2xFTEVkQlFXcEVMRU5CUVhGRUxFTkJRWEpFTEVOQlFYVkVMRWxCUVhaRUxFTkJRVFJFTEVOQlFUVkVMRU5CUVRoRUxFVkJRVGxFTEVOQlFXbEZMRVZCUVdwRkxFTkJRVzlGTEVWQlFYQkZMRU5CUVhWRkxFTkJRWFpGTEVOQlFYbEZMRVZCUVhwRkxFTkJRVFJGTEVOQlFUVkZMRU5CUVRoRkxFVkJRVGxGTEVOQlFXbEdMRVZCUVdwR0xFTkJRVzlHTEVWQlFYQkdMRU5CUVhWR0xFTkJRWFpHTEVOQlFYbEdMRU5CUVhwR0xFTkJRVEpHTEVOQlFUTkdMRU5CUVRaR0xFVkJRVGRHTEVOQlFXZEhMRVZCUVdoSExFTkJRVzFITEVOQlFXNUhMRU5CUVhGSExFTkJRWEpITEVOQlFYVkhMRVZCUVhaSExFTkJRVEJITEVOQlFURkhMRU5CUVRSSExFVkJRVFZITEVOQlFTdEhMRU5CUVM5SExFTkJRV2xJTEVWQlFXcElMRU5CUVc5SUxFVkJRWEJJTEVOQlFYVklMRVZCUVhaSUxFTkJRVEJJTEVOQlFURklMRU5CUVRSSUxFTkJRVFZJTEVOQlFUaElMRU5CUVRsSUxFTkJRV2RKTEVWQlFXaEpMRU5CUVcxSkxFVkJRVzVKTEVOQlFYTkpMRU5CUVhSSkxFTkJRWGRKTEVOQlFYaEpMRU5CUVRCSkxFZEJRVEZKTEVOQlFUaEpMRVZCUVRsSkxFTkJRV2xLTEVOQlFXcEtMRU5CUVcxS0xFTkJRVzVLTEVOQlFYRktMRU5CUVhKS0xFTkJRWFZLTEVOQlFYWktMRU5CUVhsS0xFVkJRWHBLTEVOQlFUUktMRU5CUVRWS0xFTkJRVGhLTEVOQlFUbEtMRU5CUVdkTExFTkJRV2hMTEVOQlFXdExMRU5CUVd4TExFTkJRVzlMTEVOQlFYQkxMRU5CUVhOTExFTkJRWFJMTEVOQlFYZExMRU5CUVhoTExFTkJRVEJMTEVWQlFURkxMRU5CUVRaTExFTkJRVGRMTEVOQlFTdExMRVZCUVM5TExFTkJRV3RNTEVOQlFXeE1MRU5CUVc5TUxFTkJRWEJNTEVOQlFYTk1MRU5CUVhSTUxFTkJRWGRNTEVOQlFYaE1MRU5CUVRCTUxFTkJRVEZNTEVOQlFUUk1MRWRCUVRWTUxFTkJRV2ROTEVWQlFXaE5MRU5CUVcxTkxFVkJRVzVOTEVOQlFYTk5MRU5CUVhSTkxFTkJRWGROTEVWQlFYaE5MRU5CUVRKTkxFVkJRVE5OTEVOQlFUaE5MRVZCUVRsTkxFTkJRV2xPTEVOQlFXcE9MRU5CUVcxT0xFZEJRVzVPTEVOQlFYVk9MRU5CUVhaT0xFTkJRWGxPTEVOQlFYcE9MRU5CUVRKT0xFTkJRVE5PTEVOQlFUWk9MRVZCUVRkT0xFTkJRV2RQTEVOQlFXaFBMRU5CUVd0UExFVkJRV3hQTEVOQlFYRlBMRVZCUVhKUExFTkJRWGRQTEVWQlFYaFBMRU5CUVRKUExFTkJRVE5QTEVOQlFUWlBMRVZCUVRkUExFTkJRV2RRTEVWQlFXaFFMRU5CUVcxUUxFTkJRVzVRTEVOQlFYRlFMRU5CUVhKUUxFTkJRWFZRTEVWQlFYWlFMRU5CUVRCUUxFVkJRVEZRTEVOQlFUWlFMRU5CUVRkUUxFTkJRU3RRTEVOQlFTOVFMRU5CUVdsUkxFZEJRV3BSTEVOQlFYRlJMRU5CUVhKUkxFTkJRWFZSTEVkQlFYWlJMRU5CUVRKUkxFTkJRVE5STEVOQlFUWlJMRU5CUVRkUkxFTkJRU3RSTEVOQlFTOVJMRU5CUVdsU0xFVkJRV3BTTEVOQlFXOVNMRU5CUVhCU0xFTkJRWE5TTEVWQlFYUlNMRU5CUVhsU0xFVkJRWHBTTEVOQlFUUlNMRU5CUVRWU0xFTkJRVGhTTEVWQlFUbFNMRU5CUVdsVExFdEJRV3BUTEVOQlFYVlRMRU5CUVhaVExFTkJRWGxUTEVkQlFYcFRMRU5CUVRaVExFTkJRVGRUTEVOQlFTdFRMRVZCUVM5VExFTkJRV3RVTEVOQlFXeFVMRU5CUVc5VUxFVkJRWEJVTEVOQlFYVlVMRU5CUVhaVUxFTkJRWGxVTEVsQlFYcFVMRU5CUVRoVUxFVkJRVGxVTEVOQlFXbFZMRVZCUVdwVkxFTkJRVzlWTEVOQlFYQlZMRU5CUVhOVkxFdEJRWFJWTEVOQlFUUlZMRU5CUVRWVkxFTkJRVGhWTEVsQlFUbFZMRU5CUVcxV0xFTkJRVzVXTEVOQlFYRldMRU5CUVhKV0xFTkJRWFZXTEVOQlFYWldMRU5CUVhsV0xFTkJRWHBXTEVOQlFUSldMRU5CUVROV0xFTkJRVFpXTEVOQlFUZFdMRU5CUVN0V0xFTkJRUzlXTEVOQlFXbFhMRVZCUVdwWExFTkJRVzlYTEVOQlFYQlhMRU5CUVhOWExFZEJRWFJYTEVOQlFUQlhMRU5CUVRGWExFTkJRVFJYTEVsQlFUVlhMRU5CUVdsWUxFVkJRV3BZTEVOQlFXOVlMRWRCUVhCWUxFTkJRWGRZTEVWQlFYaFlMRU5CUVRKWUxFTkJRVE5ZTEVOQlFUWllMRVZCUVRkWUxFTkJRV2RaTEVOQlFXaFpMRU5CUVd0WkxFTkJRV3haTEVOQlFXOVpMRVZCUVhCWkxFTkJRWFZaTEVOQlFYWlpMRU5CUVhsWkxFVkJRWHBaTEVOQlFUUlpMRU5CUVRWWkxFTkJRVGhaTEVOQlFUbFpMRU5CUVdkYUxFVkJRV2hhTEVOQlFXMWFMRWxCUVc1YUxFTkJRWGRhTEVOQlFYaGFMRU5CUVRCYUxFTkJRVEZhTEVOQlFUUmFMRVZCUVRWYUxFTkJRU3RhTEVOQlFTOWFMRU5CUVdsaExFTkJRV3BoTEVOQlFXMWhMRU5CUVc1aExFTkJRWEZoTEVOQlFYSmhMRU5CUVhWaExFTkJRWFpoTEVOQlFYbGhMRU5CUVhwaExFTkJRVEpoTEVsQlFUTmhMRU5CUVdkaUxFTkJRV2hpTEVOQlFXdGlMRWRCUVd4aUxFTkJRWE5pTEVOQlFYUmlMRU5CUVhkaUxFTkJRWGhpTEVOQlFUQmlMRU5CUVRGaUxFTkJRVFJpTEUxQlFUVmlMRU5CUVcxakxFZEJRVzVqTEVOQlFUVkNMRU5CUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV5eGpRVUZVTEVOQlFYVkNMRWxCUVhaQ0xFTkJRVFpDTEVkQlFUZENMRU5CUVd0RExFTkJRMmhETEVkQlFVa3NTMEZCVFN4UFFVRldMRU5CUTBFc1NVRkJTeXhIUVVGSkxFZEJRVWtzUTBGQllpeERRVUZuUWl4RlFVRkpMRWxCUVVrc1RVRkJlRUlzUTBGQlowTXNSMEZCU3l4RFFVRnlReXhEUVVGM1F5eERRVU4wUXl4TFFVRlBMRWxCUVVrc1EwRkJTaXhEUVVGUUxFTkJRMEVzUjBGQlNTeEpRVUZOTEVsQlFWWXNRMEZCWjBJc1RVRkJUeXhOUVVGUUxFTkJRMmhDTEV0QlFVOHNTVUZCU1N4RlFVRkpMRU5CUVZJc1EwRkJVQ3hEUVVOQkxFZEJRVWtzUzBGQlR5eEpRVUZZTEVOQlFXbENMRTFCUVU4c1MwRkJVQ3hEUVVOc1FpeERRVU5HTEVOQlJVUTdRVUZGUVN4VFFVRlRMR3RDUVVGVUxFTkJRVEpDTEVsQlFUTkNMRU5CUVdsRExFMUJRV3BETEVOQlFYbERMRU5CUTNaRExFZEJRVWtzUzBGQlR5eEZRVUZZTEVOQlFXVXNUVUZCVHl4UlFVRlRMRVZCUVdoQ0xFTkJRMllzUjBGQlNTeExRVUZQTEVWQlFWZ3NRMEZCWlN4TlFVRlBMRXRCUVZBc1EwRkRaaXhIUVVGSkxFdEJRVThzUlVGQldDeERRVUZsTEUxQlFVOHNVVUZCVXl4RlFVRm9RaXhEUVVObUxFZEJRVWtzUzBGQlR5eEhRVUZZTEVOQlFXZENMRTFCUVU4c1MwRkJVQ3hEUVVOb1FpeEhRVUZKTEUxQlFWRXNUVUZCV2l4RFFVRnZRaXhOUVVGUExFOUJRVkVzU1VGQlVpeEZRVUZuUWl4M1FrRkJkMElzU1VGQmVFSXNRMEZCTmtJc1QwRkJUeXhaUVVGUUxFTkJRVzlDTEVsQlFYQkNMRU5CUVRkQ0xFTkJRWFpDTEVOQlEzQkNMRWRCUVVrc1UwRkJWeXhMUVVGbUxFTkJRWE5DTEUxQlFVOHNUVUZCVUN4RFFVTjBRaXhOUVVGUExHVkJRV01zU1VGQlpDeERRVUZ2UWl3d1FrRkJjRUlzUTBGQlVDeERRVU5FTEVOQlJVUTdRVUZGUVN4VFFVRlRMR2xDUVVGVUxFTkJRVEJDTEVsQlFURkNMRU5CUVdkRExFMUJRV2hETEVOQlFYZERMRU5CUTNSRExFZEJRVWtzUzBGQlR5eEZRVUZZTEVOQlFXVXNUVUZCVHl4UlFVRlRMRVZCUVdoQ0xFTkJRMllzUjBGQlNTeExRVUZQTEVWQlFWZ3NRMEZCWlN4TlFVRlBMRXRCUVZBc1EwRkRaaXhIUVVGSkxFdEJRVThzUlVGQldDeERRVUZsTEUxQlFVOHNUVUZCVUN4RFFVTm1MRWRCUVVrc1MwRkJUeXhGUVVGWUxFTkJRV1VzVFVGQlR5eExRVUZRTEVOQlEyWXNSMEZCU1N4TFFVRlBMRVZCUVZnc1EwRkJaU3hOUVVGUExGRkJRVk1zUlVGQmFFSXNRMEZEWml4SFFVRkpMRXRCUVU4c1IwRkJXQ3hEUVVGblFpeE5RVUZQTEV0QlFWQXNRMEZEYUVJc1IwRkJTU3hOUVVGUkxFMUJRVm9zUTBGQmIwSXNUVUZCVHl4UFFVRlJMRWxCUVZJc1JVRkJaMElzYlVKQlFXMUNMRWxCUVc1Q0xFTkJRWGRDTEU5QlFVOHNXVUZCVUN4RFFVRnZRaXhKUVVGd1FpeERRVUY0UWl4RFFVRjJRaXhEUVVOd1FpeEhRVUZKTEZOQlFWY3NTMEZCWml4RFFVRnpRaXhOUVVGUExFMUJRVkFzUTBGRGRFSXNUVUZCVHl4bFFVRmpMRWxCUVdRc1EwRkJiMElzTUVKQlFYQkNMRWRCUVcxRUxHTkJRV01zU1VGQlpDeERRVUZ2UWl4eFFrRkJjRUlzUTBGQk1VUXNRMEZEUkN4RFFVVkVPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1NVRkJTU3hYUVVGWkxGRkJRVk1zVlVGQlZDeERRVUZ0UWl4TFFVRnVRaXhEUVVFd1FpeEpRVUV4UWl4RFFVRm5ReXhEUVVNNVF5eEhRVUZMTEU5QlFWTXNTVUZCU3l4RlFVRnVRaXhEUVVGMVFpeExRVUZQTEVWQlFWQXNRMEZGZGtJc1MwRkJTeXhMUVVGTUxFTkJRV0VzUzBGQllpeERRVU5CTEV0QlFVc3NUMEZCVEN4RFFVRmxMRXRCUVVzc1QwRkJjRUlzUTBGRFFTeExRVUZMTEZWQlFVd3NRMEZCYTBJc1EwRkJReXhEUVVGRExFdEJRVXNzVlVGQmVrSXNRMEZEUVN4TFFVRkxMRlZCUVV3c1EwRkJhMElzUTBGQlF5eERRVUZETEV0QlFVc3NWVUZCZWtJc1EwRkRRU3hMUVVGTExFMUJRVXdzUTBGQll5eERRVUZETEVOQlFVTXNTMEZCU3l4TlFVRnlRaXhEUVVOQkxFdEJRVXNzVVVGQlRDeERRVUZuUWl4RFFVRkRMRU5CUVVNc1MwRkJTeXhSUVVGMlFpeERRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRmpMRU5CUVVNc1EwRkJReXhMUVVGTExFMUJRWEpDTEVOQlEwRXNTMEZCU3l4UFFVRk1MRU5CUVdVc1EwRkJReXhEUVVGRExFdEJRVXNzVDBGQmRFSXNRMEZEUVN4TFFVRkxMRXRCUVV3c1EwRkJZU3hMUVVGTExFdEJRVXdzUlVGQll5eEpRVUV6UWl4RFFVTkJMRXRCUVVzc1lVRkJUQ3hEUVVGeFFpeEpRVUZ5UWl4RFFVTkVMRU5CWWtRc1EwRmxRU3hSUVVGVExFMUJRVlFzUTBGQlpTeEpRVUZtTEVOQlFYRkNMRWxCUVhKQ0xFTkJRVEpDTEVOQlEzcENMRTFCUVU4c1NVRkJTU3hWUVVGS0xFTkJRV01zU1VGQlpDeERRVUZ2UWl4RFFVRkRMRmRCUVZrc1NVRkJZaXhEUVVGdFFpeE5RVUZQTEVsQlFURkNMRU5CUVhCQ0xFTkJRVkFzUTBGRFJDeERRVU5FTEVkQlFVa3NXVUZCWVN4RFFVRkRMRmRCUVZrc1NVRkJZaXhEUVVGcVFpeERRVU5CTEVkQlFVa3NXVUZCWVN4RFFVRkRMRmRCUVZrc1NVRkJZaXhEUVVGcVFpeERRVU5CTzBGQlJVRXNTVUZCU1N4alFVRmxMRVZCUVc1Q0xFTkJSVUU3UVVGRFFTeFRRVUZUTEVkQlFWUXNRMEZCV1N4SlFVRmFMRU5CUVd0Q0xFOUJRV3hDTEVOQlFUSkNMRU5CUTNwQ0xFZEJRVXNzVlVGQldTeEpRVUZMTEVWQlFYUkNMRU5CUVRCQ0xGRkJRVlVzUlVGQlZpeERRVVV4UWl4UlFVRlJMRTlCUVZJc1EwRkJhMElzU1VGQmJFSXNRMEZEUVN4TlFVRlBMR05CUVdFc1NVRkJZaXhGUVVGeFFpeEhRVUZKTEZWQlFVb3NRMEZCWXl4SlFVRmtMRU5CUVc5Q0xFOUJRWEJDTEVOQlFUVkNMRU5CUTBRc1EwRkZSQ3hIUVVGSkxFbEJRVXNzUTBGRFVDeEpRVUZMTEVkQlFVa3NWVUZCU2l4RFFVRmpMRXRCUVdRc1EwRkJjVUlzVlVGQmNrSXNRMEZFUlN4RFFVVlFMRTlCUVZFc1IwRkJTU3hWUVVGS0xFTkJRV01zVVVGQlpDeERRVUYzUWl4VlFVRjRRaXhEUVVaRUxFTkJSMUFzVDBGQlVTeEhRVUZKTEZWQlFVb3NRMEZCWXl4UlFVRmtMRU5CUVhkQ0xGVkJRWGhDTEVOQlNFUXNRMEZKVUN4TFFVRk5MRWRCUVVrc1ZVRkJTaXhEUVVGakxFMUJRV1FzUTBGQmMwSXNWVUZCZEVJc1EwRktReXhEUVV0UUxFbEJRVXNzUjBGQlNTeFZRVUZLTEVOQlFXTXNTMEZCWkN4RFFVeEZMRU5CVDFBN1FVRkRRU3hWUVVGVkxFZEJRVWtzVlVGQlNpeERRVUZqTEVkQlFXUXNRMEZCYlVJc1EwRkJReXhYUVVGWkxFbEJRV0lzUTBGQmJVSXNWMEZCV1N4SlFVRXZRaXhEUVVGdVFpeERRVkpJTEVOQlUxQXNVMEZCVlN4SFFVRkpMRlZCUVVvc1EwRkJZeXhIUVVGa0xFTkJWRWdzUTBGVlVDeFBRVUZSTEVkQlFVa3NWVUZCU2l4RFFVRmpMRWRCUVdRc1EwRkJiVUlzUTBGQlF5eFhRVUZaTEVsQlFXSXNRMEZCYlVJc1YwRkJXU3hKUVVFdlFpeERRVUZ1UWl4RFFWWkVMRU5CVjFBc1QwRkJVU3hIUVVGSkxGVkJRVW9zUTBGQll5eEhRVUZrTEVOQldFUXNRMEZaVUN4UFFVRlJMRWRCUVVrc1ZVRkJTaXhEUVVGakxFZEJRV1FzUTBGQmJVSXNRMEZCUXl4WFFVRlpMRWxCUVdJc1EwRkJiVUlzVjBGQldTeEpRVUV2UWl4RFFVRnVRaXhEUVZwRUxFTkJZVkFzVDBGQlVTeEhRVUZKTEZWQlFVb3NRMEZCWXl4SFFVRmtMRU5CWWtRc1EwRmpVQ3hOUVVGUExFZEJRVWtzVlVGQlNpeERRVUZqTEVkQlFXUXNRMEZCYlVJc1ZVRkJia0lzUTBGa1FTeERRV1ZRTEV0QlFVMHNSMEZCU1N4VlFVRktMRU5CUVdNc1IwRkJaQ3hEUVVGdFFpeFZRVUZ1UWl4RFFXWkRMRU5CWjBKUUxFMUJRVThzUjBGQlNTeFZRVUZLTEVOQlFXTXNSMEZCWkN4RFFVRnRRaXhWUVVGdVFpeERRV2hDUVN4RFFXbENVQ3hKUVVGTExFZEJRVWtzVlVGQlNpeERRVUZqTEVkQlFXUXNRMEZxUWtVc1EwRnJRbEFzVTBGQlZTeEhRVUZKTEZWQlFVb3NRMEZCWXl4SFFVRmtMRU5CUVcxQ0xGVkJRVzVDTEVOQmJFSklMRU5CYlVKUUxFMUJRVThzUjBGQlNTeFZRVUZLTEVOQlFXTXNTVUZCWkN4RFFVRnZRaXhWUVVGd1FpeERRVzVDUVN4RFFXOUNVQ3hUUVVGVkxFZEJRVWtzVlVGQlNpeERRVUZqTEZWQlFXUXNRMEZ3UWtnc1EwRnhRbEFzVTBGQlZTeEhRVUZKTEZWQlFVb3NRMEZCWXl4TFFVRmtMRU5CUVhGQ0xGVkJRWEpDTEVOQmNrSklMRU5CYzBKUUxGVkJRVmNzUjBGQlNTeFZRVUZLTEVOQlFXTXNSMEZCWkN4RFFVRnRRaXhWUVVGdVFpeERRWFJDU2l4RFFYVkNVQ3hoUVVGakxFZEJRVWtzVlVGQlNpeERRVUZqTEVsQlFXUXNRMEZCYjBJc1EwRkJReXhYUVVGWkxFbEJRV0lzUTBGQmJVSXNWMEZCV1N4SlFVRXZRaXhEUVVGd1FpeERRWFpDVUN4RFFYbENVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTEVsQlFVa3NSMEZCU1N4VlFVRktMRU5CUVdNc1IwRkJaQ3hEUVVGdFFpeERRVUZETEZkQlFWa3NTVUZCWWl4RFFVRnRRaXhUUVVGVkxFbEJRVGRDTEVOQlFXNUNMRU5CZGtOSExFTkJkME5RTEU5QlFWRXNSMEZCU1N4VlFVRktMRU5CUVdNc1NVRkJaQ3hEUVVGdlFpeERRVUZETEZkQlFWa3NTVUZCWWl4RFFVRnRRaXhUUVVGVkxFbEJRVGRDTEVOQlFYQkNMRU5CZUVORUxFTkJlVU5RTEU5QlFWRXNSMEZCU1N4VlFVRktMRU5CUVdNc1QwRkJaQ3hEUVVGMVFpeERRVUZETEU5QlFWRXNTVUZCVkN4RFFVRmxMRkZCUVZNc1NVRkJlRUlzUTBGQk9FSXNWMEZCV1N4SlFVRXhReXhEUVVGMlFpeERRWHBEUkN4RFFUQkRVQ3hQUVVGUkxFZEJRVWtzVlVGQlNpeERRVUZqTEZGQlFXUXNRMEZCZDBJc1EwRkJReXhYUVVGWkxFbEJRV0lzUTBGQmJVSXNUMEZCVVN4SlFVRXpRaXhEUVVGcFF5eFhRVUZaTEVsQlFUZERMRU5CUVhoQ0xFTkJNVU5FTEVOQk1rTlFMRlZCUVZjc1RVRkJUU3hKUVVGT0xFTkJRVmtzUTBGQldpeERRVE5EU2l4RFFUUkRVQ3hYUVVGWkxFMUJRVTBzU1VGQlRpeERRVUZaTEVOQlFWb3NRMEUxUTB3c1EwRTJRMUFzVlVGQlZ5eE5RVUZOTEVkQlFVNHNRMEZCVnl4RFFVRllMRU5CTjBOS0xFTkJPRU5RTEZkQlFWa3NUVUZCVFN4SFFVRk9MRU5CUVZjc1EwRkJXQ3hEUVRsRFRDeERRU3REVUN4WFFVRlpMRTFCUVUwc1IwRkJUaXhEUVVGWExFTkJRVmdzUTBFdlEwd3NRMEZuUkZBc1UwRkJWU3hOUVVGTkxFOUJRVTRzUTBGQlpTeERRVUZtTEVOQmFFUklMRU5CYVVSUUxGZEJRVmtzVFVGQlRTeExRVUZPTEVOQlFXRXNRMEZCWWl4RFFXcEVUQ3hEUVd0RVVDeFRRVUZWTEUxQlFVMHNUMEZCVGl4RFFVRmxMRU5CUVdZc1EwRnNSRWdzUTBGdFJGQXNVVUZCVXl4SFFVRkpMRlZCUVVvc1EwRkJZeXhMUVVGa0xFTkJRWEZDTEVOQlFVTXNWMEZCV1N4SlFVRmlMRU5CUVcxQ0xFMUJRVThzUTBGQk1VSXNRMEZCTmtJc1QwRkJVU3hKUVVGeVF5eERRVUV5UXl4WFFVRlpMRWxCUVhaRUxFTkJRWEpDTEVOQmJrUkdMRU5CYjBSUUxFOUJRVkVzVFVGQlRTeEhRVUZPTEVOQlFWY3NSVUZCV0N4RFFYQkVSQ3hEUVhGRVVDeExRVUZOTEUxQlFVMHNSMEZCVGl4RFFVRlhMRVZCUVZnc1EwRnlSRU1zUTBGelJGQXNUVUZCVHl4TlFVRk5MRWRCUVU0c1EwRkJWeXhGUVVGWUxFTkJkRVJCTEVOQmRVUlFMRk5CUVZVc1IwRkJTU3hWUVVGS0xFTkJRV01zU1VGQlpDeERRVUZ2UWl4RFFVRkRMRmRCUVZrc1NVRkJZaXhEUVVGd1FpeERRWFpFU0N4RFFYbEVVRHRCUVVOQkxGRkJRVkVzUjBGQlJ5eFBRVUZJTEVOQk1VUkVMRU5CTWtSUUxFMUJRVThzUjBGQlJ5eE5RVUZJTEVOQlFWY3NWVUZCV0N4RFFUTkVRU3hEUVRSRVVDeFBRVUZSTEVkQlFVY3NUMEZCU0N4RFFUVkVSQ3hEUVRaRVVDeFZRVUZYTEVkQlFVY3NWVUZCU0N4RFFUZEVTaXhEUVRoRVVDeFZRVUZYTEVkQlFVY3NWVUZCU0N4RFFUbEVTaXhEUVN0RVVDeFRRVUZWTEVkQlFVY3NVMEZCU0N4RFFVRmpMRlZCUVdRc1EwRXZSRWdzUTBGblJWQXNTVUZCU3l4SFFVRkhMRWxCUVVnc1EwRkJVeXhEUVVGRExFOUJRVkVzU1VGQlZDeERRVUZsTEZkQlFWa3NTVUZCTTBJc1EwRkJWQ3hEUVdoRlJTeERRV2xGVUN4TlFVRlBMRWRCUVVjc1RVRkJTQ3hEUVVGWExGVkJRVmdzUTBGcVJVRXNRMEZyUlZBc1UwRkJWU3hIUVVGSExGTkJRVWdzUTBGc1JVZ3NRMEZ0UlZBc1MwRkJUU3hIUVVGSExFdEJRVWdzUTBGQlZTeERRVUZETEU5QlFWRXNTVUZCVkN4RFFVRldMRU5CYmtWRExFTkJiMFZRTEZWQlFWY3NSMEZCUnl4VlFVRklMRU5CUVdVc1ZVRkJaaXhEUVhCRlNpeERRWEZGVUN4SlFVRkxMRWRCUVVjc1NVRkJTQ3hEUVhKRlJTeERRWE5GVUN4UlFVRlRMRWRCUVVjc1VVRkJTQ3hEUVVGaExGVkJRV0lzUTBGMFJVWXNRMEYxUlZBc1VVRkJVeXhIUVVGSExGRkJRVWdzUTBGMlJVWXNRMEYzUlZBc1QwRkJVU3hIUVVGSExFOUJRVWdzUTBGQldTeFZRVUZhTEVOQmVFVkVMRU5CZVVWUUxFdEJRVTBzUjBGQlJ5eExRVUZJTEVOQmVrVkRMRU5CTUVWUUxFdEJRVTBzUjBGQlJ5eExRVUZJTEVOQk1VVkRMRU5CTWtWUUxFOUJRVkVzUjBGQlJ5eFBRVUZJTEVOQk0wVkVMRU5CTkVWUUxFOUJRVkVzUjBGQlJ5eFBRVUZJTEVOQlFWa3NRMEZCUXl4UFFVRlJMRWxCUVZRc1EwRkJXaXhEUVRWRlJDeERRVFpGVUN4TlFVRlBMRWRCUVVjc1RVRkJTQ3hEUVRkRlFTeERRVGhGVUN4TFFVRk5MRWRCUVVjc1MwRkJTQ3hEUVVGVkxFTkJRVU1zVjBGQldTeEpRVUZpTEVOQlFXMUNMRmRCUVZrc1NVRkJMMElzUTBGQlZpeERRVGxGUXl4RFFTdEZVQ3hOUVVGUExFZEJRVWNzVFVGQlNDeERRVUZYTEZWQlFWZ3NRMEV2UlVFc1EwRm5SbEFzVDBGQlVTeEhRVUZITEU5QlFVZ3NRMEZCV1N4VlFVRmFMRU5CYUVaRUxFTkJhVVpRTEU5QlFWRXNSMEZCUnl4UFFVRklMRU5CYWtaRUxFTkJhMFpRTEZOQlFWVXNSMEZCUnl4VFFVRklMRU5CUVdNc1ZVRkJaQ3hEUVd4R1NDeERRVzFHVUN4UlFVRlRMRWRCUVVjc1VVRkJTQ3hEUVc1R1JpeERRVzlHVUN4UlFVRlRMRWRCUVVjc1VVRkJTQ3hEUVhCR1JpeERRWEZHVUN4TlFVRlBMRWRCUVVjc1RVRkJTQ3hEUVVGWExGVkJRVmdzUTBGeVJrRXNRMEZ6UmxBc1RVRkJUeXhIUVVGSExFMUJRVWdzUTBGQlZ5eFZRVUZZTEVOQmRFWkJMRU5CZFVaUUxFOUJRVkVzUjBGQlJ5eFBRVUZJTEVOQlFWa3NWVUZCV2l4RFFYWkdSQ3hEUVhkR1VDeEpRVUZMTEVkQlFVY3NTVUZCU0N4RFFVRlRMRU5CUVVNc1YwRkJXU3hKUVVGaUxFTkJRVzFDTEUxQlFVOHNRMEZCTVVJc1EwRkJWQ3hEUVhoR1JTeERRWGxHVUN4WlFVRmhMRWRCUVVjc1dVRkJTQ3hEUVVGcFFpeERRVUZETEZkQlFWa3NTVUZCWWl4RFFVRnRRaXhOUVVGUExFTkJRVEZDTEVOQlFXcENMRU5CZWtaT0xFTkJNRVpRTEZGQlFWTXNSMEZCUnl4UlFVRklMRU5CUVdFc1EwRkJReXhYUVVGWkxFbEJRV0lzUTBGQmJVSXNUMEZCVVN4SlFVRXpRaXhEUVVGcFF5eFhRVUZaTEVsQlFUZERMRU5CUVdJc1EwRXhSa1lzUTBFeVJsQXNUVUZCVHl4SFFVRkhMRTFCUVVnc1EwRkJWeXhEUVVGRExGZEJRVmtzU1VGQllpeERRVUZ0UWl4UFFVRlJMRWxCUVROQ0xFTkJRV2xETEZkQlFWa3NTVUZCTjBNc1EwRkJXQ3hEUVROR1FTeERRVFJHVUN4UlFVRlRMRWRCUVVjc1VVRkJTQ3hEUVVGaExFTkJRVU1zVjBGQldTeEpRVUZpTEVOQlFXMUNMRTlCUVZFc1NVRkJNMElzUTBGQmFVTXNWMEZCV1N4SlFVRTNReXhEUVVGaUxFTkJOVVpHTEVOQlFWUXNRMEVyUmtFN1FVRkRRVHRCUVVWQkxFbEJRVWtzVjBGQldTeDNRa0ZCYUVJc1EwRkRRU3hIUVVGSkxGbEJRV0VzUjBGQlNTeFBRVUZLTEVOQlFWY3NWVUZCVlN4TlFVRnlRaXhEUVVFMlFpeEhRVUUzUWl4RFFVRnFRaXhEUVVWQkxGRkJRVk1zVlVGQlZDeERRVUZ0UWl4SlFVRnVRaXhEUVVGNVFpeERRVU4yUWl4TlFVRlBMRkZCUVZNc1JVRkJWQ3hGUVVGbExFOUJRVk1zUlVGQmVFSXNSVUZCT0VJc1QwRkJVeXhOUVVGMlF5eEZRVUZwUkN4TlFVRlJMRTFCUVdoRkxFTkJRMFFzUTBGRlJDeEhRVUZKTEc5Q1FVRnhRaXh4UkVGQmVrSXNRMEZGUVN4SFFVRkpMR2RDUVVGcFFpd3JRa0ZCY2tJc1EwRkZRU3hSUVVGVExGRkJRVlFzUTBGQmFVSXNSMEZCYWtJc1EwRkJjMElzUTBGRGNFSXNUVUZCVHl4UlFVRlBMRk5CUVZBc1EwRkJhVUlzVVVGQmFrSXNRMEZCTUVJc1NVRkJNVUlzUTBGQkswSXNSMEZCTDBJc1NVRkJkME1zWjBKQlFTOURMRU5CUTBRc1EwRkZSRHRCUVVWQkxGTkJRVk1zU1VGQlZDeERRVUZoTEVkQlFXSXNRMEZCYTBJc1VVRkJiRUlzUTBGQk5FSXNRMEZETVVJc1RVRkJUeXhSUVVGUExGTkJRVkFzUTBGQmFVSXNZMEZCYWtJc1EwRkJaME1zU1VGQmFFTXNRMEZCY1VNc1IwRkJja01zUTBGQk1FTXNVVUZCTVVNc1EwRkJVQ3hEUVVORUxFTkJSVVE3UVVGRFFUdEJRVVZCTEVsQlFVa3NWVUZCVnl4UlFVRlRMRk5CUVZRc1EwRkJhMElzU1VGQmJFSXNRMEZCZDBJc1IwRkJlRUlzUTBGQk5rSXNRMEZETVVNc1MwRkJTeXhKUVVGTUxFTkJRVmtzU1VGQldpeERRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRmpMRWRCUVdRc1EwRkRSQ3hEUVVoRUxFTkJTMEVzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRTFCUVc1Q0xFTkJRVFJDTEZGQlFWTXNUMEZCVkN4RFFVRnBRaXhEUVVGcVFpeERRVUZ2UWl4RFFVTTVReXhOUVVGUExFbEJRVWtzVTBGQlNpeERRVUZoTEV0QlFVc3NTVUZCYkVJc1EwRkJkMElzUzBGQlN5eE5RVUZNTEVOQlFXTXNRMEZCZEVNc1EwRkJVQ3hEUVVORUxFTkJSa1FzUTBGSlFTeEhRVUZKTEdkQ1FVRnBRaXhSUVVGVExHVkJRVlFzUTBGQmQwSXNRMEZCZUVJc1EwRkJNa0lzUzBGQk0wSXNRMEZCYTBNc1IwRkJiRU1zUTBGQmRVTXNRMEZETVVRc1MwRkJTeXhMUVVGTUxFTkJRV0VzUzBGQllpeERRVU5CTEV0QlFVc3NSMEZCVEN4RFFVRlhMRWRCUVZnc1EwRkRRU3hIUVVGSkxFVkJRVVVzVlVGQlJpeEhRVUZwUWl4SlFVRnlRaXhEUVVFeVFpeExRVUZMTEUxQlFVd3NRMEZCWXl4RlFVRkZMRlZCUVdoQ0xFTkJRelZDTEVOQlNrUXNRMEZOUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUVzVTBGQlV5eFpRVUZVTEVOQlFYRkNMRXRCUVhKQ0xFTkJRVFJDTEUxQlFUVkNMRU5CUVc5RExFTkJRMnhETEVsQlFVc3NSMEZCU1N4TlFVRlBMRU5CUVZnc1EwRkJZeXhKUVVGTkxFTkJRWHBDTEVkQlFUaENMRU5CUXpWQ0xGZEJRVmNzVTBGQldDeERRVUYxUWl4SFFVRjJRaXhEUVVOQkxFZEJRVWtzVDBGQlVTeFhRVUZYTEVsQlFWZ3NRMEZCWjBJc1MwRkJhRUlzUTBGQldpeERRVU5CTEVkQlFVa3NUMEZCVXl4TlFVRk5MRXRCUVU0c1EwRkJZeXhOUVVFelFpeERRVUZ0UXl4RFFVTnFReXhGUVVGRkxFbEJRVVlzUTBGRFFTeEpRVUZOTEUxQlFVMHNTMEZCVGl4RFFVRmpMRTFCUVUwc1EwRkJUaXhGUVVGVExFMUJRVGRDTEVOQlEwUXNRMEZJUkN4SlFVZFBMRU5CUTB3c1RVRkJUeXhKUVVGSkxGTkJRVW9zUTBGQllTeEpRVUZpTEVOQlFXMUNMRTlCUVZNc1IwRkJOVUlzUTBGQlVDeERRVU5FTEVOQlEwWXNRMEZEUml4RFFVVkVPMEZCUTBFN1FVRkZRU3hKUVVGSkxHZENRVUZwUWl4RFFVTnVRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdGQlFXRXNRMEZNVFN4RFFVMXVRanRCUVVOQkxGbEJRVmtzVVVGUVR5eERRVkZ1UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzY1VKQlFYRkNMRWxCWWtZc1EwRmpia0k3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRaXhKUVdoQ1JTeERRV2xDYmtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGxRVUZsTEVsQmNrSkpMRU5CYzBKdVFqdEJRVU5CTzBGQlEwRXNORUpCUVRSQ0xFdEJlRUpVTEVOQmVVSnVRanRCUVVOQk8wRkJRMEVzTmtKQlFUWkNMRXRCTTBKV0xFTkJORUp1UWp0QlFVTkJPMEZCUTBFc1pVRkJaU3hMUVRsQ1NTeERRU3RDYmtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZYTEV0QmJrTlJMRU5CYjBOdVFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVeXhKUVhwRFZTeERRVEJEYmtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hYUVVGWExFbEJjRVJSTEVOQmNVUnVRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1VVRkJVU3hMUVRkRVZ5eERRVGhFYmtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTXNTVUZ1UlZVc1EwRnZSVzVDTzBGQlEwRTdRVUZEUVN4WlFVRlpMRWxCZEVWUExFTkJkVVZ1UWp0QlFVTkJPMEZCUTBFc2EwSkJRV3RDTEVsQmVrVkRMRU5CTUVWdVFqdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFdEJOVVZITEVOQk5rVnVRaXhSUVVGVExFVkJOMFZWTEVOQlFYSkNMRU5CWjBaQk8wRkJSVUVzVTBGQlV5eFhRVUZVTEVOQlFXOUNMRWxCUVhCQ0xFTkJRVEJDTEVOQlEzaENMRWRCUVVrc1UwRkJWU3hGUVVGa0xFTkJRMEVzU1VGQlN5eEhRVUZKTEVsQlFWUXNSMEZCWjBJc1pVRkJhRUlzTUVKQlEwVXNVVUZCVVN4SFFVRlNMRVZCUVdVc1RVRkJVU3hKUVVGSkxFbEJRVW9zUTBGQlZTeEhRVUZXTEVOQlFWSXNRMEZCZVVJc1MwRkJTeXhIUVVGTUxFTkJRWHBDTEVOQlFYRkRMR1ZCUVdVc1IwRkJaaXhEUVVGd1JDeERRVVJHTEVOQlJVRXNSMEZCU1N4UlFVRlJMR0ZCUVZJc1JVRkJlVUlzU1VGQk4wSXNRMEZEUlN4UlFVRlJMR0ZCUVZJc1EwRkJkMElzVVVGQlVTeFhRVUZTTEVOQlFYTkNMRU5CUVRsRExFTkJSVVlzUjBGQlNTeFJRVUZSTEZGQlFWRXNUMEZCYUVJc1EwRkJTaXhEUVVFNFFpeERRVU0xUWl4SFFVRkpMRkZCUVZNc1VVRkJVU3hQUVVGeVFpeERRVU5CTEZGQlFWRXNUMEZCVWl4RFFVRnJRaXhUUVVGVkxFdEJRVllzUTBGQmFVSXNRMEZCUlN4TlFVRlBMRkZCUVU4c1NVRkJVQ3hEUVVGWkxFdEJRVm9zUTBGQlVDeERRVUUwUWl4RFFVRnFSU3hEUVVORUxFTkJRMFFzUjBGQlNTeFJRVUZSTEZGQlFWRXNVMEZCYUVJc1EwRkJTaXhEUVVORkxGRkJRVkVzVTBGQlVpeERRVUZ2UWl4WlFVRlpMRTlCUVZvc1EwRkJjVUlzVVVGQlVTeFRRVUUzUWl4RFFVRndRaXhEUVVWR0xFMUJRVThzVVVGQlVDeERRVU5FTEVOQlJVUXNVVUZCVXl4WlFVRlVMRU5CUVhGQ0xFOUJRWEpDTEVOQlFUaENMRXRCUVRsQ0xFTkJRWEZETEVOQlEyNURMRTFCUVU4c1ZVRkJWU3hMUVVGV0xFTkJRV2xDTEVsQlFXcENMRU5CUVhWQ0xFdEJRWFpDTEVOQlFUaENMRWRCUVRsQ0xFTkJRVzFETEZGQlFXNURMRU5CUVRaRExFMUJRVGRETEVOQlFYRkVMRU5CUXpGRUxFZEJRVWtzVTBGQlZTeERRVU5hTEV0QlFVMHNUVUZCVVN4UFFVRlNMRU5CUVd0Q0xFMUJSRm9zUTBGRldpeE5RVUZQTEVsQlJrc3NRMEZIV2l4TlFVRlBMRXRCU0Vzc1EwRkpXaXhKUVVGTExFZEJTazhzUTBGQlpDeERRVTFCTEVkQlFVa3NVVUZCVVN4VFFVRmFMRU5CUTBVc1VVRkJVU3hIUVVGU0xFTkJRV01zUjBGQlNTeGxRVUZLTEVOQlFXMUNMRWxCUVc1Q0xFTkJRWGxDTEZGQlFYcENMRU5CUVcxRExFMUJRVzVETEVOQlFXUXNRMEZEUml4SFFVRkpMRkZCUVZFc1RVRkJXaXhEUVVORkxGRkJRVkVzUzBGQlVpeERRVUZuUWl4RFFVRkRMRXRCUVVRc1EwRkJVU3hIUVVGU0xFTkJRV2hDTEVOQlEwWXNUVUZCVFN4SlFVRk9MRU5CUVZjc1QwRkJXQ3hGUVVORUxFTkJXa1FzUTBGaFJDeERRVVZFTzBGQlEwRXNTVUZCU1N4VFFVRlZMRVZCUVdRc1EwRkZRU3hSUVVGVExHTkJRVlFzUTBGQmRVSXNTMEZCZGtJc1EwRkJPRUlzUTBGRE5VSXNUVUZCVHl4SlFVRkpMRTlCUVVvc1EwRkJWeXhMUVVGUExFMUJRVTBzVDBGQlRpeERRVUZqTEVsQlFXUXNRMEZCYjBJc1IwRkJjRUlzUTBGQlVDeERRVUZyUXl4SlFVRTNReXhEUVVGUUxFTkJRMFFzUTBGRlJDeEhRVUZKTEZGQlFWTXNVVUZCVXl4UFFVRlVMRU5CUVdkQ0xFOUJRV2hDTEVOQlFYbENMRXRCUVhwQ0xFTkJRV2RETEZGQlFXaERMRU5CUVRCRExFTkJRM0pFTEV0QlFVc3NUMEZCVEN4RFFVRmxMRkZCUVZVc1YwRkJWeXhQUVVGWUxFTkJRWHBDTEVOQlEwRXNTMEZCU3l4VlFVRk1MRU5CUVd0Q0xGRkJRVkVzVlVGQk1VSXNRMEZEUVN4TFFVRkxMRkZCUVV3c1EwRkJaMElzWTBGQll5eFRRVUZUTEZGQlFWRXNWMEZCVWl4RlFVRjFRaXhEUVVGMlFpeERRVUV5UWl4RFFVRXpRaXhEUVVFclFpeERRVUY0UXl4RFFVRmtMRU5CUVdoQ0xFTkJRMEVzUjBGQlNTeFZRVUZYTEZGQlFWRXNZVUZCVWl4RFFVRjNRaXhGUVVGNFFpeERRVU5ZTEdOQlFXTXNVVUZCVVN4WFFVRjBRaXhIUVVGelF5eFJRVUZSTEZWQlFWSXNSVUZCYzBJc1VVRkJkRUlzUTBGQmFVTXNVVUZCYWtNc1EwRkJORU1zUlVGQmJFWXNRMEZFU2l4RFFVVkJMRXRCUVVzc1lVRkJUQ3hEUVVGeFFpeGpRVUZqTEZGQlFXUXNRMEZCY2tJc1EwRkRRU3hIUVVGSkxHZENRVUZwUWl4RFFVRkRMRk5CUVZjc1UwRkJWeXhIUVVGMFFpeERRVUUwUWl4RlFVRTNRaXhGUVVGdFF5eGpRVUZqTEUxQlFYUkZMRU5CUTBFc1MwRkJTeXh0UWtGQlRDeERRVUV5UWl4alFVRmpMR05CUVdRc1EwRkJNMElzUTBGRFFTeExRVUZMTEhWQ1FVRk1MRU5CUVN0Q0xHTkJRV01zWlVGQmFVSXNSMEZCYWtJc1EwRkJkVUlzWTBGQll5eFZRVUZ1UkN4RFFVRXZRaXhEUVVOQkxFdEJRVXNzUzBGQlRDeERRVUZoTEU5QlFVOHNTMEZCVUN4RFFVRmlMRU5CUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlN5eFhRVUZNTEVOQlFXMUNMRXRCUVc1Q0xFTkJSVUU3UVVGRFFTeE5RVUZMTEZkQlFVd3NRMEZCYVVJc1VVRkJVU3hQUVVGNlFpeEZRVVZCTzBGQlJVRTdRVUZEUVN4SlFVRkpMRkZCUVVvc1EwRkJZeXhEUVVOYUxFdEJRVXNzUjBGQlRDeERRVUZYTEZGQlFWZ3NRMEZEUVN4TFFVRkxMRk5CUVV3c1EwRkJhVUlzUzBGQlN5eEhRVUZNTEVOQlFWTXNRMEZCVkN4RFFVRlpMRXRCUVVzc1MwRkJUQ3hEUVVGWExGZEJRVmdzUTBGQmRVSXNTVUZCZGtJc1EwRkJOa0lzVVVGQk4wSXNRMEZCV2l4RFFVRnFRaXhEUVVOQkxFdEJRVXNzVDBGQlRDeERRVUZsTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUTBGQmFrSXNRMEZCYjBJc1MwRkJTeXhUUVVGNlFpeEZRVUZ2UXl4TFFVRndReXhEUVVFd1F5eFRRVUV4UXl4RlFVRnhSQ3hOUVVGd1JTeERRVU5FTEVOQlNrUXNTVUZKVHl4RFFVTk1MRXRCUVVzc1IwRkJUQ3hEUVVGWExFdEJRVXNzVTBGQlRDeERRVUZwUWl4RFFVRTFRaXhEUVVOQkxFdEJRVXNzVDBGQlRDeERRVUZsTEVOQlFXWXNRMEZEUkN4RFFVVkVPMEZCUTBFN1FVRkRRU3hOUVVGTExFbEJRVXdzUTBGQldTeEhRVUZITEVkQlFXWXNRMEZEUVR0QlFVTkJMRTFCUVVzc1MwRkJUQ3hEUVVGaExFbEJRV0lzUTBGRFFUdEJRVU5CTEUxQlFVc3NTMEZCVEN4RFFVRmhMRXRCUVVzc1IwRkJUQ3hEUVVGWExFdEJRVXNzUjBGQk4wSXNRMEZEUVR0QlFVTkJPMEZCUTBFc1RVRkJTeXhSUVVGTUxFTkJRV2RDTEV0QlFVc3NUVUZCVEN4RFFVRmpMRXRCUVVzc1YwRkJUQ3hGUVVFNVFpeERRVVZCTzBGQlEwRXNUVUZCU3l4aFFVRk1MRU5CUVhGQ0xFdEJRVXNzWlVGQlRDeERRVUYxUWl4SlFVRTFReXhEUVVOQkxFdEJRVXNzV1VGQlRDeERRVUZ2UWl4TFFVRkxMRlZCUVV3c1EwRkJhMElzUzBGQlN5eEhRVUV6UXl4RFFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVXNzVDBGQlRDeERRVUZsTEV0QlFVc3NZMEZCVEN4RlFVRm1MRU5CUTBFc1MwRkJTeXhYUVVGTUxFTkJRVzFDTEVsQlFXNUNMRU5CUlVFN1FVRkRRU3hOUVVGTExFMUJRVXdzUTBGQll5eExRVUZMTEZGQlFVd3NRMEZCWjBJc1VVRkJVU3hWUVVGU0xFZEJRWFZDTEZGQlFYSkVMRU5CUlVFN1FVRkRRU3hOUVVGTExHZENRVUZNTEVOQlFYZENMRU5CUVVNc1EwRkJla0lzUTBGRlFUdEJRVU5CTEUxQlFVc3NWVUZCVEN4RFFVRnJRaXhMUVVGTExGZEJRVXdzUTBGQmJVSXNTMEZCY2tNc1EwRkRRVHRCUVVOQkxFMUJRVXNzVFVGQlRDeERRVUZqTEVWQlFXUXNRMEZGUVR0QlFVTkJMRWxCUVVrc1MwRkJTeXhIUVVGTUxFZEJRV0VzUTBGQllpeEZRVUZyUWl4UlFVRlJMR0ZCUVRGQ0xFVkJRVEpETEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUTBGQmFrSXNRMEZCYjBJc1EwRkJjRUlzU1VGQk1rSXNTVUZCTVVVc1EwRkRSU3hMUVVGTExHVkJRVXdzUTBGQmNVSXNRMEZCY2tJc1JVRkRTQ3hEUVc1RlJDeERRWEZGUVR0QlFVTkJMRkZCUVU4c1UwRkJVQ3hEUVVGcFFpeFRRVUZxUWl4RFFVRTJRaXhSUVVGVExGVkJRVlFzUTBGQmIwSXNTVUZCY0VJc1EwRkJNRUlzUTBGQlJTeE5RVUZQTEUxQlFVc3NVVUZCVEN4RFFVRmpMRWxCUVdRc1EwRkJiVUlzU1VGQmJrSXNRMEZCVUN4RFFVRnBReXhEUVVFeFJpeERRVU5CTEU5QlFVOHNVMEZCVUN4RFFVRnBRaXhqUVVGcVFpeERRVUZyUXl4UlFVRlRMR1ZCUVZRc1EwRkJlVUlzU1VGQmVrSXNRMEZCSzBJc1EwRkJSU3hOUVVGUExFMUJRVXNzWVVGQlRDeERRVUZ0UWl4SlFVRnVRaXhEUVVGM1FpeEpRVUY0UWl4RFFVRlFMRU5CUVhORExFTkJRWHBITEVOQlJVRXNUMEZCVHl4VFFVRlFMRU5CUVdsQ0xFMUJRV3BDTEVOQlFUQkNMRkZCUVZNc1QwRkJWQ3hEUVVGcFFpeEpRVUZxUWl4RFFVRjFRaXhEUVVGMlFpeERRVUV3UWl4RFFVTnNSQ3hMUVVGTExFbEJRVXdzUlVGQllTeEZRVUZGTEV0QlFVc3NTVUZCVEN4RFFVRkdMRU5CUVdJc1EwRkRSQ3hEUVVaRUxFTkJTVUVzVDBGQlR5eFRRVUZRTEVOQlFXbENMRmRCUVdwQ0xFTkJRU3RDTEZGQlFWTXNXVUZCVkN4RFFVRnpRaXhoUVVGMFFpeERRVUZ4UXl4RFFVTm9SU3hIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZHTEVsQlFVc3NSMEZCU1N4TFFVRlVMRWRCUVdsQ0xHTkJRV3BDTEVOQlFXZERMRU5CUXpsQ0xFZEJRVWtzVVVGQlV5eFJRVUZSTEVsQlFWSXNRMEZCWWl4RFFVTkJMRWRCUVVrc1EwRkJReXhOUVVGTUxFTkJRV0VzUzBGQlRTeEpRVUZKTEUxQlFVb3NRMEZCVlN4WFFVRmhMRWxCUVdJc1EwRkJiMElzWVVGQk9VSXNRMEZCVGl4RFFVTmlMRTlCUVU4c1RVRkJVQ3hEUVVGbExHTkJRV01zU1VGQlpDeERRVUZtTEVWQlEwUXNRMEZEUml4RFFWSkVMRU5CVlVFc1QwRkJUeXhUUVVGUUxFTkJRV2xDTEV0QlFXcENMRU5CUVhsQ0xGRkJRVk1zVFVGQlZDeEZRVUZyUWl4RFFVTjZReXhIUVVGSkxFMUJRVThzUzBGQlN5eFBRVUZNTEVOQlFXRXNUMEZCWWl4RlFVRjNRaXhMUVVGTExGTkJRVXdzUlVGQmJrTXNRMEZEUVN4TFFVRkxMRk5CUVV3c1IwRkRRU3hOUVVGUExFMUJRVXNzWVVGQlRDeERRVUZ0UWl4SlFVRnVRaXhEUVVGUUxFTkJRMFFzUTBGS1JDeERRVTFCTEVkQlFVa3NTVUZCU3l4UFFVRlBMRk5CUVdoQ0xFTkJSVUU3UVVGRlFUdEJRVVZCTEVsQlFVY3NWMEZCU0N4RFFVRnBRaXhUUVVGVExFbEJRVlFzUTBGQlpTeERRVU01UWl4TlFVRlBMRTFCUVVzc1QwRkJUQ3hEUVVGaExGZEJRV0lzUlVGQk5FSXNRMEZCTlVJc1JVRkJhVU1zUzBGQlN5eEpRVUZNTEVkQlFXTXNjVUpCUVM5RExFVkJRMHdzUzBGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFZEJRWGxDTEZOQlJIQkNMRVZCUlV3c1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVkQlFXaENMRU5CUVc5Q0xFdEJRWEJDTEVOQlFUQkNMRU5CUVRGQ0xFTkJRVFpDTEVOQlFVTXNRMEZCT1VJc1NVRkJjVU1zV1VGR2RrTXNRMEZIUkN4RFFVcEVMRU5CVFVFN1FVRkRRVHRCUVVWQkxFbEJRVWNzUjBGQlNDeERRVUZUTEZOQlFWTXNTVUZCVkN4RFFVRmxMRU5CUTNSQ0xFZEJRVWtzUzBGQlN5eEpRVUZNTEVkQlFXTXNTVUZCYkVJc1EwRkJkMElzUTBGRGRFSXNTMEZCU3l4SlFVRk1MRWRCUTBFc1RVRkJUeXhMUVVGUUxFTkJRMFFzUTBGSVJDeEpRVWRQTEVOQlEwd3NUVUZCVHl4TlFVRlFMRU5CUTBRc1EwRkRSaXhEUVZCRUxFTkJVMEU3UVVGRlFTeEpRVUZITEZsQlFVZ3NRMEZCYTBJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGREwwSXNUVUZCVHl4TlFVRkxMRWxCUVV3c1IwRkJZeXhIUVVGSExFbEJRV3BDTEVWQlFYbENMRXRCUVVzc1MwRkJUQ3hIUVVGbExFbEJRUzlETEVOQlEwUXNRMEZHUkN4RFFVbEJPMEZCUlVFc1NVRkJSeXhoUVVGSUxFTkJRVzFDTEZOQlFWTXNTVUZCVkN4RFFVRmxMRU5CUTJoRExFMUJRVThzVFVGQlN5eExRVUZNTEVkQlFXVXNTVUZCWml4RlFVRjFRaXhMUVVGTExFZEJRVXdzUTBGQlV5eEhRVUZITEVsQlFWb3NRMEZCT1VJc1EwRkRSQ3hEUVVaRUxFTkJTVUU3UVVGRlFTeEpRVUZITEdkQ1FVRklMRU5CUVhOQ0xGTkJRVk1zU1VGQlZDeERRVUZsTEVOQlEyNURMRWRCUVVrc1EwRkJReXhMUVVGTExHRkJRVXdzUTBGQmJVSXNTVUZCYmtJc1EwRkJUQ3hEUVVFclFpeExRVUZMTEZWQlFVd3NSMEZEYUVNc1EwRkdSQ3hEUVVsQk8wRkJSVUVzU1VGQlJ5eHJRa0ZCU0N4RFFVRjNRaXhWUVVGWExFTkJRMnBETEUxQlFVOHNUVUZCU3l4SlFVRk1MRWRCUVdNc1IwRkJSeXhIUVVGcVFpeEZRVU5NTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1RVRkVXaXhGUVVWTUxGVkJRVlVzU1VGQlZpeERRVUZsTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUzBGQlN5eFZRVUYwUWl4RFFVRnJReXhMUVVGTExFdEJRWFpETEVOQlFXWXNRMEZHUml4RFFVZEVMRU5CU2tRc1EwRk5RU3hIUVVGSExHVkJRVWdzUTBGQmNVSXNWVUZCVnl4RFFVTTVRaXhIUVVGSkxFdEJRVXNzYTBKQlFVd3NSVUZCU2l4RFFVRXJRaXhEUVVNM1FpeEhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRzFDUVVGcVFpeERRVU5GTEV0QlFVc3NUMEZCVEN4RFFVRmhMRzFDUVVGaUxFTkJRV2xETEV0QlFVc3NWVUZCZEVNc1EwRkJhMFFzUzBGQlN5eGhRVUYyUkN4RlFVTkdMRTFCUVU4c1MwRkJVQ3hEUVVORUxFTkJRMFlzUTBGT1JDeERRVkZCTzBGQlEwRTdRVUZGUVN4SlFVRkhMRk5CUVVnc1EwRkJaU3hWUVVGWExFTkJRM2hDTEVkQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVV3c1EwRkJVeXhIUVVGSExFbEJRVm9zUTBGQlJDeEZRVUZ6UWl4RFFVRkRMRXRCUVVzc1pVRkJUQ3hGUVVFelFpeERRVUZ0UkN4TFFVRkxMRlZCUVV3c1IwRkRjRVFzUTBGR1JDeERRVWxCTEVkQlFVY3NhMEpCUVVnc1EwRkJkMElzVTBGQlV5eFBRVUZVTEVOQlFXdENMRU5CUTNoRExFZEJRVWtzUzBGQlN5eEpRVUZNTEVWQlFXRXNUMEZCYWtJc1EwRkJNRUlzUTBGRGVFSXNSMEZCU1N4TFFVRkxMRTlCUVV3c1EwRkJZU3hsUVVGcVFpeERRVU5GTEV0QlFVc3NUMEZCVEN4RFFVRmhMR1ZCUVdJc1EwRkJOa0lzUzBGQlN5eFpRVUZzUXl4RFFVRm5SQ3hMUVVGTExHVkJRWEpFTEVWQlEwWXNTMEZCU3l4SlFVRk1MRWRCUTBFc1RVRkJUeXhMUVVGUUxFTkJRMFFzUTBGRFJpeERRVkJFTEVOQlUwRTdRVUZEUVR0QlFVVkJMRWxCUVVjc1RVRkJTQ3hEUVVGWkxGTkJRVk1zU1VGQlZDeERRVUZsTEVOQlEzcENMRXRCUVVzc1IwRkJUQ3hEUVVGVExFbEJRVlFzUjBGQmEwSXNTMEZCU3l4VlFVRk1MRVZCUVd4Q0xFTkJRMFFzUTBGR1JDeERRVWxCTzBGQlJVRXNTVUZCUnl4VlFVRklMRU5CUVdkQ0xGTkJRVk1zUjBGQlZDeERRVUZqTEVOQlF6VkNMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVThzU1VGQlVDeERRVUZqTEVkQlFXUXNRMEZCYjBJc1MwRkJTeXhMUVVGd1F5eERRVUV5UXl4clFrRkJNME1zUlVGRFJDeERRVVpFTEVOQlNVRXNSMEZCU1N4eFFrRkJjMElzVVVGQlV5eHZRa0ZCVkN4RlFVRXJRaXhEUVVOMlJDeExRVUZMTEdWQlFVd3NRMEZCZFVJc1EwRkJka0lzUTBGRFFTeExRVUZMTEdGQlFVd3NRMEZCY1VJc1EwRkJja0lzUTBGRFJDeERRVWhFTEVOQlMwRXNSMEZCUnl4clFrRkJTQ3hEUVVGM1FpeFRRVUZUTEhOQ1FVRlVMRU5CUVdsRExGRkJRV3BETEVOQlFUSkRMRU5CUTJwRkxFZEJRVWtzVlVGQlZ5eDNRa0ZCTUVJc2RVSkJRWFZDTEdGQlFXaEZMRU5CUTBFc1IwRkJTU3hEUVVGRExGRkJRVXdzUTBGQlpTeE5RVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlVMRU5CUTJZc1IwRkJTU3hSUVVGS0xFTkJRV01zUzBGQlN5eExRVUZNTEVOQlFWY3NVVUZCV0N4RFFVRnhRaXdyUTBGQmNrSXNSVUZEWml4RFFVcEVMRU5CVFVFc1IwRkJSeXh4UWtGQlNDeERRVUV5UWl4VFFVRlRMSE5DUVVGVUxFTkJRV2xETEZGQlFXcERMRU5CUVRKRExFTkJRM0JGTEVkQlFVa3NTMEZCVFN4M1FrRkJNRUlzZFVKQlFYVkNMR1ZCUVRORUxFTkJRMEVzUjBGQlNTeERRVUZETEZGQlFVd3NRMEZCWlN4TlFVRlBMRU5CUVVNc1EwRkJReXhIUVVGVUxFTkJRMllzUjBGQlNTeEhRVUZLTEVOQlFWTXNTMEZCU3l4TFFVRk1MRU5CUVZjc1IwRkJXQ3hEUVVGblFpeDVSVUZCYUVJc1JVRkRWaXhEUVVwRUxFTkJUVUVzUjBGQlNTeE5RVUZQTEU5QlFVOHNVMEZCYkVJc1EwRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRXNUVUZCU3l4aFFVRk1MRU5CUVhGQ0xGTkJRVk1zU1VGQlZDeERRVUZsTEVOQlEyeERMRWRCUVVrc1VVRkJVeXhKUVVGaUxFTkJSVUVzUjBGQlNTeFBRVUZSTEVsQlFWb3NRMEZEUVN4SFFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGV0xFTkJRV2RDTEV0QlFVc3NTVUZCVEN4RFFVRlpMRVZCUVZvc1EwRkRhRUlzVFVGQlR5eExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRWRCUVhoQ0xFTkJRVFpDTEVOQlF6TkNMRWRCUVVrc1RVRkJUeXhQUVVGUExHTkJRVkFzUTBGQmMwSXNTVUZCZEVJc1EwRkJORUlzU1VGQk5VSXNRMEZCV0N4RFFVTkJMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFbEJRVllzUTBGQlpTeEpRVUZtTEVWQlEwRXNSMEZCU1N4TFFVRktMRU5CUVZjc1EwRkRWQ3hIUVVGSkxFOUJRVThzVjBGQlVDeERRVUZ0UWl4SlFVRnVRaXhEUVVGS0xFTkJRVGhDTEU5QlFVOHNVMEZCVUN4RFFVRnBRaXhKUVVGcVFpeEZRVU01UWl4TlFVRlJMRXRCUVZJc1EwRkRSQ3hEUVVOR0xFTkJRMFFzUzBGQlN5eEpRVUZNTEVkQlEwRXNSMEZCU1N4TFFVRkxMRTlCUVV3c1EwRkJZU3hYUVVGaUxFVkJRVFJDTEVOQlFXaERMRU5CUVcxRExFTkJRMnBETEV0QlFVc3NWVUZCVEN4RFFVRnJRaXhMUVVGTExFOUJRVXdzUTBGQllTeFZRVUV2UWl4RFFVTkVMRU5CUTBRc1RVRkJUeXhOUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCYUVJc1EwRkJjMElzVTBGQmRFSXNRMEZCVUN4RFFVTkVMRU5CYkVKRUxFTkJiMEpCTEVkQlFVa3NWMEZCV1N4RFFVRkRMRXRCUVUwc1RVRkJVQ3hEUVVGb1FpeERRVU5CTEVkQlFVa3NZVUZCWXl4RFFVRkRMRXRCUVUwc1VVRkJVQ3hEUVVGc1FpeERRVU5CTEV0QlFVc3NTMEZCVEN4RFFVRmhMRlZCUVZjc1EwRkRkRUlzUjBGQlNTeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRWxCUVdwQ0xFVkJRWGxDTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1EwRkJNa0lzUTBGQmNFUXNSVUZCZVVRc1MwRkJTeXhMUVVGTUxFVkJRV01zUzBGQk0wVXNRMEZCYTBZc1RVRkJUeXhOUVVGUUxFTkJRMnhHTEdWQlFXVXNVMEZCWml4RFFVRXlRaXhMUVVGTExFZEJRV2hETEVOQlEwRXNSMEZCU1N4TlFVRlBMR1ZCUVdVc1NVRkJaaXhEUVVGdlFpeExRVUZMTEV0QlFYcENMRU5CUVZnc1EwRkRRU3hIUVVGSkxFMUJRVThzUzBGQlN5eEhRVUZNTEVOQlFWY3NTMEZCU3l4RFFVRk1MRVZCUVZFc1RVRkJPVUlzUTBGQmMwTXNUMEZCVXl4TFFVRkxMRXRCUVV3c1EwRkJWeXhWUVVGWUxFTkJRWE5DTEVsQlFYUkNMRU5CUVM5RExFTkJRMEVzUjBGQlNTeFRRVUZYTEVWQlFWZ3NSVUZCYVVJc1VVRkJWU3hIUVVFdlFpeERRVUZ2UXl4TlFVRlBMRXRCUVZBc1EwRkJXVHRCUVVOb1JDeEpRVUZKTEd0Q1FVRnJRaXhOUVVGc1FpeERRVUV3UWl4SlFVRXhRaXhEUVVGS0xFTkJRWEZETEVOQlEyNURMRWxCUVVzc1IwRkJTU3hMUVVGTkxFdEJRVThzUTBGQmRFSXNRMEZCZVVJc2FVSkJRV2xDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRlZCUVZnc1EwRkJjMElzUjBGQmRFSXNRMEZCYWtJc1EwRkJOa01zU1VGQk4wTXNRMEZCZWtJc1EwRkJOa1VzUlVGQlJTeEhRVUV2UlN4RFFVRnZSaXhEUVVGRkxFTkJRM1JHTEVkQlFVa3NUMEZCVVN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGWUxFTkJRV2xDTEVsQlFXcENMRU5CUVhWQ0xFZEJRWFpDTEVOQlFWb3NRMEZEUVN4SFFVRkpMRU5CUVVNc1MwRkJTeXhUUVVGTUxFTkJRV1VzUzBGQlppeERRVUZNTEVOQlFUUkNMRTFCUVU4c1MwRkJVQ3hEUVVNM1FpeERRVU5FTEUxQlFVOHNUVUZCVUN4RFFVTkVMRU5CV2tRc1EwRmpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVN4TlFVRkxMR05CUVV3c1EwRkJjMElzVTBGQlV5eFhRVUZVTEVOQlFYTkNMRkZCUVhSQ0xFTkJRV2RETEVOQlEzQkVMRWRCUVVrc1YwRkJXU3hMUVVGTExFbEJRWEpDTEVOQlFUSkNMRXRCUVU4c1MwRkJTeXhUUVVGTUxFVkJRV3hETEVOQlFXOUVMRWxCUVhCRUxFTkJSVUVzUjBGQlNTeExRVUZMTEV0QlFVd3NSVUZCU2l4RFFVRnJRaXhEUVVOb1FpeFZRVUZaTEVkQlFVY3NTVUZCWml4RFFVTkJMRXRCUVU4c1MwRkJVQ3hEUVVORUxFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlJVRXNVVUZCVVN4VFFVRlNMRVZCUTBFc1NVRkJTeXhKUVVGSExFMUJRVklzUTBGQlowSXNTVUZCU3l4SlFVRkhMRk5CUVZJc1EwRkJiVUlzVFVGQlR5eE5RVUZMTERKQ1FVRk1MRU5CUVdsRExFbEJRV3BETEVOQlFYVkRMRlZCUVZVc1QwRkJha1FzUTBGQlVDeERRVU51UXl4SlFVRkxMRWxCUVVjc1UwRkJVaXhEUVVGdFFpeE5RVUZQTEUxQlFVc3NjMEpCUVV3c1EwRkJORUlzU1VGQk5VSXNRMEZCVUN4RFFVTnVRaXhKUVVGTExFbEJRVWNzUjBGQlVpeERRVUZoTEUxQlFVOHNUVUZCU3l4blFrRkJUQ3hEUVVGelFpeEpRVUYwUWl4RFFVRlFMRU5CUTJJc1NVRkJTeXhKUVVGSExFbEJRVklzUTBGQll5eE5RVUZQTEUxQlFVc3NhVUpCUVV3c1EwRkJkVUlzU1VGQmRrSXNRMEZCVUN4RFFVTmtMRWxCUVVzc1NVRkJSeXhUUVVGU0xFTkJRMFVzUjBGQlNTeERRVUZETEZkQlFVUXNSVUZCWjBJc1MwRkJTeXhQUVVGTUxFTkJRV0VzVjBGQllpeEZRVUUwUWl4RFFVRm9SQ3hEUVVGdFJDeExRVUZMTEZWQlFVd3NSMEZEYmtRc1RVRkJUeXhOUVVGTExITkNRVUZNTEVOQlFUUkNMRWxCUVRWQ0xFTkJRVkFzUTBGRFJpeEpRVUZMTEVsQlFVY3NUVUZCVWl4RFFVTkZMRWRCUVVrc1EwRkJReXhYUVVGTUxFTkJRV3RDTEV0QlFVc3NWVUZCVEN4SFFVTnNRaXhOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeEpRVUYwUWl4RFFVRlFMRU5CUTBZc1NVRkJTeXhKUVVGSExFZEJRVklzUTBGQllTeE5RVUZQTEUxQlFVc3NaMEpCUVV3c1EwRkJjMElzU1VGQmRFSXNRMEZCVUN4RFFVTmlMRWxCUVVzc1NVRkJSeXhQUVVGU0xFTkJRV2xDTEUxQlFVOHNUVUZCU3l4dlFrRkJUQ3hEUVVFd1FpeEpRVUV4UWl4RFFVRlFMRU5CUTJwQ0xFbEJRVXNzU1VGQlJ5eFBRVUZTTEVOQlFXbENMRTFCUVU4c1RVRkJTeXh2UWtGQlRDeERRVUV3UWl4SlFVRXhRaXhEUVVGUUxFTkJRMnBDTEVsQlFVc3NTVUZCUnl4TlFVRlNMRU5CUVdkQ0xFMUJRVThzVFVGQlN5eHRRa0ZCVEN4RFFVRjVRaXhKUVVGNlFpeERRVUZRTEVOQlEyaENMRWxCUVVzc1NVRkJSeXhKUVVGU0xFTkJRV01zVFVGQlR5eE5RVUZMTEdsQ1FVRk1MRU5CUVhWQ0xFbEJRWFpDTEVOQlFWQXNRMEZEWkN4SlFVRkxMRWxCUVVjc1RVRkJVaXhEUVVGblFpeEpRVUZMTEVsQlFVY3NTVUZCVWl4RFFVTmtMRXRCUVU4c1RVRkJVU3hMUVVGTExFdEJRWEJDTEVOQlEwRXNSMEZCU1N4RFFVRkRMRmRCUVVRc1JVRkJaMElzVFVGQlVTeExRVUUxUWl4RFFVRnRReXhMUVVGTExGVkJRVXdzUjBGRGJrTXNUVUZCVHl4TlFVRkxMR2xDUVVGTUxFTkJRWFZDTEVsQlFYWkNMRU5CUVRaQ0xFbEJRVGRDTEVOQlFWQXNRMEZEUml4SlFVRkxMRWxCUVVjc1RVRkJVaXhEUVVGblFpeE5RVUZQTEUxQlFVc3NiVUpCUVV3c1EwRkJlVUlzU1VGQmVrSXNRMEZCVUN4RFFVTm9RaXhKUVVGTExFbEJRVWNzUzBGQlVpeERRVUZsTEUxQlFVOHNUVUZCU3l4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRlFMRU5CUTJZc1NVRkJTeXhKUVVGSExFMUJRVklzUTBGQlowSXNUVUZCVHl4TlFVRkxMRlZCUVV3c1JVRkJVQ3hEUVVOb1FpeEpRVUZMTEVsQlFVY3NTVUZCVWl4RFFVRmpMRTFCUVU4c1RVRkJTeXh0UWtGQlRDeERRVUY1UWl4SlFVRjZRaXhEUVVGUUxFTkJRMlFzU1VGQlN5eEpRVUZITEU5QlFWSXNRMEZEUVN4SlFVRkxMRWxCUVVjc1QwRkJVaXhEUVVORkxFZEJRVWtzUTBGQlF5eExRVUZMTEU5QlFVd3NRMEZCWVN3eVFrRkJiRUlzUTBGQkswTXNRMEZETjBNc1IwRkJTU3hEUVVGRExGRkJRVXdzUTBGRFJTeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRkxMRXRCUVdoQ0xFTkJRWFZDTEhkRVFVRjJRaXhGUVVOR0xFZEJRVWtzUTBGQlF5eExRVUZMTEZGQlFWWXNRMEZEUlN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExFdEJRV2hDTEVOQlFYVkNMR2xGUVVGMlFpeEZRVU5JTEVOQlEwUXNUVUZCVHl4aFFVRmpMRWRCUVVjc1QwRkJha0lzUTBGQk1rSXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVOQlFUTkNMRU5CUVc5RUxFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhEUVVFelJDeERRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSaXhUUVVORkxFZEJRVWtzVjBGQldTeExRVUZMTEV0QlFYSkNMRU5CUVRSQ0xFdEJRVThzUzBGQlN5eGxRVUZNTEVWQlFXNURMRU5CUTBFc1IwRkJTU3haUVVGakxFZEJRVWNzU1VGQmFrSXNSVUZCZVVJc1MwRkJTeXhKUVVGTUxFZEJRV01zV1VGQmRrTXNSVUZCZFVRc1MwRkJTeXhIUVVGTUxFTkJRVk1zUjBGQlJ5eExRVUZhTEVOQlFUTkVMRU5CUTBVc1RVRkJUeXhOUVVGTExIRkNRVUZNTEVOQlFUSkNMRWxCUVROQ0xFTkJRV2xETEZOQlFXcERMRU5CUVRSRExFbEJRVFZETEVOQlFWQXNRMEZFUml4SlFVVkxMRTlCUVU4c1RVRkJTeXgzUWtGQlRDeERRVUU0UWl4SlFVRTVRaXhEUVVGdlF5eEpRVUZ3UXl4RFFVRlFMRU5CTTBOUUxFTkJOa05FTEVOQmVrUkVMRU5CTWtSQkxFdEJRVXNzTWtKQlFVd3NRMEZCYlVNc1UwRkJVeXhKUVVGVUxFTkJRV1VzVDBGQlppeERRVUYzUWl4RFFVTjZSQ3hIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZCTEVkQlFVa3NVMEZCVlN4VFFVRlhMRTlCUVhwQ0xFTkJRMEVzUzBGQlN5eEpRVUZNTEVkQlEwRXNSMEZCU1N4TFFVRkxMRWRCUVV3c1EwRkJVeXhIUVVGSExFbEJRVm9zUjBGQmNVSXNTMEZCU3l4bFFVRk1MRVZCUVhwQ0xFTkJRV2xFTEV0QlFVc3NTMEZCVEN4RFFVRmhMRWxCUVdJc1EwRkJha1FzU1VGRFN5eEpRVUZKTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1NVRkJja0lzUTBGQk1rSXNTMEZCU3l4VlFVRk1MRWRCUVROQ0xFbEJRMEVzUTBGRFNDeExRVUZMTEV0QlFVd3NRMEZCWVN4TFFVRkxMRlZCUVV3c1JVRkJZaXhEUVVOQkxFdEJRVXNzVTBGQlRDeEhRVU5FTEVOQlJVUTdRVUZEUVR0QlFVTkJMRXRCUVVzc1IwRkJTU3hIUVVGSkxFTkJRV0lzUTBGQlowSXNSVUZCU1N4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVGb1F5eERRVUYzUXl4RlFVRkZMRU5CUVRGRExFTkJRVFpETEVOQlF6TkRMRWRCUVVrc1MwRkJUU3hQUVVGUExFMUJRVkFzUTBGQll5eERRVUZrTEVOQlFWWXNRMEZEUVN4SFFVRkpMRXRCUVVzc1MwRkJUQ3hGUVVGakxFbEJRV1FzUlVGQmMwSXNTVUZCU1N4SlFVRktMRWRCUVdFc1MwRkJTeXhMUVVGTUxFTkJRVmNzU1VGQmJFUXNRMEZCZDBRc1EwRkRkRVFzUjBGQlNTeEpRVUZKTEVsQlFVb3NSVUZCV1N4SlFVRmFMRWRCUVhGQ0xGTkJRVmNzU1VGQlNTeEpRVUZLTEVkQlFXRXNUVUZCTjBNc1EwRkJTaXhEUVVFd1JDeE5RVU14UkN4SFFVRkpMRXRCUVVzc1MwRkJUQ3hGUVVGakxFOUJRV3hDTEVOQlFUSkNMRTFCUXpWQ0xFTkJRMFlzUTBGRFJDeEhRVUZKTEVsQlFVMHNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJkRUlzUTBGQk9FSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhMUVVGb1FpeERRVUYxUWl4bFFVRnBRaXhQUVVGNFF5eEZRVU01UWl4TlFVRlBMRTFCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRnpRaXhSUVVGVkxHZENRVUZXTEVOQlFUWkNMRzFDUVVGdVJDeERRVUZRTEVOQlEwUXNRMEYyUWtRc1EwRjVRa0VzUzBGQlN5eHpRa0ZCVEN4RFFVRTRRaXhUUVVGVExFbEJRVlFzUTBGQlpTeERRVU16UXl4TFFVRkxMRWxCUVV3c1IwRkRRU3hMUVVGTExGTkJRVXdzUjBGRFFTeE5RVUZQTEUxQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGb1FpeERRVUZ6UWl4dFFrRkJkRUlzUTBGQlVDeERRVU5FTEVOQlNrUXNRMEZOUVN4TFFVRkxMR2RDUVVGTUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmxMRU5CUTNKRExFdEJRVXNzU1VGQlRDeEhRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRlpMRWxCUVZvc1EwRkJhVUlzVTBGQmFrSXNSVUZEUVN4TFFVRkxMRWxCUVV3c1EwRkJXU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNTMEZCY0VJc1EwRkJXaXhEUVVOQkxFdEJRVXNzVFVGQlRDeERRVUZaTEVkQlFWb3NSMEZEUVN4TFFVRkxMRTFCUVV3c1EwRkJXU3hIUVVGSExFMUJRV1lzUlVGRFFTeExRVUZMTEVsQlFVd3NRMEZCV1N4TFFVRkxMRzlDUVVGTUxFVkJRVm9zUTBGRFFTeEhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1JVRkJORUlzUTBGQmFFTXNRMEZEUlN4TFFVRkxMRWRCUVV3c1EwRkJVeXhIUVVGSExFbEJRVm9zUlVGRVJpeEpRVWRGTEUxQlFVc3NVMEZCVEN4SFFVTkdMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xHdENRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRmFSQ3hEUVdOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhwUWtGQlRDeERRVUY1UWl4VFFVRlRMRWxCUVZRc1EwRkJaU3hEUVVOMFF5eExRVUZMTEVsQlFVd3NSMEZEUVN4TFFVRkxMRTFCUVV3c1EwRkJXU3hKUVVGYUxFTkJRV2xDTEZOQlFXcENMRVZCUTBFc1MwRkJTeXhOUVVGTUxFTkJRVmtzUjBGQlJ5eE5RVUZtTEVWQlEwRXNSMEZCU1N4TFFVRkxMRWxCUVV3c1IwRkJZeXhIUVVGSExFbEJRWEpDTEVOQlFUSkNMRTFCUVU4c1RVRkJTeXhSUVVGTUxFTkJRV01zU1VGQlpDeERRVUZ2UWl4SlFVRndRaXhEUVVGUUxFTkJRek5DTEVkQlFVa3NUMEZCVVN4TFFVRkxMRXRCUVV3c1JVRkJXaXhEUVVOQkxFZEJRVWtzUzBGQlN5eEpRVUZNTEVkQlFXTXNSMEZCUnl4SlFVRnFRaXhGUVVGNVFpeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRTFCUVRGRExFVkJRVzlFTEV0QlFYaEVMRU5CUVN0RUxFTkJRemRFTEVkQlFVa3NVVUZCVXl4TFFVRkxMRk5CUVV3c1JVRkJZaXhEUVVFclFpeExRVUZQTEUxQlFWRXNTMEZCVWl4RFFVRm5RaXhMUVVGTExFdEJRVE5FTEVOQlEwRXNTMEZCU3l4SlFVRk1MRWRCUTBFc1MwRkJTeXhSUVVGTUxFTkJRV01zVFVGQlpDeERRVUZ6UWl4SlFVRjBRaXhEUVVFMFFpeEpRVUUxUWl4RlFVTkJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeE5RVUZvUWl4RFFVRjNRaXh4UWtGQmVFSXNSVUZEUVN4SFFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eEhRVUZxUWl4RlFVRjVRaXhMUVVGTExFOUJRVXdzUTBGQllTeFhRVUZpTEVWQlFUUkNMRU5CUVRWQ0xFVkJRV2xETEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhKUVVGc1FpeERRVUV6UkN4SFFVRjNSaXhQUVVGUExGbEJRVkFzUTBGQmIwSXNUVUZCY0VJc1IwRkJLMElzUTBGQmRrZ3NSVUZEUVN4RlFVRkZMRTlCUVZNc1MwRkJWQ3hGUVVGclFpeFBRVUZQTEZsQlFWQXNRMEZCYjBJc1EwRkJjRUlzUlVGQmRVSXNTVUZCTTBNc1EwRkVTaXhEUVVWRkxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWE5DTEUxQlFYUkNMRU5CUVZBc1EwRkRSaXhOUVVGUExFMUJRVXNzVVVGQlRDeERRVUZqTEVsQlFXUXNRMEZCYjBJc1RVRkJjRUlzUTBGQlVDeERRVU5FTEVOQlEwUXNSMEZCU1N4M1FrRkJlVUlzUjBGQlNTeHZRa0ZCU2l4RlFVRTNRaXhEUVVOQkxFZEJRVWtzVFVGQlR5eExRVUZMTEdWQlFVd3NRMEZCY1VJc1NVRkJja0lzUTBGQk1rSXNjMEpCUVROQ0xFTkJRVmdzUTBGRFFTeEhRVUZKTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1IwRkJha0lzUlVGQmVVSXNTMEZCU3l4UFFVRk1MRU5CUVdFc1YwRkJZaXhGUVVFMFFpeERRVUUxUWl4RlFVRnBReXhMUVVGTExGbEJRVXdzUTBGQmEwSXNTVUZCYkVJc1EwRkJPVVFzUTBGQmQwWXNRMEZEZEVZc1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4elFrRkJlRUlzUTBGQlowUXNTVUZCYUVRc1JVRkRRU3hMUVVGTExGbEJRVXdzUTBGQmEwSXNTVUZCYkVJc1JVRkRRU3hMUVVGTExGTkJRVXdzUTBGQlpTeEpRVUZtTEVWQlEwRXNUVUZCVHl4TlFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCYzBJc1NVRkJkRUlzUTBGQlVDeERRVU5FTEVOQlRFUXNTVUZMVHl4RFFVTk1MRXRCUVVzc2NVSkJRVXdzUTBGQk1rSXNjMEpCUVROQ0xFTkJRVzFFTEVsQlFXNUVMRVZCUTBRc1EwRkRSQ3hOUVVGUExFMUJRVXNzVVVGQlRDeERRVUZqTEVsQlFXUXNRMEZCYjBJc1NVRkJjRUlzUTBGQlVDeERRVU5FTEVOQk0wSkVMRU5CTmtKQkxFdEJRVXNzYzBKQlFVd3NRMEZCT0VJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGRE0wTXNTMEZCU3l4SlFVRk1MRWRCUTBFc1RVRkJUeXhOUVVGTExHRkJRVXdzUTBGQmJVSXNTVUZCYmtJc1EwRkJlVUlzU1VGQmVrSXNRMEZCVUN4RFFVTkVMRU5CU0VRc1EwRkxRU3hMUVVGTExHZENRVUZNTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGbExFTkJRM0pETEV0QlFVc3NTVUZCVEN4SFFVTkJMRXRCUVVzc1NVRkJUQ3hEUVVGWkxFdEJRVXNzYjBKQlFVd3NSVUZCV2l4RFFVTkJMRXRCUVVzc1ZVRkJUQ3hEUVVGclFpeExRVUZMTEdOQlFVd3NRMEZCYjBJc1MwRkJjRUlzUTBGQmJFSXNRMEZEUVN4TFFVRkxMRk5CUVV3c1EwRkJhVUlzUzBGQlN5eEhRVUZNTEVOQlFWTXNSMEZCUnl4TFFVRmFMRVZCUVhGQ0xFdEJRVXNzWTBGQlRDeERRVUZ2UWl4TFFVRndRaXhEUVVGeVFpeERRVUZyUkN4SlFVRnVSU3hEUVVOQkxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWE5DTEdGQlFYUkNMRU5CUVZBc1EwRkRSQ3hEUVU1RUxFTkJVVUVzUzBGQlN5eHZRa0ZCVEN4RFFVRTBRaXhUUVVGVExFbEJRVlFzUTBGQlpTeERRVU42UXl4SFFVRkpMRU5CUVVNc1MwRkJTeXhWUVVGT0xFVkJRVzlDTEVOQlFVTXNTMEZCU3l4UFFVRk1MRU5CUVdFc01FSkJRWFJETEVOQlEwVXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhMUVVGb1FpeERRVUYxUWl3NFFrRkJka0lzUlVGRFJpeExRVUZMTEVsQlFVd3NSMEZGUVR0QlFVTkJPMEZCUTBFN1FVRkZRU3hKUVVGSkxFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFVY3NTVUZCV2l4SFFVRnhRaXhMUVVGTExHVkJRVXdzUlVGQmVrSXNRMEZCYVVRc1MwRkJTeXhSUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVdwRUxFbEJRMHNzUTBGQlJTeExRVUZMTEZGQlFVd3NRMEZCWjBJc1MwRkJTeXhsUVVGTUxFVkJRV2hDTEVOQlFYZERMRXRCUVVzc1UwRkJUQ3hIUVVGclFpeERRVU5xUlN4TlFVRlBMRTFCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRnpRaXhwUWtGQmRFSXNRMEZCVUN4RFFVTkVMRU5CV2tRc1EwRmpRU3hMUVVGTExHOUNRVUZNTEVOQlFUUkNMRk5CUVZNc1NVRkJWQ3hEUVVGbExFTkJRM3BETEVkQlFVa3NVVUZCVXl4SlFVRmlMRU5CUlVFc1MwRkJTeXhKUVVGTUxFZEJRMEVzUzBGQlN5eFpRVUZNTEVOQlFXOUNMRXRCUVVzc2IwSkJRVXdzUlVGQmNFSXNRMEZEUVN4TFFVRkxMRXRCUVV3c1EwRkJZU3hGUVVGaUxFTkJRMEVzUzBGQlN5eE5RVUZNTEVOQlFWa3NSMEZCUnl4TlFVRm1MRVZCUTBFc1MwRkJTeXhOUVVGTUxFTkJRVmtzU1VGQldpeERRVUZwUWl4WFFVRnFRaXhGUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTEV0QlFVc3NSMEZCU1N4SlFVRktMRU5CUVZNc1YwRkJZU3hMUVVFelFpeERRVUZyUXl4TFFVRkxMRWxCUVV3c1JVRkJZU3hIUVVGSExFMUJRV3hFTEVWQlFUSkVMRU5CUTNwRUxFZEJRVWtzVDBGQlR5eEpRVUZRTEVkQlFXZENMRWRCUVVjc1MwRkJia0lzUlVGQk5FSXNUMEZCVHl4SlFVRlFMRWRCUVdkQ0xFZEJRVWNzVVVGQmJrUXNRMEZCTmtRc1EwRkRNMFFzUjBGQlNTeFJRVUZUTEU5QlFVOHNTVUZCVUN4SFFVRm5RaXhIUVVGSExFdEJRV2hETEVOQlEwRXNSMEZCU1N4SFFVRktMRU5CUVZNc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEVkQlFXeENMRU5CUVhWQ0xGbEJRWFpDTEVWQlExUXNTMEZCU3l4TFFVRk1MRU5CUVZjc1NVRkJXQ3hEUVVGblFpeEpRVUZOTEU5QlFVOHNVMEZCVUN4RlFVRjBRaXhGUVVOQkxFbEJRVWtzVlVGQlNpeERRVUZwUWl4RlFVRnFRaXhEUVVOQkxFOUJRVThzU1VGQlVDeEhRVU5CTEVkQlFVa3NUVUZCU2l4RFFVRlpMRU5CUTFZc1NVRkJTU3hKUVVGS0xFTkJRVmNzVDBGQlR5eGxRVUZRTEVWQlFWZ3NRMEZEUkN4RFFVWkVMRWxCUlU4c1EwRkRUQ3hIUVVGSkxGVkJRVW9zUTBGQlowSXNUMEZCVHl4blFrRkJVQ3hEUVVGM1FpeFBRVUZQTEZsQlFTOUNMRU5CUVRaRExEQkNRVUUzUXl4RlFVTm9RaXhYUVVGaExFbEJRV0lzUTBGRFFTeEpRVUZKTEVsQlFVb3NRMEZCVnl4SlFVRllMRU5CUTBRc1EwRkRSQ3hQUVVGUExFMUJRVkFzUTBGQll5eEhRVUZITEV0QlFXcENMRVZCUTBRc1EwRmtSQ3hKUVdOUExFTkJRMHdzUjBGQlNTeERRVUZETEVkQlFVd3NRMEZCVlN4UFFVRlBMRlZCUVZBc1IwRkRWaXhKUVVGSkxGVkJRVW9zUTBGQlpTeEpRVUZtTEVOQlFXOUNMRTlCUVU4c1kwRkJVQ3hEUVVGelFpeEpRVUYwUWl4RFFVRndRaXhGUVVORUxFTkJRMFlzUTBGRFJDeEhRVUZKTEVkQlFVb3NRMEZCVXl4TFFVRkxMRlZCUVV3c1EwRkJaMElzUjBGQmFFSXNRMEZCY1VJc1dVRkJja0lzUlVGRFZDeExRVUZMTEVsQlFVd3NSMEZCV1R0QlFVTmFMRTFCUVVzc1RVRkJUQ3hEUVVGWkxFZEJRVm9zUjBGRFFTeE5RVUZQTEUxQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGb1FpeERRVUZ6UWl4cFFrRkJkRUlzUTBGQlVDeERRVU5FTEVOQmNrTkVMRU5CZFVOQkxFdEJRVXNzYlVKQlFVd3NRMEZCTWtJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGRGVFTXNTMEZCU3l4SlFVRk1MRWRCUTBFc1IwRkJTU3hWUVVGVkxFbEJRVllzUTBGQlpTeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRllMRU5CUVdsQ0xFdEJRVXNzVlVGQmRFSXNRMEZCYTBNc1MwRkJTeXhMUVVGMlF5eERRVUZtTEVOQlFVb3NRMEZEUlN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExGVkJRV2hDTEVOQlFUUkNMRFpDUVVFMVFpeEZRVU5HTEV0QlFVc3NVVUZCVEN4RFFVRm5RaXhMUVVGTExHVkJRVXdzUlVGQmFFSXNRMEZEUVN4TFFVRkxMRk5CUVV3c1IwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeG5Ra0ZCZEVJc1EwRkJVQ3hEUVVORUxFTkJVRVFzUTBGVFFUdEJRVVZCTEVsQlFVa3NUMEZCVVN4RlFVRmFMRU5CUlVFc1MwRkJTeXhwUWtGQlRDeERRVUY1UWl4VFFVRlRMRWxCUVZRc1EwRkJaU3hEUVVOMFF5eExRVUZMTEVsQlFVd3NSMEZEUVN4TFFVRkxMRXRCUVV3c1EwRkJZU3hMUVVGTExGVkJRVXdzUlVGQllpeERRVU5CTEV0QlFVc3NUMEZCVEN4RFFVRmxMRWxCUVdZc1EwRkRRU3hIUVVGSkxFdEJRVXNzU1VGQlRDeEhRVUZqTEVkQlFVY3NUVUZCY2tJc1EwRkJOa0lzUTBGRE0wSXNSMEZCU1N4UlFVRlRMRXRCUVVzc1UwRkJUQ3hGUVVGaUxFTkJRMEVzUzBGQlN5eEpRVUZNTEVkQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVZrc1IwRkJSeXhOUVVGbUxFVkJRMEVzVDBGQlR5eExRVUZRTEVOQlFXVXNTMEZCU3l4blFrRkJUQ3hGUVVGbUxFTkJRMEVzUzBGQlN5eFRRVUZNTEVOQlFXVXNUMEZCVHl4TFFVRjBRaXhEUVVFMlFpeEpRVUUzUWl4RlFVTkJMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFZEJRVWNzVFVGQlppeEZRVU5CTEU5QlFVOHNTVUZCVUN4RFFVRmpMRXRCUVVzc1ZVRkJUQ3hGUVVGa0xFTkJRMEVzUzBGQlN5eFBRVUZNTEVOQlFXVXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFMUJRV2hDTEVOQlFYZENMR0ZCUVhoQ0xFTkJRV1lzUTBGRFJDeERRVU5FTEV0QlFVc3NVMEZCVEN4RFFVRnBRaXhMUVVGTExFZEJRVXdzUTBGQlV5eEhRVUZITEZGQlFWb3NSVUZCZDBJc1MwRkJTeXhWUVVGTUxFVkJRWGhDTEVOQlFUUkRMRWxCUVRkRUxFTkJRMEVzUjBGQlNTeERRVUZETEV0QlFVc3NUMEZCVGl4RlFVRnBRaXhEUVVGRExFdEJRVXNzVTBGQk0wSXNRMEZEUlN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExFdEJRV2hDTEVOQlFYVkNMR2xEUVVGMlFpeEZRVU5HTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMR05CUVhSQ0xFTkJRVkFzUTBGRFJDeERRV3hDUkN4RFFXOUNRU3hMUVVGTExHbENRVUZNTEVOQlFYbENMRk5CUVZNc1NVRkJWQ3hEUVVGbExFbEJRV1lzUTBGQmNVSXNRMEZETlVNc1MwRkJTeXhKUVVGTUxFZEJRMEVzUzBGQlN5eFJRVUZNTEVOQlFXTXNTVUZCWkN4RFFVRnZRaXhMUVVGd1FpeERRVUV5UWl4SlFVRXpRaXhGUVVOQkxFdEJRVXNzVTBGQlRDeEhRVU5CTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMSEZDUVVGMFFpeERRVUZRTEVOQlEwUXNRMEZNUkN4RFFVOUJMRXRCUVVzc2JVSkJRVXdzUTBGQk1rSXNVMEZCVXl4SlFVRlVMRU5CUVdVc1EwRkRlRU1zUzBGQlN5eEpRVUZNTEVkQlEwRXNTMEZCU3l4SlFVRk1MRU5CUVZrc1MwRkJTeXh2UWtGQlRDeEZRVUZhTEVOQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVZrc1NVRkJXaXhEUVVGcFFpeFRRVUZxUWl4RlFVTkJMRXRCUVVzc1NVRkJUQ3hEUVVGWkxFdEJRVXNzWTBGQlRDeERRVUZ2UWl4TFFVRndRaXhEUVVGYUxFTkJRMEVzUzBGQlN5eE5RVUZNTEVOQlFWa3NSMEZCV2l4SFFVTkJMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xHZENRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRlFSQ3hEUVZOQkxFdEJRVXNzYTBKQlFVd3NRMEZCTUVJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGRGRrTXNSMEZCU1N4TFFVRkxMRTFCUVZRc1EwRkJhVUlzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4TFFVRm9RaXhEUVVGMVFpeDFRa0ZCZGtJc1JVRkRha0lzUzBGQlN5eEpRVUZNTEVkQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVdNc1MwRkJTeXh2UWtGQlRDeEZRVUZrTEVOQlEwRXNTMEZCU3l4SlFVRk1MRU5CUVZrc1MwRkJTeXhqUVVGTUxFTkJRVzlDTEV0QlFYQkNMRU5CUVZvc1EwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeGxRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRk9SQ3hEUVZGQkxFdEJRVXNzYlVKQlFVd3NRMEZCTWtJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGRGVFTXNTMEZCU3l4SlFVRk1MRWRCUTBFc1RVRkJUeXhOUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCYUVJc1EwRkJjMElzWjBKQlFYUkNMRU5CUVZBc1EwRkRSQ3hEUVVoRUxFTkJTMEVzUzBGQlN5eHhRa0ZCVEN4RFFVRTJRaXhUUVVGVExFbEJRVlFzUTBGQlpTeFRRVUZtTEVOQlFUQkNMRWxCUVRGQ0xFTkJRV2RETEVOQlF6TkVMRWRCUVVrc1VVRkJVeXhKUVVGaUxFTkJSVUVzU1VGQlN5eEhRVUZKTEVkQlFVa3NRMEZCWWl4RFFVRm5RaXhGUVVGSkxFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFXaERMRU5CUVhkRExFVkJRVVVzUTBGQk1VTXNNRUpCUTBVc1IwRkJTU3hQUVVGUExFMUJRVkFzUTBGQll5eERRVUZrTEVWQlFXbENMRWxCUVdwQ0xFZEJRVEJDTEZOQlFUbENMRU5CUVhsRExFOUJRVThzUzBGQlVDeERRVUZoTEV0QlFVc3NTMEZCYkVJc1EwRkJlVUlzVlVGQldTeFRRVUZhTEVOQlFYZENMSFZDUVVGcVJDeEZRVVF6UXl4RFFVVkJMRWRCUVVrc1RVRkJUeXhMUVVGTExFbEJRVXdzUTBGQlZTeE5RVUZXTEVOQlFXMUNMRTFCUVc1Q0xFTkJRVFJDTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1QwRkJha0lzUTBGQk1rSXNVVUZCTTBJc1EwRkJjME1zU1VGQk4wVXNRMEZEUVN4SlFVRkxMRWRCUVVrc1MwRkJUU3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZhTEVOQlFYRkNMRU5CUVhCRExFTkJRWFZETEV0QlFVOHNRMEZCT1VNc1EwRkJhVVFzUzBGQmFrUXNRMEZCZDBRc1EwRkRkRVFzUjBGQlNTeFBRVUZSTEU5QlFVOHNUVUZCVUN4RFFVRmpMRWRCUVdRc1EwRkJXaXhEUVVOQkxFZEJRVWtzVFVGQlRTeGpRVUZPTEVWQlFYZENMRXRCUVVzc1MwRkJha01zUTBGQmQwTXNRMEZEZEVNc1RVRkJUU3hqUVVGT0xFTkJRWFZDTEU5QlFVOHNTMEZCT1VJc1EwRkRRU3hOUVVGTkxFbEJRVTRzUTBGQllTeEpRVUZpTEVOQlEwUXNRMEZJUkN4SlFVZFBMRTlCUTFJc1EwRkRSQ3hMUVVGTExFMUJRVXdzUTBGQldTeEpRVUZhTEVOQlFXbENMRU5CUVVNc1MwRkJUU3hUUVVGUUxFTkJRV3RDTEV0QlFVMHNTVUZCZUVJc1EwRkJPRUlzWlVGQlowSXNTMEZCU3l4TFFVRnVSQ3hEUVVGcVFpeEZRVU5CTEV0QlFVc3NTVUZCVEN4RFFVRlpMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeEpRVUZ3UWl4RFFVRmFMRU5CUTBFc1MwRkJTeXhOUVVGTUxFTkJRVmtzUjBGQldpeEhRVU5CTEV0QlFVc3NTMEZCVEN4RFFVRmhMRWxCUVdJc1EwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeHJRa0ZCZEVJc1EwRkJVQ3hEUVVORUxFTkJiRUpFTEVOQmIwSkJMRXRCUVVzc2QwSkJRVXdzUTBGQlowTXNVMEZCVXl4SlFVRlVMRU5CUVdVc1NVRkJaaXhEUVVGeFFpeERRVU51UkN4TFFVRkxMRlZCUVV3c1EwRkJhMElzU1VGQmJFSXNRMEZEUVN4TFFVRkxMRk5CUVV3c1IwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeHhRa0ZCZEVJc1EwRkJVQ3hEUVVORUxFTkJTa1FzUTBGTlFUdEJRVU5CTzBGQlEwRTdRVUZGUVN4TlFVRkxMRlZCUVV3c1EwRkJhMElzVTBGQlV5eFhRVUZVTEVOQlFYTkNMRU5CUTNSRExFZEJRVWtzVVVGQlV5eEpRVUZpTEVOQlJVRXNSMEZCU1N4TlFVRlBMRXRCUVVzc1UwRkJUQ3hGUVVGWUxFTkJRVFpDTEUxQlFWRXNTVUZCY2tNc1EwRkJNa01zVTBGQk0wTXNRMEZEUVN4TFFVRkxMRWxCUVV3c1EwRkJXU3hGUVVGYUxFTkJRMEVzUzBGQlN5eE5RVUZNTEVOQlFWa3NSMEZCUnl4TlFVRm1MRVZCUTBFc1RVRkJUeXhEUVVGRExFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFVY3NUVUZCV2l4RFFVRlNMRU5CUVRaQ0xFTkJRek5DTEVkQlFVa3NUVUZCVHl4UFFVRlBMR05CUVZBc1EwRkJjMElzU1VGQmRFSXNRMEZCV0N4RFFVTkJMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFbEJRVllzUTBGQlpTeEpRVUZtTEVWQlEwRXNSMEZCU1N4UFFVRlRMRmRCUVZRc1JVRkJkMElzVDBGQlR5eFhRVUZRTEVOQlFXMUNMRWxCUVc1Q0xFTkJRVFZDTEVOQlFYTkVMRU5CUTNCRUxGVkJRVmtzVDBGQlR5eE5RVUZ1UWl4RFFVTkJMRTlCUVU4c1UwRkJVQ3hEUVVGcFFpeFBRVUZQTEUxQlFWQXNRMEZCWjBJc1NVRkJha01zUlVGRFJDeERRVU5FTEUxQlFWRXNTMEZCVWl4RFFVTkVMRU5CUTBRc1IwRkJTU3haUVVGakxFdEJRV3hDTEVOQlFYbENMRXRCUVVzc1UwRkJUQ3hEUVVGbExFdEJRV1lzUlVGRGVrSXNUVUZCVHl4TlFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCYzBJc1owSkJRWFJDTEVOQlFWQXNRMEZEUkN4RFFXcENSQ3hEUVcxQ1FUdEJRVU5CTzBGQlEwRTdRVUZGUVN4TlFVRkxMRkZCUVV3c1EwRkJaMElzVTBGQlV5eEpRVUZVTEVOQlFXVXNTVUZCWml4RFFVRnhRaXhEUVVOdVF5eExRVUZMTEVsQlFVd3NRMEZCV1N4SlFVRmFMRU5CUTBFc1MwRkJTeXhOUVVGTUxFTkJRVmtzUjBGQlJ5eEpRVUZtTEVWQlEwRXNTMEZCU3l4SlFVRk1MRU5CUVZrc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eEpRVUZxUWl4RFFVRjNRaXhKUVVGNFFpeERRVUVyUWl4TFFVRkxMR1ZCUVV3c1JVRkJNME1zUTBGRFFTeExRVUZMTEUxQlFVd3NRMEZCV1N4SFFVRkhMRWxCUVdZc1JVRkRRU3hMUVVGTExFMUJRVXdzUTBGQll5eExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRTFCUVdwQ0xFTkJRVEJDTEVsQlFURkNMRU5CUVdsRExFdEJRVXNzWlVGQlRDeEZRVUV2UXl4RFFVTkJMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFZEJRVWNzVFVGQlppeEZRVU5CTEV0QlFVc3NTVUZCVEN4RFFVRlpMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeExRVUZ3UWl4RFFVRmFMRU5CUTBFc1MwRkJTeXhOUVVGTUxFTkJRVmtzUjBGQldpeEhRVU5CTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMR05CUVhSQ0xFTkJRVkFzUTBGRFJDeERRVlpFTEVOQldVRTdRVUZEUVR0QlFVVkJMRTFCUVVzc1ZVRkJUQ3hEUVVGclFpeFRRVUZUTEVsQlFWUXNRMEZCWlN4SlFVRm1MRU5CUVhGQ0xFTkJRM0pETEVkQlFVa3NUVUZCVHl4TFFVRkxMRWxCUVV3c1IwRkJZeXhIUVVGSExFZEJRV3BDTEVOQlFYVkNMR2RDUVVGMlFpeERRVUV3UXl4blFrRkJja1FzUTBGRFFTeExRVUZMTEVsQlFVd3NSMEZEUVN4TFFVRkxMRWxCUVV3c1EwRkJXU3hKUVVGYUxFTkJRMEVzUzBGQlN5eExRVUZNTEVOQlFXRXNTMEZCU3l4bFFVRk1MRVZCUVdJc1EwRkRRU3hMUVVGTExFMUJRVXdzUTBGQldTeEhRVUZITEUxQlFXWXNSVUZEUVN4TFFVRkxMRWxCUVV3c1EwRkJXU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNTMEZCY0VJc1EwRkJXaXhEUVVOQkxFdEJRVXNzVFVGQlRDeERRVUZaTEVkQlFWb3NSMEZEUVN4TlFVRlBMRTFCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRnpRaXhKUVVGMFFpeERRVUZRTEVOQlEwUXNRMEZVUkN4RFFWZEJPMEZCUlVFc1RVRkJTeXhSUVVGTUxFTkJRV2RDTEZOQlFWTXNTVUZCVkN4RFFVRmxMRXRCUVdZc1EwRkJjMElzU1VGQmRFSXNRMEZCTkVJc1EwRkRNVU1zUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4TFFVRkxMRmxCUVV3c1EwRkJiMElzUlVGQmNFSXNRMEZEUVN4TFFVRkxMRWxCUVV3c1EwRkJXU3hKUVVGYUxFTkJRMEVzVDBGQlV5eERRVU5RTEVkQlFVa3NUVUZCVHl4UFFVRlBMRk5CUVZBc1JVRkJXQ3hEUVVOQkxFOUJRVThzVlVGQlVDeERRVUZyUWl4SlFVRnNRaXhGUVVOQkxFZEJRVWtzVDBGQlR5eEhRVUZRTEVOQlFWY3NSMEZCUnl4RlFVRmtMRU5CUVVvc1EwRkJkVUlzUTBGRGNrSXNTMEZCU3l4SlFVRk1MRU5CUVZrc1QwRkJUeXhuUWtGQlVDeERRVUYzUWl4TFFVRjRRaXhEUVVGYUxFTkJRMFFzUTBGR1JDeEpRVVZQTEVsQlFVa3NUMEZCVXl4UFFVRlVMRVZCUVc5Q0xFVkJRVVVzVDBGQlR5eEpRVUZRTEVkQlFXZENMRWRCUVVjc1IwRkJia0lzUlVGQk1rSXNUMEZCVHl4UFFVRlFMRU5CUVdVc1YwRkJaaXhGUVVFNFFpeERRVUU1UWl4RlFVRnRReXhQUVVGUExGbEJRVkFzUTBGQmIwSXNTVUZCY0VJc1EwRkJhRVVzUTBGQmVFSXNRMEZCY1Vnc1EwRkRNVWdzVDBGQlR5eFZRVUZRTEVkQlEwUXNRMEZHVFN4SlFVVkJMRWxCUVVrc1MwRkJTeXhGUVVGTUxFTkJRVkVzU1VGQlVpeEZRVUZuUWl4WlFVRm9RaXhGUVVGblF5eEZRVUZGTEZGQlFWVXNUMEZCVHl4SlFVRlFMRWRCUVdkQ0xFZEJRVWNzUjBGQmJrSXNSVUZCTUVJc1QwRkJUeXhaUVVGUUxFTkJRVzlDTEVsQlFYQkNMRU5CUVhCRExFTkJRVVlzUTBGQmNFTXNRMEZCZFVjc1EwRkROVWNzVDBGQlR5eExRVUZRTEVOQlFXRXNUMEZCVHl4VlFVRndRaXhEUVVGblF5d3dSRUZCYUVNc1JVRkRSQ3hEUVVaTkxFbEJSVUVzUTBGRFRDeExRVUZMTEVsQlFVd3NRMEZCV1N4SlFVRmFMRU5CUTBRc1EwRkRSQ3hMUVVGTExGbEJRVXdzUTBGQmEwSXNTVUZCYkVJc1EwRkJkVUlzVDBGQlR5eFZRVUZRTEVOQlFXdENMRWxCUVd4Q0xFTkJRWGRDTEc5Q1FVRjRRaXhEUVVGMlFpeEZRVU5CTEVkQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVZBc1EwRkJWeXhIUVVGSExFdEJRV1FzUTBGQlRDeERRVUV5UWl4TlFVTTFRaXhEUVVORUxFMUJRVThzUzBGQlVDeERRVU5FTEVOQmNrSkVMRU5CZFVKQkxFdEJRVXNzVlVGQlRDeERRVUZyUWl4VFFVRlRMRWxCUVZRc1EwRkJaU3hEUVVNdlFpeExRVUZMTEVWQlFVd3NRMEZCVlN4TFFVRkxMR2RDUVVGTUxFVkJRVllzUTBGRFFTeExRVUZMTEZOQlFVd3NRMEZCWlN4TFFVRkxMRVZCUVhCQ0xFTkJRWGRDTEVsQlFYaENMRVZCUTBRc1EwRklSQ3hEUVV0Qk8wRkJRMEU3UVVGRlFTeE5RVUZMTEdGQlFVd3NRMEZCY1VJc1UwRkJVeXhKUVVGVUxFTkJRV1VzVjBGQlppeERRVUUwUWl4dFFrRkJOVUlzUTBGQmFVUXNRMEZEY0VVc1MwRkJTeXhaUVVGTUxFTkJRV3RDTEVsQlFXeENMRVZCUTBFc1IwRkJTU3hMUVVGTExFOUJRVXdzUTBGQllTeFhRVUZpTEVWQlFUUkNMRU5CUVdoRExFTkJRMFVzUzBGQlN5eFRRVUZNTEVOQlFXbENMRXRCUVVzc1IwRkJUQ3hEUVVGVExFZEJRVWNzU1VGQldpeERRVUZxUWl4RFFVTkdMRWRCUVVrc1ZVRkJWeXhMUVVGTExGZEJRWEJDTEVOQlEwRXNTMEZCU3l4WFFVRk1MRU5CUVcxQ0xFdEJRVXNzVTBGQmVFSXNRMEZEUVN4SFFVRkpMR0ZCUVdVc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eEpRVUZ3UXl4RFFVTkZMRXRCUVVzc1JVRkJUQ3hEUVVGVkxFdEJRVXNzVlVGQlRDeEZRVUZXTEVOQlEwWXNTMEZCU3l4dFFrRkJUQ3hEUVVGNVFpeEpRVUY2UWl4RlFVTkJMRXRCUVVzc2FVSkJRVXdzUTBGQmRVSXNTVUZCZGtJc1EwRkJOa0lzYlVKQlFUZENMRVZCUTBFc1MwRkJTeXhYUVVGTUxFTkJRVzFDTEZGQlFXNUNMRU5CUTBFc1RVRkJUeXhOUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCYUVJc1EwRkJjMElzV1VGQll5eHhRa0ZCWkN4RFFVRnpReXh2UWtGQk5VUXNRMEZCVUN4RFFVTkVMRU5CV2tRc1EwRmpRU3hMUVVGTExHMUNRVUZNTEVOQlFUSkNMRk5CUVZNc1NVRkJWQ3hEUVVGbExFTkJRM2hETEV0QlFVc3NUVUZCVEN4RFFVRlpMRWRCUVVjc1RVRkJaaXhGUVVOQkxFdEJRVXNzVFVGQlRDeERRVUZqTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzUjBGQlJ5eE5RVUY2UWl4RFFVRnBReXhMUVVGcVF5eERRVUYzUXl4TFFVRjRReXhEUVVFclF5eEpRVUV2UXl4RFFVRmtMRU5CUTBRc1EwRklSQ3hEUVV0Qk8wRkJRMEU3UVVGRlFTeE5RVUZMTEZWQlFVd3NRMEZCYTBJc1UwRkJVeXhKUVVGVUxFTkJRV1VzVjBGQlppeERRVUUwUWl4RFFVTTFReXhIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZCTEV0QlFVc3NTVUZCVEN4SFFVTkJMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeEpRVUZzUWl4RFFVRjNRaXhYUVVGNFFpeEZRVU5CTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhKUVVGeVFpeEZRVU5CTEVkQlFVa3NWMEZCV1N4TFFVRkxMRk5CUVV3c1JVRkJhRUlzUTBGRFFTeEhRVUZKTEdkQ1FVRnBRaXhMUVVGeVFpeERRVU5CTEZWQlFWVXNTVUZCVml4RFFVRnBRaXhGUVVGcVFpeERRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRlpMRWRCUVVjc1RVRkJaaXhGUVVOQkxFMUJRVThzUTBGQlF5eExRVUZMTEVkQlFVd3NRMEZCVXl4SFFVRkhMRTFCUVZvc1EwRkJVaXhEUVVFMlFpeERRVU16UWl4SFFVRkpMRTlCUVU4c1IwRkJVQ3hEUVVGWExFZEJRVWNzU1VGQlpDeERRVUZLTEVOQlFYbENMRk5CUTNwQ0xFZEJRVWtzVVVGQlV5eFBRVUZQTEZOQlFWQXNSVUZCWWl4RFFVTkJMRWRCUVVrc1lVRkJZeXhQUVVGUExFZEJRVkFzUTBGQlZ5eEhRVUZITEVsQlFXUXNRMEZCYkVJc1EwRkRRU3hIUVVGSkxHVkJRV2RDTEU5QlFVOHNTVUZCVUN4SFFVRm5RaXhIUVVGSExFbEJRVzVDTEVWQlFUSkNMRTlCUVU4c1MwRkJVQ3hIUVVGcFFpeFJRVUZvUlN4RFFVTkJMRTlCUVU4c2FVSkJRVkFzUTBGQmVVSXNUVUZCZWtJc1JVRkRRU3hQUVVGUExFMUJRVkFzUTBGQlowSXNaVUZCYVVJc1QwRkJUeXhKUVVGUUxFZEJRV2RDTEVkQlFVY3NUVUZCY0VRc1EwRkRRU3hIUVVGSkxFOUJRVThzVFVGQldDeERRVUZ0UWl4RFFVTnFRaXhIUVVGSkxGZEJRVW9zUTBGQmFVSXNUMEZCVHl4VlFVRlFMRWRCUTJwQ0xGbEJRV01zVDBGQlR5eEhRVUZRTEVOQlFWY3NSMEZCUnl4SlFVRmtMRU5CUVdRc1EwRkRRU3hQUVVGUExHbENRVUZRTEVOQlFYbENMRTFCUVhwQ0xFVkJRMFFzUTBGRFJDeFBRVUZQTEVsQlFWQXNRMEZCWXl4UlFVRmtMRU5CUTBFc1IwRkJTU3hWUVVGWExFdEJRV1lzUTBGRFFTeEhRVUZKTEVOQlFVTXNUMEZCVHl4UlFVRmFMRU5CUVhOQ0xFTkJRM0JDTEVkQlFVa3NTMEZCVFN4UFFVRlBMRWRCUVdwQ0xFTkJRMEVzUjBGQlNTeERRVUZETEZkQlFVUXNSVUZCWjBJc1NVRkJTU3hKUVVGS0xFZEJRV0VzV1VGQk4wSXNSVUZCTmtNc1QwRkJUeXhKUVVGUUxFZEJRV2RDTEVkQlFVY3NUVUZCYUVVc1IwRkJNa1VzU1VGQlNTeEpRVUZLTEVkQlFXRXNTMEZCWWl4RlFVRnpRaXhKUVVGSkxFbEJRVW9zUjBGQllTeExRVUU1Unl4RFFVRktMRU5CUVRCSUxFTkJRM2hJTEZOQlFWY3NTVUZCV0N4RFFVTkJMRTlCUVU4c1NVRkJVQ3hEUVVGakxFbEJRVWtzU1VGQmJFSXNRMEZEUVN4SlFVRk5MRTlCUVU4c2FVSkJRVkFzUTBGQmVVSXNUVUZCZWtJc1EwRkJUaXhEUVVORUxFTkJRMFFzUjBGQlNTeERRVUZETEU5QlFVOHNUVUZCVWl4SFFVRnRRaXhKUVVGSkxFbEJRVW9zUjBGQllTeFpRVUZpTEVWQlFUWkNMRWxCUVVrc1NVRkJTaXhIUVVGaExHRkJRVEZETEVWQlEyNUNMRWxCUVVrc1NVRkJTaXhIUVVGaExGTkJRV0lzUlVGQk1FSXNTVUZCU1N4TFFVRktMRWRCUVdNc1lVRkVlRU1zUTBGQlNpeERRVU0wUkN4RFFVTXhSQ3hIUVVGSkxHTkJRVW9zUTBGQmIwSXNUMEZCVHl4TFFVRlFMRU5CUVdFc1NVRkJTU3hMUVVGcVFpeERRVUYzUWl4NVEwRkJlRUlzUlVGRGNFSXNSMEZCU1N4UlFVRktMRU5CUVdNc1QwRkJUeXhMUVVGUUxFTkJRV0VzU1VGQlNTeExRVUZxUWl4RFFVRjNRaXg1UTBGQmVFSXNSVUZEWkN4SFFVRkpMRmRCUVVvc1EwRkJhVUlzVDBGQlR5eExRVUZRTEVOQlFXRXNTVUZCU1N4TFFVRnFRaXhEUVVGM1FpeHJRMEZCZUVJc1JVRkRha0lzVDBGQlR5eEpRVUZRTEVOQlFXTXNZVUZCWkN4RFFVTkJMR1ZCUVdsQ0xFbEJRV3BDTEVOQlEwUXNRMEZEUml4RFFVTkVMRTlCUVU4c1owSkJRVkFzUTBGQmQwSXNVMEZCZUVJc1EwRkJiVU1zVFVGQmJrTXNRMEZCTWtNc1YwRkJNME1zUlVGRFFTeEhRVUZKTEZGQlFVb3NRMEZCWXl4RFFVTmFMRWRCUVVrc1dVRkJZU3hQUVVGUExFbEJRVkFzUjBGQlowSXNTMEZCYUVJc1EwRkJkMElzUTBGQmVFSXNRMEZCTkVJc1EwRkJOME1zUTBGRFFTeEhRVUZKTEU5QlFVOHNTMEZCVUN4RFFVRmhMRTFCUVdJc1EwRkJiMElzVFVGQmNFSXNSMEZCSzBJc1ZVRkJia01zUTBGQkswTXNRMEZETjBNc1IwRkJTU3hQUVVGUkxFOUJRVThzUzBGQlVDeERRVUZoTEV0QlFYcENMRU5CUTBFc1IwRkJTU3hQUVVGUExFbEJRVkFzUjBGQlowSXNTMEZCY0VJc1EwRkRSU3hQUVVGUExHZENRVUZRTEVOQlFYZENMRXRCUVhoQ0xFTkJRU3RDTERoQ1FVRXZRaXhGUVVSR0xFbEJSMFVzVVVGQlR5eG5Ra0ZCVUN4RFFVRjNRaXhMUVVGNFFpeERRVUVyUWl4elEwRkJMMElzUlVGRFNDeERRVU5FTEVkQlFVa3NUMEZCVHl4SlFVRlFMRWRCUVdkQ0xFdEJRV2hDTEVWQlFYbENMRTlCUVU4c1MwRkJVQ3hEUVVGaExFMUJRV0lzUTBGQmIwSXNRMEZCY0VJc1JVRkJkVUlzU1VGQmRrSXNSMEZCWjBNc1lVRkJOMFFzUTBGRFJTeFBRVUZQTEV0QlFWQXNRMEZCWVN4UFFVRlBMRXRCUVZBc1EwRkJZU3hOUVVGaUxFTkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xFdEJRWEJETEVOQlFUSkRMQ3RDUVVFelF5eEZRVU5JTEVOQlEwWXNRMEZEUkN4TFFVRkxMRWxCUVV3c1EwRkJXU3hMUVVGTExGVkJRVXdzUTBGQlowSXNVMEZCYUVJc1EwRkJNa0lzVjBGQk0wSXNRMEZCV2l4RFFVTkJMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xGbEJRV01zYTBKQlFXUXNRMEZCYlVNc2FVSkJRWHBFTEVOQlFWQXNRMEZEUkN4RFFYaEVSQ3hEUVRCRVFTeExRVUZMTEdkQ1FVRk1MRU5CUVhkQ0xGTkJRVk1zVTBGQlZDeERRVUZ2UWl4TlFVRndRaXhEUVVFMFFpeFhRVUUxUWl4RFFVRjVReXhEUVVNdlJDeFBRVUZQTEV0QlFWQXNRMEZCWlN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQmFrSXNRMEZCWml4RFFVTkJMRlZCUVZVc1NVRkJWaXhEUVVGbExFbEJRV1lzUTBGQmIwSXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFMUJRV2hDTEVOQlFYZENMR3RDUVVGNFFpeERRVUZ3UWl4RlFVTkVMRU5CU0VRc1EwRkxRU3hMUVVGTExGbEJRVXdzUTBGQmIwSXNVMEZCVXl4SlFVRlVMRU5CUVdVc1YwRkJaaXhEUVVFMFFpeERRVU01UXl4TFFVRkxMRVZCUVV3c1EwRkJWU3hMUVVGTExFbEJRVXdzUjBGQll5eEhRVUZITEVsQlFXcENMRU5CUVhkQ0xFdEJRVXNzVlVGQlRDeEZRVUY0UWl4RFFVRTBReXhaUVVGakxFdEJRVXNzVlVGQlRDeEZRVUZrTEVOQlFXdERMRWxCUVhoR0xFTkJRMFFzUTBGR1JDeERRVWxCTEV0QlFVc3NaVUZCVEN4RFFVRjFRaXhUUVVGVExFbEJRVlFzUTBGQlpTeERRVU53UXl4TFFVRkxMRlZCUVV3c1EwRkJhMElzUzBGQlN5eEhRVUZNTEVOQlFWTXNSMEZCUnl4UlFVRmFMRVZCUVhkQ0xFdEJRVXNzYlVKQlFVd3NSVUZCZUVJc1EwRkJjVVFzU1VGQmRrVXNRMEZEUkN4RFFVWkVMRU5CU1VFN1FVRkZRU3hOUVVGTExGZEJRVXdzUTBGQmJVSXNVMEZCVXl4SlFVRlVMRU5CUVdVc1EwRkRhRU1zUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4TFFVRkxMRWxCUVV3c1IwRkRRVHRCUVVOQkxFbEJRVWtzUzBGQlN5eEhRVUZNTEVOQlFWTXNSMEZCUnl4SlFVRmFMRU5CUVVvc1EwRkJkVUlzUTBGRGNrSXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeE5RVUYwUWl4RlFVTkJMRXRCUVVzc1RVRkJUQ3hEUVVGakxFdEJRVXNzU1VGQlRDeEhRVUZqTEVkQlFVY3NUVUZCYWtJc1EwRkJNRUlzUzBGQlN5eGhRVUZNTEVWQlFURkNMRU5CUVdsRUxFdEJRVXNzVlVGQlRDeEZRVUV2UkN4RFFVTkJMRXRCUVVzc1UwRkJUQ3hIUVVOQkxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWE5DTEhOQ1FVRjBRaXhEUVVGUUxFTkJRMFFzUTBGRFJDeEhRVUZKTEV0QlFVc3NSMEZCVEN4RFFVRlRMRWRCUVVjc1VVRkJXaXhEUVVGS0xFTkJRVEpDTEVOQlFVVTdRVUZETTBJc1NVRkJTU3hSUVVGVExFdEJRVXNzU1VGQlRDeEZRVUZoTEVkQlFVY3NUVUZCTjBJc1EwRkRRU3hIUVVGSkxFMUJRVThzUzBGQlN5eG5Ra0ZCVEN4RlFVRllMRU5CUTBFc1IwRkJTU3hYUVVGWkxFbEJRV2hDTEVOQlEwRXNSMEZCU1N4RFFVRkRMRTFCUVVRc1IwRkJXU3hMUVVGTExFbEJRVXdzUlVGQllTeHZRa0ZCWWl4RlFVTkJMRXRCUVVzc1NVRkJUQ3hGUVVGaExHbENRVVI2UWl4RFFVRktMRU5CUTJsRUxFTkJReTlETEZWQlFWa3NTMEZCV2l4RFFVTkJMRWRCUVVrc1MwRkJTeXhGUVVGVUxFTkJRV0VzUTBGRFdDeExRVUZMTEVsQlFVd3NRMEZCV1N4TFFVRkxMRWxCUVV3c1JVRkJZU3h2UWtGQllpeERRVU5TTEhGQ1FVUlJMRU5CUlZJc2EwSkJSa29zUTBGSFJDeERRVU5HTEVOQlEwUXNTMEZCU3l4WFFVRk1MRU5CUVcxQ0xFbEJRVzVDTEVOQlEwRXNSMEZCU1N4VFFVRktMRU5CUVdVc1MwRkJTeXhUUVVGTUxFZEJRMllzVFVGQlR5eE5RVUZMTEZWQlFVd3NRMEZCWjBJc1NVRkJhRUlzUTBGQmMwSXNNRUpCUVhSQ0xFTkJRVkFzUTBGRFJDeERRVU5FTzBGQlEwRXNTVUZCU1N4TFFVRkxMREJDUVVGTUxFVkJRVW9zUTBGQmRVTXNRMEZEY2tNc1MwRkJTeXhYUVVGTUxFTkJRVzFDTEV0QlFVc3NZMEZCVEN4RFFVRnZRaXhKUVVGd1FpeERRVUZ1UWl4RFFVTkJMRXRCUVVzc1ZVRkJUQ3hEUVVGclFpeEZRVUZzUWl4RFFVTkJMRXRCUVVzc1RVRkJUQ3hEUVVGakxFbEJRV1FzUTBGRFJDeERRVXBFTEVsQlNVOHNRMEZCUlR0QlFVTlFMRTFCUVVzc1YwRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RFFVTkJMRXRCUVVzc1ZVRkJUQ3hEUVVGclFpeExRVUZMTEhGQ1FVRk1MRVZCUVd4Q0xFTkJRMEVzUjBGQlNTeExRVUZMTEdGQlFVd3NRMEZCYlVJc1RVRkJia0lzUTBGQlNpeERRVUZuUXl4RFFVTTVRaXhMUVVGTExFMUJRVXdzUTBGQll5eExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRTFCUVdwQ0xFTkJRVEJDTEV0QlFVc3NZVUZCVEN4RlFVRXhRaXhEUVVGcFJDeExRVUZMTEZWQlFVd3NSVUZCTDBRc1EwRkRSQ3hEUVVaRUxFbEJSVThzUTBGRFREdEJRVU5CTEV0QlFVc3NSMEZCU1N4SFFVRkpMRU5CUVdJc1EwRkJaMElzUlVGQlNTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1RVRkJjRU1zUTBGQk5FTXNSMEZCTlVNc1EwRkJhVVFzUTBGREwwTXNSMEZCU1N4UFFVRlBMRkZCUVZBc1EwRkJaMElzU1VGQmFFSXNRMEZCY1VJc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xFdEJRVzVDTEVOQlFYbENMRWxCUVRsRExFZEJRWFZFTEU5QlFVOHNZVUZCVUN4RFFVRnhRaXhKUVVGeVFpeERRVUV3UWl4TFFVRkxMRlZCUVV3c1EwRkJaMElzUTBGQmFFSXNSVUZCYlVJc1MwRkJia0lzUTBGQmVVSXNTVUZCYmtRc1EwRkJNMFFzUTBGQmNVZ3NRMEZEYmtnc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TFFVRnVRaXhEUVVGNVFpeExRVUV6UXl4RlFVTkVMRU5CUTBZc1EwRkZSQ3hMUVVGTExFMUJRVXdzUTBGQll5eEpRVUZrTEVOQlEwUXNRMEZEUkN4TFFVRkxMRk5CUVV3c1IwRkRSQ3hEUVVORUxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWE5DTEhkQ1FVRjBRaXhEUVVGUUxFTkJRMFFzUTBGdVJFUXNRMEZ4UkVFc1MwRkJTeXd3UWtGQlRDeERRVUZyUXl4VlFVRlhMRU5CUXpORExFMUJRVThzVFVGQlN5eEpRVUZNTEVOQlFWVXNUMEZCVml4RlFVRnhRaXhMUVVGTExFdEJRVXdzUlVGQk5VSXNRMEZEUkN4RFFVWkVMRU5CU1VFN1FVRkZRU3hOUVVGTExIRkNRVUZNTEVOQlFUWkNMRlZCUVZjc1EwRkRkRU1zUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4SFFVRkpMRTlCUVZFc1JVRkJXaXhEUVVGblFpeE5RVUZSTEVsQlFYaENMRU5CUTBFN1FVRkRRU3hOUVVGTExFMUJRVXdzUTBGQldTeEhRVUZITEUxQlFXWXNSVUZEUVN4TlFVRlBMRU5CUVVNc1MwRkJTeXhIUVVGTUxFTkJRVk1zUjBGQlJ5eE5RVUZhTEVOQlFWSXNRMEZCTmtJc1EwRkRNMElzUjBGQlNTeERRVUZETEV0QlFVd3NRMEZCV1N4RFFVTldMRTlCUVU4c1RVRkJVQ3hEUVVGakxFZEJRVWNzUzBGQmFrSXNSVUZEUVN4SFFVRkpMRTlCUVU4c2EwSkJRVkFzUTBGQk1FSXNSMEZCUnl4TlFVRTNRaXhEUVVGS0xFTkJRVEJETEUxQlF6TkRMRU5CU0VRc1NVRkhUeXhQUVVGUkxFdEJRVklzUTBGRlVDeEhRVUZKTEUxQlFVOHNUMEZCVHl4VFFVRlFMRVZCUVZnc1EwRkRRU3hMUVVGTExFdEJRVXdzUTBGQllTeFBRVUZQTEZWQlFWQXNRMEZCYTBJc1QwRkJUeXhKUVVGUUxFZEJRV2RDTEVkQlFVY3NVVUZCY2tNc1EwRkJZaXhEUVVOQkxFdEJRVXNzVVVGQlRDeERRVUZuUWl4UFFVRlBMR0ZCUVZBc1EwRkJjVUlzU1VGQmNrSXNSVUZCTmtJc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEVsQlFXeENMRU5CUVRkQ0xFTkJRWFZFTEV0QlFVc3NTMEZCTlVVc1EwRkRRU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eFBRVUZQTEZWQlFWQXNRMEZCYTBJc1NVRkJiRUlzUTBGQmQwSXNhVUpCUVhoQ0xFTkJRVmdzUlVGRFJDeERRVU5FTEUxQlFVOHNUVUZCVUN4RFFVTkVMRU5CYkVKRUxFTkJiMEpCTzBGQlJVRXNUVUZCU3l4WFFVRk1MRU5CUVcxQ0xGTkJRVk1zU1VGQlZDeERRVUZsTEVOQlEyaERMRXRCUVVzc1NVRkJUQ3hIUVVOQk8wRkJRMEVzU1VGQlNTeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRTFCUVhKQ0xFTkJRVFpDTEVOQlF6TkNMRXRCUVVzc1ZVRkJUQ3hEUVVGclFpeExRVUZzUWl4RFFVTkJMRXRCUVVzc1RVRkJUQ3hEUVVGakxFdEJRVXNzWVVGQlRDeEZRVUZrTEVOQlEwUXNRMEZJUkN4SlFVZFBMRU5CUTB3c1MwRkJTeXhWUVVGTUxFTkJRV3RDTEV0QlFVc3NjVUpCUVV3c1JVRkJiRUlzUTBGRFFTeExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFMUJRWFJDTEVWQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVdNc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eE5RVUZxUWl4RFFVRXdRaXhMUVVGTExHRkJRVXdzUlVGQk1VSXNRMEZCYVVRc1MwRkJTeXhWUVVGTUxFVkJRUzlFTEVOQlEwUXNRMEZEUkN4TFFVRkxMRk5CUVV3c1IwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeHRRa0ZCZEVJc1EwRkJVQ3hEUVVORUxFTkJZa1FzUTBGbFFUdEJRVVZCTEUxQlFVc3NjVUpCUVV3c1EwRkJOa0lzVlVGQlZ5eERRVU4wUXl4SFFVRkpMRkZCUVZNc1NVRkJZaXhEUVVWQkxFZEJRVWtzVDBGQlVTeEZRVUZhTEVOQlFXZENMRTFCUVZFc1NVRkJlRUlzUTBGRFFTeEhRVUZKTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1NVRkJja0lzUTBGQk1rSXNRMEZEZWtJN1FVRkRRU3hKUVVGSkxFMUJRVThzUzBGQlN5eFRRVUZNTEVWQlFWZ3NRMEZEUVN4TFFVRkxMRXRCUVV3c1EwRkJZU3hMUVVGTExGVkJRVXdzUlVGQllpeERRVU5CTEV0QlFVc3NVMEZCVEN4RFFVRmxMRXRCUVVzc1MwRkJjRUlzUTBGQk1rSXNTVUZCTTBJc1JVRkRRU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUZMTEZWQlFVd3NRMEZCWjBJc1NVRkJhRUlzUTBGQmMwSXNkMEpCUVhSQ0xFTkJRVmdzUlVGRFFTeEhRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRk1MRU5CUVZNc1IwRkJSeXhMUVVGYUxFTkJRVXdzUTBGQmVVSXNUVUZCVHl4TlFVRlFMRU5CUXpGQ0xFTkJRMFFzUjBGQlNTeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRWxCUVhKQ0xFTkJRVEpDTEVOQlEzcENMRWRCUVVrc1VVRkJVeXhMUVVGTExGTkJRVXdzUlVGQllpeERRVU5CTEV0QlFVc3NTVUZCVEN4SFFVTkJMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTVUZCZEVJc1JVRkRRU3hQUVVGUExFdEJRVkFzUTBGQlpTeExRVUZMTEZWQlFVd3NSVUZCWml4RFFVTkJMRXRCUVVzc1UwRkJUQ3hEUVVGbExFOUJRVThzUzBGQmRFSXNRMEZCTmtJc1NVRkJOMElzUlVGRFFTeE5RVUZOTEVsQlFVNHNRMEZCVnl4TFFVRkxMRlZCUVV3c1EwRkJaMElzVFVGQmFFSXNRMEZCZDBJc01FSkJRWGhDTEVOQlFWZ3NSVUZEUVN4TlFVRlBMRTFCUVZBc1EwRkRSQ3hEUVVORUxFdEJRVXNzVFVGQlRDeERRVUZaTEVkQlFVY3NUVUZCWml4RlFVTkJMRTFCUVU4c1EwRkJReXhMUVVGTExFZEJRVXdzUTBGQlV5eEhRVUZITEUxQlFWb3NRMEZCVWl4RFFVRTJRaXhEUVVNelFpeEhRVUZKTEVOQlFVTXNTMEZCVEN4RFFVRlpMRU5CUTFZc1QwRkJUeXhOUVVGUUxFTkJRV01zUjBGQlJ5eExRVUZxUWl4RlFVTkJMRWRCUVVrc1QwRkJUeXhyUWtGQlVDeERRVUV3UWl4SFFVRkhMRTFCUVRkQ0xFTkJRVW9zUTBGQk1FTXNUVUZETTBNc1EwRklSQ3hKUVVkUExFOUJRVkVzUzBGQlVpeERRVVZRTEVkQlFVa3NVVUZCVXl4UFFVRlBMRk5CUVZBc1JVRkJZaXhEUVVOQkxFOUJRVThzVVVGQlVDeERRVUZyUWl4UFFVRlBMRlZCUVZBc1EwRkJhMElzU1VGQmJFSXNRMEZCYkVJc1EwRkRRU3hIUVVGSkxFOUJRVThzWVVGQlVDeERRVUZ4UWl4SlFVRnlRaXhEUVVGS0xFTkJRV2RETEVOQlF6bENMRTlCUVU4c1MwRkJVQ3hEUVVGbExFOUJRVThzVlVGQlVDeEZRVUZtTEVOQlEwUXNRMEZHUkN4SlFVVlBMRU5CUTB3c1QwRkJUeXhMUVVGUUxFTkJRV1VzVDBGQlR5eFJRVUYwUWl4RFFVTkJMRWRCUVVrc1QwRkJUeXhUUVVGUUxFTkJRV2xDTEU5QlFVOHNTMEZCVUN4RFFVRmhMRWxCUVRsQ0xFTkJRVW9zUTBGQmVVTXNUMEZCVHl4VlFVRlFMRU5CUVd0Q0xFOUJRVThzUzBGQlVDeERRVUZoTEV0QlFTOUNMRVZCUTNwRExFZEJRVWtzVDBGQlR5eHRRa0ZCVUN4RFFVRXlRaXhKUVVFelFpeERRVUZuUXl4UFFVRlBMRXRCUVZBc1EwRkJZU3hKUVVFM1F5eERRVUZLTEVOQlFYZEVMRTlCUVU4c1MwRkJVQ3hEUVVGaExFOUJRVThzUzBGQlVDeERRVUZoTEV0QlFURkNMRU5CUVdsRExHZENRVUZyUWl4UFFVRlBMRXRCUVZBc1EwRkJZU3hKUVVFdlFpeERRVUZ6UXl4bFFVRjJSU3hGUVVONlJDeERRVU5FTEU5QlFVOHNVMEZCVUN4RFFVRnBRaXhQUVVGUExFdEJRWGhDTEVOQlFTdENMRWxCUVM5Q0xFVkJRMEVzVFVGQlRTeEpRVUZPTEVOQlFWY3NUMEZCVHl4VlFVRlFMRU5CUVd0Q0xFMUJRV3hDTEVOQlFUQkNMR2xDUVVFeFFpeERRVUZZTEVWQlEwUXNRMEZEUkN4TlFVRlBMRTFCUVZBc1EwRkRSQ3hEUVhwRFJDeERRVEpEUVN4SFFVRkpMRTFCUVU4c1QwRkJUeXhUUVVGc1FpeERRVVZCTzBGQlEwRTdRVUZGUVN4TlFVRkxMRmxCUVV3c1EwRkJiMElzVTBGQlV5eEpRVUZVTEVOQlFXVXNVMEZCWml4RFFVRXdRaXhEUVVNMVF5eEhRVUZKTEZGQlFWTXNTVUZCWWl4RFFVVkJMRWRCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVjBGQllpeEZRVUUwUWl4RFFVRTFRaXhGUVVGcFF5eEpRVUZ5UXl4RFFVRXlReXhEUVVONlF5eFBRVUZSTEV0QlFVc3NTVUZCWWl4RlFVTkJMRWxCUVVzc1dVRkJUQ3hEUVVOQkxFbEJRVXNzWlVGQlRDeERRVU5CTEVsQlFVc3NZMEZCVEN4RFFVTkZMRTFCUlVZc1NVRkJTeXhyUWtGQlRDeERRVU5GTEV0QlFVc3NTVUZCVEN4RFFVRlpMR1ZCUVZvc1EwRkRRU3hKUVVGTExFZEJRVWtzUjBGQlNTeERRVUZpTEVOQlFXZENMRVZCUVVrc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEUxQlFYQkRMRU5CUVRSRExFZEJRVFZETEVOQlFXbEVMRU5CUXk5RExFZEJRVWtzVFVGQlR5eExRVUZMTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldDeERRVU5CTEVkQlFVa3NTMEZCU3l4SlFVRk1MRWRCUVdNc1RVRkJiRUlzUTBGQk1FSXNUMEZCVHl4TFFVRlFMRU5CUVdFc1MwRkJTeXhIUVVGTUxFTkJRVk1zUzBGQmRFSXNRMEZCTmtJc0swTkJRVGRDTEVWQlF6RkNMRTlCUVU4c1dVRkJVQ3hEUVVGdlFpeExRVUZMTEV0QlFYcENMRU5CUVdkRExGTkJRV2hETEVWQlEwUXNRMEZEUkN4TlFVVkdMRWxCUVVzc2FVSkJRVXdzUTBGRFJTeExRVUZMTEVsQlFVd3NRMEZCV1N4alFVRmFMRU5CUTBFc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4TFFVRkxMRkZCUVROQ0xFTkJRWEZETEZOQlFYSkRMRVZCUTBFc1RVRkZSaXhKUVVGTExITkNRVUZNTEVOQlEwVXNSMEZCU1N4TFFVRkxMRkZCUVV3c1IwRkJhMElzUjBGQmRFSXNRMEZCTWtJc1EwRkRla0lzUzBGQlN5eEpRVUZNTEVOQlFWa3NiVUpCUVZvc1EwRkRRU3hOUVVGUExFMUJRVXNzVVVGQldpeERRVU5CTzBGQlEwUXNSVUZLUkN4SlFVbFBMRU5CUTB3c1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQlN5eEpRVUZNTEVOQlFWVXNSMEZCY2tJc1EwRkJNRUlzTmtSQlFURkNMRVZCUTBFc1RVRkRSQ3hEUVVWSUxFbEJRVXNzYlVKQlFVd3NRMEZEUlN4SFFVRkpMRXRCUVVzc1MwRkJUQ3hEUVVGWExFbEJRVmdzUjBGQmIwSXNhVUpCUVhoQ0xFTkJRMFVzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJkRUlzUTBGQk5rSXNORU5CUVRkQ0xFVkJRMFlzVFVGRlJpeEpRVUZMTEhsQ1FVRk1MRU5CUTBVc1MwRkJTeXhWUVVGTUxFTkJRV3RDTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhMUVVGTExGVkJRWFpDTEVOQlFXMURMRk5CUVc1RExFTkJRV3hDTEVOQlEwRXNUVUZGUml4SlFVRkxMR3RDUVVGTUxFTkJRMFVzUjBGQlNTeERRVUZETEZOQlFVd3NRMEZCWjBJc1RVRkZiRUlzVVVGRFJTeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRkxMRXRCUVdoQ0xFTkJRWFZDTEhGQ1FVRjJRaXhGUVRORFJpeERRVFpEUkN4RFFVTkVMRTFCUVU4c1MwRkJVQ3hEUVVORUxFTkJia1JFTEVOQmNVUkJPMEZCUlVFc1RVRkJTeXhuUWtGQlRDeERRVUYzUWl4VFFVRlRMRkZCUVZRc1EwRkJiVUlzVTBGQmJrSXNRMEZCT0VJc1EwRkRjRVFzUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4SFFVRkpMRXRCUVUwc1UwRkJVeXhOUVVGdVFpeERRVU5CTEVkQlFVa3NSMEZCU2l4RFFVRlRMRU5CUTFBc1IwRkJTU3hOUVVGUExGTkJRVk1zU1VGQlRTeERRVUZtTEVOQlFWZ3NRMEZEUVN4SFFVRkpMRTFCUVZFc1MwRkJTeXhKUVVGTUxFVkJRV0VzWVVGQmVrSXNRMEZCZDBNc1EwRkRkRU1zUlVGQlJTeEhRVUZHTEVOQlEwUXNRMEZHUkN4SlFVVlBMRWxCUVVrc1RVRkJVU3hMUVVGTExFbEJRVXdzUlVGQllTeGxRVUY2UWl4RFFVRXdReXhEUVVNdlF5eExRVUZMTEVsQlFVd3NRMEZCV1N4aFFVRmFMRU5CUTBFc1IwRkJTU3hMUVVGTkxFdEJRVXNzVVVGQlppeERRVU5CTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhIUVVGc1FpeERRVUYxUWl4VFFVRjJRaXhGUVVOQkxFZEJRVWtzU1VGQlNTeEpRVUZLTEVkQlFXRXNXVUZCWWl4RlFVRTJRaXhKUVVGSkxFbEJRVW9zUjBGQllTeHJRa0ZCTVVNc1JVRkJaMFVzU1VGQlNTeEpRVUZLTEVkQlFXRXNZMEZCYWtZc1EwRkRSU3hMUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCU1N4TFFVRndRaXhGUVVOR0xFVkJRVVVzUjBGQlJpeERRVU5FTEVOQlJVUXNSMEZCU1N4WFFVRmhMRWxCUVdJc1JVRkJjVUlzUzBGQlN5eEpRVUZNTEVkQlFXTXNZVUZCYmtNc1JVRkJiMFFzUzBGQlN5eFJRVUZNTEVOQlFXTXNTVUZCWkN4SFFVRjFRaXhaUVVFdlJTeERRVU5GTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGTExGRkJRVXdzUTBGQll5eExRVUU1UWl4RlFVTklMRU5CUTBRc1NVRkJTeXhIUVVGSkxFZEJRVWtzUTBGQllpeERRVUZuUWl4RlFVRkpMRWRCUVhCQ0xFTkJRWGxDTEVkQlFYcENMRU5CUVRoQ0xFTkJRelZDTEVkQlFVa3NTMEZCVFN4VFFVRlRMRU5CUVZRc1EwRkJWaXhEUVVOQkxFZEJRVWtzUjBGQlNpeERRVUZUTEU5QlFVOHNXVUZCVUN4RFFVRnZRaXhIUVVGd1FpeERRVUY1UWl4VFFVRjZRaXhGUVVOV0xFTkJRMFFzVFVGQlR5eFRRVUZRTEVOQlEwUXNRMEY2UWtRc1EwRXlRa0U3UVVGRlFTeE5RVUZMTEZkQlFVd3NRMEZCYlVJc1UwRkJVeXh6UWtGQlZDeERRVUZwUXl4RFFVTnNSQ3hIUVVGSkxFMUJRVThzUzBGQlN5eFRRVUZNTEVWQlFWZ3NRMEZEUVN4TFFVRkxMRWxCUVV3c1IwRkRRU3hMUVVGTExGRkJRVXdzUTBGQlowSXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeExRVUYwUWl4RFFVRTJRaXh6UWtGQk4wSXNRMEZCYUVJc1EwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeGxRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRk1SQ3hEUVU5QkxFdEJRVXNzVTBGQlRDeERRVUZwUWl4VFFVRlRMR0ZCUVZRc1EwRkJkMElzUTBGRGRrTXNSMEZCU1N4TlFVRlBMRXRCUVVzc1UwRkJUQ3hGUVVGWUxFTkJRMEVzUzBGQlN5eEpRVUZNTEVkQlJVRTdRVUZEUVN4SlFVRkpMR0ZCUVVvc1EwRkJiVUlzUzBGQlN5eFJRVUZNTEVOQlFXZENMRXRCUVVzc1NVRkJUQ3hIUVVGakxFZEJRVWNzU1VGQmFrSXNRMEZCZDBJc1MwRkJTeXhWUVVGTUxFVkJRWGhDTEVOQlFUUkRMRXRCUVVzc1ZVRkJUQ3hGUVVFMVJDeERRVUZ1UWl4SlFVTkxMRTFCUVVzc1VVRkJUQ3hEUVVGblFpeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRWxCUVdwQ0xFVkJRWGxDTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1VVRkJNVU1zUTBGQmNVUXNTMEZCU3l4blFrRkJUQ3hGUVVGeVJDeERRVUVyUlN4TFFVRkxMRlZCUVV3c1JVRkJMMFlzUTBGRlRDeE5RVUZQTEUxQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGb1FpeERRVUZ6UWl4aFFVRjBRaXhEUVVGUUxFTkJRMFFzUTBGVVJDeERRVmRCTzBGQlJVRXNUVUZCU3l4blFrRkJUQ3hEUVVGM1FpeFZRVUZYTEVOQlEycERMRWRCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVjBGQllpeERRVUV5UWl4RFFVRXZRaXhEUVVGclF5eE5RVUZQTEUxQlFVc3NWVUZCVEN4RlFVRlFMRU5CUTJ4RExFOUJRVkVzUzBGQlN5eEpRVUZpTEVWQlEwRXNTVUZCU3l4SlFVRkhMRWxCUVZJc1EwRkRSU3hOUVVGUExFMUJRVXNzVlVGQlRDeEZRVUZRTEVOQlJVWXNTVUZCU3l4SlFVRkhMRkZCUVZJc1EwRkRSU3hIUVVGSkxFMUJRVThzUzBGQlN5eFRRVUZNTEVWQlFWZ3NRMEZEUVN4TFFVRkxMRWxCUVV3c1IwRkRRU3hMUVVGTExGRkJRVXdzUTBGQlowSXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeEhRVUZITEZGQlFYcENMRU5CUVcxRExFbEJRVzVETEVOQlFYbERMRWxCUVhwRExFTkJRV2hDTEVOQlEwRXNUVUZCVHl4TlFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCYzBJc1kwRkJkRUlzUTBGQlVDeERRVVZHTEVsQlFVc3NTVUZCUnl4TlFVRlNMRU5CUTBVc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eEpRVUZrTEVOQlFWQXNRMEZGUml4UlFVTkZMRXRCUVVzc1ZVRkJUQ3hIUVdSR0xFTkJaMEpFTEVOQmJFSkVMRU5CYjBKQkxFdEJRVXNzWjBKQlFVd3NRMEZCZDBJc1UwRkJVeXhMUVVGVUxFTkJRV2RDTEZWQlFXaENMRU5CUVRSQ0xHdENRVUUxUWl4RFFVRm5SQ3hoUVVGb1JDeERRVUVyUkN4RFFVTnlSaXhIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZCTEVkQlFVa3NUVUZCVHl4RlFVRllMRU5CUVdVc1RVRkJVU3hKUVVGMlFpeERRVU5CTEUxQlFVOHNRMEZCUXl4TFFVRkxMRWRCUVV3c1EwRkJVeXhMUVVGVUxFTkJRVklzUTBGQmVVSXNRMEZEZGtJc1IwRkJTU3hMUVVGS0xFTkJRVmNzVFVGQlVTeExRVUZTTEVOQlFWZ3NTVUZEU3l4UlFVRlBMRTFCUVZBc1EwRkJZeXhIUVVGSExFdEJRV3BDTEVWQlEwd3NSMEZCU1N4WlFVRmpMRTlCUVU4c1NVRkJVQ3hIUVVGblFpeEhRVUZITEV0QlFYSkRMRU5CUVRSRExFTkJRekZETEV0QlFVc3NTVUZCVEN4RFFVRlZMRWxCUVZZc1JVRkRSQ3hEUVVaRUxFbEJSVThzU1VGQlNTeHZRa0ZCYzBJc1QwRkJUeXhyUWtGQlVDeERRVUV3UWl4TFFVRXhRaXhEUVVFeFFpeERRVUUwUkN4RFFVTnFSU3hOUVVORUxFTkJSazBzU1VGRlFTeEpRVUZKTEU5QlFVOHNTVUZCVUN4SFFVRm5RaXhIUVVGSExGRkJRWFpDTEVOQlFXbERMRU5CUTNSRExFZEJRVWtzVFVGQlR5eFBRVUZQTEZOQlFWQXNRMEZCYVVJc1lVRkJha0lzUTBGQldDeERRVU5CTEU5QlFVOHNiMEpCUVZBc1EwRkJORUlzU1VGQk5VSXNSVUZEUVN4TFFVRkxMRWxCUVV3c1EwRkJWU3hKUVVGV0xFVkJRMEVzUjBGQlNTeFBRVUZQTEVsQlFWQXNSMEZCWjBJc1IwRkJSeXhMUVVGMlFpeERRVUU0UWl4UFFVRlBMRXRCUVZBc1EwRkJZU3hQUVVGUExFdEJRWEJDTEVOQlFUSkNMQ3REUVVFelFpeEZRVU01UWl4UFFVRlBMRTFCUVZBc1EwRkJZeXhMUVVGa0xFVkJRMEVzVFVGRFJDeERRVkJOTEVsQlQwRXNRMEZEVEN4SFFVRkpMRTFCUVU4c1QwRkJUeXhwUWtGQlVDeERRVUY1UWl4UFFVRlBMRXRCUVdoRExFTkJRWFZETEU5QlFVOHNVVUZCT1VNc1EwRkJXQ3hEUVVOQkxFOUJRVThzYjBKQlFWQXNRMEZCTkVJc1NVRkJOVUlzUlVGRFFTeExRVUZMTEVsQlFVd3NRMEZCVlN4SlFVRldMRVZCUTBRc1EwRkRSaXhEUVVORUxFMUJRVThzUzBGQlVDeERRVU5FTEVOQmVrSkVMRU5CTWtKQkxFdEJRVXNzYjBKQlFVd3NRMEZCTkVJc1UwRkJVeXhMUVVGVUxFTkJRV2RDTEVOQlF6RkRMRTFCUVU4c1RVRkJVQ3hEUVVORUxFTkJSa1FzUTBGSlFUdEJRVVZCTEUxQlFVc3NhVUpCUVV3c1EwRkJlVUlzVTBGQlV5eFJRVUZVTEVOQlFXMUNMRkZCUVc1Q0xFTkJRVFpDTEVsQlFUZENMRU5CUVcxRExFTkJRekZFTEV0QlFVOHNUVUZCVVN4TFFVRkxMR2RDUVVGTUxFVkJRV1lzUTBGRFFTeEhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1EwRkJNa0lzUTBGQk0wSXNSVUZCWjBNc1EwRkJReXhMUVVGTExFZEJRVXdzUTBGQlV5eEhRVUZITEVWQlFWb3NRMEZCY2tNc1EwRkJjMFFzVFVGQlR5eExRVUZRTEVOQlEzUkVMRWRCUVVrc1RVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNVVUZCYWtJc1EwRkJNa0lzVVVGQk0wSXNRMEZCV0N4RFFVTkJMRXRCUVVzc1NVRkJUQ3hEUVVGWkxFbEJRVm9zUTBGRFFTeExRVUZMTEV0QlFVd3NRMEZCWVN4TFFVRkxMR2RDUVVGTUxFVkJRV0lzUTBGRFFTeE5RVUZQTEUxQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGb1FpeERRVUZ6UWl4dFFrRkJkRUlzUTBGQlVDeERRVU5FTEVOQlVFUXNRMEZUUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhUUVVGTUxFTkJRV2xDTEZOQlFWTXNTVUZCVkN4RFFVRmxMRk5CUVdZc1EwRkJNRUlzV1VGQk1VSXNRMEZCZDBNc1EwRkRka1FzUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4UFFVRlJMRXRCUVVzc1NVRkJZaXhGUVVOQkxFbEJRVXNzV1VGQlRDeERRVU5GTEVkQlFVa3NTMEZCU3l4TlFVRk1MRVZCUVdVc1MwRkJTeXgxUWtGQlRDeERRVUUyUWl4SlFVRTNRaXhEUVVGclF5eExRVUZMTEVsQlFYWkRMRU5CUVc1Q0xFTkJRMFVzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhMUVVGTExFdEJRVE5DTEVOQlFXdERMRU5CUVVNc1ZVRkJXU3hWUVVGYUxFTkJRWGxDTEdWQlFURkNMRVZCUVRaRExFdEJRVXNzU1VGQmJFUXNRMEZCZVVRc2FVSkJRVE5HTEVWQlEwWXNSMEZCU1N4WlFVRktMRU5CUVd0Q0xFTkJRMmhDTEVkQlFVa3NTVUZCU1N4WlFVRktMRU5CUVd0Q0xFdEJRVXNzU1VGQmRrSXNRMEZCU2l4RFFVTkZMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTMEZCU3l4TFFVRXpRaXhEUVVGclF5eHhRa0ZCYkVNc1JVRkRSaXhoUVVGaExFdEJRVXNzU1VGQmJFSXNSVUZCTUVJc1NVRkJNVUlzUTBGRFJDeERRVU5FTEUxQlJVWXNTVUZCU3l4clFrRkJUQ3hEUVVORkxFZEJRVWtzVTBGQlNpeERRVUZsTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzUzBGQlN5eExRVUV6UWl4RFFVRnJReXhEUVVGRExGVkJRVmtzVTBGQldpeERRVUYzUWl4alFVRjZRaXhGUVVFeVF5eHZRa0ZCTjBVc1JVRkRaaXhOUVVWR0xFbEJRVXNzWlVGQlRDeERRVU5GTEVsQlFVc3NSMEZCU1N4SFFVRkpMRU5CUVdJc1EwRkJaMElzUlVGQlNTeExRVUZMTEZWQlFVd3NRMEZCWjBJc1RVRkJjRU1zUTBGQk5FTXNSMEZCTlVNc01FSkJRMFVzVDBGQlR5eFRRVUZRTEVOQlFXbENMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhMUVVGd1F5eERRVUV5UXl4VFFVRXpReXhEUVVGelJDeFpRVUYwUkN4RlFVUkdMRU5CUlVFc1RVRkZSaXhKUVVGTExHTkJRVXdzUTBGRFJTeEpRVUZMTEVkQlFVa3NTMEZCVFN4RFFVRm1MRU5CUVd0Q0xFbEJRVTBzUzBGQlN5eFJRVUZNTEVOQlFXTXNUVUZCZEVNc1EwRkJPRU1zUzBGQk9VTXNRMEZCY1VRc1EwRkRia1FzUjBGQlNTeE5RVUZQTEV0QlFVc3NVVUZCVEN4RFFVRmpMRWRCUVdRc1EwRkJXQ3hEUVVOQkxFZEJRVWtzU1VGQlNpeERRVUZWTEU5QlFVOHNVMEZCVUN4RFFVRnBRaXhKUVVGcVFpeERRVUYxUWl4VFFVRjJRaXhEUVVGclF5eFpRVUZzUXl4RlFVTllMRU5CUTBRc1RVRkZSaXhKUVVGTExHMUNRVUZNTEVOQlEwVXNTMEZCU3l4VFFVRk1MRU5CUVdVc1MwRkJTeXhKUVVGd1FpeERRVUV3UWl4VFFVRXhRaXhEUVVGeFF5eFpRVUZ5UXl4RlFVTkJMRTFCUlVZc1NVRkJTeXhoUVVGTUxFTkJRMFVzUzBGQlN5eFRRVUZNTEVOQlFXVXNTMEZCU3l4UlFVRndRaXhEUVVFNFFpeFRRVUU1UWl4RFFVRjVReXhaUVVGNlF5eEZRVU5CTEUxQlJVWXNTVUZCU3l4NVFrRkJUQ3hEUVVORkxFdEJRVXNzVTBGQlRDeERRVUZsTEV0QlFVc3NWVUZCY0VJc1EwRkJaME1zVTBGQmFFTXNRMEZCTWtNc1dVRkJNME1zUlVGRFFTeE5RVVZHTEZGQlEwVXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhMUVVGb1FpeERRVUYxUWl4RFFVRkRMRlZCUVZrc1UwRkJXaXhEUVVGM1FpeGpRVUY2UWl4RlFVRXlReXhUUVVGc1JTeEZRWGhEUml4RFFUQkRSQ3hEUVRkRFJDeERRU3REUVN4SFFVRkpMRTFCUVU4c1QwRkJUeXhUUVVGc1FpeERRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhqUVVGTUxFTkJRWE5DTEZOQlFWTXNTVUZCVkN4RFFVRmxMRkZCUVdZc1EwRkJlVUlzUTBGRE4wTXNSMEZCU1N4TFFVRkxMRTlCUVV3c1EwRkJZU3hYUVVGaUxFVkJRVFJDTEVOQlFUVkNMRWRCUVd0RExFdEJRVXNzVVVGQlRDeEZRVUZwUWl4TFFVRkxMRTFCUVhSQ0xFVkJRV2RETEV0QlFVc3NVMEZCZGtVc1EwRkJTaXhEUVVORkxFOUJRMFlzUjBGQlNTeExRVUZOTEV0QlFVc3NSMEZCWml4RFFVTkJMRWRCUVVrc1MwRkJTaXhEUVVOQkxFOUJRVkVzU1VGQlNTeEpRVUZhTEVWQlEwRXNTVUZCU3l4WlFVRk1MRU5CUVcxQ0xFdEJRVThzU1VGQlNTeEpRVUZZTEVOQlFXbENMRTFCUTNCRExFbEJRVXNzVTBGQlRDeERRVUZuUWl4TFFVRlBMRTlCUVU4c1NVRkJTU3hMUVVGWUxFTkJRVkFzUTBGQk1FSXNUVUZETVVNc1VVRkJVeXhQUVVoVUxFTkJTMEVzUjBGQlNTeE5RVUZQTEV0QlFVc3NTVUZCYUVJc1EwRkRRU3hIUVVGSkxFdEJRVXNzVDBGQlRDeERRVUZoTEZkQlFXSXNSVUZCTkVJc1EwRkJhRU1zUTBGQmJVTXNRMEZEYWtNc1IwRkJTU3hQUVVGVExGZEJRVlFzUlVGQmQwSXNUMEZCVXl4TlFVRnlReXhEUVVFMlF5eERRVU16UXl4SFFVRkpMRk5CUVZNc1MwRkJZaXhEUVVGdlFpeExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFbEJRVWtzUzBGQk1VSXNRMEZCYVVNc2IwTkJRV3BETEVWQlEzQkNMRk5CUVZNc1MwRkJWQ3hEUVVGcFFpeEpRVUZxUWl4RFFVTkVMRU5CUTBRc1QwRkRSQ3hEUVVORUxFdEJRVThzU1VGQlRTeEpRVUZpTEVOQlEwRXNSMEZCU1N4UFFVRlJMRk5CUVZNc1NVRkJWQ3hEUVVGYUxFTkJRMEVzUjBGQlNTeExRVUZLTEVOQlFWY3NRMEZEVkN4SFFVRkpMRlZCUVZjc1QwRkJVeXhOUVVGNFFpeERRVU5CTEVkQlFVa3NRMEZCUXl4TFFVRkxMRTFCUVV3c1JVRkJaU3hSUVVGb1FpeEhRVUUyUWl4TlFVRk5MRWxCUVU0c1EwRkJOMElzUlVGQk5FTXNSVUZCUlN4VFFVRlhMRTFCUVUwc1NVRkJia0lzUTBGQmFFUXNRMEZEUlN4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEVsQlFVa3NTMEZCTVVJc1EwRkJhVU1zTUVKQlFXcERMRVZCUTBnc1EwRktSQ3hKUVVsUExFTkJRMHdzVFVGQlVTeFRRVUZUTEVsQlFWUXNSVUZCYVVJc1EwRkRka0lzUzBGQlRTeExRVVJwUWl4RFFVVjJRaXhKUVVGTExFdEJSbXRDTEVOQlIzWkNMRWxCUVVzc1MwRklhMElzUTBGQmVrSXNRMEZMUkN4RFFVTkVMRTFCUVUwc1NVRkJUaXhGUVVGakxFbEJRV1FzUTBGRFJDeERRV2hEUkN4RFFXdERRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFTeE5RVUZMTEdWQlFVd3NRMEZCZFVJc1UwRkJVeXhKUVVGVUxFTkJRV1VzYzBKQlFXWXNRMEZCZFVNc1EwRkROVVFzUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4SFFVRkpMRlZCUVZjc1MwRkJTeXhMUVVGd1FpeERRVUV5UWl4VFFVRlhMRXRCUVVzc1VVRkJNME1zUTBGRFFTeEhRVUZKTEUxQlFVOHNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeEpRVUYwUWl4RFFVRTBRaXh6UWtGQk5VSXNRMEZCV0N4RFFVTkJMRWRCUVVrc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eExRVUZ5UWl4RFFVRTBRaXhEUVVNeFFpeEhRVUZKTEUxQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGRkJRV3BDTEVOQlFUSkNMRkZCUVROQ0xFTkJRVmdzUTBGRFFTeExRVUZMTEZkQlFVd3NRMEZCYlVJc1EwRkJReXhKUVVGRUxFTkJRVzVDTEVOQlEwRXNUVUZCVHl4TFFVRkxMRWRCUVV3c1EwRkJVeXhIUVVGSExFdEJRVm9zUTBGQlVDd3dRa0ZCTWtJc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEVsQlFXcENMRU5CUVhOQ0xFOUJRVThzWjBKQlFWQXNRMEZCZDBJc1NVRkJlRUlzUTBGQk9FSXNjMEpCUVRsQ0xFTkJRWFJDTEVWQlFUTkNMRU5CUTBFc1RVRkJUeXhOUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCYUVJc1EwRkJjMElzYjBKQlFYUkNMRU5CUVZBc1EwRkRSQ3hEUVVORUxFMUJRVThzUzBGQlVDeERRVU5FTEVOQldrUXNRMEZqUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhuUWtGQlRDeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJaU3h6UWtGQlppeERRVUYxUXl4alFVRjJReXhEUVVGMVJDeERRVU0zUlN4SFFVRkpMRXRCUVVzc1YwRkJUQ3hGUVVGdlFpeExRVUZMTEZsQlFVd3NRMEZCYTBJc1QwRkJiRUlzUTBGQmVFSXNRMEZCYjBRc1RVRkJUeXhOUVVGTExGVkJRVXdzUlVGQlVDeERRVVZ3UkN4SFFVRkpMSGRDUVVGNVFpeExRVUUzUWl4RFFVTkJMRWRCUVVrc1EwRkJReXh6UWtGQlRDeERRVUUyUWl4RFFVTXpRaXgxUWtGQmVVSXNSMEZCU1N4dlFrRkJTaXhGUVVGNlFpeERRVU5CTEhWQ1FVRjVRaXhKUVVGNlFpeERRVU5FTEVOQlEwUXNSMEZCU1N4VlFVRlhMRXRCUVVzc1MwRkJjRUlzUTBGQk1rSXNVMEZCVnl4TFFVRkxMRkZCUVRORExFTkJRMEVzUjBGQlNTeExRVUZMTEVsQlFVd3NSVUZCWVN4SFFVRkhMRTFCUVdoQ0xFVkJRVEJDTEV0QlFVc3NTVUZCVEN4RlFVRmhMRWRCUVVjc1NVRkJPVU1zUTBGRFJTeExRVUZMTEdkQ1FVRk1MRU5CUVhkQ0xFdEJRVXNzUzBGQk4wSXNRMEZEUml4SFFVRkpMRTFCUVU4c1MwRkJTeXh4UWtGQlRDeERRVUV5UWl4SlFVRXpRaXhEUVVGcFF5eHpRa0ZCYWtNc1EwRkJXQ3hEUVVOQkxFZEJRVWtzWTBGQlNpeERRVUZ2UWl4TFFVRlBMR1ZCUVdVc1NVRkJaaXhEUVVGdlFpeEpRVUZ3UWl4RFFVRXdRaXhKUVVFeFFpeERRVUZuUXl4UlFVRm9ReXhEUVVFd1F5eFJRVUV4UXl4RFFVRlFMRU5CUTNCQ0xFZEJRVWtzUzBGQlN5eEpRVUZNTEVOQlFWVXNVVUZCWkN4RFFVRjNRaXhEUVVOMFFpeExRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xITkNRVUY0UWl4RFFVRm5SQ3hKUVVGb1JDeEZRVU5CTEVkQlFVa3NRMEZCUXl4elFrRkJUQ3hEUVVFMlFpeHZRa0ZCYjBJc1NVRkJjRUlzUTBGQmVVSXNjMEpCUVhwQ0xFVkJRemRDTEVkQlFVa3NUVUZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVVVGQmFrSXNRMEZCTWtJc1VVRkJNMElzUTBGQldDeERRVU5CTEV0QlFVc3NVVUZCVEN4RFFVRm5RaXhMUVVGTExFdEJRWEpDTEVOQlEwRXNTMEZCU3l4SlFVRk1MRU5CUVZrc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eEZRVUZxUWl4RFFVRnpRaXhMUVVGTExGbEJRVXdzUTBGQmEwSXNTVUZCYkVJc1EwRkJkRUlzUTBGQlowUXNTVUZCTlVRc1EwRkRRU3gxUWtGQmRVSXNaVUZCZGtJc1EwRkJlVU1zUTBGQmVrTXNRMEZCTWtNN1FVRkRNME1zVFVGQlN5eFRRVUZNTEVOQlFXVXNTVUZCWml4RlFVTkJMRXRCUVVzc1NVRkJUQ3hIUVVOQkxFdEJRVXNzUzBGQlRDeERRVUZoTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzU1VGQmRFSXNRMEZCWWl4RFFVTkJMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xITkNRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRllSQ3hKUVZkUExFTkJRMHdzUjBGQlNTeHpRa0ZCU2l4RFFVRTBRaXhMUVVGTExIRkNRVUZNTEVOQlFUSkNMSE5DUVVFelFpeERRVUZ0UkN4SlFVRnVSQ3hGUVVNM1FpeERRVU5FTEUxQlFVOHNTMEZCVUN4RFFVTkVMRU5CTlVKRUxFTkJPRUpCTzBGQlJVRXNUVUZCU3l4eFFrRkJUQ3hEUVVFMlFpeFRRVUZUTEVsQlFWUXNRMEZCWlN4elFrRkJaaXhEUVVGMVF5eERRVU5zUlN4SFFVRkpMRlZCUVZjc1MwRkJTeXhMUVVGd1FpeERRVUV5UWl4VFFVRlhMRXRCUVVzc1VVRkJNME1zUTBGRFFTeEhRVUZKTEUxQlFVOHNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFbEJRV3hDTEVOQlFYZENMSE5DUVVGNFFpeERRVUZZTEVOQlEwRXNSMEZCU1N4TFFVRkxMSEZDUVVGTUxFTkJRVEpDTEhOQ1FVRXpRaXhEUVVGS0xFTkJRWGRFTEUxQlFVOHNTMEZCVUN4RFFVTjRSQ3hIUVVGSkxFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFVY3NVVUZCV2l4RFFVRktMRU5CUVRKQ0xFTkJRM3BDTEVkQlFVa3NUVUZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVVVGQmFrSXNRMEZCTWtJc1VVRkJNMElzUTBGQldDeERRVU5CTEV0QlFVc3NTVUZCVEN4RFFVRlpMRWxCUVZvc1EwRkRRU3hMUVVGTExGVkJRVXdzUTBGQmEwSXNTMEZCU3l4blFrRkJUQ3hGUVVGc1FpeERRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRlpMRWRCUVVjc1MwRkJaaXhGUVVOQkxFdEJRVXNzVTBGQlRDeERRVUZwUWl4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEVsQlFYUkNMRU5CUVdwQ0xFTkJRMEVzVFVGQlR5eE5RVUZMTEZWQlFVd3NRMEZCWjBJc1NVRkJhRUlzUTBGQmMwSXNkVUpCUVhSQ0xFTkJRVkFzUTBGRFJDeERRVU5FTEUxQlFVOHNTMEZCVUN4RFFVTkVMRU5CWWtRc1EwRmxRVHRCUVVWQkxFMUJRVXNzV1VGQlRDeERRVUZ2UWl4VFFVRlRMRWxCUVZRc1EwRkJaU3h6UWtGQlppeERRVUYxUXl4RFFVTjZSQ3hIUVVGSkxGVkJRVmNzUzBGQlN5eExRVUZ3UWl4RFFVRXlRaXhUUVVGWExFdEJRVXNzVVVGQk0wTXNRMEZEUVN4SFFVRkpMRTFCUVU4c1MwRkJTeXhsUVVGTUxFTkJRWEZDTEhOQ1FVRnlRaXhEUVVFMlF5eExRVUUzUXl4RFFVRllMRU5CUTBFc1IwRkJTU3hMUVVGTExIRkNRVUZNTEVOQlFUSkNMSE5DUVVFelFpeERRVUZLTEVOQlFYZEVMRTFCUVU4c1MwRkJVQ3hEUVVONFJDeE5RVUZQTEUxQlFVc3NWMEZCVEN4RFFVRnBRaXhKUVVGcVFpeERRVUYxUWl4UlFVRjJRaXhEUVVGcFF5eFJRVUZxUXl4RFFVRXlReXhEUVVGRExFTkJRVFZETEVOQlFTdERMRWxCUVM5RExFTkJRVkFzUTBGRFJDeERRVXhFTEVOQlQwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQkxFMUJRVXNzVjBGQlRDeERRVUZ0UWl4VFFVRlRMRWxCUVZRc1EwRkJaU3haUVVGbUxFTkJRVFpDTEZsQlFUZENMRU5CUVRKRExFOUJRVE5ETEVOQlFXOUVMRWxCUVhCRUxFTkJRVEJFTEVOQlF6TkZMRWRCUVVrc1RVRkJUeXhMUVVGTExFbEJRVXdzUTBGQlZTeExRVUZ5UWl4RFFVTkJMRWRCUVVrc1RVRkJVU3hKUVVGU0xFZEJRV2xDTEVOQlFVTXNTVUZCUkN4RlFVRlRMRXRCUVVzc1NVRkJUQ3hIUVVGakxFZEJRVWNzUjBGQk0wTXNRMEZCU2l4RFFVRnhSQ3hEUVVOdVJDeEhRVUZKTEV0QlFVOHNUMEZCV0N4RFFVRnZRaXhEUVVOc1FpeEhRVUZKTEZOQlFWVXNTMEZCU3l4SlFVRk1MRWRCUVdNc1IwRkJSeXhUUVVGcVFpeEZRVUU0UWl4TFFVRkxMRWxCUVV3c1IwRkJZeXhIUVVGSExGVkJRVGRFTEVOQlEwRXNSMEZCU1N4SlFVRkxMRXRCUVVzc1MwRkJaQ3hEUVVOQkxFdEJRVXNzU1VGQlRDeEhRVU5CTEVkQlFVa3NWVUZCVnl4TFFVRkxMRXRCUVhCQ0xFTkJRVEpDTEZOQlFWY3NTMEZCU3l4UlFVRXpReXhEUVVOQkxFZEJRVWtzVDBGQlVTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEVsQlFYSkNMRU5CUVRKQ0xFdEJRVE5DTEVOQlFXcENMRU5CUVc5RUxGRkJRWEJFTEVOQlFUaEVMRkZCUVRsRUxFTkJRWGRGTEVsQlFYaEZMRU5CUVRoRkxFbEJRVGxGTEVOQlFWb3NRMEZEUVN4SFFVRkpMRTFCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZsQlFXcENMRU5CUVN0Q0xGbEJRUzlDTEVOQlFUWkRMRWxCUVRkRExFTkJRVzFFTEV0QlFXNUVMRU5CUVRCRUxFVkJRVEZFTEVOQlFUaEVMRTlCUVRsRUxFTkJRVmdzUTBGRFFTeE5RVUZQTEUxQlFVc3NWMEZCVEN4RFFVRnBRaXhKUVVGcVFpeERRVUYxUWl4WlFVRjJRaXhEUVVGeFF5eFpRVUZ5UXl4RFFVRnRSQ3hQUVVGdVJDeERRVUUwUkN4SlFVRTFSQ3hEUVVGUUxFTkJRMFFzUTBGRFJpeERRVU5FTEUxQlFVOHNTMEZCVUN4RFFVTkVMRU5CWkVRc1EwRm5Ra0VzUzBGQlN5eFhRVUZNTEVOQlFXMUNMRk5CUVZNc1VVRkJWQ3hEUVVGdFFpeFJRVUZ1UWl4RFFVRTJRaXhKUVVFM1FpeERRVUZ0UXl4TFFVRnVReXhEUVVFd1F5eEZRVUV4UXl4RFFVRTRReXhQUVVFNVF5eERRVUYxUkN4RFFVTjRSU3hIUVVGSkxFMUJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRkZCUVdwQ0xFTkJRVEpDTEZGQlFUTkNMRU5CUVZnc1EwRkRRU3hMUVVGTExFbEJRVXdzUTBGQldTeEpRVUZhTEVOQlEwRXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xFVkJRV2hDTEVOQlEwRXNTMEZCU3l4TFFVRk1MRU5CUVdFc1MwRkJZaXhEUVVOQkxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWE5DTEZGQlFWVXNiVUpCUVZZc1EwRkJaME1zYTBKQlFYUkVMRU5CUVZBc1EwRkRSQ3hEUVU1RUxFTkJVVUU3UVVGRlFTeE5RVUZMTEdWQlFVd3NRMEZCZFVJc1UwRkJVeXh6UWtGQlZDeERRVUZwUXl4UlFVRnFReXhEUVVFeVF5eERRVU5vUlN4SFFVRkpMRkZCUVZNc1NVRkJZaXhEUVVWQkxFZEJRVWtzVlVGQlZ5eExRVUZMTEV0QlFYQkNMRU5CUVRKQ0xGTkJRVmNzUzBGQlN5eFJRVUV6UXl4RFFVRnhSQ3hKUVVGeVJDeERRVU5CTEVkQlFVa3NTMEZCU3l4SlFVRk1MRU5CUVZVc1RVRkJaQ3hEUVVGelFpeERRVU53UWl4SFFVRkpMRTFCUVU4c1MwRkJTeXhUUVVGTUxFVkJRVmdzUTBGQk5rSXNUMEZCVXl4TFFVRkxMRWxCUVV3c1IwRkJZeXhIUVVGSExFMUJRWFpFTEVOQlEwRXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xFdEJRVXNzUzBGQmNrSXNRMEZEUVN4TFFVRkxMRTFCUVV3c1EwRkJZeXhKUVVGa0xFTkJRMEVzUzBGQlN5eEpRVUZNTEVkQlEwRXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xFdEJRVXNzWlVGQlRDeERRVUZ4UWl4SlFVRnlRaXhEUVVFeVFpeEpRVUV6UWl4RFFVRm9RaXhEUVVOQkxFdEJRVXNzY1VKQlFVd3NRMEZCTWtJc2MwSkJRVE5DTEVOQlFXMUVMRWxCUVc1RUxFVkJRMEVzUjBGQlNTeE5RVUZLTEVOQlFWa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1MwRkJTeXhSUVVGd1FpeEZRVUZhTEVsQlEwc3NTVUZCU1N4TFFVRkxMRTFCUVV3c1JVRkJaU3hMUVVGTExGRkJRVXdzUjBGQmEwSXNVVUZCYWtNc1JVRkRRU3hMUVVGTExGRkJRVXdzUTBGQll5eEpRVUZrTEVkQlFYVkNMRmxCUkROQ0xFTkJSVWdzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhMUVVGTExFdEJRVE5DTEVOQlFXdERMSGREUVVGc1F5eEZRVVpITEVsQlIwRXNWVUZCVnl4SlFVRllMRU5CUTB3c1MwRkJUeXhMUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCYUVJc1EwRkJjMElzVDBGQlV5eHJRa0ZCVkN4RFFVRTRRaXhwUWtGQmNFUXNRMEZCVUN4RFFVTkVMRU5CWWtRc1NVRmhUeXhEUVVOTUxFdEJRVThzUzBGQlN5eHRRa0ZCVEN4RFFVRjVRaXh6UWtGQmVrSXNRMEZCVUN4RFFVTkJMRWRCUVVrc1MwRkJTeXh4UWtGQlRDeERRVUV5UWl4elFrRkJNMElzUTBGQlNpeERRVUYzUkN4TlFVRlBMRXRCUVZBc1EwRkRlRVFzVFVGQlR5eExRVUZMTEVsQlFVd3NRMEZCVlN4UFFVRldMRVZCUVhGQ0xFTkJRVU1zUzBGQlN5eHJRa0ZCVEN4RlFVRTNRaXhEUVVGM1JDeERRVU4wUkN4SFFVRkpMRkZCUVZNc1QwRkJUeXhYUVVGUUxFTkJRVzFDTEZGQlFXNUNMRU5CUVRaQ0xGRkJRVGRDTEVOQlFXSXNRMEZEUVN4UFFVRlBMRkZCUVZBc1EwRkJhMElzVDBGQlR5eExRVUY2UWl4RFFVTkJMRTlCUVU4c1RVRkJVQ3hEUVVGblFpeExRVUZvUWl4RFFVTkJMRTlCUVU4c1VVRkJVQ3hEUVVGclFpeEpRVUZzUWl4RFFVTkJMRTlCUVU4c1UwRkJVQ3hEUVVGcFFpeEpRVUZxUWl4RlFVTkJMRTlCUVU4c1NVRkJVQ3hIUVVOQkxFdEJRVThzVDBGQlR5eFZRVUZRTEVOQlFXdENMRTFCUVd4Q0xFTkJRVEJDTEd0Q1FVRXhRaXhEUVVGUUxFTkJRMFFzUTBGRFJpeERRVVZFTEVkQlFVa3NRMEZCUXl4UlFVRkVMRVZCUVdFc1MwRkJTeXhIUVVGTUxFTkJRVk1zUjBGQlJ5eFJRVUZhTEVOQlFXcENMRU5CUTBVc1RVRkJUeXhOUVVGTExGZEJRVXdzUTBGQmFVSXNVVUZCYWtJc1EwRkJNa0lzVVVGQk0wSXNRMEZCY1VNc1NVRkJja01zUTBGQk1rTXNTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFbEJRWEpDTEVOQlFUSkNMRXRCUVROQ0xFTkJRVE5ETEVOQlFUaEZMRWxCUVRsRkxFTkJRVzlHTEV0QlFYQkdMRU5CUVZBc1EwRkVSaXhKUVVkRkxFOUJRVThzUzBGQlVDeERRVU5JTEVOQmJrTkVMRU5CY1VOQk8wRkJSVUVzVFVGQlN5eHRRa0ZCVEN4RFFVRXlRaXhUUVVGVExITkNRVUZVTEVOQlFXbERMRU5CUXpGRUxFZEJRVWtzVlVGQlZ5eExRVUZMTEV0QlFYQkNMRU5CUVRKQ0xGTkJRVmNzUzBGQlN5eFJRVUV6UXl4RFFVTkJMRWRCUVVrc1RVRkJUeXhMUVVGTExHRkJRVXdzUTBGQmJVSXNjMEpCUVc1Q0xFTkJRVmdzUTBGRFFTeEhRVUZKTEhGQ1FVRnpRaXhMUVVGTExFbEJRVXdzUjBGQll5eDVRa0ZCWkN4RlFVRXlReXhMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZZTEVOQlFXbENMRXRCUVVzc1dVRkJkRUlzUTBGQmIwTXNTMEZCU3l4VlFVRjZReXhKUVVGNVJDeEhRVUU1U0N4RFFVTkJMRWRCUVVrc1MwRkJTeXh4UWtGQlRDeERRVUV5UWl4elFrRkJNMElzUjBGQmMwUXNiVUpCUVRGRUxFTkJRU3RGTEUxQlFVOHNTMEZCVUN4RFFVTXZSU3hOUVVGUExFMUJRVXNzWlVGQlRDeERRVUZ4UWl4SlFVRnlRaXhEUVVFeVFpeFJRVUV6UWl4RFFVRnhReXhSUVVGeVF5eERRVUZRTEVOQlEwUXNRMEZPUkN4RFFWRkJMRXRCUVVzc1pVRkJUQ3hEUVVGMVFpeFRRVUZUTEVsQlFWUXNRMEZCWlN4UlFVRm1MRU5CUVhsQ0xGRkJRWHBDTEVOQlFXMURMRTlCUVc1RExFTkJRVFJETEVOQlEycEZMRWRCUVVrc1VVRkJVeXhKUVVGaUxFTkJSVUVzVDBGQlV5eERRVU5RTEVkQlFVa3NUMEZCVHl4SFFVRlFMRU5CUVZjc1IwRkJSeXhIUVVGa0xFTkJRVW9zUTBGQmQwSXNRMEZEZEVJc1IwRkJTU3hOUVVGUExFOUJRVThzVjBGQlVDeERRVUZ0UWl4UlFVRnVRaXhEUVVFMlFpeFJRVUUzUWl4RFFVRllMRU5CUTBFc1MwRkJTeXhOUVVGTUxFTkJRV01zU1VGQlpDeERRVU5CTEV0QlFVc3NVVUZCVEN4RFFVRm5RaXhQUVVGUExGVkJRVkFzUTBGQmEwSXNTVUZCYkVJc1EwRkJhRUlzUTBGRFFTeExRVUZMTEZGQlFVd3NRMEZCWjBJc1MwRkJhRUlzUTBGRFFTeExRVUZQTEU5QlFVOHNWVUZCVUN4RFFVRnJRaXhKUVVGc1FpeERRVUYzUWl4clFrRkJlRUlzUTBGQlVDeERRVU5FTEVOQlRrUXNTVUZOVHl4SlFVRkpMRTlCUVU4c1IwRkJVQ3hEUVVGWExFZEJRVWNzVVVGQlpDeERRVUZLTEVOQlFUWkNMRU5CUTJ4RExFZEJRVWtzVVVGQlV5eFBRVUZQTEZkQlFWQXNRMEZCYlVJc1VVRkJia0lzUTBGQk5rSXNVVUZCTjBJc1EwRkJZaXhEUVVOQkxFOUJRVThzVFVGQlVDeERRVUZuUWl4SlFVRm9RaXhEUVVOQkxFOUJRVThzVVVGQlVDeERRVUZyUWl4UFFVRlBMR1ZCUVZBc1JVRkJiRUlzUTBGRFFTeFBRVUZQTEZGQlFWQXNRMEZCYTBJc1NVRkJiRUlzUTBGRFFTeFBRVUZQTEUxQlFWQXNRMEZCWXl4SFFVRkhMRkZCUVdwQ0xFVkJRMEVzUzBGQlR5eFBRVUZQTEZWQlFWQXNRMEZCYTBJc1RVRkJiRUlzUTBGQk1FSXNhMEpCUVRGQ0xFTkJRVkFzUTBGRFJDeERRVkJOTEVsQlQwRXNTVUZCU1N4RFFVRkRMRTlCUVVRc1JVRkJXU3hQUVVGUExFZEJRVkFzUTBGQlZ5eEhRVUZITEUxQlFXUXNRMEZCYUVJc1EwRkJkVU1zUTBGRE5VTXNSMEZCU1N4UlFVRlRMRTlCUVU4c1YwRkJVQ3hEUVVGdFFpeFJRVUZ1UWl4RFFVRTJRaXhSUVVFM1FpeERRVUZpTEVOQlEwRXNUMEZCVHl4TlFVRlFMRU5CUVdkQ0xFbEJRV2hDTEVOQlEwRXNUMEZCVHl4VFFVRlFMRU5CUVcxQ0xFOUJRVThzWVVGQlVDeERRVUZ4UWl4SFFVRkhMRTFCUVhoQ0xFTkJRV2RETEV0QlFXaERMRU5CUVc1Q0xFTkJRMEVzUzBGQlR5eFBRVUZQTEZWQlFWQXNRMEZCYTBJc1RVRkJiRUlzUTBGQk1FSXNaMEpCUVRGQ0xFTkJRVkFzUTBGRFJDeERRVXhOTEVsQlMwRXNTVUZCU1N4UFFVRlBMRWxCUVZBc1IwRkJaMElzUjBGQlJ5eFRRVUYyUWl4RFFVRnJReXhEUVVOMlF5eEhRVUZKTEZGQlFWTXNUMEZCVHl4WFFVRlFMRU5CUVcxQ0xGRkJRVzVDTEVOQlFUWkNMRkZCUVRkQ0xFTkJRV0lzUTBGRFFTeFBRVUZQTEVkQlFWQXNRMEZCWVN4SlFVRmlMRU5CUTBFc1QwRkJUeXhMUVVGUUxFTkJRV1VzVDBGQlR5eGhRVUZRTEVWQlFXWXNRMEZEUVN4TFFVRlBMRTlCUVU4c1ZVRkJVQ3hEUVVGclFpeE5RVUZzUWl4RFFVRXdRaXd3UWtGQk1VSXNRMEZCVUN4RFFVTkVMRU5CVEUwc1NVRkxRU3hEUVVOTUxFMUJRVThzUzBGQlVDeERRVU5FTEVOQlEwWXNRMEZEUml4RFFTOUNSQ3hEUVdsRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJMRTFCUVVzc1lVRkJUQ3hEUVVGeFFpeFRRVUZUTEhOQ1FVRlVMRU5CUVdsRExFTkJRM0JFTEVkQlFVa3NTMEZCU2l4RFFVRlZMRmRCUVdFc1MwRkJTeXhuUWtGQlRDeEZRVUY1UWl4TFFVRkxMRXRCUVhKRUxFTkJRMEVzVDBGQlVTeExRVUZMTEVsQlFXSXNSVUZEUVN4SlFVRkxMRWxCUVVjc1RVRkJVaXhEUVVORkxFZEJRVWtzUTBGQlF5eExRVUZMTEZWQlFWWXNRMEZEUlN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExFdEJRV2hDTEVOQlFYVkNMSE5EUVVGMlFpeEZRVVZLTEVsQlFVc3NTVUZCUnl4TFFVRlNMRU5CUTBVc1IwRkJTU3hOUVVGUExFdEJRVXNzU1VGQlRDeEhRVUZqTEVkQlFVY3NTMEZCYWtJc1EwRkJlVUlzWjBKQlFYcENMRU5CUVRSRExFOUJRWFpFTEVOQlEwRXNTMEZCVHl4TFFVRkxMRk5CUVV3c1JVRkJVQ3hEUVVOQkxFdEJRVXNzU1VGQlRDeEhRVU5CTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMRWxCUVhSQ0xFTkJRVkFzUTBGRlJpeEpRVUZMTEVsQlFVY3NTVUZCVWl4RFFVTkZMRWRCUVVrc1ZVRkJWeXhMUVVGTExFdEJRWEJDTEVOQlFUSkNMRk5CUVZjc1MwRkJTeXhSUVVFelF5eERRVU5CTEVkQlFVa3NTVUZCU3l4TFFVRkxMRlZCUVV3c1EwRkJaMElzUzBGQlN5eEpRVUZNTEVkQlFXTXNSMEZCUnl4SlFVRnFReXhEUVVGVUxFTkJRMEVzUjBGQlNTeFpRVUZqTEVOQlFVTXNTMEZCU3l4clFrRkJUQ3hGUVVGbUxFVkJRVFJETEV0QlFVc3NSMEZCVEN4RFFVRlRMRWRCUVVjc1MwRkJXaXhEUVVGb1JDeERRVU5GTEUxQlFVOHNUVUZCU3l4dlFrRkJUQ3hEUVVFd1FpeExRVUZMTEZkQlFVd3NRMEZCYVVJc1VVRkJha0lzUTBGQk1rSXNVVUZCTTBJc1EwRkJNVUlzUTBGQlowVXNRMEZCUXl4RlFVRkVMRU5CUVdoRkxFTkJRVkFzUTBGRFJpeE5RVUZQTEVkQlFWQXNRMEZGUml4SlFVRkxMRWxCUVVjc1RVRkJVaXhEUVVORkxFZEJRVWtzVDBGQlVTeExRVUZMTEV0QlFXcENMRU5CUTBFc1MwRkJUeXhMUVVGTExGbEJRVXdzUTBGQmEwSXNUVUZCVFN4TFFVRjRRaXhEUVVGUUxFTkJRMEVzUzBGQlN5eExRVUZNTEVOQlFXRXNRMEZCUXl4UlFVRlRMRTFCUVUwc1QwRkJhRUlzUTBGQmVVSXNUVUZCVHl4TlFVRk5MRXRCUVhSRExFTkJRV0lzUTBGRFFTeE5RVUZQTEV0QlFWQXNRMEZGUml4SlFVRkxMRWxCUVVjc1IwRkJVaXhEUVVGaExFbEJRVXNzU1VGQlJ5eE5RVUZTTEVOQlExZ3NUVUZCVHl4TlFVRkxMRmxCUVV3c1EwRkJhMElzUzBGQlN5eExRVUYyUWl4RFFVRlFMRU5CUlVZc1NVRkJTeXhKUVVGSExFdEJRVklzUTBGQlpTeEpRVUZMTEVsQlFVY3NTMEZCVWl4RFFVRmxMRWxCUVVzc1NVRkJSeXhOUVVGU0xFTkJRelZDTEV0QlFVOHNTMEZCU3l4VFFVRk1MRVZCUVZBc1EwRkRRU3hMUVVGTExFdEJRVXdzUTBGQllTeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRXRCUVdwQ0xFTkJRWGxDTEVsQlFYcENMRU5CUVdkRExFdEJRVXNzU1VGQlRDeEhRVUZqTEVkQlFVY3NTMEZCT1VRc1EwRkRRU3hMUVVGTExFZEJRVXdzUTBGQlZ5eExRVUZMTEVsQlFVd3NRMEZCVlN4UFFVRnlRaXhEUVVOQkxFdEJRVXNzU1VGQlRDeEhRVU5CTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMRk5CUVhSQ0xFTkJRVkFzUTBGRlJpeEpRVUZMTEVsQlFVY3NUVUZCVWl4RFFVTkZMRTFCUVU4c1RVRkJTeXhyUTBGQlRDeERRVUYzUXl4VlFVRjRReXhEUVVGUUxFTkJSVVlzU1VGQlN5eEpRVUZITEZGQlFWSXNRMEZEUlN4TFFVRlBMRXRCUVVzc1UwRkJUQ3hGUVVGUUxFTkJRMEVzUzBGQlN5eEpRVUZNTEVkQlEwRXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xFdEJRVXNzWVVGQlRDeERRVUZ0UWl4SFFVRkhMRkZCUVhSQ0xFTkJRV2RETEVsQlFXaERMRU5CUVhORExFbEJRWFJETEVOQlFUUkRMSE5DUVVFMVF5eERRVUZvUWl4RFFVTkJMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xHbENRVUYwUWl4RFFVRlFMRU5CUlVZc1NVRkJTeXhKUVVGSExFMUJRVklzUTBGRFJTeE5RVUZQTEUxQlFVc3NVVUZCVEN4RFFVRmpMRXRCUVdRc1EwRkJjVUlzYzBKQlFYSkNMRU5CUVZBc1EwRkZSaXhKUVVGTExFbEJRVWNzVTBGQlVpeERRVU5GTEV0QlFVOHNTMEZCU3l4VFFVRk1MRVZCUVZBc1EwRkRRU3hMUVVGTExFbEJRVXdzUjBGRFFTeE5RVUZQTEUxQlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeERRVUY1UWl4TFFVRjZRaXhEUVVGUUxFTkJSVVlzU1VGQlN5eEpRVUZITEUxQlFWSXNRMEZEUlN4TlFVRlBMRTFCUVVzc1ZVRkJUQ3hEUVVGblFpeExRVUZMTEZOQlFVd3NSVUZCYUVJc1EwRkJhME1zUzBGQmJFTXNRMEZCVUN4RFFVVkdMRWxCUVVzc1NVRkJSeXhKUVVGU0xFTkJRMFVzVFVGQlR5eE5RVUZMTEZGQlFVd3NSVUZCVUN4RFFVVkdMRWxCUVVzc1NVRkJSeXhUUVVGU0xFTkJRMFVzVFVGQlR5eE5RVUZMTEdGQlFVd3NSVUZCVUN4RFFVVkdMRkZCUTBVc1MwRkJTeXhWUVVGTUxFZEJOMFJHTEVOQkswUkVMRU5CYWtWRUxFTkJiVVZCTEV0QlFVc3NXVUZCVEN4RFFVRnZRaXhUUVVGVExFdEJRVlFzUTBGQlowSXNRMEZEYkVNc1IwRkJTU3hOUVVGUExFdEJRVXNzVTBGQlRDeEZRVUZZTEVOQlEwRXNTMEZCU3l4TFFVRk1MRU5CUVdFc1MwRkJZaXhEUVVOQkxFdEJRVXNzUjBGQlRDeERRVUZYTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUzBGQlN5eExRVUYwUWl4RFFVRTJRaXhMUVVGTExFZEJRV3hETEVOQlFWZ3NRMEZEUVN4TFFVRkxMRWxCUVV3c1IwRkRRU3hOUVVGUExFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGelFpeFRRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRk9SQ3hEUVZGQkxFdEJRVXNzYjBKQlFVd3NRMEZCTkVJc1ZVRkJWeXhEUVVOeVF5eExRVUZMTEUxQlFVd3NRMEZCV1N4SFFVRkhMRTFCUVdZc1JVRkRRU3hIUVVGSkxFdEJRVTBzUzBGQlN5eGxRVUZNTEVWQlFWWXNRMEZEUVN4TFFVRkxMRTFCUVV3c1EwRkJXU3hIUVVGSExFMUJRV1lzUlVGRFFTeE5RVUZQTEVsQlFWQXNRMEZEUkN4RFFVeEVMRU5CVDBFc1MwRkJTeXhyUTBGQlRDeERRVUV3UXl4VFFVRlRMRlZCUVZRc1EwRkJjVUlzUTBGRE4wUXNSMEZCU1N4UlFVRlRMRWxCUVdJc1EwRkZRU3hIUVVGSkxGVkJRVmNzUzBGQlN5eExRVUZ3UWl4RFFVRXlRaXhUUVVGWExFdEJRVXNzVVVGQk0wTXNRMEZCY1VRc1IwRkJja1FzUTBGRFFTeEhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1JVRkJORUlzUTBGQmFFTXNRMEZCYlVNc1EwRkRha01zUzBGQlN5eEpRVUZNTEVkQlJVRXNSMEZCU1N4bFFVRm5RaXhMUVVGTExFdEJRWHBDTEVOQlFXZERMR05CUVdkQ0xFdEJRVXNzVVVGQmNrUXNRMEZEUVN4SFFVRkpMRlZCUVZjc1JVRkJaaXhEUVVGdFFpeE5RVUZSTEVsQlFUTkNMRU5CUTBFc1IwRkJTU3gzUWtGQmVVSXNSMEZCU1N4dlFrRkJTaXhGUVVFM1FpeERRVUZ6UkN4WFFVRjBSQ3hEUVVGdFJTeGxRVUZ1UlN4RFFVTkJMRTFCUVU4c1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eE5RVUY0UWl4RFFVRm5ReXhEUVVNNVFpeE5RVUZSTEUxQlFWRXNTMEZCYUVJc1EwRkJkMElzVDBGQlR5eE5RVUZRTEVOQlFXTXNSMEZCUnl4TFFVRnFRaXhEUVVGNFFpeERRVU5CTEVkQlFVa3NUMEZCVHl4SlFVRlFMRWRCUVdkQ0xFZEJRVWNzVVVGQmRrSXNRMEZCYVVNc1EwRkRMMElzV1VGQll5eFBRVUZQTEV0QlFYSkNMRU5CUTBFc1UwRkJVeXhKUVVGVUxFTkJRV01zVDBGQlR5eGpRVUZRTEVOQlFYTkNMRTlCUVU4c1UwRkJVQ3hGUVVGMFFpeERRVUZrTEVWQlEwRXNUVUZEUkN4RFFVcEVMRWxCU1U4c1EwRkRUQ3hIUVVGSkxFOUJRVThzU1VGQlVDeEhRVUZuUWl4SFFVRkhMRTFCUVc1Q0xFVkJRVFpDTEVOQlFVTXNaVUZCYkVNc1EwRkJiVVFzUTBGRGFrUXNaMEpCUVd0Q0xFOUJRVThzUzBGQmVrSXNRMEZEUkN4RFFVTkVMRk5CUVZNc1NVRkJWQ3hEUVVGakxFOUJRVThzWjBKQlFWQXNRMEZCZDBJc1MwRkJlRUlzUTBGQkswSXNjMEpCUVM5Q0xFTkJRWFZFTEU5QlFVOHNZMEZCT1VRc1EwRkJaQ3hGUVVORUxFTkJRMFlzUTBGRFJDeEhRVUZKTEdGQlFXTXNTMEZCU3l4TFFVRjJRaXhEUVVFNFFpeFpRVUZqTEV0QlFVc3NVVUZCYWtRc1EwRkRRU3hMUVVGTExFMUJRVXdzUTBGQldTeEhRVUZITEUxQlFXWXNSVUZGUVN4SFFVRkpMRmxCUVdNc1EwRkJReXhMUVVGTExHdENRVUZNTEVWQlFXWXNSVUZCTkVNc1MwRkJTeXhIUVVGTUxFTkJRVk1zUjBGQlJ5eExRVUZhTEVOQlFXaEVMRU5CUVc5RkxFTkJRMnhGTEV0QlFVc3NhMEpCUVV3c1EwRkJkMElzYzBKQlFYaENMRU5CUVdkRUxFbEJRV2hFTEVWQlEwRXNSMEZCU1N4bFFVRktMRU5CUVhGQ0xFdEJRVXNzVlVGQlRDeERRVUZuUWl4bFFVRm9RaXhGUVVOeVFpeE5RVUZQTEUxQlFVc3NiVUpCUVV3c1EwRkJlVUlzVVVGQmVrSXNRMEZCYlVNc1VVRkJia01zUTBGQk5rTXNVVUZCTjBNc1EwRkJVQ3hEUVVORUxFTkJSVVFzUjBGQlNTeERRVUZETEZOQlFWTXNUVUZCWkN4RFFVRnpRaXhMUVVGTExGVkJRVXdzUTBGQlowSXNTMEZCU3l4WlFVRnlRaXhGUVVOMFFpeEhRVUZKTEZkQlFVb3NRMEZCYVVJc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEZkQlFXaENMRVZCUTJwQ0xFdEJRVXNzY1VKQlFVd3NRMEZCTWtJc2MwSkJRVE5DTEVOQlFXMUVMRWxCUVc1RUxFVkJSVUVzUjBGQlNTeFRRVUZUTEUxQlFWUXNRMEZCYTBJc1EwRkJkRUlzUTBGQmVVSXNRMEZEZGtJc1NVRkJUU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNZVUZCYWtJc1EwRkJaME1zWVVGQmFFTXNRMEZCVGl4RFFVTkJMRWxCUVVrc1YwRkJTaXhEUVVGclFpeFJRVUZzUWl4RFFVTkJMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeEhRVUZzUWl4RFFVRjFRaXh2UWtGQmRrSXNRMEZCTmtNc1YwRkJOME1zUTBGQk1FUXNWMEZCTVVRc1JVRkRSQ3hEUVVwRUxFbEJTVThzUTBGRFRDeEpRVUZOTEZOQlFWTXNRMEZCVkN4RFFVRk9MRU5CUTBRc1EwRkRSaXhEUVhaRFJDeEpRWFZEVHl4RFFVTk1MRWxCUVUwc1MwRkJTeXh2UWtGQlRDeEZRVUZPTEVOQlEwUXNRMEZGUkN4SFFVRkpMRXRCUVVzc1QwRkJUQ3hEUVVGaExHTkJRV3BDTEVOQlFXbERMRU5CUXk5Q0xFZEJRVWtzUzBGQlRTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1VVRkJha0lzUTBGQk1rSXNVVUZCTTBJc1EwRkJWaXhEUVVOQkxFbEJRVWtzVlVGQlNpeERRVUZwUWl4SFFVRnFRaXhEUVVOQkxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWRCUVdoQ0xFTkJRWEZDTEhsQ1FVRnlRaXhEUVVGUUxFTkJRMFFzUTBGS1JDeEpRVWxQTEVOQlEwd3NUVUZCVHl4SlFVRlFMRU5CUTBRc1EwRkRSaXhEUVhSRVJDeERRWGRFUVN4TFFVRkxMR05CUVV3c1EwRkJjMElzVTBGQlV5eEpRVUZVTEVOQlFXVXNRMEZEYmtNc1RVRkJUeXhMUVVGUUxFTkJRMFFzUTBGR1JDeERRVWxCTEV0QlFVc3NiVUpCUVV3c1EwRkJNa0lzVTBGQlV5eFJRVUZVTEVOQlFXMUNMRkZCUVc1Q0xFTkJRVFpDTEZGQlFUZENMRU5CUVhWRExFTkJRMmhGTEUxQlFVOHNUVUZCU3l4dlFrRkJUQ3hEUVVFd1FpeExRVUZMTEZkQlFVd3NRMEZCYVVJc1VVRkJha0lzUTBGQk1rSXNVVUZCTTBJc1EwRkJNVUlzUTBGQlowVXNVVUZCYUVVc1EwRkJVQ3hEUVVORUxFTkJSa1FzUTBGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1NVRkJTU3hUUVVGVkxFVkJRV1FzUTBGRlFTeExRVUZMTEZGQlFVd3NRMEZCWjBJc1ZVRkJWeXhEUVVONlFpeEhRVUZKTEUxQlFVOHNTMEZCU3l4VFFVRk1MRVZCUVZnc1EwRkRRU3hIUVVGSkxFMUJRVThzUzBGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRVmdzUTBGRFFTeEhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1JVRkJORUlzUTBGQk5VSXNSVUZCYVVNc1MwRkJTeXhIUVVGTUxFTkJRVk1zUjBGQlJ5eEhRVUZhTEVOQlFYSkRMRU5CUVhWRUxFTkJRM0pFTEV0QlFVc3NTVUZCVEN4RFFVRlpMRWxCUVZvc1EwRkRRU3hMUVVGTExGRkJRVXdzUTBGQlowSXNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFXaENMRU5CUTBFc1IwRkJTU3hMUVVGTExGRkJRVXdzUTBGQll5eEpRVUZrTEVkQlFYVkNMRkZCUVROQ0xFTkJRMFVzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhMUVVGTExGRkJRVXdzUTBGQll5eExRVUZ3UXl4RFFVRXlReXh2UkVGQk0wTXNSVUZEUml4SFFVRkpMRU5CUVVNc1MwRkJTeXhWUVVGV0xFTkJRMFVzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhMUVVGTExFdEJRVE5DTEVOQlFXdERMREJEUVVGc1F5eEZRVU5HTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMR05CUVhSQ0xFTkJRVkFzUTBGRFJDeERRVU5FTEVkQlFVa3NWVUZCVnl4TFFVRkxMRXRCUVhCQ0xFTkJRVEpDTEZOQlFWY3NTMEZCU3l4UlFVRXpReXhEUVVOQkxFdEJRVXNzVFVGQlRDeERRVUZqTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhMUVVGTExHRkJRVXdzUlVGQmNrSXNRMEZCTWtNc1VVRkJNME1zUTBGQmNVUXNVVUZCY2tRc1EwRkJLMFFzU1VGQkwwUXNRMEZCWkN4RFFVTkJMRWRCUVVrc1MwRkJTeXhIUVVGTUxFTkJRVk1zUjBGQlJ5eE5RVUZhTEVOQlFVb3NRMEZCZVVJc1MwRkJTeXhUUVVGTUxFTkJRV2xDTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhIUVVGSExFMUJRWFJDTEVOQlFUaENMRXRCUVRsQ0xFTkJRV3BDTEVOQlFYcENMRWxCUTBzc1RVRkJTeXhUUVVGTUxFTkJRV2xDTEU5QlFXcENMRU5CUTB3c1RVRkJUeXhOUVVGTExGVkJRVXdzUTBGQlowSXNTVUZCYUVJc1EwRkJjMElzWlVGQmRFSXNRMEZCVUN4RFFVTkVMRU5CYWtKRUxFTkJiVUpCTzBGQlJVRXNUVUZCU3l4dlFrRkJUQ3hEUVVFMFFpeFZRVUZYTEVOQlEzSkRMRWRCUVVrc1RVRkJUeXhMUVVGTExGTkJRVXdzUlVGQldDeERRVU5CTEV0QlFVc3NTMEZCVEN4RFFVRmhMRU5CUTFnc1NVRkJTeXhMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZZTEVOQlFXbENMRXRCUVVzc1MwRkJkRUlzUTBGQk5rSXNTMEZCU3l4SFFVRnNReXhGUVVGMVF5eFBRVUYyUXl4RFFVRXJReXhSUVVFdlF5eERRVUY1UkN4SlFVRjZSQ3hEUVVSTkxFTkJSVmdzVDBGQlVTeExRVUZMTEV0QlJrWXNRMEZCWWl4RFFVbEJMRXRCUVVzc1NVRkJUQ3hIUVVOQkxFdEJRVXNzU1VGQlRDeERRVUZaTEV0QlFVc3NTVUZCVEN4SFFVRmpMRWRCUVVjc1UwRkJOMElzUTBGRFFTeE5RVUZQTEUxQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGb1FpeERRVUZ6UWl4cFFrRkJkRUlzUTBGQlVDeERRVU5FTEVOQlZFUXNRMEZYUVN4TFFVRkxMR0ZCUVV3c1EwRkJjVUlzVlVGQlZ5eERRVU01UWl4SFFVRkpMRkZCUVZNc1NVRkJZaXhEUVVWQkxFZEJRVWtzVFVGQlR5eExRVUZMTEZOQlFVd3NSVUZCV0N4RFFVTkJMRXRCUVVzc1NVRkJUQ3hIUVVOQkxFdEJRVXNzVjBGQlRDeERRVUZ0UWl4RlFVRnVRaXhEUVVOQkxFZEJRVWtzVVVGQlV5eExRVUZMTEc5Q1FVRk1MRVZCUVdJc1EwRkRRU3hMUVVGTExFMUJRVXdzUTBGQll5eERRVUZETEUxQlFVUXNRMEZCWkN4RFFVTkJMRTFCUVU4c1EwRkJReXhQUVVGUExFbEJRV1lzUTBGQmNVSXNRMEZEYmtJc1QwRkJUeXhOUVVGUUxFTkJRV01zUjBGQlJ5eFpRVUZxUWl4RlFVTkJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeEpRVUZxUWl4RFFVRnpRaXhQUVVGUExHVkJRVkFzUlVGQmRFSXNSVUZEUVN4UFFVRlBMRTFCUVZBc1EwRkJZeXhIUVVGSExFMUJRV3BDTEVWQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVZrc1NVRkJXaXhEUVVGcFFpeFBRVUZUTEU5QlFVOHNiMEpCUVZBc1JVRkJNVUlzUlVGRFJDeERRVU5FTEV0QlFVc3NTVUZCVEN4SFFVTkJMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xHbENRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRm9Ra1FzUTBGclFrRTdRVUZGUVN4TlFVRkxMRkZCUVV3c1EwRkJaMElzVTBGQlV5eFRRVUZVTEVOQlFXOUNMSE5DUVVGd1FpeERRVUUwUXl4RFFVTXhSQ3hIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZCTEVkQlFVa3NUVUZCVHl4TFFVRkxMRk5CUVV3c1JVRkJXQ3hEUVVFMlFpeE5RVUZSTEVsQlFYSkRMRU5CUVRKRExGTkJRVmNzUlVGQmRFUXNRMEZEUVN4TFFVRkxMRlZCUVV3c1EwRkJhMElzUlVGQmJFSXNRMEZEUVN4TFFVRkxMRWxCUVV3c1IwRkRRU3hOUVVGUExFTkJRVU1zUzBGQlN5eEhRVUZNTEVOQlFWTXNSMEZCUnl4TlFVRmFMRU5CUVZJc1EwRkJOa0lzUTBGRE0wSXNSMEZCU1N4RFFVRkRMRXRCUVV3c1EwRkJXU3hEUVVOV0xFOUJRVThzVFVGQlVDeERRVUZqTEVkQlFVY3NTMEZCYWtJc1JVRkRRU3hIUVVGSkxFOUJRVThzYTBKQlFWQXNRMEZCTUVJc1IwRkJSeXhOUVVFM1FpeERRVUZLTEVOQlFUQkRMRTFCUXpORExFTkJTRVFzU1VGSFR5eFBRVUZSTEV0QlFWSXNRMEZGVUN4SFFVRkpMRTFCUVU4c1QwRkJUeXhUUVVGUUxFVkJRVmdzUTBGQkswSXNWMEZCTDBJc1EwRkJORU1zVVVGQk5VTXNRMEZCYzBRc1VVRkJkRVFzUTBGRFFTeEhRVUZKTEU5QlFVOHNUMEZCVUN4RFFVRmxMRmRCUVdZc1JVRkJPRUlzUTBGQmJFTXNRMEZCY1VNc1EwRkRia01zUzBGQlN5eE5RVUZNTEVOQlFXTXNTMEZCWkN4RFFVTkJMRXRCUVVzc1UwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVTkJMRWRCUVVrc1YwRkJZU3h6UWtGQmFrSXNRMEZCZVVNc1EwRkRka01zVTBGQlZ5eFBRVUZQTEV0QlFXeENMRU5CUTBFc1UwRkJWeXhQUVVGUExGRkJRV3hDTEVOQlEwUXNRMEZEUkN4SFFVRkpMRU5CUVVNc1UwRkJUQ3hEUVVORkxGbEJRV01zVDBGQlR5eEhRVUZRTEVOQlFWY3NSMEZCUnl4SlFVRmtMRU5CUVdRc1EwRkRTQ3hEUVVORUxFOUJRVThzYVVKQlFWQXNRMEZCZVVJc1NVRkJla0lzUlVGRFFTeFBRVUZQTEd0Q1FVRlFMRU5CUVRCQ0xFbEJRVEZDTEVOQlFXZERMRk5CUVdoRExFTkJRVEpETEZkQlFUTkRMRU5CUVhkRUxGRkJRWGhFTEVOQlFXdEZMRkZCUVd4RkxFTkJRVFJGTEhOQ1FVRTFSU3hGUVVOQkxFOUJRVThzWTBGQlVDeERRVUZ6UWl4SlFVRjBRaXhEUVVFMFFpeFJRVUUxUWl4RlFVTkJMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRnhRaXhQUVVGUExGVkJRVkFzUTBGQmEwSXNTVUZCYkVJc1EwRkJkMElzVlVGQmVFSXNRMEZCY2tJc1JVRkRSQ3hEUVVORUxFMUJRVThzVFVGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWE5DTEZWQlFWa3NaVUZCV2l4RFFVRTRRaXhyUWtGQmNFUXNRMEZCVUN4RFFVTkVMRU5CTjBKRUxFTkJLMEpCTEV0QlFVc3NhMEpCUVV3c1EwRkJNRUlzVTBGQlV5eEpRVUZVTEVOQlFXVXNVMEZCWml4RFFVRXdRaXhYUVVFeFFpeERRVUYxUXl4UlFVRjJReXhEUVVGcFJDeFJRVUZxUkN4RFFVRXlSQ3h6UWtGQk0wUXNRMEZCYlVZc1EwRkRNMGNzUjBGQlNTeExRVUZMTEVkQlFVd3NRMEZCVXl4SFFVRkhMRXRCUVZvc1EwRkJTaXhEUVVGM1FpeERRVU4wUWl4TFFVRkxMRXRCUVV3c1EwRkJZU3hWUVVGWkxFdEJRVXNzYVVKQlFVd3NRMEZCZFVJc1MwRkJTeXhMUVVFMVFpeERRVUZ0UXl4TFFVRkxMRkZCUVhoRExFTkJRVm9zUTBGQlowVXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeExRVUYwUWl4RFFVRTJRaXh6UWtGQk4wSXNRMEZCTjBVc1EwRkRRU3hMUVVGTExFbEJRVXdzUTBGQldTeE5RVUZhTEVOQlEwUXNRMEZJUkN4SlFVZFBMRWxCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVjBGQllpeEZRVUUwUWl4RFFVRTFRaXhGUVVGcFF5eExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRTFCUVhSRUxFTkJRVGhFTEVOQlEyNUZMRWRCUVVrc1UwRkJTaXhEUVVGbExFdEJRVXNzVlVGQlRDeEhRVU5tTEV0QlFVc3NTVUZCVEN4RFFVRlpMRTFCUVZvc1EwRkRRU3hMUVVGTExFMUJRVXdzUTBGQll5eEpRVUZrTEVOQlEwRXNTMEZCU3l4TFFVRk1MRU5CUVdFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFXcENMRU5CUVdJc1EwRkRSQ3hEUVV4TkxFbEJTMEVzU1VGQlNTeExRVUZMTEU5QlFVd3NRMEZCWVN4WFFVRmlMRVZCUVRSQ0xFTkJRVFZDTEVWQlFXbERMRU5CUVVNc1MwRkJTeXhSUVVGMlF5eEZRVUZ0UkN4TFFVRkxMRWRCUVV3c1EwRkJVeXhKUVVGVUxFZEJRV3RDTEZsQlFYSkZMRWRCUTBNc1MwRkJTeXhIUVVGTUxFTkJRVk1zU1VGQlZDeEhRVUZyUWl4TFFVRnNRaXhGUVVFeVFpeExRVUZMTEVkQlFVd3NRMEZCVXl4SlFVRlVMRWRCUVd0Q0xFdEJSRGxETEVkQlJVTXNTMEZCU3l4SlFVRk1MRVZCUVdFc1IwRkJSeXhMUVVGb1FpeEZRVUY1UWl4TFFVRkxMRWxCUVV3c1JVRkJZU3hIUVVGSExFMUJSamxETEVOQlJYVkVMRU5CUXpWRUxFZEJRVWtzWVVGQlpTeFRRVUZ1UWl4RFFVRTRRaXhMUVVGTExGVkJRVXdzUjBGRE9VSXNTMEZCU3l4SlFVRk1MRU5CUVZrc1MwRkJTeXhIUVVGTUxFTkJRVk1zU1VGQmNrSXNRMEZEUVN4TFFVRkxMR2xDUVVGTUxFTkJRWFZDTEVsQlFYWkNMRVZCUTBFc1MwRkJTeXhMUVVGTUxFTkJRV0VzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRV0lzUTBGRFFTeEhRVUZKTEZsQlFXRXNTMEZCU3l4SlFVRk1MRWRCUVdNc1MwRkJaQ3hEUVVGelFpeERRVUYwUWl4RFFVRXdRaXhEUVVFelF5eERRVU5CTEVkQlFVa3NTMEZCU3l4TFFVRk1MRU5CUVZjc1RVRkJXQ3hEUVVGclFpeE5RVUZzUWl4SFFVRTJRaXhWUVVGcVF5eERRVUUyUXl4RFFVTXpReXhIUVVGSkxFOUJRVkVzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCZGtJc1EwRkRRU3hIUVVGSkxFdEJRVXNzU1VGQlRDeEhRVUZqTEV0QlFXeENMRU5CUTBVc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4TFFVRjBRaXhEUVVFMlFpdzRRa0ZCTjBJc1JVRkVSaXhKUVVkRkxFMUJRVXNzWjBKQlFVd3NRMEZCYzBJc1MwRkJkRUlzUTBGQk5rSXNjME5CUVRkQ0xFVkJRMGdzUTBGRFJDeEhRVUZKTEV0QlFVc3NTVUZCVEN4SFFVRmpMRXRCUVdRc1JVRkJkVUlzUzBGQlN5eExRVUZNTEVOQlFWY3NUVUZCV0N4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4SlFVRnlRaXhIUVVFNFFpeGhRVUY2UkN4RFFVTkZMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1RVRkJXQ3hEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhMUVVFelF5eERRVUZyUkN3clFrRkJiRVFzUlVGRFNDeERRV3BDVFN4SlFXbENRU3hKUVVGSkxFdEJRVXNzVDBGQlRDeERRVUZoTEZkQlFXSXNSVUZCTkVJc1EwRkJOVUlzUlVGQmFVTXNRMEZCUXl4TFFVRkxMRkZCUVhaRExFVkJRVzFFTEV0QlFVc3NSMEZCVEN4RFFVRlRMRWxCUVZRc1IwRkJhMElzV1VGQmVrVXNRMEZCZFVZc1EwRkROVVlzUjBGQlNTeExRVUZMTEZGQlFVd3NRMEZCWXl4SlFVRmtMRU5CUVcxQ0xFdEJRVXNzUjBGQlRDeERRVUZUTEVsQlFUVkNMRWRCUTBFc1EwRkJReXhMUVVGTExFMUJRVXdzUTBGQll5eExRVUZMTEhWQ1FVRnVRaXhEUVVFMlF5eExRVUZMTEdGQlFXNUVMRVZCUVd0RkxFbEJRV3hGTEVOQlFYVkZMRXRCUVVzc1IwRkJUQ3hEUVVGVExFbEJRV2hHTEVOQlJFRXNSVUZGUXl4TFFVRkxMRmRCUVV3c1JVRkJiMElzUzBGQlN5eEhRVUZNTEVOQlFWTXNTVUZCVkN4RlFVRnBRaXhQUVVZeFF5eERRVWRGTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzUzBGQlN5eEhRVUZNTEVOQlFWTXNTMEZCTDBJc1EwRkJjME1zU1VGQlRTeExRVUZMTEVkQlFVd3NRMEZCVXl4SlFVRm1MRU5CUVhOQ0xIbERRVUUxUkN4RlFVTkdMRXRCUVVzc1NVRkJUQ3hEUVVGWkxFMUJRVm9zUTBGRFFTeEhRVUZKTEZOQlFVb3NRMEZCWlN4RFFVTmlMRXRCUVVzc1MwRkJUQ3hEUVVGaExFdEJRVXNzYVVKQlFVd3NRMEZCZFVJc1VVRkJka0lzUTBGQmFVTXNVVUZCYWtNc1EwRkJNa01zUzBGQlN5eEhRVUZvUkN4RFFVRmlMRU5CUTBRc1EwRkdSQ3hKUVVWUExFbEJRVWtzUzBGQlN5eEpRVUZNTEVkQlFXTXNSMEZCUnl4RlFVRnFRaXhGUVVGMVFpeHpRa0ZCTTBJc1EwRkJiVVFzUTBGRGVFUXNSMEZCU1N4RFFVRkRMSFZDUVVGMVFpeGxRVUUxUWl4RFFVTkZMSFZDUVVGMVFpeGxRVUYyUWl4RFFVRjVReXhMUVVGTExFdEJRVGxETEVOQlEwWXNTMEZCU3l4TFFVRk1MRU5CUVdFc1MwRkJTeXhwUWtGQlRDeERRVUYxUWl4UlFVRjJRaXhEUVVGcFF5eFJRVUZxUXl4RFFVRXlReXhMUVVGTExFZEJRV2hFTEVOQlFXSXNRMEZEUkN4RFFVcE5MRWxCU1VFc1EwRkRUQ3hMUVVGTExFdEJRVXdzUTBGQllTeExRVUZMTEVkQlFXeENMRU5CUTBRc1EwRkRSQ3hMUVVGTExGTkJRVXdzUTBGQmFVSXNTVUZCYWtJc1EwRkRSQ3hEUVdoQ1RTeEpRV2RDUVN4TlFVRkxMRlZCUVV3c1IwRkRVaXhEUVRORFJDeERRVFpEUVN4TFFVRkxMR2xDUVVGTUxFTkJRWGxDTEZOQlFWTXNTVUZCVkN4RFFVRmxMRU5CUTNSRExFZEJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNWMEZCWWl4RlFVRTBRaXhEUVVGb1F5eERRVUZ0UXl4RFFVTnFReXhIUVVGSkxFdEJRVXNzUjBGQlRDeERRVUZUTEVkQlFVY3NVVUZCV2l4RFFVRktMRU5CUVRKQ0xFTkJRM3BDTEV0QlFVc3NVVUZCVEN4RFFVRm5RaXhKUVVGb1FpeERRVU5CTEV0QlFVc3NSMEZCVEN4RFFVRlhMRXRCUVVzc1owSkJRVXdzUlVGQldDeERRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRlpMRWRCUVVjc1VVRkJaaXhGUVVOQkxFMUJRVThzVFVGQlN5eEhRVUZhTEVOQlEwUXNRMEZNUkN4SlFVdFBMRU5CUTB3c1MwRkJTeXhSUVVGTUxFTkJRV2RDTEV0QlFXaENMRU5CUTBRc1EwRkRSaXhEUVVORUxFMUJRVThzVFVGQlN5eEhRVUZNTEVOQlFWY3NTMEZCU3l4SlFVRk1MRWRCUVdNc1IwRkJSeXhIUVVGcVFpeEZRVUYzUWl4TFFVRkxMRWxCUVV3c1IwRkJZeXhIUVVGSExFMUJRWHBETEVOQlFXdEVMRXRCUVVzc1lVRkJUQ3hGUVVGc1JDeERRVUY1UlN4TFFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCTTBZc1EwRkRSQ3hEUVZwRUxFTkJZMEU3UVVGRlFTeE5RVUZMTEZsQlFVd3NRMEZCYjBJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGRGFrTXNTMEZCU3l4RlFVRk1MRU5CUVZVc1NVRkJWaXhEUVVOQkxFZEJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNWMEZCWWl4RlFVRTBRaXhEUVVGb1F5eERRVUZ0UXl4RFFVTnFReXhMUVVGTExGTkJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkRRU3hMUVVGTExGVkJRVXdzUTBGQmEwSXNTMEZCYkVJc1EwRkRSQ3hEUVVOR0xFTkJUa1FzUTBGUlFUdEJRVVZCTEUxQlFVc3NWMEZCVEN4RFFVRnRRaXhUUVVGVExGZEJRVlFzUTBGQmMwSXNRMEZEZGtNc1IwRkJTU3hOUVVGUExFdEJRVXNzVTBGQlRDeEZRVUZZTEVOQlFUWkNMRk5CUVZjc1MwRkJTeXhYUVVFM1F5eERRVU5CTEV0QlFVc3NWMEZCVEN4RFFVRnRRaXhYUVVGdVFpeERRVU5CTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhKUVVGc1FpeEZRVU5CTEV0QlFVc3NUVUZCVEN4RFFVRlpMRWRCUVVjc1RVRkJaaXhGUVVOQkxFdEJRVXNzVFVGQlRDeERRVUZqTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzUjBGQlJ5eE5RVUY2UWl4RFFVRnBReXhMUVVGcVF5eERRVUYzUXl4TFFVRjRReXhEUVVGa0xFTkJRMEVzUjBGQlNTeExRVUZMTEU5QlFVd3NRMEZCWVN4WFFVRmlMRVZCUVRSQ0xFTkJRV2hETEVOQlEwVXNTMEZCU3l4VFFVRk1MRU5CUVdsQ0xGZEJRV3BDTEVOQlEwWXNTMEZCU3l4cFFrRkJUQ3hEUVVGMVFpeEpRVUYyUWl4RFFVRTJRaXhMUVVFM1FpeEZRVU5CTEV0QlFVc3NWMEZCVEN4RFFVRnRRaXhSUVVGdVFpeERRVU5CTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFbEJRV2hDTEVOQlFYTkNMRzlDUVVGMFFpeERRVUZRTEVOQlEwUXNRMEZZUkN4RFFXRkJPMEZCUlVFc1RVRkJTeXh2UWtGQlRDeERRVUUwUWl4VFFVRlRMRWxCUVZRc1EwRkJaU3hOUVVGbUxFTkJRWFZDTEVOQlEycEVMRWRCUVVrc1ZVRkJWeXhMUVVGTExGZEJRWEJDTEVOQlEwRXNTMEZCU3l4WFFVRk1MRU5CUVcxQ0xFdEJRVzVDTEVOQlEwRXNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFbEJRV3hDTEVWQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVdNc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4TlFVRjBRaXhEUVVFNFFpeEpRVUU1UWl4RFFVRmtMRU5CUTBFc1MwRkJTeXhwUWtGQlRDeERRVUYxUWl4SlFVRjJRaXhEUVVFMlFpeEpRVUUzUWl4RlFVTkJMRXRCUVVzc1YwRkJUQ3hEUVVGdFFpeFJRVUZ1UWl4RFFVTkJMRTFCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhOQ0xIbENRVUYwUWl4RFFVRlFMRU5CUTBRc1EwRlNSQ3hEUVZWQk8wRkJSVUVzVFVGQlN5eHBRa0ZCVEN4RFFVRjVRaXhUUVVGVExFbEJRVlFzUTBGQlpTeGxRVUZtTEVOQlFXZERMRU5CUTNaRUxFZEJRVWtzWTBGQlpTeHBRa0ZCYlVJc1MwRkJTeXhKUVVGTUxFZEJRV01zUjBGQlJ5eE5RVUYyUkN4RFFVVkJMRWRCUVVrc1dVRkJTaXhEUVVGclFpeERRVU5vUWl4TFFVRkxMRWxCUVV3c1EwRkJXU3hMUVVGTExHZENRVUZNTEVWQlFWb3NRMEZEUVN4TFFVRkxMRlZCUVV3c1EwRkJhMElzU1VGQmJFSXNRMEZEUkN4RFFVaEVMRWxCUjA4c1EwRkRURHRCUVVOQk8wRkJRMEVzU1VGQlNTeFhRVUZaTEV0QlFVc3NWVUZCY2tJc1EwRkJhVU1zVlVGQldTeExRVUZMTEUxQlFXeEVMRU5CUTBFc1MwRkJTeXhWUVVGTUxFTkJRV3RDTEVsQlFXeENMRU5CUVhkQ0xFdEJRVXNzVFVGQlRDeERRVUZqTEVWQlFXUXNRMEZEZUVJc1MwRkJTeXhKUVVGTUxFTkJRVmtzUzBGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRVm9zUTBGRFFTeExRVUZMTEZWQlFVd3NRMEZCYTBJc1MwRkJiRUlzUTBGRFFTeExRVUZMTEZWQlFVd3NRMEZCYTBJc1UwRkJiRUlzUTBGQk5rSXNTMEZCU3l4TlFVRk1MRU5CUVdNc1UwRkJaQ3hEUVVNNVFpeERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVrc1YwRkJZU3hEUVVGRExGbEJRVVFzUlVGQmFVSXNTMEZCU3l4SlFVRk1MRU5CUVZVc1NVRkJWaXhEUVVGbExFMUJRV2hETEVWQlFUQkRMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEVsQlFVd3NRMEZCVlN4SlFVRldMRU5CUVdVc1EwRkJaaXhEUVVGcVFpeERRVUV6UXl4RFFVRnJSaXhMUVVGTExFbEJRVXdzUTBGQlZTeEpRVUZXTEVOQlFXVXNRMEZCWml4RFFVRnNSaXhEUVVGelJ5eEpRVUYwU0N4RFFVTkJMRWRCUVVrc1MwRkJTeXhOUVVGTUxFVkJRV1VzVTBGQmJrSXNRMEZCT0VJc1EwRkROVUlzUjBGQlNTeFhRVUZaTEV0QlFVc3NUVUZCY2tJc1EwRkRRU3hMUVVGTExFMUJRVXdzUTBGQll5eEpRVUZrTEVOQlEwRXNSMEZCU1N4TFFVRkxMRVZCUVZRc1EwRkRSU3hMUVVGTExGTkJRVXdzUTBGQlpTeExRVUZMTEVWQlFYQkNMRU5CUVhkQ0xFbEJRWGhDTEVWQlEwWXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVOQlFYVkNMRk5CUVhaQ0xFVkJRMEVzUzBGQlN5eE5RVUZNTEVOQlFXTXNVMEZCWkN4RFFVTkVMRU5CVUVRc1NVRlBUeXhKUVVGSkxHVkJRVW9zUTBGQmNVSXNRMEZETVVJc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEVsQlFXcENMRU5CUVhWQ0xGTkJRWFpDTEVWQlEwUXNRMEZEUml4RFFUbENSQ3hEUVdkRFFUdEJRVU5CTzBGQlJVRXNUVUZCU3l4WFFVRk1MRU5CUVcxQ0xGTkJRVk1zU1VGQlZDeERRVUZsTEZOQlFXWXNRMEZCTUVJc1EwRkRla01zUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4SFFVRkpMRlZCUVZjc1JVRkJaaXhEUVVOQkxFbEJRVXNzUjBGQlNTeEhRVUZKTEVOQlFXSXNRMEZCWjBJc1JVRkJTU3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZvUXl4RFFVRjNReXhIUVVGNFF5eERRVUUyUXl4RFFVTXpReXhIUVVGSkxGZEJRV0VzVDBGQlR5eFBRVUZRTEVOQlFXVXNWMEZCWml4RlFVRTRRaXhEUVVFelF5eEZRVUZuUkN4TFFVRkxMRTFCUVV3c1EwRkJXU3hEUVVGYUxFVkJRV1VzU1VGQlppeEhRVUYzUWl4WlFVRTFSU3hEUVVORkxFOUJRVThzWjBKQlFWQXNRMEZCZDBJc1ZVRkJWU3hMUVVGc1F5eERRVUY1UXl3eVJVRkJla01zUlVGRFJpeFBRVUZQTEZOQlFWQXNRMEZCYVVJc1MwRkJTeXhOUVVGTUxFTkJRVmtzUTBGQldpeERRVUZxUWl4RFFVRnBReXhKUVVGcVF5eERRVUYxUXl4UlFVRjJReXhGUVVORUxFTkJRMG9zUTBGVVJDeERRVmRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRU3hOUVVGTExHRkJRVXdzUTBGQmNVSXNVMEZCVXl4TFFVRlVMRU5CUVdkQ0xHdENRVUZvUWl4RFFVRnZReXhWUVVGd1F5eERRVUZuUkN4elFrRkJhRVFzUTBGQmQwVXNRMEZETTBZc1IwRkJTU3hSUVVGVExFbEJRV0lzUTBGRlFTeEhRVUZKTEUxQlFVOHNSVUZCV0N4RFFVRmxMRTFCUVZFc1NVRkJka0lzUTBGRFFTeE5RVUZQTEVOQlFVTXNTMEZCU3l4SFFVRk1MRU5CUVZNc1MwRkJWQ3hEUVVGU0xFTkJRWGxDTEVOQlEzWkNMRWRCUVVrc1EwRkJReXhMUVVGTUxFTkJRVmtzUTBGRFZpeFBRVUZQTEUxQlFWQXNRMEZCWXl4SFFVRkhMRXRCUVdwQ0xFVkJRMEVzUjBGQlNTeHZRa0ZCYzBJc1QwRkJUeXhyUWtGQlVDeERRVUV3UWl4TFFVRXhRaXhEUVVFeFFpeERRVUUwUkN4TlFVTTNSQ3hEUVVoRUxFbEJSMDhzVDBGQlVTeExRVUZTTEVOQlJWQXNSMEZCU1N4SlFVRktMRU5CUTBFc1IwRkJTU3haUVVGakxFOUJRVThzU1VGQlVDeEhRVUZuUWl4SFFVRkhMRXRCUVhKRExFTkJRMFVzU1VGQlRTeEpRVUZPTEVOQlJFWXNTVUZGU3l4SlFVRkpMRTlCUVU4c1NVRkJVQ3hIUVVGblFpeEhRVUZITEZGQlFYWkNMRU5CUVdsRExFTkJRM0JETEVsQlFVMHNUMEZCVHl4WFFVRlFMRU5CUVcxQ0xITkNRVUZ1UWl4RFFVRk9MRU5CUTBFc1IwRkJTU3hQUVVGUExFbEJRVkFzUjBGQlowSXNSMEZCUnl4TFFVRnVRaXhGUVVFMFFpeHpRa0ZCTlVJc1JVRkJjMFFzUTBGQlF5eDFRa0ZCZFVJc1lVRkJiRVlzUTBGQmFVY3NRMEZETDBZc2RVSkJRWFZDTEdGQlFYWkNMRU5CUVhWRExFOUJRVThzV1VGQk9VTXNRMEZEUkN4RFFVTkdMRU5CVEVrc1NVRk5TQ3hMUVVGTkxFOUJRVThzWjBKQlFWQXNRMEZCZDBJc1MwRkJlRUlzUTBGQkswSXNjMEpCUVM5Q0xFTkJRVTRzUTBGRFJpeExRVUZMTEVsQlFVd3NRMEZCVlN4SFFVRldMRVZCUTBRc1EwRkRSQ3hOUVVGUExFdEJRVkFzUTBGRFJDeERRWFpDUkN4RFFYbENRVHRCUVVOQk8wRkJRMEU3UVVGRlFTeE5RVUZMTEZWQlFVd3NRMEZCYTBJc1UwRkJVeXhQUVVGVUxFTkJRV3RDTEVOQlEyeERMRWRCUVVrc1RVRkJUeXhMUVVGTExGTkJRVXdzUlVGQldDeERRVU5CTEVkQlFVa3NVMEZCVnl4TFFVRkxMRTlCUVV3c1EwRkJZU3hoUVVGaUxFVkJRVGhDTEU5QlFUZERMRU5CUVhORUxGRkJRVlVzUzBGQlZpeERRVU4wUkN4SFFVRkpMRXRCUVVzc1NVRkJUQ3hIUVVGakxFZEJRVWNzU1VGQmNrSXNRMEZCTWtJc1EwRkRla0lzUjBGQlNTeERRVUZETEU5QlFVUXNSVUZCV1N4RFFVRkRMRXRCUVVzc1RVRkJUQ3hEUVVGakxFdEJRVXNzYlVKQlFXNUNMRU5CUVhsRExFdEJRVXNzWVVGQkwwTXNSVUZCT0VRc1NVRkJPVVFzUTBGQmJVVXNTMEZCU3l4TFFVRjRSU3hEUVVGYUxFZEJRME1zUzBGQlN5eFBRVUZNTEVOQlFXRXNWMEZCWWl4RlFVRTBRaXhEUVVFMVFpeEZRVU5CTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUzBGQlN5eExRVUYwUWl4RFFVRTJRaXhMUVVGTExFZEJRV3hETEVWQlFYVkRMRTlCUVhaRExFTkJRU3RETEVsQlFTOURMRWRCUVhkRUxFTkJRVU1zUTBGR01VUXNRMEZCU2l4RFFVZEZMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTMEZCU3l4TFFVRXpRaXhEUVVGclF5eG5Ra0ZCYTBJc1MwRkJTeXhMUVVGMlFpeERRVUVyUWl4bFFVRnFSU3hGUVVOR0xFZEJRVWtzUTBGQlF5eFBRVUZFTEVWQlFWa3NTMEZCU3l4WFFVRnFRaXhGUVVGblF5eExRVUZMTEV0QlFVd3NSMEZCWlN4UFFVRnVSQ3hEUVVORkxFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1MwRkJTeXhMUVVFelFpeERRVUZyUXl4elJFRkJiRU1zUlVGRFJpeExRVUZMTEVsQlFVd3NRMEZCV1N4TFFVRkxMRXRCUVdwQ0xFTkJRMFFzUTBGU1JDeEpRVkZQTEVsQlFVa3NVMEZCVnl4TFFVRkxMRWxCUVV3c1EwRkJWU3hQUVVGNlFpeERRVUZyUXl4RFFVTjJReXhMUVVGTExFbEJRVXdzUTBGQldTeExRVUZMTEVsQlFVd3NRMEZCVlN4UFFVRjBRaXhEUVVORUxFTkJSazBzU1VGRlFTeERRVU5NTEV0QlFVc3NWVUZCVEN4SFFVTkVMRU5CUTBRc1MwRkJTeXhKUVVGTUxFZEJRMEVzVFVGQlR5eE5RVUZMTEZWQlFVd3NRMEZCWjBJc1NVRkJhRUlzUTBGQmMwSXNXVUZCZEVJc1EwRkJVQ3hEUVVORUxFTkJiRUpFTEVOQmIwSkJPMEZCUlVFc1RVRkJTeXhWUVVGTUxFTkJRV3RDTEZWQlFWY3NRMEZETTBJc1IwRkJTU3hOUVVGUExFdEJRVXNzVTBGQlRDeEZRVUZZTEVOQlEwRXNTMEZCU3l4SlFVRk1MRWRCUTBFc1IwRkJTU3hMUVVGTExFbEJRVXdzUlVGQllTeEhRVUZITEVsQlFXaENMRVZCUVhkQ0xFdEJRVXNzYTBKQlFVd3NSVUZCZUVJc1JVRkJjMFFzUzBGQlN5eEpRVUZNTEVWQlFXRXNSMEZCUnl4SlFVRm9RaXhGUVVGM1FpeERRVUZETEV0QlFVc3NTVUZCVEN4RFFVRlZMRlZCUVRkR0xFTkJRVEJITEVOQlEzaEhMRXRCUVVzc1VVRkJUQ3hEUVVGblFpeExRVUZvUWl4RFFVTkJMRXRCUVVzc1VVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVTkVMRU5CU0VRc1NVRkhUeXhEUVVOTUxFdEJRVXNzVVVGQlRDeERRVUZuUWl4TFFVRkxMRWRCUVV3c1EwRkJVeXhIUVVGSExFbEJRVm9zUTBGQmFFSXNRMEZEUVN4TFFVRkxMRkZCUVV3c1EwRkJaMElzUzBGQlN5eG5Ra0ZCVEN4RlFVRm9RaXhEUVVORUxFTkJRMFFzVFVGQlR5eE5RVUZMTEZWQlFVd3NRMEZCWjBJc1NVRkJhRUlzUTBGQmMwSXNhVUpCUVhSQ0xFTkJRVkFzUTBGRFJDeERRVmhFTEVOQllVRXNSMEZCU1N4TlFVRlBMRTlCUVU4c1UwRkJiRUlzUTBGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhMUVVGTUxFTkJRV0VzVTBGQlV5eEhRVUZVTEVOQlFXTXNUMEZCWkN4RFFVRjFRaXhEUVVOc1F5eEhRVUZKTEV0QlFVMHNXVUZCV1N4TFFVRkxMRXRCUVdwQ0xFTkJRWGRDTEVkQlFYaENMRU5CUVZZc1EwRkRRU3hUUVVGWExFdEJRVThzU1VGQlNTeEpRVUZZTEVOQlFXdENMRWRCUVd4Q0xFTkJRWGRDTEVsQlFVa3NUVUZCTlVJc1EwRkJjVU1zUjBGQmFFUXNRMEZEUVN4SFFVRkpMRXRCUVUwc1IwRkJTU3haUVVGS0xFTkJRV2RDTEU5QlFXaENMRU5CUVZZc1EwRkRRU3hKUVVGSkxFZEJRVW9zUTBGQlZTeEhRVUZXTEVOQlFXVXNTVUZCU1N4SFFVRktMRU5CUVZVc1IwRkJWaXhEUVVGbExFbEJRVWtzVVVGQlNpeERRVUZsTEV0QlFVc3NSMEZCY0VJc1EwRkRPVUlzUzBGQlRTeEpRVUZPTEVOQlEwUXNRMEZPUkN4RFFWRkJMRXRCUVVzc1owSkJRVXdzUTBGQmQwSXNTMEZCU3l4TFFVRTNRaXhEUVVWQkxFdEJRVXNzVjBGQlRDeERRVUZ0UWl4VlFVRlhMRU5CUXpWQ0xFZEJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNVMEZCYWtJc1EwRkJORUlzUTBGRE1VSXNUVUZCVHl4SlFVRkpMRk5CUVVvc1EwRkJZU3hMUVVGTExFOUJRV3hDTEVOQlFUSkNMRXRCUVVzc1IwRkJUQ3hEUVVGWExFdEJRVXNzVTBGQk0wTXNRMEZCVUN4RFFVTkVMRU5CUTBZc1EwRktSQ3hEUVUxQkxFZEJRVWtzVFVGQlR5eFJRVUZUTEV0QlFWUXNRMEZCWXl4TlFVRmtMRU5CUVhOQ0xFZEJRWFJDTEVOQlFUSkNMRWRCUVROQ0xFTkJRV2RETEVOQlEzcERMRXRCUVVzc1NVRkJUQ3hEUVVGWkxFVkJRVm9zUTBGRFFTeExRVUZMTEV0QlFVd3NRMEZCWVN4SFFVRmlMRU5CUTBFc1MwRkJTeXhIUVVGTUxFTkJRVmNzUTBGQldDeERRVU5CTEVkQlFVa3NUMEZCVHl4UFFVRlFMRU5CUVdVc1UwRkJia0lzUTBGRFJTeExRVUZMTEVkQlFVd3NRMEZCVnl4SFFVRkpMR1ZCUVVvc1EwRkJiVUlzVFVGQmJrSXNRMEZCTWtJc1IwRkJNMElzUTBGQldDeERRVU5HTEVkQlFVa3NUMEZCVHl4UFFVRlFMRU5CUVdVc1owSkJRVzVDTEVOQlEwVXNTMEZCU3l4VlFVRk1MRU5CUVd0Q0xFOUJRVThzVDBGQlVDeERRVUZsTEdkQ1FVRnFReXhEUVVOR0xFZEJRVWtzVDBGQlR5eFBRVUZRTEVOQlFXVXNUVUZCYmtJc1EwRkRSU3hMUVVGTExFdEJRVXdzUTBGQllTeERRVUZETEVkQlFVUXNRMEZCVFN4RFFVRk9MRU5CUVdJc1EwRkRTQ3hEUVZaRUxFTkJXVUU3UVVGRlFTeEpRVUZKTEUxQlFVOHNUMEZCVHl4VFFVRnNRaXhEUVVWQkxFdEJRVXNzVTBGQlRDeERRVUZwUWl4VlFVRlhMRU5CUXpGQ0xFMUJRVThzU1VGQlNTeExRVUZLTEVOQlFWTXNTVUZCVkN4RFFVRmxMRXRCUVVzc1MwRkJjRUlzUTBGQk1rSXNTMEZCU3l4UlFVRm9ReXhEUVVGUUxFTkJRMFFzUTBGR1JDeERRVWxCTEV0QlFVc3NWMEZCVEN4RFFVRnRRaXhUUVVGVExFZEJRVlFzUTBGQll5eEhRVUZrTEVOQlFXMUNMRU5CUTNCRExFMUJRVThzU1VGQlNTeExRVUZLTEVOQlFWTXNTVUZCVkN4RFFVRmxMRWRCUVdZc1EwRkJiMElzUjBGQmNFSXNRMEZCVUN4RFFVTkVMRU5CUmtRc1EwRkpRVHRCUVVWQkxGTkJRVk1zWVVGQlZDeERRVUZ6UWl4SlFVRjBRaXhEUVVFMFFpeEpRVUUxUWl4RFFVRnJReXhIUVVGc1F5eERRVUYxUXl4SFFVRjJReXhEUVVFMFF5eERRVU14UXl4TFFVRkxMRWxCUVV3c1EwRkJXU3hKUVVGYUxFTkJRMEVzUzBGQlN5eEhRVUZNTEVOQlFWY3NSMEZCV0N4RFFVTkJMRWRCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVTBGQmFrSXNRMEZEUlN4TFFVRkxMRWRCUVV3c1EwRkJVeXhIUVVGVUxFTkJRV1VzUjBGQlppeERRVU5HTEVkQlFVa3NTMEZCU3l4UFFVRk1MRU5CUVdFc1RVRkJha0lzUTBGRFJTeExRVUZMTEV0QlFVd3NRMEZCVnl4RFFVRllMRVZCUVdkQ0xFZEJRV2hDTEVOQlEwWXNUVUZCVHl4TFFVRlFMRU5CUTBRc1EwRkZSQ3hMUVVGTExGVkJRVXdzUTBGQmEwSXNVMEZCVXl4SlFVRlVMRU5CUVdVc1NVRkJaaXhEUVVGeFFpeERRVU55UXl4TlFVRlBMR05CUVdFc1NVRkJZaXhEUVVGclFpeEpRVUZzUWl4RFFVRjNRaXhKUVVGNFFpeERRVUU0UWl4SlFVRTVRaXhEUVVGdlF5eExRVUZMTEZWQlFYcERMRU5CUVhGRUxFdEJRVXNzWVVGQk1VUXNRMEZCVUN4RFFVTkVMRU5CUmtRc1EwRkpRVHRCUVVWQkxFMUJRVXNzV1VGQlRDeERRVUZ2UWl4VFFVRlRMRWxCUVZRc1EwRkJaU3hKUVVGbUxFTkJRWEZDTEVkQlFYSkNMRU5CUVRCQ0xFZEJRVEZDTEVOQlFTdENMRU5CUTJwRUxFMUJRVThzWTBGQllTeEpRVUZpTEVOQlFXdENMRWxCUVd4Q0xFTkJRWGRDTEVsQlFYaENMRU5CUVRoQ0xFbEJRVGxDTEVOQlFXOURMRWRCUVhCRExFTkJRWGxETEVkQlFYcERMRU5CUVZBc1EwRkRSQ3hEUVVaRUxFTkJTVUVzUjBGQlNTeFpRVUZoTEZGQlFWTXNWMEZCVkN4RFFVRnZRaXhMUVVGd1FpeERRVUV5UWl4TlFVRXpRaXhEUVVGdFF5eGhRVUZ1UXl4RFFVRnJSQ3hSUVVGc1JDeERRVUUwUkN4RFFVTXpSU3hMUVVGTExFdEJRVXdzUTBGQllTeExRVUZpTEVOQlEwRXNTMEZCU3l4TlFVRk1MRU5CUVdNc1EwRkJReXhEUVVGRExFMUJRV2hDTEVOQlEwRXNTMEZCU3l4aFFVRk1MRU5CUVhGQ0xFTkJRVU1zUTBGQlF5eGhRVUYyUWl4RFFVTkJMRXRCUVVzc1VVRkJUQ3hEUVVGblFpeFJRVUZvUWl4RFFVTkVMRU5CVEVRc1EwRlBRU3hIUVVGSkxFOUJRVkVzUTBGRFZpeFBRVUZSTEVkQlFVa3NWMEZCU2l4RFFVRmxMRWRCUVdZc1EwRkJiMElzUzBGQmNFSXNRMEZFUlN4RFFVVldMRTlCUVZFc1IwRkJTU3hYUVVGS0xFTkJRV1VzUjBGQlppeERRVUZ2UWl4SlFVRndRaXhEUVVaRkxFTkJSMVlzVDBGQlVTeEhRVUZKTEZkQlFVb3NRMEZCWlN4SlFVRm1MRU5CUVhGQ0xFbEJRWEpDTEVOQlNFVXNRMEZKVml4UFFVRlJMRWRCUVVrc1YwRkJTaXhEUVVGbExFZEJRV1lzUTBGQmIwSXNTMEZCY0VJc1EwRktSU3hEUVV0V0xFOUJRVkVzUjBGQlNTeFhRVUZLTEVOQlFXVXNSMEZCWml4RFFVRnZRaXhKUVVGd1FpeERRVXhGTEVOQlRWWXNUMEZCVVN4SFFVRkpMRmRCUVVvc1EwRkJaU3hIUVVGbUxFTkJRVzlDTEVsQlFYQkNMRU5CUVRCQ0xFbEJRVEZDTEVOQlFXZERMRk5CUVZVc1EwRkJWaXhEUVVGaExFTkJRVVVzVFVGQlR5eEhRVUZGTEdGQlFVWXNSVUZCVUN4RFFVRXlRaXhEUVVFeFJTeERRVTVGTEVOQlQxWXNUMEZCVVN4SFFVRkpMRmRCUVVvc1EwRkJaU3hWUVVGbUxFTkJRVEpDTEVsQlFUTkNMRU5CVUVVc1EwRkJXaXhEUVZWQkxFZEJRVWtzVFVGQlR5eFBRVUZQTEZOQlFXeENMRU5CUlVFc1MwRkJTeXhqUVVGTUxFTkJRWE5DTEZWQlFWY3NRMEZETDBJc1RVRkJUeXhEUVVGRExFMUJRVTBzVFVGQlVDeERRVUZRTEVOQlEwUXNRMEZHUkN4RFFVbEJMRXRCUVVzc1dVRkJUQ3hEUVVGdlFpeFRRVUZUTEZGQlFWUXNRMEZCYlVJc1EwRkRja01zUjBGQlNTeFhRVUZoTEVkQlFVY3NTMEZCY0VJc1EwRkJNa0lzUTBGRGVrSXNSMEZCU1N4UlFVRlRMRXRCUVVzc1ZVRkJUQ3hGUVVGaUxFTkJRMEVzUjBGQlNTeFRRVUZYTEUxQlFVMHNUVUZCYWtJc1JVRkJNa0lzVTBGQlZ5eE5RVUZOTEUxQlFXaEVMRU5CUTBVc1RVRkJUeXhEUVVGRExFOUJRVThzVFVGQlppeERRVU5JTEVOQlEwUXNSMEZCU1N4WFFVRmhMRWRCUVVjc1QwRkJjRUlzUTBGRFJTeE5RVUZQTEZkQlFWVXNTVUZCVml4RFFVRmxMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVmdzUTBGQmFVSXNTMEZCU3l4VlFVRjBRaXhEUVVGclF5eExRVUZMTEV0QlFYWkRMRU5CUVdZc1EwRkJVQ3hEUVVOR0xFZEJRVWtzVjBGQllTeEhRVUZITEV0QlFXaENMRVZCUVhsQ0xGZEJRV0VzUjBGQlJ5eEpRVUY2UXl4RlFVRnBSQ3hYUVVGaExFZEJRVWNzUjBGQmFrVXNSVUZCZDBVc1YwRkJZU3hIUVVGSExFMUJRVFZHTEVOQlEwVXNUVUZCVHl4TFFVRlFMRU5CUTBZc1IwRkJTU3hWUVVGWkxFZEJRVWNzVFVGQmJrSXNRMEZEUlN4TlFVRlBMRTFCUVVzc1ZVRkJUQ3hMUVVGelFpeE5RVUZOTEUxQlFXNURMRU5CUTBZc1RVRkJUeXhEUVVGRExFdEJRVXNzVjBGQllpeERRVU5FTEVOQllrUXNRMEZsUVN4TFFVRkxMR0ZCUVV3c1EwRkJjVUlzVTBGQlV5eFJRVUZVTEVOQlFXMUNMRU5CUTNSRExFZEJRVWtzVDBGQlNpeERRVUZaTEV0QlFVOHNTMEZCU3l4SlFVRjRRaXhEUVVOQkxFZEJRVWtzUzBGQlN5eFBRVUZNTEVWQlFXZENMRlZCUVZrc1IwRkJSeXhIUVVGdVF5eERRVU5GTEV0QlFVc3NWMEZCVEN4RFFVRnRRaXhMUVVGdVFpeERRVVJHTEVsQlJVc3NTVUZCU1N4UFFVRlRMRXRCUVVzc1lVRkJiRUlzUTBGRFNDeFBRVUZQTEVsQlFWQXNRMEZCV1N4SlFVRmFMRU5CUVd0Q0xGRkJRV3hDTEVWQlJFY3NTVUZIU0N4TlFVRkxMRmRCUVV3c1EwRkJiVUlzUzBGQlN5eFZRVUY0UWl4RFFVTklMRU5CVWtRc1EwRlZRVHRCUVVWQkxFbEJRVWNzVFVGQlNDeERRVUZWTEdGQlFWWXNRMEZCTUVJc1IwRkJSeXhOUVVGSUxFTkJRVlVzWVVGQlZpeERRVUV3UWl4VlFVRlhMRU5CUXpkRUxFZEJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNUVUZCWWl4RlFVRjFRaXhEUVVFelFpeERRVUU0UWl4RFFVTTFRaXhMUVVGTExGZEJRVXdzUTBGQmJVSXNTVUZCYmtJc1EwRkRRU3hQUVVORUxFTkJRMFFzUjBGQlNTeExRVUZOTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1JVRkJWaXhEUVVOQkxFZEJRVWtzVFVGQlVTeE5RVUZOTEUxQlFXUXNSVUZCZDBJc1MwRkJTeXhWUVVGTUxFdEJRWE5DTEUxQlFVMHNUVUZCZUVRc1EwRkJaMFVzUTBGRE9VUXNTMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhIUVVOQkxFdEJRVXNzVjBGQlRDeERRVUZ0UWl4TFFVRnVRaXhEUVVORUxFTkJTRVFzU1VGSFR5eEpRVUZKTEUxQlFWRXNUVUZCVFN4TlFVRnNRaXhEUVVFd1FpeERRVU12UWl4TFFVRkxMRmRCUVV3c1EwRkJiVUlzU1VGQmJrSXNRMEZEUkN4RFFVWk5MRWxCUlVFc1EwRkRUQ3hMUVVGTExGZEJRVXdzUTBGQmJVSXNRMEZCUXl4SlFVRkpMRTFCUVhoQ0xFTkJRMFFzUTBGRFJpeERRV1JFTEVOQlowSkJMRWRCUVVjc1RVRkJTQ3hEUVVGVkxHRkJRVllzUTBGQk1FSXNVMEZCVXl4UlFVRlVMRU5CUVcxQ0xFTkJRek5ETEV0QlFVc3NUMEZCVEN4RFFVRmhMRWxCUVdJc1EwRkJhMElzUzBGQlN5eFpRVUZNTEVOQlFXdENMRkZCUVd4Q0xFVkJRVGhDTEUxQlFVMHNUVUZCY0VNc1EwRkJOa01zVFVGQlRTeE5RVUZ5UlN4RlFVTkJMRXRCUVVzc1YwRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RFFVTkVMRU5CU0VRc1EwRkxRU3hIUVVGSExGbEJRVWdzUTBGQlowSXNZVUZCYUVJc1EwRkJaME1zVlVGQlZ5eERRVU42UXl4TFFVRkxMRTlCUVV3c1EwRkJZU3hKUVVGaUxFTkJRV3RDTEUxQlFVMHNUVUZCZUVJc1JVRkRRU3hMUVVGTExGZEJRVXdzUTBGQmJVSXNTVUZCYmtJc1EwRkRSQ3hEUVVoRUxFTkJTMEVzUjBGQlJ5eE5RVUZJTEVOQlFWVXNZVUZCVml4RFFVRXdRaXhUUVVGVExGRkJRVlFzUTBGQmJVSXNRMEZETTBNc1IwRkJTU3hwUWtGQmEwSXNWMEZCWVN4SFFVRkhMRWRCUVdoQ0xFVkJRWFZDTEZkQlFXRXNSMEZCUnl4SlFVRjJReXhGUVVFclF5eFhRVUZoTEVkQlFVY3NTMEZCTDBRc1JVRkJkMFVzVjBGQllTeEhRVUZITEUxQlFUbEhMRU5CUTBFc1MwRkJTeXhQUVVGTUxFTkJRV0VzU1VGQllpeERRVUZyUWl4blFrRkJhMElzVFVGQlRTeE5RVUY0UWl4RFFVRnBReXhOUVVGTkxFMUJRWHBFTEVWQlEwRXNTMEZCU3l4WFFVRk1MRU5CUVcxQ0xFbEJRVzVDTEVOQlEwUXNRMEZLUkN4RFFVMUJMRWRCUVVjc1RVRkJTQ3hEUVVGVkxHRkJRVllzUTBGQk1FSXNWVUZCVnl4RFFVTnVRenRCUVVORUxFVkJSa1FzUTBGSlFTeEhRVUZITEZOQlFVZ3NRMEZCWVN4aFFVRmlMRU5CUVRaQ0xGTkJRVk1zVVVGQlZDeERRVUZ0UWl4RFFVTTVReXhIUVVGSkxGTkJRVk1zVlVGQlZDeEZRVUYxUWl4WFFVRmhMRWRCUVVjc1NVRkJka01zUlVGQkswTXNWMEZCWVN4SFFVRkhMRXRCUVM5RUxFVkJRMEVzUlVGQlJTeERRVUZETEZkQlFXRXNSMEZCUnl4TFFVRm9RaXhGUVVGNVFpeFhRVUZoTEVkQlFVY3NUVUZCTVVNc1IwRkJjVVFzUzBGQlN5eFZRVUZNTEV0QlFYTkNMRTFCUVUwc1RVRkJia1lzUTBGRVNpeERRVVZGTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWxCUVdJc1EwRkJhMElzVFVGQlRTeE5RVUY0UWl4RlFVTkdMRXRCUVVzc1YwRkJUQ3hEUVVGdFFpeExRVUZ1UWl4RFFVTkVMRU5CVEVRc1EwRlBRU3hIUVVGSExGTkJRVWdzUTBGQllTeGhRVUZpTEVOQlFUWkNMRlZCUVZjc1EwRkRkRU1zUjBGQlNTeExRVUZMTEZWQlFVd3NTMEZCYzBJc1RVRkJUU3hOUVVGb1F5eERRVU5GTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1IwRkVSaXhKUVVkRkxFMUJRVXNzVDBGQlRDeERRVUZoTEVsQlFXSXNRMEZCYTBJc1RVRkJUU3hOUVVGNFFpeEZRVU5HTEV0QlFVc3NWMEZCVEN4RFFVRnRRaXhMUVVGdVFpeERRVU5FTEVOQlRrUXNRMEZSUVR0QlFVTkJPMEZCUTBFN1FVRkZRU3hKUVVGSkxFOUJRVkVzVVVGQlV5eE5RVUZVTEVOQlFXVXNRMEZCWml4RFFVRnJRaXhEUVVNMVFpeExRVUZMTEVsQlFVd3NRMEZCV1N4RlFVRkZMRWxCUVdRc1EwRkRRU3hMUVVGTExFdEJRVXdzUTBGQllTeEZRVUZGTEV0QlFXWXNRMEZEUVN4TFFVRkxMRXRCUVV3c1EwRkJZU3hGUVVGRkxFdEJRV1lzUTBGRFFTeExRVUZMTEVkQlFVd3NRMEZCVnl4RlFVRkZMRWRCUVdJc1EwRkRRU3hIUVVGSkxFVkJRVVVzVDBGQlJpeERRVUZWTEZOQlFXUXNRMEZEUlN4TFFVRkxMRWRCUVV3c1EwRkJWeXhIUVVGSkxHVkJRVW9zUTBGQmJVSXNRMEZCYmtJc1EwRkJjMElzUlVGQlJTeFJRVUY0UWl4RFFVRnJReXhGUVVGRkxFMUJRWEJETEVOQlFWZ3NRMEZEUml4SFFVRkpMRVZCUVVVc1QwRkJSaXhEUVVGVkxFMUJRV1FzUTBGRFJTeExRVUZMTEV0QlFVd3NRMEZCWVN4RFFVRkRMRVZCUVVVc1MwRkJTQ3hEUVVGVkxFVkJRVVVzUjBGQldpeERRVUZpTEVOQlEwZ3NRMEZVUkN4RFFWZEJPMEZCUlVFc1NVRkJTU3hOUVVGUExFOUJRVThzVTBGQmJFSXNRMEZGUVR0QlFVTkJMRWxCUVVrc1UwRkJWU3dyUWtGQlR5eFRRVUZRTEdkRVFVRlBMRkZCUVZBc1NVRkJiVUlzVVVGQmJrSXNSVUZCSzBJc1QwRkJUeXhUUVVGUUxFTkJRV2xDTEZGQlFXcENMRU5CUVRCQ0xFbEJRVEZDTEVOQlFTdENMRkZCUVM5Q0xFZEJRVFJETEhOQ1FVRjZSaXhEUVVWQk8wRkJSVUVzVFVGQlN5eEpRVUZNTEVOQlFWa3NWVUZCVnl4RFFVTnlRaXhIUVVGSkxFdEJRVXNzVDBGQlRDeERRVUZoTEU5QlFXcENMRU5CUTBVc1MwRkJTeXhQUVVGTUxFTkJRV0VzVDBGQllpeERRVUZ4UWl4SFFVRkpMRTFCUVVvc1EwRkJWU3hKUVVGV0xFTkJRWEpDTEVWQlJVWXNTMEZCU3l4VlFVRk1MRU5CUVd0Q0xFdEJRVXNzUjBGQmRrSXNRMEZEUVN4TFFVRkxMRmxCUVV3c1EwRkJiMElzUzBGQlN5eExRVUY2UWl4RFFVTkJMRXRCUVVzc1lVRkJUQ3hEUVVGeFFpeExRVUZMTEUxQlFURkNMRU5CUTBFc1MwRkJTeXhsUVVGTUxFTkJRWFZDTEV0QlFVc3NVVUZCTlVJc1EwRkRRU3hMUVVGTExGTkJRVXdzUjBGRFJDeERRVlJFTEVOQlYwRXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xGVkJRVmNzUTBGRGVrSXNTMEZCU3l4SlFVRk1MRWRCUTBFc1RVRkJUeXhKUVVGSkxFMUJRVW9zUTBGQlZTeEpRVUZXTEVOQlFWQXNRMEZEUkN4RFFVaEVMRU5CUzBFN1FVRkRRU3hKUVVGSkxHbEVRVUZyUWl4WFFVRjBRaXhEUVVORkxHbEVRVUYzUWl4VlFVRlpMRU5CUTJ4RExFZEJRVWtzVFVGQlR5eEpRVUZZTEVOQlEwRXNUVUZCVHl4RFFVRkRMRXRCUVUwc2MwTkJRVmtzUTBGRGVFSXNSMEZCU1N4UFFVRlJMRXRCUVVzc1VVRkJUQ3hGUVVGYUxFTkJRMEVzVFVGQlR5eERRVU5NTEV0QlFVMHNUVUZCVFN4SlFVRk9MRWRCUVdVc1IwRkJSeXhIUVVSdVFpeERRVVZNTEUxQlFVOHNTMEZHUml4RFFVRlFMRU5CU1VRc1EwRk9UU3hEUVVGUUxFTkJUMFFzUTBGVVJDeERRVmRHTzBGQlEwRTdRVUZGUVN4TlFVRkxMRk5CUVV3c1EwRkJhVUlzVTBGQlV5eE5RVUZVTEVOQlFXbENMRU5CUTJoRExFZEJRVWtzVVVGQlV5eEpRVUZpTEVOQlJVRXNTMEZCU3l4TlFVRk1MRU5CUVdNc1RVRkJaQ3hEUVVOQkxFZEJRVWtzUzBGQlN5eEpRVUZNTEVkQlFXTXNSMEZCUnl4SFFVRnFRaXhGUVVGM1FpeExRVUZMTEVsQlFVd3NSMEZCWXl4SFFVRkhMRTFCUVRkRExFTkJRWEZFTEU5QlEzSkVMRXRCUVVzc1IwRkJUQ3hEUVVGWExFdEJRVXNzUzBGQmFFSXNRMEZEUVN4SFFVRkpMRXRCUVVzc1QwRkJUQ3hEUVVGaExGTkJRV3BDTEVOQlFUUkNMRU5CUXpGQ0xFMUJRVThzUzBGQlN5eEhRVUZNTEVOQlFWY3NTMEZCU3l4VFFVRjJRaXhEUVVGclF5eERRVU5vUXl4UFFVRlBMRk5CUVZBc1EwRkJiVUlzVDBGQlR5eExRVUZRTEVOQlFXRXNWMEZCWWl4RFFVRjVRaXhKUVVGNlFpeERRVUVyUWl4UFFVRlBMRk5CUVZBc1EwRkJiVUlzUTBGQmJFUXNSVUZCZFVRc1EwRkJNVVVzUTBGRFFTeEZRVUZGTEU5QlFVOHNUMEZCVkN4RFFVTkVMRU5CUTBZc1EwRkRSQ3hMUVVGTExGTkJRVXdzUjBGRFJDeERRV0pFTEVOQlpVRXNTMEZCU3l4VlFVRk1MRU5CUVd0Q0xGVkJRVmNzUTBGRE0wSXNUVUZCVHl4TlFVRkxMRTlCUVV3c1EwRkJZU3hMUVVGTExFOUJRVXdzUTBGQllTeE5RVUZpTEVOQlFYTkNMRU5CUVc1RExFTkJRVkFzUTBGRFJDeERRVVpFTEVOQlNVRTdRVUZEUVR0QlFVVkJMRTFCUVVzc1UwRkJUQ3hEUVVGcFFpeFZRVUZYTEVOQlF6RkNMRWRCUVVrc1dVRkJZU3hMUVVGTExGVkJRVXdzUlVGQmFrSXNRMEZEUVN4SFFVRkpMRU5CUVVNc1ZVRkJSQ3hGUVVGbExFTkJRVU1zVjBGQlZ5eGhRVUV2UWl4RFFVRTRReXhMUVVGTExGTkJRVXdzUjBGRk9VTXNTMEZCU3l4TFFVRk1MRU5CUVdFc1MwRkJTeXhIUVVGc1FpeERRVU5CTEVkQlFVa3NTMEZCU3l4UFFVRk1MRU5CUVdFc1UwRkJha0lzUTBGQk5FSXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xFdEJRVXNzVjBGQlRDeEZRVUZvUWl4RFFVTTFRaXhIUVVGSkxFdEJRVXNzUjBGQlRDeEZRVUZaTEV0QlFVc3NTMEZCVEN4RFFVRlhMRTFCUVROQ0xFTkJRVzFETEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRVWNzUjBGQmNFSXNRMEZCVUN4RFFVVnVReXhIUVVGSkxGZEJRVmNzVVVGQlppeERRVUY1UWl4TlFVRlBMRmxCUVZjc1VVRkJXQ3hEUVVGdlFpeEpRVUZ3UWl4RFFVRlFMRU5CUVhwQ0xFbEJRMHNzVFVGQlN5eFRRVUZNTEVOQlFXVXNTMEZCU3l4cFFrRkJUQ3hGUVVGbUxFVkJRMDRzUTBGV1JDeERRVmxCTEV0QlFVc3NVMEZCVEN4RFFVRnBRaXhUUVVGVExFbEJRVlFzUTBGQlpTeERRVU01UWp0QlFVTkJPMEZCUTBFc1NVRkJTU3hyUWtGQmEwSXNTVUZCYkVJc1EwRkJkMElzUzBGQlN5eFBRVUZNTEVOQlFXRXNWMEZCWWl4RlFVRTBRaXhEUVVGd1JDeEhRVUV3UkN4UFFVRlRMRVZCUVVjc1UwRkJNVVVzUTBGRFJTeE5RVUZQTEUxQlFVc3NVVUZCVEN4RlFVRlFMRU5CUlVZc1RVRkJUeXhOUVVGTExHZENRVUZNTEVOQlFYTkNMRWxCUVhSQ0xFTkJRVkFzUTBGRFJDeERRVkJFTEVOQlUwRXNTMEZCU3l4cFFrRkJUQ3hEUVVGNVFpeFZRVUZYTEVOQlEyeERMRWRCUVVrc1RVRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eFZRVUZZTEVOQlFYTkNMRXRCUVVzc1IwRkJNMElzUTBGQldDeERRVU5CTEVkQlFVa3NUVUZCVVN4TlFVRlNMRVZCUVd0Q0xFMUJRVkVzVFVGQk9VSXNRMEZCYzBNc1RVRkJUeXhMUVVGUUxFTkJRM1JETEVkQlFVa3NUVUZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXhWUVVGWUxFTkJRWE5DTEV0QlFVc3NSMEZCVEN4RFFVRlhMRU5CUVdwRExFTkJRVmdzUTBGRFFTeE5RVUZQTEVOQlFVTXNUVUZCVVN4RlFVRlVMRVZCUVdVc1NVRkJaaXhEUVVGelFpeFRRVUUzUWl4RFFVTkVMRU5CVEVRc1EwRlBRU3hMUVVGTExHZENRVUZNTEVOQlFYZENMRlZCUVZjc1EwRkRha01zUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4SFFVRkpMRlZCUVZjc1MwRkJTeXhQUVVGTUxFTkJRV0VzVTBGQllpeEZRVUV3UWl4TFFVRkxMRmRCUVV3c1JVRkJla01zUTBGRFFTeEhRVUZKTEU5QlFWRXNTMEZCU3l4SFFVRnFRaXhEUVVGelFpeEpRVUZOTEV0QlFVc3NTMEZCVEN4RFFVRlhMRTlCUVZnc1EwRkJiVUlzU1VGQmJrSXNRMEZCZVVJc1MwRkJTeXhIUVVGTUxFVkJRVmtzUTBGQmNrTXNRMEZCTlVJc1EwRkRRU3hIUVVGSkxFMUJRVkVzUTBGQlF5eERRVUZpTEVOQlFXZENMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVXNzUjBGQlRDeERRVUZYTEVOQlFYUkNMRU5CUVhsQ0xITkNRVUY2UWl4RlFVTm9RaXhMUVVGTExFZEJRVXdzUTBGQlZ5eEpRVUZOTEVOQlFXcENMRU5CUTBFc1IwRkJTU3hMUVVGTExFOUJRVXdzUTBGQllTeFRRVUZxUWl4RFFVRTBRaXhEUVVNeFFpeFhRVUZYTEZOQlFWZ3NRMEZCZFVJc1MwRkJka0lzUTBGRFFTeEhRVUZKTEUxQlFVb3NRMEZEUVN4TlFVRlBMRU5CUVVNc1RVRkJVU3hYUVVGWExFbEJRVmdzUTBGQlowSXNTMEZCU3l4TFFVRnlRaXhEUVVGVUxFZEJRWGxETEUxQlFVMHNTMEZCVGl4RFFVRmpMRXRCUVVzc1IwRkJia1VzUTBGQmQwVXNRMEZEZEVVc1JVRkJSU3hQUVVGUExFOUJRVlFzUTBGRFFTeFBRVUZQTEZOQlFWQXNRMEZCYlVJc1RVRkJUU3hMUVVGT0xFTkJRV01zVFVGQlRTeERRVUZPTEVWQlFWTXNUVUZCTVVNc1EwRkRSQ3hEUVVOR0xFTkJRMFFzUjBGQlNTeExRVUZMTEU5QlFVd3NRMEZCWVN4VFFVRnFRaXhEUVVORkxFdEJRVXNzVDBGQlRDeERRVUZoTEZOQlFXSXNRMEZCZFVJc1NVRkJka0lzUTBGQk5rSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJXQ3hEUVVGcFFpeE5RVUZSTEVOQlFYcENMRU5CUVRSQ0xFZEJRVFZDTEVOQlFUZENMRU5CUVN0RUxFdEJRUzlFTEVOQlFYTkZMRXRCUVVzc1IwRkJNMFVzUTBGRGRVSXNVVUZFZGtJc1EwRkRhVU1zUzBGQlN5eFhRVUZNTEVWQlJHcERMRVZCUlVnc1EwRnNRa1FzUTBGdlFrRXNTMEZCU3l4bFFVRk1MRU5CUVhWQ0xGTkJRVk1zVTBGQlZDeERRVUZ2UWl4RFFVTjZReXhIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZCTEVkQlFVa3NUMEZCVVN4TFFVRkxMRWRCUVdwQ0xFTkJRMEVzUjBGQlNTeFZRVUZYTEV0QlFVc3NUMEZCVEN4RFFVRmhMRk5CUVdJc1JVRkJNRUlzUzBGQlN5eFhRVUZNTEVWQlFYcERMRU5CUTBFc1IwRkJTU3hKUVVGTExFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1MwRkJTeXhIUVVGTUxFVkJRVlVzVTBGQmFFTXNRMEZCVkN4RFFVTkJMRTFCUVU4c1MwRkJTeXhIUVVGTUxFTkJRVmNzUzBGQlN5eExRVUZNTEVOQlFWY3NUVUZCZEVJc1JVRkJaME1zUzBGQlR5eEZRVUYyUXl4RlFVRTJReXhMUVVGUExFVkJRWEJFTEVWQlFUQkVMRXRCUVU4c1NVRkJha1VzUlVGQmVVVXNTMEZCVHl4SlFVRjJSaXhEUVVFMlJpeERRVU16Uml4RlFVRkZMRTlCUVU4c1IwRkJWQ3hEUVVOQkxFZEJRVXNzVDBGQlR5eExRVUZRTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhQUVVGUExFZEJRUzlDTEVOQlFVd3NRMEZEUkN4RFFVTkVMRWRCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVTBGQmFrSXNRMEZEUlN4TFFVRkxMRTlCUVV3c1EwRkJZU3hUUVVGaUxFTkJRWFZDTEV0QlFYWkNMRU5CUVRoQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFWZ3NRMEZCYVVJc1RVRkJVU3hUUVVGNlFpeERRVUZ2UXl4TFFVRkxMRWRCUVhwRExFTkJRVGxDTEVOQlFUWkZMRXRCUVRkRkxFTkJRVzlHTEV0QlFVc3NSMEZCZWtZc1EwRkRkVUlzVVVGRWRrSXNRMEZEYVVNc1MwRkJTeXhYUVVGTUxFVkJSR3BETEVWQlJVZ3NRMEZpUkN4RFFXVkJPMEZCUTBFN1FVRkZRU3hOUVVGTExGTkJRVXdzUTBGQmFVSXNWVUZCVnl4RFFVTXhRaXhIUVVGSkxGRkJRVk1zU1VGQllpeERRVVZCTEV0QlFVMHNUVUZCVHl4TFFVRkxMRWRCUVV3c1EwRkJWeXhMUVVGTExFdEJRVXdzUTBGQlZ5eE5RVUUzUWl4RFFVRnhReXhEUVVONlF5eEhRVUZKTEVsQlFVc3NUMEZCVHl4TFFVRlFMRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeFBRVUZQTEVkQlFTOUNMRU5CUVZRc1EwRkRRU3hQUVVGUkxFVkJRVklzUlVGRFJTeEpRVUZMTEVkQlFVd3NRMEZCVXl4SlFVRkxMRWxCUVV3c1EwRkJWVHRCUVVOcVFpeEhRVUZGTEU5QlFVOHNSMEZCVkN4RFFVTkJMRTFCUTBZc1NVRkJTeXhIUVVGTUxFTkJRMFVzUjBGQlNTeFBRVUZQTEV0QlFWQXNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xFOUJRVThzUjBGQlVDeERRVUZoTEVOQlFYSkRMRWxCUVRSRExFVkJRV2hFTEVOQlFXOUVMRU5CUTJ4RUxFVkJRVVVzVDBGQlR5eEhRVUZVTEVOQlEwUXNRMEZEU0N4SlFVRkxMRWRCUVV3c1EwRkJVeXhKUVVGTExFdEJRVXdzUTBGQlZ5eEpRVUZMTEV0QlFVd3NRMEZEYkVJc1JVRkJSU3hQUVVGUExFZEJRVlFzUTBGRFFTeEhRVUZKTEU5QlFVOHNUMEZCVUN4RFFVRmxMRk5CUVc1Q0xFTkJRVGhDTEVOQlF6VkNMRVZCUVVVc1QwRkJUeXhQUVVGVUxFTkJRMEVzVDBGQlR5eFRRVUZRTEVOQlFXMUNMRTlCUVU4c1IwRkJNVUlzUTBGRFJDeERRVU5FTEUxQlEwWXNTVUZCU3l4SFFVRk1MRU5CUVZNN1FVRkRVQ3hSUVVGUkxFOUJRVThzUzBGQlVDeERRVUZoTEZWQlFXSXNRMEZCZDBJc1QwRkJUeXhIUVVGUUxFTkJRV0VzUTBGQmNrTXNRMEZCVWl4RlFVTkZMRWxCUVVzc1IwRkJUQ3hEUVVGVE8wRkJRMUFzVVVGQlR5eG5Ra0ZCVUN4SFFVTkJMRTFCUTBZc1NVRkJTeXhIUVVGTUxFTkJRMFVzVDBGQlR5eGxRVUZRTEVOQlFYVkNMRU5CUVhaQ0xFVkJRMEVzVFVGRFJpeFJRVU5GTEV0QlFVMHNTMEZCVGl4RFFWSktMRU5CVlVFc1RVRkRSaXhSUVVORkxFZEJRVWtzUjBGQlN5eERRVUZNTEVWQlFWVXNSMEZCU3l4RlFVRm1MRVZCUVhGQ0xFbEJRVTBzU1VGQlRpeEZRVUZqTEcxQ1FVRnRRaXhKUVVGdVFpeERRVUYzUWl4UFFVRlBMRmxCUVZBc1EwRkJiMElzUlVGQmNFSXNRMEZCZUVJc1EwRkJka01zUTBGQmVVWXNRMEZEZGtZc1JVRkJSU3hQUVVGUExFZEJRVlFzUTBGRFJDeERRVVpFTEVsQlJVOHNRMEZEVEN4TFFVRk5MRXRCUVU0c1EwRkRSQ3hEUVdoRFRDeERRV3REUkN4RFFVTkdMRU5CZUVORUxFTkJNRU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhYUVVGTUxFTkJRVzFDTEZOQlFWTXNTVUZCVkN4RFFVRmxMRWRCUVdZc1EwRkJiMElzUTBGRGNrTXNTMEZCU3l4SFFVRk1MRU5CUVZjc1MwRkJTeXhIUVVGb1FpeERRVU5CTEVkQlFVa3NTMEZCU3l4UFFVRk1MRU5CUVdFc1UwRkJha0lzUTBGQk5FSXNTMEZCU3l4TlFVRk1MRU5CUVdNc1MwRkJTeXhYUVVGTUxFVkJRV1FzUTBGRE5VSXNSMEZCU1N4VlFVRlhMRXRCUVVzc1NVRkJjRUlzUTBGRFFTeExRVUZMTEVsQlFVd3NRMEZCV1N4SlFVRmFMRU5CUTBFc1MwRkJTeXhMUVVGTUxFTkJRV0VzUjBGQllpeERRVVZCTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhSUVVGdVFpeEZRVU5FTEVOQlVrUXNRMEZWUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUVUZCU3l4aFFVRk1MRU5CUVhGQ0xGVkJRVmNzUTBGRE9VSXNSMEZCU1N4TlFVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExGVkJRVmdzUTBGQmMwSXNTMEZCU3l4SFFVRk1MRU5CUVZjc1EwRkJha01zUTBGQldDeERRVU5CTEVkQlFVa3NUVUZCVVN4RlFVRlNMRVZCUVdNc1RVRkJVU3hGUVVFeFFpeERRVUU0UWl4TlFVRlBMRTFCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRlFMRU5CUXpsQ0xFZEJRVWtzVDBGQlVTeExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQlRDeERRVUZYTEVOQlFXcERMRU5CUVZvc1EwRkRRU3hIUVVGSkxFdEJRVXNzVDBGQlRDeERRVUZoTEZkQlFXSXNSVUZCTkVJc1EwRkJOVUlzUlVGQmFVTXNUMEZCVXl4RlFVRXhReXhGUVVGblJDeFJRVUZWTEVWQlFUbEVMRU5CUVd0RkxFTkJRVVU3UVVGRGJFVXNUVUZCU3l4SFFVRk1MRVZCUVZrc1EwRkJXaXhEUVVOQkxFMUJRVThzVFVGQlN5eFhRVUZNTEVOQlFXbENMRWRCUVVjc1VVRkJjRUlzUTBGQlVDeERRVU5FTEVOQlNFUXNTVUZIVHl4RFFVTk1MRVZCUVVVc1MwRkJTeXhIUVVGUUxFTkJRMEVzVFVGQlR5eE5RVUZMTEZkQlFVd3NRMEZCYVVJc1IwRkJSeXhIUVVGd1FpeERRVUZRTEVOQlEwUXNRMEZEUml4RFFWaEVMRU5CWVVFc1MwRkJTeXhsUVVGTUxFTkJRWFZDTEZWQlFWY3NRMEZCUlR0QlFVTnNReXhKUVVGSkxFMUJRVThzUzBGQlN5eExRVUZNTEVOQlFWY3NWVUZCV0N4RFFVRnpRaXhMUVVGTExFZEJRVXdzUTBGQlZ5eERRVUZxUXl4RFFVRllMRU5CUTBFc1IwRkJTU3hMUVVGTExGZEJRVlFzUTBGQmMwSXNRMEZCUXl4RlFVRkZMRXRCUVVzc1IwRkJVQ3hEUVVGWkxFMUJRVThzVFVGQlN5eFZRVUZNTEVWQlFWQXNRMEZCZVVJc1EwRkROVVFzUjBGQlNTeFBRVUZUTEVWQlFXSXNRMEZCYVVJc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eEhRVUZITEUxQlFXcENMRU5CUVhsQ0xFTkJRWHBDTEVOQlFWQXNRMEZEYWtJc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eEhRVUZITEV0QlFXcENMRU5CUVhkQ0xFTkJRWGhDTEVOQlFWQXNRMEZEUkN4RFFVeEVMRU5CVDBFc1MwRkJTeXg1UWtGQlRDeERRVUZwUXl4VFFVRlRMRWxCUVZRc1EwRkJaU3hEUVVGRk8wRkJRMmhFTEVsQlFVa3NUVUZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXhWUVVGWUxFTkJRWE5DTEV0QlFVc3NSMEZCVEN4RFFVRlhMRU5CUVdwRExFTkJRVmdzUTBGRFFTeEhRVUZKTEUxQlFVOHNRMEZCV0N4RFFVTkJMRWRCUVVrc1YwRkJXU3hQUVVGVExFVkJRVlFzUTBGQll5eEhRVUZITEVsQlFXcENMRU5CUVhkQ0xFZEJRVWNzVFVGQk0wTXNRMEZGUVR0QlFVTkJMRWxCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVjBGQllpeEZRVUUwUWl4RFFVRTFRaXhGUVVGcFF5eFBRVUZUTEVWQlFUbERMRU5CUVd0RUxFTkJRMmhFTEVWQlFVVXNTVUZCUml4RFFVTkJMRlZCUVZrc1IwRkJSeXhSUVVGbUxFTkJRMEVzUzBGQlR5eExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQlRDeERRVUZYTEVOQlFXcERMRU5CUVZBc1EwRkRSQ3hEUVVWRUxFZEJRVWtzVDBGQlV5eEZRVUZpTEVOQlFXbENMRTFCUVU4c1RVRkJTeXhSUVVGTUxFTkJRV01zUjBGQlJ5eE5RVUZxUWl4RFFVRjVRaXhMUVVGUExFTkJRV2hETEVOQlFWQXNRMEZEYWtJc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eFRRVUZrTEVOQlFYbENMRWxCUVhwQ0xFTkJRVkFzUTBGRFJDeERRV1JFTEVOQlowSkJMRXRCUVVzc2EwSkJRVXdzUTBGQk1FSXNVMEZCVXl4SlFVRlVMRU5CUVdVc1EwRkJSVHRCUVVONlF5eEpRVUZKTEUxQlFVOHNTMEZCU3l4TFFVRk1MRU5CUVZjc1ZVRkJXQ3hEUVVGelFpeExRVUZMTEVkQlFVd3NRMEZCVnl4RFFVRnFReXhEUVVGWUxFTkJRMEVzUjBGQlNTeFBRVUZUTEVsQlFXSXNRMEZCYlVJc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eFBRVUZUTEVkQlFWUXNRMEZCWlN4SFFVRkhMRk5CUVd4Q0xFTkJRVGhDTEVkQlFVY3NWVUZCTDBNc1EwRkJNa1FzUTBGQk0wUXNRMEZCVUN4RFFVTnVRaXhIUVVGSkxFOUJRVk1zUlVGQllpeERRVUZwUWl4TlFVRlBMRTFCUVVzc1VVRkJUQ3hEUVVGakxFZEJRVWNzVFVGQmFrSXNRMEZCZVVJc1EwRkJla0lzUTBGQlVDeERRVU5xUWl4TlFVRlBMRTFCUVVzc1VVRkJUQ3hEUVVGakxFOUJRVk1zUjBGQlZDeERRVUZsTEVkQlFVY3NVMEZCYkVJc1EwRkJPRUlzUjBGQlJ5eFZRVUV2UXl4RFFVRXlSQ3hEUVVFelJDeERRVUZRTEVOQlEwUXNRMEZNUkN4RFFVOUJMRXRCUVVzc1pVRkJUQ3hEUVVGMVFpeFZRVUZYTEVOQlFVVTdRVUZEYkVNc1NVRkJTU3hOUVVGUExFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1MwRkJTeXhIUVVGTUxFTkJRVmNzUTBGQmFrTXNRMEZCV0N4RFFVTkJMRWRCUVVrc1QwRkJVeXhGUVVGaUxFTkJRV2xDTEUxQlFVOHNUVUZCU3l4UlFVRk1MRU5CUVdNc1IwRkJSeXhOUVVGcVFpeERRVUY1UWl4RFFVRjZRaXhEUVVGUUxFTkJRMnBDTEUxQlFVOHNUVUZCU3l4UlFVRk1MRU5CUVdNc1IwRkJSeXhWUVVGcVFpeERRVUUyUWl4RFFVRTNRaXhEUVVGUUxFTkJRMFFzUTBGS1JDeERRVTFCTEV0QlFVc3NhMEpCUVV3c1EwRkJNRUlzVTBGQlV5eEpRVUZVTEVOQlFXVXNRMEZCUlR0QlFVTjZReXhKUVVGSkxFMUJRVThzUzBGQlN5eExRVUZNTEVOQlFWY3NWVUZCV0N4RFFVRnpRaXhMUVVGTExFZEJRVXdzUTBGQlZ5eERRVUZxUXl4RFFVRllMRU5CUTBFc1IwRkJTU3hQUVVGVExFbEJRV0lzUTBGQmJVSXNRMEZEYWtJc1IwRkJTU3hOUVVGUkxFVkJRVklzUlVGQll5eExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQlRDeERRVUZYTEVOQlFXcERMRWRCUVhWRExFVkJRWEpFTEVWQlEwRXNWVUZCVlN4SlFVRldMRU5CUVdVc1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQldDeERRVUZwUWl4TFFVRkxMRlZCUVhSQ0xFTkJRV3RETEV0QlFVc3NSMEZCZGtNc1EwRkJaaXhEUVVSS0xFTkJRMmxGTEVOQlF5OUVPMEZCUTBFc1RVRkJTeXhsUVVGTUxFTkJRWEZDTEVOQlFYSkNMRVZCUTBFc1MwRkJTeXhUUVVGTUxFZEJRMEVzVFVGQlR5eE5RVUZMTEZOQlFVd3NSVUZCVUN4RFFVTkVMRU5CUTBRc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eEhRVUZITEUxQlFXcENMRU5CUVhsQ0xFTkJRWHBDTEVOQlFWQXNRMEZEUkN4RFFVTkVMRWRCUVVrc1QwRkJVeXhGUVVGaUxFTkJRV2xDTEUxQlFVOHNUVUZCU3l4UlFVRk1MRU5CUVdNc1IwRkJSeXhOUVVGcVFpeERRVUY1UWl4RFFVRjZRaXhEUVVGUUxFTkJRMnBDTEUxQlFVOHNUVUZCU3l4UlFVRk1MRU5CUVdNc1IwRkJSeXhQUVVGcVFpeERRVUV3UWl4RFFVRXhRaXhEUVVGUUxFTkJRMFFzUTBGa1JDeERRV2RDUVN4TFFVRkxMR1ZCUVV3c1EwRkJkVUlzVTBGQlV5eEpRVUZVTEVOQlFXVXNRMEZCUlR0QlFVTjBReXhKUVVGSkxFMUJRVThzUzBGQlN5eExRVUZNTEVOQlFWY3NWVUZCV0N4RFFVRnpRaXhMUVVGTExFZEJRVXdzUTBGQlZ5eERRVUZxUXl4RFFVRllMRU5CUTBFc1IwRkJTU3hOUVVGUExFTkJRVmdzUTBGRFFTeEhRVUZKTEU5QlFWTXNTVUZCWWl4RFFVRnRRaXhEUVVOcVFpeExRVUZQTEU5QlFWTXNSVUZCVkN4RlFVRmxMRXRCUVVzc1MwRkJUQ3hEUVVGWExGVkJRVmdzUTBGQmMwSXNTMEZCU3l4SFFVRk1MRU5CUVZjc1EwRkJha01zU1VGQmQwTXNSVUZCZGtRc1EwRkJORVFzUTBGQk5VUXNRMEZCWjBVc1EwRkJka1VzUTBGRFFTeEhRVUZKTEV0QlFVc3NTMEZCVEN4RFFVRlhMRlZCUVZnc1EwRkJjMElzUzBGQlN5eEhRVUZNTEVOQlFWY3NTVUZCYWtNc1NVRkJNa01zUlVGQkwwTXNRMEZCYlVRc1RVRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eEhRVUZITEUxQlFXcENMRU5CUVhsQ0xFdEJRVThzUTBGQmFFTXNRMEZCVUN4RFFVTnVSQ3hOUVVGUExFMUJRVXNzVVVGQlRDeERRVUZqTEVkQlFVY3NVVUZCYWtJc1EwRkJNa0lzU1VGQk0wSXNRMEZCVUN4RFFVTkVMRU5CUTBRc1IwRkJTU3hOUVVGUkxFVkJRVklzUlVGQll5eE5RVUZSTEVWQlFYUkNMRVZCUVRSQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1MwRkJTeXhIUVVGTUxFTkJRVmNzUTBGQmFrTXNSMEZCZFVNc1JVRkJia1VzUlVGRFFTeExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQlRDeERRVUZYTEVOQlFXcERMRWRCUVhWRExFVkJSRE5ETEVOQlF5dERMRU5CUXpkRExFZEJRVWtzUzBGQlN5eFJRVUZVTEVOQlFXMUNMRXRCUVVzc1ZVRkJUQ3hIUVVOdVFqdEJRVU5CTEUxQlFVc3NaVUZCVEN4RFFVRnhRaXhEUVVGeVFpeEZRVU5CTEV0QlFVc3NVMEZCVEN4SFFVTkJMRTFCUVU4c1RVRkJTeXhUUVVGTUxFVkJRVkFzUTBGRFJDeERRVU5FTEVkQlFVa3NUMEZCVXl4RlFVRmlMRU5CUVdsQ0xFdEJRVThzUTBGQlVDeERRVU5xUWl4TlFVRlBMRTFCUVVzc1VVRkJUQ3hEUVVGakxFZEJRVWNzVlVGQmFrSXNRMEZCTmtJc1NVRkJOMElzUTBGQlVDeERRVU5FTEVOQmJFSkVMRU5CYjBKQkxFdEJRVXNzYVVKQlFVd3NRMEZCZVVJc1UwRkJVeXhKUVVGVUxFTkJRV1VzUTBGQlJUdEJRVU40UXl4SlFVRkpMRTFCUVU4c1MwRkJTeXhMUVVGTUxFTkJRVmNzVlVGQldDeERRVUZ6UWl4TFFVRkxMRWRCUVV3c1EwRkJWeXhEUVVGcVF5eERRVUZZTEVOQlEwRXNSMEZCU1N4UFFVRlRMRVZCUVdJc1EwRkJhVUlzVFVGQlR5eE5RVUZMTEZGQlFVd3NRMEZCWXl4SFFVRkhMRkZCUVdwQ0xFTkJRVEpDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRlZCUVZnc1EwRkJjMElzUzBGQlN5eEhRVUZNTEVOQlFWY3NRMEZCYWtNc1NVRkJkME1zUlVGQmVFTXNRMEZCTmtNc1EwRkJOME1zUTBGQmFVUXNRMEZCTlVVc1EwRkJVQ3hEUVVOcVFpeEhRVUZKTEU5QlFWTXNSVUZCVkN4RlFVRmxMRTlCUVZNc1JVRkJlRUlzUlVGQk9FSXNTMEZCU3l4UFFVRk1MRU5CUVdFc1YwRkJZaXhGUVVFMFFpeERRVUU1UkN4RFFVRnBSU3hEUVVGRk8wRkJRMnBGTEUxQlFVc3NSMEZCVEN4RlFVRlpMRU5CUVZvc1EwRkRRU3hOUVVGUExFMUJRVXNzVjBGQlRDeERRVUZwUWl4SFFVRkhMRXRCUVhCQ0xFTkJRVkFzUTBGRFJDeERRVU5FTEUxQlFVOHNUVUZCU3l4UlFVRk1MRU5CUVdNc1QwRkJVeXhGUVVGVUxFTkJRV01zUjBGQlJ5eEZRVUZxUWl4RFFVRnpRaXhIUVVGSExFMUJRWFpETEVOQlFTdERMRU5CUVM5RExFTkJRVkFzUTBGRFJDeERRVkpFTEVOQlZVRXNTMEZCU3l4blFrRkJUQ3hEUVVGM1FpeFRRVUZUTEVsQlFWUXNRMEZCWlN4RFFVTnlReXhQUVVGUkxFbEJRVklzUlVGRFJUdEJRVU5CTzBGQlEwWXNTMEZCU3l4SFFVRk1MRU5CUVZNN1FVRkRVQ3hQUVVGUExFMUJRVXNzWVVGQlRDeEZRVUZRTEVOQlJVRTdRVUZEUml4TFFVRkxMRWRCUVV3c1EwRkJVeXhGUVVGRkxFdEJRVXNzUjBGQlVDeERRVUZaTEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRVWNzVFVGQmNFSXNRMEZCVUN4RFFVTnlRaXhKUVVGTExFZEJRVXdzUTBGQlV5eEZRVUZGTEV0QlFVc3NSMEZCVUN4RFFVRlpMRTFCUVU4c1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFVY3NUVUZCY0VJc1EwRkJVQ3hEUVVOeVFpeEpRVUZMTEVkQlFVd3NRMEZCVXl4RlFVRkZMRXRCUVVzc1IwRkJVQ3hEUVVGWkxFMUJRVThzVFVGQlN5eFhRVUZNTEVOQlFXbENMRWRCUVVjc1NVRkJjRUlzUTBGQlVDeERRVU55UWl4SlFVRkxMRWRCUVV3c1EwRkJVeXhGUVVGRkxFdEJRVXNzUjBGQlVDeERRVUZaTEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRVWNzUzBGQmNFSXNRMEZCVUN4RFFVTnlRaXhKUVVGTExFZEJRVXdzUTBGQlV5eEZRVUZGTEV0QlFVc3NSMEZCVUN4RFFVRlpMRTFCUVU4c1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFVY3NVVUZCY0VJc1EwRkJVQ3hEUVVOeVFpeEpRVUZMTEVkQlFVd3NRMEZCVXl4RlFVRkZMRXRCUVVzc1IwRkJVQ3hEUVVGWkxFMUJRVThzVFVGQlN5eFhRVUZNTEVOQlFXbENMRWRCUVVjc1VVRkJjRUlzUTBGQlVDeERRVU55UWl4SlFVRkxMRWxCUVV3c1EwRkJWU3hGUVVGRkxFdEJRVXNzUjBGQlVDeERRVUZaTEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRVWNzVFVGQmNFSXNRMEZCVUN4RFFVTjBRaXhKUVVGTExFbEJRVXdzUTBGQlZTeEZRVUZGTEV0QlFVc3NSMEZCVUN4RFFVRlpMRTFCUVU4c1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFVY3NUVUZCY0VJc1EwRkJVQ3hEUVVOMFFpeEpRVUZMTEVkQlFVd3NRMEZCVXl4RlFVRkZMRXRCUVVzc1IwRkJVQ3hEUVVGWkxFMUJRVThzVFVGQlN5eFhRVUZNTEVOQlFXbENMRWRCUVVjc1MwRkJjRUlzUTBGQlVDeERRVU55UWl4SlFVRkxMRWRCUVV3c1EwRkJVeXhGUVVGRkxFdEJRVXNzUjBGQlVDeERRVUZaTEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRVWNzVVVGQmNFSXNRMEZCVUN4RFFVVnlRaXhKUVVGTExFZEJRVXdzUTBGQlV6dEJRVU5RTEVsQlFVa3NTMEZCU3l4UFFVRk1MRU5CUVdFc1YwRkJZaXhEUVVFeVFpeERRVUV2UWl4RFFVRnJReXhOUVVOc1F5eEZRVUZGTEV0QlFVc3NSMEZCVUN4RFFVTkJMRTFCUVU4c1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFVY3NVMEZCY0VJc1EwRkJVQ3hEUVVWR0xFbEJRVXNzUjBGQlRDeERRVUZUTzBGQlExQXNTVUZCU1N4TlFVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExGVkJRVmdzUTBGQmMwSXNTMEZCU3l4SFFVRk1MRU5CUVZjc1EwRkJha01zUTBGQldDeERRVU5CTEVkQlFVa3NUMEZCVXl4SFFVRlVMRVZCUVdkQ0xFOUJRVk1zUlVGQk4wSXNRMEZCYVVNc1RVRkJUeXhOUVVGTExHVkJRVXdzUTBGQmNVSXNSVUZCY2tJc1EwRkJVQ3hEUVVGblF6dEJRVU5xUlN4SlFVRkpMRXRCUVVzc1QwRkJUQ3hEUVVGaExGZEJRV0lzUlVGQk5FSXNRMEZCYUVNc1EwRkJiVU1zUTBGRGFrTXNSMEZCU1N4UFFVRlRMRWRCUVZRc1JVRkJaMElzVDBGQlV5eEZRVUUzUWl4RFFVRnBReXhOUVVGUExFMUJRVXNzWlVGQlRDeERRVUZ4UWl4RFFVRnlRaXhEUVVGUUxFTkJRU3RDTzBGQlEyaEZMRWxCUVVrc1QwRkJVeXhGUVVGVUxFVkJRV1VzVDBGQlV5eEZRVUUxUWl4RFFVRm5ReXhOUVVGUExFMUJRVXNzWlVGQlRDeERRVUZ4UWl4RFFVRnlRaXhEUVVGUUxFTkJRU3RDTzBGQlEyaEZMRVZCUTBRN1FVRkRRVHRCUVVOR0xFdEJRVXNzUjBGQlRDeERRVUZUTEVsQlFVc3NSMEZCVEN4RFFVRlRMRWxCUVVzc1IwRkJUQ3hEUVVGVExFbEJRVXNzUjBGQlRDeERRVUZUTEVsQlFVc3NSMEZCVEN4RFFVRlRMRWxCUVVzc1IwRkJUQ3hEUVVGVExFbEJRVXNzUjBGQlRDeERRVUZUTEVsQlFVc3NSMEZCVEN4RFFVRlRMRWxCUVVzc1IwRkJUQ3hEUVVGVE8wRkJReTlGTEU5QlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTEVOQlFWQXNRMEZGUVR0QlFVTkdMRXRCUVVzc1IwRkJUQ3hEUVVGVExFbEJRVXNzUjBGQlRDeERRVUZUTzBGQlEyaENMRTlCUVU4c1RVRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVZBc1EwRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZHTEV0QlFVc3NSMEZCVEN4RFFVRlRPMEZCUTFBc1QwRkJUeXhOUVVGTExHVkJRVXdzUlVGQlVDeERRVVZHTEVsQlFVc3NSMEZCVEN4RFFVRlRMRWxCUVVzc1IwRkJUQ3hEUVVGVE8wRkJRMmhDTEU5QlFVOHNUVUZCU3l4NVFrRkJUQ3hEUVVFclFpeEpRVUV2UWl4RFFVRlFMRU5CUlVZc1NVRkJTeXhKUVVGTUxFTkJRVlVzU1VGQlN5eEhRVUZNTEVOQlFWTTdRVUZEYWtJc1QwRkJUeXhOUVVGTExHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFTkJRVkFzUTBGRlJpeEpRVUZMTEVkQlFVd3NRMEZCVXp0QlFVTlFMRTlCUVU4c1RVRkJTeXhsUVVGTUxFVkJRVkFzUTBGRlJpeEpRVUZMTEVkQlFVd3NRMEZCVXl4SlFVRkxMRWRCUVV3c1EwRkJVenRCUVVOb1FpeFBRVUZQTEUxQlFVc3NhMEpCUVV3c1EwRkJkMElzU1VGQmVFSXNRMEZCVUN4RFFVVkdMRWxCUVVzc1IwRkJUQ3hEUVVGVExFbEJRVXNzUjBGQlRDeERRVUZUTzBGQlEyaENMRTlCUVU4c1RVRkJTeXhsUVVGTUxFTkJRWEZDTEVsQlFYSkNMRU5CUVZBc1EwRkZSaXhKUVVGTExFZEJRVXdzUTBGQlV5eEpRVUZMTEVkQlFVd3NRMEZCVXp0QlFVTm9RaXhQUVVGUExFMUJRVXNzYVVKQlFVd3NRMEZCZFVJc1NVRkJka0lzUTBGQlVDeERRVVZHTEVsQlFVc3NTVUZCVEN4RFFVRlZPMEZCUTFJc1QwRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eEhRVUZITEUxQlFXcENMRU5CUVhsQ0xFTkJRWHBDTEVOQlFWQXNRMEZzUlVZc1EwRnhSVUVzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4SFFVRm9RaXhEUVVGeFFpeDVRa0ZCTWtJc2EwSkJRV3RDTEVsQlFXeENMRU5CUVROQ0xFTkJRWEZFTEVkQlFURkZMRVZCUTBRc1EwRjJSVVFzUTBGNVJVRXNTMEZCU3l4UlFVRk1MRU5CUVdkQ0xGTkJRVk1zU1VGQlZDeERRVUZsTEVsQlFXWXNRMEZCY1VJc1EwRkRia01zUjBGQlNTeExRVUZOTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUzBGQlN5eEhRVUYwUWl4RFFVRXlRaXhMUVVGTExFZEJRVXdzUTBGQlZ5eEpRVUYwUXl4RFFVRldMRU5CUTBFc1MwRkJTeXhIUVVGTUxFVkJRVmtzU1VGQldpeERRVU5CTEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVOQlFYVkNMRWRCUVhaQ0xFTkJRVkFzUTBGRFJDeERRVXBFTEVOQlRVRTdRVUZEUVR0QlFVVkJMRk5CUVZNc1owSkJRVlFzUTBGQmVVSXNSMEZCZWtJc1EwRkJPRUlzUzBGQk9VSXNRMEZCY1VNc1dVRkJja01zUTBGQmJVUXNUVUZCYmtRc1EwRkJNa1FzUTBGRGVrUXNSMEZCU1N4RFFVTkdMRTFCUVU4c1NVRkJTU3hQUVVGS0xFTkJRVmNzUjBGQldDeERRVUZuUWl4TFFVRm9RaXhEUVVGUUxFTkJRMFFzUTBGQlF5eE5RVUZQTEVOQlFWQXNRMEZCVlN4RFFVTldMRWRCUVVrc1pVRkJhVUlzVTBGQmNrSXNRMEZCWjBNc1EwRkRPVUlzUjBGQlNTeFpRVUZoTEZsQlFXcENMRU5CUVRoQ0xFOUJRVThzUzBGQlVDeERRVUZoTEZsQlFXSXNRMEZCTWtJc2NVTkJRWFZETEVWQlFVVXNUMEZCY0VVc1JVRkRPVUlzUzBGQlRTeEZRVUZPTEVOQlEwUXNRMEZEUml4RFFVTkdMRU5CUlVRc1IwRkJTU3h6UWtGQmRVSXNRMEZCUXl4RFFVRkRMR2RDUVVGblFpeEhRVUZvUWl4RFFVRXdRaXhIUVVFeFFpeERRVUUzUWl4RFFVVkJMRXRCUVVzc1ZVRkJUQ3hEUVVGclFpeFZRVUZYTEVOQlF6TkNMRWRCUVVrc1VVRkJVeXhKUVVGaUxFTkJSVUVzUjBGQlNTeFJRVUZLTEVOQlFXRXNUMEZCWWl4RFFVRnpRaXhOUVVGUkxFdEJRVXNzUjBGQmJrTXNRMEZEUVN4UFFVRlRMRU5CUTFBc1IwRkJTU3hQUVVGUExFZEJRVkFzUlVGQll5eFBRVUZQTEV0QlFWQXNRMEZCWVN4TlFVRXZRaXhEUVVGMVF5eFBRVUZQTEV0QlFWQXNRMEZCWVN4TFFVRmlMRU5CUVc5Q0xHbERRVUZ3UWl4RlFVTjJReXhIUVVGSkxFbEJRVXNzVDBGQlR5eExRVUZRTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhQUVVGUExFZEJRVE5DTEVOQlFWUXNRMEZEUVN4SFFVRkpMRlZCUVZVc1NVRkJWaXhEUVVGbExFVkJRV1lzUTBGQlNpeERRVUYzUWl4UFFVRlBMRXRCUVZBc1EwRkJZU3hMUVVGaUxFTkJRVzlDTEdsRFFVRndRaXhGUVVONFFpeEhRVUZKTEVOQlFVTXNUMEZCVEN4RFFVRmpMRU5CUTFvc1IwRkJTU3hMUVVGUExFZEJRVmdzUTBGQlowSXNVVUZCVlN4SlFVRldMRU5CUVdoQ0xFbEJRMHNzU1VGQlNTeExRVUZQTEVkQlFWQXNSVUZCWXl4UFFVRnNRaXhEUVVFeVFpeFJRVUZWTEV0QlFWWXNRMEZCTTBJc1NVRkRRU3hKUVVGSkxFdEJRVThzUjBGQlVDeEZRVUZqTEVOQlFVTXNUMEZCYmtJc1EwRkJORUlzVFVGRGFrTXNVVUZCVlN4TFFVRlBMRWxCUVdwQ0xFTkJRMFFzUTBGTVJDeEpRVXRQTEZOQlFWVXNTMEZCVml4RFFVTlFMRVZCUVVVc1QwRkJUeXhIUVVGVUxFTkJRMFFzUTBGRFJDeEhRVUZKTEZOQlFWVXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJXQ3hEUVVGcFFpeExRVUZxUWl4RFFVRjNRaXhMUVVGTExFZEJRVGRDTEVOQlFXUXNRMEZEUVN4RlFVRkZMRXRCUVVzc1IwRkJVQ3hEUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZKTEUxQlFVOHNTMEZCU3l4VFFVRk1MRVZCUVZnc1EwRkRRU3hIUVVGSkxFdEJRVTBzVDBGQlZpeERRVUZ0UWl4VFFVRlhMRVZCUVRsQ0xFTkJRMEVzUjBGQlNTeEpRVUZLTEVOQlFWVXNRMEZEVWl4SFFVRkpMRmxCUVdFc1ZVRkJha0lzUTBGRFFTeEhRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1JVRkJORUlzUTBGQmFFTXNRMEZCYlVNc1YwRkJZU3haUVVGaUxFTkJRMjVETEVkQlFVa3NRMEZCUXl4WFFVRlhMRWxCUVZnc1EwRkJaMElzU1VGQmFFSXNRMEZCVEN4RFFVRTBRaXhMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZZTEVOQlFXdENMR2xEUVVGc1FpeEZRVU0xUWl4SFFVRkpMRXRCUVVzc1QwRkJUQ3hEUVVGaExFZEJRV0lzUjBGQmNVSXNRMEZCZWtJc1EwRkJORUlzUTBGRE1VSXNSMEZCU1N4dlFrRkJTaXhEUVVFd1FpeERRVU40UWl4VFFVRlhMRWRCUVZnc1EwRkRSQ3hEUVVaRUxFbEJSVThzUTBGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlRTeEpRVUZKTEU5QlFVb3NRMEZCV1N4M1FrRkJXaXhEUVVGelF5eFRRVUZWTEUxQlFWWXNRMEZCYTBJc1NVRkJiRUlzUTBGQmQwSXNUVUZCZUVJc1EwRkJaME1zUTBGRE1VVXNTMEZCVHl4UFFVRlBMRXRCUVU4c1NVRkJaQ3hEUVVGUUxFTkJRMEVzUjBGQlNTeExRVUZQTEZGQlFWZ3NRMEZCY1VJc1QwRkJUeXhMUVVGUUxFTkJRV0VzVFVGQlVTeE5RVUZTTEVOQlFXbENMRU5CUVRsQ0xFTkJRV2xETERCQ1FVRnFReXhGUVVOeVFpeE5RVUZQTEVkQlFWQXNRMEZEUkN4RFFVcExMRU5CUVU0c1EwRkxRU3hKUVVGTkxFbEJRVWtzVDBGQlNpeERRVUZaTEhGRVFVRmFMRU5CUVcxRkxFZEJRVzVGTEVOQlFVNHNRMEZEUVN4VFFVRlhMRk5CUVZNc1QwRkJWQ3hEUVVGcFFpeEhRVUZxUWl4RFFVRnpRaXhGUVVGMFFpeERRVUZZTEVOQlEwUXNRMEZEUml4RFFVTkdMRU5CUTBRN1FVRkRRU3hKUVVGSkxFOUJRVkVzU1VGQldpeERRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkpMRU5CUVVNc1QwRkJUQ3hEUVVGakxFTkJRMW9zWjBKQlFXZENMRWRCUVdoQ0xFTkJRWEZDTEZGQlFYSkNMRU5CUVN0Q0xFdEJRUzlDTEVOQlFYTkRMRWxCUVhSRExFVkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFWRXNaMEpCUVdkQ0xFOUJRV2hDTEVOQlFYbENMRWxCUVhwQ0xFTkJRVklzUTBGRFJDeERRVU5FTEUxQlFVOHNUVUZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRVWNzVFVGQmNFSXNRMEZCTkVJc1EwRkJReXhSUVVGVExFOUJRVllzUTBGQmJVSXNUVUZCVHl4SlFVRXhRaXhEUVVGblF5eE5RVUZQTEV0QlFYWkRMRU5CUVRWQ0xFTkJRVkFzUTBGRFJDeERRVE5FUkN4RFFUWkVRVHRCUVVOQk8wRkJRMEU3UVVGRlFTeE5RVUZMTEU5QlFVd3NRMEZCWlN4VFFVRlRMRXRCUVZRc1EwRkJaMElzUjBGQmFFSXNRMEZCY1VJc1EwRkRiRU1zUjBGQlNTeFJRVUZUTEVsQlFXSXNRMEZGUVN4SFFVRkpMRTlCUVZFc1MwRkJTeXhIUVVGcVFpeERRVUZ6UWl4TlFVRlJMRU5CUVRsQ0xFTkJRMEVzU1VGQlN5eEhRVUZKTEVkQlFVa3NRMEZCVWl4RFFVRlhMRVZCUVVrc1MwRkJUeXhKUVVGUUxFTkJRV01zVVVGQlpDeERRVUY1UWl4SFFVRTNReXhEUVVGclJDeEZRVUZKTEVOQlFYUkVMRU5CUVhsRUxFVkJRVVVzUTBGQk0wUXNRMEZCT0VRc1EwRkROVVFzUjBGQlNTeE5RVUZQTEU5QlFVOHNTMEZCVUN4RFFVRmhMRlZCUVdJc1EwRkJkMElzVDBGQlR5eEhRVUV2UWl4RFFVRllMRU5CUVdkRUxFZEJRV2hFTEVOQlEwRXNSMEZCU1N4TlFVRlJMRVZCUVZvc1EwRkJaMElzU1VGQlRTeExRVUZQTEVWQlFWQXNRMEZCV1N4RlFVRnNRaXhEUVVGeFFqdEJRVUZ5UXl4TFFVTkxMRWxCUVVrc1RVRkJVU3hGUVVGYUxFTkJRV2RDTEVsQlFVMHNTMEZCVHl4RlFVRlFMRU5CUVZrc1JVRkJiRUlzUTBGQmNVSTdRVUZCY2tNc1MwRkRRU3hKUVVGSkxFMUJRVkVzUlVGQlVpeEZRVUZqTEUxQlFWRXNSVUZCTVVJc1EwRkJPRUlzU1VGQlRTeExRVUZQTEVWQlFXSXNRMEZCWjBJN1FVRkJPVU1zUzBGRFFTeExRVUZOTEZGQlFVNHNRMEZEVEN4SFFVRkpMRXRCUVU4c1MwRkJXQ3hEUVVGclFpeE5RVU5zUWl4RlFVRkZMRTlCUVU4c1IwRkJWQ3hEUVVOQkxFMUJRVkVzVFVGQlVTeExRVUZTTEVOQlFXZENMRWRCUVhoQ0xFTkJRMFFzUTBGRFJDeEhRVUZKTEV0QlFVc3NSMEZCVEN4SFFVRmhMRXRCUVdJc1JVRkJjMElzUzBGQlR5eEpRVUZRTEVWQlFXVXNTMEZCU3l4SFFVRk1MRU5CUVZjc1MwRkJXQ3hIUVVGeFFpeEhRVUU1UkN4RFFVRnRSU3hOUVVGUExFdEJRVkFzUTBGRmJrVXNUVUZCVHl4TlFVRlFMRU5CUTBRc1EwRnFRa1FzUTBGdFFrRXNTMEZCU3l4bFFVRk1MRU5CUVhWQ0xGTkJRVk1zUzBGQlZDeERRVUZuUWl4RFFVTnlReXhMUVVGTExFZEJRVXdzUlVGQldTeERRVUZhTEVOQlFXTTdRVUZEWkN4SlFVRkpMRXRCUVUwc1MwRkJTeXhQUVVGTUxFTkJRV0VzUzBGQllpeERRVUZXTEVOQlEwRXNSMEZCU1N4TFFVRlBMRWxCUVZnc1EwRkJhVUlzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVdFc1EwRkJlRUlzUTBGQk1rSXNORUpCUVRoQ0xFdEJRWHBFTEVWQlEycENMRWRCUVVrc2EwSkJRV3RDTEV0QlFVc3NhVUpCUVV3c1JVRkJiRUlzUTBGQlNpeERRVUZwUkN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExFZEJRV2hDTEVOQlFYRkNMR3REUVVGeVFpeEZRVU5xUkN4TlFVRlBMRTFCUVVzc1YwRkJUQ3hEUVVGcFFpeEhRVUZITEVkQlFYQkNMRU5CUVhsQ0xFZEJRWHBDTEVOQlFWQXNRMEZEUkN4RFFVNUVMRU5CVVVFN1FVRkZRU3hOUVVGTExGVkJRVXdzUTBGQmEwSXNVMEZCVXl4aFFVRlVMRU5CUVhkQ0xFTkJRM2hETEVkQlFVa3NUMEZCVVN4TFFVRkxMRWRCUVdwQ0xFTkJRWE5DTEZGQlFWVXNTMEZCYUVNc1EwRkJkVU1zVFVGQlVTeExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQk0wSXNTVUZCYjBNc1JVRkJia1lzUTBGRFFTeEhRVUZKTEVOQlFVTXNZVUZCUkN4RlFVRnJRaXhMUVVGTExFOUJRVXdzUTBGQllTeEZRVUZpTEVsQlFYRkNMRWxCUVRORExFTkJRV2xFTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJhMElzWjBKQlFXeENMRVZCUTJwRUxFZEJRVWtzVFVGQlR5eExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQk0wSXNRMEZCV0N4RFFVTkJMRWRCUVVrc1QwRkJVeXhGUVVGaUxFTkJRV2xDTEVOQlFVVTdRVUZEYWtJc1IwRkJSU3hMUVVGTExFZEJRVkFzUTBGRFFTeExRVUZMTEU5QlFVd3NRMEZCWVN4RlFVRmlMRVZCUTBFc1VVRkJWU3hKUVVGV0xFTkJRMEVzUzBGQlR5eExRVUZMTEV0QlFVd3NRMEZCVnl4VlFVRllMRU5CUVhOQ0xFdEJRVXNzUjBGQk0wSXNRMEZCVUN4RFFVTkVMRU5CUTBRc1IwRkJTU3hQUVVGVExFVkJRVlFzUlVGQlpTeFBRVUZUTEVkQlFUVkNMRU5CUVdsRExFTkJRVVU3UVVGRGFrTXNUVUZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXhWUVVGWUxFTkJRWE5DTEVWQlFVVXNTMEZCU3l4SFFVRTNRaXhEUVVGUUxFTkJRMEVzUjBGQlNTeFBRVUZUTEVWQlFWUXNSVUZCWlN4UFFVRlRMRVZCUVRWQ0xFTkJRV2RETEVWQlFVVXNTMEZCU3l4SFFVRlFMRU5CUVZjN1FVRkRNME1zU1VGQlNTeExRVUZMTEU5QlFVd3NRMEZCWVN4RlFVRmlMRWxCUVhGQ0xFbEJRWHBDTEVOQlFTdENMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVmdzUTBGQmEwSXNaMEpCUVd4Q0xFVkJReTlDTEZGQlFWVXNTVUZCVml4RFFVTkVMRU5CUTBRc1IwRkJTU3hyUWtGQmEwSXNTMEZCU3l4cFFrRkJUQ3hGUVVGc1FpeERRVUZLTEVOQlFXbEVMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVXNzUjBGQmFFSXNRMEZCY1VJc2EwTkJRWEpDTEVWQlJXcEVMRWRCUVVrc1MwRkJUU3hMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZZTEVOQlFXbENMRXRCUVdwQ0xFTkJRWGRDTEV0QlFVc3NSMEZCTjBJc1EwRkJWaXhEUVVFMlF5eEhRVUUzUXl4RFFVTkJMRWRCUVVrc1QwRkJTaXhEUVVGaExFbEJRVTBzVjBGQlZ5eEhRVUZZTEVOQlFVNHNRMEZCWWl4SlFVTkxMRWxCUVVrc1EwRkJReXhMUVVGRUxFVkJRVlVzU1VGQlNTeE5RVUZLTEVkQlFXVXNRMEZCTjBJc1EwRkJaME1zU1VGQlRTeFRRVUZUTEVkQlFWUXNRMEZCWXl4RlFVRmtMRU5CUVU0c1EwRkJhRU1zU1VGRFFTeEpRVUZKTEU5QlFVOHNTVUZCVUN4RFFVRlpMRWRCUVZvc1IwRkJiMElzUzBGQlN5eE5RVUUzUWl4RFFVRnhReXhMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZZTEVOQlFXdENMR2RDUVVGc1FpeEZRVUZ5UXl4SlFVTkJMRXRCUVUwc1UwRkJVeXhIUVVGVUxFTkJRV01zUTBGQlpDeERRVUZPTEVOQlEwd3NUVUZCVHl4TlFVRkxMRmRCUVV3c1EwRkJhVUlzUjBGQlJ5eEhRVUZ3UWl4RFFVRjVRaXhIUVVGNlFpeERRVUZRTEVOQlEwUXNRMEY0UWtRc1EwRXdRa0U3UVVGRlFTeE5RVUZMTEdGQlFVd3NRMEZCY1VJc1ZVRkJWeXhEUVVNNVFpeEhRVUZKTEVsQlFVc3NTMEZCU3l4TFFVRk1MRU5CUVZjc1ZVRkJXQ3hEUVVGelFpeExRVUZMTEVkQlFUTkNMRU5CUVZRc1EwRkJNRU1zU1VGQk1VTXNRMEZGUVN4SFFVRkpMRXRCUVU4c1IwRkJXQ3hEUVVGblFpeERRVU5rTEVkQlFVa3NTMEZCU3l4UFFVRk1MRU5CUVdFc1YwRkJZaXhEUVVFeVFpeERRVUV2UWl4RFFVRnJReXhMUVVGTExGVkJRVXdzUjBGRGJFTXNSMEZCU1N4VFFVRlZMRVZCUVVVc1MwRkJTeXhIUVVGeVFpeERRVU5CTEV0QlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEU5QlFWZ3NRMEZCYlVJc1IwRkJia0lzUTBGQmQwSXNTMEZCU3l4SFFVRTNRaXhGUVVGdlF5eExRVUZMTEVkQlFURkVMRU5CUVZBc1EwRkRRU3hGUVVGRkxFdEJRVXNzUjBGQlVDeERRVU5CTEVkQlFVa3NTMEZCVHl4UlFVRllMRU5CUVhGQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEU5QlFWZ3NRMEZCYjBJc01FSkJRWEJDTEVWQlEzUkNMRU5CVGtRc1NVRk5UeXhEUVVOTUxFdEJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRU5CUVdwQ0xFTkJRVkFzUTBGRFJDeERRVU5FTEUxQlFVOHNTMEZCVUN4RFFVTkVMRU5CWWtRc1EwRmxRU3hSUVVGVExHdENRVUZVTEVOQlFUSkNMRWxCUVROQ0xFTkJRV2xETEVOQlF5OUNPMEZCUTBFc1NVRkJTU3hOUVVGUkxFMUJRVm9zUTBGQmIwSXNUVUZCVHl4UlFVRlBMRmxCUVZBc1EwRkJiMElzU1VGQmNFSXNRMEZCVUN4RFFVTndRaXhOUVVGUkxFOUJRVklzUTBGRFFTeE5RVUZQTEZGQlFVOHNXVUZCVUN4RFFVRnZRaXhEUVVGRExFMUJRVkVzUlVGQlZDeEZRVUZsTEUxQlFXNURMRU5CUVRKRExFTkJRVU1zUzBGQlR5eEpRVUZTTEVWQlFXZENMRTFCUVRORUxFTkJRVkFzUTBGRFJDeERRVVZFTEV0QlFVc3NWVUZCVEN4RFFVRnJRaXhUUVVGVExFdEJRVlFzUTBGQlowSXNRMEZEYUVNc1IwRkJTU3hSUVVGVExFbEJRV0lzUTBGRlFTeEhRVUZKTEV0QlFVMHNSVUZCVml4RFFVRmpMRmRCUVdFc1JVRkJSU3hMUVVGTExFZEJRV3hETEVOQlEwRXNUMEZCVXl4RFFVTlFMRWRCUVVrc1QwRkJUeXhIUVVGUUxFVkJRV01zVDBGQlR5eExRVUZRTEVOQlFXRXNUVUZCTDBJc1EwRkJkVU1zVDBGQlR5eExRVUZRTEVOQlFXRXNUMEZCVHl4TFFVRndRaXhEUVVFeVFpdzRRa0ZCTTBJc1JVRkRka01zUjBGQlNTeEpRVUZMTEU5QlFVOHNTMEZCVUN4RFFVRmhMRlZCUVdJc1EwRkJkMElzVDBGQlR5eEhRVUV2UWl4RFFVRlVMRU5CUTBFc1IwRkJTU3hMUVVGUExFdEJRVmdzUTBGQmEwSXNUVUZEYkVJc1IwRkJTU3hMUVVGUExFVkJRVmdzUTBGQlpTeERRVUZGTzBGQlEyWXNUVUZCVHl4UFFVRlBMRXRCUVZBc1EwRkJZU3hMUVVGaUxFTkJRVzFDTEZWQlFXNUNMRU5CUVN0Q0xFOUJRVThzUjBGQmRFTXNRMEZCVUN4RFFVTkJMRXRCUVU4c1QwRkJUeXhsUVVGUUxFTkJRWFZDTEV0QlFYWkNMRU5CUVZBc1EwRkRRU3hYUVVGaExFOUJRVThzUjBGQmNFSXNRMEZEUkN4RFFVcEVMRWxCU1U4c1EwRkRUQ3hIUVVGSkxGVkJRVlVzUlVGQlZpeERRVUZLTEVOQlFXMUNMRTlCUVU4c1MwRkJVQ3hEUVVGaExFOUJRVThzUzBGQmNFSXNRMEZCTWtJc09FSkJRVE5DTEVWQlEyNUNMRVZCUVVVc1QwRkJUeXhIUVVGVUxFTkJRMFFzUTBGRFJpeERRVU5FTEV0QlFVOHNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJXQ3hEUVVGcFFpeFZRVUZxUWl4RFFVRTJRaXhMUVVGTExFZEJRVXdzUlVGQk4wSXNRMEZCVUN4RFFVTkJMRTFCUVU4c1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFVY3NUVUZCY0VJc1EwRkJORUlzUjBGQk5VSXNRMEZCVUN4RFFVTkVMRU5CYmtKRUxFTkJjVUpCTzBGQlJVRXNUVUZCU3l4aFFVRk1MRU5CUVhGQ0xGVkJRVmNzUTBGRE9VSXNSMEZCU1N4UlFVRlRMRWxCUVdJc1EwRkZRU3hIUVVGSkxFdEJRVTBzUlVGQlZpeERRVUZqTEZkQlFXRXNTMEZCU3l4SFFVRm9ReXhEUVVOQkxFOUJRVk1zUTBGRFVDeEhRVUZKTEU5QlFVOHNSMEZCVUN4RlFVRmpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFMUJRUzlDTEVOQlFYVkRMRTlCUVU4c1MwRkJVQ3hEUVVGaExFOUJRVThzUzBGQmNFSXNRMEZCTWtJc2RVSkJRVE5DTEVWQlEzWkRMRWRCUVVrc1NVRkJTeXhQUVVGUExFdEJRVkFzUTBGQllTeFZRVUZpTEVOQlFYZENMRTlCUVU4c1IwRkJMMElzUTBGQlZDeERRVU5CTEVkQlFVa3NTMEZCVHl4RlFVRlFMRVZCUVdFc1MwRkJUeXhGUVVGUUxFVkJRV0VzVDBGQlR5eExRVUZRTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhQUVVGUExFZEJRVkFzUTBGQllTeERRVUZ5UXl4SlFVRTBReXhIUVVFeFJTeERRVUVyUlN4RFFVRkZPMEZCUXk5RkxFbEJRVWtzVDBGQlR5eEhRVUZRTEVkQlFXVXNUMEZCVHl4TFFVRjBRaXhGUVVFclFpeFBRVUZQTEVsQlFWQXNSMEZCWjBJc1IwRkJSeXhSUVVGMFJDeERRVUZuUlN4RFFVTTVSQ3hIUVVGSkxFdEJRVThzUlVGQldDeERRVUZsTEVOQlEySXNUMEZCVHl4SFFVRlFMRVZCUVdNc1EwRkJaQ3hEUVVOQkxFMUJRVThzVVVGQlR5eFhRVUZRTEVOQlFXMUNMRWRCUVVjc1dVRkJkRUlzUTBGQlVDeERRVU5FTEVOQlNFUXNTVUZIVHl4RFFVTk1MRVZCUVVVc1QwRkJUeXhIUVVGVUxFTkJRMEVzVFVGQlR5eFJRVUZQTEZkQlFWQXNRMEZCYlVJc1IwRkJSeXhUUVVGMFFpeERRVUZRTEVOQlEwUXNRMEZEUml4RFFVTkVMRXRCUVU4c1QwRkJUeXhMUVVGUUxFTkJRV0VzUzBGQllpeERRVUZ0UWl4VlFVRnVRaXhEUVVFclFpeFBRVUZQTEVkQlFYUkRMRU5CUVZBc1EwRkRRU3hOUVVGUExGRkJRVThzVjBGQlVDeERRVUZ0UWl4SFFVRkhMRkZCUVhSQ0xFTkJRV2RETEVkQlFXaERMRU5CUVZBc1EwRkRSQ3hEUVVORUxFZEJRVWtzUzBGQlR5eEZRVUZZTEVOQlFXVXNRMEZCUlR0QlFVTm1MRTFCUVU4c1QwRkJUeXhMUVVGUUxFTkJRV0VzUzBGQllpeERRVUZ0UWl4VlFVRnVRaXhEUVVFclFpeFBRVUZQTEVkQlFYUkRMRU5CUVZBc1EwRkRRU3hMUVVGUExFOUJRVThzWlVGQlVDeERRVUYxUWl4SlFVRjJRaXhEUVVGUUxFTkJRMEVzVjBGQllTeFBRVUZQTEVkQlFYQkNMRU5CUTBRc1EwRktSQ3hKUVVsUExFbEJRVWtzVlVGQlZTeEZRVUZXTEVOQlFVb3NRMEZCYlVJc1EwRkRlRUlzUzBGQlR5eFBRVUZQTEV0QlFWQXNRMEZCWVN4TFFVRmlMRU5CUVcxQ0xGVkJRVzVDTEVOQlFTdENMRTlCUVU4c1IwRkJkRU1zUTBGQlVDeERRVU5CTEVWQlFVVXNUMEZCVHl4SFFVRlVMRU5CUTBFc1QwRkJVU3hGUVVGU0xFVkJRMFVzU1VGQlN5eEhRVUZNTEVOQlEwVXNSMEZCU1N4UFFVRlBMRXRCUVZBc1EwRkJZU3hWUVVGaUxFTkJRWGRDTEU5QlFVOHNSMEZCTDBJc1NVRkJkME1zUlVGQk5VTXNRMEZCWjBRc1JVRkJSU3hQUVVGUExFZEJRVlFzUTBGRGJFUXNTVUZCU3l4SFFVRk1MRU5CUTBVc1MwRkJUeXhKUVVGUUxFTkJRMEVzVFVGRFJpeFJRVU5GTEV0QlFVOHNUMEZCVHl4WlFVRlFMRU5CUVc5Q0xFVkJRWEJDTEVOQlFWQXNRMEZEUVN4TlFWSktMRU5CVlVFc1IwRkJTU3hQUVVGUExFOUJRVkFzUTBGQlpTeFRRVUZ1UWl4RFFVRTRRaXhEUVVNMVFpeEZRVUZGTEU5QlFVOHNUMEZCVkN4RFFVTkJMRTlCUVU4c1UwRkJVQ3hEUVVGdFFpeFBRVUZQTEVkQlFURkNMRU5CUTBRc1EwRkRSQ3hYUVVGaExFOUJRVThzUjBGQmNFSXNRMEZEUkN4RFFXeENUU3hKUVd0Q1FTeERRVU5NTEVWQlFVVXNUMEZCVHl4SFFVRlVMRU5CUTBRc1EwRkRSaXhEUVVOR0xFTkJPVU5FTEVOQlowUkJPMEZCUlVFc1RVRkJTeXhsUVVGTUxFTkJRWFZDTEZOQlFWTXNWVUZCVkN4RFFVRnhRaXhEUVVNeFF5eEhRVUZKTEVsQlFVc3NTMEZCU3l4TFFVRk1MRU5CUVZjc1ZVRkJXQ3hEUVVGelFpeEZRVUZGTEV0QlFVc3NSMEZCTjBJc1EwRkJWQ3hEUVVOQkxFVkJRVVVzUzBGQlN5eEhRVUZRTEVOQlEwRXNUMEZCVVN4RlFVRlNMRVZCUTBFc1NVRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlR5eEpRVUZRTEVOQlFWazdRVUZEZEVJc1MwRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlR5eEpRVUZRTEVOQlFWazdRVUZEZEVJc1MwRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlR5eFJRVUZQTEZsQlFWQXNRMEZCYjBJc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEVOQlFXcENMRU5CUVhCQ0xFTkJRVkFzUTBGQlowUTdRVUZETVVRc1MwRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlR5eHRRa0ZCYTBJc1MwRkJTeXhoUVVGTUxFVkJRV3hDTEVOQlFWQXNRMEZCSzBNN1FVRkRla1FzUzBGQlN5eEpRVUZNTEVOQlFWVXNUVUZCVHl4SlFVRlFMRU5CUVZrN1FVRkRkRUlzUzBGQlN5eEhRVUZNTEVOQlFWTXNUVUZCVHl4SlFVRlFMRU5CUVZrN1FVRkRja0lzUzBGQlN5eEpRVUZNTEVOQlFWVXNUVUZCVHl4UlFVRlFMRU5CUVdkQ08wRkJRekZDTEV0QlFVc3NTVUZCVEN4RFFVRlZMRTFCUVU4c1NVRkJVQ3hEUVVGWk8wRkJRM1JDTEV0QlFVc3NSMEZCVEN4RFFVRlRMRWRCUVVrc1MwRkJTeXhMUVVGTUxFTkJRVmNzVlVGQldDeERRVUZ6UWl4TFFVRkxMRWRCUVROQ0xFbEJRVzlETEVWQlFYaERMRU5CUVRSRExFVkJRVVVzUzBGQlN5eEhRVUZRTEVOQlFWYzdRVUZEYUVVc1MwRkJTeXhIUVVGTUxFTkJRVk03UVVGRFVDeEpRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRk5CUVdwQ0xFTkJRVFJDTEVOQlFVVXNTMEZCU3l4VFFVRk1MRU5CUVdsQ0xFdEJRVXNzUjBGQmRFSXNRMEZCTWtJc1JVRkJSU3hMUVVGTExFOUJRVkFzUTBGQlowSXNRMEZEZWtVc1RVRkJUeXhGUVVGUUxFTkJRMFlzVVVGRFJTeEhRVUZKTEVsQlFVMHNSVUZCVGl4RlFVRlpMRWxCUVUwc1JVRkJkRUlzUTBGQk1FSXNRMEZEZUVJc1IwRkJTU3hWUVVGWExFdEJRVXNzUzBGQlRDeERRVUZYTEUxQlFWZ3NRMEZCYTBJc1MwRkJTeXhIUVVGTUxFTkJRVmNzUTBGQk4wSXNRMEZCWjBNc1EwRkJhRU1zUlVGQmJVTXNTMEZCYmtNc1EwRkJlVU1zVTBGQmVrTXNSVUZCYjBRc1EwRkJjRVFzUTBGQlppeERRVU5CTEVkQlFVa3NUMEZCVVN4VFFVRlRMRkZCUVZRc1EwRkJiVUlzUTBGQmJrSXNRMEZCV2l4RFFVTkJMRWRCUVVrc1RVRkJVU3hIUVVGYUxFTkJRV2xDTEVOQlEyWXNVMEZCVnl4VFFVRlRMRXRCUVZRc1EwRkJaU3hEUVVGbUxFTkJRV3RDTEVOQlFVTXNRMEZCYmtJc1EwRkJXQ3hEUVVOQkxFMUJRVkVzVTBGQlV5eFJRVUZVTEVOQlFXMUNMRU5CUVc1Q0xFTkJRVklzUTBGRFJDeERRVU5FTEVkQlFVa3NWMEZCWVN4SFFVRmlMRWRCUVhGQ0xFdEJRVXNzVFVGQlRDeEZRVUZsTEZWQlFYQkRMRU5CUVVvc1EwRkJjVVFzUTBGRGJrUXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhIUVVGTUxFTkJRVmNzUTBGQmRFSXNRMEZCZVVJc09FSkJRWHBDTEVWQlEwUXNRMEZEUkN4TFFVRkxMRWRCUVV3c1JVRkJXU3hUUVVGVExFMUJRVlFzUTBGQmEwSXNRMEZCT1VJc1EwRkRRU3hOUVVGUExGRkJRVThzV1VGQlVDeERRVUZ2UWl4TFFVRndRaXhEUVVGUUxFTkJRMFFzUTBGRFJDeE5RVUZQTEZGQlFVOHNXVUZCVUN4RFFVRnZRaXhGUVVGd1FpeERRVUZRTEVOQk0wSkdMRU5CTmtKRUxFTkJhRU5FTEVOQmEwTkJPMEZCUlVFc1RVRkJTeXhYUVVGTUxFTkJRVzFDTEZOQlFWTXNSMEZCVkN4RFFVRmpMRU5CUXk5Q0xFZEJRVWtzVTBGQlZTeExRVUZMTEVkQlFXNUNMRU5CUTBFc1IwRkJTU3hIUVVGSkxFdEJRVXNzVDBGQlRDeERRVUZoTEVWQlFXSXNRMEZCYVVJc1IwRkJha0lzUTBGQlVpeERRVU5CTEVkQlFVa3NTVUZCVFN4SlFVRldMRU5CUVdkQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEU5QlFWZ3NRMEZCYjBJc0swSkJRWEJDTEVWQlEyaENMRTFCUVU4c1JVRkJVQ3hEUVVORUxFTkJURVFzUTBGUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhUUVVGTUxFTkJRV2xDTEZWQlFWY3NRMEZETVVJc1IwRkJTU3hSUVVGVExFbEJRV0lzUTBGRlFTeExRVUZMTEZkQlFVd3NRMEZCYlVJc1MwRkJia0lzUTBGRFFTeEhRVUZKTEUxQlFVOHNSVUZCV0N4RFFVRmxMRTFCUVZFc1NVRkJka0lzUTBGQk5rSXNWMEZCWVN4TFFVRkxMRWRCUVM5RExFTkJRMEVzUjBGQlNTeFJRVUZUTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1JVRkJORUlzUTBGQmVrTXNRMEZEUVN4TlFVRlBMRXRCUVVzc1IwRkJUQ3hEUVVGWExFdEJRVXNzUzBGQlRDeERRVUZYTEUxQlFUZENMRU5CUVhGRExFTkJRMjVETEVkQlFVa3NTVUZCU3l4UFFVRlBMR2xDUVVGUUxFVkJRVlFzUTBGRFFTeEhRVUZKTEdsQ1FVRnBRaXhGUVVGcVFpeERRVUZ4UWl4TlFVRnlRaXhEUVVGS0xFTkJRV3RETEVOQlEyaERMRTlCUVU4c1IwRkJVQ3hGUVVGakxFbEJRVTBzVFVGQlRpeERRVUZsTEVOQlFXWXNRMEZCYlVJc1EwRkJha01zUTBGRFJDeERRVVpFTEVsQlJVOHNTVUZCU1N4TFFVRlBMRVZCUVZnc1EwRkJaU3hEUVVGRk8wRkJRM1JDTEZGQlFVOHNWMEZCVUN4RFFVRnhRaXhKUVVGeVFpeERRVU5CTEUxQlFWRXNUMEZCVHl4TFFVRlFMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeFZRVUZ1UWl4RFFVRXJRaXhQUVVGUExFZEJRWFJETEVOQlFWSXNRMEZEUVN4SFFVRkpMRlZCUVZjc1QwRkJUeXhIUVVGMFFpeERRVU5CTEVkQlFVa3NUMEZCVHl4TFFVRlFMRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeEZRVUZGTEU5QlFVOHNSMEZCYWtNc1IwRkJlVU1zUjBGQk4wTXNRMEZCYTBRN1FVRkRhRVFzVVVGQlR5eExRVUZRTEVOQlFXRXNUMEZCVHl4SFFVRndRaXhEUVVGNVFpd3lRMEZCZWtJc1JVRkRSaXhGUVVGRkxFOUJRVThzUjBGQlZDeERRVU5CTEVkQlFVa3NTMEZCVFN4UFFVRlBMR0ZCUVZBc1JVRkJWaXhEUVVOQkxFZEJRVWtzUTBGQlF5eERRVUZETEUxQlFWRXNhVUpCUVZJc1EwRkJORUlzWjBKQlFUZENMRVZCUVN0RExFZEJRUzlETEVOQlFXOUVMRTFCUVhCRUxFTkJRVXdzUTBGRFJTeFBRVUZQTEV0QlFWQXNRMEZCWVN4UlFVRmlMRU5CUVhWQ0xIZENRVUYyUWl4RlFVTkdMRTFCUVZFc2EwSkJRV3RDTEVkQlFXeENMRU5CUVZJc1EwRkRRU3hYUVVGaExFOUJRVThzUjBGQmNFSXNRMEZEUkN4RFFWcE5MRWxCV1VFc1EwRkRUQ3hOUVVORUxFTkJRMFFzVFVGQlVTeExRVUZTTEVOQlEwUXNRMEZEUkN4TlFVRlBMRTFCUVU4c1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQldDeERRVUZwUWl4VlFVRnFRaXhEUVVFMlFpeExRVUZMTEVkQlFXeERMRU5CUVdRc1EwRkRSQ3hEUVRWQ1JDeERRVGhDUVR0QlFVTkJPMEZCUlVFc1RVRkJTeXhSUVVGTUxFTkJRV2RDTEZWQlFWY3NRMEZEZWtJc1IwRkJTU3hOUVVGUExFdEJRVXNzVTBGQlRDeEZRVUZZTEVOQlEwRXNSMEZCU1N4TlFVRlBMRWRCUVVjc1NVRkJaQ3hEUVVOQkxFZEJRVWtzUTBGQlF5eExRVUZMTEU5QlFVd3NRMEZCWVN4WFFVRmlMRVZCUVRSQ0xFTkJRVFZDTEVWQlFXbERMRU5CUVVNc1MwRkJTeXhYUVVGNFF5eEhRVUYzUkN4TFFVRkxMRkZCUVV3c1EwRkJZeXhKUVVGa0xFTkJRVzFDTEVsQlFXNUNMRU5CUVRWRUxFTkJRMFVzUzBGQlR5eGhRVUZoTEVsQlFXSXNRMEZCVUN4RFFVTkdMRTFCUVU4c1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVsQlFXcENMRU5CUVhWQ0xFbEJRWFpDTEVOQlFWQXNRMEZEUkN4RFFVNUVMRU5CVVVFc1IwRkJTU3hUUVVGVkxFOUJRV1FzUTBGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRU3hUUVVGVExFMUJRVlFzUTBGQlpTeExRVUZtTEVOQlFYTkNMRTlCUVhSQ0xFTkJRU3RDTEVOQlF6ZENMRTFCUVU4c1NVRkJTU3hQUVVGS0xFTkJRVmNzVDBGQldDeERRVUZ2UWl4TFFVRndRaXhGUVVFeVFpeExRVUV6UWl4RlFVRlFMRU5CUTBRc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRlFTeFRRVUZUTEd0Q1FVRlVMRU5CUVRKQ0xFdEJRVE5DTEVOQlFXdERMRWRCUVd4RExFTkJRWFZETEU5QlFYWkRMRU5CUVdkRUxFTkJRemxETEVkQlFVa3NSMEZCU1N4SFFVRkpMRTlCUVVvc1EwRkJWeXhQUVVGWUxFTkJRVzlDTEV0QlFYQkNMRU5CUVRKQ0xFZEJRVE5DTEVOQlFWSXNRMEZEUVN4RlFVRkZMRk5CUVVZc1IwRkRRU3hOUVVGUExFZEJRVVVzWlVGQlJpeEZRVUZRTEVOQlEwUXNRMEZGUkR0QlFVTkJPMEZCUlVFc1UwRkJVeXhWUVVGVUxFTkJRVzFDTEV0QlFXNUNMRU5CUVRCQ0xFOUJRVEZDTEVOQlFXMURMRU5CUTJwRExFMUJRVThzU1VGQlNTeFBRVUZLTEVOQlFWY3NUMEZCV0N4RFFVRnZRaXhMUVVGd1FpeERRVUZRTEVOQlEwUXNReXhuUTBGRlVTeFBMRU5CUVVFc1R5eHBRMEZCVXl4TExFTkJRVUVzU3l4cFEwRkJUeXhwUWl4RFFVRkJMR2xDTEdsRFFVRnRRaXhUTEVOQlFVRXNVeXhwUTBGQlZ5eE5MRU5CUVVFc1RTeHBRMEZCVVN4UExFTkJRVUVzVHl4cFEwRkJVeXhqTEVOQlFVRXNZeXhwUTBGQlowSXNVU3hEUVVGQkxGRXNhVU5CUVZVc1l5eERRVUZCTEdNc2FVTkJRV2RDTEZjc1EwRkJRU3hYTEdsRFFVRmhMRWtzUTBGQlFTeEpMR2xEUVVGTkxGTXNRMEZCUVN4VExHbERRVUZwUWl4UkxFTkJRVTRzUlN4cFEwRkJaMElzVlN4RFFVRkJMRlVzYVVOQlFYRkNMRmNzUTBGQlZDeExMR2xEUVVGelFpeG5RaXhEUVVGQkxHZENMR2xEUVVGclFpeHBRaXhEUVVGQkxHbENMR2xEUVVGdFFpeExMRU5CUVVFc1N5eHBRMEZCVHl4VExFTkJRVUVzVXl4cFEwRkJWeXhUTEVOQlFVRXNVeXhwUTBGQlZ5eFZMRU5CUVVFc1ZUczdPenM3TzBGRGRtbEhjRkU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlF6dEJRVU5FTEhGRFFVRnZRenRCUVVOd1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4M1FrRkJkVUk3UVVGRGRrSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZkQlFWVTdRVUZEVmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1IwRkJSVHM3UVVGRlJqczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVN4M1EwRkJkVU1zZFVOQlFYVkRMR2RDUVVGblFqczdRVUZGT1VZN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVMDdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTA3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGTk8wRkJRMDQ3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR1ZCUVdNN1FVRkRaRHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZOTzBGQlEwNDdRVUZEUVN4SFFVRkZPenRCUVVWR096dEJRVVZCTEZGQlFVODdRVUZEVUR0QlFVTkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNVVUZCVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRXNkME5CUVhWRExIVkRRVUYxUXl4blFrRkJaMEk3TzBGQlJUbEdPMEZCUTBFN1FVRkRRU3h4UWtGQmIwSXNhMEpCUVd0Q08wRkJRM1JETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGRk96dEJRVVZHTEZGQlFVODdRVUZEVUR0QlFVTkJPenRCUVVWQkxHOUNRVUZ0UWpzN1FVRkZia0lzVVVGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4UlFVRlBPMEZCUTFBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNkVVZCUVhORkxEQkRRVUV3UXpzN1FVRkZhRWdzVVVGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhGRlFVRnZSVHRCUVVOd1JUdEJRVU5CTEhWR1FVRnpSanRCUVVOMFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVUZCV1R0QlFVTmFMRmRCUVZVN1FVRkRWanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVMDdRVUZEVGp0QlFVTkJPMEZCUTBFc2FVUkJRV2RFTzBGQlEyaEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdkQ1FVRmxPMEZCUTJZc1owSkJRV1U3UVVGRFppeG5Ra0ZCWlR0QlFVTm1MR2RDUVVGbE8wRkJRMllzYVVKQlFXZENPMEZCUTJoQ0xHbENRVUZuUWp0QlFVTm9RaXhwUWtGQlowSTdRVUZEYUVJc2EwSkJRV2xDTzBGQlEycENPenRCUVVWQkxGRkJRVTg3UVVGRFVEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIbERRVUYzUXpzN1FVRkZlRU1zVVVGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFc0swSkJRVGhDTzBGQlF6bENMSFZEUVVGelF6czdRVUZGZEVNc1VVRkJUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hSUVVGUE8wRkJRMUE3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFJRVUZQTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVVTdRVUZEUmp0QlFVTkJPMEZCUTBFN08wRkJSVUVzVVVGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlNTeFZRVUZWTzBGQlEyUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzVVVGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4UlFVRlBPMEZCUTFBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1VVRkJUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4MVJVRkJjMFVzWjBKQlFXZENMRlZCUVZVc1IwRkJSenRCUVVOdVJ5eEhRVUZGT3p0QlFVVkdMRkZCUVU4N1FVRkRVRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4dFEwRkJhME1zVVVGQlVTeG5Ra0ZCWjBJc1ZVRkJWU3hIUVVGSE8wRkJRM1pGTEVkQlFVVTdPMEZCUlVZc1VVRkJUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTVHRCUVVOS08wRkJRMEU3UVVGRFFUczdRVUZGUVN4UlFVRlBPMEZCUTFBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFJRVUZQTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNVVUZCVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNSVUZCUXp0QlFVTkVPMEZCUTBFc05FTkJRVEpETEdOQlFXTXNNbWh5UWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjZZWHBFT3p0QlFVTkJPenM3TzBGQlJVRXNTMEZCVFN4M1FrRkJkMElzTWtOQlFUbENPenMyUWtGRllTeFJMRmRCUVVFc1VUdEJRVU5VTEN0RFFVRlpMRWRCUVZvc1JVRkJhVUlzVVVGQmFrSXNSVUZCTWtJN1FVRkJRVHM3UVVGQlFUczdRVUZEZGtJc1kwRkJTeXhqUVVGTUxFZEJRWE5DTERKRFFVRjBRanM3UVVGRlFTeGpRVUZMTEdkQ1FVRk1MRWRCUVhkQ0xDdEVRVUZ4UWl4SFFVRnlRaXhGUVVFd1FpeFJRVUV4UWl4RFFVRjRRanRCUVVOQkxHTkJRVXNzWjBKQlFVd3NRMEZCYzBJc1kwRkJkRUlzUTBGQmNVTTdRVUZCUVN4dlFrRkJXU3dyUWtGQlN5eFhRVUZNTEVOQlFXbENMRkZCUVdwQ08wRkJRVm83UVVGQlFTeFZRVUZ5UXp0QlFVTklPenM3TzI5RFFXdENWU3hoTEVWQlFXVTdRVUZEZEVJc2EwSkJRVXNzWTBGQlRDeERRVUZ2UWl4SFFVRndRaXhEUVVGM1FpeGhRVUY0UWp0QlFVTkJMREpDUVVGakxHbENRVUZrTEVOQlFXZERMRWRCUVdoRExFTkJRVzlETEVsQlFYQkRPMEZCUTBnN096dHhRMEZGVnl4UkxFVkJRVlU3UVVGRGJFSXNhVUpCUVVjc1EwRkJReXhwUkVGQldTeFJRVUZhTEVOQlFVb3NSVUZCTWtJN1FVRkRka0lzYzBKQlFVc3NWMEZCVER0QlFVTklPenRCUVVWRUxHdENRVUZMTEdOQlFVdzdRVUZEU0RzN096QkRRVVZuUWp0QlFVTmlMR3RDUVVGTExHTkJRVXdzUTBGQmIwSXNUMEZCY0VJc1EwRkJORUlzVlVGQlV5eGhRVUZVTEVWQlFYZENPMEZCUTJoRUxDdENRVUZqTEdkQ1FVRmtPMEZCUTBnc1kwRkdSRHRCUVVkSU96czdkVU5CUldFN1FVRkRWaXh4UWtGQlVTeEhRVUZTTEVOQlFWa3NiMEpCUVZvN08wRkJSVUVzYVVKQlFVa3NhVUpCUVdsQ0xFVkJRWEpDTzBGQlEwRXNhMEpCUVVzc1kwRkJUQ3hEUVVGdlFpeFBRVUZ3UWl4RFFVRTBRaXhWUVVGVExHRkJRVlFzUlVGQmQwSTdRVUZEYUVRc1owTkJRV1VzU1VGQlppeERRVUZ2UWl4aFFVRndRanRCUVVOSUxHTkJSa1E3TzBGQlNVRXNORUpCUVdVc1QwRkJaaXhEUVVGMVFpeFZRVUZUTEdGQlFWUXNSVUZCZDBJN1FVRkRNME1zSzBKQlFXTXNaVUZCWkR0QlFVTklMR05CUmtRN1FVRkhRU3cwUWtGQlpTeFBRVUZtTEVOQlFYVkNMRlZCUVZNc1lVRkJWQ3hGUVVGM1FqdEJRVU16UXl3clFrRkJZeXhuUWtGQlpEdEJRVU5JTEdOQlJrUTdRVUZIU0RzN08zVkRRV3BFYjBJc1J5eEZRVUZMTEZFc1JVRkJWVHRCUVVOb1F5eHBRa0ZCU1N4TlFVRktPMEZCUTBFc2FVSkJRVWNzYzBKQlFYTkNMRWRCUVhSQ0xFTkJRVEJDTEVkQlFURkNMRU5CUVVnc1JVRkJiVU03UVVGREwwSXNNRUpCUVZNc2MwSkJRWE5DTEVkQlFYUkNMRU5CUVRCQ0xFZEJRVEZDTEVOQlFWUTdRVUZEU0N4alFVWkVMRTFCUlU4N1FVRkRTQ3d3UWtGQlV5eEZRVUZVTzBGQlEwRXNkVU5CUVhOQ0xFZEJRWFJDTEVOQlFUQkNMRWRCUVRGQ0xFVkJRU3RDTEUxQlFTOUNPMEZCUTBnN08wRkJSVVFzYVVKQlFVY3NRMEZCUXl4UFFVRlBMR05CUVZBc1EwRkJjMElzVVVGQmRFSXNRMEZCU2l4RlFVRnhRenRCUVVOcVF5eDNRa0ZCVHl4UlFVRlFMRWxCUVcxQ0xFbEJRVWtzVVVGQlNpeERRVUZoTEVkQlFXSXNSVUZCYTBJc1VVRkJiRUlzUTBGQmJrSTdRVUZEU0RzN1FVRkZSQ3h2UWtGQlR5eFBRVUZQTEZGQlFWQXNRMEZCVUR0QlFVTklPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRek5DVEN4TFFVRk5MSGxDUVVGNVFpeGpRVUV2UWpzN05rSkJSV0VzWjBJc1YwRkJRU3huUWp0QlFVTlVMSFZFUVVGWkxFZEJRVm9zUlVGQmFVSXNVVUZCYWtJc1JVRkJNa0k3UVVGQlFUczdRVUZEZGtJc1kwRkJTeXhuUWtGQlRDeERRVUZ6UWl4SFFVRjBRaXhGUVVFeVFpeFJRVUV6UWpzN1FVRkZRU3hoUVVGSk8wRkJRMEVzYVVKQlFVa3NaMEpCUVVvc1EwRkJjVUlzVVVGQmNrSXNSVUZCWjBNc1dVRkJWenRCUVVOMlF5eHhRa0ZCUnl4aFFVRmhMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzaENPMEZCUTBFc2QwSkJRVThzUzBGQlN5eHpRa0ZCVEN4RFFVRlFPMEZCUTBnc1kwRktPRUlzUTBGSk5VSXNTVUZLTkVJc1EwRkpka0lzU1VGS2RVSXNRMEZCTDBJN1FVRkxTQ3hWUVU1RUxFTkJUVVVzVDBGQlR5eERRVUZRTEVWQlFWVXNRMEZCUlN4eFEwRkJkVU03UVVGRGNrUXNZVUZCU1N4WlFVRlpMRWxCUVVrc1owSkJRVW9zUTBGQmNVSXNVVUZCY2tJc1EwRkJhRUk3UVVGRFFTeGhRVUZKTEVOQlFVTXNVMEZCVEN4RlFVRm5RanRCUVVOYU8wRkJRMEVzYTBKQlFVc3NhVUpCUVV3c1EwRkJkVUlzVFVGQmRrSXNSVUZCSzBJc1NVRkJMMEk3UVVGRFFUdEJRVU5JT3p0QlFVVkVMR0ZCUVVrc1owSkJRVW9zUTBGQmNVSXNVVUZCY2tJc1JVRkJaME1zVlVGQlV5eFJRVUZVTEVWQlFXMUNPMEZCUXk5RExHbENRVUZKTEdOQlFXTXNTMEZCU3l4elFrRkJUQ3hKUVVFclFpeFJRVUZxUkR0QlFVTkJMSEZDUVVGUkxFZEJRVklzUTBGQldTeGpRVUZhTEVWQlFUUkNMRWRCUVRWQ0xFVkJRV2xETEZGQlFXcERMRVZCUVRKRExGRkJRVE5ETzBGQlEwRXNhMEpCUVVzc1pVRkJUQ3hEUVVGeFFpeFJRVUZ5UWp0QlFVTkJMRzlDUVVGUExGZEJRVkE3UVVGRFNDeFZRVXc0UWl4RFFVczFRaXhKUVV3MFFpeERRVXQyUWl4SlFVeDFRaXhEUVVFdlFqdEJRVTFJT3pzN096QkRRVVZuUWl4SExFVkJRVXNzVVN4RlFVRlZPMEZCUXpWQ08wRkJRMEVzYVVKQlFVa3NhVUpCUVdsQ0xFbEJRVWtzWjBKQlFVb3NRMEZCY1VJc1VVRkJja0lzUTBGQmNrSTdRVUZCUVN4cFFrRkRTU3hwUWtGQmFVSXNTVUZCU1N4blFrRkJTaXhEUVVGeFFpeFJRVUZ5UWl4RFFVUnlRanRCUVVWQkxHbENRVUZKTEd0Q1FVRnJRaXhqUVVGMFFpeEZRVUZ6UXp0QlFVTnNReXh6UWtGQlN5eG5Ra0ZCVEN4RFFVRnpRaXh6UWtGQmRFSXNSVUZCT0VNc1kwRkJPVU03UVVGRFFTeHpRa0ZCU3l4blFrRkJUQ3hEUVVGelFpeHpRa0ZCZEVJc1JVRkJPRU1zWTBGQk9VTTdRVUZEU0RzN1FVRkZSRHRCUVVOQkxHbENRVUZKTEVOQlFVTXNZMEZCUkN4SlFVTkJMRU5CUVVNc1kwRkVSQ3hKUVVWQkxFbEJRVWtzWTBGQlNpeERRVUZ0UWl4UlFVRnVRaXhEUVVaS0xFVkJSMFU3UVVGRFJTeHpRa0ZCU3l4elFrRkJUQ3hKUVVFclFpeEpRVUZKTEZGQlFVb3NRMEZCTDBJN1FVRkRTRHRCUVVOS096czdkME5CUldNc1VTeEZRVUZWTzBGQlEzSkNMR3RDUVVGTExITkNRVUZNTEVkQlFUaENMRkZCUVRsQ08wRkJRMGc3T3p0NVEwRkZaU3hSTEVWQlFWVTdRVUZEZEVJc2EwSkJRVXNzYzBKQlFVd3NTVUZCSzBJc1MwRkJTeXh6UWtGQlRDeERRVUUwUWl4UlFVRTFRaXhEUVVFdlFqdEJRVU5JT3pzN096czdPenM3T3pzN096dFRRMnBFVnl4aExFZEJRVUVzWVR0cFEwRnRRa0VzWjBJc1IwRkJRU3huUWp0cFEwRlZRU3hYTEVkQlFVRXNWenRwUTBGbFFTeFJMRWRCUVVFc1VUdEJRUzlEYUVJN1FVRkRRVHM3UVVGRlR5eFZRVUZUTEdGQlFWUXNRMEZCZFVJc1MwRkJka0lzUlVGQk9FSXNTVUZCT1VJc1JVRkJiME03UVVGRGRrTTdRVUZEUVN4VFFVRkpMRk5CUVZNc1MwRkJZanRCUVVOQkxGTkJRVWtzVFVGQlRTeE5RVUZOTEUxQlFXaENPMEZCUTBFc1ZVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQldpeEZRVUZsTEVsQlFVa3NSMEZCYmtJc1JVRkJkMElzUjBGQmVFSTdRVUZEU1N4aFFVRkhMRTFCUVUwc1EwRkJUaXhMUVVGWkxFbEJRV1lzUlVGQmNVSTdRVUZEYWtJc2MwSkJRVk1zU1VGQlZEdEJRVU5CTzBGQlEwZzdRVUZLVEN4TlFVcDFReXhEUVZWMlF6dEJRVU5CTEZOQlFVa3NRMEZCUXl4TlFVRk1MRVZCUVdFN1FVRkRWQ3hsUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTzBGQlEwZzdPMEZCUlVRN1FVRkRRU3haUVVGUExFTkJRVU1zVFVGQlVqdEJRVU5JT3p0QlFVVk5MRlZCUVZNc1owSkJRVlFzUTBGQk1FSXNTMEZCTVVJc1JVRkJhVU1zU1VGQmFrTXNSVUZCZFVNN1FVRkRNVU1zVTBGQlNTeFJRVUZSTEUxQlFVMHNUMEZCVGl4RFFVRmpMRWxCUVdRc1EwRkJXanRCUVVOQkxGTkJRVWtzVlVGQlZTeERRVUZETEVOQlFXWXNSVUZCYTBJN1FVRkRaQ3hsUVVGTkxFMUJRVTRzUTBGQllTeExRVUZpTEVWQlFXOUNMRU5CUVhCQ08wRkJRMEU3UVVGRFFTeG5Ra0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3haUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGVFN4VlFVRlRMRmRCUVZRc1EwRkJjVUlzU1VGQmNrSXNSVUZCTWtJN1FVRkRPVUlzVTBGQlNTeFZRVUZWTEZOQlFWWXNUMEZCVlN4RFFVRlRMRWxCUVZRc1JVRkJaVHRCUVVONlFpeG5Ra0ZCVHl4UFFVRlBMRk5CUVZBc1EwRkJhVUlzVVVGQmFrSXNRMEZCTUVJc1NVRkJNVUlzUTBGQkswSXNTVUZCTDBJc1JVRkJjVU1zUzBGQmNrTXNRMEZCTWtNc1EwRkJNME1zUlVGQk9FTXNRMEZCUXl4RFFVRXZReXhEUVVGUU8wRkJRMGdzVFVGR1JEczdRVUZKUVN4VFFVRkpMRTlCUVU4c1VVRkJVU3hKUVVGU0xFTkJRVmc3TzBGQlJVRXNXVUZCVHl4VFFVRlRMRkZCUVZRc1NVRkRTQ3hUUVVGVExGRkJSRTRzU1VGRlNDeFRRVUZUTEZOQlJrNHNTVUZIU0N4VFFVRlRMRkZCU0U0c1NVRkpTQ3hUUVVGVExFMUJTazRzU1VGTFNDeFRRVUZUTEZkQlRHSTdRVUZOU0RzN1FVRkZUU3hWUVVGVExGRkJRVlFzUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUk3UVVGQlJTeFpRVUZQTEVOQlFWQTdRVUZCVnl4Rk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRMUXk5RE5VSXNiMElzVjBGQlFTeHZRanM3UVVGRlZEczdPenRCUVVsQkxESkVRVUZaTEVsQlFWb3NSVUZCYTBJN1FVRkJRVHM3UVVGRFpEdEJRVU5CTEdOQlFVc3NTVUZCVEN4SFFVRlpMRWxCUVZvN1FVRkRRU3hqUVVGTExGTkJRVXdzUjBGQmFVSXNTMEZCU3l4bFFVRk1MRVZCUVdwQ08wRkJRMEVzWTBGQlN5eFRRVUZNTEVkQlFXbENMRVZCUVdwQ08wRkJRMGc3TzBGQlJVUTdPenM3T3pzN096SkRRVWxyUWp0QlFVTmtMRzlDUVVGUExFdEJRVXNzU1VGQlRDeEZRVUZRTzBGQlEwZzdPenRyUTBGRlVTeFJMRVZCUVZVN1FVRkRaaXhyUWtGQlN5eFRRVUZNTEVOQlFXVXNTVUZCWml4RFFVRnZRaXhSUVVGd1FqczdRVUZGUVN4dlFrRkJUeXhKUVVGUU8wRkJRMGc3T3pzd1EwRkZaMEk3UVVGRFlpeHBRa0ZCU1N4bFFVRmxMRXRCUVVzc1pVRkJUQ3hGUVVGdVFqdEJRVU5CTEdsQ1FVRkhMRXRCUVVzc1UwRkJUQ3hMUVVGdFFpeFpRVUYwUWl4RlFVRnZRenRCUVVGRk8wRkJRVk03TzBGQlJTOURMR2xDUVVGSkxGbEJRVmtzUzBGQlN5eFRRVUZ5UWp0QlFVTkJMR3RDUVVGTExGTkJRVXdzUjBGQmFVSXNXVUZCYWtJN08wRkJSVUVzYTBKQlFVc3NUVUZCVEN4RFFVRlpMRmxCUVZvc1JVRkJNRUk3UVVGRGRFSTdRVUZFYzBJc1kwRkJNVUk3UVVGSFNEczdPMnREUVVWbE8wRkJRVUVzZFVWQlFVNHNTVUZCVFR0QlFVRk9MSEZDUVVGTk8wRkJRVUU3TzBGQlExb3NhMEpCUVVzc1UwRkJUQ3hEUVVGbExFOUJRV1lzUTBGQmRVSTdRVUZCUVN4M1FrRkJXU3cwUlVGQldTeEpRVUZhTzBGQlFWbzdRVUZCUVN4alFVRjJRanRCUVVOSU96dEJRVVZFT3pzN096czdPenR0UTBGTGEwSTdRVUZEWkN4dFFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHhRa0ZCVml4RFFVRk9PMEZCUTBnN096czdPekpEUVVkVkxHOUNJaXdpWm1sc1pTSTZJbUZqZEdsMlpTMWxlSEJ5WlhOemFXOXVjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQjNaV0p3WVdOclZXNXBkbVZ5YzJGc1RXOWtkV3hsUkdWbWFXNXBkR2x2YmloeWIyOTBMQ0JtWVdOMGIzSjVLU0I3WEc1Y2RHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNBbmIySnFaV04wSnlsY2JseDBYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29LVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwWEc1Y2RGeDBaR1ZtYVc1bEtGd2lZV04wYVhabExXVjRjSEpsYzNOcGIyNXpYQ0lzSUZ0ZExDQm1ZV04wYjNKNUtUdGNibHgwWld4elpTQnBaaWgwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBaWGh3YjNKMGMxdGNJbUZqZEdsMlpTMWxlSEJ5WlhOemFXOXVjMXdpWFNBOUlHWmhZM1J2Y25rb0tUdGNibHgwWld4elpWeHVYSFJjZEhKdmIzUmJYQ0poWTNScGRtVXRaWGh3Y21WemMybHZibk5jSWwwZ1BTQm1ZV04wYjNKNUtDazdYRzU5S1NoMGFHbHpMQ0JtZFc1amRHbHZiaWdwSUh0Y2JuSmxkSFZ5YmlCY2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUIzWldKd1lXTnJMM1Z1YVhabGNuTmhiRTF2WkhWc1pVUmxabWx1YVhScGIyNWNiaUFxS2k4aUxDSWdYSFF2THlCVWFHVWdiVzlrZFd4bElHTmhZMmhsWEc0Z1hIUjJZWElnYVc1emRHRnNiR1ZrVFc5a2RXeGxjeUE5SUh0OU8xeHVYRzRnWEhRdkx5QlVhR1VnY21WeGRXbHlaU0JtZFc1amRHbHZibHh1SUZ4MFpuVnVZM1JwYjI0Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aHRiMlIxYkdWSlpDa2dlMXh1WEc0Z1hIUmNkQzh2SUVOb1pXTnJJR2xtSUcxdlpIVnNaU0JwY3lCcGJpQmpZV05vWlZ4dUlGeDBYSFJwWmlocGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFNsY2JpQmNkRngwWEhSeVpYUjFjbTRnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjB1Wlhod2IzSjBjenRjYmx4dUlGeDBYSFF2THlCRGNtVmhkR1VnWVNCdVpYY2diVzlrZFd4bElDaGhibVFnY0hWMElHbDBJR2x1ZEc4Z2RHaGxJR05oWTJobEtWeHVJRngwWEhSMllYSWdiVzlrZFd4bElEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMGdQU0I3WEc0Z1hIUmNkRngwWlhod2IzSjBjem9nZTMwc1hHNGdYSFJjZEZ4MGFXUTZJRzF2WkhWc1pVbGtMRnh1SUZ4MFhIUmNkR3h2WVdSbFpEb2dabUZzYzJWY2JpQmNkRngwZlR0Y2JseHVJRngwWEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNiaUJjZEZ4MGJXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1SUZ4MFhIUnRiMlIxYkdVdWJHOWhaR1ZrSUQwZ2RISjFaVHRjYmx4dUlGeDBYSFF2THlCU1pYUjFjbTRnZEdobElHVjRjRzl5ZEhNZ2IyWWdkR2hsSUcxdlpIVnNaVnh1SUZ4MFhIUnlaWFIxY200Z2JXOWtkV3hsTG1WNGNHOXlkSE03WEc0Z1hIUjlYRzVjYmx4dUlGeDBMeThnWlhod2IzTmxJSFJvWlNCdGIyUjFiR1Z6SUc5aWFtVmpkQ0FvWDE5M1pXSndZV05yWDIxdlpIVnNaWE5mWHlsY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YlNBOUlHMXZaSFZzWlhNN1hHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bElHTmhZMmhsWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbU1nUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6TzF4dVhHNGdYSFF2THlCZlgzZGxZbkJoWTJ0ZmNIVmliR2xqWDNCaGRHaGZYMXh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXdJRDBnWENKY0lqdGNibHh1SUZ4MEx5OGdURzloWkNCbGJuUnllU0J0YjJSMWJHVWdZVzVrSUhKbGRIVnliaUJsZUhCdmNuUnpYRzRnWEhSeVpYUjFjbTRnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlnd0tUdGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlIZGxZbkJoWTJzdlltOXZkSE4wY21Gd0lETXdZVFkwWkROaVltSTNaRFptTlRFeU5tTXlYRzRnS2lvdklpd2lMeThnVkU5RVR6b2daWGh3YjNObElHbHRjR3hsYldWdWRHRjBhVzl1SUhOMGNtRjBaV2RwWlhOY2NseHVaWGh3YjNKMElIc2dZV1Y0Y0hJZ2ZTQm1jbTl0SUNjdUwybHVkR1Z5Y0hKbGRHRjBhVzl1TDJsdWRHVnljSEpsZEdGMGFXOXVMV0ZqZEdsMlpTMWxlSEJ5WlhOemFXOXVjeTVxY3ljN1hISmNibHh5WEc1bGVIQnZjblFnZXlCQ1lYTmxRV04wYVhabFJYaHdjbVZ6YzJsdmJpQjlJR1p5YjIwZ0p5NHZZbUZ6WlM5aVlYTmxMV0ZqZEdsMlpTMWxlSEJ5WlhOemFXOXVjeTVxY3ljN1hISmNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDJGamRHbDJaUzFsZUhCeVpYTnphVzl1Y3k1cWMxeHVJQ29xTHlJc0ltbHRjRzl5ZENCSmJuUmxjbkJ5WlhSbGNpQm1jbTl0SUNjdUx5NHVMMkpoWW1Wc2MySmxjbWN2YW5OcGJuUmxjbkJ5WlhSbGNpOXBiblJsY25CeVpYUmxjaTVxY3ljN1hISmNibWx0Y0c5eWRDQlRkR0ZqYXlCbWNtOXRJQ2R6ZEdGamF5MWxjekl3TVRVdGJXOWtkV3hsY3ljN1hISmNibWx0Y0c5eWRDQjdJRXhwYzNSbGJtVnlJSDBnWm5KdmJTQW5MaTlzYVhOMFpXNWxjaTVxY3ljN1hISmNibWx0Y0c5eWRDQjdJRUpoYzJWQlkzUnBkbVZGZUhCeVpYTnphVzl1SUgwZ1puSnZiU0FuTGk4dUxpOWlZWE5sTDJKaGMyVXRZV04wYVhabExXVjRjSEpsYzNOcGIyNXpMbXB6Snp0Y2NseHVYSEpjYm1OdmJuTjBJRUZGV0ZCU1gxTlVRVU5MSUQwZ2JtVjNJRk4wWVdOcktDazdYSEpjYmx4eVhHNWpiR0Z6Y3lCSVlXNWtiR1Z5SUh0Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh5WEc1Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHVZMnhoYzNNZ1NXNTBaWEp3Y21WMFpYSkJZM1JwZG1WRmVIQnlaWE56YVc5dUlHVjRkR1Z1WkhNZ1FtRnpaVUZqZEdsMlpVVjRjSEpsYzNOcGIyNGdlMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHWjFibU1zSUhOamIzQmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2MzVndaWElvWm5WdVl5azdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMjl3WlNBOUlITmpiM0JsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNHVnlkSGxCWTJObGMzTnZjbk1nUFNCdVpYY2dVMlYwS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzV6ZEdGc2JFeHBjM1JsYm1WeWN5Z3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklGUlBSRTg2SUhKbGJXOTJaU0JwYm1ScGNtVmpkR2x2Ymx4eVhHNGdJQ0FnY0hKdmNHVnlkSGxCYzNOcFoyNWxaQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ob1pXTnJRVzVrVG05MGFXWjVLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjJiMnRsS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psVEdsemRHVnVaWEp6S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhVzV6ZEdGc2JFeHBjM1JsYm1WeWN5Z3BJSHRjY2x4dUlDQWdJQ0FnSUNCQlJWaFFVbDlUVkVGRFN5NTNhWFJvUld4bGJXVnVkQ2gwYUdsekxDQW9LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUVGamRHbDJaVVY0Y0hKbGMzTnBiMjVKYm5SbGNuQnlaWFJsY2k1eWRXNUJibVJTWlhSMWNtNG9kR2hwY3k1bWRXNWpMQ0IwYUdsekxuTmpiM0JsS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpXMXZkbVZNYVhOMFpXNWxjbk1vS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdaWEowZVVGalkyVnpjMjl5Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hCeWIzQmxjblI1UVdOalpYTnpiM0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkSGxCWTJObGMzTnZjaTV6Wld4bFkzUnBiMjVKZEdWdGN5NWtaV3hsZEdVb2RHaHBjeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3lrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdaWEowZVVGalkyVnpjMjl5Y3k1amJHVmhjaWdwTzF4eVhHNGdJQ0FnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1lXVjRjSElvWm5WdVl5d2djMk52Y0dVcElIc2djbVYwZFhKdUlHNWxkeUJKYm5SbGNuQnlaWFJsY2tGamRHbDJaVVY0Y0hKbGMzTnBiMjRvWm5WdVl5d2djMk52Y0dVcE95QjlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nUVdOMGFYWmxSWGh3Y21WemMybHZia2x1ZEdWeWNISmxkR1Z5SUdWNGRHVnVaSE1nU1c1MFpYSndjbVYwWlhJZ2UxeHlYRzVjY2x4dUlDQWdJSE4wWVhScFl5QnlkVzVCYm1SU1pYUjFjbTRvWm5WdVl5d2diM0IwVTJOdmNHVXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMk52Y0dVZ1BTQnZjSFJUWTI5d1pTQjhmQ0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYVNBOUlHNWxkeUJCWTNScGRtVkZlSEJ5WlhOemFXOXVTVzUwWlhKd2NtVjBaWElvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0IyWVhJZ2NtVjBkWEp1Vm1Gc2RXVWdQU0FvSkh0bWRXNWpMblJ2VTNSeWFXNW5LQ2w5S1NncE8yQXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDaHpaV3htTENCeWIyOTBVMk52Y0dVcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHpZMjl3WlNjc0lITmpiM0JsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLSE5qYjNCbEtTNW1iM0pGWVdOb0tDaHJLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2MyTnZjR1ZiYTEwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb2F5d2dkbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVjMlYwVUhKdmNHVnlkSGtvY205dmRGTmpiM0JsTENCckxDQnpaV3htTG1OeVpXRjBaVkJ6WlhWa2IwOWlhbVZqZENoMllXeDFaU2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVQwUlBPaUJrWld4bGRHVWdZWE1nZEdobElISmxiR1YyWVc1MElHZHNiMkpoYkNCdlltcGxZM1J6SUdOaGJpQmlaU0JwYm1abGNuSmxaQ0JpZVNCaGJtRnNlWE5wYm1jZ2RHaGxJR3h2WTJGc0lITmpiM0JsWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmJYQ0pmWDJ4MlZtRnlVbVZqYjNKa1pYSmNJaXdnWENKcVVYVmxjbmxjSWl3Z1hDSWtYQ0lzSUZ3aVgxd2lMQ0JjSW14cGRtVnNlVndpWFM1bWIzSkZZV05vS0NocktTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnYzJWc1ppNXpaWFJRY205d1pYSjBlU2h5YjI5MFUyTnZjR1VzSUdzc0lITmxiR1l1WTNKbFlYUmxVSE5sZFdSdlQySnFaV04wS0hkcGJtUnZkMXRyWFNrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJR2t1Y25WdUtDazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2t1YzNSaGRHVlRkR0ZqYTFzd1hTNXpZMjl3WlM1d2NtOXdaWEowYVdWekxuSmxkSFZ5YmxaaGJIVmxMblpoYkhWbFQyWW9LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCblpYUlFjbTl3WlhKMGVTaHZZbW9zSUc1aGJXVXBJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdiMkpxWldOMElEMGdiMkpxTG5aaGJIVmxUMllvS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNDQTlJRzVoYldVdWRtRnNkV1ZQWmlncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCTWFYTjBaVzVsY2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZDJGMFkyaFFjbTl3WlhKMGVTaHZZbXBsWTNRc0lIQnliM0FwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzVoWkdSSVlXNWtiR1Z5S0VGRldGQlNYMU5VUVVOTExuUnZjQ2dwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtZGxkRkJ5YjNCbGNuUjVLRzlpYWl3Z2JtRnRaU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2MzUmxjRU5oYkd4RmVIQnlaWE56YVc5dUtDNHVMbUZ5WjNNcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpMbk4wWVhSbFUzUmhZMnRiTUYwdVlYSm5kVzFsYm5SeklENGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblkyRnNiQ0JsZUhCeVpYTnphVzl1SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFluVm5aMlZ5TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MzUmhkR1ZUZEdGamF5QTlJSFJvYVhNdWMzUmhkR1ZUZEdGamF5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCemRHRjBaVk4wWVdOcld6QmRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsSUQwZ2MzUmhkR1V1Ym05a1pTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnVZeUE5SUhOMFlYUmxMbVoxYm1OZk8xeHlYRzVjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG5OMFpYQkRZV3hzUlhod2NtVnpjMmx2YmlncE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dWZWeHlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5cGJuUmxjbkJ5WlhSaGRHbHZiaTlwYm5SbGNuQnlaWFJoZEdsdmJpMWhZM1JwZG1VdFpYaHdjbVZ6YzJsdmJuTXVhbk5jYmlBcUtpOGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwydGxlWE5jSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMnRsZVhNdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YTJWNWN5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVQySnFaV04wTG10bGVYTTdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOXJaWGx6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ00xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z01Ua3VNUzR5TGpFMElFOWlhbVZqZEM1clpYbHpLRThwWEc1MllYSWdkRzlQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUNSclpYbHpJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWE5oY0NjcEtDZHJaWGx6Snl3Z1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR3RsZVhNb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa2EyVjVjeWgwYjA5aWFtVmpkQ2hwZENrcE8xeHVJQ0I5TzF4dWZTazdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05GeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z055NHhMakV6SUZSdlQySnFaV04wS0dGeVozVnRaVzUwS1Z4dWRtRnlJR1JsWm1sdVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pXWnBibVZrSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQ2hrWldacGJtVmtLR2wwS1NrN1hHNTlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBieTF2WW1wbFkzUXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0ExWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSXZMeUEzTGpJdU1TQlNaWEYxYVhKbFQySnFaV04wUTI5bGNtTnBZbXhsS0dGeVozVnRaVzUwS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUdsbUtHbDBJRDA5SUhWdVpHVm1hVzVsWkNsMGFISnZkeUJVZVhCbFJYSnliM0lvWENKRFlXNG5kQ0JqWVd4c0lHMWxkR2h2WkNCdmJpQWdYQ0lnS3lCcGRDazdYRzRnSUhKbGRIVnliaUJwZER0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyUmxabWx1WldRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTJYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5QXhPUzR4TGpJdU1UUWdMeUF4TlM0eUxqTXVNVFFnVDJKcVpXTjBMbXRsZVhNb1R5bGNiblpoY2lBa2EyVjVjeUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc0p5bGNiaUFnTENCbGJuVnRRblZuUzJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJWdWRXMHRZblZuTFd0bGVYTW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUFltcGxZM1F1YTJWNWN5QjhmQ0JtZFc1amRHbHZiaUJyWlhsektFOHBlMXh1SUNCeVpYUjFjbTRnSkd0bGVYTW9UeXdnWlc1MWJVSjFaMHRsZVhNcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXdGxlWE11YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBM1hHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0oyWVhJZ2FHRnpJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQmhjbkpoZVVsdVpHVjRUMllnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxcGJtTnNkV1JsY3ljcEtHWmhiSE5sS1Z4dUlDQXNJRWxGWDFCU1QxUlBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM05vWVhKbFpDMXJaWGtuS1NnblNVVmZVRkpQVkU4bktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXNJRzVoYldWektYdGNiaUFnZG1GeUlFOGdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDaHZZbXBsWTNRcFhHNGdJQ0FnTENCcElDQWdJQ0FnUFNBd1hHNGdJQ0FnTENCeVpYTjFiSFFnUFNCYlhWeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCbWIzSW9hMlY1SUdsdUlFOHBhV1lvYTJWNUlDRTlJRWxGWDFCU1QxUlBLV2hoY3loUExDQnJaWGtwSUNZbUlISmxjM1ZzZEM1d2RYTm9LR3RsZVNrN1hHNGdJQzh2SUVSdmJpZDBJR1Z1ZFcwZ1luVm5JQ1lnYUdsa1pHVnVJR3RsZVhOY2JpQWdkMmhwYkdVb2JtRnRaWE11YkdWdVozUm9JRDRnYVNscFppaG9ZWE1vVHl3Z2EyVjVJRDBnYm1GdFpYTmJhU3NyWFNrcGUxeHVJQ0FnSUg1aGNuSmhlVWx1WkdWNFQyWW9jbVZ6ZFd4MExDQnJaWGtwSUh4OElISmxjM1ZzZEM1d2RYTm9LR3RsZVNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc0xtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdPRnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdlMzB1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCclpYa3BlMXh1SUNCeVpYUjFjbTRnYUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNocGRDd2dhMlY1S1R0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaGhjeTVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURsY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJaTh2SUhSdklHbHVaR1Y0WldRZ2IySnFaV04wTENCMGIwOWlhbVZqZENCM2FYUm9JR1poYkd4aVlXTnJJR1p2Y2lCdWIyNHRZWEp5WVhrdGJHbHJaU0JGVXpNZ2MzUnlhVzVuYzF4dWRtRnlJRWxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGIySnFaV04wSnlsY2JpQWdMQ0JrWldacGJtVmtJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCSlQySnFaV04wS0dSbFptbHVaV1FvYVhRcEtUdGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFdsdlltcGxZM1F1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeE1GeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z1ptRnNiR0poWTJzZ1ptOXlJRzV2YmkxaGNuSmhlUzFzYVd0bElFVlRNeUJoYm1RZ2JtOXVMV1Z1ZFcxbGNtRmliR1VnYjJ4a0lGWTRJSE4wY21sdVozTmNiblpoY2lCamIyWWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIyWW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVDJKcVpXTjBLQ2Q2SnlrdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW9NQ2tnUHlCUFltcGxZM1FnT2lCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJqYjJZb2FYUXBJRDA5SUNkVGRISnBibWNuSUQ4Z2FYUXVjM0JzYVhRb0p5Y3BJRG9nVDJKcVpXTjBLR2wwS1R0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHZZbXBsWTNRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhNVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJSFJ2VTNSeWFXNW5JRDBnZTMwdWRHOVRkSEpwYm1jN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2RHOVRkSEpwYm1jdVkyRnNiQ2hwZENrdWMyeHBZMlVvT0N3Z0xURXBPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTI5bUxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVEpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpOHZJR1poYkhObElDMCtJRUZ5Y21GNUkybHVaR1Y0VDJaY2JpOHZJSFJ5ZFdVZ0lDMCtJRUZ5Y21GNUkybHVZMngxWkdWelhHNTJZWElnZEc5SlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCMGIwbHVaR1Y0SUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloSlUxOUpUa05NVlVSRlV5bDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdrZEdocGN5d2daV3dzSUdaeWIyMUpibVJsZUNsN1hHNGdJQ0FnZG1GeUlFOGdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDZ2tkR2hwY3lsY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ2RHOU1aVzVuZEdnb1R5NXNaVzVuZEdncFhHNGdJQ0FnSUNBc0lHbHVaR1Y0SUNBOUlIUnZTVzVrWlhnb1puSnZiVWx1WkdWNExDQnNaVzVuZEdncFhHNGdJQ0FnSUNBc0lIWmhiSFZsTzF4dUlDQWdJQzh2SUVGeWNtRjVJMmx1WTJ4MVpHVnpJSFZ6WlhNZ1UyRnRaVlpoYkhWbFdtVnlieUJsY1hWaGJHbDBlU0JoYkdkdmNtbDBhRzFjYmlBZ0lDQnBaaWhKVTE5SlRrTk1WVVJGVXlBbUppQmxiQ0FoUFNCbGJDbDNhR2xzWlNoc1pXNW5kR2dnUGlCcGJtUmxlQ2w3WEc0Z0lDQWdJQ0IyWVd4MVpTQTlJRTliYVc1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0JwWmloMllXeDFaU0FoUFNCMllXeDFaU2x5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0F2THlCQmNuSmhlU04wYjBsdVpHVjRJR2xuYm05eVpYTWdhRzlzWlhNc0lFRnljbUY1STJsdVkyeDFaR1Z6SUMwZ2JtOTBYRzRnSUNBZ2ZTQmxiSE5sSUdadmNpZzdiR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGFXWW9TVk5mU1U1RFRGVkVSVk1nZkh3Z2FXNWtaWGdnYVc0Z1R5bDdYRzRnSUNBZ0lDQnBaaWhQVzJsdVpHVjRYU0E5UFQwZ1pXd3BjbVYwZFhKdUlFbFRYMGxPUTB4VlJFVlRJSHg4SUdsdVpHVjRJSHg4SURBN1hHNGdJQ0FnZlNCeVpYUjFjbTRnSVVsVFgwbE9RMHhWUkVWVElDWW1JQzB4TzF4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVhKeVlYa3RhVzVqYkhWa1pYTXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4TTF4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnTnk0eExqRTFJRlJ2VEdWdVozUm9YRzUyWVhJZ2RHOUpiblJsWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcFhHNGdJQ3dnYldsdUlDQWdJQ0FnSUQwZ1RXRjBhQzV0YVc0N1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUdsMElENGdNQ0EvSUcxcGJpaDBiMGx1ZEdWblpYSW9hWFFwTENBd2VERm1abVptWm1abVptWm1abVptS1NBNklEQTdJQzh2SUhCdmR5Z3lMQ0ExTXlrZ0xTQXhJRDA5SURrd01EY3hPVGt5TlRRM05EQTVPVEZjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXeGxibWQwYUM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTBYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5QTNMakV1TkNCVWIwbHVkR1ZuWlhKY2JuWmhjaUJqWldsc0lDQTlJRTFoZEdndVkyVnBiRnh1SUNBc0lHWnNiMjl5SUQwZ1RXRjBhQzVtYkc5dmNqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYTk9ZVTRvYVhRZ1BTQXJhWFFwSUQ4Z01DQTZJQ2hwZENBK0lEQWdQeUJtYkc5dmNpQTZJR05sYVd3cEtHbDBLVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXbHVkR1ZuWlhJdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhOVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJSFJ2U1c1MFpXZGxjaUE5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1ZEdWblpYSW5LVnh1SUNBc0lHMWhlQ0FnSUNBZ0lDQTlJRTFoZEdndWJXRjRYRzRnSUN3Z2JXbHVJQ0FnSUNBZ0lEMGdUV0YwYUM1dGFXNDdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2x1WkdWNExDQnNaVzVuZEdncGUxeHVJQ0JwYm1SbGVDQTlJSFJ2U1c1MFpXZGxjaWhwYm1SbGVDazdYRzRnSUhKbGRIVnliaUJwYm1SbGVDQThJREFnUHlCdFlYZ29hVzVrWlhnZ0t5QnNaVzVuZEdnc0lEQXBJRG9nYldsdUtHbHVaR1Y0TENCc1pXNW5kR2dwTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRhVzVrWlhndWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhObHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJSE5vWVhKbFpDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkclpYbHpKeWxjYmlBZ0xDQjFhV1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdjbVYwZFhKdUlITm9ZWEpsWkZ0clpYbGRJSHg4SUNoemFHRnlaV1JiYTJWNVhTQTlJSFZwWkNoclpYa3BLVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOb1lYSmxaQzFyWlhrdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhOMXh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR2RzYjJKaGJDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dVMGhCVWtWRUlEMGdKMTlmWTI5eVpTMXFjMTl6YUdGeVpXUmZYeWRjYmlBZ0xDQnpkRzl5WlNBZ1BTQm5iRzlpWVd4YlUwaEJVa1ZFWFNCOGZDQW9aMnh2WW1Gc1cxTklRVkpGUkYwZ1BTQjdmU2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0d0bGVTbDdYRzRnSUhKbGRIVnliaUJ6ZEc5eVpWdHJaWGxkSUh4OElDaHpkRzl5WlZ0clpYbGRJRDBnZTMwcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVGhjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzk2Ykc5cGNtOWpheTlqYjNKbExXcHpMMmx6YzNWbGN5ODROaU5wYzNOMVpXTnZiVzFsYm5RdE1URTFOelU1TURJNFhHNTJZWElnWjJ4dlltRnNJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwZVhCbGIyWWdkMmx1Wkc5M0lDRTlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIZHBibVJ2ZHk1TllYUm9JRDA5SUUxaGRHaGNiaUFnUHlCM2FXNWtiM2NnT2lCMGVYQmxiMllnYzJWc1ppQWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQnpaV3htTGsxaGRHZ2dQVDBnVFdGMGFDQS9JSE5sYkdZZ09pQkdkVzVqZEdsdmJpZ25jbVYwZFhKdUlIUm9hWE1uS1NncE8xeHVhV1lvZEhsd1pXOW1JRjlmWnlBOVBTQW5iblZ0WW1WeUp5bGZYMmNnUFNCbmJHOWlZV3c3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1a1pXWmNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZloyeHZZbUZzTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UbGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5aaGNpQnBaQ0E5SURCY2JpQWdMQ0J3ZUNBOUlFMWhkR2d1Y21GdVpHOXRLQ2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0d0bGVTbDdYRzRnSUhKbGRIVnliaUFuVTNsdFltOXNLQ2N1WTI5dVkyRjBLR3RsZVNBOVBUMGdkVzVrWldacGJtVmtJRDhnSnljZ09pQnJaWGtzSUNjcFh5Y3NJQ2dySzJsa0lDc2djSGdwTG5SdlUzUnlhVzVuS0RNMktTazdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkxYVdRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlNRnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aUx5OGdTVVVnT0MwZ1pHOXVKM1FnWlc1MWJTQmlkV2NnYTJWNWMxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQW9YRzRnSUNkamIyNXpkSEoxWTNSdmNpeG9ZWE5QZDI1UWNtOXdaWEowZVN4cGMxQnliM1J2ZEhsd1pVOW1MSEJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsTEhSdlRHOWpZV3hsVTNSeWFXNW5MSFJ2VTNSeWFXNW5MSFpoYkhWbFQyWW5YRzRwTG5Od2JHbDBLQ2NzSnlrN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJWdWRXMHRZblZuTFd0bGVYTXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F5TVZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnYlc5emRDQlBZbXBsWTNRZ2JXVjBhRzlrY3lCaWVTQkZVellnYzJodmRXeGtJR0ZqWTJWd2RDQndjbWx0YVhScGRtVnpYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1kyOXlaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktWeHVJQ0FzSUdaaGFXeHpJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaExSVmtzSUdWNFpXTXBlMXh1SUNCMllYSWdabTRnSUQwZ0tHTnZjbVV1VDJKcVpXTjBJSHg4SUh0OUtWdExSVmxkSUh4OElFOWlhbVZqZEZ0TFJWbGRYRzRnSUNBZ0xDQmxlSEFnUFNCN2ZUdGNiaUFnWlhod1cwdEZXVjBnUFNCbGVHVmpLR1p1S1R0Y2JpQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lCbVlXbHNjeWhtZFc1amRHbHZiaWdwZXlCbWJpZ3hLVHNnZlNrc0lDZFBZbXBsWTNRbkxDQmxlSEFwTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFhOaGNDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREl5WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSjJZWElnWjJ4dlltRnNJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGNiaUFnTENCamRIZ2dJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqZEhnbktWeHVJQ0FzSUdocFpHVWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktWeHVJQ0FzSUZCU1QxUlBWRmxRUlNBOUlDZHdjbTkwYjNSNWNHVW5PMXh1WEc1MllYSWdKR1Y0Y0c5eWRDQTlJR1oxYm1OMGFXOXVLSFI1Y0dVc0lHNWhiV1VzSUhOdmRYSmpaU2w3WEc0Z0lIWmhjaUJKVTE5R1QxSkRSVVFnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVHWEc0Z0lDQWdMQ0JKVTE5SFRFOUNRVXdnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVIWEc0Z0lDQWdMQ0JKVTE5VFZFRlVTVU1nUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVUWEc0Z0lDQWdMQ0JKVTE5UVVrOVVUeUFnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVRWEc0Z0lDQWdMQ0JKVTE5Q1NVNUVJQ0FnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVDWEc0Z0lDQWdMQ0JKVTE5WFVrRlFJQ0FnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVYWEc0Z0lDQWdMQ0JsZUhCdmNuUnpJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5QmpiM0psSURvZ1kyOXlaVnR1WVcxbFhTQjhmQ0FvWTI5eVpWdHVZVzFsWFNBOUlIdDlLVnh1SUNBZ0lDd2daWGh3VUhKdmRHOGdJRDBnWlhod2IzSjBjMXRRVWs5VVQxUlpVRVZkWEc0Z0lDQWdMQ0IwWVhKblpYUWdJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5Qm5iRzlpWVd3Z09pQkpVMTlUVkVGVVNVTWdQeUJuYkc5aVlXeGJibUZ0WlYwZ09pQW9aMnh2WW1Gc1cyNWhiV1ZkSUh4OElIdDlLVnRRVWs5VVQxUlpVRVZkWEc0Z0lDQWdMQ0JyWlhrc0lHOTNiaXdnYjNWME8xeHVJQ0JwWmloSlUxOUhURTlDUVV3cGMyOTFjbU5sSUQwZ2JtRnRaVHRjYmlBZ1ptOXlLR3RsZVNCcGJpQnpiM1Z5WTJVcGUxeHVJQ0FnSUM4dklHTnZiblJoYVc1eklHbHVJRzVoZEdsMlpWeHVJQ0FnSUc5M2JpQTlJQ0ZKVTE5R1QxSkRSVVFnSmlZZ2RHRnlaMlYwSUNZbUlIUmhjbWRsZEZ0clpYbGRJQ0U5UFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZb2IzZHVJQ1ltSUd0bGVTQnBiaUJsZUhCdmNuUnpLV052Ym5ScGJuVmxPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQnVZWFJwZG1VZ2IzSWdjR0Z6YzJWa1hHNGdJQ0FnYjNWMElEMGdiM2R1SUQ4Z2RHRnlaMlYwVzJ0bGVWMGdPaUJ6YjNWeVkyVmJhMlY1WFR0Y2JpQWdJQ0F2THlCd2NtVjJaVzUwSUdkc2IySmhiQ0J3YjJ4c2RYUnBiMjRnWm05eUlHNWhiV1Z6Y0dGalpYTmNiaUFnSUNCbGVIQnZjblJ6VzJ0bGVWMGdQU0JKVTE5SFRFOUNRVXdnSmlZZ2RIbHdaVzltSUhSaGNtZGxkRnRyWlhsZElDRTlJQ2RtZFc1amRHbHZiaWNnUHlCemIzVnlZMlZiYTJWNVhWeHVJQ0FnSUM4dklHSnBibVFnZEdsdFpYSnpJSFJ2SUdkc2IySmhiQ0JtYjNJZ1kyRnNiQ0JtY205dElHVjRjRzl5ZENCamIyNTBaWGgwWEc0Z0lDQWdPaUJKVTE5Q1NVNUVJQ1ltSUc5M2JpQS9JR04wZUNodmRYUXNJR2RzYjJKaGJDbGNiaUFnSUNBdkx5QjNjbUZ3SUdkc2IySmhiQ0JqYjI1emRISjFZM1J2Y25NZ1ptOXlJSEJ5WlhabGJuUWdZMmhoYm1kbElIUm9aVzBnYVc0Z2JHbGljbUZ5ZVZ4dUlDQWdJRG9nU1ZOZlYxSkJVQ0FtSmlCMFlYSm5aWFJiYTJWNVhTQTlQU0J2ZFhRZ1B5QW9ablZ1WTNScGIyNG9ReWw3WEc0Z0lDQWdJQ0IyWVhJZ1JpQTlJR1oxYm1OMGFXOXVLR0VzSUdJc0lHTXBlMXh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpJR2x1YzNSaGJtTmxiMllnUXlsN1hHNGdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdncGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXdPaUJ5WlhSMWNtNGdibVYzSUVNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQnVaWGNnUXloaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJRzVsZHlCREtHRXNJR0lwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdjbVYwZFhKdUlHNWxkeUJES0dFc0lHSXNJR01wTzF4dUlDQWdJQ0FnSUNCOUlISmxkSFZ5YmlCRExtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnUmx0UVVrOVVUMVJaVUVWZElEMGdRMXRRVWs5VVQxUlpVRVZkTzF4dUlDQWdJQ0FnY21WMGRYSnVJRVk3WEc0Z0lDQWdMeThnYldGclpTQnpkR0YwYVdNZ2RtVnljMmx2Ym5NZ1ptOXlJSEJ5YjNSdmRIbHdaU0J0WlhSb2IyUnpYRzRnSUNBZ2ZTa29iM1YwS1NBNklFbFRYMUJTVDFSUElDWW1JSFI1Y0dWdlppQnZkWFFnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR04wZUNoR2RXNWpkR2x2Ymk1allXeHNMQ0J2ZFhRcElEb2diM1YwTzF4dUlDQWdJQzh2SUdWNGNHOXlkQ0J3Y205MGJ5QnRaWFJvYjJSeklIUnZJR052Y21VdUpVTlBUbE5VVWxWRFZFOVNKUzV0WlhSb2IyUnpMaVZPUVUxRkpWeHVJQ0FnSUdsbUtFbFRYMUJTVDFSUEtYdGNiaUFnSUNBZ0lDaGxlSEJ2Y25SekxuWnBjblIxWVd3Z2ZId2dLR1Y0Y0c5eWRITXVkbWx5ZEhWaGJDQTlJSHQ5S1NsYmEyVjVYU0E5SUc5MWREdGNiaUFnSUNBZ0lDOHZJR1Y0Y0c5eWRDQndjbTkwYnlCdFpYUm9iMlJ6SUhSdklHTnZjbVV1SlVOUFRsTlVVbFZEVkU5U0pTNXdjbTkwYjNSNWNHVXVKVTVCVFVVbFhHNGdJQ0FnSUNCcFppaDBlWEJsSUNZZ0pHVjRjRzl5ZEM1U0lDWW1JR1Y0Y0ZCeWIzUnZJQ1ltSUNGbGVIQlFjbTkwYjF0clpYbGRLV2hwWkdVb1pYaHdVSEp2ZEc4c0lHdGxlU3dnYjNWMEtUdGNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNHZMeUIwZVhCbElHSnBkRzFoY0Z4dUpHVjRjRzl5ZEM1R0lEMGdNVHNnSUNBdkx5Qm1iM0pqWldSY2JpUmxlSEJ2Y25RdVJ5QTlJREk3SUNBZ0x5OGdaMnh2WW1Gc1hHNGtaWGh3YjNKMExsTWdQU0EwT3lBZ0lDOHZJSE4wWVhScFkxeHVKR1Y0Y0c5eWRDNVFJRDBnT0RzZ0lDQXZMeUJ3Y205MGIxeHVKR1Y0Y0c5eWRDNUNJRDBnTVRZN0lDQXZMeUJpYVc1a1hHNGtaWGh3YjNKMExsY2dQU0F6TWpzZ0lDOHZJSGR5WVhCY2JpUmxlSEJ2Y25RdVZTQTlJRFkwT3lBZ0x5OGdjMkZtWlZ4dUpHVjRjRzl5ZEM1U0lEMGdNVEk0T3lBdkx5QnlaV0ZzSUhCeWIzUnZJRzFsZEdodlpDQm1iM0lnWUd4cFluSmhjbmxnSUZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBa1pYaHdiM0owTzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlsZUhCdmNuUXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F5TTF4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lkbUZ5SUdOdmNtVWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQyWlhKemFXOXVPaUFuTWk0MExqQW5mVHRjYm1sbUtIUjVjR1Z2WmlCZlgyVWdQVDBnSjI1MWJXSmxjaWNwWDE5bElEMGdZMjl5WlRzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJtUmxabHh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpiM0psTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01qUmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSWk4dklHOXdkR2x2Ym1Gc0lDOGdjMmx0Y0d4bElHTnZiblJsZUhRZ1ltbHVaR2x1WjF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOMGVDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREkxWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2FXWW9kSGx3Wlc5bUlHbDBJQ0U5SUNkbWRXNWpkR2x2YmljcGRHaHliM2NnVkhsd1pVVnljbTl5S0dsMElDc2dKeUJwY3lCdWIzUWdZU0JtZFc1amRHbHZiaUVuS1R0Y2JpQWdjbVYwZFhKdUlHbDBPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVMxbWRXNWpkR2x2Ymk1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlESTJYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdaRkFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QTlJSEpsY1hWcGNtVW9KeTR2WDNCeWIzQmxjblI1TFdSbGMyTW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYTJWNUxDQjJZV3gxWlNsN1hHNGdJSEpsZEhWeWJpQmtVQzVtS0c5aWFtVmpkQ3dnYTJWNUxDQmpjbVZoZEdWRVpYTmpLREVzSUhaaGJIVmxLU2s3WEc1OUlEb2dablZ1WTNScGIyNG9iMkpxWldOMExDQnJaWGtzSUhaaGJIVmxLWHRjYmlBZ2IySnFaV04wVzJ0bGVWMGdQU0IyWVd4MVpUdGNiaUFnY21WMGRYSnVJRzlpYW1WamREdGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmhwWkdVdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlOMXh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JKUlRoZlJFOU5YMFJGUmtsT1JTQTlJSEpsY1hWcGNtVW9KeTR2WDJsbE9DMWtiMjB0WkdWbWFXNWxKeWxjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFhCeWFXMXBkR2wyWlNjcFhHNGdJQ3dnWkZBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrN1hHNWNibVY0Y0c5eWRITXVaaUE5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnUHlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa2dPaUJtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaFBMQ0JRTENCQmRIUnlhV0oxZEdWektYdGNiaUFnWVc1UFltcGxZM1FvVHlrN1hHNGdJRkFnUFNCMGIxQnlhVzFwZEdsMlpTaFFMQ0IwY25WbEtUdGNiaUFnWVc1UFltcGxZM1FvUVhSMGNtbGlkWFJsY3lrN1hHNGdJR2xtS0VsRk9GOUVUMDFmUkVWR1NVNUZLWFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJR1JRS0U4c0lGQXNJRUYwZEhKcFluVjBaWE1wTzF4dUlDQjlJR05oZEdOb0tHVXBleUF2S2lCbGJYQjBlU0FxTHlCOVhHNGdJR2xtS0NkblpYUW5JR2x1SUVGMGRISnBZblYwWlhNZ2ZId2dKM05sZENjZ2FXNGdRWFIwY21saWRYUmxjeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMEZqWTJWemMyOXljeUJ1YjNRZ2MzVndjRzl5ZEdWa0lTY3BPMXh1SUNCcFppZ25kbUZzZFdVbklHbHVJRUYwZEhKcFluVjBaWE1wVDF0UVhTQTlJRUYwZEhKcFluVjBaWE11ZG1Gc2RXVTdYRzRnSUhKbGRIVnliaUJQTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdSd0xtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNamhjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJR2xtS0NGcGMwOWlhbVZqZENocGRDa3BkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHbDBJQ3NnSnlCcGN5QnViM1FnWVc0Z2IySnFaV04wSVNjcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aGJpMXZZbXBsWTNRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlPVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdhWFFnUFQwOUlDZHZZbXBsWTNRbklEOGdhWFFnSVQwOUlHNTFiR3dnT2lCMGVYQmxiMllnYVhRZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXpNRnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBaGNtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBbUppQWhjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSEpsY1hWcGNtVW9KeTR2WDJSdmJTMWpjbVZoZEdVbktTZ25aR2wySnlrc0lDZGhKeXdnZTJkbGREb2dablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJRGM3SUgxOUtTNWhJQ0U5SURjN1hHNTlLVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhV1U0TFdSdmJTMWtaV1pwYm1VdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXpNVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aUx5OGdWR2hoYm1zbmN5QkpSVGdnWm05eUlHaHBjeUJtZFc1dWVTQmtaV1pwYm1WUWNtOXdaWEowZVZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBaGNtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIdDlMQ0FuWVNjc0lIdG5aWFE2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlBM095QjlmU2t1WVNBaFBTQTNPMXh1ZlNrN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJSbGMyTnlhWEIwYjNKekxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNekpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1pYaGxZeWw3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlDRWhaWGhsWXlncE8xeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTltWVdsc2N5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRE16WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSjJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHUnZZM1Z0Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWt1Wkc5amRXMWxiblJjYmlBZ0x5OGdhVzRnYjJ4a0lFbEZJSFI1Y0dWdlppQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwSUdseklDZHZZbXBsWTNRblhHNGdJQ3dnYVhNZ1BTQnBjMDlpYW1WamRDaGtiMk4xYldWdWRDa2dKaVlnYVhOUFltcGxZM1FvWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDazdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlHbHpJRDhnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaHBkQ2tnT2lCN2ZUdGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlJ2YlMxamNtVmhkR1V1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBek5GeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z055NHhMakVnVkc5UWNtbHRhWFJwZG1Vb2FXNXdkWFFnV3l3Z1VISmxabVZ5Y21Wa1ZIbHdaVjBwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNiaTh2SUdsdWMzUmxZV1FnYjJZZ2RHaGxJRVZUTmlCemNHVmpJSFpsY25OcGIyNHNJSGRsSUdScFpHNG5kQ0JwYlhCc1pXMWxiblFnUUVCMGIxQnlhVzFwZEdsMlpTQmpZWE5sWEc0dkx5QmhibVFnZEdobElITmxZMjl1WkNCaGNtZDFiV1Z1ZENBdElHWnNZV2NnTFNCd2NtVm1aWEp5WldRZ2RIbHdaU0JwY3lCaElITjBjbWx1WjF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDd2dVeWw3WEc0Z0lHbG1LQ0ZwYzA5aWFtVmpkQ2hwZENrcGNtVjBkWEp1SUdsME8xeHVJQ0IyWVhJZ1ptNHNJSFpoYkR0Y2JpQWdhV1lvVXlBbUppQjBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRHOVRkSEpwYm1jcElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtIWmhiQ0E5SUdadUxtTmhiR3dvYVhRcEtTbHlaWFIxY200Z2RtRnNPMXh1SUNCcFppaDBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRtRnNkV1ZQWmlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzRnSUdsbUtDRlRJQ1ltSUhSNWNHVnZaaUFvWm00Z1BTQnBkQzUwYjFOMGNtbHVaeWtnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYVhOUFltcGxZM1FvZG1Gc0lEMGdabTR1WTJGc2JDaHBkQ2twS1hKbGRIVnliaUIyWVd3N1hHNGdJSFJvY205M0lGUjVjR1ZGY25KdmNpaGNJa05oYmlkMElHTnZiblpsY25RZ2IySnFaV04wSUhSdklIQnlhVzFwZEdsMlpTQjJZV3gxWlZ3aUtUdGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFhCeWFXMXBkR2wyWlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlETTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dKcGRHMWhjQ3dnZG1Gc2RXVXBlMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJR1Z1ZFcxbGNtRmliR1VnSURvZ0lTaGlhWFJ0WVhBZ0ppQXhLU3hjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUNFb1ltbDBiV0Z3SUNZZ01pa3NYRzRnSUNBZ2QzSnBkR0ZpYkdVZ0lDQWdPaUFoS0dKcGRHMWhjQ0FtSURRcExGeHVJQ0FnSUhaaGJIVmxJQ0FnSUNBZ0lEb2dkbUZzZFdWY2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNCeWIzQmxjblI1TFdSbGMyTXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F6Tmx4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNibVY0Y0c5eWRITXVYMTlsYzAxdlpIVnNaU0E5SUhSeWRXVTdYRzVjYm5aaGNpQmZaMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQnlaWEYxYVhKbEtGd2lMaTR2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLVHRjYmx4dWRtRnlJRjluWlhSUWNtOTBiM1I1Y0dWUFpqSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOW5aWFJRY205MGIzUjVjR1ZQWmlrN1hHNWNiblpoY2lCZloyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNsd2lLVHRjYmx4dWRtRnlJRjluWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSXlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnWjJWMEtHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrc0lISmxZMlZwZG1WeUtTQjdYRzRnSUdsbUlDaHZZbXBsWTNRZ1BUMDlJRzUxYkd3cElHOWlhbVZqZENBOUlFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pUdGNiaUFnZG1GeUlHUmxjMk1nUFNBb01Dd2dYMmRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNqSXVaR1ZtWVhWc2RDa29iMkpxWldOMExDQndjbTl3WlhKMGVTazdYRzVjYmlBZ2FXWWdLR1JsYzJNZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSFpoY2lCd1lYSmxiblFnUFNBb01Dd2dYMmRsZEZCeWIzUnZkSGx3WlU5bU1pNWtaV1poZFd4MEtTaHZZbXBsWTNRcE8xeHVYRzRnSUNBZ2FXWWdLSEJoY21WdWRDQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR2RsZENod1lYSmxiblFzSUhCeWIzQmxjblI1TENCeVpXTmxhWFpsY2lrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLRndpZG1Gc2RXVmNJaUJwYmlCa1pYTmpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHUmxjMk11ZG1Gc2RXVTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUdkbGRIUmxjaUE5SUdSbGMyTXVaMlYwTzF4dVhHNGdJQ0FnYVdZZ0tHZGxkSFJsY2lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCblpYUjBaWEl1WTJGc2JDaHlaV05sYVhabGNpazdYRzRnSUgxY2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJkbGRDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRE0zWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJkbGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F6T0Z4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF3Y205MGIzUjVjR1V0YjJZbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGs5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFpqdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXpPVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aUx5OGdNVGt1TVM0eUxqa2dUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0U4cFhHNTJZWElnZEc5UFltcGxZM1FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENBa1oyVjBVSEp2ZEc5MGVYQmxUMllnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWs3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXpZWEFuS1NnbloyVjBVSEp2ZEc5MGVYQmxUMlluTENCbWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaMlYwVUhKdmRHOTBlWEJsVDJZb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa1oyVjBVSEp2ZEc5MGVYQmxUMllvZEc5UFltcGxZM1FvYVhRcEtUdGNiaUFnZlR0Y2JuMHBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlppNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRFF3WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSXZMeUF4T1M0eExqSXVPU0F2SURFMUxqSXVNeTR5SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaFBLVnh1ZG1GeUlHaGhjeUFnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z1NVVmZVRkpQVkU4Z0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1F0YTJWNUp5a29KMGxGWDFCU1QxUlBKeWxjYmlBZ0xDQlBZbXBsWTNSUWNtOTBieUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1U3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1JSHg4SUdaMWJtTjBhVzl1S0U4cGUxeHVJQ0JQSUQwZ2RHOVBZbXBsWTNRb1R5azdYRzRnSUdsbUtHaGhjeWhQTENCSlJWOVFVazlVVHlrcGNtVjBkWEp1SUU5YlNVVmZVRkpQVkU5ZE8xeHVJQ0JwWmloMGVYQmxiMllnVHk1amIyNXpkSEoxWTNSdmNpQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlFOGdhVzV6ZEdGdVkyVnZaaUJQTG1OdmJuTjBjblZqZEc5eUtYdGNiaUFnSUNCeVpYUjFjbTRnVHk1amIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVTdYRzRnSUgwZ2NtVjBkWEp1SUU4Z2FXNXpkR0Z1WTJWdlppQlBZbXBsWTNRZ1B5QlBZbXBsWTNSUWNtOTBieUE2SUc1MWJHdzdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaM0J2TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05ERmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZXlCY0ltUmxabUYxYkhSY0lqb2djbVZ4ZFdseVpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlYQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0EwTWx4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpY3BPMXh1ZG1GeUlDUlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTbDdYRzRnSUhKbGRIVnliaUFrVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHBkQ3dnYTJWNUtUdGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzluWlhRdGIzZHVMWEJ5YjNCbGNuUjVMV1JsYzJOeWFYQjBiM0l1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBME0xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z01Ua3VNUzR5TGpZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhQTENCUUtWeHVkbUZ5SUhSdlNVOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktTNW1PMXh1WEc1eVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGMyRndKeWtvSjJkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWNzSUdaMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2FYUXNJR3RsZVNsN1hHNGdJQ0FnY21WMGRYSnVJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9kRzlKVDJKcVpXTjBLR2wwS1N3Z2EyVjVLVHRjYmlBZ2ZUdGNibjBwTzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05EUmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5aaGNpQndTVVVnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXdhV1VuS1Z4dUlDQXNJR055WldGMFpVUmxjMk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY0hKdmNHVnlkSGt0WkdWell5Y3BYRzRnSUN3Z2RHOUpUMkpxWldOMElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFhCeWFXMXBkR2wyWlNjcFhHNGdJQ3dnYUdGeklDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh1SUNBc0lFbEZPRjlFVDAxZlJFVkdTVTVGSUQwZ2NtVnhkV2x5WlNnbkxpOWZhV1U0TFdSdmJTMWtaV1pwYm1VbktWeHVJQ0FzSUdkUFVFUWdJQ0FnSUNBZ0lDQWdJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNqdGNibHh1Wlhod2IzSjBjeTVtSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBL0lHZFBVRVFnT2lCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvVHl3Z1VDbDdYRzRnSUU4Z1BTQjBiMGxQWW1wbFkzUW9UeWs3WEc0Z0lGQWdQU0IwYjFCeWFXMXBkR2wyWlNoUUxDQjBjblZsS1R0Y2JpQWdhV1lvU1VVNFgwUlBUVjlFUlVaSlRrVXBkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdaMDlRUkNoUExDQlFLVHRjYmlBZ2ZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dUlDQnBaaWhvWVhNb1R5d2dVQ2twY21WMGRYSnVJR055WldGMFpVUmxjMk1vSVhCSlJTNW1MbU5oYkd3b1R5d2dVQ2tzSUU5YlVGMHBPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0dRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTBOVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aVpYaHdiM0owY3k1bUlEMGdlMzB1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzF3YVdVdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTBObHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNObGRGd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXpaWFF1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBME4xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpY21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuUnZMWE4wY21sdVp5Y3BPMXh1Y21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TGk5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1VuS1R0Y2JuSmxjWFZwY21Vb0p5NHVMMjF2WkhWc1pYTXZaWE0yTG5ObGRDY3BPMXh1Y21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5bGN6Y3VjMlYwTG5SdkxXcHpiMjRuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZiVzlrZFd4bGN5OWZZMjl5WlNjcExsTmxkRHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzJWMExtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdORGhjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtZWFFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXRjBKeWtvZEhKMVpTazdYRzVjYmk4dklESXhMakV1TXk0eU55QlRkSEpwYm1jdWNISnZkRzkwZVhCbFcwQkFhWFJsY21GMGIzSmRLQ2xjYm5KbGNYVnBjbVVvSnk0dlgybDBaWEl0WkdWbWFXNWxKeWtvVTNSeWFXNW5MQ0FuVTNSeWFXNW5KeXdnWm5WdVkzUnBiMjRvYVhSbGNtRjBaV1FwZTF4dUlDQjBhR2x6TGw5MElEMGdVM1J5YVc1bktHbDBaWEpoZEdWa0tUc2dMeThnZEdGeVoyVjBYRzRnSUhSb2FYTXVYMmtnUFNBd095QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnVaWGgwSUdsdVpHVjRYRzR2THlBeU1TNHhMalV1TWk0eElDVlRkSEpwYm1kSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNVdWJtVjRkQ2dwWEc1OUxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNCMllYSWdUeUFnSUNBZ1BTQjBhR2x6TGw5MFhHNGdJQ0FnTENCcGJtUmxlQ0E5SUhSb2FYTXVYMmxjYmlBZ0lDQXNJSEJ2YVc1ME8xeHVJQ0JwWmlocGJtUmxlQ0ErUFNCUExteGxibWQwYUNseVpYUjFjbTRnZTNaaGJIVmxPaUIxYm1SbFptbHVaV1FzSUdSdmJtVTZJSFJ5ZFdWOU8xeHVJQ0J3YjJsdWRDQTlJQ1JoZENoUExDQnBibVJsZUNrN1hHNGdJSFJvYVhNdVgya2dLejBnY0c5cGJuUXViR1Z1WjNSb08xeHVJQ0J5WlhSMWNtNGdlM1poYkhWbE9pQndiMmx1ZEN3Z1pHOXVaVG9nWm1Gc2MyVjlPMXh1ZlNrN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2k1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEVXdYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdkRzlKYm5SbFoyVnlJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzUwWldkbGNpY3BYRzRnSUN3Z1pHVm1hVzVsWkNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWbWFXNWxaQ2NwTzF4dUx5OGdkSEoxWlNBZ0xUNGdVM1J5YVc1bkkyRjBYRzR2THlCbVlXeHpaU0F0UGlCVGRISnBibWNqWTI5a1pWQnZhVzUwUVhSY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1ZFOWZVMVJTU1U1SEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLSFJvWVhRc0lIQnZjeWw3WEc0Z0lDQWdkbUZ5SUhNZ1BTQlRkSEpwYm1jb1pHVm1hVzVsWkNoMGFHRjBLU2xjYmlBZ0lDQWdJQ3dnYVNBOUlIUnZTVzUwWldkbGNpaHdiM01wWEc0Z0lDQWdJQ0FzSUd3Z1BTQnpMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQmhMQ0JpTzF4dUlDQWdJR2xtS0drZ1BDQXdJSHg4SUdrZ1BqMGdiQ2x5WlhSMWNtNGdWRTlmVTFSU1NVNUhJRDhnSnljZ09pQjFibVJsWm1sdVpXUTdYRzRnSUNBZ1lTQTlJSE11WTJoaGNrTnZaR1ZCZENocEtUdGNiaUFnSUNCeVpYUjFjbTRnWVNBOElEQjRaRGd3TUNCOGZDQmhJRDRnTUhoa1ltWm1JSHg4SUdrZ0t5QXhJRDA5UFNCc0lIeDhJQ2hpSUQwZ2N5NWphR0Z5UTI5a1pVRjBLR2tnS3lBeEtTa2dQQ0F3ZUdSak1EQWdmSHdnWWlBK0lEQjRaR1ptWmx4dUlDQWdJQ0FnUHlCVVQxOVRWRkpKVGtjZ1B5QnpMbU5vWVhKQmRDaHBLU0E2SUdGY2JpQWdJQ0FnSURvZ1ZFOWZVMVJTU1U1SElEOGdjeTV6YkdsalpTaHBMQ0JwSUNzZ01pa2dPaUFvWVNBdElEQjRaRGd3TUNBOFBDQXhNQ2tnS3lBb1lpQXRJREI0WkdNd01Da2dLeUF3ZURFd01EQXdPMXh1SUNCOU8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM1J5YVc1bkxXRjBMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTlRGY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJNU1VKU1FWSlpJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWxjYmlBZ0xDQm9hV1JsSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQkpkR1Z5WVhSdmNuTWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhKaGRHOXljeWNwWEc0Z0lDd2dKR2wwWlhKRGNtVmhkR1VnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxXTnlaV0YwWlNjcFhHNGdJQ3dnYzJWMFZHOVRkSEpwYm1kVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnWjJWMFVISnZkRzkwZVhCbFQyWWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjNCdkp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkcGRHVnlZWFJ2Y2ljcFhHNGdJQ3dnUWxWSFIxa2dJQ0FnSUNBZ0lDQWdQU0FoS0Z0ZExtdGxlWE1nSmlZZ0oyNWxlSFFuSUdsdUlGdGRMbXRsZVhNb0tTa2dMeThnVTJGbVlYSnBJR2hoY3lCaWRXZG5lU0JwZEdWeVlYUnZjbk1nZHk5dklHQnVaWGgwWUZ4dUlDQXNJRVpHWDBsVVJWSkJWRTlTSUNBZ0lEMGdKMEJBYVhSbGNtRjBiM0luWEc0Z0lDd2dTMFZaVXlBZ0lDQWdJQ0FnSUNBZ1BTQW5hMlY1Y3lkY2JpQWdMQ0JXUVV4VlJWTWdJQ0FnSUNBZ0lDQTlJQ2QyWVd4MVpYTW5PMXh1WEc1MllYSWdjbVYwZFhKdVZHaHBjeUE5SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCMGFHbHpPeUI5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFSmhjMlVzSUU1QlRVVXNJRU52Ym5OMGNuVmpkRzl5TENCdVpYaDBMQ0JFUlVaQlZVeFVMQ0JKVTE5VFJWUXNJRVpQVWtORlJDbDdYRzRnSUNScGRHVnlRM0psWVhSbEtFTnZibk4wY25WamRHOXlMQ0JPUVUxRkxDQnVaWGgwS1R0Y2JpQWdkbUZ5SUdkbGRFMWxkR2h2WkNBOUlHWjFibU4wYVc5dUtHdHBibVFwZTF4dUlDQWdJR2xtS0NGQ1ZVZEhXU0FtSmlCcmFXNWtJR2x1SUhCeWIzUnZLWEpsZEhWeWJpQndjbTkwYjF0cmFXNWtYVHRjYmlBZ0lDQnpkMmwwWTJnb2EybHVaQ2w3WEc0Z0lDQWdJQ0JqWVhObElFdEZXVk02SUhKbGRIVnliaUJtZFc1amRHbHZiaUJyWlhsektDbDdJSEpsZEhWeWJpQnVaWGNnUTI5dWMzUnlkV04wYjNJb2RHaHBjeXdnYTJsdVpDazdJSDA3WEc0Z0lDQWdJQ0JqWVhObElGWkJURlZGVXpvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhaaGJIVmxjeWdwZXlCeVpYUjFjbTRnYm1WM0lFTnZibk4wY25WamRHOXlLSFJvYVhNc0lHdHBibVFwT3lCOU8xeHVJQ0FnSUgwZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdWdWRISnBaWE1vS1hzZ2NtVjBkWEp1SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWgwYUdsekxDQnJhVzVrS1RzZ2ZUdGNiaUFnZlR0Y2JpQWdkbUZ5SUZSQlJ5QWdJQ0FnSUNBZ1BTQk9RVTFGSUNzZ0p5QkpkR1Z5WVhSdmNpZGNiaUFnSUNBc0lFUkZSbDlXUVV4VlJWTWdQU0JFUlVaQlZVeFVJRDA5SUZaQlRGVkZVMXh1SUNBZ0lDd2dWa0ZNVlVWVFgwSlZSeUE5SUdaaGJITmxYRzRnSUNBZ0xDQndjbTkwYnlBZ0lDQWdJRDBnUW1GelpTNXdjbTkwYjNSNWNHVmNiaUFnSUNBc0lDUnVZWFJwZG1VZ0lDQWdQU0J3Y205MGIxdEpWRVZTUVZSUFVsMGdmSHdnY0hKdmRHOWJSa1pmU1ZSRlVrRlVUMUpkSUh4OElFUkZSa0ZWVEZRZ0ppWWdjSEp2ZEc5YlJFVkdRVlZNVkYxY2JpQWdJQ0FzSUNSa1pXWmhkV3gwSUNBZ1BTQWtibUYwYVhabElIeDhJR2RsZEUxbGRHaHZaQ2hFUlVaQlZVeFVLVnh1SUNBZ0lDd2dKR1Z1ZEhKcFpYTWdJQ0E5SUVSRlJrRlZURlFnUHlBaFJFVkdYMVpCVEZWRlV5QS9JQ1JrWldaaGRXeDBJRG9nWjJWMFRXVjBhRzlrS0NkbGJuUnlhV1Z6SnlrZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBc0lDUmhibmxPWVhScGRtVWdQU0JPUVUxRklEMDlJQ2RCY25KaGVTY2dQeUJ3Y205MGJ5NWxiblJ5YVdWeklIeDhJQ1J1WVhScGRtVWdPaUFrYm1GMGFYWmxYRzRnSUNBZ0xDQnRaWFJvYjJSekxDQnJaWGtzSUVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTzF4dUlDQXZMeUJHYVhnZ2JtRjBhWFpsWEc0Z0lHbG1LQ1JoYm5sT1lYUnBkbVVwZTF4dUlDQWdJRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxJRDBnWjJWMFVISnZkRzkwZVhCbFQyWW9KR0Z1ZVU1aGRHbDJaUzVqWVd4c0tHNWxkeUJDWVhObEtTazdYRzRnSUNBZ2FXWW9TWFJsY21GMGIzSlFjbTkwYjNSNWNHVWdJVDA5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1VwZTF4dUlDQWdJQ0FnTHk4Z1UyVjBJRUJBZEc5VGRISnBibWRVWVdjZ2RHOGdibUYwYVhabElHbDBaWEpoZEc5eWMxeHVJQ0FnSUNBZ2MyVjBWRzlUZEhKcGJtZFVZV2NvU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUZSQlJ5d2dkSEoxWlNrN1hHNGdJQ0FnSUNBdkx5Qm1hWGdnWm05eUlITnZiV1VnYjJ4a0lHVnVaMmx1WlhOY2JpQWdJQ0FnSUdsbUtDRk1TVUpTUVZKWklDWW1JQ0ZvWVhNb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVc0lFbFVSVkpCVkU5U0tTbG9hV1JsS0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCSlZFVlNRVlJQVWl3Z2NtVjBkWEp1VkdocGN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lDOHZJR1pwZUNCQmNuSmhlU043ZG1Gc2RXVnpMQ0JBUUdsMFpYSmhkRzl5ZlM1dVlXMWxJR2x1SUZZNElDOGdSa1pjYmlBZ2FXWW9SRVZHWDFaQlRGVkZVeUFtSmlBa2JtRjBhWFpsSUNZbUlDUnVZWFJwZG1VdWJtRnRaU0FoUFQwZ1ZrRk1WVVZUS1h0Y2JpQWdJQ0JXUVV4VlJWTmZRbFZISUQwZ2RISjFaVHRjYmlBZ0lDQWtaR1ZtWVhWc2RDQTlJR1oxYm1OMGFXOXVJSFpoYkhWbGN5Z3BleUJ5WlhSMWNtNGdKRzVoZEdsMlpTNWpZV3hzS0hSb2FYTXBPeUI5TzF4dUlDQjlYRzRnSUM4dklFUmxabWx1WlNCcGRHVnlZWFJ2Y2x4dUlDQnBaaWdvSVV4SlFsSkJVbGtnZkh3Z1JrOVNRMFZFS1NBbUppQW9RbFZIUjFrZ2ZId2dWa0ZNVlVWVFgwSlZSeUI4ZkNBaGNISnZkRzliU1ZSRlVrRlVUMUpkS1NsN1hHNGdJQ0FnYUdsa1pTaHdjbTkwYnl3Z1NWUkZVa0ZVVDFJc0lDUmtaV1poZFd4MEtUdGNiaUFnZlZ4dUlDQXZMeUJRYkhWbklHWnZjaUJzYVdKeVlYSjVYRzRnSUVsMFpYSmhkRzl5YzF0T1FVMUZYU0E5SUNSa1pXWmhkV3gwTzF4dUlDQkpkR1Z5WVhSdmNuTmJWRUZIWFNBZ1BTQnlaWFIxY201VWFHbHpPMXh1SUNCcFppaEVSVVpCVlV4VUtYdGNiaUFnSUNCdFpYUm9iMlJ6SUQwZ2UxeHVJQ0FnSUNBZ2RtRnNkV1Z6T2lBZ1JFVkdYMVpCVEZWRlV5QS9JQ1JrWldaaGRXeDBJRG9nWjJWMFRXVjBhRzlrS0ZaQlRGVkZVeWtzWEc0Z0lDQWdJQ0JyWlhsek9pQWdJQ0JKVTE5VFJWUWdJQ0FnSUQ4Z0pHUmxabUYxYkhRZ09pQm5aWFJOWlhSb2IyUW9TMFZaVXlrc1hHNGdJQ0FnSUNCbGJuUnlhV1Z6T2lBa1pXNTBjbWxsYzF4dUlDQWdJSDA3WEc0Z0lDQWdhV1lvUms5U1EwVkVLV1p2Y2loclpYa2dhVzRnYldWMGFHOWtjeWw3WEc0Z0lDQWdJQ0JwWmlnaEtHdGxlU0JwYmlCd2NtOTBieWtwY21Wa1pXWnBibVVvY0hKdmRHOHNJR3RsZVN3Z2JXVjBhRzlrYzF0clpYbGRLVHRjYmlBZ0lDQjlJR1ZzYzJVZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFvUWxWSFIxa2dmSHdnVmtGTVZVVlRYMEpWUnlrc0lFNUJUVVVzSUcxbGRHaHZaSE1wTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ0WlhSb2IyUnpPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMWtaV1pwYm1VdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTFNbHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGNuVmxPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXNhV0p5WVhKNUxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdOVE5jYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcE8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5eVpXUmxabWx1WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEVTBYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlZWFJ2Y25NdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTFOVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlHTnlaV0YwWlNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXTnlaV0YwWlNjcFhHNGdJQ3dnWkdWelkzSnBjSFJ2Y2lBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5d2NtOXdaWEowZVMxa1pYTmpKeWxjYmlBZ0xDQnpaWFJVYjFOMGNtbHVaMVJoWnlBOUlISmxjWFZwY21Vb0p5NHZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5KeWxjYmlBZ0xDQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQTlJSHQ5TzF4dVhHNHZMeUF5TlM0eExqSXVNUzR4SUNWSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNWYlFFQnBkR1Z5WVhSdmNsMG9LVnh1Y21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwS0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmFYUmxjbUYwYjNJbktTd2dablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJSFJvYVhNN0lIMHBPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGTENCdVpYaDBLWHRjYmlBZ1EyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxJRDBnWTNKbFlYUmxLRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0I3Ym1WNGREb2daR1Z6WTNKcGNIUnZjaWd4TENCdVpYaDBLWDBwTzF4dUlDQnpaWFJVYjFOMGNtbHVaMVJoWnloRGIyNXpkSEoxWTNSdmNpd2dUa0ZOUlNBcklDY2dTWFJsY21GMGIzSW5LVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRZM0psWVhSbExtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdOVFpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpOHZJREU1TGpFdU1pNHlJQzhnTVRVdU1pNHpMalVnVDJKcVpXTjBMbU55WldGMFpTaFBJRnNzSUZCeWIzQmxjblJwWlhOZEtWeHVkbUZ5SUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JrVUhNZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjSE1uS1Z4dUlDQXNJR1Z1ZFcxQ2RXZExaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZaVzUxYlMxaWRXY3RhMlY1Y3ljcFhHNGdJQ3dnU1VWZlVGSlBWRThnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6YUdGeVpXUXRhMlY1Snlrb0owbEZYMUJTVDFSUEp5bGNiaUFnTENCRmJYQjBlU0FnSUNBZ0lDQTlJR1oxYm1OMGFXOXVLQ2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnTENCUVVrOVVUMVJaVUVVZ0lDQTlJQ2R3Y205MGIzUjVjR1VuTzF4dVhHNHZMeUJEY21WaGRHVWdiMkpxWldOMElIZHBkR2dnWm1GclpTQmdiblZzYkdBZ2NISnZkRzkwZVhCbE9pQjFjMlVnYVdaeVlXMWxJRTlpYW1WamRDQjNhWFJvSUdOc1pXRnlaV1FnY0hKdmRHOTBlWEJsWEc1MllYSWdZM0psWVhSbFJHbGpkQ0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQzh2SUZSb2NtRnphQ3dnZDJGemRHVWdZVzVrSUhOdlpHOXRlVG9nU1VVZ1IwTWdZblZuWEc0Z0lIWmhjaUJwWm5KaGJXVWdQU0J5WlhGMWFYSmxLQ2N1TDE5a2IyMHRZM0psWVhSbEp5a29KMmxtY21GdFpTY3BYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQmxiblZ0UW5WblMyVjVjeTVzWlc1bmRHaGNiaUFnSUNBc0lHeDBJQ0FnSUNBOUlDYzhKMXh1SUNBZ0lDd2daM1FnSUNBZ0lEMGdKejRuWEc0Z0lDQWdMQ0JwWm5KaGJXVkViMk4xYldWdWREdGNiaUFnYVdaeVlXMWxMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ibTl1WlNjN1hHNGdJSEpsY1hWcGNtVW9KeTR2WDJoMGJXd25LUzVoY0hCbGJtUkRhR2xzWkNocFpuSmhiV1VwTzF4dUlDQnBabkpoYldVdWMzSmpJRDBnSjJwaGRtRnpZM0pwY0hRNkp6c2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MXpZM0pwY0hRdGRYSnNYRzRnSUM4dklHTnlaV0YwWlVScFkzUWdQU0JwWm5KaGJXVXVZMjl1ZEdWdWRGZHBibVJ2ZHk1UFltcGxZM1E3WEc0Z0lDOHZJR2gwYld3dWNtVnRiM1psUTJocGJHUW9hV1p5WVcxbEtUdGNiaUFnYVdaeVlXMWxSRzlqZFcxbGJuUWdQU0JwWm5KaGJXVXVZMjl1ZEdWdWRGZHBibVJ2ZHk1a2IyTjFiV1Z1ZER0Y2JpQWdhV1p5WVcxbFJHOWpkVzFsYm5RdWIzQmxiaWdwTzF4dUlDQnBabkpoYldWRWIyTjFiV1Z1ZEM1M2NtbDBaU2hzZENBcklDZHpZM0pwY0hRbklDc2daM1FnS3lBblpHOWpkVzFsYm5RdVJqMVBZbXBsWTNRbklDc2diSFFnS3lBbkwzTmpjbWx3ZENjZ0t5Qm5kQ2s3WEc0Z0lHbG1jbUZ0WlVSdlkzVnRaVzUwTG1Oc2IzTmxLQ2s3WEc0Z0lHTnlaV0YwWlVScFkzUWdQU0JwWm5KaGJXVkViMk4xYldWdWRDNUdPMXh1SUNCM2FHbHNaU2hwTFMwcFpHVnNaWFJsSUdOeVpXRjBaVVJwWTNSYlVGSlBWRTlVV1ZCRlhWdGxiblZ0UW5WblMyVjVjMXRwWFYwN1hHNGdJSEpsZEhWeWJpQmpjbVZoZEdWRWFXTjBLQ2s3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRTlpYW1WamRDNWpjbVZoZEdVZ2ZId2dablZ1WTNScGIyNGdZM0psWVhSbEtFOHNJRkJ5YjNCbGNuUnBaWE1wZTF4dUlDQjJZWElnY21WemRXeDBPMXh1SUNCcFppaFBJQ0U5UFNCdWRXeHNLWHRjYmlBZ0lDQkZiWEIwZVZ0UVVrOVVUMVJaVUVWZElEMGdZVzVQWW1wbFkzUW9UeWs3WEc0Z0lDQWdjbVZ6ZFd4MElEMGdibVYzSUVWdGNIUjVPMXh1SUNBZ0lFVnRjSFI1VzFCU1QxUlBWRmxRUlYwZ1BTQnVkV3hzTzF4dUlDQWdJQzh2SUdGa1pDQmNJbDlmY0hKdmRHOWZYMXdpSUdadmNpQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllnY0c5c2VXWnBiR3hjYmlBZ0lDQnlaWE4xYkhSYlNVVmZVRkpQVkU5ZElEMGdUenRjYmlBZ2ZTQmxiSE5sSUhKbGMzVnNkQ0E5SUdOeVpXRjBaVVJwWTNRb0tUdGNiaUFnY21WMGRYSnVJRkJ5YjNCbGNuUnBaWE1nUFQwOUlIVnVaR1ZtYVc1bFpDQS9JSEpsYzNWc2RDQTZJR1JRY3loeVpYTjFiSFFzSUZCeWIzQmxjblJwWlhNcE8xeHVmVHRjYmx4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRZM0psWVhSbExtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdOVGRjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJrVUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z1lXNVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR2RsZEV0bGVYTWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUQ4Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1nT2lCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBhV1Z6S0U4c0lGQnliM0JsY25ScFpYTXBlMXh1SUNCaGJrOWlhbVZqZENoUEtUdGNiaUFnZG1GeUlHdGxlWE1nSUNBOUlHZGxkRXRsZVhNb1VISnZjR1Z5ZEdsbGN5bGNiaUFnSUNBc0lHeGxibWQwYUNBOUlHdGxlWE11YkdWdVozUm9YRzRnSUNBZ0xDQnBJRDBnTUZ4dUlDQWdJQ3dnVUR0Y2JpQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FTbGtVQzVtS0U4c0lGQWdQU0JyWlhselcya3JLMTBzSUZCeWIzQmxjblJwWlhOYlVGMHBPMXh1SUNCeVpYUjFjbTRnVHp0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxa2NITXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0ExT0Z4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVrYjJOMWJXVnVkQ0FtSmlCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblE3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmgwYld3dWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTFPVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR1JsWmlBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1aY2JpQWdMQ0JvWVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FzSUZSQlJ5QTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2QwYjFOMGNtbHVaMVJoWnljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCMFlXY3NJSE4wWVhRcGUxeHVJQ0JwWmlocGRDQW1KaUFoYUdGektHbDBJRDBnYzNSaGRDQS9JR2wwSURvZ2FYUXVjSEp2ZEc5MGVYQmxMQ0JVUVVjcEtXUmxaaWhwZEN3Z1ZFRkhMQ0I3WTI5dVptbG5kWEpoWW14bE9pQjBjblZsTENCMllXeDFaVG9nZEdGbmZTazdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeTVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURZd1hHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0oyWVhJZ2MzUnZjbVVnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkM2EzTW5LVnh1SUNBc0lIVnBaQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MWFXUW5LVnh1SUNBc0lGTjViV0p2YkNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1VGVXMWliMnhjYmlBZ0xDQlZVMFZmVTFsTlFrOU1JRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQU0FuWm5WdVkzUnBiMjRuTzF4dVhHNTJZWElnSkdWNGNHOXlkSE1nUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBlMXh1SUNCeVpYUjFjbTRnYzNSdmNtVmJibUZ0WlYwZ2ZId2dLSE4wYjNKbFcyNWhiV1ZkSUQxY2JpQWdJQ0JWVTBWZlUxbE5RazlNSUNZbUlGTjViV0p2YkZ0dVlXMWxYU0I4ZkNBb1ZWTkZYMU5aVFVKUFRDQS9JRk41YldKdmJDQTZJSFZwWkNrb0oxTjViV0p2YkM0bklDc2dibUZ0WlNrcE8xeHVmVHRjYmx4dUpHVjRjRzl5ZEhNdWMzUnZjbVVnUFNCemRHOXlaVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkMnR6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05qRmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5KbGNYVnBjbVVvSnk0dlpYTTJMbUZ5Y21GNUxtbDBaWEpoZEc5eUp5azdYRzUyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnYUdsa1pTQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lFbDBaWEpoZEc5eWN5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5WVhSdmNuTW5LVnh1SUNBc0lGUlBYMU5VVWtsT1IxOVVRVWNnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVHRjYmx4dVptOXlLSFpoY2lCamIyeHNaV04wYVc5dWN5QTlJRnNuVG05a1pVeHBjM1FuTENBblJFOU5WRzlyWlc1TWFYTjBKeXdnSjAxbFpHbGhUR2x6ZENjc0lDZFRkSGxzWlZOb1pXVjBUR2x6ZENjc0lDZERVMU5TZFd4bFRHbHpkQ2RkTENCcElEMGdNRHNnYVNBOElEVTdJR2tyS3lsN1hHNGdJSFpoY2lCT1FVMUZJQ0FnSUNBZ0lEMGdZMjlzYkdWamRHbHZibk5iYVYxY2JpQWdJQ0FzSUVOdmJHeGxZM1JwYjI0Z1BTQm5iRzlpWVd4YlRrRk5SVjFjYmlBZ0lDQXNJSEJ5YjNSdklDQWdJQ0FnUFNCRGIyeHNaV04wYVc5dUlDWW1JRU52Ykd4bFkzUnBiMjR1Y0hKdmRHOTBlWEJsTzF4dUlDQnBaaWh3Y205MGJ5QW1KaUFoY0hKdmRHOWJWRTlmVTFSU1NVNUhYMVJCUjEwcGFHbGtaU2h3Y205MGJ5d2dWRTlmVTFSU1NVNUhYMVJCUnl3Z1RrRk5SU2s3WEc0Z0lFbDBaWEpoZEc5eWMxdE9RVTFGWFNBOUlFbDBaWEpoZEc5eWN5NUJjbkpoZVR0Y2JuMWNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5M1pXSXVaRzl0TG1sMFpYSmhZbXhsTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05qSmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCaFpHUlViMVZ1YzJOdmNHRmliR1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpKeWxjYmlBZ0xDQnpkR1Z3SUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNpMXpkR1Z3SnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5bGNiaUFnTENCMGIwbFBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwTzF4dVhHNHZMeUF5TWk0eExqTXVOQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVaVzUwY21sbGN5Z3BYRzR2THlBeU1pNHhMak11TVRNZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG10bGVYTW9LVnh1THk4Z01qSXVNUzR6TGpJNUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1MllXeDFaWE1vS1Z4dUx5OGdNakl1TVM0ekxqTXdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pWdEFRR2wwWlhKaGRHOXlYU2dwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WkdWbWFXNWxKeWtvUVhKeVlYa3NJQ2RCY25KaGVTY3NJR1oxYm1OMGFXOXVLR2wwWlhKaGRHVmtMQ0JyYVc1a0tYdGNiaUFnZEdocGN5NWZkQ0E5SUhSdlNVOWlhbVZqZENocGRHVnlZWFJsWkNrN0lDOHZJSFJoY21kbGRGeHVJQ0IwYUdsekxsOXBJRDBnTURzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdibVY0ZENCcGJtUmxlRnh1SUNCMGFHbHpMbDlySUQwZ2EybHVaRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYTJsdVpGeHVMeThnTWpJdU1TNDFMakl1TVNBbFFYSnlZWGxKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU1V1Ym1WNGRDZ3BYRzU5TENCbWRXNWpkR2x2YmlncGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnUFNCMGFHbHpMbDkwWEc0Z0lDQWdMQ0JyYVc1a0lDQTlJSFJvYVhNdVgydGNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVNzck8xeHVJQ0JwWmlnaFR5QjhmQ0JwYm1SbGVDQStQU0JQTG14bGJtZDBhQ2w3WEc0Z0lDQWdkR2hwY3k1ZmRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnlaWFIxY200Z2MzUmxjQ2d4S1R0Y2JpQWdmVnh1SUNCcFppaHJhVzVrSUQwOUlDZHJaWGx6SnlBZ0tYSmxkSFZ5YmlCemRHVndLREFzSUdsdVpHVjRLVHRjYmlBZ2FXWW9hMmx1WkNBOVBTQW5kbUZzZFdWekp5bHlaWFIxY200Z2MzUmxjQ2d3TENCUFcybHVaR1Y0WFNrN1hHNGdJSEpsZEhWeWJpQnpkR1Z3S0RBc0lGdHBibVJsZUN3Z1QxdHBibVJsZUYxZEtUdGNibjBzSUNkMllXeDFaWE1uS1R0Y2JseHVMeThnWVhKbmRXMWxiblJ6VEdsemRGdEFRR2wwWlhKaGRHOXlYU0JwY3lBbFFYSnlZWGxRY205MGIxOTJZV3gxWlhNbElDZzVMalF1TkM0MkxDQTVMalF1TkM0M0tWeHVTWFJsY21GMGIzSnpMa0Z5WjNWdFpXNTBjeUE5SUVsMFpYSmhkRzl5Y3k1QmNuSmhlVHRjYmx4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnbmEyVjVjeWNwTzF4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnbmRtRnNkV1Z6SnlrN1hHNWhaR1JVYjFWdWMyTnZjR0ZpYkdWektDZGxiblJ5YVdWekp5azdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtbDBaWEpoZEc5eUxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdOak5jYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b0tYc2dMeW9nWlcxd2RIa2dLaThnZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05qUmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWkc5dVpTd2dkbUZzZFdVcGUxeHVJQ0J5WlhSMWNtNGdlM1poYkhWbE9pQjJZV3gxWlN3Z1pHOXVaVG9nSVNGa2IyNWxmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRjM1JsY0M1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEWTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ2MzUnliMjVuSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTF6ZEhKdmJtY25LVHRjYmx4dUx5OGdNak11TWlCVFpYUWdUMkpxWldOMGMxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1Snlrb0oxTmxkQ2NzSUdaMWJtTjBhVzl1S0dkbGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJUWlhRb0tYc2djbVYwZFhKdUlHZGxkQ2gwYUdsekxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNQ0EvSUdGeVozVnRaVzUwYzFzd1hTQTZJSFZ1WkdWbWFXNWxaQ2s3SUgwN1hHNTlMQ0I3WEc0Z0lDOHZJREl6TGpJdU15NHhJRk5sZEM1d2NtOTBiM1I1Y0dVdVlXUmtLSFpoYkhWbEtWeHVJQ0JoWkdRNklHWjFibU4wYVc5dUlHRmtaQ2gyWVd4MVpTbDdYRzRnSUNBZ2NtVjBkWEp1SUhOMGNtOXVaeTVrWldZb2RHaHBjeXdnZG1Gc2RXVWdQU0IyWVd4MVpTQTlQVDBnTUNBL0lEQWdPaUIyWVd4MVpTd2dkbUZzZFdVcE8xeHVJQ0I5WEc1OUxDQnpkSEp2Ym1jcE8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXpaWFF1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBMk5seHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdSUUlDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVpseHVJQ0FzSUdOeVpXRjBaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BYRzRnSUN3Z2NtVmtaV1pwYm1WQmJHd2dQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlMxaGJHd25LVnh1SUNBc0lHTjBlQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkzUjRKeWxjYmlBZ0xDQmhia2x1YzNSaGJtTmxJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMV2x1YzNSaGJtTmxKeWxjYmlBZ0xDQmtaV1pwYm1Wa0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktWeHVJQ0FzSUdadmNrOW1JQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm05eUxXOW1KeWxjYmlBZ0xDQWthWFJsY2tSbFptbHVaU0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WkdWbWFXNWxKeWxjYmlBZ0xDQnpkR1Z3SUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0YzNSbGNDY3BYRzRnSUN3Z2MyVjBVM0JsWTJsbGN5QWdQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRjM0JsWTJsbGN5Y3BYRzRnSUN3Z1JFVlRRMUpKVUZSUFVsTWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BYRzRnSUN3Z1ptRnpkRXRsZVNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhKeWt1Wm1GemRFdGxlVnh1SUNBc0lGTkpXa1VnSUNBZ0lDQWdJRDBnUkVWVFExSkpVRlJQVWxNZ1B5QW5YM01uSURvZ0ozTnBlbVVuTzF4dVhHNTJZWElnWjJWMFJXNTBjbmtnUFNCbWRXNWpkR2x2YmloMGFHRjBMQ0JyWlhrcGUxeHVJQ0F2THlCbVlYTjBJR05oYzJWY2JpQWdkbUZ5SUdsdVpHVjRJRDBnWm1GemRFdGxlU2hyWlhrcExDQmxiblJ5ZVR0Y2JpQWdhV1lvYVc1a1pYZ2dJVDA5SUNkR0p5bHlaWFIxY200Z2RHaGhkQzVmYVZ0cGJtUmxlRjA3WEc0Z0lDOHZJR1p5YjNwbGJpQnZZbXBsWTNRZ1kyRnpaVnh1SUNCbWIzSW9aVzUwY25rZ1BTQjBhR0YwTGw5bU95QmxiblJ5ZVRzZ1pXNTBjbmtnUFNCbGJuUnllUzV1S1h0Y2JpQWdJQ0JwWmlobGJuUnllUzVySUQwOUlHdGxlU2x5WlhSMWNtNGdaVzUwY25rN1hHNGdJSDFjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCblpYUkRiMjV6ZEhKMVkzUnZjam9nWm5WdVkzUnBiMjRvZDNKaGNIQmxjaXdnVGtGTlJTd2dTVk5mVFVGUUxDQkJSRVJGVWlsN1hHNGdJQ0FnZG1GeUlFTWdQU0IzY21Gd2NHVnlLR1oxYm1OMGFXOXVLSFJvWVhRc0lHbDBaWEpoWW14bEtYdGNiaUFnSUNBZ0lHRnVTVzV6ZEdGdVkyVW9kR2hoZEN3Z1F5d2dUa0ZOUlN3Z0oxOXBKeWs3WEc0Z0lDQWdJQ0IwYUdGMExsOXBJRDBnWTNKbFlYUmxLRzUxYkd3cE95QXZMeUJwYm1SbGVGeHVJQ0FnSUNBZ2RHaGhkQzVmWmlBOUlIVnVaR1ZtYVc1bFpEc2dJQ0FnTHk4Z1ptbHljM1FnWlc1MGNubGNiaUFnSUNBZ0lIUm9ZWFF1WDJ3Z1BTQjFibVJsWm1sdVpXUTdJQ0FnSUM4dklHeGhjM1FnWlc1MGNubGNiaUFnSUNBZ0lIUm9ZWFJiVTBsYVJWMGdQU0F3T3lBZ0lDQWdJQ0FnSUM4dklITnBlbVZjYmlBZ0lDQWdJR2xtS0dsMFpYSmhZbXhsSUNFOUlIVnVaR1ZtYVc1bFpDbG1iM0pQWmlocGRHVnlZV0pzWlN3Z1NWTmZUVUZRTENCMGFHRjBXMEZFUkVWU1hTd2dkR2hoZENrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnY21Wa1pXWnBibVZCYkd3b1F5NXdjbTkwYjNSNWNHVXNJSHRjYmlBZ0lDQWdJQzh2SURJekxqRXVNeTR4SUUxaGNDNXdjbTkwYjNSNWNHVXVZMnhsWVhJb0tWeHVJQ0FnSUNBZ0x5OGdNak11TWk0ekxqSWdVMlYwTG5CeWIzUnZkSGx3WlM1amJHVmhjaWdwWEc0Z0lDQWdJQ0JqYkdWaGNqb2dablZ1WTNScGIyNGdZMnhsWVhJb0tYdGNiaUFnSUNBZ0lDQWdabTl5S0haaGNpQjBhR0YwSUQwZ2RHaHBjeXdnWkdGMFlTQTlJSFJvWVhRdVgya3NJR1Z1ZEhKNUlEMGdkR2hoZEM1Zlpqc2daVzUwY25rN0lHVnVkSEo1SUQwZ1pXNTBjbmt1YmlsN1hHNGdJQ0FnSUNBZ0lDQWdaVzUwY25rdWNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdhV1lvWlc1MGNua3VjQ2xsYm5SeWVTNXdJRDBnWlc1MGNua3VjQzV1SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmtZWFJoVzJWdWRISjVMbWxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9ZWFF1WDJZZ1BTQjBhR0YwTGw5c0lEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0IwYUdGMFcxTkpXa1ZkSUQwZ01EdGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQXZMeUF5TXk0eExqTXVNeUJOWVhBdWNISnZkRzkwZVhCbExtUmxiR1YwWlNoclpYa3BYRzRnSUNBZ0lDQXZMeUF5TXk0eUxqTXVOQ0JUWlhRdWNISnZkRzkwZVhCbExtUmxiR1YwWlNoMllXeDFaU2xjYmlBZ0lDQWdJQ2RrWld4bGRHVW5PaUJtZFc1amRHbHZiaWhyWlhrcGUxeHVJQ0FnSUNBZ0lDQjJZWElnZEdoaGRDQWdQU0IwYUdselhHNGdJQ0FnSUNBZ0lDQWdMQ0JsYm5SeWVTQTlJR2RsZEVWdWRISjVLSFJvWVhRc0lHdGxlU2s3WEc0Z0lDQWdJQ0FnSUdsbUtHVnVkSEo1S1h0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYm1WNGRDQTlJR1Z1ZEhKNUxtNWNiaUFnSUNBZ0lDQWdJQ0FnSUN3Z2NISmxkaUE5SUdWdWRISjVMbkE3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb1lYUXVYMmxiWlc1MGNua3VhVjA3WEc0Z0lDQWdJQ0FnSUNBZ1pXNTBjbmt1Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9jSEpsZGlsd2NtVjJMbTRnUFNCdVpYaDBPMXh1SUNBZ0lDQWdJQ0FnSUdsbUtHNWxlSFFwYm1WNGRDNXdJRDBnY0hKbGRqdGNiaUFnSUNBZ0lDQWdJQ0JwWmloMGFHRjBMbDltSUQwOUlHVnVkSEo1S1hSb1lYUXVYMllnUFNCdVpYaDBPMXh1SUNBZ0lDQWdJQ0FnSUdsbUtIUm9ZWFF1WDJ3Z1BUMGdaVzUwY25rcGRHaGhkQzVmYkNBOUlIQnlaWFk3WEc0Z0lDQWdJQ0FnSUNBZ2RHaGhkRnRUU1ZwRlhTMHRPMXh1SUNBZ0lDQWdJQ0I5SUhKbGRIVnliaUFoSVdWdWRISjVPMXh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQzh2SURJekxqSXVNeTQySUZObGRDNXdjbTkwYjNSNWNHVXVabTl5UldGamFDaGpZV3hzWW1GamEyWnVMQ0IwYUdselFYSm5JRDBnZFc1a1pXWnBibVZrS1Z4dUlDQWdJQ0FnTHk4Z01qTXVNUzR6TGpVZ1RXRndMbkJ5YjNSdmRIbHdaUzVtYjNKRllXTm9LR05oYkd4aVlXTnJabTRzSUhSb2FYTkJjbWNnUFNCMWJtUmxabWx1WldRcFhHNGdJQ0FnSUNCbWIzSkZZV05vT2lCbWRXNWpkR2x2YmlCbWIzSkZZV05vS0dOaGJHeGlZV05yWm00Z0x5b3NJSFJvWVhRZ1BTQjFibVJsWm1sdVpXUWdLaThwZTF4dUlDQWdJQ0FnSUNCaGJrbHVjM1JoYm1ObEtIUm9hWE1zSUVNc0lDZG1iM0pGWVdOb0p5azdYRzRnSUNBZ0lDQWdJSFpoY2lCbUlEMGdZM1I0S0dOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtMQ0F6S1Z4dUlDQWdJQ0FnSUNBZ0lDd2daVzUwY25rN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsS0dWdWRISjVJRDBnWlc1MGNua2dQeUJsYm5SeWVTNXVJRG9nZEdocGN5NWZaaWw3WEc0Z0lDQWdJQ0FnSUNBZ1ppaGxiblJ5ZVM1MkxDQmxiblJ5ZVM1ckxDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJ5WlhabGNuUWdkRzhnZEdobElHeGhjM1FnWlhocGMzUnBibWNnWlc1MGNubGNiaUFnSUNBZ0lDQWdJQ0IzYUdsc1pTaGxiblJ5ZVNBbUppQmxiblJ5ZVM1eUtXVnVkSEo1SUQwZ1pXNTBjbmt1Y0R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDOHZJREl6TGpFdU15NDNJRTFoY0M1d2NtOTBiM1I1Y0dVdWFHRnpLR3RsZVNsY2JpQWdJQ0FnSUM4dklESXpMakl1TXk0M0lGTmxkQzV3Y205MGIzUjVjR1V1YUdGektIWmhiSFZsS1Z4dUlDQWdJQ0FnYUdGek9pQm1kVzVqZEdsdmJpQm9ZWE1vYTJWNUtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhaMlYwUlc1MGNua29kR2hwY3l3Z2EyVjVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ0lDQnBaaWhFUlZORFVrbFFWRTlTVXlsa1VDaERMbkJ5YjNSdmRIbHdaU3dnSjNOcGVtVW5MQ0I3WEc0Z0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV1pwYm1Wa0tIUm9hWE5iVTBsYVJWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCRE8xeHVJQ0I5TEZ4dUlDQmtaV1k2SUdaMWJtTjBhVzl1S0hSb1lYUXNJR3RsZVN3Z2RtRnNkV1VwZTF4dUlDQWdJSFpoY2lCbGJuUnllU0E5SUdkbGRFVnVkSEo1S0hSb1lYUXNJR3RsZVNsY2JpQWdJQ0FnSUN3Z2NISmxkaXdnYVc1a1pYZzdYRzRnSUNBZ0x5OGdZMmhoYm1kbElHVjRhWE4wYVc1bklHVnVkSEo1WEc0Z0lDQWdhV1lvWlc1MGNua3BlMXh1SUNBZ0lDQWdaVzUwY25rdWRpQTlJSFpoYkhWbE8xeHVJQ0FnSUM4dklHTnlaV0YwWlNCdVpYY2daVzUwY25sY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hoZEM1ZmJDQTlJR1Z1ZEhKNUlEMGdlMXh1SUNBZ0lDQWdJQ0JwT2lCcGJtUmxlQ0E5SUdaaGMzUkxaWGtvYTJWNUxDQjBjblZsS1N3Z0x5OGdQQzBnYVc1a1pYaGNiaUFnSUNBZ0lDQWdhem9nYTJWNUxDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklEd3RJR3RsZVZ4dUlDQWdJQ0FnSUNCMk9pQjJZV3gxWlN3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnY0RvZ2NISmxkaUE5SUhSb1lYUXVYMndzSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUhCeVpYWnBiM1Z6SUdWdWRISjVYRzRnSUNBZ0lDQWdJRzQ2SUhWdVpHVm1hVzVsWkN3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QThMU0J1WlhoMElHVnVkSEo1WEc0Z0lDQWdJQ0FnSUhJNklHWmhiSE5sSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCeVpXMXZkbVZrWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnYVdZb0lYUm9ZWFF1WDJZcGRHaGhkQzVmWmlBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnYVdZb2NISmxkaWx3Y21WMkxtNGdQU0JsYm5SeWVUdGNiaUFnSUNBZ0lIUm9ZWFJiVTBsYVJWMHJLenRjYmlBZ0lDQWdJQzh2SUdGa1pDQjBieUJwYm1SbGVGeHVJQ0FnSUNBZ2FXWW9hVzVrWlhnZ0lUMDlJQ2RHSnlsMGFHRjBMbDlwVzJsdVpHVjRYU0E5SUdWdWRISjVPMXh1SUNBZ0lIMGdjbVYwZFhKdUlIUm9ZWFE3WEc0Z0lIMHNYRzRnSUdkbGRFVnVkSEo1T2lCblpYUkZiblJ5ZVN4Y2JpQWdjMlYwVTNSeWIyNW5PaUJtZFc1amRHbHZiaWhETENCT1FVMUZMQ0JKVTE5TlFWQXBlMXh1SUNBZ0lDOHZJR0ZrWkNBdWEyVjVjeXdnTG5aaGJIVmxjeXdnTG1WdWRISnBaWE1zSUZ0QVFHbDBaWEpoZEc5eVhWeHVJQ0FnSUM4dklESXpMakV1TXk0MExDQXlNeTR4TGpNdU9Dd2dNak11TVM0ekxqRXhMQ0F5TXk0eExqTXVNVElzSURJekxqSXVNeTQxTENBeU15NHlMak11T0N3Z01qTXVNaTR6TGpFd0xDQXlNeTR5TGpNdU1URmNiaUFnSUNBa2FYUmxja1JsWm1sdVpTaERMQ0JPUVUxRkxDQm1kVzVqZEdsdmJpaHBkR1Z5WVhSbFpDd2dhMmx1WkNsN1hHNGdJQ0FnSUNCMGFHbHpMbDkwSUQwZ2FYUmxjbUYwWldRN0lDQXZMeUIwWVhKblpYUmNiaUFnSUNBZ0lIUm9hWE11WDJzZ1BTQnJhVzVrT3lBZ0lDQWdJQzh2SUd0cGJtUmNiaUFnSUNBZ0lIUm9hWE11WDJ3Z1BTQjFibVJsWm1sdVpXUTdJQzh2SUhCeVpYWnBiM1Z6WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhaaGNpQjBhR0YwSUNBOUlIUm9hWE5jYmlBZ0lDQWdJQ0FnTENCcmFXNWtJQ0E5SUhSb1lYUXVYMnRjYmlBZ0lDQWdJQ0FnTENCbGJuUnllU0E5SUhSb1lYUXVYMnc3WEc0Z0lDQWdJQ0F2THlCeVpYWmxjblFnZEc4Z2RHaGxJR3hoYzNRZ1pYaHBjM1JwYm1jZ1pXNTBjbmxjYmlBZ0lDQWdJSGRvYVd4bEtHVnVkSEo1SUNZbUlHVnVkSEo1TG5JcFpXNTBjbmtnUFNCbGJuUnllUzV3TzF4dUlDQWdJQ0FnTHk4Z1oyVjBJRzVsZUhRZ1pXNTBjbmxjYmlBZ0lDQWdJR2xtS0NGMGFHRjBMbDkwSUh4OElDRW9kR2hoZEM1ZmJDQTlJR1Z1ZEhKNUlEMGdaVzUwY25rZ1B5QmxiblJ5ZVM1dUlEb2dkR2hoZEM1ZmRDNWZaaWtwZTF4dUlDQWdJQ0FnSUNBdkx5QnZjaUJtYVc1cGMyZ2dkR2hsSUdsMFpYSmhkR2x2Ymx4dUlDQWdJQ0FnSUNCMGFHRjBMbDkwSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzUmxjQ2d4S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklISmxkSFZ5YmlCemRHVndJR0o1SUd0cGJtUmNiaUFnSUNBZ0lHbG1LR3RwYm1RZ1BUMGdKMnRsZVhNbklDQXBjbVYwZFhKdUlITjBaWEFvTUN3Z1pXNTBjbmt1YXlrN1hHNGdJQ0FnSUNCcFppaHJhVzVrSUQwOUlDZDJZV3gxWlhNbktYSmxkSFZ5YmlCemRHVndLREFzSUdWdWRISjVMbllwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSE4wWlhBb01Dd2dXMlZ1ZEhKNUxtc3NJR1Z1ZEhKNUxuWmRLVHRjYmlBZ0lDQjlMQ0JKVTE5TlFWQWdQeUFuWlc1MGNtbGxjeWNnT2lBbmRtRnNkV1Z6SnlBc0lDRkpVMTlOUVZBc0lIUnlkV1VwTzF4dVhHNGdJQ0FnTHk4Z1lXUmtJRnRBUUhOd1pXTnBaWE5kTENBeU15NHhMakl1TWl3Z01qTXVNaTR5TGpKY2JpQWdJQ0J6WlhSVGNHVmphV1Z6S0U1QlRVVXBPMXh1SUNCOVhHNTlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpiMnhzWldOMGFXOXVMWE4wY205dVp5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRFkzWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSjJZWElnYUdsa1pTQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvZEdGeVoyVjBMQ0J6Y21Nc0lITmhabVVwZTF4dUlDQm1iM0lvZG1GeUlHdGxlU0JwYmlCemNtTXBlMXh1SUNBZ0lHbG1LSE5oWm1VZ0ppWWdkR0Z5WjJWMFcydGxlVjBwZEdGeVoyVjBXMnRsZVYwZ1BTQnpjbU5iYTJWNVhUdGNiaUFnSUNCbGJITmxJR2hwWkdVb2RHRnlaMlYwTENCclpYa3NJSE55WTF0clpYbGRLVHRjYmlBZ2ZTQnlaWFIxY200Z2RHRnlaMlYwTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmNtVmtaV1pwYm1VdFlXeHNMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTmpoY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFzSUVOdmJuTjBjblZqZEc5eUxDQnVZVzFsTENCbWIzSmlhV1JrWlc1R2FXVnNaQ2w3WEc0Z0lHbG1LQ0VvYVhRZ2FXNXpkR0Z1WTJWdlppQkRiMjV6ZEhKMVkzUnZjaWtnZkh3Z0tHWnZjbUpwWkdSbGJrWnBaV3hrSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnWm05eVltbGtaR1Z1Um1sbGJHUWdhVzRnYVhRcEtYdGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvYm1GdFpTQXJJQ2M2SUdsdVkyOXljbVZqZENCcGJuWnZZMkYwYVc5dUlTY3BPMXh1SUNCOUlISmxkSFZ5YmlCcGREdGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMkZ1TFdsdWMzUmhibU5sTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05qbGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5aaGNpQmpkSGdnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDd2dZMkZzYkNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdOaGJHd25LVnh1SUNBc0lHbHpRWEp5WVhsSmRHVnlJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRZWEp5WVhrdGFYUmxjaWNwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCblpYUkpkR1Z5Um00Z0lDQTlJSEpsY1hWcGNtVW9KeTR2WTI5eVpTNW5aWFF0YVhSbGNtRjBiM0l0YldWMGFHOWtKeWxjYmlBZ0xDQkNVa1ZCU3lBZ0lDQWdJQ0E5SUh0OVhHNGdJQ3dnVWtWVVZWSk9JQ0FnSUNBZ1BTQjdmVHRjYm5aaGNpQmxlSEJ2Y25SeklEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkR1Z5WVdKc1pTd2daVzUwY21sbGN5d2dabTRzSUhSb1lYUXNJRWxVUlZKQlZFOVNLWHRjYmlBZ2RtRnlJR2wwWlhKR2JpQTlJRWxVUlZKQlZFOVNJRDhnWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUdsMFpYSmhZbXhsT3lCOUlEb2daMlYwU1hSbGNrWnVLR2wwWlhKaFlteGxLVnh1SUNBZ0lDd2daaUFnSUNBZ0lEMGdZM1I0S0dadUxDQjBhR0YwTENCbGJuUnlhV1Z6SUQ4Z01pQTZJREVwWEc0Z0lDQWdMQ0JwYm1SbGVDQWdQU0F3WEc0Z0lDQWdMQ0JzWlc1bmRHZ3NJSE4wWlhBc0lHbDBaWEpoZEc5eUxDQnlaWE4xYkhRN1hHNGdJR2xtS0hSNWNHVnZaaUJwZEdWeVJtNGdJVDBnSjJaMWJtTjBhVzl1SnlsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhSbGNtRmliR1VnS3lBbklHbHpJRzV2ZENCcGRHVnlZV0pzWlNFbktUdGNiaUFnTHk4Z1ptRnpkQ0JqWVhObElHWnZjaUJoY25KaGVYTWdkMmwwYUNCa1pXWmhkV3gwSUdsMFpYSmhkRzl5WEc0Z0lHbG1LR2x6UVhKeVlYbEpkR1Z5S0dsMFpYSkdiaWtwWm05eUtHeGxibWQwYUNBOUlIUnZUR1Z1WjNSb0tHbDBaWEpoWW14bExteGxibWQwYUNrN0lHeGxibWQwYUNBK0lHbHVaR1Y0T3lCcGJtUmxlQ3NyS1h0Y2JpQWdJQ0J5WlhOMWJIUWdQU0JsYm5SeWFXVnpJRDhnWmloaGJrOWlhbVZqZENoemRHVndJRDBnYVhSbGNtRmliR1ZiYVc1a1pYaGRLVnN3WFN3Z2MzUmxjRnN4WFNrZ09pQm1LR2wwWlhKaFlteGxXMmx1WkdWNFhTazdYRzRnSUNBZ2FXWW9jbVZ6ZFd4MElEMDlQU0JDVWtWQlN5QjhmQ0J5WlhOMWJIUWdQVDA5SUZKRlZGVlNUaWx5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5SUdWc2MyVWdabTl5S0dsMFpYSmhkRzl5SUQwZ2FYUmxja1p1TG1OaGJHd29hWFJsY21GaWJHVXBPeUFoS0hOMFpYQWdQU0JwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VN0lDbDdYRzRnSUNBZ2NtVnpkV3gwSUQwZ1kyRnNiQ2hwZEdWeVlYUnZjaXdnWml3Z2MzUmxjQzUyWVd4MVpTd2daVzUwY21sbGN5azdYRzRnSUNBZ2FXWW9jbVZ6ZFd4MElEMDlQU0JDVWtWQlN5QjhmQ0J5WlhOMWJIUWdQVDA5SUZKRlZGVlNUaWx5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1OU8xeHVaWGh3YjNKMGN5NUNVa1ZCU3lBZ1BTQkNVa1ZCU3p0Y2JtVjRjRzl5ZEhNdVVrVlVWVkpPSUQwZ1VrVlVWVkpPTzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTltYjNJdGIyWXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0EzTUZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnWTJGc2JDQnpiMjFsZEdocGJtY2diMjRnYVhSbGNtRjBiM0lnYzNSbGNDQjNhWFJvSUhOaFptVWdZMnh2YzJsdVp5QnZiaUJsY25KdmNseHVkbUZ5SUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMFpYSmhkRzl5TENCbWJpd2dkbUZzZFdVc0lHVnVkSEpwWlhNcGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYm5SeWFXVnpJRDhnWm00b1lXNVBZbXBsWTNRb2RtRnNkV1VwV3pCZExDQjJZV3gxWlZzeFhTa2dPaUJtYmloMllXeDFaU2s3WEc0Z0lDOHZJRGN1TkM0MklFbDBaWEpoZEc5eVEyeHZjMlVvYVhSbGNtRjBiM0lzSUdOdmJYQnNaWFJwYjI0cFhHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJR2wwWlhKaGRHOXlXeWR5WlhSMWNtNG5YVHRjYmlBZ0lDQnBaaWh5WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2xoYms5aWFtVmpkQ2h5WlhRdVkyRnNiQ2hwZEdWeVlYUnZjaWtwTzF4dUlDQWdJSFJvY205M0lHVTdYRzRnSUgxY2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WTJGc2JDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGN4WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSXZMeUJqYUdWamF5QnZiaUJrWldaaGRXeDBJRUZ5Y21GNUlHbDBaWEpoZEc5eVhHNTJZWElnU1hSbGNtRjBiM0p6SUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhKaGRHOXljeWNwWEc0Z0lDd2dTVlJGVWtGVVQxSWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkcGRHVnlZWFJ2Y2ljcFhHNGdJQ3dnUVhKeVlYbFFjbTkwYnlBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCcGRDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlDaEpkR1Z5WVhSdmNuTXVRWEp5WVhrZ1BUMDlJR2wwSUh4OElFRnljbUY1VUhKdmRHOWJTVlJGVWtGVVQxSmRJRDA5UFNCcGRDazdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwY3kxaGNuSmhlUzFwZEdWeUxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdOekpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJqYkdGemMyOW1JQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiR0Z6YzI5bUp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LVnh1SUNBc0lFbDBaWEpoZEc5eWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5a3VaMlYwU1hSbGNtRjBiM0pOWlhSb2IyUWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJR2xtS0dsMElDRTlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdhWFJiU1ZSRlVrRlVUMUpkWEc0Z0lDQWdmSHdnYVhSYkowQkFhWFJsY21GMGIzSW5YVnh1SUNBZ0lIeDhJRWwwWlhKaGRHOXljMXRqYkdGemMyOW1LR2wwS1YwN1hHNTlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyTnZjbVV1WjJWMExXbDBaWEpoZEc5eUxXMWxkR2h2WkM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEY3pYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5Qm5aWFIwYVc1bklIUmhaeUJtY205dElERTVMakV1TXk0MklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jb0tWeHVkbUZ5SUdOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BYRzRnSUN3Z1ZFRkhJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNSdlUzUnlhVzVuVkdGbkp5bGNiaUFnTHk4Z1JWTXpJSGR5YjI1bklHaGxjbVZjYmlBZ0xDQkJVa2NnUFNCamIyWW9ablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJR0Z5WjNWdFpXNTBjenNnZlNncEtTQTlQU0FuUVhKbmRXMWxiblJ6Snp0Y2JseHVMeThnWm1Gc2JHSmhZMnNnWm05eUlFbEZNVEVnVTJOeWFYQjBJRUZqWTJWemN5QkVaVzVwWldRZ1pYSnliM0pjYm5aaGNpQjBjbmxIWlhRZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnYTJWNUtYdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnYVhSYmEyVjVYVHRjYmlBZ2ZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSFpoY2lCUExDQlVMQ0JDTzF4dUlDQnlaWFIxY200Z2FYUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lDZFZibVJsWm1sdVpXUW5JRG9nYVhRZ1BUMDlJRzUxYkd3Z1B5QW5UblZzYkNkY2JpQWdJQ0F2THlCQVFIUnZVM1J5YVc1blZHRm5JR05oYzJWY2JpQWdJQ0E2SUhSNWNHVnZaaUFvVkNBOUlIUnllVWRsZENoUElEMGdUMkpxWldOMEtHbDBLU3dnVkVGSEtTa2dQVDBnSjNOMGNtbHVaeWNnUHlCVVhHNGdJQ0FnTHk4Z1luVnBiSFJwYmxSaFp5QmpZWE5sWEc0Z0lDQWdPaUJCVWtjZ1B5QmpiMllvVHlsY2JpQWdJQ0F2THlCRlV6TWdZWEpuZFcxbGJuUnpJR1poYkd4aVlXTnJYRzRnSUNBZ09pQW9RaUE5SUdOdlppaFBLU2tnUFQwZ0owOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlFOHVZMkZzYkdWbElEMDlJQ2RtZFc1amRHbHZiaWNnUHlBblFYSm5kVzFsYm5Sekp5QTZJRUk3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amJHRnpjMjltTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ056UmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCbmJHOWlZV3dnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dZMjl5WlNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dSRVZUUTFKSlVGUlBVbE1nUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwWEc0Z0lDd2dVMUJGUTBsRlV5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmMzQmxZMmxsY3ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRXRGV1NsN1hHNGdJSFpoY2lCRElEMGdkSGx3Wlc5bUlHTnZjbVZiUzBWWlhTQTlQU0FuWm5WdVkzUnBiMjRuSUQ4Z1kyOXlaVnRMUlZsZElEb2daMnh2WW1Gc1cwdEZXVjA3WEc0Z0lHbG1LRVJGVTBOU1NWQlVUMUpUSUNZbUlFTWdKaVlnSVVOYlUxQkZRMGxGVTEwcFpGQXVaaWhETENCVFVFVkRTVVZUTENCN1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIUm9hWE03SUgxY2JpQWdmU2s3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5elpYUXRjM0JsWTJsbGN5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGMxWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSjJZWElnVFVWVVFTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTFhV1FuS1NnbmJXVjBZU2NwWEc0Z0lDd2dhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0J6WlhSRVpYTmpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQnBaQ0FnSUNBZ0lDQTlJREE3WEc1MllYSWdhWE5GZUhSbGJuTnBZbXhsSUQwZ1QySnFaV04wTG1selJYaDBaVzV6YVdKc1pTQjhmQ0JtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z2RISjFaVHRjYm4wN1hHNTJZWElnUmxKRlJWcEZJRDBnSVhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJR2x6UlhoMFpXNXphV0pzWlNoUFltcGxZM1F1Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk1vZTMwcEtUdGNibjBwTzF4dWRtRnlJSE5sZEUxbGRHRWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSE5sZEVSbGMyTW9hWFFzSUUxRlZFRXNJSHQyWVd4MVpUb2dlMXh1SUNBZ0lHazZJQ2RQSnlBcklDc3JhV1FzSUM4dklHOWlhbVZqZENCSlJGeHVJQ0FnSUhjNklIdDlJQ0FnSUNBZ0lDQWdJQzh2SUhkbFlXc2dZMjlzYkdWamRHbHZibk1nU1VSelhHNGdJSDE5S1R0Y2JuMDdYRzUyWVhJZ1ptRnpkRXRsZVNBOUlHWjFibU4wYVc5dUtHbDBMQ0JqY21WaGRHVXBlMXh1SUNBdkx5QnlaWFIxY200Z2NISnBiV2wwYVhabElIZHBkR2dnY0hKbFptbDRYRzRnSUdsbUtDRnBjMDlpYW1WamRDaHBkQ2twY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFNBbmMzbHRZbTlzSnlBL0lHbDBJRG9nS0hSNWNHVnZaaUJwZENBOVBTQW5jM1J5YVc1bkp5QS9JQ2RUSnlBNklDZFFKeWtnS3lCcGREdGNiaUFnYVdZb0lXaGhjeWhwZEN3Z1RVVlVRU2twZTF4dUlDQWdJQzh2SUdOaGJpZDBJSE5sZENCdFpYUmhaR0YwWVNCMGJ5QjFibU5oZFdkb2RDQm1jbTk2Wlc0Z2IySnFaV04wWEc0Z0lDQWdhV1lvSVdselJYaDBaVzV6YVdKc1pTaHBkQ2twY21WMGRYSnVJQ2RHSnp0Y2JpQWdJQ0F2THlCdWIzUWdibVZqWlhOellYSjVJSFJ2SUdGa1pDQnRaWFJoWkdGMFlWeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUNkRkp6dGNiaUFnSUNBdkx5QmhaR1FnYldsemMybHVaeUJ0WlhSaFpHRjBZVnh1SUNBZ0lITmxkRTFsZEdFb2FYUXBPMXh1SUNBdkx5QnlaWFIxY200Z2IySnFaV04wSUVsRVhHNGdJSDBnY21WMGRYSnVJR2wwVzAxRlZFRmRMbWs3WEc1OU8xeHVkbUZ5SUdkbGRGZGxZV3NnUFNCbWRXNWpkR2x2YmlocGRDd2dZM0psWVhSbEtYdGNiaUFnYVdZb0lXaGhjeWhwZEN3Z1RVVlVRU2twZTF4dUlDQWdJQzh2SUdOaGJpZDBJSE5sZENCdFpYUmhaR0YwWVNCMGJ5QjFibU5oZFdkb2RDQm1jbTk2Wlc0Z2IySnFaV04wWEc0Z0lDQWdhV1lvSVdselJYaDBaVzV6YVdKc1pTaHBkQ2twY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnTHk4Z2JtOTBJRzVsWTJWemMyRnllU0IwYnlCaFpHUWdiV1YwWVdSaGRHRmNiaUFnSUNCcFppZ2hZM0psWVhSbEtYSmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQXZMeUJoWkdRZ2JXbHpjMmx1WnlCdFpYUmhaR0YwWVZ4dUlDQWdJSE5sZEUxbGRHRW9hWFFwTzF4dUlDQXZMeUJ5WlhSMWNtNGdhR0Z6YUNCM1pXRnJJR052Ykd4bFkzUnBiMjV6SUVsRWMxeHVJQ0I5SUhKbGRIVnliaUJwZEZ0TlJWUkJYUzUzTzF4dWZUdGNiaTh2SUdGa1pDQnRaWFJoWkdGMFlTQnZiaUJtY21WbGVtVXRabUZ0YVd4NUlHMWxkR2h2WkhNZ1kyRnNiR2x1WjF4dWRtRnlJRzl1Um5KbFpYcGxJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmloR1VrVkZXa1VnSmlZZ2JXVjBZUzVPUlVWRUlDWW1JR2x6UlhoMFpXNXphV0pzWlNocGRDa2dKaVlnSVdoaGN5aHBkQ3dnVFVWVVFTa3BjMlYwVFdWMFlTaHBkQ2s3WEc0Z0lISmxkSFZ5YmlCcGREdGNibjA3WEc1MllYSWdiV1YwWVNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JMUlZrNklDQWdJQ0FnVFVWVVFTeGNiaUFnVGtWRlJEb2dJQ0FnSUdaaGJITmxMRnh1SUNCbVlYTjBTMlY1T2lBZ1ptRnpkRXRsZVN4Y2JpQWdaMlYwVjJWaGF6b2dJR2RsZEZkbFlXc3NYRzRnSUc5dVJuSmxaWHBsT2lCdmJrWnlaV1Y2WlZ4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmJXVjBZUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURjMlhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnWjJ4dlltRnNJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnRaWFJoSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFsZEdFbktWeHVJQ0FzSUdaaGFXeHpJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BYRzRnSUN3Z2NtVmtaV1pwYm1WQmJHd2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTMWhiR3duS1Z4dUlDQXNJR1p2Y2s5bUlDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm05eUxXOW1KeWxjYmlBZ0xDQmhia2x1YzNSaGJtTmxJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFdsdWMzUmhibU5sSnlsY2JpQWdMQ0JwYzA5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnYzJWMFZHOVRkSEpwYm1kVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnWkZBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1YRzRnSUN3Z1pXRmphQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6Snlrb01DbGNiaUFnTENCRVJWTkRVa2xRVkU5U1V5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1RrRk5SU3dnZDNKaGNIQmxjaXdnYldWMGFHOWtjeXdnWTI5dGJXOXVMQ0JKVTE5TlFWQXNJRWxUWDFkRlFVc3BlMXh1SUNCMllYSWdRbUZ6WlNBZ1BTQm5iRzlpWVd4YlRrRk5SVjFjYmlBZ0lDQXNJRU1nSUNBZ0lEMGdRbUZ6WlZ4dUlDQWdJQ3dnUVVSRVJWSWdQU0JKVTE5TlFWQWdQeUFuYzJWMEp5QTZJQ2RoWkdRblhHNGdJQ0FnTENCd2NtOTBieUE5SUVNZ0ppWWdReTV3Y205MGIzUjVjR1ZjYmlBZ0lDQXNJRThnSUNBZ0lEMGdlMzA3WEc0Z0lHbG1LQ0ZFUlZORFVrbFFWRTlTVXlCOGZDQjBlWEJsYjJZZ1F5QWhQU0FuWm5WdVkzUnBiMjRuSUh4OElDRW9TVk5mVjBWQlN5QjhmQ0J3Y205MGJ5NW1iM0pGWVdOb0lDWW1JQ0ZtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lHNWxkeUJES0NrdVpXNTBjbWxsY3lncExtNWxlSFFvS1R0Y2JpQWdmU2twS1h0Y2JpQWdJQ0F2THlCamNtVmhkR1VnWTI5c2JHVmpkR2x2YmlCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUVNZ1BTQmpiMjF0YjI0dVoyVjBRMjl1YzNSeWRXTjBiM0lvZDNKaGNIQmxjaXdnVGtGTlJTd2dTVk5mVFVGUUxDQkJSRVJGVWlrN1hHNGdJQ0FnY21Wa1pXWnBibVZCYkd3b1F5NXdjbTkwYjNSNWNHVXNJRzFsZEdodlpITXBPMXh1SUNBZ0lHMWxkR0V1VGtWRlJDQTlJSFJ5ZFdVN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1F5QTlJSGR5WVhCd1pYSW9ablZ1WTNScGIyNG9kR0Z5WjJWMExDQnBkR1Z5WVdKc1pTbDdYRzRnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJoY21kbGRDd2dReXdnVGtGTlJTd2dKMTlqSnlrN1hHNGdJQ0FnSUNCMFlYSm5aWFF1WDJNZ1BTQnVaWGNnUW1GelpUdGNiaUFnSUNBZ0lHbG1LR2wwWlhKaFlteGxJQ0U5SUhWdVpHVm1hVzVsWkNsbWIzSlBaaWhwZEdWeVlXSnNaU3dnU1ZOZlRVRlFMQ0IwWVhKblpYUmJRVVJFUlZKZExDQjBZWEpuWlhRcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUdWaFkyZ29KMkZrWkN4amJHVmhjaXhrWld4bGRHVXNabTl5UldGamFDeG5aWFFzYUdGekxITmxkQ3hyWlhsekxIWmhiSFZsY3l4bGJuUnlhV1Z6TEhSdlNsTlBUaWN1YzNCc2FYUW9KeXduS1N4bWRXNWpkR2x2YmloTFJWa3BlMXh1SUNBZ0lDQWdkbUZ5SUVsVFgwRkVSRVZTSUQwZ1MwVlpJRDA5SUNkaFpHUW5JSHg4SUV0RldTQTlQU0FuYzJWMEp6dGNiaUFnSUNBZ0lHbG1LRXRGV1NCcGJpQndjbTkwYnlBbUppQWhLRWxUWDFkRlFVc2dKaVlnUzBWWklEMDlJQ2RqYkdWaGNpY3BLV2hwWkdVb1F5NXdjbTkwYjNSNWNHVXNJRXRGV1N3Z1puVnVZM1JwYjI0b1lTd2dZaWw3WEc0Z0lDQWdJQ0FnSUdGdVNXNXpkR0Z1WTJVb2RHaHBjeXdnUXl3Z1MwVlpLVHRjYmlBZ0lDQWdJQ0FnYVdZb0lVbFRYMEZFUkVWU0lDWW1JRWxUWDFkRlFVc2dKaVlnSVdselQySnFaV04wS0dFcEtYSmxkSFZ5YmlCTFJWa2dQVDBnSjJkbGRDY2dQeUIxYm1SbFptbHVaV1FnT2lCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIUm9hWE11WDJOYlMwVlpYU2hoSUQwOVBTQXdJRDhnTUNBNklHRXNJR0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnU1ZOZlFVUkVSVklnUHlCMGFHbHpJRG9nY21WemRXeDBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdhV1lvSjNOcGVtVW5JR2x1SUhCeWIzUnZLV1JRS0VNdWNISnZkRzkwZVhCbExDQW5jMmw2WlNjc0lIdGNiaUFnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMk11YzJsNlpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSE5sZEZSdlUzUnlhVzVuVkdGbktFTXNJRTVCVFVVcE8xeHVYRzRnSUU5YlRrRk5SVjBnUFNCRE8xeHVJQ0FrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeUFySUNSbGVIQnZjblF1VnlBcklDUmxlSEJ2Y25RdVJpd2dUeWs3WEc1Y2JpQWdhV1lvSVVsVFgxZEZRVXNwWTI5dGJXOXVMbk5sZEZOMGNtOXVaeWhETENCT1FVMUZMQ0JKVTE5TlFWQXBPMXh1WEc0Z0lISmxkSFZ5YmlCRE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMjlzYkdWamRHbHZiaTVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURjM1hHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlBd0lDMCtJRUZ5Y21GNUkyWnZja1ZoWTJoY2JpOHZJREVnTFQ0Z1FYSnlZWGtqYldGd1hHNHZMeUF5SUMwK0lFRnljbUY1STJacGJIUmxjbHh1THk4Z015QXRQaUJCY25KaGVTTnpiMjFsWEc0dkx5QTBJQzArSUVGeWNtRjVJMlYyWlhKNVhHNHZMeUExSUMwK0lFRnljbUY1STJacGJtUmNiaTh2SURZZ0xUNGdRWEp5WVhralptbHVaRWx1WkdWNFhHNTJZWElnWTNSNElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJRWxQWW1wbFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZmFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0JoYzJNZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFhOd1pXTnBaWE10WTNKbFlYUmxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0ZSWlVFVXNJQ1JqY21WaGRHVXBlMXh1SUNCMllYSWdTVk5mVFVGUUlDQWdJQ0FnSUNBOUlGUlpVRVVnUFQwZ01WeHVJQ0FnSUN3Z1NWTmZSa2xNVkVWU0lDQWdJQ0E5SUZSWlVFVWdQVDBnTWx4dUlDQWdJQ3dnU1ZOZlUwOU5SU0FnSUNBZ0lDQTlJRlJaVUVVZ1BUMGdNMXh1SUNBZ0lDd2dTVk5mUlZaRlVsa2dJQ0FnSUNBOUlGUlpVRVVnUFQwZ05GeHVJQ0FnSUN3Z1NWTmZSa2xPUkY5SlRrUkZXQ0E5SUZSWlVFVWdQVDBnTmx4dUlDQWdJQ3dnVGs5ZlNFOU1SVk1nSUNBZ0lDQTlJRlJaVUVVZ1BUMGdOU0I4ZkNCSlUxOUdTVTVFWDBsT1JFVllYRzRnSUNBZ0xDQmpjbVZoZEdVZ0lDQWdJQ0FnSUQwZ0pHTnlaV0YwWlNCOGZDQmhjMk03WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2Ymlna2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z2RHaGhkQ2w3WEc0Z0lDQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhSdlQySnFaV04wS0NSMGFHbHpLVnh1SUNBZ0lDQWdMQ0J6Wld4bUlDQWdQU0JKVDJKcVpXTjBLRThwWEc0Z0lDQWdJQ0FzSUdZZ0lDQWdJQ0E5SUdOMGVDaGpZV3hzWW1GamEyWnVMQ0IwYUdGMExDQXpLVnh1SUNBZ0lDQWdMQ0JzWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2h6Wld4bUxteGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ01GeHVJQ0FnSUNBZ0xDQnlaWE4xYkhRZ1BTQkpVMTlOUVZBZ1B5QmpjbVZoZEdVb0pIUm9hWE1zSUd4bGJtZDBhQ2tnT2lCSlUxOUdTVXhVUlZJZ1B5QmpjbVZoZEdVb0pIUm9hWE1zSURBcElEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQXNJSFpoYkN3Z2NtVnpPMXh1SUNBZ0lHWnZjaWc3YkdWdVozUm9JRDRnYVc1a1pYZzdJR2x1WkdWNEt5c3BhV1lvVGs5ZlNFOU1SVk1nZkh3Z2FXNWtaWGdnYVc0Z2MyVnNaaWw3WEc0Z0lDQWdJQ0IyWVd3Z1BTQnpaV3htVzJsdVpHVjRYVHRjYmlBZ0lDQWdJSEpsY3lBOUlHWW9kbUZzTENCcGJtUmxlQ3dnVHlrN1hHNGdJQ0FnSUNCcFppaFVXVkJGS1h0Y2JpQWdJQ0FnSUNBZ2FXWW9TVk5mVFVGUUtYSmxjM1ZzZEZ0cGJtUmxlRjBnUFNCeVpYTTdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXRndYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWW9jbVZ6S1hOM2FYUmphQ2hVV1ZCRktYdGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElETTZJSEpsZEhWeWJpQjBjblZsT3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMjl0WlZ4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnTlRvZ2NtVjBkWEp1SUhaaGJEc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbWFXNWtYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQTJPaUJ5WlhSMWNtNGdhVzVrWlhnN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1pwYm1SSmJtUmxlRnh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9nY21WemRXeDBMbkIxYzJnb2RtRnNLVHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYVd4MFpYSmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1LRWxUWDBWV1JWSlpLWEpsZEhWeWJpQm1ZV3h6WlRzZ0lDQWdJQ0FnSUNBZ0x5OGdaWFpsY25sY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlFbFRYMFpKVGtSZlNVNUVSVmdnUHlBdE1TQTZJRWxUWDFOUFRVVWdmSHdnU1ZOZlJWWkZVbGtnUHlCSlUxOUZWa1ZTV1NBNklISmxjM1ZzZER0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGeWNtRjVMVzFsZEdodlpITXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0EzT0Z4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnT1M0MExqSXVNeUJCY25KaGVWTndaV05wWlhORGNtVmhkR1VvYjNKcFoybHVZV3hCY25KaGVTd2diR1Z1WjNSb0tWeHVkbUZ5SUhOd1pXTnBaWE5EYjI1emRISjFZM1J2Y2lBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxYTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodmNtbG5hVzVoYkN3Z2JHVnVaM1JvS1h0Y2JpQWdjbVYwZFhKdUlHNWxkeUFvYzNCbFkybGxjME52Ym5OMGNuVmpkRzl5S0c5eWFXZHBibUZzS1Nrb2JHVnVaM1JvS1R0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnljbUY1TFhOd1pXTnBaWE10WTNKbFlYUmxMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTnpsY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2dhWE5CY25KaGVTQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MWhjbkpoZVNjcFhHNGdJQ3dnVTFCRlEwbEZVeUFnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmMzQmxZMmxsY3ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRzl5YVdkcGJtRnNLWHRjYmlBZ2RtRnlJRU03WEc0Z0lHbG1LR2x6UVhKeVlYa29iM0pwWjJsdVlXd3BLWHRjYmlBZ0lDQkRJRDBnYjNKcFoybHVZV3d1WTI5dWMzUnlkV04wYjNJN1hHNGdJQ0FnTHk4Z1kzSnZjM010Y21WaGJHMGdabUZzYkdKaFkydGNiaUFnSUNCcFppaDBlWEJsYjJZZ1F5QTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlDaERJRDA5UFNCQmNuSmhlU0I4ZkNCcGMwRnljbUY1S0VNdWNISnZkRzkwZVhCbEtTa3BReUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JwWmlocGMwOWlhbVZqZENoREtTbDdYRzRnSUNBZ0lDQkRJRDBnUTF0VFVFVkRTVVZUWFR0Y2JpQWdJQ0FnSUdsbUtFTWdQVDA5SUc1MWJHd3BReUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0I5WEc0Z0lIMGdjbVYwZFhKdUlFTWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lFRnljbUY1SURvZ1F6dGNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMkZ5Y21GNUxYTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0E0TUZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnTnk0eUxqSWdTWE5CY25KaGVTaGhjbWQxYldWdWRDbGNiblpoY2lCamIyWWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIyWW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUVhKeVlYa3VhWE5CY25KaGVTQjhmQ0JtZFc1amRHbHZiaUJwYzBGeWNtRjVLR0Z5WnlsN1hHNGdJSEpsZEhWeWJpQmpiMllvWVhKbktTQTlQU0FuUVhKeVlYa25PMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhNdFlYSnlZWGt1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBNE1WeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwwUmhkbWxrUW5KMVlXNTBMMDFoY0MxVFpYUXVjSEp2ZEc5MGVYQmxMblJ2U2xOUFRseHVkbUZ5SUNSbGVIQnZjblFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1U0xDQW5VMlYwSnl3Z2UzUnZTbE5QVGpvZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTEwYnkxcWMyOXVKeWtvSjFObGRDY3BmU2s3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0zTG5ObGRDNTBieTFxYzI5dUxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdPREpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlFWVhacFpFSnlkV0Z1ZEM5TllYQXRVMlYwTG5CeWIzUnZkSGx3WlM1MGIwcFRUMDVjYm5aaGNpQmpiR0Z6YzI5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTJ4aGMzTnZaaWNwWEc0Z0lDd2dabkp2YlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV1p5YjIwdGFYUmxjbUZpYkdVbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9Ua0ZOUlNsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjBiMHBUVDA0b0tYdGNiaUFnSUNCcFppaGpiR0Z6YzI5bUtIUm9hWE1wSUNFOUlFNUJUVVVwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRTVCVFVVZ0t5QmNJaU4wYjBwVFQwNGdhWE51SjNRZ1oyVnVaWEpwWTF3aUtUdGNiaUFnSUNCeVpYUjFjbTRnWm5KdmJTaDBhR2x6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOdmJHeGxZM1JwYjI0dGRHOHRhbk52Ymk1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEZ3pYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdabTl5VDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTltYjNJdGIyWW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRHVnlMQ0JKVkVWU1FWUlBVaWw3WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0JiWFR0Y2JpQWdabTl5VDJZb2FYUmxjaXdnWm1Gc2MyVXNJSEpsYzNWc2RDNXdkWE5vTENCeVpYTjFiSFFzSUVsVVJWSkJWRTlTS1R0Y2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMDdYRzVjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZWEp5WVhrdFpuSnZiUzFwZEdWeVlXSnNaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURnMFhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1Wlhod2IzSjBjeTVmWDJWelRXOWtkV3hsSUQwZ2RISjFaVHRjYmx4dWRtRnlJRjlrWldacGJtVlFjbTl3WlhKMGVTQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlrWldacGJtVXRjSEp2Y0dWeWRIbGNJaWs3WEc1Y2JuWmhjaUJmWkdWbWFXNWxVSEp2Y0dWeWRIa3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaR1ZtYVc1bFVISnZjR1Z5ZEhrcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9kR0Z5WjJWMExDQndjbTl3Y3lrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NISnZjSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJrWlhOamNtbHdkRzl5SUQwZ2NISnZjSE5iYVYwN1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtVnVkVzFsY21GaWJHVWdQU0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ2ZId2dabUZzYzJVN1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlXSnNaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQnBaaUFvWENKMllXeDFaVndpSUdsdUlHUmxjMk55YVhCMGIzSXBJR1JsYzJOeWFYQjBiM0l1ZDNKcGRHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdLREFzSUY5a1pXWnBibVZRY205d1pYSjBlVEl1WkdWbVlYVnNkQ2tvZEdGeVoyVjBMQ0JrWlhOamNtbHdkRzl5TG10bGVTd2daR1Z6WTNKcGNIUnZjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hEYjI1emRISjFZM1J2Y2l3Z2NISnZkRzlRY205d2N5d2djM1JoZEdsalVISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZkRzlRY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VzSUhCeWIzUnZVSEp2Y0hNcE8xeHVJQ0FnSUdsbUlDaHpkR0YwYVdOUWNtOXdjeWtnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqVUhKdmNITXBPMXh1SUNBZ0lISmxkSFZ5YmlCRGIyNXpkSEoxWTNSdmNqdGNiaUFnZlR0Y2JuMG9LVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0E0TlZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5a1pXWnBibVV0Y0hKdmNHVnlkSGxjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVTNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGcyWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblI1SnlrN1hHNTJZWElnSkU5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblI1S0dsMExDQnJaWGtzSUdSbGMyTXBlMXh1SUNCeVpYUjFjbTRnSkU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUxDQmtaWE5qS1R0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTROMXh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JpOHZJREU1TGpFdU1pNDBJQzhnTVRVdU1pNHpMallnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcFhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwTENBblQySnFaV04wSnl3Z2UyUmxabWx1WlZCeWIzQmxjblI1T2lCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtZlNrN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1a1pXWnBibVV0Y0hKdmNHVnlkSGt1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBNE9GeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm1WNGNHOXlkSE11WDE5bGMwMXZaSFZzWlNBOUlIUnlkV1U3WEc1Y2JuWmhjaUJmZEhsd1pXOW1NaUE5SUhKbGNYVnBjbVVvWENJdUxpOW9aV3h3WlhKekwzUjVjR1Z2Wmx3aUtUdGNibHh1ZG1GeUlGOTBlWEJsYjJZeklEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZmRIbHdaVzltTWlrN1hHNWNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3SUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN0lHUmxabUYxYkhRNklHOWlhaUI5T3lCOVhHNWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR1oxYm1OMGFXOXVJQ2h6Wld4bUxDQmpZV3hzS1NCN1hHNGdJR2xtSUNnaGMyVnNaaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJTWldabGNtVnVZMlZGY25KdmNpaGNJblJvYVhNZ2FHRnpiaWQwSUdKbFpXNGdhVzVwZEdsaGJHbHpaV1FnTFNCemRYQmxjaWdwSUdoaGMyNG5kQ0JpWldWdUlHTmhiR3hsWkZ3aUtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmpZV3hzSUNZbUlDZ29kSGx3Wlc5bUlHTmhiR3dnUFQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCY0luVnVaR1ZtYVc1bFpGd2lJRG9nS0RBc0lGOTBlWEJsYjJZekxtUmxabUYxYkhRcEtHTmhiR3dwS1NBOVBUMGdYQ0p2WW1wbFkzUmNJaUI4ZkNCMGVYQmxiMllnWTJGc2JDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQS9JR05oYkd3Z09pQnpaV3htTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12Y0c5emMybGliR1ZEYjI1emRISjFZM1J2Y2xKbGRIVnliaTVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURnNVhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1Wlhod2IzSjBjeTVmWDJWelRXOWtkV3hsSUQwZ2RISjFaVHRjYmx4dWRtRnlJRjlwZEdWeVlYUnZjaUE5SUhKbGNYVnBjbVVvWENJdUxpOWpiM0psTFdwekwzTjViV0p2YkM5cGRHVnlZWFJ2Y2x3aUtUdGNibHh1ZG1GeUlGOXBkR1Z5WVhSdmNqSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOXBkR1Z5WVhSdmNpazdYRzVjYm5aaGNpQmZjM2x0WW05c0lEMGdjbVZ4ZFdseVpTaGNJaTR1TDJOdmNtVXRhbk12YzNsdFltOXNYQ0lwTzF4dVhHNTJZWElnWDNONWJXSnZiRElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjl6ZVcxaWIyd3BPMXh1WEc1MllYSWdYM1I1Y0dWdlppQTlJSFI1Y0dWdlppQmZjM2x0WW05c01pNWtaV1poZFd4MElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdkSGx3Wlc5bUlGOXBkR1Z5WVhSdmNqSXVaR1ZtWVhWc2RDQTlQVDBnWENKemVXMWliMnhjSWlBL0lHWjFibU4wYVc5dUlDaHZZbW9wSUhzZ2NtVjBkWEp1SUhSNWNHVnZaaUJ2WW1vN0lIMGdPaUJtZFc1amRHbHZiaUFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2RIbHdaVzltSUY5emVXMWliMnd5TG1SbFptRjFiSFFnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0lnUFQwOUlGOXplVzFpYjJ3eUxtUmxabUYxYkhRZ1B5QmNJbk41YldKdmJGd2lJRG9nZEhsd1pXOW1JRzlpYWpzZ2ZUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnZEhsd1pXOW1JRjl6ZVcxaWIyd3lMbVJsWm1GMWJIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJmZEhsd1pXOW1LRjlwZEdWeVlYUnZjakl1WkdWbVlYVnNkQ2tnUFQwOUlGd2ljM2x0WW05c1hDSWdQeUJtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdiMkpxSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1hDSjFibVJsWm1sdVpXUmNJaUE2SUY5MGVYQmxiMllvYjJKcUtUdGNibjBnT2lCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc0Z0lISmxkSFZ5YmlCdlltb2dKaVlnZEhsd1pXOW1JRjl6ZVcxaWIyd3lMbVJsWm1GMWJIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJ2WW1vdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUY5emVXMWliMnd5TG1SbFptRjFiSFFnUHlCY0luTjViV0p2YkZ3aUlEb2dkSGx3Wlc5bUlHOWlhaUE5UFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUZ3aWRXNWtaV1pwYm1Wa1hDSWdPaUJmZEhsd1pXOW1LRzlpYWlrN1hHNTlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5MGVYQmxiMll1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBNU1GeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMM041YldKdmJDOXBkR1Z5WVhSdmNsd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXplVzFpYjJ3dmFYUmxjbUYwYjNJdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTVNVnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1sMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1VuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmZDJ0ekxXVjRkQ2NwTG1Zb0oybDBaWEpoZEc5eUp5azdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMM041YldKdmJDOXBkR1Z5WVhSdmNpNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGt5WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSmxlSEJ2Y25SekxtWWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkMnR6TFdWNGRDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGt6WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmMzbHRZbTlzWENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDNONWJXSnZiQzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURrMFhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0p5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV6ZVcxaWIyd25LVHRjYm5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzUwYnkxemRISnBibWNuS1R0Y2JuSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1aGMzbHVZeTFwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pjdWMzbHRZbTlzTG05aWMyVnlkbUZpYkdVbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGxONWJXSnZiRHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNMMmx1WkdWNExtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdPVFZjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklFVkRUVUZUWTNKcGNIUWdOaUJ6ZVcxaWIyeHpJSE5vYVcxY2JuWmhjaUJuYkc5aVlXd2dJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dhR0Z6SUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FzSUVSRlUwTlNTVkJVVDFKVElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LVnh1SUNBc0lDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCeVpXUmxabWx1WlNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCTlJWUkJJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0VuS1M1TFJWbGNiaUFnTENBa1ptRnBiSE1nSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6SnlsY2JpQWdMQ0J6YUdGeVpXUWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwWEc0Z0lDd2djMlYwVkc5VGRISnBibWRVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeWNwWEc0Z0lDd2dkV2xrSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktWeHVJQ0FzSUhkcmN5QWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWxjYmlBZ0xDQjNhM05GZUhRZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3kxbGVIUW5LVnh1SUNBc0lIZHJjMFJsWm1sdVpTQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6TFdSbFptbHVaU2NwWEc0Z0lDd2dhMlY1VDJZZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlyWlhsdlppY3BYRzRnSUN3Z1pXNTFiVXRsZVhNZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxiblZ0TFd0bGVYTW5LVnh1SUNBc0lHbHpRWEp5WVhrZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10WVhKeVlYa25LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGNISnBiV2wwYVhabEp5bGNiaUFnTENCamNtVmhkR1ZFWlhOaklDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzQnliM0JsY25SNUxXUmxjMk1uS1Z4dUlDQXNJRjlqY21WaGRHVWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BYRzRnSUN3Z1owOVFUa1Y0ZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdiaTFsZUhRbktWeHVJQ0FzSUNSSFQxQkVJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LVnh1SUNBc0lDUkVVQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0xDQWthMlY1Y3lBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlsY2JpQWdMQ0JuVDFCRUlDQWdJQ0FnSUNBZ0lDQTlJQ1JIVDFCRUxtWmNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUNSRVVDNW1YRzRnSUN3Z1owOVFUaUFnSUNBZ0lDQWdJQ0FnUFNCblQxQk9SWGgwTG1aY2JpQWdMQ0FrVTNsdFltOXNJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNVRlVzFpYjJ4Y2JpQWdMQ0FrU2xOUFRpQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNUtVMDlPWEc0Z0lDd2dYM04wY21sdVoybG1lU0FnSUNBZ1BTQWtTbE5QVGlBbUppQWtTbE5QVGk1emRISnBibWRwWm5sY2JpQWdMQ0JRVWs5VVQxUlpVRVVnSUNBZ0lDQTlJQ2R3Y205MGIzUjVjR1VuWEc0Z0lDd2dTRWxFUkVWT0lDQWdJQ0FnSUNBZ1BTQjNhM01vSjE5b2FXUmtaVzRuS1Z4dUlDQXNJRlJQWDFCU1NVMUpWRWxXUlNBZ0lEMGdkMnR6S0NkMGIxQnlhVzFwZEdsMlpTY3BYRzRnSUN3Z2FYTkZiblZ0SUNBZ0lDQWdJQ0FnUFNCN2ZTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaVnh1SUNBc0lGTjViV0p2YkZKbFoybHpkSEo1SUQwZ2MyaGhjbVZrS0NkemVXMWliMnd0Y21WbmFYTjBjbmtuS1Z4dUlDQXNJRUZzYkZONWJXSnZiSE1nSUNBZ0lEMGdjMmhoY21Wa0tDZHplVzFpYjJ4ekp5bGNiaUFnTENCUFVGTjViV0p2YkhNZ0lDQWdJQ0E5SUhOb1lYSmxaQ2duYjNBdGMzbHRZbTlzY3ljcFhHNGdJQ3dnVDJKcVpXTjBVSEp2ZEc4Z0lDQWdQU0JQWW1wbFkzUmJVRkpQVkU5VVdWQkZYVnh1SUNBc0lGVlRSVjlPUVZSSlZrVWdJQ0FnSUQwZ2RIbHdaVzltSUNSVGVXMWliMndnUFQwZ0oyWjFibU4wYVc5dUoxeHVJQ0FzSUZGUFltcGxZM1FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMbEZQWW1wbFkzUTdYRzR2THlCRWIyNG5kQ0IxYzJVZ2MyVjBkR1Z5Y3lCcGJpQlJkQ0JUWTNKcGNIUXNJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzk2Ykc5cGNtOWpheTlqYjNKbExXcHpMMmx6YzNWbGN5OHhOek5jYm5aaGNpQnpaWFIwWlhJZ1BTQWhVVTlpYW1WamRDQjhmQ0FoVVU5aWFtVmpkRnRRVWs5VVQxUlpVRVZkSUh4OElDRlJUMkpxWldOMFcxQlNUMVJQVkZsUVJWMHVabWx1WkVOb2FXeGtPMXh1WEc0dkx5Qm1ZV3hzWW1GamF5Qm1iM0lnYjJ4a0lFRnVaSEp2YVdRc0lHaDBkSEJ6T2k4dlkyOWtaUzVuYjI5bmJHVXVZMjl0TDNBdmRqZ3ZhWE56ZFdWekwyUmxkR0ZwYkQ5cFpEMDJPRGRjYm5aaGNpQnpaWFJUZVcxaWIyeEVaWE5qSUQwZ1JFVlRRMUpKVUZSUFVsTWdKaVlnSkdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCZlkzSmxZWFJsS0dSUUtIdDlMQ0FuWVNjc0lIdGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUJrVUNoMGFHbHpMQ0FuWVNjc0lIdDJZV3gxWlRvZ04zMHBMbUU3SUgxY2JpQWdmU2twTG1FZ0lUMGdOenRjYm4wcElEOGdablZ1WTNScGIyNG9hWFFzSUd0bGVTd2dSQ2w3WEc0Z0lIWmhjaUJ3Y205MGIwUmxjMk1nUFNCblQxQkVLRTlpYW1WamRGQnliM1J2TENCclpYa3BPMXh1SUNCcFppaHdjbTkwYjBSbGMyTXBaR1ZzWlhSbElFOWlhbVZqZEZCeWIzUnZXMnRsZVYwN1hHNGdJR1JRS0dsMExDQnJaWGtzSUVRcE8xeHVJQ0JwWmlod2NtOTBiMFJsYzJNZ0ppWWdhWFFnSVQwOUlFOWlhbVZqZEZCeWIzUnZLV1JRS0U5aWFtVmpkRkJ5YjNSdkxDQnJaWGtzSUhCeWIzUnZSR1Z6WXlrN1hHNTlJRG9nWkZBN1hHNWNiblpoY2lCM2NtRndJRDBnWm5WdVkzUnBiMjRvZEdGbktYdGNiaUFnZG1GeUlITjViU0E5SUVGc2JGTjViV0p2YkhOYmRHRm5YU0E5SUY5amNtVmhkR1VvSkZONWJXSnZiRnRRVWs5VVQxUlpVRVZkS1R0Y2JpQWdjM2x0TGw5cklEMGdkR0ZuTzF4dUlDQnlaWFIxY200Z2MzbHRPMXh1ZlR0Y2JseHVkbUZ5SUdselUzbHRZbTlzSUQwZ1ZWTkZYMDVCVkVsV1JTQW1KaUIwZVhCbGIyWWdKRk41YldKdmJDNXBkR1Z5WVhSdmNpQTlQU0FuYzNsdFltOXNKeUEvSUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFNBbmMzbHRZbTlzSnp0Y2JuMGdPaUJtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQnBkQ0JwYm5OMFlXNWpaVzltSUNSVGVXMWliMnc3WEc1OU8xeHVYRzUyWVhJZ0pHUmxabWx1WlZCeWIzQmxjblI1SUQwZ1puVnVZM1JwYjI0Z1pHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU3dnUkNsN1hHNGdJR2xtS0dsMElEMDlQU0JQWW1wbFkzUlFjbTkwYnlra1pHVm1hVzVsVUhKdmNHVnlkSGtvVDFCVGVXMWliMnh6TENCclpYa3NJRVFwTzF4dUlDQmhiazlpYW1WamRDaHBkQ2s3WEc0Z0lHdGxlU0E5SUhSdlVISnBiV2wwYVhabEtHdGxlU3dnZEhKMVpTazdYRzRnSUdGdVQySnFaV04wS0VRcE8xeHVJQ0JwWmlob1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTbDdYRzRnSUNBZ2FXWW9JVVF1Wlc1MWJXVnlZV0pzWlNsN1hHNGdJQ0FnSUNCcFppZ2hhR0Z6S0dsMExDQklTVVJFUlU0cEtXUlFLR2wwTENCSVNVUkVSVTRzSUdOeVpXRjBaVVJsYzJNb01Td2dlMzBwS1R0Y2JpQWdJQ0FnSUdsMFcwaEpSRVJGVGwxYmEyVjVYU0E5SUhSeWRXVTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsbUtHaGhjeWhwZEN3Z1NFbEVSRVZPS1NBbUppQnBkRnRJU1VSRVJVNWRXMnRsZVYwcGFYUmJTRWxFUkVWT1hWdHJaWGxkSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JFSUQwZ1gyTnlaV0YwWlNoRUxDQjdaVzUxYldWeVlXSnNaVG9nWTNKbFlYUmxSR1Z6WXlnd0xDQm1ZV3h6WlNsOUtUdGNiaUFnSUNCOUlISmxkSFZ5YmlCelpYUlRlVzFpYjJ4RVpYTmpLR2wwTENCclpYa3NJRVFwTzF4dUlDQjlJSEpsZEhWeWJpQmtVQ2hwZEN3Z2EyVjVMQ0JFS1R0Y2JuMDdYRzUyWVhJZ0pHUmxabWx1WlZCeWIzQmxjblJwWlhNZ1BTQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowYVdWektHbDBMQ0JRS1h0Y2JpQWdZVzVQWW1wbFkzUW9hWFFwTzF4dUlDQjJZWElnYTJWNWN5QTlJR1Z1ZFcxTFpYbHpLRkFnUFNCMGIwbFBZbXBsWTNRb1VDa3BYRzRnSUNBZ0xDQnBJQ0FnSUQwZ01GeHVJQ0FnSUN3Z2JDQTlJR3RsZVhNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JyWlhrN1hHNGdJSGRvYVd4bEtHd2dQaUJwS1NSa1pXWnBibVZRY205d1pYSjBlU2hwZEN3Z2EyVjVJRDBnYTJWNWMxdHBLeXRkTENCUVcydGxlVjBwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dWRtRnlJQ1JqY21WaGRHVWdQU0JtZFc1amRHbHZiaUJqY21WaGRHVW9hWFFzSUZBcGUxeHVJQ0J5WlhSMWNtNGdVQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdYMk55WldGMFpTaHBkQ2tnT2lBa1pHVm1hVzVsVUhKdmNHVnlkR2xsY3loZlkzSmxZWFJsS0dsMEtTd2dVQ2s3WEc1OU8xeHVkbUZ5SUNSd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTQTlJR1oxYm1OMGFXOXVJSEJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsS0d0bGVTbDdYRzRnSUhaaGNpQkZJRDBnYVhORmJuVnRMbU5oYkd3b2RHaHBjeXdnYTJWNUlEMGdkRzlRY21sdGFYUnBkbVVvYTJWNUxDQjBjblZsS1NrN1hHNGdJR2xtS0hSb2FYTWdQVDA5SUU5aWFtVmpkRkJ5YjNSdklDWW1JR2hoY3loQmJHeFRlVzFpYjJ4ekxDQnJaWGtwSUNZbUlDRm9ZWE1vVDFCVGVXMWliMnh6TENCclpYa3BLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdjbVYwZFhKdUlFVWdmSHdnSVdoaGN5aDBhR2x6TENCclpYa3BJSHg4SUNGb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQjhmQ0JvWVhNb2RHaHBjeXdnU0VsRVJFVk9LU0FtSmlCMGFHbHpXMGhKUkVSRlRsMWJhMlY1WFNBL0lFVWdPaUIwY25WbE8xeHVmVHRjYm5aaGNpQWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdablZ1WTNScGIyNGdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHbDBMQ0JyWlhrcGUxeHVJQ0JwZENBZ1BTQjBiMGxQWW1wbFkzUW9hWFFwTzF4dUlDQnJaWGtnUFNCMGIxQnlhVzFwZEdsMlpTaHJaWGtzSUhSeWRXVXBPMXh1SUNCcFppaHBkQ0E5UFQwZ1QySnFaV04wVUhKdmRHOGdKaVlnYUdGektFRnNiRk41YldKdmJITXNJR3RsZVNrZ0ppWWdJV2hoY3loUFVGTjViV0p2YkhNc0lHdGxlU2twY21WMGRYSnVPMXh1SUNCMllYSWdSQ0E5SUdkUFVFUW9hWFFzSUd0bGVTazdYRzRnSUdsbUtFUWdKaVlnYUdGektFRnNiRk41YldKdmJITXNJR3RsZVNrZ0ppWWdJU2hvWVhNb2FYUXNJRWhKUkVSRlRpa2dKaVlnYVhSYlNFbEVSRVZPWFZ0clpYbGRLU2xFTG1WdWRXMWxjbUZpYkdVZ1BTQjBjblZsTzF4dUlDQnlaWFIxY200Z1JEdGNibjA3WEc1MllYSWdKR2RsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1nUFNCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVTVoYldWektHbDBLWHRjYmlBZ2RtRnlJRzVoYldWeklDQTlJR2RQVUU0b2RHOUpUMkpxWldOMEtHbDBLU2xjYmlBZ0lDQXNJSEpsYzNWc2RDQTlJRnRkWEc0Z0lDQWdMQ0JwSUNBZ0lDQWdQU0F3WEc0Z0lDQWdMQ0JyWlhrN1hHNGdJSGRvYVd4bEtHNWhiV1Z6TG14bGJtZDBhQ0ErSUdrcGUxeHVJQ0FnSUdsbUtDRm9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVJRDBnYm1GdFpYTmJhU3NyWFNrZ0ppWWdhMlY1SUNFOUlFaEpSRVJGVGlBbUppQnJaWGtnSVQwZ1RVVlVRU2x5WlhOMWJIUXVjSFZ6YUNoclpYa3BPMXh1SUNCOUlISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OU8xeHVkbUZ5SUNSblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNb2FYUXBlMXh1SUNCMllYSWdTVk5mVDFBZ0lEMGdhWFFnUFQwOUlFOWlhbVZqZEZCeWIzUnZYRzRnSUNBZ0xDQnVZVzFsY3lBZ1BTQm5UMUJPS0VsVFgwOVFJRDhnVDFCVGVXMWliMnh6SURvZ2RHOUpUMkpxWldOMEtHbDBLU2xjYmlBZ0lDQXNJSEpsYzNWc2RDQTlJRnRkWEc0Z0lDQWdMQ0JwSUNBZ0lDQWdQU0F3WEc0Z0lDQWdMQ0JyWlhrN1hHNGdJSGRvYVd4bEtHNWhiV1Z6TG14bGJtZDBhQ0ErSUdrcGUxeHVJQ0FnSUdsbUtHaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa2dQU0J1WVcxbGMxdHBLeXRkS1NBbUppQW9TVk5mVDFBZ1B5Qm9ZWE1vVDJKcVpXTjBVSEp2ZEc4c0lHdGxlU2tnT2lCMGNuVmxLU2x5WlhOMWJIUXVjSFZ6YUNoQmJHeFRlVzFpYjJ4elcydGxlVjBwTzF4dUlDQjlJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlPMXh1WEc0dkx5QXhPUzQwTGpFdU1TQlRlVzFpYjJ3b1cyUmxjMk55YVhCMGFXOXVYU2xjYm1sbUtDRlZVMFZmVGtGVVNWWkZLWHRjYmlBZ0pGTjViV0p2YkNBOUlHWjFibU4wYVc5dUlGTjViV0p2YkNncGUxeHVJQ0FnSUdsbUtIUm9hWE1nYVc1emRHRnVZMlZ2WmlBa1UzbHRZbTlzS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWduVTNsdFltOXNJR2x6SUc1dmRDQmhJR052Ym5OMGNuVmpkRzl5SVNjcE8xeHVJQ0FnSUhaaGNpQjBZV2NnUFNCMWFXUW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREFnUHlCaGNtZDFiV1Z1ZEhOYk1GMGdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQWdJSFpoY2lBa2MyVjBJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBlMXh1SUNBZ0lDQWdhV1lvZEdocGN5QTlQVDBnVDJKcVpXTjBVSEp2ZEc4cEpITmxkQzVqWVd4c0tFOVFVM2x0WW05c2N5d2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ2FXWW9hR0Z6S0hSb2FYTXNJRWhKUkVSRlRpa2dKaVlnYUdGektIUm9hWE5iU0VsRVJFVk9YU3dnZEdGbktTbDBhR2x6VzBoSlJFUkZUbDFiZEdGblhTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2MyVjBVM2x0WW05c1JHVnpZeWgwYUdsekxDQjBZV2NzSUdOeVpXRjBaVVJsYzJNb01Td2dkbUZzZFdVcEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUdsbUtFUkZVME5TU1ZCVVQxSlRJQ1ltSUhObGRIUmxjaWx6WlhSVGVXMWliMnhFWlhOaktFOWlhbVZqZEZCeWIzUnZMQ0IwWVdjc0lIdGpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNJSE5sZERvZ0pITmxkSDBwTzF4dUlDQWdJSEpsZEhWeWJpQjNjbUZ3S0hSaFp5azdYRzRnSUgwN1hHNGdJSEpsWkdWbWFXNWxLQ1JUZVcxaWIyeGJVRkpQVkU5VVdWQkZYU3dnSjNSdlUzUnlhVzVuSnl3Z1puVnVZM1JwYjI0Z2RHOVRkSEpwYm1jb0tYdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZhenRjYmlBZ2ZTazdYRzVjYmlBZ0pFZFBVRVF1WmlBOUlDUm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJN1hHNGdJQ1JFVUM1bUlDQWdQU0FrWkdWbWFXNWxVSEp2Y0dWeWRIazdYRzRnSUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnVKeWt1WmlBOUlHZFBVRTVGZUhRdVppQTlJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6TzF4dUlDQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjR2xsSnlrdVppQWdQU0FrY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVN1hHNGdJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCekp5a3VaaUE5SUNSblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITTdYRzVjYmlBZ2FXWW9SRVZUUTFKSlVGUlBVbE1nSmlZZ0lYSmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LU2w3WEc0Z0lDQWdjbVZrWldacGJtVW9UMkpxWldOMFVISnZkRzhzSUNkd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTY3NJQ1J3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlN3Z2RISjFaU2s3WEc0Z0lIMWNibHh1SUNCM2EzTkZlSFF1WmlBOUlHWjFibU4wYVc5dUtHNWhiV1VwZTF4dUlDQWdJSEpsZEhWeWJpQjNjbUZ3S0hkcmN5aHVZVzFsS1NrN1hHNGdJSDFjYm4xY2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY2dLeUFrWlhod2IzSjBMbGNnS3lBa1pYaHdiM0owTGtZZ0tpQWhWVk5GWDA1QlZFbFdSU3dnZTFONWJXSnZiRG9nSkZONWJXSnZiSDBwTzF4dVhHNW1iM0lvZG1GeUlITjViV0p2YkhNZ1BTQW9YRzRnSUM4dklERTVMalF1TWk0eUxDQXhPUzQwTGpJdU15d2dNVGt1TkM0eUxqUXNJREU1TGpRdU1pNDJMQ0F4T1M0MExqSXVPQ3dnTVRrdU5DNHlMamtzSURFNUxqUXVNaTR4TUN3Z01Ua3VOQzR5TGpFeExDQXhPUzQwTGpJdU1USXNJREU1TGpRdU1pNHhNeXdnTVRrdU5DNHlMakUwWEc0Z0lDZG9ZWE5KYm5OMFlXNWpaU3hwYzBOdmJtTmhkRk53Y21WaFpHRmliR1VzYVhSbGNtRjBiM0lzYldGMFkyZ3NjbVZ3YkdGalpTeHpaV0Z5WTJnc2MzQmxZMmxsY3l4emNHeHBkQ3gwYjFCeWFXMXBkR2wyWlN4MGIxTjBjbWx1WjFSaFp5eDFibk5qYjNCaFlteGxjeWRjYmlrdWMzQnNhWFFvSnl3bktTd2dhU0E5SURBN0lITjViV0p2YkhNdWJHVnVaM1JvSUQ0Z2FUc2dLWGRyY3loemVXMWliMnh6VzJrcksxMHBPMXh1WEc1bWIzSW9kbUZ5SUhONWJXSnZiSE1nUFNBa2EyVjVjeWgzYTNNdWMzUnZjbVVwTENCcElEMGdNRHNnYzNsdFltOXNjeTVzWlc1bmRHZ2dQaUJwT3lBcGQydHpSR1ZtYVc1bEtITjViV0p2YkhOYmFTc3JYU2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVZWVFJWOU9RVlJKVmtVc0lDZFRlVzFpYjJ3bkxDQjdYRzRnSUM4dklERTVMalF1TWk0eElGTjViV0p2YkM1bWIzSW9hMlY1S1Z4dUlDQW5abTl5SnpvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQnlaWFIxY200Z2FHRnpLRk41YldKdmJGSmxaMmx6ZEhKNUxDQnJaWGtnS3owZ0p5Y3BYRzRnSUNBZ0lDQS9JRk41YldKdmJGSmxaMmx6ZEhKNVcydGxlVjFjYmlBZ0lDQWdJRG9nVTNsdFltOXNVbVZuYVhOMGNubGJhMlY1WFNBOUlDUlRlVzFpYjJ3b2EyVjVLVHRjYmlBZ2ZTeGNiaUFnTHk4Z01Ua3VOQzR5TGpVZ1UzbHRZbTlzTG10bGVVWnZjaWh6ZVcwcFhHNGdJR3RsZVVadmNqb2dablZ1WTNScGIyNGdhMlY1Um05eUtHdGxlU2w3WEc0Z0lDQWdhV1lvYVhOVGVXMWliMndvYTJWNUtTbHlaWFIxY200Z2EyVjVUMllvVTNsdFltOXNVbVZuYVhOMGNua3NJR3RsZVNrN1hHNGdJQ0FnZEdoeWIzY2dWSGx3WlVWeWNtOXlLR3RsZVNBcklDY2dhWE1nYm05MElHRWdjM2x0WW05c0lTY3BPMXh1SUNCOUxGeHVJQ0IxYzJWVFpYUjBaWEk2SUdaMWJtTjBhVzl1S0NsN0lITmxkSFJsY2lBOUlIUnlkV1U3SUgwc1hHNGdJSFZ6WlZOcGJYQnNaVG9nWm5WdVkzUnBiMjRvS1hzZ2MyVjBkR1Z5SUQwZ1ptRnNjMlU3SUgxY2JuMHBPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0ZWVTBWZlRrRlVTVlpGTENBblQySnFaV04wSnl3Z2UxeHVJQ0F2THlBeE9TNHhMakl1TWlCUFltcGxZM1F1WTNKbFlYUmxLRThnV3l3Z1VISnZjR1Z5ZEdsbGMxMHBYRzRnSUdOeVpXRjBaVG9nSkdOeVpXRjBaU3hjYmlBZ0x5OGdNVGt1TVM0eUxqUWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0U4c0lGQXNJRUYwZEhKcFluVjBaWE1wWEc0Z0lHUmxabWx1WlZCeWIzQmxjblI1T2lBa1pHVm1hVzVsVUhKdmNHVnlkSGtzWEc0Z0lDOHZJREU1TGpFdU1pNHpJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektFOHNJRkJ5YjNCbGNuUnBaWE1wWEc0Z0lHUmxabWx1WlZCeWIzQmxjblJwWlhNNklDUmtaV1pwYm1WUWNtOXdaWEowYVdWekxGeHVJQ0F2THlBeE9TNHhMakl1TmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRThzSUZBcFhHNGdJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNqb2dKR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpeGNiaUFnTHk4Z01Ua3VNUzR5TGpjZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb1R5bGNiaUFnWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3pvZ0pHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTXNYRzRnSUM4dklERTVMakV1TWk0NElFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9UeWxjYmlBZ1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpPaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4elhHNTlLVHRjYmx4dUx5OGdNalF1TXk0eUlFcFRUMDR1YzNSeWFXNW5hV1o1S0haaGJIVmxJRnNzSUhKbGNHeGhZMlZ5SUZzc0lITndZV05sWFYwcFhHNGtTbE5QVGlBbUppQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNnaFZWTkZYMDVCVkVsV1JTQjhmQ0FrWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ2RtRnlJRk1nUFNBa1UzbHRZbTlzS0NrN1hHNGdJQzh2SUUxVElFVmtaMlVnWTI5dWRtVnlkSE1nYzNsdFltOXNJSFpoYkhWbGN5QjBieUJLVTA5T0lHRnpJSHQ5WEc0Z0lDOHZJRmRsWWt0cGRDQmpiMjUyWlhKMGN5QnplVzFpYjJ3Z2RtRnNkV1Z6SUhSdklFcFRUMDRnWVhNZ2JuVnNiRnh1SUNBdkx5QldPQ0IwYUhKdmQzTWdiMjRnWW05NFpXUWdjM2x0WW05c2MxeHVJQ0J5WlhSMWNtNGdYM04wY21sdVoybG1lU2hiVTEwcElDRTlJQ2RiYm5Wc2JGMG5JSHg4SUY5emRISnBibWRwWm5rb2UyRTZJRk45S1NBaFBTQW5lMzBuSUh4OElGOXpkSEpwYm1kcFpua29UMkpxWldOMEtGTXBLU0FoUFNBbmUzMG5PMXh1ZlNrcExDQW5TbE5QVGljc0lIdGNiaUFnYzNSeWFXNW5hV1o1T2lCbWRXNWpkR2x2YmlCemRISnBibWRwWm5rb2FYUXBlMXh1SUNBZ0lHbG1LR2wwSUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnYVhOVGVXMWliMndvYVhRcEtYSmxkSFZ5YmpzZ0x5OGdTVVU0SUhKbGRIVnlibk1nYzNSeWFXNW5JRzl1SUhWdVpHVm1hVzVsWkZ4dUlDQWdJSFpoY2lCaGNtZHpJRDBnVzJsMFhWeHVJQ0FnSUNBZ0xDQnBJQ0FnSUQwZ01WeHVJQ0FnSUNBZ0xDQnlaWEJzWVdObGNpd2dKSEpsY0d4aFkyVnlPMXh1SUNBZ0lIZG9hV3hsS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlCcEtXRnlaM011Y0hWemFDaGhjbWQxYldWdWRITmJhU3NyWFNrN1hHNGdJQ0FnY21Wd2JHRmpaWElnUFNCaGNtZHpXekZkTzF4dUlDQWdJR2xtS0hSNWNHVnZaaUJ5WlhCc1lXTmxjaUE5UFNBblpuVnVZM1JwYjI0bktTUnlaWEJzWVdObGNpQTlJSEpsY0d4aFkyVnlPMXh1SUNBZ0lHbG1LQ1J5WlhCc1lXTmxjaUI4ZkNBaGFYTkJjbkpoZVNoeVpYQnNZV05sY2lrcGNtVndiR0ZqWlhJZ1BTQm1kVzVqZEdsdmJpaHJaWGtzSUhaaGJIVmxLWHRjYmlBZ0lDQWdJR2xtS0NSeVpYQnNZV05sY2lsMllXeDFaU0E5SUNSeVpYQnNZV05sY2k1allXeHNLSFJvYVhNc0lHdGxlU3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdhV1lvSVdselUzbHRZbTlzS0haaGJIVmxLU2x5WlhSMWNtNGdkbUZzZFdVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JoY21keld6RmRJRDBnY21Wd2JHRmpaWEk3WEc0Z0lDQWdjbVYwZFhKdUlGOXpkSEpwYm1kcFpua3VZWEJ3Ykhrb0pFcFRUMDRzSUdGeVozTXBPMXh1SUNCOVhHNTlLVHRjYmx4dUx5OGdNVGt1TkM0ekxqUWdVM2x0WW05c0xuQnliM1J2ZEhsd1pWdEFRSFJ2VUhKcGJXbDBhWFpsWFNob2FXNTBLVnh1SkZONWJXSnZiRnRRVWs5VVQxUlpVRVZkVzFSUFgxQlNTVTFKVkVsV1JWMGdmSHdnY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwS0NSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFN3Z1ZFOWZVRkpKVFVsVVNWWkZMQ0FrVTNsdFltOXNXMUJTVDFSUFZGbFFSVjB1ZG1Gc2RXVlBaaWs3WEc0dkx5QXhPUzQwTGpNdU5TQlRlVzFpYjJ3dWNISnZkRzkwZVhCbFcwQkFkRzlUZEhKcGJtZFVZV2RkWEc1elpYUlViMU4wY21sdVoxUmhaeWdrVTNsdFltOXNMQ0FuVTNsdFltOXNKeWs3WEc0dkx5QXlNQzR5TGpFdU9TQk5ZWFJvVzBCQWRHOVRkSEpwYm1kVVlXZGRYRzV6WlhSVWIxTjBjbWx1WjFSaFp5aE5ZWFJvTENBblRXRjBhQ2NzSUhSeWRXVXBPMXh1THk4Z01qUXVNeTR6SUVwVFQwNWJRRUIwYjFOMGNtbHVaMVJoWjExY2JuTmxkRlJ2VTNSeWFXNW5WR0ZuS0dkc2IySmhiQzVLVTA5T0xDQW5TbE5QVGljc0lIUnlkV1VwTzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1emVXMWliMnd1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBNU5seHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpZG1GeUlHZHNiMkpoYkNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZjbVVuS1Z4dUlDQXNJRXhKUWxKQlVsa2dJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwWEc0Z0lDd2dkMnR6UlhoMElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpYaDBKeWxjYmlBZ0xDQmtaV1pwYm1WUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1ZN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHNWhiV1VwZTF4dUlDQjJZWElnSkZONWJXSnZiQ0E5SUdOdmNtVXVVM2x0WW05c0lIeDhJQ2hqYjNKbExsTjViV0p2YkNBOUlFeEpRbEpCVWxrZ1B5QjdmU0E2SUdkc2IySmhiQzVUZVcxaWIyd2dmSHdnZTMwcE8xeHVJQ0JwWmlodVlXMWxMbU5vWVhKQmRDZ3dLU0FoUFNBblh5Y2dKaVlnSVNodVlXMWxJR2x1SUNSVGVXMWliMndwS1dSbFptbHVaVkJ5YjNCbGNuUjVLQ1JUZVcxaWIyd3NJRzVoYldVc0lIdDJZV3gxWlRvZ2QydHpSWGgwTG1Zb2JtRnRaU2w5S1R0Y2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzZHJjeTFrWldacGJtVXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0E1TjF4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lkbUZ5SUdkbGRFdGxlWE1nSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnWld3cGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOUpUMkpxWldOMEtHOWlhbVZqZENsY2JpQWdJQ0FzSUd0bGVYTWdJQ0E5SUdkbGRFdGxlWE1vVHlsY2JpQWdJQ0FzSUd4bGJtZDBhQ0E5SUd0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnTENCcGJtUmxlQ0FnUFNBd1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLR3hsYm1kMGFDQStJR2x1WkdWNEtXbG1LRTliYTJWNUlEMGdhMlY1YzF0cGJtUmxlQ3NyWFYwZ1BUMDlJR1ZzS1hKbGRIVnliaUJyWlhrN1hHNTlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXJaWGx2Wmk1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEazRYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5QmhiR3dnWlc1MWJXVnlZV0pzWlNCdlltcGxZM1FnYTJWNWN5d2dhVzVqYkhWa1pYTWdjM2x0WW05c2MxeHVkbUZ5SUdkbGRFdGxlWE1nUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGEyVjVjeWNwWEc0Z0lDd2daMDlRVXlBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCekp5bGNiaUFnTENCd1NVVWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYQnBaU2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhaaGNpQnlaWE4xYkhRZ0lDQWdJRDBnWjJWMFMyVjVjeWhwZENsY2JpQWdJQ0FzSUdkbGRGTjViV0p2YkhNZ1BTQm5UMUJUTG1ZN1hHNGdJR2xtS0dkbGRGTjViV0p2YkhNcGUxeHVJQ0FnSUhaaGNpQnplVzFpYjJ4eklEMGdaMlYwVTNsdFltOXNjeWhwZENsY2JpQWdJQ0FnSUN3Z2FYTkZiblZ0SUNBOUlIQkpSUzVtWEc0Z0lDQWdJQ0FzSUdrZ0lDQWdJQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHdGxlVHRjYmlBZ0lDQjNhR2xzWlNoemVXMWliMnh6TG14bGJtZDBhQ0ErSUdrcGFXWW9hWE5GYm5WdExtTmhiR3dvYVhRc0lHdGxlU0E5SUhONWJXSnZiSE5iYVNzclhTa3BjbVZ6ZFd4MExuQjFjMmdvYTJWNUtUdGNiaUFnZlNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWlc1MWJTMXJaWGx6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ09UbGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW1WNGNHOXlkSE11WmlBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITTdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQnpMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTVRBd1hHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlCbVlXeHNZbUZqYXlCbWIzSWdTVVV4TVNCaWRXZG5lU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeUIzYVhSb0lHbG1jbUZ0WlNCaGJtUWdkMmx1Wkc5M1hHNTJZWElnZEc5SlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2daMDlRVGlBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHNG5LUzVtWEc0Z0lDd2dkRzlUZEhKcGJtY2dJRDBnZTMwdWRHOVRkSEpwYm1jN1hHNWNiblpoY2lCM2FXNWtiM2RPWVcxbGN5QTlJSFI1Y0dWdlppQjNhVzVrYjNjZ1BUMGdKMjlpYW1WamRDY2dKaVlnZDJsdVpHOTNJQ1ltSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6WEc0Z0lEOGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9kMmx1Wkc5M0tTQTZJRnRkTzF4dVhHNTJZWElnWjJWMFYybHVaRzkzVG1GdFpYTWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJR2RQVUU0b2FYUXBPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhKbGRIVnliaUIzYVc1a2IzZE9ZVzFsY3k1emJHbGpaU2dwTzF4dUlDQjlYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3k1bUlEMGdablZ1WTNScGIyNGdaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhwZENsN1hHNGdJSEpsZEhWeWJpQjNhVzVrYjNkT1lXMWxjeUFtSmlCMGIxTjBjbWx1Wnk1allXeHNLR2wwS1NBOVBTQW5XMjlpYW1WamRDQlhhVzVrYjNkZEp5QS9JR2RsZEZkcGJtUnZkMDVoYldWektHbDBLU0E2SUdkUFVFNG9kRzlKVDJKcVpXTjBLR2wwS1NrN1hHNTlPMXh1WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5iM0J1TFdWNGRDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREV3TVZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnTVRrdU1TNHlMamNnTHlBeE5TNHlMak11TkNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loUEtWeHVkbUZ5SUNSclpYbHpJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkNjcFhHNGdJQ3dnYUdsa1pHVnVTMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdFluVm5MV3RsZVhNbktTNWpiMjVqWVhRb0oyeGxibWQwYUNjc0lDZHdjbTkwYjNSNWNHVW5LVHRjYmx4dVpYaHdiM0owY3k1bUlEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWdmSHdnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loUEtYdGNiaUFnY21WMGRYSnVJQ1JyWlhsektFOHNJR2hwWkdSbGJrdGxlWE1wTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkdmNHNHVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4TURKY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJbkpsY1hWcGNtVW9KeTR2WDNkcmN5MWtaV1pwYm1VbktTZ25ZWE41Ym1OSmRHVnlZWFJ2Y2ljcE8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dVlYTjVibU10YVhSbGNtRjBiM0l1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeE1ETmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5KbGNYVnBjbVVvSnk0dlgzZHJjeTFrWldacGJtVW5LU2duYjJKelpYSjJZV0pzWlNjcE8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREV3TkZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNibVY0Y0c5eWRITXVYMTlsYzAxdlpIVnNaU0E5SUhSeWRXVTdYRzVjYm5aaGNpQmZjMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQnlaWEYxYVhKbEtGd2lMaTR2WTI5eVpTMXFjeTl2WW1wbFkzUXZjMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLVHRjYmx4dWRtRnlJRjl6WlhSUWNtOTBiM1I1Y0dWUFpqSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOXpaWFJRY205MGIzUjVjR1ZQWmlrN1hHNWNiblpoY2lCZlkzSmxZWFJsSUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyTnlaV0YwWlZ3aUtUdGNibHh1ZG1GeUlGOWpjbVZoZEdVeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlkzSmxZWFJsS1R0Y2JseHVkbUZ5SUY5MGVYQmxiMll5SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMmhsYkhCbGNuTXZkSGx3Wlc5bVhDSXBPMXh1WEc1MllYSWdYM1I1Y0dWdlpqTWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOTBlWEJsYjJZeUtUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnS0hOMVlrTnNZWE56TENCemRYQmxja05zWVhOektTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2MzVndaWEpEYkdGemN5QWhQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JSE4xY0dWeVEyeGhjM01nSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVUzVndaWElnWlhod2NtVnpjMmx2YmlCdGRYTjBJR1ZwZEdobGNpQmlaU0J1ZFd4c0lHOXlJR0VnWm5WdVkzUnBiMjRzSUc1dmRDQmNJaUFySUNoMGVYQmxiMllnYzNWd1pYSkRiR0Z6Y3lBOVBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lGd2lkVzVrWldacGJtVmtYQ0lnT2lBb01Dd2dYM1I1Y0dWdlpqTXVaR1ZtWVhWc2RDa29jM1Z3WlhKRGJHRnpjeWtwS1R0Y2JpQWdmVnh1WEc0Z0lITjFZa05zWVhOekxuQnliM1J2ZEhsd1pTQTlJQ2d3TENCZlkzSmxZWFJsTWk1a1pXWmhkV3gwS1NoemRYQmxja05zWVhOeklDWW1JSE4xY0dWeVEyeGhjM011Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJNklIdGNiaUFnSUNBZ0lIWmhiSFZsT2lCemRXSkRiR0Z6Y3l4Y2JpQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVmNiaUFnSUNCOVhHNGdJSDBwTzF4dUlDQnBaaUFvYzNWd1pYSkRiR0Z6Y3lrZ1gzTmxkRkJ5YjNSdmRIbHdaVTltTWk1a1pXWmhkV3gwSUQ4Z0tEQXNJRjl6WlhSUWNtOTBiM1I1Y0dWUFpqSXVaR1ZtWVhWc2RDa29jM1ZpUTJ4aGMzTXNJSE4xY0dWeVEyeGhjM01wSURvZ2MzVmlRMnhoYzNNdVgxOXdjbTkwYjE5ZklEMGdjM1Z3WlhKRGJHRnpjenRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMmx1YUdWeWFYUnpMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTVRBMVhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJaY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMll1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeE1EWmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzV6WlhRdGNISnZkRzkwZVhCbExXOW1KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMlk3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1MbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTVRBM1hHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlBeE9TNHhMak11TVRrZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LRThzSUhCeWIzUnZLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblQySnFaV04wSnl3Z2UzTmxkRkJ5YjNSdmRIbHdaVTltT2lCeVpYRjFhWEpsS0NjdUwxOXpaWFF0Y0hKdmRHOG5LUzV6WlhSOUtUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhNRGhjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpOHZJRmR2Y210eklIZHBkR2dnWDE5d2NtOTBiMTlmSUc5dWJIa3VJRTlzWkNCMk9DQmpZVzRuZENCM2IzSnJJSGRwZEdnZ2JuVnNiQ0J3Y205MGJ5QnZZbXBsWTNSekxseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0Y0hKdmRHOGdLaTljYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYm5aaGNpQmphR1ZqYXlBOUlHWjFibU4wYVc5dUtFOHNJSEJ5YjNSdktYdGNiaUFnWVc1UFltcGxZM1FvVHlrN1hHNGdJR2xtS0NGcGMwOWlhbVZqZENod2NtOTBieWtnSmlZZ2NISnZkRzhnSVQwOUlHNTFiR3dwZEdoeWIzY2dWSGx3WlVWeWNtOXlLSEJ5YjNSdklDc2dYQ0k2SUdOaGJpZDBJSE5sZENCaGN5QndjbTkwYjNSNWNHVWhYQ0lwTzF4dWZUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCelpYUTZJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlCOGZDQW9KMTlmY0hKdmRHOWZYeWNnYVc0Z2UzMGdQeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnWm5WdVkzUnBiMjRvZEdWemRDd2dZblZuWjNrc0lITmxkQ2w3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnpaWFFnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1NoR2RXNWpkR2x2Ymk1allXeHNMQ0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d1pDY3BMbVlvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaU3dnSjE5ZmNISnZkRzlmWHljcExuTmxkQ3dnTWlrN1hHNGdJQ0FnSUNBZ0lITmxkQ2gwWlhOMExDQmJYU2s3WEc0Z0lDQWdJQ0FnSUdKMVoyZDVJRDBnSVNoMFpYTjBJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BPMXh1SUNBZ0lDQWdmU0JqWVhSamFDaGxLWHNnWW5Wbloza2dQU0IwY25WbE95QjlYRzRnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2MyVjBVSEp2ZEc5MGVYQmxUMllvVHl3Z2NISnZkRzhwZTF4dUlDQWdJQ0FnSUNCamFHVmpheWhQTENCd2NtOTBieWs3WEc0Z0lDQWdJQ0FnSUdsbUtHSjFaMmQ1S1U4dVgxOXdjbTkwYjE5ZklEMGdjSEp2ZEc4N1hHNGdJQ0FnSUNBZ0lHVnNjMlVnYzJWMEtFOHNJSEJ5YjNSdktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFODdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMG9lMzBzSUdaaGJITmxLU0E2SUhWdVpHVm1hVzVsWkNrc1hHNGdJR05vWldOck9pQmphR1ZqYTF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyVjBMWEJ5YjNSdkxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVEE1WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJOeVpXRjBaVndpS1N3Z1gxOWxjMDF2WkhWc1pUb2dkSEoxWlNCOU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZZM0psWVhSbExtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVEV3WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVkzSmxZWFJsSnlrN1hHNTJZWElnSkU5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHTnlaV0YwWlNoUUxDQkVLWHRjYmlBZ2NtVjBkWEp1SUNSUFltcGxZM1F1WTNKbFlYUmxLRkFzSUVRcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMk55WldGMFpTNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREV4TVZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVMeThnTVRrdU1TNHlMaklnTHlBeE5TNHlMak11TlNCUFltcGxZM1F1WTNKbFlYUmxLRThnV3l3Z1VISnZjR1Z5ZEdsbGMxMHBYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjA5aWFtVmpkQ2NzSUh0amNtVmhkR1U2SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxamNtVmhkR1VuS1gwcE8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVkzSmxZWFJsTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01URXlYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdablZ1WTNScGIyNGdLR2x1YzNSaGJtTmxMQ0JEYjI1emRISjFZM1J2Y2lrZ2UxeHVJQ0JwWmlBb0lTaHBibk4wWVc1alpTQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ1kyRnNiQ0JoSUdOc1lYTnpJR0Z6SUdFZ1puVnVZM1JwYjI1Y0lpazdYRzRnSUgxY2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTVRFelhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2S2lwY2NseHVJQ29nUUd4cFkyVnVjMlZjY2x4dUlDb2dTbUYyWVZOamNtbHdkQ0JKYm5SbGNuQnlaWFJsY2x4eVhHNGdLbHh5WEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXlCSGIyOW5iR1VnU1c1akxseHlYRzRnS2x4eVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4eVhHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEhKY2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4eVhHNGdLbHh5WEc0Z0tpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHlYRzRnS2x4eVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhISmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNjbHh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhISmNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNjbHh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYSEpjYmlBcUwxeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFQm1hV3hsYjNabGNuWnBaWGNnU1c1MFpYSndjbVYwYVc1bklFcGhkbUZUWTNKcGNIUWdhVzRnU21GMllWTmpjbWx3ZEM1Y2NseHVJQ29nUUdGMWRHaHZjaUJtY21GelpYSkFaMjl2WjJ4bExtTnZiU0FvVG1WcGJDQkdjbUZ6WlhJcFhISmNiaUFxTDF4eVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUTNKbFlYUmxJR0VnYm1WM0lHbHVkR1Z5Y0hKbGRHVnlMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjN3aFQySnFaV04wZlNCamIyUmxJRkpoZHlCS1lYWmhVMk55YVhCMElIUmxlSFFnYjNJZ1FWTlVMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnZjSFJmYVc1cGRFWjFibU1nVDNCMGFXOXVZV3dnYVc1cGRHbGhiR2w2WVhScGIyNGdablZ1WTNScGIyNHVJQ0JWYzJWa0lIUnZYSEpjYmlBcUlDQWdJQ0JrWldacGJtVWdRVkJKY3k0Z0lGZG9aVzRnWTJGc2JHVmtJR2wwSUdseklIQmhjM05sWkNCMGFHVWdhVzUwWlhKd2NtVjBaWElnYjJKcVpXTjBJR0Z1WkNCMGFHVmNjbHh1SUNvZ0lDQWdJR2RzYjJKaGJDQnpZMjl3WlNCdlltcGxZM1F1WEhKY2JpQXFJRUJqYjI1emRISjFZM1J2Y2x4eVhHNGdLaTljY2x4dVhISmNibWx0Y0c5eWRDQXFJR0Z6SUdGamIzSnVJR1p5YjIwZ0p5NHZZV052Y200dVpYTXVhbk1uTzF4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1NXNTBaWEp3Y21WMFpYSWdlMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLR052WkdVc0lHOXdkRjlwYm1sMFJuVnVZeWtnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyUmxJRDA5SUNkemRISnBibWNuS1NCN1hISmNiaUFnSUNBZ0lHTnZaR1VnUFNCaFkyOXliaTV3WVhKelpTaGpiMlJsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhSb2FYTXViMkpxWldOMFRXRndJRDBnYm1WM0lFMWhjQ2dwTzF4eVhHNGdJQ0FnZEdocGN5NWhjM1FnUFNCamIyUmxPMXh5WEc0Z0lDQWdkR2hwY3k1cGJtbDBSblZ1WTE4Z1BTQnZjSFJmYVc1cGRFWjFibU03WEhKY2JpQWdJQ0IwYUdsekxuQmhkWE5sWkY4Z1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUM4dklGQnlaV1JsWm1sdVpTQnpiMjFsSUdOdmJXMXZiaUJ3Y21sdGFYUnBkbVZ6SUdadmNpQndaWEptYjNKdFlXNWpaUzVjY2x4dUlDQWdJSFJvYVhNdVZVNUVSVVpKVGtWRUlEMGdibVYzSUVsdWRHVnljSEpsZEdWeUxsQnlhVzFwZEdsMlpTaDFibVJsWm1sdVpXUXNJSFJvYVhNcE8xeHlYRzRnSUNBZ2RHaHBjeTVPVlV4TUlEMGdibVYzSUVsdWRHVnljSEpsZEdWeUxsQnlhVzFwZEdsMlpTaHVkV3hzTENCMGFHbHpLVHRjY2x4dUlDQWdJSFJvYVhNdVZGSlZSU0E5SUc1bGR5QkpiblJsY25CeVpYUmxjaTVRY21sdGFYUnBkbVVvZEhKMVpTd2dkR2hwY3lrN1hISmNiaUFnSUNCMGFHbHpMa1pCVEZORklEMGdibVYzSUVsdWRHVnljSEpsZEdWeUxsQnlhVzFwZEdsMlpTaG1ZV3h6WlN3Z2RHaHBjeWs3WEhKY2JpQWdJQ0IwYUdsekxrNVZUVUpGVWw5YVJWSlBJRDBnYm1WM0lFbHVkR1Z5Y0hKbGRHVnlMbEJ5YVcxcGRHbDJaU2d3TENCMGFHbHpLVHRjY2x4dUlDQWdJSFJvYVhNdVRsVk5Ra1ZTWDA5T1JTQTlJRzVsZHlCSmJuUmxjbkJ5WlhSbGNpNVFjbWx0YVhScGRtVW9NU3dnZEdocGN5azdYSEpjYmlBZ0lDQjBhR2x6TGxOVVVrbE9SMTlGVFZCVVdTQTlJRzVsZHlCSmJuUmxjbkJ5WlhSbGNpNVFjbWx0YVhScGRtVW9KeWNzSUhSb2FYTXBPMXh5WEc0Z0lDQWdkbUZ5SUhOamIzQmxJRDBnZEdocGN5NWpjbVZoZEdWVFkyOXdaU2gwYUdsekxtRnpkQ3dnYm5Wc2JDazdYSEpjYmlBZ0lDQXZMeUJHYVhnZ2RHaGxJSEJoY21WdWRDQndjbTl3WlhKMGFXVnpJRzV2ZHlCMGFHRjBJSFJvWlNCbmJHOWlZV3dnYzJOdmNHVWdaWGhwYzNSekxseHlYRzRnSUNBZ0x5OTBhR2x6TGxWT1JFVkdTVTVGUkM1d1lYSmxiblFnUFNCMWJtUmxabWx1WldRN1hISmNiaUFnSUNBdkwzUm9hWE11VGxWTVRDNXdZWEpsYm5RZ1BTQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQjBhR2x6TGxSU1ZVVXVjR0Z5Wlc1MElEMGdkR2hwY3k1Q1QwOU1SVUZPTzF4eVhHNGdJQ0FnZEdocGN5NUdRVXhUUlM1d1lYSmxiblFnUFNCMGFHbHpMa0pQVDB4RlFVNDdYSEpjYmlBZ0lDQjBhR2x6TGs1VlRVSkZVbDlhUlZKUExuQmhjbVZ1ZENBOUlIUm9hWE11VGxWTlFrVlNPMXh5WEc0Z0lDQWdkR2hwY3k1T1ZVMUNSVkpmVDA1RkxuQmhjbVZ1ZENBOUlIUm9hWE11VGxWTlFrVlNPMXh5WEc0Z0lDQWdkR2hwY3k1VFZGSkpUa2RmUlUxUVZGa3VjR0Z5Wlc1MElEMGdkR2hwY3k1VFZGSkpUa2M3WEhKY2JpQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc2dQU0JiZTF4eVhHNGdJQ0FnSUNCdWIyUmxPaUIwYUdsekxtRnpkQ3hjY2x4dUlDQWdJQ0FnYzJOdmNHVTZJSE5qYjNCbExGeHlYRzRnSUNBZ0lDQjBhR2x6Ulhod2NtVnpjMmx2YmpvZ2MyTnZjR1VzWEhKY2JpQWdJQ0FnSUdSdmJtVTZJR1poYkhObFhISmNiaUFnSUNCOVhUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUZrWkNCdGIzSmxJR052WkdVZ2RHOGdkR2hsSUdsdWRHVnljSEpsZEdWeUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZkNGUFltcGxZM1I5SUdOdlpHVWdVbUYzSUVwaGRtRlRZM0pwY0hRZ2RHVjRkQ0J2Y2lCQlUxUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1lYQndaVzVrUTI5a1pTaGpiMlJsS1NCN1hISmNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxVM1JoWTJ0YmRHaHBjeTV6ZEdGMFpWTjBZV05yTG14bGJtZDBhQ0F0SURGZE8xeHlYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMFpTQjhmQ0J6ZEdGMFpTNXViMlJsTG5SNWNHVWdJVDBnSjFCeWIyZHlZVzBuS1NCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUVWeWNtOXlLQ2RGZUhCbFkzUnBibWNnYjNKcFoybHVZV3dnUVZOVUlIUnZJSE4wWVhKMElIZHBkR2dnWVNCUWNtOW5jbUZ0SUc1dlpHVXVKeWs3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdOdlpHVWdQVDBnSjNOMGNtbHVaeWNwSUh0Y2NseHVJQ0FnSUNBZ1kyOWtaU0E5SUdGamIzSnVMbkJoY25ObEtHTnZaR1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tDRmpiMlJsSUh4OElHTnZaR1V1ZEhsd1pTQWhQU0FuVUhKdlozSmhiU2NwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMFY0Y0dWamRHbHVaeUJ1WlhjZ1FWTlVJSFJ2SUhOMFlYSjBJSGRwZEdnZ1lTQlFjbTluY21GdElHNXZaR1V1SnlrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNBdkx5QkJjSEJsYm1RZ2RHaGxJRzVsZHlCd2NtOW5jbUZ0SUhSdklIUm9aU0J2YkdRZ2IyNWxMbHh5WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHNXZaR1U3SUc1dlpHVWdQU0JqYjJSbExtSnZaSGxiYVYwN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNCemRHRjBaUzV1YjJSbExtSnZaSGt1Y0hWemFDaHViMlJsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhOMFlYUmxMbVJ2Ym1VZ1BTQm1ZV3h6WlR0Y2NseHVJQ0I5WEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSWGhsWTNWMFpTQnZibVVnYzNSbGNDQnZaaUIwYUdVZ2FXNTBaWEp3Y21WMFpYSXVYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQmhJSE4wWlhBZ2QyRnpJR1Y0WldOMWRHVmtMQ0JtWVd4elpTQnBaaUJ1YnlCdGIzSmxJR2x1YzNSeWRXTjBhVzl1Y3k1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdWd0tDa2dlMXh5WEc0Z0lDQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTzF4eVhHNGdJQ0FnYVdZZ0tDRnpkR0YwWlNCOGZDQnpkR0YwWlM1dWIyUmxMblI1Y0dVZ1BUMGdKMUJ5YjJkeVlXMG5JQ1ltSUhOMFlYUmxMbVJ2Ym1VcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbkJoZFhObFpGOHBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMGFHbHpXeWR6ZEdWd0p5QXJJSE4wWVhSbExtNXZaR1V1ZEhsd1pWMG9LVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4eVhHNGdJSDFjY2x4dUlDQmNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkZlR1ZqZFhSbElIUm9aU0JwYm5SbGNuQnlaWFJsY2lCMGJ5QndjbTluY21GdElHTnZiWEJzWlhScGIyNHVJQ0JXZFd4dVpYSmhZbXhsSUhSdklHbHVabWx1YVhSbElHeHZiM0J6TGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnWVNCbGVHVmpkWFJwYjI0Z2FYTWdZWE41Ym1Ob2IyNXZkWE5zZVNCaWJHOWphMlZrTEZ4eVhHNGdJQ0FxSUNBZ0lDQm1ZV3h6WlNCcFppQnVieUJ0YjNKbElHbHVjM1J5ZFdOMGFXOXVjeTVjY2x4dUlDQWdLaTljY2x4dUlDQnlkVzRvS1NCN1hISmNiaUFnSUNCM2FHbHNaU0FvSVhSb2FYTXVjR0YxYzJWa1h5QW1KaUIwYUdsekxuTjBaWEFvS1NrZ2UzMWNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJoZFhObFpGODdYSEpjYmlBZ2ZWeHlYRzRnSUZ4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVsdWFYUnBZV3hwZW1VZ2RHaGxJR2RzYjJKaGJDQnpZMjl3WlNCM2FYUm9JR0oxYVhScGJpQndjbTl3WlhKMGFXVnpJR0Z1WkNCbWRXNWpkR2x2Ym5NdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUhzaFQySnFaV04wZlNCelkyOXdaU0JIYkc5aVlXd2djMk52Y0dVdVhISmNiaUFnSUNvdlhISmNiaUFnYVc1cGRFZHNiMkpoYkZOamIzQmxLSE5qYjNCbEtTQjdYSEpjYmlBZ0lDQXZMeUJKYm1sMGFXRnNhWHBsSUhWdVpXUnBkR0ZpYkdVZ1oyeHZZbUZzSUhCeWIzQmxjblJwWlhNdVhISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hOamIzQmxMQ0FuU1c1bWFXNXBkSGtuTENCMGFHbHpMbU55WldGMFpWQnlhVzFwZEdsMlpTaEpibVpwYm1sMGVTa3NJSFJ5ZFdVcE8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoelkyOXdaU3dnSjA1aFRpY3NJSFJvYVhNdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0U1aFRpa3NJSFJ5ZFdVcE8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoelkyOXdaU3dnSjNWdVpHVm1hVzVsWkNjc0lIUm9hWE11VlU1RVJVWkpUa1ZFTENCMGNuVmxLVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29jMk52Y0dVc0lDZDNhVzVrYjNjbkxDQnpZMjl3WlN3Z2RISjFaU2s3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSE5qYjNCbExDQW5jMlZzWmljc0lITmpiM0JsTENCbVlXeHpaU2s3SUM4dklFVmthWFJoWW14bExseHlYRzRnSUZ4eVhHNGdJQ0FnTHk4Z1NXNXBkR2xoYkdsNlpTQm5iRzlpWVd3Z2IySnFaV04wY3k1Y2NseHVJQ0FnSUhSb2FYTXVhVzVwZEVaMWJtTjBhVzl1S0hOamIzQmxLVHRjY2x4dUlDQWdJSFJvYVhNdWFXNXBkRTlpYW1WamRDaHpZMjl3WlNrN1hISmNiaUFnSUNBdkx5QlZibUZpYkdVZ2RHOGdjMlYwSUhOamIzQmxKM01nY0dGeVpXNTBJSEJ5YVc5eUlDaDBhR2x6TGs5Q1NrVkRWQ0JrYVdRZ2JtOTBJR1Y0YVhOMEtTNWNjbHh1SUNBZ0lITmpiM0JsTG5CaGNtVnVkQ0E5SUhSb2FYTXVUMEpLUlVOVU8xeHlYRzRnSUNBZ2RHaHBjeTVwYm1sMFFYSnlZWGtvYzJOdmNHVXBPMXh5WEc0Z0lDQWdkR2hwY3k1cGJtbDBUblZ0WW1WeUtITmpiM0JsS1R0Y2NseHVJQ0FnSUhSb2FYTXVhVzVwZEZOMGNtbHVaeWh6WTI5d1pTazdYSEpjYmlBZ0lDQjBhR2x6TG1sdWFYUkNiMjlzWldGdUtITmpiM0JsS1R0Y2NseHVJQ0FnSUhSb2FYTXVhVzVwZEVSaGRHVW9jMk52Y0dVcE8xeHlYRzRnSUNBZ2RHaHBjeTVwYm1sMFRXRjBhQ2h6WTI5d1pTazdYSEpjYmlBZ0lDQjBhR2x6TG1sdWFYUlNaV2RGZUhBb2MyTnZjR1VwTzF4eVhHNGdJQ0FnZEdocGN5NXBibWwwU2xOUFRpaHpZMjl3WlNrN1hISmNiaUFnSUNCMGFHbHpMbWx1YVhSRmNuSnZjaWh6WTI5d1pTazdYSEpjYmlBZ1hISmNiaUFnSUNBdkx5QkpibWwwYVdGc2FYcGxJR2RzYjJKaGJDQm1kVzVqZEdsdmJuTXVYSEpjYmlBZ0lDQjJZWElnZEdocGMwbHVkR1Z5Y0hKbGRHVnlJRDBnZEdocGN6dGNjbHh1SUNBZ0lIWmhjaUIzY21Gd2NHVnlPMXh5WEc0Z0lDQWdkM0poY0hCbGNpQTlJR1oxYm1OMGFXOXVLRzUxYlNrZ2UxeHlYRzRnSUNBZ0lDQnVkVzBnUFNCdWRXMGdmSHdnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbFZPUkVWR1NVNUZSRHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2FYTk9ZVTRvYm5WdExuUnZUblZ0WW1WeUtDa3BLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29jMk52Y0dVc0lDZHBjMDVoVGljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtwTzF4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0c1MWJTa2dlMXh5WEc0Z0lDQWdJQ0J1ZFcwZ1BTQnVkVzBnZkh3Z2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGxWT1JFVkdTVTVGUkR0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9hWE5HYVc1cGRHVW9iblZ0TG5SdlRuVnRZbVZ5S0NrcEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2MyTnZjR1VzSUNkcGMwWnBibWwwWlNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtwTzF4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0hOMGNpa2dlMXh5WEc0Z0lDQWdJQ0J6ZEhJZ1BTQnpkSElnZkh3Z2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGxWT1JFVkdTVTVGUkR0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9jR0Z5YzJWR2JHOWhkQ2h6ZEhJdWRHOU9kVzFpWlhJb0tTa3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaHpZMjl3WlN3Z0ozQmhjbk5sUm14dllYUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcEtUdGNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaHpkSElzSUhKaFpHbDRLU0I3WEhKY2JpQWdJQ0FnSUhOMGNpQTlJSE4wY2lCOGZDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVZVNUVSVVpKVGtWRU8xeHlYRzRnSUNBZ0lDQnlZV1JwZUNBOUlISmhaR2w0SUh4OElIUm9hWE5KYm5SbGNuQnlaWFJsY2k1VlRrUkZSa2xPUlVRN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLRnh5WEc0Z0lDQWdJQ0FnSUNBZ2NHRnljMlZKYm5Rb2MzUnlMblJ2VTNSeWFXNW5LQ2tzSUhKaFpHbDRMblJ2VG5WdFltVnlLQ2twS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvYzJOdmNHVXNJQ2R3WVhKelpVbHVkQ2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpa3BPMXh5WEc0Z0lGeHlYRzRnSUNBZ2RtRnlJR1oxYm1NZ1BTQjBhR2x6TG1OeVpXRjBaVTlpYW1WamRDaDBhR2x6TGtaVlRrTlVTVTlPS1R0Y2NseHVJQ0FnSUdaMWJtTXVaWFpoYkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLR1oxYm1Nc0lDZHNaVzVuZEdnbkxDQjBhR2x6TGs1VlRVSkZVbDlQVGtVc0lIUnlkV1VwTzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h6WTI5d1pTd2dKMlYyWVd3bkxDQm1kVzVqS1R0Y2NseHVJQ0JjY2x4dUlDQWdJSFpoY2lCemRISkdkVzVqZEdsdmJuTWdQU0JiWEhKY2JpQWdJQ0FnSUZ0bGMyTmhjR1VzSUNkbGMyTmhjR1VuWFN3Z1czVnVaWE5qWVhCbExDQW5kVzVsYzJOaGNHVW5YU3hjY2x4dUlDQWdJQ0FnVzJSbFkyOWtaVlZTU1N3Z0oyUmxZMjlrWlZWU1NTZGRMQ0JiWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwTENBblpHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MEoxMHNYSEpjYmlBZ0lDQWdJRnRsYm1OdlpHVlZVa2tzSUNkbGJtTnZaR1ZWVWtrblhTd2dXMlZ1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ3dnSjJWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENkZFhISmNiaUFnSUNCZE8xeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnpkSEpHZFc1amRHbHZibk11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdkM0poY0hCbGNpQTlJQ2htZFc1amRHbHZiaWh1WVhScGRtVkdkVzVqS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtITjBjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjM1J5SUQwZ0tITjBjaUI4ZkNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1VlU1RVJVWkpUa1ZFS1M1MGIxTjBjbWx1WnlncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlJRDBnYm1GMGFYWmxSblZ1WXloemRISXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJrWldOdlpHVlZVa2tvSnlWNGVTY3BJSGRwYkd3Z2RHaHliM2NnWVc0Z1pYSnliM0l1SUNCRFlYUmphQ0JoYm1RZ2NtVjBhSEp2ZHk1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMblJvY205M1JYaGpaWEIwYVc5dUtIUm9hWE5KYm5SbGNuQnlaWFJsY2k1VlVrbGZSVkpTVDFJc0lHVXViV1Z6YzJGblpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNoemRISXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTa29jM1J5Um5WdVkzUnBiMjV6VzJsZFd6QmRLVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h6WTI5d1pTd2djM1J5Um5WdVkzUnBiMjV6VzJsZFd6RmRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpa3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lGeHlYRzRnSUNBZ0x5OGdVblZ1SUdGdWVTQjFjMlZ5TFhCeWIzWnBaR1ZrSUdsdWFYUnBZV3hwZW1GMGFXOXVMbHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVhVzVwZEVaMWJtTmZLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVhVzVwZEVaMWJtTmZLSFJvYVhNc0lITmpiM0JsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dTVzVwZEdsaGJHbDZaU0IwYUdVZ1JuVnVZM1JwYjI0Z1kyeGhjM011WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHNoVDJKcVpXTjBmU0J6WTI5d1pTQkhiRzlpWVd3Z2MyTnZjR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdhVzVwZEVaMWJtTjBhVzl1S0hOamIzQmxLU0I3WEhKY2JpQWdJQ0IyWVhJZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5SUQwZ2RHaHBjenRjY2x4dUlDQWdJSFpoY2lCM2NtRndjR1Z5TzF4eVhHNGdJQ0FnTHk4Z1JuVnVZM1JwYjI0Z1kyOXVjM1J5ZFdOMGIzSXVYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9kbUZ5WDJGeVozTXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y0dGeVpXNTBJRDA5SUhSb2FYTkpiblJsY25CeVpYUmxjaTVHVlU1RFZFbFBUaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRU5oYkd4bFpDQjNhWFJvSUc1bGR5NWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JtVjNSblZ1WXlBOUlIUm9hWE03WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzVsZDBaMWJtTWdQU0IwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFQySnFaV04wS0hSb2FYTkpiblJsY25CeVpYUmxjaTVHVlU1RFZFbFBUaWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZMjlrWlNBOUlHRnlaM1Z0Wlc1MGMxdGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNVjB1ZEc5VGRISnBibWNvS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWTI5a1pTQTlJQ2NuTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIWmhjaUJoY21keklEMGdXMTA3WEhKY2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBdElERTdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR0Z5WjNNdWNIVnphQ2hoY21kMWJXVnVkSE5iYVYwdWRHOVRkSEpwYm1jb0tTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnWVhKbmN5QTlJR0Z5WjNNdWFtOXBiaWduTENBbktUdGNjbHh1SUNBZ0lDQWdhV1lnS0dGeVozTXVhVzVrWlhoUFppZ25LU2NwSUNFOUlDMHhLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHliM2NnVTNsdWRHRjRSWEp5YjNJb0owWjFibU4wYVc5dUlHRnlaeUJ6ZEhKcGJtY2dZMjl1ZEdGcGJuTWdjR0Z5Wlc1MGFHVnphWE1uS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQXZMeUJKYm5SbGNtVnpkR2x1WjJ4NUxDQjBhR1VnYzJOdmNHVWdabTl5SUdOdmJuTjBjblZqZEdWa0lHWjFibU4wYVc5dWN5QnBjeUIwYUdVZ1oyeHZZbUZzSUhOamIzQmxMRnh5WEc0Z0lDQWdJQ0F2THlCbGRtVnVJR2xtSUhSb1pYa2dkMlZ5WlNCamIyNXpkSEoxWTNSbFpDQnBiaUJ6YjIxbElHOTBhR1Z5SUhOamIzQmxMbHh5WEc0Z0lDQWdJQ0J1WlhkR2RXNWpMbkJoY21WdWRGTmpiM0JsSUQxY2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNXpkR0YwWlZOMFlXTnJXM1JvYVhOSmJuUmxjbkJ5WlhSbGNpNXpkR0YwWlZOMFlXTnJMbXhsYm1kMGFDQXRJREZkTG5OamIzQmxPMXh5WEc0Z0lDQWdJQ0IyWVhJZ1lYTjBJRDBnWVdOdmNtNHVjR0Z5YzJVb0p5UWdQU0JtZFc1amRHbHZiaWduSUNzZ1lYSm5jeUFySUNjcElIc25JQ3NnWTI5a1pTQXJJQ2Q5SnlrN1hISmNiaUFnSUNBZ0lHNWxkMFoxYm1NdWJtOWtaU0E5SUdGemRDNWliMlI1V3pCZExtVjRjSEpsYzNOcGIyNHVjbWxuYUhRN1hISmNiaUFnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1elpYUlFjbTl3WlhKMGVTaHVaWGRHZFc1akxDQW5iR1Z1WjNSb0p5eGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9ibVYzUm5WdVl5NXViMlJsTG14bGJtZDBhQ2tzSUhSeWRXVXBPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzUm5WdVl6dGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11UmxWT1ExUkpUMDRnUFNCMGFHbHpMbU55WldGMFpVOWlhbVZqZENodWRXeHNLVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29jMk52Y0dVc0lDZEdkVzVqZEdsdmJpY3NJSFJvYVhNdVJsVk9RMVJKVDA0cE8xeHlYRzRnSUNBZ0x5OGdUV0Z1ZFdGc2JIa2djMlYwZFhBZ2RIbHdaU0JoYm1RZ2NISnZkRzkwZVhCbElHSmxZMkYxYzJVZ1kzSmxZWFJsVDJKcUlHUnZaWE51SjNRZ2NtVmpiMmR1YVhwbFhISmNiaUFnSUNBdkx5QjBhR2x6SUc5aWFtVmpkQ0JoY3lCaElHWjFibU4wYVc5dUlDaDBhR2x6TGtaVlRrTlVTVTlPSUdScFpDQnViM1FnWlhocGMzUXBMbHh5WEc0Z0lDQWdkR2hwY3k1R1ZVNURWRWxQVGk1MGVYQmxJRDBnSjJaMWJtTjBhVzl1Snp0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NUdWVTVEVkVsUFRpd2dKM0J5YjNSdmRIbHdaU2NzSUhSb2FYTXVZM0psWVhSbFQySnFaV04wS0c1MWJHd3BLVHRjY2x4dUlDQWdJSFJvYVhNdVJsVk9RMVJKVDA0dWJtRjBhWFpsUm5WdVl5QTlJSGR5WVhCd1pYSTdYSEpjYmlBZ1hISmNiaUFnSUNBdkx5QkRjbVZoZEdVZ2MzUjFZaUJtZFc1amRHbHZibk1nWm05eUlHRndjR3g1SUdGdVpDQmpZV3hzTGx4eVhHNGdJQ0FnTHk4Z1ZHaGxjMlVnWVhKbElIQnliMk5sYzNObFpDQmhjeUJ6Y0dWamFXRnNJR05oYzJWeklHbHVJSE4wWlhCRFlXeHNSWGh3Y21WemMybHZiaTVjY2x4dUlDQWdJSFpoY2lCdWIyUmxJRDBnZTF4eVhHNGdJQ0FnSUNCMGVYQmxPaUFuUm5WdVkzUnBiMjVCY0hCc2VWOG5MRnh5WEc0Z0lDQWdJQ0J3WVhKaGJYTTZJRnRkTEZ4eVhHNGdJQ0FnSUNCcFpEb2diblZzYkN4Y2NseHVJQ0FnSUNBZ1ltOWtlVG9nYm5Wc2JDeGNjbHh1SUNBZ0lDQWdjM1JoY25RNklEQXNYSEpjYmlBZ0lDQWdJR1Z1WkRvZ01GeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoMGFHbHpMa1pWVGtOVVNVOU9MbkJ5YjNCbGNuUnBaWE11Y0hKdmRHOTBlWEJsTENBbllYQndiSGtuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlVaMWJtTjBhVzl1S0c1dlpHVXNJSHQ5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lDQWdibTlrWlNBOUlIdGNjbHh1SUNBZ0lDQWdkSGx3WlRvZ0owWjFibU4wYVc5dVEyRnNiRjhuTEZ4eVhHNGdJQ0FnSUNCd1lYSmhiWE02SUZ0ZExGeHlYRzRnSUNBZ0lDQnBaRG9nYm5Wc2JDeGNjbHh1SUNBZ0lDQWdZbTlrZVRvZ2JuVnNiQ3hjY2x4dUlDQWdJQ0FnYzNSaGNuUTZJREFzWEhKY2JpQWdJQ0FnSUdWdVpEb2dNRnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGtaVlRrTlVTVTlPTG5CeWIzQmxjblJwWlhNdWNISnZkRzkwZVhCbExDQW5ZMkZzYkNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFJuVnVZM1JwYjI0b2JtOWtaU3dnZTMwcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQXZMeUJHZFc1amRHbHZiaUJvWVhNZ2JtOGdjR0Z5Wlc1MElIUnZJR2x1YUdWeWFYUWdabkp2YlN3Z2MyOGdhWFFnYm1WbFpITWdhWFJ6SUc5M2JpQnRZVzVrWVhSdmNubGNjbHh1SUNBZ0lDOHZJSFJ2VTNSeWFXNW5JR0Z1WkNCMllXeDFaVTltSUdaMWJtTjBhVzl1Y3k1Y2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvZEdocGN5NTBiMU4wY21sdVp5Z3BLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29kR2hwY3k1R1ZVNURWRWxQVGk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM1J2VTNSeWFXNW5KeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtTd2dabUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxrWlZUa05VU1U5T0xDQW5kRzlUZEhKcGJtY25MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdJQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLSFJvYVhNdWRtRnNkV1ZQWmlncEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2RHaHBjeTVHVlU1RFZFbFBUaTV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z0ozWmhiSFZsVDJZbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0hkeVlYQndaWElwTENCbVlXeHpaU3dnZEhKMVpTazdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtIUm9hWE11UmxWT1ExUkpUMDRzSUNkMllXeDFaVTltSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUgxY2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsSUhSb1pTQlBZbXBsWTNRZ1kyeGhjM011WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHNoVDJKcVpXTjBmU0J6WTI5d1pTQkhiRzlpWVd3Z2MyTnZjR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdhVzVwZEU5aWFtVmpkQ2h6WTI5d1pTa2dlMXh5WEc0Z0lDQWdkbUZ5SUhSb2FYTkpiblJsY25CeVpYUmxjaUE5SUhSb2FYTTdYSEpjYmlBZ0lDQjJZWElnZDNKaGNIQmxjanRjY2x4dUlDQWdJQzh2SUU5aWFtVmpkQ0JqYjI1emRISjFZM1J2Y2k1Y2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmloMllYSmZZWEpuY3lrZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXdZWEpsYm5RZ1BUMGdkR2hwYzBsdWRHVnljSEpsZEdWeUxrOUNTa1ZEVkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUVOaGJHeGxaQ0IzYVhSb0lHNWxkeTVjY2x4dUlDQWdJQ0FnSUNCMllYSWdibVYzVDJKcUlEMGdkR2hwY3p0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1QySnFJRDBnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbU55WldGMFpVOWlhbVZqZENoMGFHbHpTVzUwWlhKd2NtVjBaWEl1VDBKS1JVTlVLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM1QySnFPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1UFFrcEZRMVFnUFNCMGFHbHpMbU55WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0hkeVlYQndaWElwTzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h6WTI5d1pTd2dKMDlpYW1WamRDY3NJSFJvYVhNdVQwSktSVU5VS1R0Y2NseHVJQ0JjY2x4dUlDQWdJSGR5WVhCd1pYSWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9kR2hwY3k1MGIxTjBjbWx1WnlncEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2RHaHBjeTVQUWtwRlExUXVjSEp2Y0dWeWRHbGxjeTV3Y205MGIzUjVjR1VzSUNkMGIxTjBjbWx1Wnljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNCY2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvZEdocGN5NTJZV3gxWlU5bUtDa3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGs5Q1NrVkRWQzV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z0ozWmhiSFZsVDJZbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0hkeVlYQndaWElwTENCbVlXeHpaU3dnZEhKMVpTazdYSEpjYmlBZ1hISmNiaUFnSUNCM2NtRndjR1Z5SUQwZ1puVnVZM1JwYjI0b2NISnZjQ2tnZTF4eVhHNGdJQ0FnSUNCd2NtOXdJRDBnS0hCeWIzQWdmSHdnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbFZPUkVWR1NVNUZSQ2t1ZEc5VGRISnBibWNvS1R0Y2NseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhSb2FYTXVjSEp2Y0dWeWRHbGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hyWlhrZ1BUMGdjSEp2Y0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNVVVbFZGTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxrWkJURk5GTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxrOUNTa1ZEVkM1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKMmhoYzA5M2JsQnliM0JsY25SNUp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lGeHlYRzRnSUNBZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUtHdGxlU2tnZTF4eVhHNGdJQ0FnSUNCclpYa2dQU0FvYTJWNUlIeDhJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNVZUa1JGUmtsT1JVUXBMblJ2VTNSeWFXNW5LQ2s3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtDRW9hMlY1SUdsdUlIUm9hWE11Ym05dVpXNTFiV1Z5WVdKc1pTa3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGs5Q1NrVkRWQzV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z0ozQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtTd2dabUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJRnh5WEc0Z0lDQWdkM0poY0hCbGNpQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnY0hObGRXUnZUR2x6ZENBOUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZQWW1wbFkzUW9kR2hwYzBsdWRHVnljSEpsZEdWeUxrRlNVa0ZaS1R0Y2NseHVJQ0FnSUNBZ2RtRnlJR2tnUFNBd08xeHlYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2IySnFMbkJ5YjNCbGNuUnBaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6U1c1MFpYSndjbVYwWlhJdWMyVjBVSEp2Y0dWeWRIa29jSE5sZFdSdlRHbHpkQ3dnYVN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbU55WldGMFpWQnlhVzFwZEdsMlpTaHJaWGtwS1R0Y2NseHVJQ0FnSUNBZ0lDQnBLeXM3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhCelpYVmtiMHhwYzNRN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hSb2FYTXVUMEpLUlVOVUxDQW5aMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpa3NJR1poYkhObExDQjBjblZsS1R0Y2NseHVJQ0JjY2x4dUlDQWdJSGR5WVhCd1pYSWdQU0JtZFc1amRHbHZiaWh2WW1vcElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUhCelpYVmtiMHhwYzNRZ1BTQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVDJKcVpXTjBLSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNUJVbEpCV1NrN1hISmNiaUFnSUNBZ0lIWmhjaUJwSUQwZ01EdGNjbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhaTV3Y205d1pYSjBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0d0bGVTQnBiaUJ2WW1vdWJtOXVaVzUxYldWeVlXSnNaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1elpYUlFjbTl3WlhKMGVTaHdjMlYxWkc5TWFYTjBMQ0JwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtHdGxlU2twTzF4eVhHNGdJQ0FnSUNBZ0lHa3JLenRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnY0hObGRXUnZUR2x6ZER0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NVBRa3BGUTFRc0lDZHJaWGx6Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0c5aWFpd2djSEp2Y0N3Z1pHVnpZM0pwY0hSdmNpa2dlMXh5WEc0Z0lDQWdJQ0J3Y205d0lEMGdLSEJ5YjNBZ2ZId2dkR2hwYzBsdWRHVnljSEpsZEdWeUxsVk9SRVZHU1U1RlJDa3VkRzlUZEhKcGJtY29LVHRjY2x4dUlDQWdJQ0FnYVdZZ0tDRW9aR1Z6WTNKcGNIUnZjaUJwYm5OMFlXNWpaVzltSUVsdWRHVnljSEpsZEdWeUxrOWlhbVZqZENrcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QkZjbkp2Y2lnblVISnZjR1Z5ZEhrZ1pHVnpZM0pwY0hScGIyNGdiWFZ6ZENCaVpTQmhiaUJ2WW1wbFkzUXVKeWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUc5aWFqdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2RHaHBjeTVQUWtwRlExUXNJQ2RrWldacGJtVlFjbTl3WlhKMGVTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQjlYSEpjYmlBZ1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpTQjBhR1VnUVhKeVlYa2dZMnhoYzNNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUhzaFQySnFaV04wZlNCelkyOXdaU0JIYkc5aVlXd2djMk52Y0dVdVhISmNiaUFnSUNvdlhISmNiaUFnYVc1cGRFRnljbUY1S0hOamIzQmxLU0I3WEhKY2JpQWdJQ0IyWVhJZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5SUQwZ2RHaHBjenRjY2x4dUlDQWdJSFpoY2lCblpYUkpiblFnUFNCbWRXNWpkR2x2Ymlodlltb3NJR1JsWmlrZ2UxeHlYRzRnSUNBZ0lDQXZMeUJTWlhSMWNtNGdZVzRnYVc1MFpXZGxjaXdnYjNJZ2RHaGxJR1JsWm1GMWJIUXVYSEpjYmlBZ0lDQWdJSFpoY2lCdUlEMGdiMkpxSUQ4Z1RXRjBhQzVtYkc5dmNpaHZZbW91ZEc5T2RXMWlaWElvS1NrZ09pQmtaV1k3WEhKY2JpQWdJQ0FnSUdsbUlDaHBjMDVoVGlodUtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUc0Z1BTQmtaV1k3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUc0N1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMllYSWdjM1J5YVdOMFEyOXRjQ0E5SUdaMWJtTjBhVzl1S0dFc0lHSXBJSHRjY2x4dUlDQWdJQ0FnTHk4Z1UzUnlhV04wSUQwOVBTQmpiMjF3WVhKcGMyOXVMbHh5WEc0Z0lDQWdJQ0JwWmlBb1lTNXBjMUJ5YVcxcGRHbDJaU0FtSmlCaUxtbHpVSEpwYldsMGFYWmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFdVpHRjBZU0E5UFQwZ1lpNWtZWFJoTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCaElEMDlQU0JpTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnZG1GeUlIZHlZWEJ3WlhJN1hISmNiaUFnSUNBdkx5QkJjbkpoZVNCamIyNXpkSEoxWTNSdmNpNWNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaDJZWEpmWVhKbmN5a2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV3WVhKbGJuUWdQVDBnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMa0ZTVWtGWktTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyRnNiR1ZrSUhkcGRHZ2dibVYzTGx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkQmNuSmhlU0E5SUhSb2FYTTdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxkMEZ5Y21GNUlEMGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlU5aWFtVmpkQ2gwYUdselNXNTBaWEp3Y21WMFpYSXVRVkpTUVZrcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSFpoY2lCbWFYSnpkQ0E5SUdGeVozVnRaVzUwYzFzd1hUdGNjbHh1SUNBZ0lDQWdhV1lnS0dacGNuTjBJQ1ltSUdacGNuTjBMblI1Y0dVZ1BUMGdKMjUxYldKbGNpY3BJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9hWE5PWVU0b2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG1GeWNtRjVTVzVrWlhnb1ptbHljM1FwS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMblJvY205M1JYaGpaWEIwYVc5dUtIUm9hWE5KYm5SbGNuQnlaWFJsY2k1U1FVNUhSVjlGVWxKUFVpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TVzUyWVd4cFpDQmhjbkpoZVNCc1pXNW5kR2duS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnYm1WM1FYSnlZWGt1YkdWdVozUm9JRDBnWm1seWMzUXVaR0YwWVR0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYm1WM1FYSnlZWGt1Y0hKdmNHVnlkR2xsYzF0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnYm1WM1FYSnlZWGt1YkdWdVozUm9JRDBnYVR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNRWEp5WVhrN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2RHaHBjeTVCVWxKQldTQTlJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpazdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtITmpiM0JsTENBblFYSnlZWGtuTENCMGFHbHpMa0ZTVWtGWktUdGNjbHh1SUNCY2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2RHaHBjeTV3Y205d1pYSjBhV1Z6VzNSb2FYTXViR1Z1WjNSb0lDMGdNVjA3WEhKY2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVjSEp2Y0dWeWRHbGxjMXQwYUdsekxteGxibWQwYUNBdElERmRPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR1Z1WjNSb0xTMDdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGxWT1JFVkdTVTVGUkR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxrRlNVa0ZaTG5CeWIzQmxjblJwWlhNdWNISnZkRzkwZVhCbExDQW5jRzl3Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0haaGNsOWhjbWR6S1NCN1hISmNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdaWEowYVdWelczUm9hWE11YkdWdVozUm9YU0E5SUdGeVozVnRaVzUwYzF0cFhUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxteGxibWQwYUNzck8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0hSb2FYTXViR1Z1WjNSb0tUdGNjbHh1SUNBZ0lIMDdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtIUm9hWE11UVZKU1FWa3VjSEp2Y0dWeWRHbGxjeTV3Y205MGIzUjVjR1VzSUNkd2RYTm9KeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtTd2dabUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJRnh5WEc0Z0lDQWdkM0poY0hCbGNpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0IwYUdsekxuQnliM0JsY25ScFpYTmJNRjA3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREU3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCbGNuUnBaWE5iYVNBdElERmRJRDBnZEdocGN5NXdjbTl3WlhKMGFXVnpXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxteGxibWQwYUMwdE8xeHlYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TG5CeWIzQmxjblJwWlhOYmRHaHBjeTVzWlc1bmRHaGRPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1VlRrUkZSa2xPUlVRN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NUJVbEpCV1M1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM05vYVdaMEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lGeHlYRzRnSUNBZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUtIWmhjbDloY21kektTQjdYSEpjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCMGFHbHpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnYVMwdEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3WlhKMGFXVnpXMmtnS3lCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvWFNBOUlIUm9hWE11Y0hKdmNHVnlkR2xsYzF0cFhUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0IwYUdsekxteGxibWQwYUNBclBTQmhjbWQxYldWdWRITXViR1Z1WjNSb08xeHlYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjR1Z5ZEdsbGMxdHBYU0E5SUdGeVozVnRaVzUwYzF0cFhUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNoMGFHbHpMbXhsYm1kMGFDazdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGtGU1VrRlpMbkJ5YjNCbGNuUnBaWE11Y0hKdmRHOTBlWEJsTENBbmRXNXphR2xtZENjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNCY2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYUNBdklESTdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCMGJYQWdQU0IwYUdsekxuQnliM0JsY25ScFpYTmJkR2hwY3k1c1pXNW5kR2dnTFNCcElDMGdNVjA3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d1pYSjBhV1Z6VzNSb2FYTXViR1Z1WjNSb0lDMGdhU0F0SURGZElEMGdkR2hwY3k1d2NtOXdaWEowYVdWelcybGRPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0dWeWRHbGxjMXRwWFNBOUlIUnRjRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbFZPUkVWR1NVNUZSRHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVFWSlNRVmt1Y0hKdmNHVnlkR2xsY3k1d2NtOTBiM1I1Y0dVc0lDZHlaWFpsY25ObEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lGeHlYRzRnSUNBZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUtHbHVaR1Y0TENCb2IzZHRZVzU1TENCMllYSmZZWEpuY3lrZ2UxeHlYRzRnSUNBZ0lDQnBibVJsZUNBOUlHZGxkRWx1ZENocGJtUmxlQ3dnTUNrN1hISmNiaUFnSUNBZ0lHbG1JQ2hwYm1SbGVDQThJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlFMWhkR2d1YldGNEtIUm9hWE11YkdWdVozUm9JQ3NnYVc1a1pYZ3NJREFwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ1RXRjBhQzV0YVc0b2FXNWtaWGdzSUhSb2FYTXViR1Z1WjNSb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0JvYjNkdFlXNTVJRDBnWjJWMFNXNTBLR2h2ZDIxaGJua3NJRWx1Wm1sdWFYUjVLVHRjY2x4dUlDQWdJQ0FnYUc5M2JXRnVlU0E5SUUxaGRHZ3ViV2x1S0dodmQyMWhibmtzSUhSb2FYTXViR1Z1WjNSb0lDMGdhVzVrWlhncE8xeHlYRzRnSUNBZ0lDQjJZWElnY21WdGIzWmxaQ0E5SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlBZbXBsWTNRb2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGtGU1VrRlpLVHRjY2x4dUlDQWdJQ0FnTHk4Z1VtVnRiM1psSUhOd1pXTnBabWxsWkNCbGJHVnRaVzUwY3k1Y2NseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJR2x1WkdWNE95QnBJRHdnYVc1a1pYZ2dLeUJvYjNkdFlXNTVPeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlcxdmRtVmtMbkJ5YjNCbGNuUnBaWE5iY21WdGIzWmxaQzVzWlc1bmRHZ3JLMTBnUFNCMGFHbHpMbkJ5YjNCbGNuUnBaWE5iYVYwN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdaWEowYVdWelcybGRJRDBnZEdocGN5NXdjbTl3WlhKMGFXVnpXMmtnS3lCb2IzZHRZVzU1WFR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQXZMeUJOYjNabElHOTBhR1Z5SUdWc1pXMWxiblFnZEc4Z1ptbHNiQ0IwYUdVZ1oyRndMbHh5WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2FXNWtaWGdnS3lCb2IzZHRZVzU1T3lCcElEd2dkR2hwY3k1c1pXNW5kR2dnTFNCb2IzZHRZVzU1T3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCbGNuUnBaWE5iYVYwZ1BTQjBhR2x6TG5CeWIzQmxjblJwWlhOYmFTQXJJR2h2ZDIxaGJubGRPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUM4dklFUmxiR1YwWlNCemRYQmxjbVpzZFc5MWN5QndjbTl3WlhKMGFXVnpMbHh5WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTVzWlc1bmRHZ2dMU0JvYjNkdFlXNTVPeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TG5CeWIzQmxjblJwWlhOYmFWMDdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZEdocGN5NXNaVzVuZEdnZ0xUMGdhRzkzYldGdWVUdGNjbHh1SUNBZ0lDQWdMeThnU1c1elpYSjBJSE53WldOcFptbGxaQ0JwZEdWdGN5NWNjbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SUhSb2FYTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQnBibVJsZURzZ2FTMHRLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d1pYSjBhV1Z6VzJrZ0t5QmhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNbDBnUFNCMGFHbHpMbkJ5YjNCbGNuUnBaWE5iYVYwN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdkR2hwY3k1c1pXNW5kR2dnS3owZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBdElESTdYSEpjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeU95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3WlhKMGFXVnpXMmx1WkdWNElDc2dhU0F0SURKZElEMGdZWEpuZFcxbGJuUnpXMmxkTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpXMXZkbVZrTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NUJVbEpCV1M1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM053YkdsalpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQmNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaHZjSFJmWW1WbmFXNHNJRzl3ZEY5bGJtUXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlHeHBjM1FnUFNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxUMkpxWldOMEtIUm9hWE5KYm5SbGNuQnlaWFJsY2k1QlVsSkJXU2s3WEhKY2JpQWdJQ0FnSUhaaGNpQmlaV2RwYmlBOUlHZGxkRWx1ZENodmNIUmZZbVZuYVc0c0lEQXBPMXh5WEc0Z0lDQWdJQ0JwWmlBb1ltVm5hVzRnUENBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWW1WbmFXNGdQU0IwYUdsekxteGxibWQwYUNBcklHSmxaMmx1TzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lHSmxaMmx1SUQwZ1RXRjBhQzV0WVhnb01Dd2dUV0YwYUM1dGFXNG9ZbVZuYVc0c0lIUm9hWE11YkdWdVozUm9LU2s3WEhKY2JpQWdJQ0FnSUhaaGNpQmxibVFnUFNCblpYUkpiblFvYjNCMFgyVnVaQ3dnZEdocGN5NXNaVzVuZEdncE8xeHlYRzRnSUNBZ0lDQnBaaUFvWlc1a0lEd2dNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHVnVaQ0E5SUhSb2FYTXViR1Z1WjNSb0lDc2daVzVrTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lHVnVaQ0E5SUUxaGRHZ3ViV0Y0S0RBc0lFMWhkR2d1YldsdUtHVnVaQ3dnZEdocGN5NXNaVzVuZEdncEtUdGNjbHh1SUNBZ0lDQWdkbUZ5SUd4bGJtZDBhQ0E5SURBN1hISmNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0JpWldkcGJqc2dhU0E4SUdWdVpEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WjJWMFVISnZjR1Z5ZEhrb2RHaHBjeXdnYVNrN1hISmNiaUFnSUNBZ0lDQWdkR2hwYzBsdWRHVnljSEpsZEdWeUxuTmxkRkJ5YjNCbGNuUjVLR3hwYzNRc0lHeGxibWQwYUNzckxDQmxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiR2x6ZER0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hSb2FYTXVRVkpTUVZrdWNISnZjR1Z5ZEdsbGN5NXdjbTkwYjNSNWNHVXNJQ2R6YkdsalpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQmNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaHZjSFJmYzJWd1lYSmhkRzl5S1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2doYjNCMFgzTmxjR0Z5WVhSdmNpQjhmQ0J2Y0hSZmMyVndZWEpoZEc5eUxtUmhkR0VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaWEFnUFNCMWJtUmxabWx1WldRN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhObGNDQTlJRzl3ZEY5elpYQmhjbUYwYjNJdWRHOVRkSEpwYm1jb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0IyWVhJZ2RHVjRkQ0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFJvYVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMFpYaDBXMmxkSUQwZ2RHaHBjeTV3Y205d1pYSjBhV1Z6VzJsZE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0hSbGVIUXVhbTlwYmloelpYQXBLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVFWSlNRVmt1Y0hKdmNHVnlkR2xsY3k1d2NtOTBiM1I1Y0dVc0lDZHFiMmx1Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0haaGNsOWhjbWR6S1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJzYVhOMElEMGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlU5aWFtVmpkQ2gwYUdselNXNTBaWEp3Y21WMFpYSXVRVkpTUVZrcE8xeHlYRzRnSUNBZ0lDQjJZWElnYkdWdVozUm9JRDBnTUR0Y2NseHVJQ0FnSUNBZ0x5OGdVM1JoY25RZ1lua2dZMjl3ZVdsdVp5QjBhR1VnWTNWeWNtVnVkQ0JoY25KaGVTNWNjbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0IwYUdselNXNTBaWEp3Y21WMFpYSXVaMlYwVUhKdmNHVnlkSGtvZEdocGN5d2dhU2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG5ObGRGQnliM0JsY25SNUtHeHBjM1FzSUd4bGJtZDBhQ3NyTENCbGJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQXZMeUJNYjI5d0lIUm9jbTkxWjJnZ1lXeHNJR0Z5WjNWdFpXNTBjeUJoYm1RZ1kyOXdlU0IwYUdWdElHbHVMbHh5WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwYzBsdWRHVnljSEpsZEdWeUxtbHpZU2gyWVd4MVpTd2dkR2hwYzBsdWRHVnljSEpsZEdWeUxrRlNVa0ZaS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQTdJR29nUENCMllXeDFaUzVzWlc1bmRHZzdJR29yS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaV3hsYldWdWRDQTlJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNW5aWFJRY205d1pYSjBlU2gyWVd4MVpTd2dhaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNXpaWFJRY205d1pYSjBlU2hzYVhOMExDQnNaVzVuZEdnckt5d2daV3hsYldWdWRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTkpiblJsY25CeVpYUmxjaTV6WlhSUWNtOXdaWEowZVNoc2FYTjBMQ0JzWlc1bmRHZ3JLeXdnZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2JHbHpkRHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVFWSlNRVmt1Y0hKdmNHVnlkR2xsY3k1d2NtOTBiM1I1Y0dVc0lDZGpiMjVqWVhRbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0hkeVlYQndaWElwTENCbVlXeHpaU3dnZEhKMVpTazdYSEpjYmlBZ1hISmNiaUFnSUNCM2NtRndjR1Z5SUQwZ1puVnVZM1JwYjI0b2MyVmhjbU5vUld4bGJXVnVkQ3dnYjNCMFgyWnliMjFKYm1SbGVDa2dlMXh5WEc0Z0lDQWdJQ0J6WldGeVkyaEZiR1Z0Wlc1MElEMGdjMlZoY21Ob1JXeGxiV1Z1ZENCOGZDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVZVNUVSVVpKVGtWRU8xeHlYRzRnSUNBZ0lDQjJZWElnWm5KdmJVbHVaR1Y0SUQwZ1oyVjBTVzUwS0c5d2RGOW1jbTl0U1c1a1pYZ3NJREFwTzF4eVhHNGdJQ0FnSUNCcFppQW9abkp2YlVsdVpHVjRJRHdnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJR1p5YjIxSmJtUmxlQ0E5SUhSb2FYTXViR1Z1WjNSb0lDc2dabkp2YlVsdVpHVjRPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUdaeWIyMUpibVJsZUNBOUlFMWhkR2d1YldGNEtEQXNJR1p5YjIxSmJtUmxlQ2s3WEhKY2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQm1jbTl0U1c1a1pYZzdJR2tnUENCMGFHbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WjJWMFVISnZjR1Z5ZEhrb2RHaHBjeXdnYVNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hOMGNtbGpkRU52YlhBb1pXeGxiV1Z1ZEN3Z2MyVmhjbU5vUld4bGJXVnVkQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0drcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbU55WldGMFpWQnlhVzFwZEdsMlpTZ3RNU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxrRlNVa0ZaTG5CeWIzQmxjblJwWlhNdWNISnZkRzkwZVhCbExDQW5hVzVrWlhoUFppY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQmNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaHpaV0Z5WTJoRmJHVnRaVzUwTENCdmNIUmZabkp2YlVsdVpHVjRLU0I3WEhKY2JpQWdJQ0FnSUhObFlYSmphRVZzWlcxbGJuUWdQU0J6WldGeVkyaEZiR1Z0Wlc1MElIeDhJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNVZUa1JGUmtsT1JVUTdYSEpjYmlBZ0lDQWdJSFpoY2lCbWNtOXRTVzVrWlhnZ1BTQm5aWFJKYm5Rb2IzQjBYMlp5YjIxSmJtUmxlQ3dnZEdocGN5NXNaVzVuZEdncE8xeHlYRzRnSUNBZ0lDQnBaaUFvWm5KdmJVbHVaR1Y0SUR3Z01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUdaeWIyMUpibVJsZUNBOUlIUm9hWE11YkdWdVozUm9JQ3NnWm5KdmJVbHVaR1Y0TzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lHWnliMjFKYm1SbGVDQTlJRTFoZEdndWJXbHVLR1p5YjIxSmJtUmxlQ3dnZEdocGN5NXNaVzVuZEdnZ0xTQXhLVHRjY2x4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlHWnliMjFKYm1SbGVEc2dhU0ErUFNBd095QnBMUzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWld4bGJXVnVkQ0E5SUhSb2FYTkpiblJsY25CeVpYUmxjaTVuWlhSUWNtOXdaWEowZVNoMGFHbHpMQ0JwS1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYzNSeWFXTjBRMjl0Y0NobGJHVnRaVzUwTENCelpXRnlZMmhGYkdWdFpXNTBLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYVNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtDMHhLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVFWSlNRVmt1Y0hKdmNHVnlkR2xsY3k1d2NtOTBiM1I1Y0dVc0lDZHNZWE4wU1c1a1pYaFBaaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpa3NJR1poYkhObExDQjBjblZsS1R0Y2NseHVJQ0JjY2x4dUlDQWdJSGR5WVhCd1pYSWdQU0JtZFc1amRHbHZiaWh2Y0hSZlkyOXRjRVoxYm1NcElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUdwelRHbHpkQ0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFJvYVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCcWMweHBjM1JiYVYwZ1BTQjBhR2x6TG5CeWIzQmxjblJwWlhOYmFWMDdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nUVdSa0lHTjFjM1J2YlNCemIzSjBJR052YlhCaGNtbHpiMjRnWm5WdVkzUnBiMjRvYjNCMFgyTnZiWEJHZFc1aktTNWNjbHh1SUNBZ0lDQWdhbk5NYVhOMExuTnZjblFvS1R0Y2NseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnFjMHhwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1YzJWMFVISnZjR1Z5ZEhrb2RHaHBjeXdnYVN3Z2FuTk1hWE4wVzJsZEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hSb2FYTXVRVkpTUVZrdWNISnZjR1Z5ZEdsbGN5NXdjbTkwYjNSNWNHVXNJQ2R6YjNKMEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpTQjBhR1VnVG5WdFltVnlJR05zWVhOekxseHlYRzRnSUNBcUlFQndZWEpoYlNCN0lVOWlhbVZqZEgwZ2MyTnZjR1VnUjJ4dlltRnNJSE5qYjNCbExseHlYRzRnSUNBcUwxeHlYRzRnSUdsdWFYUk9kVzFpWlhJb2MyTnZjR1VwSUh0Y2NseHVJQ0FnSUhaaGNpQjBhR2x6U1c1MFpYSndjbVYwWlhJZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnZG1GeUlIZHlZWEJ3WlhJN1hISmNiaUFnSUNBdkx5Qk9kVzFpWlhJZ1kyOXVjM1J5ZFdOMGIzSXVYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9kbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdkbUZzZFdVZ1BTQjJZV3gxWlNBL0lIWmhiSFZsTG5SdlRuVnRZbVZ5S0NrZ09pQXdPMXh5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV3WVhKbGJuUWdJVDBnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMazVWVFVKRlVpa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklFTmhiR3hsWkNCaGN5Qk9kVzFpWlhJb0tTNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNoMllXeDFaU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0x5OGdRMkZzYkdWa0lHRnpJRzVsZHlCT2RXMWlaWElvS1M1Y2NseHVJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdkbUZzZFdVN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvYVhNdVRsVk5Ra1ZTSUQwZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1R0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvYzJOdmNHVXNJQ2RPZFcxaVpYSW5MQ0IwYUdsekxrNVZUVUpGVWlrN1hISmNiaUFnWEhKY2JpQWdJQ0IyWVhJZ2JuVnRRMjl1YzNSeklEMGdXeWROUVZoZlZrRk1WVVVuTENBblRVbE9YMVpCVEZWRkp5d2dKMDVoVGljc0lDZE9SVWRCVkVsV1JWOUpUa1pKVGtsVVdTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFFUMU5KVkVsV1JWOUpUa1pKVGtsVVdTZGRPMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J1ZFcxRGIyNXpkSE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGs1VlRVSkZVaXdnYm5WdFEyOXVjM1J6VzJsZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxVSEpwYldsMGFYWmxLRTUxYldKbGNsdHVkVzFEYjI1emRITmJhVjFkS1NrN1hISmNiaUFnSUNCOVhISmNiaUFnWEhKY2JpQWdJQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvWm5KaFkzUnBiMjVFYVdkcGRITXBJSHRjY2x4dUlDQWdJQ0FnWm5KaFkzUnBiMjVFYVdkcGRITWdQU0JtY21GamRHbHZia1JwWjJsMGN5QS9JR1p5WVdOMGFXOXVSR2xuYVhSekxuUnZUblZ0WW1WeUtDa2dPaUIxYm1SbFptbHVaV1E3WEhKY2JpQWdJQ0FnSUhaaGNpQnVJRDBnZEdocGN5NTBiMDUxYldKbGNpZ3BPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNodUxuUnZSWGh3YjI1bGJuUnBZV3dvWm5KaFkzUnBiMjVFYVdkcGRITXBLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVRsVk5Ra1ZTTG5CeWIzQmxjblJwWlhNdWNISnZkRzkwZVhCbExDQW5kRzlGZUhCdmJtVnVkR2xoYkNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNCY2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2Ymloa2FXZHBkSE1wSUh0Y2NseHVJQ0FnSUNBZ1pHbG5hWFJ6SUQwZ1pHbG5hWFJ6SUQ4Z1pHbG5hWFJ6TG5SdlRuVnRZbVZ5S0NrZ09pQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJSFpoY2lCdUlEMGdkR2hwY3k1MGIwNTFiV0psY2lncE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG1OeVpXRjBaVkJ5YVcxcGRHbDJaU2h1TG5SdlJtbDRaV1FvWkdsbmFYUnpLU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxrNVZUVUpGVWk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM1J2Um1sNFpXUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9jSEpsWTJsemFXOXVLU0I3WEhKY2JpQWdJQ0FnSUhCeVpXTnBjMmx2YmlBOUlIQnlaV05wYzJsdmJpQS9JSEJ5WldOcGMybHZiaTUwYjA1MWJXSmxjaWdwSURvZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ0lDQjJZWElnYmlBOUlIUm9hWE11ZEc5T2RXMWlaWElvS1R0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9iaTUwYjFCeVpXTnBjMmx2Ymlod2NtVmphWE5wYjI0cEtUdGNjbHh1SUNBZ0lIMDdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtIUm9hWE11VGxWTlFrVlNMbkJ5YjNCbGNuUnBaWE11Y0hKdmRHOTBlWEJsTENBbmRHOVFjbVZqYVhOcGIyNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9jbUZrYVhncElIdGNjbHh1SUNBZ0lDQWdjbUZrYVhnZ1BTQnlZV1JwZUNBL0lISmhaR2w0TG5SdlRuVnRZbVZ5S0NrZ09pQXhNRHRjY2x4dUlDQWdJQ0FnZG1GeUlHNGdQU0IwYUdsekxuUnZUblZ0WW1WeUtDazdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0c0dWRHOVRkSEpwYm1jb2NtRmthWGdwS1R0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hSb2FYTXVUbFZOUWtWU0xuQnliM0JsY25ScFpYTXVjSEp2ZEc5MGVYQmxMQ0FuZEc5VGRISnBibWNuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlU1aGRHbDJaVVoxYm1OMGFXOXVLSGR5WVhCd1pYSXBMQ0JtWVd4elpTd2dkSEoxWlNrN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsSUhSb1pTQlRkSEpwYm1jZ1kyeGhjM011WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHNoVDJKcVpXTjBmU0J6WTI5d1pTQkhiRzlpWVd3Z2MyTnZjR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdhVzVwZEZOMGNtbHVaeWh6WTI5d1pTa2dlMXh5WEc0Z0lDQWdkbUZ5SUhSb2FYTkpiblJsY25CeVpYUmxjaUE5SUhSb2FYTTdYSEpjYmlBZ0lDQjJZWElnZDNKaGNIQmxjanRjY2x4dUlDQWdJQzh2SUZOMGNtbHVaeUJqYjI1emRISjFZM1J2Y2k1Y2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4eVhHNGdJQ0FnSUNCMllXeDFaU0E5SUhaaGJIVmxJRDhnZG1Gc2RXVXVkRzlUZEhKcGJtY29LU0E2SUNjbk8xeHlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXdZWEpsYm5RZ0lUMGdkR2hwYzBsdWRHVnljSEpsZEdWeUxsTlVVa2xPUnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUVOaGJHeGxaQ0JoY3lCVGRISnBibWNvS1M1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG1OeVpXRjBaVkJ5YVcxcGRHbDJaU2gyWVd4MVpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnTHk4Z1EyRnNiR1ZrSUdGeklHNWxkeUJUZEhKcGJtY29LUzVjY2x4dUlDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ2RtRnNkV1U3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHlYRzRnSUNBZ2ZUdGNjbHh1SUNBZ0lIUm9hWE11VTFSU1NVNUhJRDBnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29jMk52Y0dVc0lDZFRkSEpwYm1jbkxDQjBhR2x6TGxOVVVrbE9SeWs3WEhKY2JpQWdYSEpjYmlBZ0lDQjJZWElnWm5WdVkzUnBiMjV6SUQwZ1d5ZDBiMHh2ZDJWeVEyRnpaU2NzSUNkMGIxVndjR1Z5UTJGelpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZDBiMHh2WTJGc1pVeHZkMlZ5UTJGelpTY3NJQ2QwYjB4dlkyRnNaVlZ3Y0dWeVEyRnpaU2RkTzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCbWRXNWpkR2x2Ym5NdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnZDNKaGNIQmxjaUE5SUNobWRXNWpkR2x2YmlodVlYUnBkbVZHZFc1aktTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYm1GMGFYWmxSblZ1WXk1aGNIQnNlU2gwYUdsektTazdYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUNBZ2ZTa29VM1J5YVc1bkxuQnliM1J2ZEhsd1pWdG1kVzVqZEdsdmJuTmJhVjFkS1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoMGFHbHpMbE5VVWtsT1J5NXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaU3dnWm5WdVkzUnBiMjV6VzJsZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQmNjbHh1SUNBZ0lDOHZJRlJ5YVcwZ1puVnVZM1JwYjI0Z2JXRjVJRzV2ZENCbGVHbHpkQ0JwYmlCb2IzTjBJR0p5YjNkelpYSXVJQ0JYY21sMFpTQjBhR1Z0SUdaeWIyMGdjMk55WVhSamFDNWNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ0FnZG1GeUlITjBjaUE5SUhSb2FYTXVkRzlUZEhKcGJtY29LVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2MzUnlMbkpsY0d4aFkyVW9MMTVjWEhNcmZGeGNjeXNrTDJjc0lDY25LU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxsTlVVa2xPUnk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM1J5YVcwbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0hkeVlYQndaWElwTENCbVlXeHpaU3dnZEhKMVpTazdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnpkSElnUFNCMGFHbHpMblJ2VTNSeWFXNW5LQ2s3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtITjBjaTV5WlhCc1lXTmxLQzllWEZ4ekt5OW5MQ0FuSnlrcE8xeHlYRzRnSUNBZ2ZUdGNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2RHaHBjeTVUVkZKSlRrY3VjSEp2Y0dWeWRHbGxjeTV3Y205MGIzUjVjR1VzSUNkMGNtbHRUR1ZtZENjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ0FnZG1GeUlITjBjaUE5SUhSb2FYTXVkRzlUZEhKcGJtY29LVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2MzUnlMbkpsY0d4aFkyVW9MMXhjY3lza0wyY3NJQ2NuS1NrN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoMGFHbHpMbE5VVWtsT1J5NXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaU3dnSjNSeWFXMVNhV2RvZENjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNCY2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmlodWRXMHBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlITjBjaUE5SUhSb2FYTXVkRzlUZEhKcGJtY29LVHRjY2x4dUlDQWdJQ0FnYm5WdElEMGdLRzUxYlNCOGZDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVZVNUVSVVpKVGtWRUtTNTBiMDUxYldKbGNpZ3BPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNoemRISXVZMmhoY2tGMEtHNTFiU2twTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NVRWRkpKVGtjdWNISnZjR1Z5ZEdsbGN5NXdjbTkwYjNSNWNHVXNJQ2RqYUdGeVFYUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9iblZ0S1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ6ZEhJZ1BTQjBhR2x6TG5SdlUzUnlhVzVuS0NrN1hISmNiaUFnSUNBZ0lHNTFiU0E5SUNodWRXMGdmSHdnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbFZPUkVWR1NVNUZSQ2t1ZEc5T2RXMWlaWElvS1R0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9jM1J5TG1Ob1lYSkRiMlJsUVhRb2JuVnRLU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxsTlVVa2xPUnk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKMk5vWVhKRGIyUmxRWFFuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlU1aGRHbDJaVVoxYm1OMGFXOXVLSGR5WVhCd1pYSXBMQ0JtWVd4elpTd2dkSEoxWlNrN1hISmNiaUFnWEhKY2JpQWdJQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvYzJWaGNtTm9WbUZzZFdVc0lHWnliMjFKYm1SbGVDa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2MzUnlJRDBnZEdocGN5NTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdJQ0J6WldGeVkyaFdZV3gxWlNBOUlDaHpaV0Z5WTJoV1lXeDFaU0I4ZkNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1VlU1RVJVWkpUa1ZFS1M1MGIxTjBjbWx1WnlncE8xeHlYRzRnSUNBZ0lDQm1jbTl0U1c1a1pYZ2dQU0JtY205dFNXNWtaWGdnUHlCbWNtOXRTVzVrWlhndWRHOU9kVzFpWlhJb0tTQTZJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb1hISmNiaUFnSUNBZ0lDQWdJQ0J6ZEhJdWFXNWtaWGhQWmloelpXRnlZMmhXWVd4MVpTd2dabkp2YlVsdVpHVjRLU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxsTlVVa2xPUnk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKMmx1WkdWNFQyWW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9jMlZoY21Ob1ZtRnNkV1VzSUdaeWIyMUpibVJsZUNrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnYzNSeUlEMGdkR2hwY3k1MGIxTjBjbWx1WnlncE8xeHlYRzRnSUNBZ0lDQnpaV0Z5WTJoV1lXeDFaU0E5SUNoelpXRnlZMmhXWVd4MVpTQjhmQ0IwYUdselNXNTBaWEp3Y21WMFpYSXVWVTVFUlVaSlRrVkVLUzUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnSUNCbWNtOXRTVzVrWlhnZ1BTQm1jbTl0U1c1a1pYZ2dQeUJtY205dFNXNWtaWGd1ZEc5T2RXMWlaWElvS1NBNklIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvWEhKY2JpQWdJQ0FnSUNBZ0lDQnpkSEl1YkdGemRFbHVaR1Y0VDJZb2MyVmhjbU5vVm1Gc2RXVXNJR1p5YjIxSmJtUmxlQ2twTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NVRWRkpKVGtjdWNISnZjR1Z5ZEdsbGN5NXdjbTkwYjNSNWNHVXNJQ2RzWVhOMFNXNWtaWGhQWmljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNCY2NseHVJQ0FnSUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmloamIyMXdZWEpsVTNSeWFXNW5LU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnpkSElnUFNCMGFHbHpMblJ2VTNSeWFXNW5LQ2s3WEhKY2JpQWdJQ0FnSUdOdmJYQmhjbVZUZEhKcGJtY2dQU0FvWTI5dGNHRnlaVk4wY21sdVp5QjhmQ0IwYUdselNXNTBaWEp3Y21WMFpYSXVWVTVFUlVaSlRrVkVLUzUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbU55WldGMFpWQnlhVzFwZEdsMlpTaHpkSEl1Ykc5allXeGxRMjl0Y0dGeVpTaGpiMjF3WVhKbFUzUnlhVzVuS1NrN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoMGFHbHpMbE5VVWtsT1J5NXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaU3dnSjJ4dlkyRnNaVU52YlhCaGNtVW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9jMlZ3WVhKaGRHOXlMQ0JzYVcxcGRDa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2MzUnlJRDBnZEdocGN5NTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdJQ0JwWmlBb2MyVndZWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYzJWd1lYSmhkRzl5SUQwZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG1sellTaHpaWEJoY21GMGIzSXNJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNVNSVWRGV0ZBcElEOWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVndZWEpoZEc5eUxtUmhkR0VnT2lCelpYQmhjbUYwYjNJdWRHOVRkSEpwYm1jb0tUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIc2dMeThnYVhNZ2RHaHBjeUJ5WldGc2JIa2dibVZqWlhOellYSjVQMXh5WEc0Z0lDQWdJQ0FnSUhObGNHRnlZWFJ2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0JzYVcxcGRDQTlJR3hwYldsMElEOGdiR2x0YVhRdWRHOU9kVzFpWlhJb0tTQTZJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnZG1GeUlHcHpUR2x6ZENBOUlITjBjaTV6Y0d4cGRDaHpaWEJoY21GMGIzSXNJR3hwYldsMEtUdGNjbHh1SUNBZ0lDQWdkbUZ5SUhCelpYVmtiMHhwYzNRZ1BTQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVDJKcVpXTjBLSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNUJVbEpCV1NrN1hISmNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dhbk5NYVhOMExteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG5ObGRGQnliM0JsY25SNUtIQnpaWFZrYjB4cGMzUXNJR2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2FuTk1hWE4wVzJsZEtTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSEJ6WlhWa2IweHBjM1E3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxsTlVVa2xPUnk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM053YkdsMEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lGeHlYRzRnSUNBZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUtHbHVaR1Y0UVN3Z2FXNWtaWGhDS1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ6ZEhJZ1BTQjBhR2x6TG5SdlUzUnlhVzVuS0NrN1hISmNiaUFnSUNBZ0lHbHVaR1Y0UVNBOUlHbHVaR1Y0UVNBL0lHbHVaR1Y0UVM1MGIwNTFiV0psY2lncElEb2dkVzVrWldacGJtVmtPMXh5WEc0Z0lDQWdJQ0JwYm1SbGVFSWdQU0JwYm1SbGVFSWdQeUJwYm1SbGVFSXVkRzlPZFcxaVpYSW9LU0E2SUhWdVpHVm1hVzVsWkR0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9jM1J5TG5OMVluTjBjbWx1WnlocGJtUmxlRUVzSUdsdVpHVjRRaWtwTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NVRWRkpKVGtjdWNISnZjR1Z5ZEdsbGN5NXdjbTkwYjNSNWNHVXNJQ2R6ZFdKemRISnBibWNuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlU1aGRHbDJaVVoxYm1OMGFXOXVLSGR5WVhCd1pYSXBMQ0JtWVd4elpTd2dkSEoxWlNrN1hISmNiaUFnWEhKY2JpQWdJQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvYzNSaGNuUXNJR3hsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2MzUnlJRDBnZEdocGN5NTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdJQ0J6ZEdGeWRDQTlJSE4wWVhKMElEOGdjM1JoY25RdWRHOU9kVzFpWlhJb0tTQTZJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnYkdWdVozUm9JRDBnYkdWdVozUm9JRDhnYkdWdVozUm9MblJ2VG5WdFltVnlLQ2tnT2lCMWJtUmxabWx1WldRN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLSE4wY2k1emRXSnpkSElvYzNSaGNuUXNJR3hsYm1kMGFDa3BPMXh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29kR2hwY3k1VFZGSkpUa2N1Y0hKdmNHVnlkR2xsY3k1d2NtOTBiM1I1Y0dVc0lDZHpkV0p6ZEhJbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0hkeVlYQndaWElwTENCbVlXeHpaU3dnZEhKMVpTazdYSEpjYmlBZ1hISmNiaUFnSUNCM2NtRndjR1Z5SUQwZ1puVnVZM1JwYjI0b2RtRnlYMkZ5WjNNcElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUhOMGNpQTlJSFJvYVhNdWRHOVRkSEpwYm1jb0tUdGNjbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0J6ZEhJZ0t6MGdZWEpuZFcxbGJuUnpXMmxkTG5SdlUzUnlhVzVuS0NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYzNSeUtUdGNjbHh1SUNBZ0lIMDdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtIUm9hWE11VTFSU1NVNUhMbkJ5YjNCbGNuUnBaWE11Y0hKdmRHOTBlWEJsTENBblkyOXVZMkYwSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0dKbFoybHVVMnhwWTJVc0lHVnVaRk5zYVdObEtTQjdYSEpjYmlBZ0lDQWdJSFpoY2lCemRISWdQU0IwYUdsekxuUnZVM1J5YVc1bktDazdYSEpjYmlBZ0lDQWdJR0psWjJsdVUyeHBZMlVnUFNCaVpXZHBibE5zYVdObElEOGdZbVZuYVc1VGJHbGpaUzUwYjA1MWJXSmxjaWdwSURvZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ0lDQmxibVJUYkdsalpTQTlJR1Z1WkZOc2FXTmxJRDhnWlc1a1UyeHBZMlV1ZEc5T2RXMWlaWElvS1NBNklIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYzNSeUxuTnNhV05sS0dKbFoybHVVMnhwWTJVc0lHVnVaRk5zYVdObEtTazdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGxOVVVrbE9SeTV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z0ozTnNhV05sSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0hKbFoyVjRjQ2tnZTF4eVhHNGdJQ0FnSUNCMllYSWdjM1J5SUQwZ2RHaHBjeTUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnSUNCeVpXZGxlSEFnUFNCeVpXZGxlSEFnUHlCeVpXZGxlSEF1WkdGMFlTQTZJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnZG1GeUlHMWhkR05vSUQwZ2MzUnlMbTFoZEdOb0tISmxaMlY0Y0NrN1hISmNiaUFnSUNBZ0lHbG1JQ2h0WVhSamFDQTlQVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVUbFZNVER0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjJZWElnY0hObGRXUnZUR2x6ZENBOUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZQWW1wbFkzUW9kR2hwYzBsdWRHVnljSEpsZEdWeUxrRlNVa0ZaS1R0Y2NseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnRZWFJqYUM1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTkpiblJsY25CeVpYUmxjaTV6WlhSUWNtOXdaWEowZVNod2MyVjFaRzlNYVhOMExDQnBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0cxaGRHTm9XMmxkS1NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIQnpaWFZrYjB4cGMzUTdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGxOVVVrbE9SeTV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z0oyMWhkR05vSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0hKbFoyVjRjQ2tnZTF4eVhHNGdJQ0FnSUNCMllYSWdjM1J5SUQwZ2RHaHBjeTUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnSUNCeVpXZGxlSEFnUFNCeVpXZGxlSEFnUHlCeVpXZGxlSEF1WkdGMFlTQTZJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2MzUnlMbk5sWVhKamFDaHlaV2RsZUhBcEtUdGNjbHh1SUNBZ0lIMDdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtIUm9hWE11VTFSU1NVNUhMbkJ5YjNCbGNuUnBaWE11Y0hKdmRHOTBlWEJsTENBbmMyVmhjbU5vSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU3dnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0hOMVluTjBjaXdnYm1WM1UzVmlVM1J5S1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ6ZEhJZ1BTQjBhR2x6TG5SdlUzUnlhVzVuS0NrN1hISmNiaUFnSUNBZ0lITjFZbk4wY2lBOUlDaHpkV0p6ZEhJZ2ZId2dkR2hwYzBsdWRHVnljSEpsZEdWeUxsVk9SRVZHU1U1RlJDa3VkbUZzZFdWUFppZ3BPMXh5WEc0Z0lDQWdJQ0J1WlhkVGRXSlRkSElnUFNBb2JtVjNVM1ZpVTNSeUlIeDhJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNVZUa1JGUmtsT1JVUXBMblJ2VTNSeWFXNW5LQ2s3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtITjBjaTV5WlhCc1lXTmxLSE4xWW5OMGNpd2dibVYzVTNWaVUzUnlLU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2gwYUdsekxsTlVVa2xPUnk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTd2dKM0psY0d4aFkyVW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9kbUZ5WDJGeVozTXBJSHRjY2x4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCaGNtZDFiV1Z1ZEhOYmFWMGdQU0JoY21kMWJXVnVkSE5iYVYwdWRHOU9kVzFpWlhJb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNoY2NseHVJQ0FnSUNBZ0lDQWdJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1V1WVhCd2JIa29VM1J5YVc1bkxDQmhjbWQxYldWdWRITXBLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVUxUlNTVTVITENBblpuSnZiVU5vWVhKRGIyUmxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtTd2dabUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJRnh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpTQjBhR1VnUW05dmJHVmhiaUJqYkdGemN5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5RlBZbXBsWTNSOUlITmpiM0JsSUVkc2IySmhiQ0J6WTI5d1pTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCcGJtbDBRbTl2YkdWaGJpaHpZMjl3WlNrZ2UxeHlYRzRnSUNBZ2RtRnlJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpQTlJSFJvYVhNN1hISmNiaUFnSUNCMllYSWdkM0poY0hCbGNqdGNjbHh1SUNBZ0lDOHZJRUp2YjJ4bFlXNGdZMjl1YzNSeWRXTjBiM0l1WEhKY2JpQWdJQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTQS9JSFpoYkhWbExuUnZRbTl2YkdWaGJpZ3BJRG9nWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbkJoY21WdWRDQWhQU0IwYUdselNXNTBaWEp3Y21WMFpYSXVRazlQVEVWQlRpa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklFTmhiR3hsWkNCaGN5QkNiMjlzWldGdUtDa3VYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDOHZJRU5oYkd4bFpDQmhjeUJ1WlhjZ1FtOXZiR1ZoYmlncExseHlYRzRnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0IyWVd4MVpUdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NUNUMDlNUlVGT0lEMGdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtUdGNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2MyTnZjR1VzSUNkQ2IyOXNaV0Z1Snl3Z2RHaHBjeTVDVDA5TVJVRk9LVHRjY2x4dUlDQjlPMXh5WEc0Z0lGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVWdkR2hsSUVSaGRHVWdZMnhoYzNNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUhzaFQySnFaV04wZlNCelkyOXdaU0JIYkc5aVlXd2djMk52Y0dVdVhISmNiaUFnSUNvdlhISmNiaUFnYVc1cGRFUmhkR1VvYzJOdmNHVXBJSHRjY2x4dUlDQWdJSFpoY2lCMGFHbHpTVzUwWlhKd2NtVjBaWElnUFNCMGFHbHpPMXh5WEc0Z0lDQWdkbUZ5SUhkeVlYQndaWEk3WEhKY2JpQWdJQ0F2THlCRVlYUmxJR052Ym5OMGNuVmpkRzl5TGx4eVhHNGdJQ0FnZDNKaGNIQmxjaUE5SUdaMWJtTjBhVzl1S0dFc0lHSXNJR01zSUdRc0lHVXNJR1lzSUdncElIdGNjbHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjR0Z5Wlc1MElEMDlJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNUVRVlJGS1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnUTJGc2JHVmtJSGRwZEdnZ2JtVjNMbHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRFWVhSbElEMGdkR2hwY3p0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1JHRjBaU0E5SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlBZbXBsWTNRb2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGtSQlZFVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUdsbUlDZ2hZWEpuZFcxbGJuUnpMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUc1bGQwUmhkR1V1WkdGMFlTQTlJRzVsZHlCRVlYUmxLQ2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBTQXhJQ1ltSUNoaExuUjVjR1VnUFQwZ0ozTjBjbWx1WnljZ2ZIeGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTkpiblJsY25CeVpYUmxjaTVwYzJFb1lTd2dkR2hwYzBsdWRHVnljSEpsZEdWeUxsTlVVa2xPUnlrcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYm1WM1JHRjBaUzVrWVhSaElEMGdibVYzSUVSaGRHVW9ZUzUwYjFOMGNtbHVaeWdwS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhKbmN5QTlJRnR1ZFd4c1hUdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1lYSm5jMXRwSUNzZ01WMGdQU0JoY21kMWJXVnVkSE5iYVYwZ1B5QmhjbWQxYldWdWRITmJhVjB1ZEc5T2RXMWlaWElvS1NBNklIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2JtVjNSR0YwWlM1a1lYUmhJRDBnYm1WM0lDaEdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVXVZbWx1WkM1aGNIQnNlU2hFWVhSbExDQmhjbWR6S1NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkMFJoZEdVN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2RHaHBjeTVFUVZSRklEMGdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtUdGNjbHh1SUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2MyTnZjR1VzSUNkRVlYUmxKeXdnZEdocGN5NUVRVlJGS1R0Y2NseHVJQ0JjY2x4dUlDQWdJQzh2SUZOMFlYUnBZeUJ0WlhSb2IyUnpJRzl1SUVSaGRHVXVYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVJFRlVSU3dnSjI1dmR5Y3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQmNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaGtZWFJsVTNSeWFXNW5LU0I3WEhKY2JpQWdJQ0FnSUdSaGRHVlRkSEpwYm1jZ1BTQmtZWFJsVTNSeWFXNW5JRDhnWkdGMFpWTjBjbWx1Wnk1MGIxTjBjbWx1WnlncElEb2dkVzVrWldacGJtVmtPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNoRVlYUmxMbkJoY25ObEtHUmhkR1ZUZEhKcGJtY3BLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVJFRlVSU3dnSjNCaGNuTmxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZPWVhScGRtVkdkVzVqZEdsdmJpaDNjbUZ3Y0dWeUtTd2dabUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJRnh5WEc0Z0lDQWdkM0poY0hCbGNpQTlJR1oxYm1OMGFXOXVLR0VzSUdJc0lHTXNJR1FzSUdVc0lHWXNJR2dwSUh0Y2NseHVJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCaGNtZHpXMmxkSUQwZ1lYSm5kVzFsYm5SelcybGRJRDhnWVhKbmRXMWxiblJ6VzJsZExuUnZUblZ0WW1WeUtDa2dPaUIxYm1SbFptbHVaV1E3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9SR0YwWlM1VlZFTXVZWEJ3Ykhrb1JHRjBaU3dnWVhKbmN5a3BPMXh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29kR2hwY3k1RVFWUkZMQ0FuVlZSREp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVk9ZWFJwZG1WR2RXNWpkR2x2YmloM2NtRndjR1Z5S1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lGeHlYRzRnSUNBZ0x5OGdSMlYwZEdWeUlHMWxkR2h2WkhNdVhISmNiaUFnSUNCMllYSWdaMlYwUm5WdVkzUnBiMjV6SUQwZ1d5ZG5aWFJFWVhSbEp5d2dKMmRsZEVSaGVTY3NJQ2RuWlhSR2RXeHNXV1ZoY2ljc0lDZG5aWFJJYjNWeWN5Y3NYSEpjYmlBZ0lDQWdJQ0FnSjJkbGRFMXBiR3hwYzJWamIyNWtjeWNzSUNkblpYUk5hVzUxZEdWekp5d2dKMmRsZEUxdmJuUm9KeXdnSjJkbGRGTmxZMjl1WkhNbkxDQW5aMlYwVkdsdFpTY3NYSEpjYmlBZ0lDQWdJQ0FnSjJkbGRGUnBiV1Y2YjI1bFQyWm1jMlYwSnl3Z0oyZGxkRlZVUTBSaGRHVW5MQ0FuWjJWMFZWUkRSR0Y1Snl3Z0oyZGxkRlZVUTBaMWJHeFpaV0Z5Snl4Y2NseHVJQ0FnSUNBZ0lDQW5aMlYwVlZSRFNHOTFjbk1uTENBbloyVjBWVlJEVFdsc2JHbHpaV052Ym1Sekp5d2dKMmRsZEZWVVEwMXBiblYwWlhNbkxDQW5aMlYwVlZSRFRXOXVkR2duTEZ4eVhHNGdJQ0FnSUNBZ0lDZG5aWFJWVkVOVFpXTnZibVJ6Snl3Z0oyZGxkRmxsWVhJblhUdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2daMlYwUm5WdVkzUnBiMjV6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJSGR5WVhCd1pYSWdQU0FvWm5WdVkzUnBiMjRvYm1GMGFYWmxSblZ1WXlrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLSFJvYVhNdVpHRjBZVnR1WVhScGRtVkdkVzVqWFNncEtUdGNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNCOUtTaG5aWFJHZFc1amRHbHZibk5iYVYwcE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtIUm9hWE11UkVGVVJTNXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaU3dnWjJWMFJuVnVZM1JwYjI1elcybGRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpa3NJR1poYkhObExDQjBjblZsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0JjY2x4dUlDQWdJQzh2SUZObGRIUmxjaUJ0WlhSb2IyUnpMbHh5WEc0Z0lDQWdkbUZ5SUhObGRFWjFibU4wYVc5dWN5QTlJRnNuYzJWMFJHRjBaU2NzSUNkelpYUkdkV3hzV1dWaGNpY3NJQ2R6WlhSSWIzVnljeWNzSUNkelpYUk5hV3hzYVhObFkyOXVaSE1uTEZ4eVhHNGdJQ0FnSUNBZ0lDZHpaWFJOYVc1MWRHVnpKeXdnSjNObGRFMXZiblJvSnl3Z0ozTmxkRk5sWTI5dVpITW5MQ0FuYzJWMFZHbHRaU2NzSUNkelpYUlZWRU5FWVhSbEp5eGNjbHh1SUNBZ0lDQWdJQ0FuYzJWMFZWUkRSblZzYkZsbFlYSW5MQ0FuYzJWMFZWUkRTRzkxY25NbkxDQW5jMlYwVlZSRFRXbHNiR2x6WldOdmJtUnpKeXdnSjNObGRGVlVRMDFwYm5WMFpYTW5MRnh5WEc0Z0lDQWdJQ0FnSUNkelpYUlZWRU5OYjI1MGFDY3NJQ2R6WlhSVlZFTlRaV052Ym1Sekp5d2dKM05sZEZsbFlYSW5YVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJWMFJuVnVZM1JwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUhkeVlYQndaWElnUFNBb1puVnVZM1JwYjI0b2JtRjBhWFpsUm5WdVl5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWgyWVhKZllYSm5jeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdGeVozTWdQU0JiWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iYVYwZ1BTQmhjbWQxYldWdWRITmJhVjBnUHlCaGNtZDFiV1Z1ZEhOYmFWMHVkRzlPZFcxaVpYSW9LU0E2SUhWdVpHVm1hVzVsWkR0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZVnR1WVhScGRtVkdkVzVqWFM1aGNIQnNlU2gwYUdsekxtUmhkR0VzSUdGeVozTXBLVHRjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQjlLU2h6WlhSR2RXNWpkR2x2Ym5OYmFWMHBPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVJFRlVSUzV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z2MyVjBSblZ1WTNScGIyNXpXMmxkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCY2NseHVJQ0FnSUM4dklFTnZiblpsY25OcGIyNGdaMlYwZEdWeUlHMWxkR2h2WkhNdVhISmNiaUFnSUNCblpYUkdkVzVqZEdsdmJuTWdQU0JiSjNSdlJHRjBaVk4wY21sdVp5Y3NJQ2QwYjBsVFQxTjBjbWx1Wnljc0lDZDBiMGROVkZOMGNtbHVaeWNzWEhKY2JpQWdJQ0FnSUNBZ0ozUnZURzlqWVd4bFJHRjBaVk4wY21sdVp5Y3NJQ2QwYjB4dlkyRnNaVk4wY21sdVp5Y3NJQ2QwYjB4dlkyRnNaVlJwYldWVGRISnBibWNuTEZ4eVhHNGdJQ0FnSUNBZ0lDZDBiMVJwYldWVGRISnBibWNuTENBbmRHOVZWRU5UZEhKcGJtY25YVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWjJWMFJuVnVZM1JwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUhkeVlYQndaWElnUFNBb1puVnVZM1JwYjI0b2JtRjBhWFpsUm5WdVl5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0hSb2FYTXVaR0YwWVZ0dVlYUnBkbVZHZFc1alhTZ3BLVHRjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQjlLU2huWlhSR2RXNWpkR2x2Ym5OYmFWMHBPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhNdVJFRlVSUzV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z1oyVjBSblZ1WTNScGIyNXpXMmxkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFRtRjBhWFpsUm5WdVkzUnBiMjRvZDNKaGNIQmxjaWtzSUdaaGJITmxMQ0IwY25WbEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOU8xeHlYRzRnSUZ4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVsdWFYUnBZV3hwZW1VZ1RXRjBhQ0J2WW1wbFkzUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIc2hUMkpxWldOMGZTQnpZMjl3WlNCSGJHOWlZV3dnYzJOdmNHVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2FXNXBkRTFoZEdnb2MyTnZjR1VwSUh0Y2NseHVJQ0FnSUhaaGNpQjBhR2x6U1c1MFpYSndjbVYwWlhJZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnZG1GeUlHMTVUV0YwYUNBOUlIUm9hWE11WTNKbFlYUmxUMkpxWldOMEtIUm9hWE11VDBKS1JVTlVLVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29jMk52Y0dVc0lDZE5ZWFJvSnl3Z2JYbE5ZWFJvS1R0Y2NseHVJQ0FnSUhaaGNpQnRZWFJvUTI5dWMzUnpJRDBnV3lkRkp5d2dKMHhPTWljc0lDZE1UakV3Snl3Z0oweFBSekpGSnl3Z0oweFBSekV3UlNjc0lDZFFTU2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVTFGU1ZERmZNaWNzSUNkVFVWSlVNaWRkTzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdFlYUm9RMjl1YzNSekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvYlhsTllYUm9MQ0J0WVhSb1EyOXVjM1J6VzJsZExGeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWUWNtbHRhWFJwZG1Vb1RXRjBhRnR0WVhSb1EyOXVjM1J6VzJsZFhTa3NJR1poYkhObExDQjBjblZsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhaaGNpQnVkVzFHZFc1amRHbHZibk1nUFNCYkoyRmljeWNzSUNkaFkyOXpKeXdnSjJGemFXNG5MQ0FuWVhSaGJpY3NJQ2RoZEdGdU1pY3NJQ2RqWldsc0p5d2dKMk52Y3ljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGxlSEFuTENBblpteHZiM0luTENBbmJHOW5KeXdnSjIxaGVDY3NJQ2R0YVc0bkxDQW5jRzkzSnl3Z0ozSmhibVJ2YlNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHliM1Z1WkNjc0lDZHphVzRuTENBbmMzRnlkQ2NzSUNkMFlXNG5YVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYm5WdFJuVnVZM1JwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQjNjbUZ3Y0dWeUlEMGdLR1oxYm1OMGFXOXVLRzVoZEdsMlpVWjFibU1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHb3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21kMWJXVnVkSE5iYWwwZ1BTQmhjbWQxYldWdWRITmJhbDB1ZEc5T2RXMWlaWElvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzVoZEdsMlpVWjFibU11WVhCd2JIa29UV0YwYUN3Z1lYSm5kVzFsYm5SektTazdYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUNBZ2ZTa29UV0YwYUZ0dWRXMUdkVzVqZEdsdmJuTmJhVjFkS1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNodGVVMWhkR2dzSUc1MWJVWjFibU4wYVc5dWMxdHBYU3hjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxUbUYwYVhabFJuVnVZM1JwYjI0b2QzSmhjSEJsY2lrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlPMXh5WEc0Z0lGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVWdVbVZuZFd4aGNpQkZlSEJ5WlhOemFXOXVJRzlpYW1WamRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5RlBZbXBsWTNSOUlITmpiM0JsSUVkc2IySmhiQ0J6WTI5d1pTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCcGJtbDBVbVZuUlhod0tITmpiM0JsS1NCN1hISmNiaUFnSUNCMllYSWdkR2hwYzBsdWRHVnljSEpsZEdWeUlEMGdkR2hwY3p0Y2NseHVJQ0FnSUhaaGNpQjNjbUZ3Y0dWeU8xeHlYRzRnSUNBZ0x5OGdVbVZuWlhnZ1kyOXVjM1J5ZFdOMGIzSXVYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9jR0YwZEdWeWJpd2dabXhoWjNNcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjR0Z5Wlc1MElEMDlJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNVNSVWRGV0ZBcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCRFlXeHNaV1FnZDJsMGFDQnVaWGN1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpuZUNBOUlIUm9hWE03WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpuZUNBOUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZQWW1wbFkzUW9kR2hwYzBsdWRHVnljSEpsZEdWeUxsSkZSMFZZVUNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjR0YwZEdWeWJpQTlJSEJoZEhSbGNtNGdQeUJ3WVhSMFpYSnVMblJ2VTNSeWFXNW5LQ2tnT2lBbkp6dGNjbHh1SUNBZ0lDQWdabXhoWjNNZ1BTQm1iR0ZuY3lBL0lHWnNZV2R6TG5SdlUzUnlhVzVuS0NrZ09pQW5KenRjY2x4dUlDQWdJQ0FnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbU55WldGMFpWSmxaMFY0Y0NoeVozZ3NJRzVsZHlCU1pXZEZlSEFvY0dGMGRHVnliaXdnWm14aFozTXBLVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSEpuZUR0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCMGFHbHpMbEpGUjBWWVVDQTlJSFJvYVhNdVkzSmxZWFJsVG1GMGFYWmxSblZ1WTNScGIyNG9kM0poY0hCbGNpazdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtITmpiM0JsTENBblVtVm5SWGh3Snl3Z2RHaHBjeTVTUlVkRldGQXBPMXh5WEc0Z0lGeHlYRzRnSUNBZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUtITjBjaWtnZTF4eVhHNGdJQ0FnSUNCemRISWdQU0J6ZEhJdWRHOVRkSEpwYm1jb0tUdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvZEdocGN5NWtZWFJoTG5SbGMzUW9jM1J5S1NrN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoMGFHbHpMbEpGUjBWWVVDNXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaU3dnSjNSbGMzUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdYSEpjYmlBZ0lDQjNjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9jM1J5S1NCN1hISmNiaUFnSUNBZ0lITjBjaUE5SUhOMGNpNTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdJQ0F2THlCSFpYUWdiR0Z6ZEVsdVpHVjRJR1p5YjIwZ2QzSmhjSEJsWkNCeVpXZGxlQ3dnYzJsdVkyVWdkR2hwY3lCcGN5QnpaWFIwWVdKc1pTNWNjbHh1SUNBZ0lDQWdkR2hwY3k1a1lYUmhMbXhoYzNSSmJtUmxlQ0E5WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVoyVjBVSEp2Y0dWeWRIa29kR2hwY3l3Z0oyeGhjM1JKYm1SbGVDY3BMblJ2VG5WdFltVnlLQ2s3WEhKY2JpQWdJQ0FnSUhaaGNpQnRZWFJqYUNBOUlIUm9hWE11WkdGMFlTNWxlR1ZqS0hOMGNpazdYSEpjYmlBZ0lDQWdJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNXpaWFJRY205d1pYSjBlU2gwYUdsekxDQW5iR0Z6ZEVsdVpHVjRKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvZEdocGN5NWtZWFJoTG14aGMzUkpibVJsZUNrcE8xeHlYRzRnSUZ4eVhHNGdJQ0FnSUNCcFppQW9iV0YwWTJncElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5TG1OeVpXRjBaVTlpYW1WamRDaDBhR2x6U1c1MFpYSndjbVYwWlhJdVFWSlNRVmtwTzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diV0YwWTJndWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1elpYUlFjbTl3WlhKMGVTaHlaWE4xYkhRc0lHa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlZCeWFXMXBkR2wyWlNodFlYUmphRnRwWFNrcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBdkx5QnRZWFJqYUNCb1lYTWdZV1JrYVhScGIyNWhiQ0J3Y205d1pYSjBhV1Z6TGx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1elpYUlFjbTl3WlhKMGVTaHlaWE4xYkhRc0lDZHBibVJsZUNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlFjbWx0YVhScGRtVW9iV0YwWTJndWFXNWtaWGdwS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6U1c1MFpYSndjbVYwWlhJdWMyVjBVSEp2Y0dWeWRIa29jbVZ6ZFd4MExDQW5hVzV3ZFhRbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSEpwYldsMGFYWmxLRzFoZEdOb0xtbHVjSFYwS1NrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGs1VlRFdzdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1elpYUlFjbTl3WlhKMGVTaDBhR2x6TGxKRlIwVllVQzV3Y205d1pYSjBhV1Z6TG5CeWIzUnZkSGx3WlN3Z0oyVjRaV01uTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlU1aGRHbDJaVVoxYm1OMGFXOXVLSGR5WVhCd1pYSXBMQ0JtWVd4elpTd2dkSEoxWlNrN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEYjI1MlpYSjBjeUJtY205dElHNWhkR2wyWlNCS1V5QjJZV3gxWlNCMGJ5QmhJRXBUSUdsdWRHVnljSEpsZEdWeUlHOWlhbVZqZEM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZXlwOUlHNWhkR2wyWlU5aWFpQlVhR1VnYm1GMGFYWmxJRXBUSUc5aWFtVmpkQ0IwYnlCaVpTQmpiMjUyWlhKMFpXUXVYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdJVTlpYW1WamRIMGdWR2hsSUdWeGRXbDJZV3hsYm5RZ2RHaHBjeTVQUWtwRlExUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1kzSmxZWFJsVUhObGRXUnZUMkpxWldOMEtHNWhkR2wyWlU5aWFpa2dlMXh5WEc0Z0lDQWdkbUZ5SUhCelpYVmtiMDlpYW1WamRDQTlJSFJvYVhNdWIySnFaV04wVFdGd0xtZGxkQ2h1WVhScGRtVlBZbW9wTzF4eVhHNGdJQ0FnYVdZZ0tIQnpaWFZrYjA5aWFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnY0hObGRXUnZUMkpxWldOMFhISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCdVlYUnBkbVZQWW1vZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2NseHVJQ0FnSUNBZ2NITmxkV1J2VDJKcVpXTjBJRDBnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWh1WVhScGRtVlBZbW9wTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYm1GMGFYWmxUMkpxSUNFOVBTQW5iMkpxWldOMEp5a2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYm1GMGFYWmxUMkpxS1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtRjBhWFpsVDJKcUlHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcElIc2dMeThnUVhKeVlYa3VYSEpjYmlBZ0lDQWdJSEJ6WlhWa2IwOWlhbVZqZENBOUlIUm9hWE11WTNKbFlYUmxUMkpxWldOMEtIUm9hWE11UVZKU1FWa3BPMXh5WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc1aGRHbDJaVTlpYWk1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvY0hObGRXUnZUMkpxWldOMExDQnBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpWQnpaWFZrYjA5aWFtVmpkQ2h1WVhScGRtVlBZbXBiYVYwcEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU0JsYkhObElIc2dMeThnVDJKcVpXTjBMbHh5WEc0Z0lDQWdJQ0J3YzJWMVpHOVBZbXBsWTNRZ1BTQjBhR2x6TG1OeVpXRjBaVTlpYW1WamRDaDBhR2x6TGs5Q1NrVkRWQ2s3WEhKY2JpQWdJQ0FnSUhCelpYVmtiMDlpYW1WamRDNXBjMGx1YVhScFlXeHBlbVZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0IwYUdsekxtOWlhbVZqZEUxaGNDNXpaWFFvYm1GMGFYWmxUMkpxTENCd2MyVjFaRzlQWW1wbFkzUXBPMXh5WEc0Z0lDQWdjSE5sZFdSdlQySnFaV04wTG1SaGRHRWdQU0J1WVhScGRtVlBZbW83WEhKY2JpQWdJQ0J5WlhSMWNtNGdjSE5sZFdSdlQySnFaV04wTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpTQktVMDlPSUc5aWFtVmpkQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdleUZQWW1wbFkzUjlJSE5qYjNCbElFZHNiMkpoYkNCelkyOXdaUzVjY2x4dUlDQWdLaTljY2x4dUlDQnBibWwwU2xOUFRpaHpZMjl3WlNrZ2UxeHlYRzRnSUNBZ2RtRnlJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpQTlJSFJvYVhNN1hISmNiaUFnSUNCMllYSWdiWGxLVTA5T0lEMGdkR2hwYzBsdWRHVnljSEpsZEdWeUxtTnlaV0YwWlU5aWFtVmpkQ2gwYUdsekxrOUNTa1ZEVkNrN1hISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hOamIzQmxMQ0FuU2xOUFRpY3NJRzE1U2xOUFRpazdYSEpjYmlBZ1hISmNiaUFnSUNCMllYSWdkM0poY0hCbGNpQTlJQ2htZFc1amRHbHZiaWh1WVhScGRtVkdkVzVqS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1lYSm5JRDBnWVhKbmRXMWxiblJ6V3pCZExtUmhkR0U3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzVoZEdsMlpVOWlhaUE5SUc1aGRHbDJaVVoxYm1NdVkyRnNiQ2hLVTA5T0xDQmhjbWNwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpTVzUwWlhKd2NtVjBaWEl1WTNKbFlYUmxVSE5sZFdSdlQySnFaV04wS0c1aGRHbDJaVTlpYWlrN1hISmNiaUFnSUNBZ0lIMDdYSEpjYmlBZ0lDQjlLU2hLVTA5T0xuQmhjbk5sS1R0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvYlhsS1UwOU9MQ0FuY0dGeWMyVW5MQ0IwYUdsekxtTnlaV0YwWlU1aGRHbDJaVVoxYm1OMGFXOXVLSGR5WVhCd1pYSXBLVHRjY2x4dUlDQmNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nUTI5dWRtVnlkSE1nWm5KdmJTQjBhR2x6TGs5Q1NrVkRWQ0J2WW1wbFkzUWdkRzhnYm1GMGFYWmxJRXBUSUc5aWFtVmpkQzVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3SVU5aWFtVmpkSDBnYjJKcUlGUm9aU0IwYUdsekxrOUNTa1ZEVkNCdlltcGxZM1FnZEc4Z1ltVWdZMjl1ZG1WeWRHVmtMbHh5WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3S24wZ1ZHaGxJR1Z4ZFdsMllXeGxiblFnYm1GMGFYWmxJRXBUSUc5aWFtVmpkQ0J2Y2lCMllXeDFaUzVjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnZEc5T1lYUnBkbVZQWW1wbFkzUW9iMkpxS1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2h2WW1vdWFYTlFjbWx0YVhScGRtVXBJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjJKcUxtUmhkR0U3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0JjY2x4dUlDQWdJQ0FnZG1GeUlHNWhkR2wyWlU5aWFqdGNjbHh1SUNBZ0lDQWdhV1lnS0c5aWFpNXNaVzVuZEdncElIc2dMeThnUVhKeVlYa3VYSEpjYmlBZ0lDQWdJQ0FnYm1GMGFYWmxUMkpxSUQwZ1cxMDdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdlltb3ViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJRzVoZEdsMlpVOWlhbHRwWFNBOUlIUnZUbUYwYVhabFQySnFaV04wS0c5aWFpNXdjbTl3WlhKMGFXVnpXMmxkS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdJQzh2SUU5aWFtVmpkQzVjY2x4dUlDQWdJQ0FnSUNCdVlYUnBkbVZQWW1vZ1BTQjdmVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYjJKcUxuQnliM0JsY25ScFpYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHNWhkR2wyWlU5aWFsdHJaWGxkSUQwZ2RHOU9ZWFJwZG1WUFltcGxZM1FvYjJKcUxuQnliM0JsY25ScFpYTmJhMlY1WFNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnVZWFJwZG1WUFltbzdYSEpjYmlBZ0lDQjlYSEpjYmlBZ1hISmNiaUFnSUNCM2NtRndjR1Z5SUQwZ0tHWjFibU4wYVc5dUtHNWhkR2wyWlVaMWJtTXBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJoY21jZ1BTQjBiMDVoZEdsMlpVOWlhbVZqZENoaGNtZDFiV1Z1ZEhOYk1GMHBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdselNXNTBaWEp3Y21WMFpYSXVZM0psWVhSbFVISnBiV2wwYVhabEtHNWhkR2wyWlVaMWJtTXVZMkZzYkNoS1UwOU9MQ0JoY21jcEtUdGNjbHh1SUNBZ0lDQWdmVHRjY2x4dUlDQWdJSDBwS0VwVFQwNHVjM1J5YVc1bmFXWjVLVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29iWGxLVTA5T0xDQW5jM1J5YVc1bmFXWjVKeXdnZEdocGN5NWpjbVZoZEdWT1lYUnBkbVZHZFc1amRHbHZiaWgzY21Gd2NHVnlLU2s3WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxJSFJvWlNCRmNuSnZjaUJqYkdGemN5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5RlBZbXBsWTNSOUlITmpiM0JsSUVkc2IySmhiQ0J6WTI5d1pTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCcGJtbDBSWEp5YjNJb2MyTnZjR1VwSUh0Y2NseHVJQ0FnSUhaaGNpQjBhR2x6U1c1MFpYSndjbVYwWlhJZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnZG1GeUlIZHlZWEJ3WlhJN1hISmNiaUFnSUNBdkx5QkZjbkp2Y2lCamIyNXpkSEoxWTNSdmNpNWNjbHh1SUNBZ0lIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaHZjSFJmYldWemMyRm5aU2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1d1lYSmxiblFnUFQwZ2RHaHBjMGx1ZEdWeWNISmxkR1Z5TGtWU1VrOVNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdRMkZzYkdWa0lIZHBkR2dnYm1WM0xseHlYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZEZjbkp2Y2lBOUlIUm9hWE03WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzVsZDBWeWNtOXlJRDBnZEdocGMwbHVkR1Z5Y0hKbGRHVnlMbU55WldGMFpVOWlhbVZqZENoMGFHbHpTVzUwWlhKd2NtVjBaWEl1UlZKU1QxSXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUdsbUlDaHZjSFJmYldWemMyRm5aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1elpYUlFjbTl3WlhKMGVTaHVaWGRGY25KdmNpd2dKMjFsYzNOaFoyVW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0ZOMGNtbHVaeWh2Y0hSZmJXVnpjMkZuWlNrcExDQm1ZV3h6WlN3Z2RISjFaU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGQwVnljbTl5TzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhSb2FYTXVSVkpTVDFJZ1BTQjBhR2x6TG1OeVpXRjBaVTVoZEdsMlpVWjFibU4wYVc5dUtIZHlZWEJ3WlhJcE8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoelkyOXdaU3dnSjBWeWNtOXlKeXdnZEdocGN5NUZVbEpQVWlrN1hISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hSb2FYTXVSVkpTVDFJdWNISnZjR1Z5ZEdsbGN5NXdjbTkwYjNSNWNHVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHRaWE56WVdkbEp5d2dkR2hwY3k1VFZGSkpUa2RmUlUxUVZGa3NJR1poYkhObExDQjBjblZsS1R0Y2NseHVJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGN5NUZVbEpQVWk1d2NtOXdaWEowYVdWekxuQnliM1J2ZEhsd1pTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyNWhiV1VuTENCMGFHbHpMbU55WldGMFpWQnlhVzFwZEdsMlpTZ25SWEp5YjNJbktTd2dabUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJRnh5WEc0Z0lDQWdMeThnUTNKbFlYUmxJR2hoYkdZZ1lTQmtiM3BsYmlCbGNuSnZjaUJ6ZFdKamJHRnpjMlZ6TGx4eVhHNGdJQ0FnZG1GeUlHVnljbTl5Y3lBOUlIdGNjbHh1SUNBZ0lDQWdSVlpCVEY5RlVsSlBVam9nSjBWMllXeEZjbkp2Y2ljc1hISmNiaUFnSUNBZ0lGSkJUa2RGWDBWU1VrOVNPaUFuVW1GdVoyVkZjbkp2Y2ljc1hISmNiaUFnSUNBZ0lGSkZSa1ZTUlU1RFJWOUZVbEpQVWpvZ0oxSmxabVZ5Wlc1alpVVnljbTl5Snl4Y2NseHVJQ0FnSUNBZ1UxbE9WRUZZWDBWU1VrOVNPaUFuVTNsdWRHRjRSWEp5YjNJbkxGeHlYRzRnSUNBZ0lDQlVXVkJGWDBWU1VrOVNPaUFuVkhsd1pVVnljbTl5Snl4Y2NseHVJQ0FnSUNBZ1ZWSkpYMFZTVWs5U09pQW5WVkpKUlhKeWIzSW5YSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdZMjl1YzNST1lXMWxJR2x1SUdWeWNtOXljeWtnZTF4eVhHNGdJQ0FnSUNCMllYSWdaWEp5YjNKT1lXMWxJRDBnWlhKeWIzSnpXMk52Ym5OMFRtRnRaVjA3WEhKY2JpQWdJQ0FnSUM4dlJYWmhiRVZ5Y205eUxDQlNZVzVuWlVWeWNtOXlMQ0JTWldabGNtVnVZMlZGY25KdmNpd2dVM2x1ZEdGNFJYSnliM0lzSUZSNWNHVkZjbkp2Y2l3Z1ZWSkpSWEp5YjNKY2NseHVJQ0FnSUNBZ2QzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b2IzQjBYMjFsYzNOaFoyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdselNXNTBaWEp3Y21WMFpYSXVhWE5oS0hSb2FYTXVjR0Z5Wlc1MExDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVJWSlNUMUlwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFTmhiR3hsWkNCM2FYUm9JRzVsZHk1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHNWxkMFZ5Y205eUlEMGdkR2hwY3p0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1WlhkRmNuSnZjaUE5SUhSb2FYTkpiblJsY25CeVpYUmxjaTVqY21WaGRHVlBZbXBsWTNRb2RHaHBjMGx1ZEdWeWNISmxkR1Z5VzI1aGJXVmRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJmYldWemMyRm5aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdselNXNTBaWEp3Y21WMFpYSXVjMlYwVUhKdmNHVnlkSGtvYm1WM1JYSnliM0lzSUNkdFpYTnpZV2RsSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5KYm5SbGNuQnlaWFJsY2k1amNtVmhkR1ZRY21sdGFYUnBkbVVvVTNSeWFXNW5LRzl3ZEY5dFpYTnpZV2RsS1Nrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhkRmNuSnZjanRjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0IwYUdselcyTnZibk4wVG1GdFpWMGdQU0IwYUdsekxtTnlaV0YwWlU1aGRHbDJaVVoxYm1OMGFXOXVLSGR5WVhCd1pYSW9ZMjl1YzNST1lXMWxLU2s3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvZEdocGMxdGpiMjV6ZEU1aGJXVmRMQ0FuY0hKdmRHOTBlWEJsSnl3Z2RHaHBjeTVqY21WaGRHVlBZbXBsWTNRb2RHaHBjeTVGVWxKUFVpa3BPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLSFJvYVhOYlkyOXVjM1JPWVcxbFhTNXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYm1GdFpTY3NJSFJvYVhNdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0dWeWNtOXlUbUZ0WlNrc0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h6WTI5d1pTd2daWEp5YjNKT1lXMWxMQ0IwYUdselcyTnZibk4wVG1GdFpWMHBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1NYTWdZVzRnYjJKcVpXTjBJRzltSUdFZ1kyVnlkR0ZwYmlCamJHRnpjejljY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdZMmhwYkdRZ1QySnFaV04wSUhSdklHTm9aV05yTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J3WVhKbGJuUWdRMjl1YzNSeWRXTjBiM0lnYjJZZ2IySnFaV04wTGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnYjJKcVpXTjBJR2x6SUhSb1pTQmpiR0Z6Y3lCdmNpQnBibWhsY21sMGN5Qm1jbTl0SUdsMExseHlYRzRnSUNBcUlDQWdJQ0JHWVd4elpTQnZkR2hsY25kcGMyVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2FYTmhLR05vYVd4a0xDQndZWEpsYm5RcElIdGNjbHh1SUNBZ0lHbG1JQ2doWTJocGJHUWdmSHdnSVhCaGNtVnVkQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQjNhR2xzWlNBb1kyaHBiR1F1Y0dGeVpXNTBJQ0U5SUhCaGNtVnVkQ2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9JV05vYVd4a0xuQmhjbVZ1ZENCOGZDQWhZMmhwYkdRdWNHRnlaVzUwTG5CeWIzQmxjblJwWlhNdWNISnZkRzkwZVhCbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJR05vYVd4a0lEMGdZMmhwYkdRdWNHRnlaVzUwTG5CeWIzQmxjblJwWlhNdWNISnZkRzkwZVhCbE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGIyMXdZWEpsY3lCMGQyOGdiMkpxWldOMGN5QmhaMkZwYm5OMElHVmhZMmdnYjNSb1pYSXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIc2hUMkpxWldOMGZTQmhJRVpwY25OMElHOWlhbVZqZEM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZXlGUFltcGxZM1I5SUdJZ1UyVmpiMjVrSUc5aWFtVmpkQzVjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHR1ZFcxaVpYSjlJQzB4SUdsbUlHRWdhWE1nYzIxaGJHeGxjaXdnTUNCcFppQmhJRDA5SUdJc0lERWdhV1lnWVNCcGN5QmlhV2RuWlhJc1hISmNiaUFnSUNvZ0lDQWdJRTVoVGlCcFppQjBhR1Y1SUdGeVpTQnViM1FnWTI5dGNHRnlZV0pzWlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JqYjIxd0tHRXNJR0lwSUh0Y2NseHVJQ0FnSUdsbUlDaGhMbWx6VUhKcGJXbDBhWFpsSUNZbUlIUjVjR1Z2WmlCaElEMDlJQ2R1ZFcxaVpYSW5JQ1ltSUdselRtRk9LR0V1WkdGMFlTa2dmSHhjY2x4dUlDQWdJQ0FnSUNCaUxtbHpVSEpwYldsMGFYWmxJQ1ltSUhSNWNHVnZaaUJpSUQwOUlDZHVkVzFpWlhJbklDWW1JR2x6VG1GT0tHSXVaR0YwWVNrcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlFNWhUanRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNoaExtbHpVSEpwYldsMGFYWmxJQ1ltSUdJdWFYTlFjbWx0YVhScGRtVXBJSHRjY2x4dUlDQWdJQ0FnWVNBOUlHRXVaR0YwWVR0Y2NseHVJQ0FnSUNBZ1lpQTlJR0l1WkdGMFlUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDOHZJRlJQUkU4NklFaGhibVJzWlNCdmRHaGxjaUIwZVhCbGN5NWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlFNWhUanRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNoaElEd2dZaWtnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHRWdQaUJpS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBeE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SURBN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJKY3lCaElIWmhiSFZsSUdFZ2JHVm5ZV3dnYVc1MFpXZGxjaUJtYjNJZ1lXNGdZWEp5WVhrL1hISmNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQnVJRlpoYkhWbElIUnZJR05vWldOckxseHlYRzRnSUNBcUlFQnlaWFIxY200Z2UyNTFiV0psY24wZ1dtVnlieXdnYjNJZ1lTQndiM05wZEdsMlpTQnBiblJsWjJWeUlHbG1JSFJvWlNCMllXeDFaU0JqWVc0Z1ltVmNjbHh1SUNBZ0tpQWdJQ0FnWTI5dWRtVnlkR1ZrSUhSdklITjFZMmd1SUNCT1lVNGdiM1JvWlhKM2FYTmxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHRnljbUY1U1c1a1pYZ29iaWtnZTF4eVhHNGdJQ0FnYmlBOUlFNTFiV0psY2lodUtUdGNjbHh1SUNBZ0lHbG1JQ2doYVhOR2FXNXBkR1VvYmlrZ2ZId2diaUFoUFNCTllYUm9MbVpzYjI5eUtHNHBJSHg4SUc0Z1BDQXdLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJPWVU0N1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnYmp0Y2NseHVJQ0I5TzF4eVhHNGdJRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU55WldGMFpTQmhJRzVsZHlCa1lYUmhJRzlpYW1WamRDQm1iM0lnWVNCd2NtbHRhWFJwZG1VdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo4YzNSeWFXNW5mR0p2YjJ4bFlXNThiblZzYkh4MWJtUmxabWx1WldSOFVtVm5SWGh3ZlNCa1lYUmhJRVJoZEdFZ2RHOWNjbHh1SUNBZ0tpQWdJQ0FnWlc1allYQnpkV3hoZEdVdVhISmNiaUFnSUNvZ1FISmxkSFZ5YmlCN0lVOWlhbVZqZEgwZ1RtVjNJR1JoZEdFZ2IySnFaV04wTGx4eVhHNGdJQ0FxTDF4eVhHNGdJR055WldGMFpWQnlhVzFwZEdsMlpTaGtZWFJoS1NCN1hISmNiaUFnSUNBdkx5QlNaWFZ6WlNCaElIQnlaV1JsWm1sdVpXUWdjSEpwYldsMGFYWmxJR052Ym5OMFlXNTBJR2xtSUhCdmMzTnBZbXhsTGx4eVhHNGdJQ0FnYVdZZ0tHUmhkR0VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1VlRrUkZSa2xPUlVRN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHUmhkR0VnUFQwOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVUbFZNVER0Y2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pHRjBZU0E5UFQwZ2RISjFaU2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NVVVbFZGTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoa1lYUmhJRDA5UFNCbVlXeHpaU2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NUdRVXhUUlR0Y2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pHRjBZU0E5UFQwZ01Da2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1T1ZVMUNSVkpmV2tWU1R6dGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aR0YwWVNBOVBUMGdNU2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NU9WVTFDUlZKZlQwNUZPMXh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hrWVhSaElEMDlQU0FuSnlrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVUVkZKSlRrZGZSVTFRVkZrN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHUmhkR0VnYVc1emRHRnVZMlZ2WmlCU1pXZEZlSEFwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFVtVm5SWGh3S0hSb2FYTXVZM0psWVhSbFQySnFaV04wS0hSb2FYTXVVa1ZIUlZoUUtTd2daR0YwWVNrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFbHVkR1Z5Y0hKbGRHVnlMbEJ5YVcxcGRHbDJaU2hrWVhSaExDQjBhR2x6S1R0Y2NseHVJQ0I5TzF4eVhHNGdJRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU55WldGMFpTQmhJRzVsZHlCa1lYUmhJRzlpYW1WamRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2NHRnlaVzUwSUZCaGNtVnVkQ0JqYjI1emRISjFZM1J2Y2lCbWRXNWpkR2x2Ymk1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1SUhzaFQySnFaV04wZlNCT1pYY2daR0YwWVNCdlltcGxZM1F1WEhKY2JpQWdJQ292WEhKY2JpQWdZM0psWVhSbFQySnFaV04wS0hCaGNtVnVkQ2tnZTF4eVhHNGdJQ0FnZG1GeUlHOWlhaUE5SUc1bGR5QkpiblJsY25CeVpYUmxjaTVQWW1wbFkzUW9jR0Z5Wlc1MEtUdGNjbHh1SUNBZ0lDOHZJRVoxYm1OMGFXOXVjeUJvWVhabElIQnliM1J2ZEhsd1pTQnZZbXBsWTNSekxseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdWFYTmhLRzlpYWl3Z2RHaHBjeTVHVlU1RFZFbFBUaWtwSUh0Y2NseHVJQ0FnSUNBZ2IySnFMblI1Y0dVZ1BTQW5ablZ1WTNScGIyNG5PMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLRzlpYWl3Z0ozQnliM1J2ZEhsd1pTY3NJSFJvYVhNdVkzSmxZWFJsVDJKcVpXTjBLSFJvYVhNdVQwSktSVU5VSUh4OElHNTFiR3dwS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUM4dklFRnljbUY1Y3lCb1lYWmxJR3hsYm1kMGFDNWNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxtbHpZU2h2WW1vc0lIUm9hWE11UVZKU1FWa3BLU0I3WEhKY2JpQWdJQ0FnSUc5aWFpNXNaVzVuZEdnZ1BTQXdPMXh5WEc0Z0lDQWdJQ0J2WW1vdWRHOVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjM1J5Y3lBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYzNSeWMxdHBYU0E5SUNoMGFHbHpMbkJ5YjNCbGNuUnBaWE5iYVYwZ1BUMGdkVzVrWldacGJtVmtJSHg4WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjR1Z5ZEdsbGMxdHBYU0E5UFNCdWRXeHNLU0EvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NuSURvZ2RHaHBjeTV3Y205d1pYSjBhV1Z6VzJsZExuUnZVM1J5YVc1bktDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRISnpMbXB2YVc0b0p5d25LVHRjY2x4dUlDQWdJQ0FnZlR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUJ2WW1vN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJpQnZZbXBsWTNRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFpQlVhR1VnWlhocGMzUnBibWNnYjJKcVpXTjBJSFJ2SUhObGRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pHRjBZU0JVYUdVZ2JtRjBhWFpsSUhKbFozVnNZWElnWlhod2NtVnpjMmx2Ymk1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1SUhzaFQySnFaV04wZlNCT1pYY2djbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJRzlpYW1WamRDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCamNtVmhkR1ZTWldkRmVIQW9iMkpxTENCa1lYUmhLU0I3WEhKY2JpQWdJQ0J2WW1vdVpHRjBZU0E5SUdSaGRHRTdYSEpjYmlBZ0lDQXZMeUJzWVhOMFNXNWtaWGdnYVhNZ2MyVjBkR0ZpYkdVc0lHRnNiQ0J2ZEdobGNuTWdZWEpsSUhKbFlXUXRiMjVzZVNCaGRIUnlhV0oxZEdWelhISmNiaUFnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0c5aWFpd2dKMnhoYzNSSmJtUmxlQ2NzSUhSb2FYTXVZM0psWVhSbFVISnBiV2wwYVhabEtHOWlhaTVrWVhSaExteGhjM1JKYm1SbGVDa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTENCMGNuVmxLVHRjY2x4dUlDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29iMkpxTENBbmMyOTFjbU5sSnl3Z2RHaHBjeTVqY21WaGRHVlFjbWx0YVhScGRtVW9iMkpxTG1SaGRHRXVjMjkxY21ObEtTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjFaU3dnZEhKMVpTazdYSEpjYmlBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtHOWlhaXdnSjJkc2IySmhiQ2NzSUhSb2FYTXVZM0psWVhSbFVISnBiV2wwYVhabEtHOWlhaTVrWVhSaExtZHNiMkpoYkNrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWRXVXNJSFJ5ZFdVcE8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNodlltb3NJQ2RwWjI1dmNtVkRZWE5sSnl3Z2RHaHBjeTVqY21WaGRHVlFjbWx0YVhScGRtVW9iMkpxTG1SaGRHRXVhV2R1YjNKbFEyRnpaU2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZFdVc0lIUnlkV1VwTzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h2WW1vc0lDZHRkV3gwYVd4cGJtVW5MQ0IwYUdsekxtTnlaV0YwWlZCeWFXMXBkR2wyWlNodlltb3VaR0YwWVM1dGRXeDBhV3hwYm1VcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNuVmxMQ0IwY25WbEtUdGNjbHh1SUNBZ0lDOHZJRTkyWlhKeWFXUmxJR0VnWTI5MWNHeGxJRzltSUU5aWFtVmpkQ2R6SUdOdmJuWmxjbk5wYjI0Z1puVnVZM1JwYjI1ekxseHlYRzRnSUNBZ2IySnFMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvS1NCN2NtVjBkWEp1SUZOMGNtbHVaeWgwYUdsekxtUmhkR0VwTzMwN1hISmNiaUFnSUNCdlltb3VkbUZzZFdWUFppQTlJR1oxYm1OMGFXOXVLQ2tnZTNKbGRIVnliaUIwYUdsekxtUmhkR0U3ZlR0Y2NseHVJQ0FnSUhKbGRIVnliaUJ2WW1vN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1puVnVZM1JwYjI0dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc1dlpHVWdRVk5VSUc1dlpHVWdaR1ZtYVc1cGJtY2dkR2hsSUdaMWJtTjBhVzl1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hSZmMyTnZjR1VnVDNCMGFXOXVZV3dnY0dGeVpXNTBJSE5qYjNCbExseHlYRzRnSUNBcUlFQnlaWFIxY200Z2V5RlBZbXBsWTNSOUlFNWxkeUJtZFc1amRHbHZiaTVjY2x4dUlDQWdLaTljY2x4dUlDQmpjbVZoZEdWR2RXNWpkR2x2YmlodWIyUmxMQ0J2Y0hSZmMyTnZjR1VwSUh0Y2NseHVJQ0FnSUhaaGNpQm1kVzVqSUQwZ2RHaHBjeTVqY21WaGRHVlBZbXBsWTNRb2RHaHBjeTVHVlU1RFZFbFBUaWs3WEhKY2JpQWdJQ0JtZFc1akxuQmhjbVZ1ZEZOamIzQmxJRDBnYjNCMFgzTmpiM0JsSUh4OElIUm9hWE11WjJWMFUyTnZjR1VvS1R0Y2NseHVJQ0FnSUdaMWJtTXVibTlrWlNBOUlHNXZaR1U3WEhKY2JpQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLR1oxYm1Nc0lDZHNaVzVuZEdnbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpWQnlhVzFwZEdsMlpTaG1kVzVqTG01dlpHVXVjR0Z5WVcxekxteGxibWQwYUNrc0lIUnlkV1VwTzF4eVhHNGdJQ0FnY21WMGRYSnVJR1oxYm1NN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ2JtRjBhWFpsSUdaMWJtTjBhVzl1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3SVVaMWJtTjBhVzl1ZlNCdVlYUnBkbVZHZFc1aklFcGhkbUZUWTNKcGNIUWdablZ1WTNScGIyNHVYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdJVTlpYW1WamRIMGdUbVYzSUdaMWJtTjBhVzl1TGx4eVhHNGdJQ0FxTDF4eVhHNGdJR055WldGMFpVNWhkR2wyWlVaMWJtTjBhVzl1S0c1aGRHbDJaVVoxYm1NcElIdGNjbHh1SUNBZ0lIWmhjaUJtZFc1aklEMGdkR2hwY3k1amNtVmhkR1ZQWW1wbFkzUW9kR2hwY3k1R1ZVNURWRWxQVGlrN1hISmNiaUFnSUNCbWRXNWpMbTVoZEdsMlpVWjFibU1nUFNCdVlYUnBkbVZHZFc1ak8xeHlYRzRnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNobWRXNWpMQ0FuYkdWdVozUm9KeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYm1GMGFYWmxSblZ1WXk1c1pXNW5kR2dwTENCMGNuVmxLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQm1kVzVqTzF4eVhHNGdJSDA3WEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRM0psWVhSbElHRWdibVYzSUc1aGRHbDJaU0JoYzNsdVkyaHliMjV2ZFhNZ1puVnVZM1JwYjI0dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUhzaFJuVnVZM1JwYjI1OUlHRnplVzVqUm5WdVl5QktZWFpoVTJOeWFYQjBJR1oxYm1OMGFXOXVMbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNGdleUZQWW1wbFkzUjlJRTVsZHlCbWRXNWpkR2x2Ymk1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JqY21WaGRHVkJjM2x1WTBaMWJtTjBhVzl1S0dGemVXNWpSblZ1WXlrZ2UxeHlYRzRnSUNBZ2RtRnlJR1oxYm1NZ1BTQjBhR2x6TG1OeVpXRjBaVTlpYW1WamRDaDBhR2x6TGtaVlRrTlVTVTlPS1R0Y2NseHVJQ0FnSUdaMWJtTXVZWE41Ym1OR2RXNWpJRDBnWVhONWJtTkdkVzVqTzF4eVhHNGdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2htZFc1akxDQW5iR1Z1WjNSb0p5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVlFjbWx0YVhScGRtVW9ZWE41Ym1OR2RXNWpMbXhsYm1kMGFDa3NJSFJ5ZFdVcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTTdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCR1pYUmphQ0JoSUhCeWIzQmxjblI1SUhaaGJIVmxJR1p5YjIwZ1lTQmtZWFJoSUc5aWFtVmpkQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdleUZQWW1wbFkzUjlJRzlpYWlCRVlYUmhJRzlpYW1WamRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJRzVoYldVZ1RtRnRaU0J2WmlCd2NtOXdaWEowZVM1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1SUhzaFQySnFaV04wZlNCUWNtOXdaWEowZVNCMllXeDFaU0FvYldGNUlHSmxJRlZPUkVWR1NVNUZSQ2t1WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwVUhKdmNHVnlkSGtvYjJKcUxDQnVZVzFsS1NCN1hISmNiaUFnSUNCdVlXMWxJRDBnYm1GdFpTNTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdhV1lnS0c5aWFpQTlQU0IwYUdsekxsVk9SRVZHU1U1RlJDQjhmQ0J2WW1vZ1BUMGdkR2hwY3k1T1ZVeE1LU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVkR2h5YjNkRmVHTmxjSFJwYjI0b2RHaHBjeTVVV1ZCRlgwVlNVazlTTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lRMkZ1Ym05MElISmxZV1FnY0hKdmNHVnlkSGtnSjF3aUlDc2dibUZ0WlNBcklGd2lKeUJ2WmlCY0lpQXJJRzlpYWlrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNBdkx5QlRjR1ZqYVdGc0lHTmhjMlZ6SUdadmNpQnRZV2RwWXlCc1pXNW5kR2dnY0hKdmNHVnlkSGt1WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVwYzJFb2IySnFMQ0IwYUdsekxsTlVVa2xPUnlrcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDBnSjJ4bGJtZDBhQ2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVlFjbWx0YVhScGRtVW9iMkpxTG1SaGRHRXViR1Z1WjNSb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0IyWVhJZ2JpQTlJSFJvYVhNdVlYSnlZWGxKYm1SbGVDaHVZVzFsS1R0Y2NseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzA1aFRpaHVLU0FtSmlCdUlEd2diMkpxTG1SaGRHRXViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsVUhKcGJXbDBhWFpsS0c5aWFpNWtZWFJoVzI1ZEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxtbHpZU2h2WW1vc0lIUm9hWE11UVZKU1FWa3BJQ1ltSUc1aGJXVWdQVDBnSjJ4bGJtZDBhQ2NwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFVISnBiV2wwYVhabEtHOWlhaTVzWlc1bmRHZ3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkMmhwYkdVZ0tIUnlkV1VwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLRzlpYWk1cGMwbHVhWFJwWVd4cGVtVmtJRDA5UFNCbVlXeHpaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJR3hoZW5rZ2QzSmhjSEJwYm1kY2NseHVJQ0FnSUNBZ0lDQnNaWFFnYm1GMGFYWmxUMkpxWldOMElEMGdiMkpxTG1SaGRHRTdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzVoZEdsMlpVOWlhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h2WW1vc0lHdGxlU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxVSE5sZFdSdlQySnFaV04wS0c1aGRHbDJaVTlpYW1WamRGdHJaWGxkS1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUc5aWFpNXBjMGx1YVhScFlXeHBlbVZrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCcFppQW9iMkpxTG5CeWIzQmxjblJwWlhNZ0ppWWdibUZ0WlNCcGJpQnZZbW91Y0hKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnZZbW91Y0hKdmNHVnlkR2xsYzF0dVlXMWxYVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCcFppQW9iMkpxTG5CaGNtVnVkQ0FtSmlCdlltb3VjR0Z5Wlc1MExuQnliM0JsY25ScFpYTWdKaVpjY2x4dUlDQWdJQ0FnSUNBZ0lHOWlhaTV3WVhKbGJuUXVjSEp2Y0dWeWRHbGxjeTV3Y205MGIzUjVjR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnZZbW9nUFNCdlltb3VjR0Z5Wlc1MExuQnliM0JsY25ScFpYTXVjSEp2ZEc5MGVYQmxPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUM4dklFNXZJSEJoY21WdWRDd2djbVZoWTJobFpDQjBhR1VnZEc5d0xseHlYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVWVGtSRlJrbE9SVVE3WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkViMlZ6SUhSb1pTQnVZVzFsWkNCd2NtOXdaWEowZVNCbGVHbHpkQ0J2YmlCaElHUmhkR0VnYjJKcVpXTjBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdJVTlpYW1WamRIMGdiMkpxSUVSaGRHRWdiMkpxWldOMExseHlYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdibUZ0WlNCT1lXMWxJRzltSUhCeWIzQmxjblI1TGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnY0hKdmNHVnlkSGtnWlhocGMzUnpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHaGhjMUJ5YjNCbGNuUjVLRzlpYWl3Z2JtRnRaU2tnZTF4eVhHNGdJQ0FnYm1GdFpTQTlJRzVoYldVdWRHOVRkSEpwYm1jb0tUdGNjbHh1SUNBZ0lHbG1JQ2h2WW1vdWFYTlFjbWx0YVhScGRtVXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RRY21sdGFYUnBkbVVnWkdGMFlTQjBlWEJsSUdoaGN5QnVieUJ3Y205d1pYSjBhV1Z6SnlrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCcFppQW9ibUZ0WlNBOVBTQW5iR1Z1WjNSb0p5QW1KbHh5WEc0Z0lDQWdJQ0FnSUNoMGFHbHpMbWx6WVNodlltb3NJSFJvYVhNdVUxUlNTVTVIS1NCOGZDQjBhR2x6TG1sellTaHZZbW9zSUhSb2FYTXVRVkpTUVZrcEtTa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdsbUlDaDBhR2x6TG1sellTaHZZbW9zSUhSb2FYTXVVMVJTU1U1SEtTa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2JpQTlJSFJvYVhNdVlYSnlZWGxKYm1SbGVDaHVZVzFsS1R0Y2NseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzA1aFRpaHVLU0FtSmlCdUlEd2diMkpxTG1SaGRHRXViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaHZZbW91Y0hKdmNHVnlkR2xsY3lBbUppQnVZVzFsSUdsdUlHOWlhaTV3Y205d1pYSjBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2FXWWdLRzlpYWk1d1lYSmxiblFnSmlZZ2IySnFMbkJoY21WdWRDNXdjbTl3WlhKMGFXVnpJQ1ltWEhKY2JpQWdJQ0FnSUNBZ0lDQnZZbW91Y0dGeVpXNTBMbkJ5YjNCbGNuUnBaWE11Y0hKdmRHOTBlWEJsS1NCN1hISmNiaUFnSUNBZ0lDQWdiMkpxSUQwZ2IySnFMbkJoY21WdWRDNXdjbTl3WlhKMGFXVnpMbkJ5YjNSdmRIbHdaVHRjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5Qk9ieUJ3WVhKbGJuUXNJSEpsWVdOb1pXUWdkR2hsSUhSdmNDNWNjbHh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJSDA3WEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVMlYwSUdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1VnYjI0Z1lTQmtZWFJoSUc5aWFtVmpkQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdleUZQWW1wbFkzUjlJRzlpYWlCRVlYUmhJRzlpYW1WamRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJRzVoYldVZ1RtRnRaU0J2WmlCd2NtOXdaWEowZVM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZXlGUFltcGxZM1I5SUhaaGJIVmxJRTVsZHlCd2NtOXdaWEowZVNCMllXeDFaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRzl3ZEY5bWFYaGxaQ0JWYm1Ob1lXNW5aV0ZpYkdVZ2NISnZjR1Z5ZEhrZ2FXWWdkSEoxWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUc5d2RGOXViMjVsYm5WdElFNXZiaTFsYm5WdFpYSmhZbXhsSUhCeWIzQmxjblI1SUdsbUlIUnlkV1V1WEhKY2JpQWdJQ292WEhKY2JpQWdjMlYwVUhKdmNHVnlkSGtvYjJKcUxDQnVZVzFsTENCMllXeDFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJmWm1sNFpXUXNJRzl3ZEY5dWIyNWxiblZ0S1NCN1hISmNiaUFnSUNCdVlXMWxJRDBnYm1GdFpTNTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQWhQU0FuYjJKcVpXTjBKeWtnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJGY25KdmNpZ25SbUZwYkhWeVpTQjBieUIzY21Gd0lHRWdkbUZzZFdVNklDY2dLeUIyWVd4MVpTazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnBaaUFvYjJKcUlEMDlJSFJvYVhNdVZVNUVSVVpKVGtWRUlIeDhJRzlpYWlBOVBTQjBhR2x6TGs1VlRFd3BJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NTBhSEp2ZDBWNFkyVndkR2x2YmloMGFHbHpMbFJaVUVWZlJWSlNUMUlzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSkRZVzV1YjNRZ2MyVjBJSEJ5YjNCbGNuUjVJQ2RjSWlBcklHNWhiV1VnS3lCY0lpY2diMllnWENJZ0t5QnZZbW9wTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tHOWlhaTVwYzFCeWFXMXBkR2wyWlNCOGZDQnZZbW91Wm1sNFpXUmJibUZ0WlYwcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdWFYTmhLRzlpYWl3Z2RHaHBjeTVUVkZKSlRrY3BLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnVJRDBnZEdocGN5NWhjbkpoZVVsdVpHVjRLRzVoYldVcE8xeHlYRzRnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQU0FuYkdWdVozUm9KeUI4ZkNBb0lXbHpUbUZPS0c0cElDWW1JRzRnUENCdlltb3VaR0YwWVM1c1pXNW5kR2dwS1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnUTJGdUozUWdjMlYwSUd4bGJtZDBhQ0J2Y2lCc1pYUjBaWEp6SUc5dUlGTjBjbWx1WjNNdVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NXBjMkVvYjJKcUxDQjBhR2x6TGtGU1VrRlpLU2tnZTF4eVhHNGdJQ0FnSUNBdkx5QkJjbkpoZVhNZ2FHRjJaU0JoSUcxaFoybGpJR3hsYm1kMGFDQjJZWEpwWVdKc1pTQjBhR0YwSUdseklHSnZkVzVrSUhSdklIUm9aU0JsYkdWdFpXNTBjeTVjY2x4dUlDQWdJQ0FnZG1GeUlHazdYSEpjYmlBZ0lDQWdJR2xtSUNodVlXMWxJRDA5SUNkc1pXNW5kR2duS1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnUkdWc1pYUmxJR1ZzWlcxbGJuUnpJR2xtSUd4bGJtZDBhQ0JwY3lCemJXRnNiR1Z5TGx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkTVpXNW5kR2dnUFNCMGFHbHpMbUZ5Y21GNVNXNWtaWGdvZG1Gc2RXVXVkRzlPZFcxaVpYSW9LU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VG1GT0tHNWxkMHhsYm1kMGFDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11ZEdoeWIzZEZlR05sY0hScGIyNG9kR2hwY3k1U1FVNUhSVjlGVWxKUFVpd2dKMGx1ZG1Gc2FXUWdZWEp5WVhrZ2JHVnVaM1JvSnlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGRNWlc1bmRHZ2dQQ0J2WW1vdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHa2dhVzRnYjJKcUxuQnliM0JsY25ScFpYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhU0E5SUhSb2FYTXVZWEp5WVhsSmJtUmxlQ2hwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBjMDVoVGlocEtTQW1KaUJ1WlhkTVpXNW5kR2dnUEQwZ2FTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnZZbW91Y0hKdmNHVnlkR2xsYzF0cFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J2WW1vdWJHVnVaM1JvSUQwZ2JtVjNUR1Z1WjNSb08xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqc2dJQzh2SUVSdmJpZDBJSE5sZENCaElISmxZV3dnYkdWdVozUm9JSEJ5YjNCbGNuUjVMbHh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGcGMwNWhUaWhwSUQwZ2RHaHBjeTVoY25KaGVVbHVaR1Y0S0c1aGJXVXBLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRWx1WTNKbFlYTmxJR3hsYm1kMGFDQnBaaUIwYUdseklHbHVaR1Y0SUdseklHeGhjbWRsY2k1Y2NseHVJQ0FnSUNBZ0lDQnZZbW91YkdWdVozUm9JRDBnVFdGMGFDNXRZWGdvYjJKcUxteGxibWQwYUN3Z2FTQXJJREVwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNBdkx5QlRaWFFnZEdobElIQnliM0JsY25SNUxseHlYRzRnSUNBZ2IySnFMbkJ5YjNCbGNuUnBaWE5iYm1GdFpWMGdQU0IyWVd4MVpUdGNjbHh1SUNBZ0lHbG1JQ2h2Y0hSZlptbDRaV1FwSUh0Y2NseHVJQ0FnSUNBZ2IySnFMbVpwZUdWa1cyNWhiV1ZkSUQwZ2RISjFaVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNodmNIUmZibTl1Wlc1MWJTa2dlMXh5WEc0Z0lDQWdJQ0J2WW1vdWJtOXVaVzUxYldWeVlXSnNaVnR1WVcxbFhTQTlJSFJ5ZFdVN1hISmNiaUFnSUNCOVhISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJFWld4bGRHVWdZU0J3Y205d1pYSjBlU0IyWVd4MVpTQnZiaUJoSUdSaGRHRWdiMkpxWldOMExseHlYRzRnSUNBcUlFQndZWEpoYlNCN0lVOWlhbVZqZEgwZ2IySnFJRVJoZEdFZ2IySnFaV04wTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3S24wZ2JtRnRaU0JPWVcxbElHOW1JSEJ5YjNCbGNuUjVMbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMkp2YjJ4bFlXNTlJRlJ5ZFdVZ2FXWWdaR1ZzWlhSbFpDd2dabUZzYzJVZ2FXWWdkVzVrWld4bGRHRmliR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdaR1ZzWlhSbFVISnZjR1Z5ZEhrb2IySnFMQ0J1WVcxbEtTQjdYSEpjYmlBZ0lDQnVZVzFsSUQwZ2JtRnRaUzUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnYVdZZ0tHOWlhaTVwYzFCeWFXMXBkR2wyWlNCOGZDQnZZbW91Wm1sNFpXUmJibUZ0WlYwcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tHNWhiV1VnUFQwZ0oyeGxibWQwYUNjZ0ppWWdkR2hwY3k1cGMyRW9iMkpxTENCMGFHbHpMa0ZTVWtGWktTa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnWkdWc1pYUmxJRzlpYWk1d2NtOXdaWEowYVdWelcyNWhiV1ZkTzF4eVhHNGdJSDA3WEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnWTNWeWNtVnVkQ0J6WTI5d1pTQm1jbTl0SUhSb1pTQnpkR0YwWlZOMFlXTnJMbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNGdleUZQWW1wbFkzUjlJRU4xY25KbGJuUWdjMk52Y0dVZ1pHbGpkR2x2Ym1GeWVTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUlRZMjl3WlNncElIdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkR2hwY3k1emRHRjBaVk4wWVdOckxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG5OMFlYUmxVM1JoWTJ0YmFWMHVjMk52Y0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emRHRjBaVk4wWVdOclcybGRMbk5qYjNCbE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduVG04Z2MyTnZjR1VnWm05MWJtUXVKeWs3WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnYzJOdmNHVWdaR2xqZEdsdmJtRnllUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdleUZQWW1wbFkzUjlJRzV2WkdVZ1FWTlVJRzV2WkdVZ1pHVm1hVzVwYm1jZ2RHaGxJSE5qYjNCbElHTnZiblJoYVc1bGNseHlYRzRnSUNBcUlDQWdJQ0FvWlM1bkxpQmhJR1oxYm1OMGFXOXVLUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjR0Z5Wlc1MFUyTnZjR1VnVTJOdmNHVWdkRzhnYkdsdWF5QjBieTVjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHNoVDJKcVpXTjBmU0JPWlhjZ2MyTnZjR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdZM0psWVhSbFUyTnZjR1VvYm05a1pTd2djR0Z5Wlc1MFUyTnZjR1VwSUh0Y2NseHVJQ0FnSUhaaGNpQnpZMjl3WlNBOUlIUm9hWE11WTNKbFlYUmxUMkpxWldOMEtHNTFiR3dwTzF4eVhHNGdJQ0FnYzJOdmNHVXVjR0Z5Wlc1MFUyTnZjR1VnUFNCd1lYSmxiblJUWTI5d1pUdGNjbHh1SUNBZ0lHbG1JQ2doY0dGeVpXNTBVMk52Y0dVcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1cGJtbDBSMnh2WW1Gc1UyTnZjR1VvYzJOdmNHVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1d2IzQjFiR0YwWlZOamIzQmxYeWh1YjJSbExDQnpZMjl3WlNrN1hISmNiaUFnWEhKY2JpQWdJQ0F2THlCRVpYUmxjbTFwYm1VZ2FXWWdkR2hwY3lCelkyOXdaU0J6ZEdGeWRITWdkMmwwYUNBbmRYTmxJSE4wY21samRDY3VYSEpjYmlBZ0lDQnpZMjl3WlM1emRISnBZM1FnUFNCbVlXeHpaVHRjY2x4dUlDQWdJR2xtSUNod1lYSmxiblJUWTI5d1pTQW1KaUJ3WVhKbGJuUlRZMjl3WlM1emRISnBZM1FwSUh0Y2NseHVJQ0FnSUNBZ2MyTnZjR1V1YzNSeWFXTjBJRDBnZEhKMVpUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lIWmhjaUJtYVhKemRFNXZaR1VnUFNCdWIyUmxMbUp2WkhrZ0ppWWdibTlrWlM1aWIyUjVXekJkTzF4eVhHNGdJQ0FnSUNCcFppQW9abWx5YzNST2IyUmxJQ1ltSUdacGNuTjBUbTlrWlM1bGVIQnlaWE56YVc5dUlDWW1YSEpjYmlBZ0lDQWdJQ0FnSUNCbWFYSnpkRTV2WkdVdVpYaHdjbVZ6YzJsdmJpNTBlWEJsSUQwOUlDZE1hWFJsY21Gc0p5QW1KbHh5WEc0Z0lDQWdJQ0FnSUNBZ1ptbHljM1JPYjJSbExtVjRjSEpsYzNOcGIyNHVkbUZzZFdVZ1BUMGdKM1Z6WlNCemRISnBZM1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdjMk52Y0dVdWMzUnlhV04wSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSE5qYjNCbE8xeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTNKbFlYUmxJR0VnYm1WM0lITndaV05wWVd3Z2MyTnZjR1VnWkdsamRHbHZibUZ5ZVM0Z1UybHRhV3hoY2lCMGJ5QmpjbVZoZEdWVFkyOXdaU2dwTENCaWRYUmNjbHh1SUNBZ0tpQmtiMlZ6YmlkMElHRnpjM1Z0WlNCMGFHRjBJSFJvWlNCelkyOXdaU0JwY3lCbWIzSWdZU0JtZFc1amRHbHZiaUJpYjJSNUxpQlVhR2x6SUdseklIVnpaV1FnWm05eVhISmNiaUFnSUNvZ2RHaGxJR05oZEdOb0lHTnNZWFZ6WlNCaGJtUWdkMmwwYUNCemRHRjBaVzFsYm5RdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUhzaFQySnFaV04wZlNCd1lYSmxiblJUWTI5d1pTQlRZMjl3WlNCMGJ5QnNhVzVySUhSdkxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ2IzQjBYM05qYjNCbElFOXdkR2x2Ym1Gc0lHOWlhbVZqZENCMGJ5QjBjbUZ1YzJadmNtMGdhVzUwYnlCelkyOXdaUzVjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHNoVDJKcVpXTjBmU0JPWlhjZ2MyTnZjR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdZM0psWVhSbFUzQmxZMmxoYkZOamIzQmxLSEJoY21WdWRGTmpiM0JsTENCdmNIUmZjMk52Y0dVcElIdGNjbHh1SUNBZ0lHbG1JQ2doY0dGeVpXNTBVMk52Y0dVcElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ1JYSnliM0lvSjNCaGNtVnVkRk5qYjNCbElISmxjWFZwY21Wa0p5azdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQjJZWElnYzJOdmNHVWdQU0J2Y0hSZmMyTnZjR1VnZkh3Z2RHaHBjeTVqY21WaGRHVlBZbXBsWTNRb2JuVnNiQ2s3WEhKY2JpQWdJQ0J6WTI5d1pTNXdZWEpsYm5SVFkyOXdaU0E5SUhCaGNtVnVkRk5qYjNCbE8xeHlYRzRnSUNBZ2MyTnZjR1V1YzNSeWFXTjBJRDBnY0dGeVpXNTBVMk52Y0dVdWMzUnlhV04wTzF4eVhHNGdJQ0FnY21WMGRYSnVJSE5qYjNCbE8xeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwY21sbGRtVnpJR0VnZG1Gc2RXVWdabkp2YlNCMGFHVWdjMk52Y0dVZ1kyaGhhVzR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHNoVDJKcVpXTjBmU0J1WVcxbElFNWhiV1VnYjJZZ2RtRnlhV0ZpYkdVdVhISmNiaUFnSUNvZ1FISmxkSFZ5YmlCN0lVOWlhbVZqZEgwZ1ZHaGxJSFpoYkhWbExseHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRGWmhiSFZsUm5KdmJWTmpiM0JsS0c1aGJXVXBJSHRjY2x4dUlDQWdJSFpoY2lCelkyOXdaU0E5SUhSb2FYTXVaMlYwVTJOdmNHVW9LVHRjY2x4dUlDQWdJSFpoY2lCdVlXMWxVM1J5SUQwZ2JtRnRaUzUwYjFOMGNtbHVaeWdwTzF4eVhHNGdJQ0FnZDJocGJHVWdLSE5qYjNCbEtTQjdYSEpjYmlBZ0lDQWdJR2xtSUNodVlXMWxVM1J5SUdsdUlITmpiM0JsTG5CeWIzQmxjblJwWlhNcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMk52Y0dVdWNISnZjR1Z5ZEdsbGMxdHVZVzFsVTNSeVhUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J6WTI5d1pTQTlJSE5qYjNCbExuQmhjbVZ1ZEZOamIzQmxPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCTVlYcDVJR3h2YjJ0MWNDQm1iM0lnWjJ4dlltRnNJSFpoY21saFlteGxjMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0F2THlCVVQwUlBPaUJ6ZFhCd2IzSjBJRzkwYUdWeUlHcHpJR1Z1ZG1seWIyNXRaVzUwY3lCc2FXdGxJSE5sY25acFkyVWdkMjl5YTJWeUlHRnVaQ0J1YjJSbElHSjVJR05vWldOcmFXNW5JSGRvWVhRZ2RHaGxJR2RzYjJKaGJDQnpZMjl3WlNCcGMxeHlYRzRnSUNBZ2FXWW9ibUZ0WlZOMGNpQnBiaUIzYVc1a2IzY3BJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsVUhObGRXUnZUMkpxWldOMEtIZHBibVJ2ZDF0dVlXMWxVM1J5WFNrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCamIyNXpiMnhsTG14dlp5aHVZVzFsVTNSeUxDQjBhR2x6S1R0Y2NseHVJQ0FnSUhSb2FYTXVkR2h5YjNkRmVHTmxjSFJwYjI0b2RHaHBjeTVTUlVaRlVrVk9RMFZmUlZKU1QxSXNJRzVoYldWVGRISWdLeUFuSUdseklHNXZkQ0JrWldacGJtVmtKeWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1VlRrUkZSa2xPUlVRN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUWlhSeklHRWdkbUZzZFdVZ2RHOGdkR2hsSUdOMWNuSmxiblFnYzJOdmNHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIc2hUMkpxWldOMGZTQnVZVzFsSUU1aGJXVWdiMllnZG1GeWFXRmliR1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHNoVDJKcVpXTjBmU0IyWVd4MVpTQldZV3gxWlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6WlhSV1lXeDFaVlJ2VTJOdmNHVW9ibUZ0WlN3Z2RtRnNkV1VwSUh0Y2NseHVJQ0FnSUhaaGNpQnpZMjl3WlNBOUlIUm9hWE11WjJWMFUyTnZjR1VvS1R0Y2NseHVJQ0FnSUhaaGNpQnpkSEpwWTNRZ1BTQnpZMjl3WlM1emRISnBZM1E3WEhKY2JpQWdJQ0IyWVhJZ2JtRnRaVk4wY2lBOUlHNWhiV1V1ZEc5VGRISnBibWNvS1R0Y2NseHVJQ0FnSUhkb2FXeGxJQ2h6WTI5d1pTa2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb0tHNWhiV1ZUZEhJZ2FXNGdjMk52Y0dVdWNISnZjR1Z5ZEdsbGN5a2dmSHdnS0NGemRISnBZM1FnSmlZZ0lYTmpiM0JsTG5CaGNtVnVkRk5qYjNCbEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjMk52Y0dVdVptbDRaV1JiYm1GdFpWTjBjbDBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuQnliM0JsY25ScFpYTmJibUZ0WlZOMGNsMGdQU0IyWVd4MVpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lITmpiM0JsSUQwZ2MyTnZjR1V1Y0dGeVpXNTBVMk52Y0dVN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMGFHbHpMblJvY205M1JYaGpaWEIwYVc5dUtIUm9hWE11VWtWR1JWSkZUa05GWDBWU1VrOVNMQ0J1WVcxbFUzUnlJQ3NnSnlCcGN5QnViM1FnWkdWbWFXNWxaQ2NwTzF4eVhHNGdJSDA3WEhKY2JpQWdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRM0psWVhSbElHRWdibVYzSUhOamIzQmxJR1p2Y2lCMGFHVWdaMmwyWlc0Z2JtOWtaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdleUZQWW1wbFkzUjlJRzV2WkdVZ1FWTlVJRzV2WkdVZ0tIQnliMmR5WVcwZ2IzSWdablZ1WTNScGIyNHBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdJVTlpYW1WamRIMGdjMk52Y0dVZ1UyTnZjR1VnWkdsamRHbHZibUZ5ZVNCMGJ5QndiM0IxYkdGMFpTNWNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcUwxeHlYRzRnSUhCdmNIVnNZWFJsVTJOdmNHVmZLRzV2WkdVc0lITmpiM0JsS1NCN1hISmNiaUFnSUNCcFppQW9ibTlrWlM1MGVYQmxJRDA5SUNkV1lYSnBZV0pzWlVSbFkyeGhjbUYwYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc1dlpHVXVaR1ZqYkdGeVlYUnBiMjV6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h6WTI5d1pTd2dibTlrWlM1a1pXTnNZWEpoZEdsdmJuTmJhVjB1YVdRdWJtRnRaU3dnZEdocGN5NVZUa1JGUmtsT1JVUXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXVkSGx3WlNBOVBTQW5SblZ1WTNScGIyNUVaV05zWVhKaGRHbHZiaWNwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoelkyOXdaU3dnYm05a1pTNXBaQzV1WVcxbExDQjBhR2x6TG1OeVpXRjBaVVoxYm1OMGFXOXVLRzV2WkdVc0lITmpiM0JsS1NrN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmpzZ0lDOHZJRVJ2SUc1dmRDQnlaV04xY25ObElHbHVkRzhnWm5WdVkzUnBiMjR1WEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXVkSGx3WlNBOVBTQW5SblZ1WTNScGIyNUZlSEJ5WlhOemFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3SUNBdkx5QkVieUJ1YjNRZ2NtVmpkWEp6WlNCcGJuUnZJR1oxYm1OMGFXOXVMbHh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkbUZ5SUhSb2FYTkpkR1Z5Y0hKbGRHVnlJRDBnZEdocGN6dGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlISmxZM1Z5YzJVb1kyaHBiR1FwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLR05vYVd4a0xtTnZibk4wY25WamRHOXlJRDA5SUhSb2FYTkpkR1Z5Y0hKbGRHVnlMbUZ6ZEM1amIyNXpkSEoxWTNSdmNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTkpkR1Z5Y0hKbGRHVnlMbkJ2Y0hWc1lYUmxVMk52Y0dWZktHTm9hV3hrTENCelkyOXdaU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdadmNpQW9kbUZ5SUc1aGJXVWdhVzRnYm05a1pTa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2NISnZjQ0E5SUc1dlpHVmJibUZ0WlYwN1hISmNiaUFnSUNBZ0lHbG1JQ2h3Y205d0lDWW1JSFI1Y0dWdlppQndjbTl3SUQwOUlDZHZZbXBsWTNRbktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd2NtOXdMbXhsYm1kMGFDQTlQU0FuYm5WdFltVnlKeUFtSmlCd2NtOXdMbk53YkdsalpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVSEp2Y0NCcGN5QmhiaUJoY25KaGVTNWNjbHh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NISnZjQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTjFjbk5sS0hCeWIzQmJhVjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV04xY25ObEtIQnliM0FwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVjBjeUJoSUhaaGJIVmxJR1p5YjIwZ2RHaGxJSE5qYjNCbElHTm9ZV2x1SUc5eUlHWnliMjBnWVc0Z2IySnFaV04wSUhCeWIzQmxjblI1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3SVU5aWFtVmpkSHdoUVhKeVlYbDlJR3hsWm5RZ1RtRnRaU0J2WmlCMllYSnBZV0pzWlNCdmNpQnZZbXBsWTNRdmNISnZjRzVoYldVZ2RIVndiR1V1WEhKY2JpQWdJQ29nUUhKbGRIVnliaUI3SVU5aWFtVmpkSDBnVm1Gc2RXVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBWbUZzZFdVb2JHVm1kQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tHeGxablF1YkdWdVozUm9LU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnZZbW9nUFNCc1pXWjBXekJkTzF4eVhHNGdJQ0FnSUNCMllYSWdjSEp2Y0NBOUlHeGxablJiTVYwN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEZCeWIzQmxjblI1S0c5aWFpd2djSEp2Y0NrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJXWVd4MVpVWnliMjFUWTI5d1pTaHNaV1owS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5TzF4eVhHNGdJRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk5sZEhNZ1lTQjJZV3gxWlNCMGJ5QjBhR1VnYzJOdmNHVWdZMmhoYVc0Z2IzSWdkRzhnWVc0Z2IySnFaV04wSUhCeWIzQmxjblI1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3SVU5aWFtVmpkSHdoUVhKeVlYbDlJR3hsWm5RZ1RtRnRaU0J2WmlCMllYSnBZV0pzWlNCdmNpQnZZbXBsWTNRdmNISnZjRzVoYldVZ2RIVndiR1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHNoVDJKcVpXTjBmU0IyWVd4MVpTQldZV3gxWlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6WlhSV1lXeDFaU2hzWldaMExDQjJZV3gxWlNrZ2UxeHlYRzRnSUNBZ2FXWWdLR3hsWm5RdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ2WW1vZ1BTQnNaV1owV3pCZE8xeHlYRzRnSUNBZ0lDQjJZWElnY0hKdmNDQTlJR3hsWm5SYk1WMDdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29iMkpxTENCd2NtOXdMQ0IyWVd4MVpTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGWmhiSFZsVkc5VFkyOXdaU2hzWldaMExDQjJZV3gxWlNrN1hISmNiaUFnSUNCOVhISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJVYUhKdmR5QmhiaUJsZUdObGNIUnBiMjRnYVc0Z2RHaGxJR2x1ZEdWeWNISmxkR1Z5SUhSb1lYUWdZMkZ1SUdKbElHaGhibVJzWldRZ1lua2dZVnh5WEc0Z0lDQXFJR2x1ZEdWeWNISmxkR1Z5SUhSeWVTOWpZWFJqYUNCemRHRjBaVzFsYm5RdUlDQkpaaUIxYm1oaGJtUnNaV1FzSUdFZ2NtVmhiQ0JsZUdObGNIUnBiMjRnZDJsc2JGeHlYRzRnSUNBcUlHSmxJSFJvY205M2JpNGdJRU5oYmlCaVpTQmpZV3hzWldRZ2QybDBhQ0JsYVhSb1pYSWdZVzRnWlhKeWIzSWdZMnhoYzNNZ1lXNWtJR0VnYldWemMyRm5aU3dnYjNKY2NseHVJQ0FnS2lCM2FYUm9JR0Z1SUdGamRIVmhiQ0J2WW1wbFkzUWdkRzhnWW1VZ2RHaHliM2R1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3SVU5aWFtVmpkSDBnWlhKeWIzSkRiR0Z6Y3lCVWVYQmxJRzltSUdWeWNtOXlJQ2hwWmlCdFpYTnpZV2RsSUdseklIQnliM1pwWkdWa0tTQnZjaUIwYUdWY2NseHVJQ0FnS2lBZ0lIWmhiSFZsSUhSdklIUm9jbTkzSUNocFppQnVieUJ0WlhOellXZGxLUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiM0IwWDIxbGMzTmhaMlVnVFdWemMyRm5aU0JpWldsdVp5QjBhSEp2ZDI0dVhISmNiaUFnSUNvdlhISmNiaUFnZEdoeWIzZEZlR05sY0hScGIyNG9aWEp5YjNKRGJHRnpjeXdnYjNCMFgyMWxjM05oWjJVcElIdGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxuTjBZWFJsVTNSaFkydGJNRjB1YVc1MFpYSndjbVYwWlhJcElIdGNjbHh1SUNBZ0lDQWdMeThnVkdocGN5QnBjeUIwYUdVZ2QzSnZibWNnYVc1MFpYSndjbVYwWlhJc0lIZGxJR0Z5WlNCemNHbHVibWx1WnlCdmJpQmhiaUJsZG1Gc0xseHlYRzRnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hTNXBiblJsY25CeVpYUmxjaTUwYUhKdmQwVjRZMlZ3ZEdsdmJpaGxjbkp2Y2tOc1lYTnpMQ0J2Y0hSZmJXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUdWMllXd2dkR2h5WlhjZ1lXNGdaWEp5YjNJZ1lXNWtJR1JwWkNCdWIzUWdZMkYwWTJnZ2FYUXVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyOXVkR2x1ZFdVZ2RHOGdjMlZsSUdsbUlIUm9hWE1nYkdWMlpXd2dZMkZ1SUdOaGRHTm9JR2wwTGx4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCcFppQW9iM0IwWDIxbGMzTmhaMlVnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCbGNuSnZja05zWVhOek8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2RtRnlJR1Z5Y205eUlEMGdkR2hwY3k1amNtVmhkR1ZQWW1wbFkzUW9aWEp5YjNKRGJHRnpjeWs3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvWlhKeWIzSXNJQ2R0WlhOellXZGxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxVSEpwYldsMGFYWmxLRzl3ZEY5dFpYTnpZV2RsS1N3Z1ptRnNjMlVzSUhSeWRXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdMeThnVTJWaGNtTm9JR1p2Y2lCaElIUnllU0J6ZEdGMFpXMWxiblF1WEhKY2JpQWdJQ0JrYnlCN1hISmNiaUFnSUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NXphR2xtZENncE8xeHlYRzRnSUNBZ2ZTQjNhR2xzWlNBb2MzUmhkR1VnSmlZZ2MzUmhkR1V1Ym05a1pTNTBlWEJsSUNFOVBTQW5WSEo1VTNSaGRHVnRaVzUwSnlrN1hISmNiaUFnSUNCcFppQW9jM1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdMeThnUlhKeWIzSWdhWE1nWW1WcGJtY2dkSEpoY0hCbFpDNWNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UxeHlYRzRnSUNBZ0lDQWdJRzV2WkdVNklITjBZWFJsTG01dlpHVXVhR0Z1Wkd4bGNpeGNjbHh1SUNBZ0lDQWdJQ0IwYUhKdmQxWmhiSFZsT2lCbGNuSnZjbHh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUM4dklGUm9jbTkzSUdFZ2NtVmhiQ0JsY25KdmNpNWNjbHh1SUNBZ0lDQWdkbUZ5SUhKbFlXeEZjbkp2Y2p0Y2NseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFYTmhLR1Z5Y205eUxDQjBhR2x6TGtWU1VrOVNLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNsUmhZbXhsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSjBWMllXeEZjbkp2Y2ljNklFVjJZV3hGY25KdmNpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNkU1lXNW5aVVZ5Y205eUp6b2dVbUZ1WjJWRmNuSnZjaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDZFNaV1psY21WdVkyVkZjbkp2Y2ljNklGSmxabVZ5Wlc1alpVVnljbTl5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdKMU41Ym5SaGVFVnljbTl5SnpvZ1UzbHVkR0Y0UlhKeWIzSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBblZIbHdaVVZ5Y205eUp6b2dWSGx3WlVWeWNtOXlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0oxVlNTVVZ5Y205eUp6b2dWVkpKUlhKeWIzSmNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwZVhCbElEMGdaWEp5YjNKVVlXSnNaVnQwYUdsekxtZGxkRkJ5YjNCbGNuUjVLR1Z5Y205eUxDQW5ibUZ0WlNjcFhTQjhmQ0JGY25KdmNqdGNjbHh1SUNBZ0lDQWdJQ0J5WldGc1JYSnliM0lnUFNCMGVYQmxLSFJvYVhNdVoyVjBVSEp2Y0dWeWRIa29aWEp5YjNJc0lDZHRaWE56WVdkbEp5a3BPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhKbFlXeEZjbkp2Y2lBOUlHVnljbTl5TG5SdlUzUnlhVzVuS0NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdkR2h5YjNjZ2NtVmhiRVZ5Y205eU8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdMeThnUm5WdVkzUnBiMjV6SUhSdklHaGhibVJzWlNCbFlXTm9JRzV2WkdVZ2RIbHdaUzVjY2x4dUlDQmNjbHh1SUNCemRHVndRWEp5WVhsRmVIQnlaWE56YVc5dUtDa2dlMXh5WEc0Z0lDQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTzF4eVhHNGdJQ0FnZG1GeUlHNXZaR1VnUFNCemRHRjBaUzV1YjJSbE8xeHlYRzRnSUNBZ2RtRnlJRzRnUFNCemRHRjBaUzV1SUh4OElEQTdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbUZ5Y21GNUtTQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbExtRnljbUY1SUQwZ2RHaHBjeTVqY21WaGRHVlBZbXBsWTNRb2RHaHBjeTVCVWxKQldTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNUtITjBZWFJsTG1GeWNtRjVMQ0J1SUMwZ01Td2djM1JoZEdVdWRtRnNkV1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tHNXZaR1V1Wld4bGJXVnVkSE5iYmwwcElIdGNjbHh1SUNBZ0lDQWdjM1JoZEdVdWJpQTlJRzRnS3lBeE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nYm05a1pTNWxiR1Z0Wlc1MGMxdHVYWDBwTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVZWEp5WVhrdWJHVnVaM1JvSUQwZ2MzUmhkR1V1YmlCOGZDQXdPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOcld6QmRMblpoYkhWbElEMGdjM1JoZEdVdVlYSnlZWGs3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNCemRHVndRWE56YVdkdWJXVnVkRVY0Y0hKbGMzTnBiMjRvS1NCN1hISmNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxVM1JoWTJ0Yk1GMDdYSEpjYmlBZ0lDQjJZWElnYm05a1pTQTlJSE4wWVhSbExtNXZaR1U3WEhKY2JpQWdJQ0JwWmlBb0lYTjBZWFJsTG1SdmJtVk1aV1owS1NCN1hISmNiaUFnSUNBZ0lITjBZWFJsTG1SdmJtVk1aV1owSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9lMjV2WkdVNklHNXZaR1V1YkdWbWRDd2dZMjl0Y0c5dVpXNTBjem9nZEhKMVpYMHBPMXh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2doYzNSaGRHVXVaRzl1WlZKcFoyaDBLU0I3WEhKY2JpQWdJQ0FnSUhOMFlYUmxMbVJ2Ym1WU2FXZG9kQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJSE4wWVhSbExteGxablJUYVdSbElEMGdjM1JoZEdVdWRtRnNkV1U3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTUxYm5Ob2FXWjBLSHR1YjJSbE9pQnViMlJsTG5KcFoyaDBmU2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lDQWdkbUZ5SUd4bFpuUlRhV1JsSUQwZ2MzUmhkR1V1YkdWbWRGTnBaR1U3WEhKY2JpQWdJQ0FnSUhaaGNpQnlhV2RvZEZOcFpHVWdQU0J6ZEdGMFpTNTJZV3gxWlR0Y2NseHVJQ0FnSUNBZ2RtRnlJSFpoYkhWbE8xeHlYRzRnSUNBZ0lDQnBaaUFvYm05a1pTNXZjR1Z5WVhSdmNpQTlQU0FuUFNjcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJSEpwWjJoMFUybGtaVHRjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiR1ZtZEZaaGJIVmxJRDBnZEdocGN5NW5aWFJXWVd4MVpTaHNaV1owVTJsa1pTazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISnBaMmgwVm1Gc2RXVWdQU0J5YVdkb2RGTnBaR1U3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR3hsWm5ST2RXMWlaWElnUFNCc1pXWjBWbUZzZFdVdWRHOU9kVzFpWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NtbG5hSFJPZFcxaVpYSWdQU0J5YVdkb2RGWmhiSFZsTG5SdlRuVnRZbVZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSnlzOUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR3hsWm5Rc0lISnBaMmgwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0d4bFpuUldZV3gxWlM1MGVYQmxJRDA5SUNkemRISnBibWNuSUh4OElISnBaMmgwVm1Gc2RXVXVkSGx3WlNBOVBTQW5jM1J5YVc1bkp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaV1owSUQwZ2JHVm1kRlpoYkhWbExuUnZVM1J5YVc1bktDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISnBaMmgwSUQwZ2NtbG5hSFJXWVd4MVpTNTBiMU4wY21sdVp5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWRDQTlJR3hsWm5ST2RXMWlaWEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpwWjJoMElEMGdjbWxuYUhST2RXMWlaWEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUWdLeUJ5YVdkb2REdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSnkwOUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCc1pXWjBUblZ0WW1WeUlDMGdjbWxuYUhST2RXMWlaWEk3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDY3FQU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdiR1ZtZEU1MWJXSmxjaUFxSUhKcFoyaDBUblZ0WW1WeU8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYm05a1pTNXZjR1Z5WVhSdmNpQTlQU0FuTHowbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUk9kVzFpWlhJZ0x5QnlhV2RvZEU1MWJXSmxjanRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1YjNCbGNtRjBiM0lnUFQwZ0p5VTlKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQnNaV1owVG5WdFltVnlJQ1VnY21sbmFIUk9kVzFpWlhJN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2M4UEQwbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUk9kVzFpWlhJZ1BEd2djbWxuYUhST2RXMWlaWEk3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDYytQajBuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJR3hsWm5ST2RXMWlaWElnUGo0Z2NtbG5hSFJPZFcxaVpYSTdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNodWIyUmxMbTl3WlhKaGRHOXlJRDA5SUNjK1BqNDlKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQnNaV1owVG5WdFltVnlJRDQrUGlCeWFXZG9kRTUxYldKbGNqdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSnlZOUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCc1pXWjBUblZ0WW1WeUlDWWdjbWxuYUhST2RXMWlaWEk3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDZGVQU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdiR1ZtZEU1MWJXSmxjaUJlSUhKcFoyaDBUblZ0WW1WeU8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYm05a1pTNXZjR1Z5WVhSdmNpQTlQU0FuZkQwbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUk9kVzFpWlhJZ2ZDQnlhV2RvZEU1MWJXSmxjanRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1UzbHVkR0Y0UlhKeWIzSW9KMVZ1YTI1dmQyNGdZWE56YVdkdWJXVnVkQ0JsZUhCeVpYTnphVzl1T2lBbklDc2dibTlrWlM1dmNHVnlZWFJ2Y2lrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnZEdocGN5NWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIUm9hWE11YzJWMFZtRnNkV1VvYkdWbWRGTnBaR1VzSUhaaGJIVmxLVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTG5aaGJIVmxJRDBnZG1Gc2RXVTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1FtbHVZWEo1Ulhod2NtVnpjMmx2YmlncElIdGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamExc3dYVHRjY2x4dUlDQWdJSFpoY2lCdWIyUmxJRDBnYzNSaGRHVXVibTlrWlR0Y2NseHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdVpHOXVaVXhsWm5RcElIdGNjbHh1SUNBZ0lDQWdjM1JoZEdVdVpHOXVaVXhsWm5RZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1ZFc1emFHbG1kQ2g3Ym05a1pUb2dibTlrWlM1c1pXWjBmU2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0NGemRHRjBaUzVrYjI1bFVtbG5hSFFwSUh0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1Wkc5dVpWSnBaMmgwSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXViR1ZtZEZaaGJIVmxJRDBnYzNSaGRHVXVkbUZzZFdVN1hISmNiaUFnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYXk1MWJuTm9hV1owS0h0dWIyUmxPaUJ1YjJSbExuSnBaMmgwZlNrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1YzJocFpuUW9LVHRjY2x4dUlDQWdJQ0FnZG1GeUlHeGxablJUYVdSbElEMGdjM1JoZEdVdWJHVm1kRlpoYkhWbE8xeHlYRzRnSUNBZ0lDQjJZWElnY21sbmFIUlRhV1JsSUQwZ2MzUmhkR1V1ZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJSFpoY2lCMllXeDFaVHRjY2x4dUlDQWdJQ0FnZG1GeUlHTnZiWEFnUFNCMGFHbHpMbU52YlhBb2JHVm1kRk5wWkdVc0lISnBaMmgwVTJsa1pTazdYSEpjYmlBZ0lDQWdJR2xtSUNodWIyUmxMbTl3WlhKaGRHOXlJRDA5SUNjOVBTY2dmSHdnYm05a1pTNXZjR1Z5WVhSdmNpQTlQU0FuSVQwbktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGxablJUYVdSbExtbHpVSEpwYldsMGFYWmxJQ1ltSUhKcFoyaDBVMmxrWlM1cGMxQnlhVzFwZEdsMlpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCc1pXWjBVMmxrWlM1a1lYUmhJRDA5SUhKcFoyaDBVMmxrWlM1a1lYUmhPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHTnZiWEFnUFQwOUlEQTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2NoUFNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnSVhaaGJIVmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDYzlQVDBuSUh4OElHNXZaR1V1YjNCbGNtRjBiM0lnUFQwZ0p5RTlQU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYkdWbWRGTnBaR1V1YVhOUWNtbHRhWFJwZG1VZ0ppWWdjbWxuYUhSVGFXUmxMbWx6VUhKcGJXbDBhWFpsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJR3hsWm5SVGFXUmxMbVJoZEdFZ1BUMDlJSEpwWjJoMFUybGtaUzVrWVhSaE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUlRhV1JsSUQwOVBTQnlhV2RvZEZOcFpHVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2NoUFQwbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUNGMllXeDFaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9ibTlrWlM1dmNHVnlZWFJ2Y2lBOVBTQW5QaWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHTnZiWEFnUFQwZ01UdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2MrUFNjcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJR052YlhBZ1BUMGdNU0I4ZkNCamIyMXdJRDA5UFNBd08xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzV2WkdVdWIzQmxjbUYwYjNJZ1BUMGdKenduS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQmpiMjF3SUQwOUlDMHhPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSnp3OUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnWTI5dGNDQTlQU0F0TVNCOGZDQmpiMjF3SUQwOVBTQXdPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSnlzbktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGxablJUYVdSbExuUjVjR1VnUFQwZ0ozTjBjbWx1WnljZ2ZId2djbWxuYUhSVGFXUmxMblI1Y0dVZ1BUMGdKM04wY21sdVp5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJzWldaMFZtRnNkV1VnUFNCc1pXWjBVMmxrWlM1MGIxTjBjbWx1WnlncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlISnBaMmgwVm1Gc2RXVWdQU0J5YVdkb2RGTnBaR1V1ZEc5VGRISnBibWNvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHeGxablJXWVd4MVpTQTlJR3hsWm5SVGFXUmxMblJ2VG5WdFltVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZWElnY21sbmFIUldZV3gxWlNBOUlISnBaMmgwVTJsa1pTNTBiMDUxYldKbGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHeGxablJXWVd4MVpTQXJJSEpwWjJoMFZtRnNkV1U3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtOWtaUzV2Y0dWeVlYUnZjaUE5UFNBbmFXNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMGFHbHpMbWhoYzFCeWIzQmxjblI1S0hKcFoyaDBVMmxrWlN3Z2JHVm1kRk5wWkdVcE8xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzV2WkdVdWIzQmxjbUYwYjNJZ1BUMGdKMmx1YzNSaGJtTmxiMlluS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbWx6WVNoeWFXZG9kRk5wWkdVc0lIUm9hWE11UmxWT1ExUkpUMDRwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuUm9jbTkzUlhoalpYQjBhVzl1S0hSb2FYTXVWRmxRUlY5RlVsSlBVaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FuUlhod1pXTjBhVzVuSUdFZ1puVnVZM1JwYjI0Z2FXNGdhVzV6ZEdGdVkyVnZaaUJqYUdWamF5Y3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlIUm9hWE11YVhOaEtHeGxablJUYVdSbExDQnlhV2RvZEZOcFpHVXBPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnNaV1owVm1Gc2RXVWdQU0JzWldaMFUybGtaUzUwYjA1MWJXSmxjaWdwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5YVdkb2RGWmhiSFZsSUQwZ2NtbG5hSFJUYVdSbExuUnZUblZ0WW1WeUtDazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHNXZaR1V1YjNCbGNtRjBiM0lnUFQwZ0p5MG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHeGxablJXWVd4MVpTQXRJSEpwWjJoMFZtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDY3FKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQnNaV1owVm1Gc2RXVWdLaUJ5YVdkb2RGWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ibTlrWlM1dmNHVnlZWFJ2Y2lBOVBTQW5MeWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdiR1ZtZEZaaGJIVmxJQzhnY21sbmFIUldZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzV2WkdVdWIzQmxjbUYwYjNJZ1BUMGdKeVVuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJR3hsWm5SV1lXeDFaU0FsSUhKcFoyaDBWbUZzZFdVN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2NtSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JzWldaMFZtRnNkV1VnSmlCeWFXZG9kRlpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYm05a1pTNXZjR1Z5WVhSdmNpQTlQU0FuZkNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnYkdWbWRGWmhiSFZsSUh3Z2NtbG5hSFJXWVd4MVpUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSjE0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUldZV3gxWlNCZUlISnBaMmgwVm1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNodWIyUmxMbTl3WlhKaGRHOXlJRDA5SUNjOFBDY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2JHVm1kRlpoYkhWbElEdzhJSEpwWjJoMFZtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDYytQaWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdiR1ZtZEZaaGJIVmxJRDQrSUhKcFoyaDBWbUZzZFdVN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2MrUGo0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUd4bFpuUldZV3gxWlNBK1BqNGdjbWxuYUhSV1lXeDFaVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1UzbHVkR0Y0UlhKeWIzSW9KMVZ1YTI1dmQyNGdZbWx1WVhKNUlHOXdaWEpoZEc5eU9pQW5JQ3NnYm05a1pTNXZjR1Z5WVhSdmNpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hTNTJZV3gxWlNBOUlIUm9hWE11WTNKbFlYUmxVSEpwYldsMGFYWmxLSFpoYkhWbEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOU8xeHlYRzRnSUZ4eVhHNGdJSE4wWlhCQ2JHOWphMU4wWVhSbGJXVnVkQ2dwSUh0Y2NseHVJQ0FnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hUdGNjbHh1SUNBZ0lIWmhjaUJ1YjJSbElEMGdjM1JoZEdVdWJtOWtaVHRjY2x4dUlDQWdJSFpoY2lCdUlEMGdjM1JoZEdVdWJsOGdmSHdnTUR0Y2NseHVJQ0FnSUdsbUlDaHViMlJsTG1KdlpIbGJibDBwSUh0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1Wkc5dVpTQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQnpkR0YwWlM1dVh5QTlJRzRnS3lBeE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nYm05a1pTNWliMlI1VzI1ZGZTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1a2IyNWxJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdhV1lnS0hOMFlYUmxMbTV2WkdVdWRIbHdaU0FoUFNBblVISnZaM0poYlNjcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCTVpXRjJaU0IwYUdVZ2NtOXZkQ0J6WTI5d1pTQnZiaUIwYUdVZ2RISmxaU0JwYmlCallYTmxJSFJvWlNCd2NtOW5jbUZ0SUdseklHRndjR1Z1WkdWa0lIUnZMbHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTV6YUdsbWRDZ3BPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNCemRHVndRbkpsWVd0VGRHRjBaVzFsYm5Rb0tTQjdYSEpjYmlBZ0lDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lIWmhjaUJ1YjJSbElEMGdjM1JoZEdVdWJtOWtaVHRjY2x4dUlDQWdJSFpoY2lCc1lXSmxiQ0E5SUc1MWJHdzdYSEpjYmlBZ0lDQnBaaUFvYm05a1pTNXNZV0psYkNrZ2UxeHlYRzRnSUNBZ0lDQnNZV0psYkNBOUlHNXZaR1V1YkdGaVpXd3VibUZ0WlR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJMbk5vYVdaMEtDazdYSEpjYmlBZ0lDQjNhR2xzWlNBb2MzUmhkR1VnSmlaY2NseHVJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTNXViMlJsTG5SNWNHVWdJVDBnSjBOaGJHeEZlSEJ5WlhOemFXOXVKeUFtSmx4eVhHNGdJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtNXZaR1V1ZEhsd1pTQWhQU0FuVG1WM1JYaHdjbVZ6YzJsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tHeGhZbVZzSUQ4Z2JHRmlaV3dnUFQwZ2MzUmhkR1V1YkdGaVpXd2dPaUFvYzNSaGRHVXVhWE5NYjI5d0lIeDhJSE4wWVhSbExtbHpVM2RwZEdOb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCemRHRjBaU0E5SUhSb2FYTXVjM1JoZEdWVGRHRmpheTV6YUdsbWRDZ3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdMeThnVTNsdWRHRjRJR1Z5Y205eUxDQmtieUJ1YjNRZ1lXeHNiM2NnZEdocGN5Qmxjbkp2Y2lCMGJ5QmlaU0IwY21Gd2NHVmtMbHh5WEc0Z0lDQWdkR2h5YjNjZ1UzbHVkR0Y0UlhKeWIzSW9KMGxzYkdWbllXd2dZbkpsWVdzZ2MzUmhkR1Z0Wlc1MEp5azdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1EyRnNiRVY0Y0hKbGMzTnBiMjRvS1NCN1hISmNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxVM1JoWTJ0Yk1GMDdYSEpjYmlBZ0lDQjJZWElnYm05a1pTQTlJSE4wWVhSbExtNXZaR1U3WEhKY2JpQWdJQ0JwWmlBb0lYTjBZWFJsTG1SdmJtVkRZV3hzWldWZktTQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbExtUnZibVZEWVd4c1pXVmZJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXVZMkZzYkdWbExDQmpiMjF3YjI1bGJuUnpPaUIwY25WbGZTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvSVhOMFlYUmxMbVoxYm1OZktTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIWmhiSFZsSUc5bUlIUm9aU0JtZFc1amRHbHZiaTVjY2x4dUlDQWdJQ0FnSUNCcFppQW9jM1JoZEdVdWRtRnNkV1V1ZEhsd1pTQTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTNW1kVzVqWHlBOUlITjBZWFJsTG5aaGJIVmxPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzNSaGRHVXVkbUZzZFdVdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlYUmxMbTFsYldKbGNsOGdQU0J6ZEdGMFpTNTJZV3gxWlZzd1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtWjFibU5mSUQwZ2RHaHBjeTVuWlhSV1lXeDFaU2h6ZEdGMFpTNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lYTjBZWFJsTG1aMWJtTmZJSHg4SUhOMFlYUmxMbVoxYm1OZkxuUjVjR1VnSVQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Sb2NtOTNSWGhqWlhCMGFXOXVLSFJvYVhNdVZGbFFSVjlGVWxKUFVpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6ZEdGMFpTNTJZV3gxWlNBbUppQnpkR0YwWlM1MllXeDFaUzUwZVhCbEtTQXJJQ2NnYVhNZ2JtOTBJR0VnWm5WdVkzUnBiMjRuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBdkx5QkVaWFJsY20xcGJtVWdkbUZzZFdVZ2IyWWdKM1JvYVhNbklHbHVJR1oxYm1OMGFXOXVMbHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlM1dWIyUmxMblI1Y0dVZ1BUMGdKMDVsZDBWNGNISmxjM05wYjI0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBaUzVtZFc1alZHaHBjMThnUFNCMGFHbHpMbU55WldGMFpVOWlhbVZqZENoemRHRjBaUzVtZFc1alh5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBaUzVwYzBOdmJuTjBjblZqZEc5eVh5QTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNTJZV3gxWlM1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtWjFibU5VYUdselh5QTlJSE4wWVhSbExuWmhiSFZsV3pCZE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBaUzVtZFc1alZHaHBjMThnUFZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmphMXQwYUdsekxuTjBZWFJsVTNSaFkyc3ViR1Z1WjNSb0lDMGdNVjB1ZEdocGMwVjRjSEpsYzNOcGIyNDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lITjBZWFJsTG1GeVozVnRaVzUwY3lBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnVJRDBnTUR0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYmlBOUlITjBZWFJsTG01Zk8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoemRHRjBaUzVoY21kMWJXVnVkSE11YkdWdVozUm9JQ0U5SUc1dlpHVXVZWEpuZFcxbGJuUnpMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkR1V1WVhKbmRXMWxiblJ6VzI0Z0xTQXhYU0E5SUhOMFlYUmxMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCcFppQW9ibTlrWlM1aGNtZDFiV1Z1ZEhOYmJsMHBJSHRjY2x4dUlDQWdJQ0FnSUNCemRHRjBaUzV1WHlBOUlHNGdLeUF4TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYXk1MWJuTm9hV1owS0h0dWIyUmxPaUJ1YjJSbExtRnlaM1Z0Wlc1MGMxdHVYWDBwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRnpkR0YwWlM1a2IyNWxSWGhsWXlrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYaGxZM1YwWlVaMWJtTjBhVzl1S0NrN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuTm9hV1owS0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxMbWx6UTI5dWMzUnlkV04wYjNKZklDWW1JSE4wWVhSbExuWmhiSFZsTG5SNWNHVWdJVDA5SUNkdlltcGxZM1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkydGJNRjB1ZG1Gc2RXVWdQU0J6ZEdGMFpTNW1kVzVqVkdocGMxODdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hTNTJZV3gxWlNBOUlITjBZWFJsTG5aaGJIVmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdaWGhsWTNWMFpVWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTzF4eVhHNGdJQ0FnZG1GeUlHNXZaR1VnUFNCemRHRjBaUzV1YjJSbE8xeHlYRzRnSUNBZ2MzUmhkR1V1Wkc5dVpVVjRaV01nUFNCMGNuVmxPMXh5WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbVoxYm1OZkxtNXZaR1VnSmlaY2NseHVJQ0FnSUNBZ0lDQW9jM1JoZEdVdVpuVnVZMTh1Ym05a1pTNTBlWEJsSUQwOUlDZEdkVzVqZEdsdmJrRndjR3g1WHljZ2ZIeGNjbHh1SUNBZ0lDQWdJQ0FnYzNSaGRHVXVablZ1WTE4dWJtOWtaUzUwZVhCbElEMDlJQ2RHZFc1amRHbHZia05oYkd4Zkp5a3BJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVablZ1WTFSb2FYTmZJRDBnYzNSaGRHVXVZWEpuZFcxbGJuUnpMbk5vYVdaMEtDazdYSEpjYmlBZ0lDQWdJR2xtSUNoemRHRjBaUzVtZFc1alh5NXViMlJsTG5SNWNHVWdQVDBnSjBaMWJtTjBhVzl1UVhCd2JIbGZKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRlZ1Y0dGamF5QmhiR3dnZEdobElHRnlaM1Z0Wlc1MGN5Qm1jbTl0SUhSb1pTQndjbTkyYVdSbFpDQmhjbkpoZVM1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhKbmMweHBjM1FnUFNCemRHRjBaUzVoY21kMWJXVnVkSE11YzJocFpuUW9LVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZWEpuYzB4cGMzUWdKaVlnZEdocGN5NXBjMkVvWVhKbmMweHBjM1FzSUhSb2FYTXVRVkpTUVZrcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBaUzVoY21kMWJXVnVkSE1nUFNCYlhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSm5jMHhwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVdVlYSm5kVzFsYm5SelcybGRJRDBnZEdocGN5NW5aWFJRY205d1pYSjBlU2hoY21kelRHbHpkQ3dnYVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtRnlaM1Z0Wlc1MGN5QTlJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNW1kVzVqWHlBOUlITjBZWFJsTG0xbGJXSmxjbDg3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JwWmlBb2MzUmhkR1V1Wm5WdVkxOHVibTlrWlNrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnYzJOdmNHVWdQVnh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVlRZMjl3WlNoemRHRjBaUzVtZFc1alh5NXViMlJsTG1KdlpIa3NJSE4wWVhSbExtWjFibU5mTG5CaGNtVnVkRk5qYjNCbEtUdGNjbHh1SUNBZ0lDQWdMeThnUVdSa0lHRnNiQ0JoY21kMWJXVnVkSE11WEhKY2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzUmhkR1V1Wm5WdVkxOHVibTlrWlM1d1lYSmhiWE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRnlZVzFPWVcxbElEMGdkR2hwY3k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYzNSaGRHVXVablZ1WTE4dWJtOWtaUzV3WVhKaGJYTmJhVjB1Ym1GdFpTazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhjbUZ0Vm1Gc2RXVWdQU0J6ZEdGMFpTNWhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdhU0EvSUhOMFlYUmxMbUZ5WjNWdFpXNTBjMXRwWFNBNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVWVTVFUlVaSlRrVkVPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVUhKdmNHVnlkSGtvYzJOdmNHVXNJSEJoY21GdFRtRnRaU3dnY0dGeVlXMVdZV3gxWlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdMeThnUW5WcGJHUWdZWEpuZFcxbGJuUnpJSFpoY21saFlteGxMbHh5WEc0Z0lDQWdJQ0IyWVhJZ1lYSm5jMHhwYzNRZ1BTQjBhR2x6TG1OeVpXRjBaVTlpYW1WamRDaDBhR2x6TGtGU1VrRlpLVHRjY2x4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCemRHRjBaUzVoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRkJ5YjNCbGNuUjVLR0Z5WjNOTWFYTjBMQ0IwYUdsekxtTnlaV0YwWlZCeWFXMXBkR2wyWlNocEtTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtRnlaM1Z0Wlc1MGMxdHBYU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2RHaHBjeTV6WlhSUWNtOXdaWEowZVNoelkyOXdaU3dnSjJGeVozVnRaVzUwY3ljc0lHRnlaM05NYVhOMEtUdGNjbHh1SUNBZ0lDQWdkbUZ5SUdaMWJtTlRkR0YwWlNBOUlIdGNjbHh1SUNBZ0lDQWdJQ0J1YjJSbE9pQnpkR0YwWlM1bWRXNWpYeTV1YjJSbExtSnZaSGtzWEhKY2JpQWdJQ0FnSUNBZ2MyTnZjR1U2SUhOamIzQmxMRnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTkZlSEJ5WlhOemFXOXVPaUJ6ZEdGMFpTNW1kVzVqVkdocGMxOWNjbHh1SUNBZ0lDQWdmVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9ablZ1WTFOMFlYUmxLVHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVkbUZzZFdVZ1BTQjBhR2x6TGxWT1JFVkdTVTVGUkRzZ0lDOHZJRVJsWm1GMWJIUWdkbUZzZFdVZ2FXWWdibThnWlhod2JHbGphWFFnY21WMGRYSnVMbHh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNW1kVzVqWHk1dVlYUnBkbVZHZFc1aktTQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbExuWmhiSFZsSUQwZ2MzUmhkR1V1Wm5WdVkxOHVibUYwYVhabFJuVnVZeTVoY0hCc2VTaHpkR0YwWlM1bWRXNWpWR2hwYzE4c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaUzVoY21kMWJXVnVkSE1wTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoemRHRjBaUzVtZFc1alh5NWhjM2x1WTBaMWJtTXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlIUm9hWE5KYm5SbGNuQnlaWFJsY2lBOUlIUm9hWE03WEhKY2JpQWdJQ0FnSUhaaGNpQmpZV3hzWW1GamF5QTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYzNSaGRHVXVkbUZzZFdVZ1BTQjJZV3gxWlNCOGZDQjBhR2x6U1c1MFpYSndjbVYwWlhJdVZVNUVSVVpKVGtWRU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhOSmJuUmxjbkJ5WlhSbGNpNXdZWFZ6WldSZklEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lIMDdYSEpjYmlBZ0lDQWdJSFpoY2lCaGNtZHpWMmwwYUVOaGJHeGlZV05ySUQwZ2MzUmhkR1V1WVhKbmRXMWxiblJ6TG1OdmJtTmhkQ2hqWVd4c1ltRmpheWs3WEhKY2JpQWdJQ0FnSUhOMFlYUmxMbVoxYm1OZkxtRnplVzVqUm5WdVl5NWhjSEJzZVNoemRHRjBaUzVtZFc1alZHaHBjMThzSUdGeVozTlhhWFJvUTJGc2JHSmhZMnNwTzF4eVhHNGdJQ0FnSUNCMGFHbHpMbkJoZFhObFpGOGdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tITjBZWFJsTG1aMWJtTmZMbVYyWVd3cElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUdOdlpHVWdQU0J6ZEdGMFpTNWhjbWQxYldWdWRITmJNRjA3WEhKY2JpQWdJQ0FnSUdsbUlDZ2hZMjlrWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4wWVhSbExuWmhiSFZsSUQwZ2RHaHBjeTVWVGtSRlJrbE9SVVE3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lXTnZaR1V1YVhOUWNtbHRhWFJwZG1VcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCS1V5QmtiMlZ6SUc1dmRDQndZWEp6WlNCVGRISnBibWNnYjJKcVpXTjBjenBjY2x4dUlDQWdJQ0FnSUNBdkx5QmxkbUZzS0c1bGR5QlRkSEpwYm1jb0p6RWdLeUF4SnlrcElDMCtJQ2N4SUNzZ01TZGNjbHh1SUNBZ0lDQWdJQ0J6ZEdGMFpTNTJZV3gxWlNBOUlHTnZaR1U3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1YyWVd4SmJuUmxjbkJ5WlhSbGNpQTlJRzVsZHlCSmJuUmxjbkJ5WlhSbGNpaGpiMlJsTG5SdlUzUnlhVzVuS0NrcE8xeHlYRzRnSUNBZ0lDQWdJR1YyWVd4SmJuUmxjbkJ5WlhSbGNpNXpkR0YwWlZOMFlXTnJXekJkTG5OamIzQmxMbkJoY21WdWRGTmpiM0JsSUQwZ2RHaHBjeTVuWlhSVFkyOXdaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lITjBZWFJsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYm05a1pUb2dlM1I1Y0dVNklDZEZkbUZzWHlkOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnYVc1MFpYSndjbVYwWlhJNklHVjJZV3hKYm5SbGNuQnlaWFJsY2x4eVhHNGdJQ0FnSUNBZ0lIMDdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9jM1JoZEdVcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCVWVYQmxSWEp5YjNJb0oyWjFibU4wYVc5dUlHNXZkQ0JoSUdaMWJtTjBhVzl1SUNob2RXZy9LU2NwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJRnh5WEc0Z0lIMWNjbHh1SUNCY2NseHVJQ0J6ZEdWd1EyRjBZMmhEYkdGMWMyVW9LU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbk4wWVhSbFUzUmhZMnRiTUYwN1hISmNiaUFnSUNCMllYSWdibTlrWlNBOUlITjBZWFJsTG01dlpHVTdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbVJ2Ym1WQ2IyUjVLU0I3WEhKY2JpQWdJQ0FnSUhOMFlYUmxMbVJ2Ym1WQ2IyUjVJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdkbUZ5SUhOamIzQmxPMXh5WEc0Z0lDQWdJQ0JwWmlBb2JtOWtaUzV3WVhKaGJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhOamIzQmxJRDBnZEdocGN5NWpjbVZoZEdWVGNHVmphV0ZzVTJOdmNHVW9kR2hwY3k1blpYUlRZMjl3WlNncEtUdGNjbHh1SUNBZ0lDQWdJQ0F2THlCQlpHUWdkR2hsSUdGeVozVnRaVzUwTGx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhKaGJVNWhiV1VnUFNCMGFHbHpMbU55WldGMFpWQnlhVzFwZEdsMlpTaHViMlJsTG5CaGNtRnRMbTVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVSEp2Y0dWeWRIa29jMk52Y0dVc0lIQmhjbUZ0VG1GdFpTd2djM1JoZEdVdWRHaHliM2RXWVd4MVpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9lMjV2WkdVNklHNXZaR1V1WW05a2VTd2djMk52Y0dVNklITmpiM0JsZlNrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1YzJocFpuUW9LVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlPMXh5WEc0Z0lGeHlYRzRnSUhOMFpYQkRiMjVrYVhScGIyNWhiRVY0Y0hKbGMzTnBiMjRvS1NCN1hISmNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxVM1JoWTJ0Yk1GMDdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbVJ2Ym1VcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0NGemRHRjBaUzUwWlhOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYzNSaGRHVXVkR1Z6ZENBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yTG5WdWMyaHBablFvZTI1dlpHVTZJSE4wWVhSbExtNXZaR1V1ZEdWemRIMHBPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhOMFlYUmxMbVJ2Ym1VZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNTJZV3gxWlM1MGIwSnZiMnhsWVc0b0tTQW1KaUJ6ZEdGMFpTNXViMlJsTG1OdmJuTmxjWFZsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTUxYm5Ob2FXWjBLSHR1YjJSbE9pQnpkR0YwWlM1dWIyUmxMbU52Ym5ObGNYVmxiblI5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0Z6ZEdGMFpTNTJZV3gxWlM1MGIwSnZiMnhsWVc0b0tTQW1KaUJ6ZEdGMFpTNXViMlJsTG1Gc2RHVnlibUYwWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9lMjV2WkdVNklITjBZWFJsTG01dlpHVXVZV3gwWlhKdVlYUmxmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWMyaHBablFvS1R0Y2NseHVJQ0FnSUNBZ2FXWWdLSE4wWVhSbExtNXZaR1V1ZEhsd1pTQTlQU0FuUTI5dVpHbDBhVzl1WVd4RmVIQnlaWE56YVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFM1MllXeDFaU0E5SUhOMFlYUmxMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1EyOXVkR2x1ZFdWVGRHRjBaVzFsYm5Rb0tTQjdYSEpjYmlBZ0lDQjJZWElnYm05a1pTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamExc3dYUzV1YjJSbE8xeHlYRzRnSUNBZ2RtRnlJR3hoWW1Wc0lEMGdiblZzYkR0Y2NseHVJQ0FnSUdsbUlDaHViMlJsTG14aFltVnNLU0I3WEhKY2JpQWdJQ0FnSUd4aFltVnNJRDBnYm05a1pTNXNZV0psYkM1dVlXMWxPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTzF4eVhHNGdJQ0FnZDJocGJHVWdLSE4wWVhSbElDWW1YSEpjYmlBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1V1Ym05a1pTNTBlWEJsSUNFOUlDZERZV3hzUlhod2NtVnpjMmx2YmljZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FnSUNCemRHRjBaUzV1YjJSbExuUjVjR1VnSVQwZ0owNWxkMFY0Y0hKbGMzTnBiMjRuS1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTNXBjMHh2YjNBcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXeGhZbVZzSUh4OElDaHNZV0psYkNBOVBTQnpkR0YwWlM1c1lXSmxiQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yTG5Ob2FXWjBLQ2s3WEhKY2JpQWdJQ0FnSUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnTHk4Z1UzbHVkR0Y0SUdWeWNtOXlMQ0JrYnlCdWIzUWdZV3hzYjNjZ2RHaHBjeUJsY25KdmNpQjBieUJpWlNCMGNtRndjR1ZrTGx4eVhHNGdJQ0FnZEdoeWIzY2dVM2x1ZEdGNFJYSnliM0lvSjBsc2JHVm5ZV3dnWTI5dWRHbHVkV1VnYzNSaGRHVnRaVzUwSnlrN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQnpkR1Z3Ukc5WGFHbHNaVk4wWVhSbGJXVnVkQ2dwSUh0Y2NseHVJQ0FnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hUdGNjbHh1SUNBZ0lITjBZWFJsTG1selRHOXZjQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQnBaaUFvYzNSaGRHVXVibTlrWlM1MGVYQmxJRDA5SUNkRWIxZG9hV3hsVTNSaGRHVnRaVzUwSnlBbUppQnpkR0YwWlM1MFpYTjBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdMeThnUm1seWMzUWdhWFJsY21GMGFXOXVJRzltSUdSdkwzZG9hV3hsSUdWNFpXTjFkR1Z6SUhkcGRHaHZkWFFnWTJobFkydHBibWNnZEdWemRDNWNjbHh1SUNBZ0lDQWdjM1JoZEdVdWRtRnNkV1VnUFNCMGFHbHpMbFJTVlVVN1hISmNiaUFnSUNBZ0lITjBZWFJsTG5SbGMzUWdQU0IwY25WbE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMFpTNTBaWE4wS1NCN1hISmNiaUFnSUNBZ0lITjBZWFJsTG5SbGMzUWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nYzNSaGRHVXVibTlrWlM1MFpYTjBmU2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNTBaWE4wSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUdsbUlDZ2hjM1JoZEdVdWRtRnNkV1V1ZEc5Q2IyOXNaV0Z1S0NrcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNXViMlJsTG1KdlpIa3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1ZFc1emFHbG1kQ2g3Ym05a1pUb2djM1JoZEdVdWJtOWtaUzVpYjJSNWZTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQjlPMXh5WEc0Z0lGeHlYRzRnSUhOMFpYQkZiWEIwZVZOMFlYUmxiV1Z1ZENncElIdGNjbHh1SUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYXk1emFHbG1kQ2dwTzF4eVhHNGdJSDA3WEhKY2JpQWdYSEpjYmlBZ2MzUmxjRVYyWVd4ZktDa2dlMXh5WEc0Z0lDQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlZOMFlXTnJXekJkTzF4eVhHNGdJQ0FnYVdZZ0tDRnpkR0YwWlM1cGJuUmxjbkJ5WlhSbGNpNXpkR1Z3S0NrcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuTm9hV1owS0NrN1hISmNiaUFnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hTNTJZV3gxWlNBOUlITjBZWFJsTG1sdWRHVnljSEpsZEdWeUxuWmhiSFZsSUh4OElIUm9hWE11VlU1RVJVWkpUa1ZFTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDA3WEhKY2JpQWdYSEpjYmlBZ2MzUmxjRVY0Y0hKbGMzTnBiMjVUZEdGMFpXMWxiblFvS1NCN1hISmNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxVM1JoWTJ0Yk1GMDdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbVJ2Ym1VcElIdGNjbHh1SUNBZ0lDQWdjM1JoZEdVdVpHOXVaU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NTFibk5vYVdaMEtIdHViMlJsT2lCemRHRjBaUzV1YjJSbExtVjRjSEpsYzNOcGIyNTlLVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NXphR2xtZENncE8xeHlYRzRnSUNBZ0lDQXZMeUJUWVhabElIUm9hWE1nZG1Gc2RXVWdkRzhnZEdobElHbHVkR1Z5Y0hKbGRHVnlJR1p2Y2lCMWMyVWdZWE1nWVNCeVpYUjFjbTRnZG1Gc2RXVWdhV1pjY2x4dUlDQWdJQ0FnTHk4Z2RHaHBjeUJqYjJSbElHbHpJR2x1YzJsa1pTQmhiaUJsZG1Gc0lHWjFibU4wYVc5dUxseHlYRzRnSUNBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnYzNSaGRHVXVkbUZzZFdVN1hISmNiaUFnSUNCOVhISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQnpkR1Z3Um05eVNXNVRkR0YwWlcxbGJuUW9LU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbk4wWVhSbFUzUmhZMnRiTUYwN1hISmNiaUFnSUNCemRHRjBaUzVwYzB4dmIzQWdQU0IwY25WbE8xeHlYRzRnSUNBZ2RtRnlJRzV2WkdVZ1BTQnpkR0YwWlM1dWIyUmxPMXh5WEc0Z0lDQWdhV1lnS0NGemRHRjBaUzVrYjI1bFZtRnlhV0ZpYkdWZktTQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbExtUnZibVZXWVhKcFlXSnNaVjhnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0IyWVhJZ2JHVm1kQ0E5SUc1dlpHVXViR1ZtZER0Y2NseHVJQ0FnSUNBZ2FXWWdLR3hsWm5RdWRIbHdaU0E5UFNBblZtRnlhV0ZpYkdWRVpXTnNZWEpoZEdsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QkpibXhwYm1VZ2RtRnlhV0ZpYkdVZ1pHVmpiR0Z5WVhScGIyNDZJR1p2Y2lBb2RtRnlJSGdnYVc0Z2VTbGNjbHh1SUNBZ0lDQWdJQ0JzWldaMElEMGdiR1ZtZEM1a1pXTnNZWEpoZEdsdmJuTmJNRjB1YVdRN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUd4bFpuUXNJR052YlhCdmJtVnVkSE02SUhSeWRXVjlLVHRjY2x4dUlDQWdJSDBnWld4elpTQnBaaUFvSVhOMFlYUmxMbVJ2Ym1WUFltcGxZM1JmS1NCN1hISmNiaUFnSUNBZ0lITjBZWFJsTG1SdmJtVlBZbXBsWTNSZklEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1ZG1GeWFXRmliR1VnUFNCemRHRjBaUzUyWVd4MVpUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXVjbWxuYUhSOUtUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjM1JoZEdVdWFYUmxjbUYwYjNJZ1BUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJHYVhKemRDQnBkR1Z5WVhScGIyNHVYSEpjYmlBZ0lDQWdJQ0FnYzNSaGRHVXViMkpxWldOMElEMGdjM1JoZEdVdWRtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ2MzUmhkR1V1YVhSbGNtRjBiM0lnUFNBd08xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSFpoY2lCdVlXMWxJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdaRzl1WlRvZ1pHOGdlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBJRDBnYzNSaGRHVXVhWFJsY21GMGIzSTdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY0hKdmNDQnBiaUJ6ZEdGMFpTNXZZbXBsWTNRdWNISnZjR1Z5ZEdsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNBZ2FXNGdjM1JoZEdVdWIySnFaV04wTG01dmJtVnVkVzFsY21GaWJHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FTQTlQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVWdQU0J3Y205d08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhheUJrYjI1bE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdhUzB0TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J6ZEdGMFpTNXZZbXBsWTNRZ1BTQnpkR0YwWlM1dlltcGxZM1F1Y0dGeVpXNTBJQ1ltWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtOWlhbVZqZEM1d1lYSmxiblF1Y0hKdmNHVnlkR2xsY3k1d2NtOTBiM1I1Y0dVN1hISmNiaUFnSUNBZ0lDQWdjM1JoZEdVdWFYUmxjbUYwYjNJZ1BTQXdPMXh5WEc0Z0lDQWdJQ0I5SUhkb2FXeGxJQ2h6ZEdGMFpTNXZZbXBsWTNRcE8xeHlYRzRnSUNBZ0lDQnpkR0YwWlM1cGRHVnlZWFJ2Y2lzck8xeHlYRzRnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTV6YUdsbWRDZ3BPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVm1Gc2RXVlViMU5qYjNCbEtITjBZWFJsTG5aaGNtbGhZbXhsTENCMGFHbHpMbU55WldGMFpWQnlhVzFwZEdsMlpTaHVZVzFsS1NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0c1dlpHVXVZbTlrZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9lMjV2WkdVNklHNXZaR1V1WW05a2VYMHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdjM1JsY0VadmNsTjBZWFJsYldWdWRDZ3BJSHRjY2x4dUlDQWdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFR0Y2NseHVJQ0FnSUhOMFlYUmxMbWx6VEc5dmNDQTlJSFJ5ZFdVN1hISmNiaUFnSUNCMllYSWdibTlrWlNBOUlITjBZWFJsTG01dlpHVTdYSEpjYmlBZ0lDQjJZWElnYlc5a1pTQTlJSE4wWVhSbExtMXZaR1VnZkh3Z01EdGNjbHh1SUNBZ0lHbG1JQ2h0YjJSbElEMDlJREFwSUh0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1Ylc5a1pTQTlJREU3WEhKY2JpQWdJQ0FnSUdsbUlDaHViMlJsTG1sdWFYUXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1ZFc1emFHbG1kQ2g3Ym05a1pUb2dibTlrWlM1cGJtbDBmU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXOWtaU0E5UFNBeEtTQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbExtMXZaR1VnUFNBeU8xeHlYRzRnSUNBZ0lDQnBaaUFvYm05a1pTNTBaWE4wS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXVkR1Z6ZEgwcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzF2WkdVZ1BUMGdNaWtnZTF4eVhHNGdJQ0FnSUNCemRHRjBaUzV0YjJSbElEMGdNenRjY2x4dUlDQWdJQ0FnYVdZZ0tHNXZaR1V1ZEdWemRDQW1KaUJ6ZEdGMFpTNTJZV3gxWlNBbUppQWhjM1JoZEdVdWRtRnNkV1V1ZEc5Q2IyOXNaV0Z1S0NrcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCTWIyOXdJR052YlhCc1pYUmxMaUFnUW1GcGJDQnZkWFF1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yTG5Ob2FXWjBLQ2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtOWtaUzVpYjJSNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlZOMFlXTnJMblZ1YzJocFpuUW9lMjV2WkdVNklHNXZaR1V1WW05a2VYMHBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0cxdlpHVWdQVDBnTXlrZ2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1dGIyUmxJRDBnTVR0Y2NseHVJQ0FnSUNBZ2FXWWdLRzV2WkdVdWRYQmtZWFJsS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXVkWEJrWVhSbGZTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmlBZ1hISmNiaUFnYzNSbGNFWjFibU4wYVc5dVJHVmpiR0Z5WVhScGIyNG9LU0I3WEhKY2JpQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNCOVhISmNiaUFnWEhKY2JpQWdjM1JsY0VaMWJtTjBhVzl1Ulhod2NtVnpjMmx2YmlncElIdGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NXphR2xtZENncE8xeHlYRzRnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yV3pCZExuWmhiSFZsSUQwZ2RHaHBjeTVqY21WaGRHVkdkVzVqZEdsdmJpaHpkR0YwWlM1dWIyUmxLVHRjY2x4dUlDQjlYSEpjYmlBZ1hISmNiaUFnYzNSbGNFbGtaVzUwYVdacFpYSW9LU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1YzJocFpuUW9LVHRjY2x4dUlDQWdJSFpoY2lCdVlXMWxJRDBnZEdocGN5NWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2MzUmhkR1V1Ym05a1pTNXVZVzFsS1R0Y2NseHVJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFM1MllXeDFaU0E5WEhKY2JpQWdJQ0FnSUNBZ2MzUmhkR1V1WTI5dGNHOXVaVzUwY3lBL0lHNWhiV1VnT2lCMGFHbHpMbWRsZEZaaGJIVmxSbkp2YlZOamIzQmxLRzVoYldVcE8xeHlYRzRnSUgxY2NseHVJQ0JjY2x4dUlDQnpkR1Z3U1daVGRHRjBaVzFsYm5Rb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEdWd1EyOXVaR2wwYVc5dVlXeEZlSEJ5WlhOemFXOXVLQ2s3WEhKY2JpQWdmVnh5WEc0Z0lGeHlYRzRnSUhOMFpYQk1ZV0psYkdWa1UzUmhkR1Z0Wlc1MEtDa2dlMXh5WEc0Z0lDQWdMeThnVG04Z2JtVmxaQ0IwYnlCb2FYUWdkR2hwY3lCdWIyUmxJR0ZuWVdsdUlHOXVJSFJvWlNCM1lYa2dZbUZqYXlCMWNDQjBhR1VnYzNSaFkyc3VYSEpjYmlBZ0lDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYXk1MWJuTm9hV1owS0h0dWIyUmxPaUJ6ZEdGMFpTNXViMlJsTG1KdlpIa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lXSmxiRG9nYzNSaGRHVXVibTlrWlM1c1lXSmxiQzV1WVcxbGZTazdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1RHbDBaWEpoYkNncElIdGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NXphR2xtZENncE8xeHlYRzRnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yV3pCZExuWmhiSFZsSUQwZ2RHaHBjeTVqY21WaGRHVlFjbWx0YVhScGRtVW9jM1JoZEdVdWJtOWtaUzUyWVd4MVpTazdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1RHOW5hV05oYkVWNGNISmxjM05wYjI0b0tTQjdYSEpjYmlBZ0lDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxuTjBZWFJsVTNSaFkydGJNRjA3WEhKY2JpQWdJQ0IyWVhJZ2JtOWtaU0E5SUhOMFlYUmxMbTV2WkdVN1hISmNiaUFnSUNCcFppQW9ibTlrWlM1dmNHVnlZWFJ2Y2lBaFBTQW5KaVluSUNZbUlHNXZaR1V1YjNCbGNtRjBiM0lnSVQwZ0ozeDhKeWtnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJUZVc1MFlYaEZjbkp2Y2lnblZXNXJibTkzYmlCc2IyZHBZMkZzSUc5d1pYSmhkRzl5T2lBbklDc2dibTlrWlM1dmNHVnlZWFJ2Y2lrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCcFppQW9JWE4wWVhSbExtUnZibVZNWldaMFh5a2dlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNWtiMjVsVEdWbWRGOGdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nYm05a1pTNXNaV1owZlNrN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDRnpkR0YwWlM1a2IyNWxVbWxuYUhSZktTQjdYSEpjYmlBZ0lDQWdJR2xtSUNnb2JtOWtaUzV2Y0dWeVlYUnZjaUE5UFNBbkppWW5JQ1ltSUNGemRHRjBaUzUyWVd4MVpTNTBiMEp2YjJ4bFlXNG9LU2tnZkh4Y2NseHVJQ0FnSUNBZ0lDQWdJQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2Q4ZkNjZ0ppWWdjM1JoZEdVdWRtRnNkV1V1ZEc5Q2IyOXNaV0Z1S0NrcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1UyaHZjblJqZFhRZ1pYWmhiSFZoZEdsdmJpNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkydGJNRjB1ZG1Gc2RXVWdQU0J6ZEdGMFpTNTJZV3gxWlR0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkR0YwWlM1a2IyNWxVbWxuYUhSZklEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nYm05a1pTNXlhV2RvZEgwcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWMyaHBablFvS1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yV3pCZExuWmhiSFZsSUQwZ2MzUmhkR1V1ZG1Gc2RXVTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1RXVnRZbVZ5Ulhod2NtVnpjMmx2YmlncElIdGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamExc3dYVHRjY2x4dUlDQWdJSFpoY2lCdWIyUmxJRDBnYzNSaGRHVXVibTlrWlR0Y2NseHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdVpHOXVaVTlpYW1WamRGOHBJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVaRzl1WlU5aWFtVmpkRjhnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VkVzV6YUdsbWRDaDdibTlrWlRvZ2JtOWtaUzV2WW1wbFkzUjlLVHRjY2x4dUlDQWdJSDBnWld4elpTQnBaaUFvSVhOMFlYUmxMbVJ2Ym1WUWNtOXdaWEowZVY4cElIdGNjbHh1SUNBZ0lDQWdjM1JoZEdVdVpHOXVaVkJ5YjNCbGNuUjVYeUE5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJSE4wWVhSbExtOWlhbVZqZENBOUlITjBZWFJsTG5aaGJIVmxPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VkVzV6YUdsbWRDaDdYSEpjYmlBZ0lDQWdJQ0FnYm05a1pUb2dibTlrWlM1d2NtOXdaWEowZVN4Y2NseHVJQ0FnSUNBZ0lDQmpiMjF3YjI1bGJuUnpPaUFoYm05a1pTNWpiMjF3ZFhSbFpGeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NXphR2xtZENncE8xeHlYRzRnSUNBZ0lDQnBaaUFvYzNSaGRHVXVZMjl0Y0c5dVpXNTBjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hTNTJZV3gxWlNBOUlGdHpkR0YwWlM1dlltcGxZM1FzSUhOMFlYUmxMblpoYkhWbFhUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkydGJNRjB1ZG1Gc2RXVWdQU0IwYUdsekxtZGxkRkJ5YjNCbGNuUjVLSE4wWVhSbExtOWlhbVZqZEN3Z2MzUmhkR1V1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNCemRHVndUbVYzUlhod2NtVnpjMmx2YmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wWlhCRFlXeHNSWGh3Y21WemMybHZiaWdwTzF4eVhHNGdJSDFjY2x4dUlDQmNjbHh1SUNCemRHVndUMkpxWldOMFJYaHdjbVZ6YzJsdmJpZ3BJSHRjY2x4dUlDQWdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFR0Y2NseHVJQ0FnSUhaaGNpQnViMlJsSUQwZ2MzUmhkR1V1Ym05a1pUdGNjbHh1SUNBZ0lIWmhjaUIyWVd4MVpWUnZaMmRzWlNBOUlITjBZWFJsTG5aaGJIVmxWRzluWjJ4bE8xeHlYRzRnSUNBZ2RtRnlJRzRnUFNCemRHRjBaUzV1SUh4OElEQTdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbTlpYW1WamRDa2dlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNXZZbXBsWTNRZ1BTQjBhR2x6TG1OeVpXRjBaVTlpYW1WamRDaDBhR2x6TGs5Q1NrVkRWQ2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0JwWmlBb2RtRnNkV1ZVYjJkbmJHVXBJSHRjY2x4dUlDQWdJQ0FnSUNCemRHRjBaUzVyWlhrZ1BTQnpkR0YwWlM1MllXeDFaVHRjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZCeWIzQmxjblI1S0hOMFlYUmxMbTlpYW1WamRDd2djM1JoZEdVdWEyVjVMQ0J6ZEdGMFpTNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2h1YjJSbExuQnliM0JsY25ScFpYTmJibDBwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLSFpoYkhWbFZHOW5aMnhsS1NCN1hISmNiaUFnSUNBZ0lDQWdjM1JoZEdVdWJpQTlJRzRnS3lBeE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NTFibk5vYVdaMEtIdHViMlJsT2lCdWIyUmxMbkJ5YjNCbGNuUnBaWE5iYmwwdWRtRnNkV1Y5S1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nYm05a1pTNXdjbTl3WlhKMGFXVnpXMjVkTG10bGVTd2dZMjl0Y0c5dVpXNTBjem9nZEhKMVpYMHBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUhOMFlYUmxMblpoYkhWbFZHOW5aMnhsSUQwZ0lYWmhiSFZsVkc5bloyeGxPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuTm9hV1owS0NrN1hISmNiaUFnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYTFzd1hTNTJZV3gxWlNBOUlITjBZWFJsTG05aWFtVmpkRHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlPMXh5WEc0Z0lGeHlYRzRnSUhOMFpYQlFjbTluY21GdEtDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSbGNFSnNiMk5yVTNSaGRHVnRaVzUwS0NrN1hISmNiaUFnZlZ4eVhHNGdJRnh5WEc0Z0lITjBaWEJTWlhSMWNtNVRkR0YwWlcxbGJuUW9LU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbk4wWVhSbFUzUmhZMnRiTUYwN1hISmNiaUFnSUNCMllYSWdibTlrWlNBOUlITjBZWFJsTG01dlpHVTdYSEpjYmlBZ0lDQnBaaUFvYm05a1pTNWhjbWQxYldWdWRDQW1KaUFoYzNSaGRHVXVaRzl1WlNrZ2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1a2IyNWxJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXVZWEpuZFcxbGJuUjlLVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUhOMFlYUmxMblpoYkhWbElIeDhJSFJvYVhNdVZVNUVSVVpKVGtWRU8xeHlYRzRnSUNBZ0lDQmtieUI3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yTG5Ob2FXWjBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMzUmhkR1ZUZEdGamF5NXNaVzVuZEdnZ1BUMGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnVTNsdWRHRjRJR1Z5Y205eUxDQmtieUJ1YjNRZ1lXeHNiM2NnZEdocGN5Qmxjbkp2Y2lCMGJ5QmlaU0IwY21Gd2NHVmtMbHh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnVTNsdWRHRjRSWEp5YjNJb0owbHNiR1ZuWVd3Z2NtVjBkWEp1SUhOMFlYUmxiV1Z1ZENjcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCemRHRjBaU0E5SUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFR0Y2NseHVJQ0FnSUNBZ2ZTQjNhR2xzWlNBb2MzUmhkR1V1Ym05a1pTNTBlWEJsSUNFOUlDZERZV3hzUlhod2NtVnpjMmx2YmljZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVdWJtOWtaUzUwZVhCbElDRTlJQ2RPWlhkRmVIQnlaWE56YVc5dUp5azdYSEpjYmlBZ0lDQWdJSE4wWVhSbExuWmhiSFZsSUQwZ2RtRnNkV1U3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNCemRHVndVMlZ4ZFdWdVkyVkZlSEJ5WlhOemFXOXVLQ2tnZTF4eVhHNGdJQ0FnZG1GeUlITjBZWFJsSUQwZ2RHaHBjeTV6ZEdGMFpWTjBZV05yV3pCZE8xeHlYRzRnSUNBZ2RtRnlJRzV2WkdVZ1BTQnpkR0YwWlM1dWIyUmxPMXh5WEc0Z0lDQWdkbUZ5SUc0Z1BTQnpkR0YwWlM1dUlIeDhJREE3WEhKY2JpQWdJQ0JwWmlBb2JtOWtaUzVsZUhCeVpYTnphVzl1YzF0dVhTa2dlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNXVJRDBnYmlBcklERTdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NTFibk5vYVdaMEtIdHViMlJsT2lCdWIyUmxMbVY0Y0hKbGMzTnBiMjV6VzI1ZGZTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWMyaHBablFvS1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yV3pCZExuWmhiSFZsSUQwZ2MzUmhkR1V1ZG1Gc2RXVTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0J6ZEdWd1UzZHBkR05vVTNSaGRHVnRaVzUwS0NrZ2UxeHlYRzRnSUNBZ2RtRnlJSE4wWVhSbElEMGdkR2hwY3k1emRHRjBaVk4wWVdOcld6QmRPMXh5WEc0Z0lDQWdjM1JoZEdVdVkyaGxZMnRsWkNBOUlITjBZWFJsTG1Ob1pXTnJaV1FnZkh3Z1cxMDdYSEpjYmlBZ0lDQnpkR0YwWlM1cGMxTjNhWFJqYUNBOUlIUnlkV1U3WEhKY2JpQWdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMblJsYzNRcElIdGNjbHh1SUNBZ0lDQWdjM1JoZEdVdWRHVnpkQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NTFibk5vYVdaMEtIdHViMlJsT2lCemRHRjBaUzV1YjJSbExtUnBjMk55YVcxcGJtRnVkSDBwTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tDRnpkR0YwWlM1emQybDBZMmhXWVd4MVpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGQnlaWE5sY25abElITjNhWFJqYUNCMllXeDFaU0JpWlhSM1pXVnVJR05oYzJVZ2RHVnpkSE11WEhKY2JpQWdJQ0FnSUNBZ2MzUmhkR1V1YzNkcGRHTm9WbUZzZFdVZ1BTQnpkR0YwWlM1MllXeDFaVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJRnh5WEc0Z0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCemRHRjBaUzVwYm1SbGVDQjhmQ0F3TzF4eVhHNGdJQ0FnSUNCMllYSWdZM1Z5Y21WdWRFTmhjMlVnUFNCemRHRjBaUzV1YjJSbExtTmhjMlZ6VzJsdVpHVjRYVHRjY2x4dUlDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SRFlYTmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z6ZEdGMFpTNWtiMjVsSUNZbUlDRnpkR0YwWlM1amFHVmphMlZrVzJsdVpHVjRYU0FtSmlCamRYSnlaVzUwUTJGelpTNTBaWE4wS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTNWphR1ZqYTJWa1cybHVaR1Y0WFNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWRXNXphR2xtZENoN2JtOWtaVG9nWTNWeWNtVnVkRU5oYzJVdWRHVnpkSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCVVpYTjBJRzl1SUhSb1pTQmtaV1poZFd4MElHTmhjMlVnZDJsc2JDQmlaU0J1ZFd4c0xseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBZWFJsTG1SdmJtVWdmSHdnSVdOMWNuSmxiblJEWVhObExuUmxjM1FnZkh4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YlhBb2MzUmhkR1V1ZG1Gc2RXVXNJSE4wWVhSbExuTjNhWFJqYUZaaGJIVmxLU0E5UFNBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG1SdmJtVWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiaUE5SUhOMFlYUmxMbTRnZkh3Z01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR04xY25KbGJuUkRZWE5sTG1OdmJuTmxjWFZsYm5SYmJsMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VkVzV6YUdsbWRDaDdibTlrWlRvZ1kzVnljbVZ1ZEVOaGMyVXVZMjl1YzJWeGRXVnVkRnR1WFgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsTG00Z1BTQnVJQ3NnTVR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUhOMFlYUmxMbTRnUFNBd08xeHlYRzRnSUNBZ0lDQWdJQ0FnYzNSaGRHVXVhVzVrWlhnZ1BTQnBibVJsZUNBcklERTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYXk1emFHbG1kQ2dwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQnpkR1Z3VkdocGMwVjRjSEpsYzNOcGIyNG9LU0I3WEhKY2JpQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkR2hwY3k1emRHRjBaVk4wWVdOckxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG5OMFlYUmxVM1JoWTJ0YmFWMHVkR2hwYzBWNGNISmxjM05wYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkydGJNRjB1ZG1Gc2RXVWdQU0IwYUdsekxuTjBZWFJsVTNSaFkydGJhVjB1ZEdocGMwVjRjSEpsYzNOcGIyNDdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0IwYUhKdmR5QkZjbkp2Y2lnblRtOGdkR2hwY3lCbGVIQnlaWE56YVc5dUlHWnZkVzVrTGljcE8xeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdjM1JsY0ZSb2NtOTNVM1JoZEdWdFpXNTBLQ2tnZTF4eVhHNGdJQ0FnZG1GeUlITjBZWFJsSUQwZ2RHaHBjeTV6ZEdGMFpWTjBZV05yV3pCZE8xeHlYRzRnSUNBZ2RtRnlJRzV2WkdVZ1BTQnpkR0YwWlM1dWIyUmxPMXh5WEc0Z0lDQWdhV1lnS0NGemRHRjBaUzVoY21kMWJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNCemRHRjBaUzVoY21kMWJXVnVkQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NTFibk5vYVdaMEtIdHViMlJsT2lCdWIyUmxMbUZ5WjNWdFpXNTBmU2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuUm9jbTkzUlhoalpYQjBhVzl1S0hOMFlYUmxMblpoYkhWbEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOU8xeHlYRzRnSUZ4eVhHNGdJSE4wWlhCVWNubFRkR0YwWlcxbGJuUW9LU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbk4wWVhSbFUzUmhZMnRiTUYwN1hISmNiaUFnSUNCMllYSWdibTlrWlNBOUlITjBZWFJsTG01dlpHVTdYSEpjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbVJ2Ym1WQ2JHOWpheWtnZTF4eVhHNGdJQ0FnSUNCemRHRjBaUzVrYjI1bFFteHZZMnNnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VkVzV6YUdsbWRDaDdibTlrWlRvZ2JtOWtaUzVpYkc5amEzMHBPMXh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2doYzNSaGRHVXVaRzl1WlVacGJtRnNhWHBsY2lBbUppQnViMlJsTG1acGJtRnNhWHBsY2lrZ2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1a2IyNWxSbWx1WVd4cGVtVnlJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXVabWx1WVd4cGVtVnlmU2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VjMmhwWm5Rb0tUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOU8xeHlYRzRnSUZ4eVhHNGdJSE4wWlhCVmJtRnllVVY0Y0hKbGMzTnBiMjRvS1NCN1hISmNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxVM1JoWTJ0Yk1GMDdYSEpjYmlBZ0lDQjJZWElnYm05a1pTQTlJSE4wWVhSbExtNXZaR1U3WEhKY2JpQWdJQ0JwWmlBb0lYTjBZWFJsTG1SdmJtVXBJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVaRzl1WlNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUhaaGNpQnVaWGgwVTNSaGRHVWdQU0I3Ym05a1pUb2dibTlrWlM1aGNtZDFiV1Z1ZEgwN1hISmNiaUFnSUNBZ0lHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2RrWld4bGRHVW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2JtVjRkRk4wWVhSbExtTnZiWEJ2Ym1WdWRITWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSFJvYVhNdWMzUmhkR1ZUZEdGamF5NTFibk5vYVdaMEtHNWxlSFJUZEdGMFpTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWMyaHBablFvS1R0Y2NseHVJQ0FnSUNBZ2RtRnlJSFpoYkhWbE8xeHlYRzRnSUNBZ0lDQnBaaUFvYm05a1pTNXZjR1Z5WVhSdmNpQTlQU0FuTFNjcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJQzF6ZEdGMFpTNTJZV3gxWlM1MGIwNTFiV0psY2lncE8xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzV2WkdVdWIzQmxjbUYwYjNJZ1BUMGdKeXNuS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQnpkR0YwWlM1MllXeDFaUzUwYjA1MWJXSmxjaWdwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1YjNCbGNtRjBiM0lnUFQwZ0p5RW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNBaGMzUmhkR1V1ZG1Gc2RXVXVkRzlDYjI5c1pXRnVLQ2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtOWtaUzV2Y0dWeVlYUnZjaUE5UFNBbmZpY3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllXeDFaU0E5SUg1emRHRjBaUzUyWVd4MVpTNTBiMDUxYldKbGNpZ3BPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDBnSjNSNWNHVnZaaWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlITjBZWFJsTG5aaGJIVmxMblI1Y0dVN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9ibTlrWlM1dmNHVnlZWFJ2Y2lBOVBTQW5aR1ZzWlhSbEp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlM1MllXeDFaUzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ2WW1vZ1BTQnpkR0YwWlM1MllXeDFaVnN3WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCdVlXMWxJRDBnYzNSaGRHVXVkbUZzZFdWYk1WMDdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ2WW1vZ1BTQjBhR2x6TG1kbGRGTmpiM0JsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2JtRnRaU0E5SUhOMFlYUmxMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMllXeDFaU0E5SUhSb2FYTXVaR1ZzWlhSbFVISnZjR1Z5ZEhrb2IySnFMQ0J1WVcxbEtUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtOXdaWEpoZEc5eUlEMDlJQ2QyYjJsa0p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnZFc1a1pXWnBibVZrTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUZONWJuUmhlRVZ5Y205eUtDZFZibXR1YjNkdUlIVnVZWEo1SUc5d1pYSmhkRzl5T2lBbklDc2dibTlrWlM1dmNHVnlZWFJ2Y2lrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOcld6QmRMblpoYkhWbElEMGdkR2hwY3k1amNtVmhkR1ZRY21sdGFYUnBkbVVvZG1Gc2RXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnYzNSbGNGVndaR0YwWlVWNGNISmxjM05wYjI0b0tTQjdYSEpjYmlBZ0lDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxuTjBZWFJsVTNSaFkydGJNRjA3WEhKY2JpQWdJQ0IyWVhJZ2JtOWtaU0E5SUhOMFlYUmxMbTV2WkdVN1hISmNiaUFnSUNCcFppQW9JWE4wWVhSbExtUnZibVVwSUh0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1Wkc5dVpTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lIUm9hWE11YzNSaGRHVlRkR0ZqYXk1MWJuTm9hV1owS0h0dWIyUmxPaUJ1YjJSbExtRnlaM1Z0Wlc1MExDQmpiMjF3YjI1bGJuUnpPaUIwY25WbGZTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxVM1JoWTJzdWMyaHBablFvS1R0Y2NseHVJQ0FnSUNBZ2RtRnlJR3hsWm5SVGFXUmxJRDBnYzNSaGRHVXVkbUZzZFdVN1hISmNiaUFnSUNBZ0lIWmhjaUJzWldaMFZtRnNkV1VnUFNCMGFHbHpMbWRsZEZaaGJIVmxLR3hsWm5SVGFXUmxLUzUwYjA1MWJXSmxjaWdwTzF4eVhHNGdJQ0FnSUNCMllYSWdZMmhoYm1kbFZtRnNkV1U3WEhKY2JpQWdJQ0FnSUdsbUlDaHViMlJsTG05d1pYSmhkRzl5SUQwOUlDY3JLeWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQmphR0Z1WjJWV1lXeDFaU0E5SUhSb2FYTXVZM0psWVhSbFVISnBiV2wwYVhabEtHeGxablJXWVd4MVpTQXJJREVwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1YjNCbGNtRjBiM0lnUFQwZ0p5MHRKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHTm9ZVzVuWlZaaGJIVmxJRDBnZEdocGN5NWpjbVZoZEdWUWNtbHRhWFJwZG1Vb2JHVm1kRlpoYkhWbElDMGdNU2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHliM2NnVTNsdWRHRjRSWEp5YjNJb0oxVnVhMjV2ZDI0Z2RYQmtZWFJsSUdWNGNISmxjM05wYjI0NklDY2dLeUJ1YjJSbExtOXdaWEpoZEc5eUtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRlpoYkhWbEtHeGxablJUYVdSbExDQmphR0Z1WjJWV1lXeDFaU2s3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFM1MllXeDFaU0E5SUc1dlpHVXVjSEpsWm1sNElEOWNjbHh1SUNBZ0lDQWdJQ0FnSUdOb1lXNW5aVlpoYkhWbElEb2dkR2hwY3k1amNtVmhkR1ZRY21sdGFYUnBkbVVvYkdWbWRGWmhiSFZsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5TzF4eVhHNGdJRnh5WEc0Z0lITjBaWEJXWVhKcFlXSnNaVVJsWTJ4aGNtRjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ2RtRnlJSE4wWVhSbElEMGdkR2hwY3k1emRHRjBaVk4wWVdOcld6QmRPMXh5WEc0Z0lDQWdkbUZ5SUc1dlpHVWdQU0J6ZEdGMFpTNXViMlJsTzF4eVhHNGdJQ0FnZG1GeUlHNGdQU0J6ZEdGMFpTNXVJSHg4SURBN1hISmNiaUFnSUNCcFppQW9ibTlrWlM1a1pXTnNZWEpoZEdsdmJuTmJibDBwSUh0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1YmlBOUlHNGdLeUF4TzF4eVhHNGdJQ0FnSUNCMGFHbHpMbk4wWVhSbFUzUmhZMnN1ZFc1emFHbG1kQ2g3Ym05a1pUb2dibTlrWlM1a1pXTnNZWEpoZEdsdmJuTmJibDE5S1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTV6YUdsbWRDZ3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnYzNSbGNGWmhjbWxoWW14bFJHVmpiR0Z5WVhSdmNpZ3BJSHRjY2x4dUlDQWdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVjM1JoZEdWVGRHRmphMXN3WFR0Y2NseHVJQ0FnSUhaaGNpQnViMlJsSUQwZ2MzUmhkR1V1Ym05a1pUdGNjbHh1SUNBZ0lHbG1JQ2h1YjJSbExtbHVhWFFnSmlZZ0lYTjBZWFJsTG1SdmJtVXBJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVaRzl1WlNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTUxYm5Ob2FXWjBLSHR1YjJSbE9pQnViMlJsTG1sdWFYUjlLVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVvWVhOUWNtOXdaWEowZVNoMGFHbHpMQ0J1YjJSbExtbGtMbTVoYldVcElIeDhJRzV2WkdVdWFXNXBkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJRzV2WkdVdWFXNXBkQ0EvSUhOMFlYUmxMblpoYkhWbElEb2dkR2hwY3k1VlRrUkZSa2xPUlVRN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUldZV3gxWlNoMGFHbHpMbU55WldGMFpWQnlhVzFwZEdsMlpTaHViMlJsTG1sa0xtNWhiV1VwTENCMllXeDFaU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpWTjBZV05yTG5Ob2FXWjBLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNCemRHVndWMmwwYUZOMFlYUmxiV1Z1ZENncElIdGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1ZUZEdGamExc3dYVHRjY2x4dUlDQWdJSFpoY2lCdWIyUmxJRDBnYzNSaGRHVXVibTlrWlR0Y2NseHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdVpHOXVaVTlpYW1WamRDa2dlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNWtiMjVsVDJKcVpXTjBJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1emRHRjBaVk4wWVdOckxuVnVjMmhwWm5Rb2UyNXZaR1U2SUc1dlpHVXViMkpxWldOMGZTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0Z6ZEdGMFpTNWtiMjVsUW05a2VTa2dlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNWtiMjVsUW05a2VTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lIWmhjaUJ6WTI5d1pTQTlJSFJvYVhNdVkzSmxZWFJsVTNCbFkybGhiRk5qYjNCbEtIUm9hWE11WjJWMFUyTnZjR1VvS1N3Z2MzUmhkR1V1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBZWFJsVTNSaFkyc3VkVzV6YUdsbWRDaDdibTlrWlRvZ2JtOWtaUzVpYjJSNUxDQnpZMjl3WlRvZ2MyTnZjR1Y5S1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVjM1JoZEdWVGRHRmpheTV6YUdsbWRDZ3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnYzNSbGNGZG9hV3hsVTNSaGRHVnRaVzUwS0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1JsY0VSdlYyaHBiR1ZUZEdGMFpXMWxiblFvS1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRiR0Z6Y3lCbWIzSWdZU0J1ZFcxaVpYSXNJSE4wY21sdVp5d2dZbTl2YkdWaGJpd2diblZzYkN3Z2IzSWdkVzVrWldacGJtVmtMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY254emRISnBibWQ4WW05dmJHVmhibnh1ZFd4c2ZIVnVaR1ZtYVc1bFpIMGdaR0YwWVNCUWNtbHRhWFJwZG1VZ2RtRnNkV1V1WEhKY2JpQXFJRUJ3WVhKaGJTQjdJVWx1ZEdWeWNISmxkR1Z5ZlNCcGJuUmxjbkJ5WlhSbGNpQlVhR1VnU2xNZ1NXNTBaWEp3Y21WMFpYSWdkRzhnWW1sdVpDQjBieTVjY2x4dUlDb2dRR052Ym5OMGNuVmpkRzl5WEhKY2JpQXFMMXh5WEc1amJHRnpjeUJRY21sdGFYUnBkbVVnZTF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0dSaGRHRXNJR2x1ZEdWeWNISmxkR1Z5S1NCN1hISmNiaUFnSUNCMllYSWdkSGx3WlNBOUlIUjVjR1Z2WmlCa1lYUmhPMXh5WEc0Z0lDQWdkR2hwY3k1a1lYUmhJRDBnWkdGMFlUdGNjbHh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJSFI1Y0dVN1hISmNiaUFnSUNCcFppQW9kSGx3WlNBOVBTQW5iblZ0WW1WeUp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuQmhjbVZ1ZENBOUlHbHVkR1Z5Y0hKbGRHVnlMazVWVFVKRlVqdGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBTQW5jM1J5YVc1bkp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuQmhjbVZ1ZENBOUlHbHVkR1Z5Y0hKbGRHVnlMbE5VVWtsT1J6dGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBTQW5ZbTl2YkdWaGJpY3BJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NXdZWEpsYm5RZ1BTQnBiblJsY25CeVpYUmxjaTVDVDA5TVJVRk9PMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1cGMxQnlhVzFwZEdsMlpTQTlJSFJ5ZFdVN1hISmNiaUFnZlR0Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRMjl1ZG1WeWRDQjBhR2x6SUhCeWFXMXBkR2wyWlNCcGJuUnZJR0VnWW05dmJHVmhiaTVjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmU0JDYjI5c1pXRnVJSFpoYkhWbExseHlYRzRnSUNBcUwxeHlYRzRnSUhSdlFtOXZiR1ZoYmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCQ2IyOXNaV0Z1S0hSb2FYTXVaR0YwWVNrN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEYjI1MlpYSjBJSFJvYVhNZ2NISnBiV2wwYVhabElHbHVkRzhnWVNCdWRXMWlaWEl1WEhKY2JpQWdJQ29nUUhKbGRIVnliaUI3Ym5WdFltVnlmU0JPZFcxaVpYSWdkbUZzZFdVdVhISmNiaUFnSUNvdlhISmNiaUFnZEc5T2RXMWlaWElvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnVG5WdFltVnlLSFJvYVhNdVpHRjBZU2s3WEhKY2JpQWdmVHRjY2x4dUlDQmNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRiMjUyWlhKMElIUm9hWE1nY0hKcGJXbDBhWFpsSUdsdWRHOGdZU0J6ZEhKcGJtY3VYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQlRkSEpwYm1jZ2RtRnNkV1V1WEhKY2JpQWdJQ292WEhKY2JpQWdkRzlUZEhKcGJtY29LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdVM1J5YVc1bktIUm9hWE11WkdGMFlTazdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCU1pYUjFjbTRnZEdobElIQnlhVzFwZEdsMlpTQjJZV3gxWlM1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1SUh0dWRXMWlaWEo4YzNSeWFXNW5mR0p2YjJ4bFlXNThiblZzYkh4MWJtUmxabWx1WldSOUlGQnlhVzFwZEdsMlpTQjJZV3gxWlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0IyWVd4MVpVOW1LQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHRjBZVHRjY2x4dUlDQjlPMXh5WEc1OVhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EyeGhjM01nWm05eUlHRnVJRzlpYW1WamRDNWNjbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCaGNtVnVkQ0JRWVhKbGJuUWdZMjl1YzNSeWRXTjBiM0lnWm5WdVkzUnBiMjR1WEhKY2JpQXFJRUJqYjI1emRISjFZM1J2Y2x4eVhHNGdLaTljY2x4dVkyeGhjM01nU1c1MFpYSndjbVYwWlhKUFltcGxZM1FnZTF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0hCaGNtVnVkQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NW1hWGhsWkNBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYSEpjYmlBZ0lDQjBhR2x6TG01dmJtVnVkVzFsY21GaWJHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4eVhHNGdJQ0FnZEdocGN5NXdjbTl3WlhKMGFXVnpJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2NseHVJQ0FnSUhSb2FYTXVjR0Z5Wlc1MElEMGdjR0Z5Wlc1ME8xeHlYRzRnSUNBZ2RHaHBjeTUwZVhCbElEMGdKMjlpYW1WamRDYzdYSEpjYmlBZ0lDQjBhR2x6TG1selVISnBiV2wwYVhabElEMGdabUZzYzJVN1hISmNiaUFnZlR0Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRMjl1ZG1WeWRDQjBhR2x6SUc5aWFtVmpkQ0JwYm5SdklHRWdZbTl2YkdWaGJpNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdGliMjlzWldGdWZTQkNiMjlzWldGdUlIWmhiSFZsTGx4eVhHNGdJQ0FxTDF4eVhHNGdJSFJ2UW05dmJHVmhiaWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHlYRzRnSUgwN1hISmNiaUFnWEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTI5dWRtVnlkQ0IwYUdseklHOWlhbVZqZENCcGJuUnZJR0VnYm5WdFltVnlMbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMjUxYldKbGNuMGdUblZ0WW1WeUlIWmhiSFZsTGx4eVhHNGdJQ0FxTDF4eVhHNGdJSFJ2VG5WdFltVnlLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRTUxYldKbGNpaDBhR2x6TG1SaGRHRWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lIUm9hWE11ZEc5VGRISnBibWNvS1NBNklIUm9hWE11WkdGMFlTazdYSEpjYmlBZ2ZUdGNjbHh1SUNCY2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGIyNTJaWEowSUhSb2FYTWdiMkpxWldOMElHbHVkRzhnWVNCemRISnBibWN1WEhKY2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JUZEhKcGJtY2dkbUZzZFdVdVhISmNiaUFnSUNvdlhISmNiaUFnZEc5VGRISnBibWNvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWtZWFJoSUQwOVBTQjFibVJsWm1sdVpXUWdQeUFvSjFzbklDc2dkR2hwY3k1MGVYQmxJQ3NnSjEwbktTQTZJRk4wY21sdVp5aDBhR2x6TG1SaGRHRXBPMXh5WEc0Z0lIMDdYSEpjYmlBZ1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVjBkWEp1SUhSb1pTQnZZbXBsWTNRZ2RtRnNkV1V1WEhKY2JpQWdJQ29nUUhKbGRIVnliaUI3SVU5aWFtVmpkSDBnVm1Gc2RXVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2RtRnNkV1ZQWmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJoZEdFZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUhSb2FYTWdPaUIwYUdsekxtUmhkR0U3WEhKY2JpQWdmVHRjY2x4dWZWeHlYRzVjY2x4dVNXNTBaWEp3Y21WMFpYSXVVSEpwYldsMGFYWmxJRDBnVUhKcGJXbDBhWFpsTzF4eVhHNUpiblJsY25CeVpYUmxjaTVQWW1wbFkzUWdQU0JKYm5SbGNuQnlaWFJsY2s5aWFtVmpkRHRjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5aVlXSmxiSE5pWlhKbkwycHphVzUwWlhKd2NtVjBaWEl2YVc1MFpYSndjbVYwWlhJdWFuTmNiaUFxS2k4aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmFuTnZiaTl6ZEhKcGJtZHBabmxjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YW5OdmJpOXpkSEpwYm1kcFpua3Vhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4TVRWY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJblpoY2lCamIzSmxJQ0E5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktWeHVJQ0FzSUNSS1UwOU9JRDBnWTI5eVpTNUtVMDlPSUh4OElDaGpiM0psTGtwVFQwNGdQU0I3YzNSeWFXNW5hV1o1T2lCS1UwOU9Mbk4wY21sdVoybG1lWDBwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCemRISnBibWRwWm5rb2FYUXBleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lISmxkSFZ5YmlBa1NsTlBUaTV6ZEhKcGJtZHBabmt1WVhCd2JIa29KRXBUVDA0c0lHRnlaM1Z0Wlc1MGN5azdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5cWMyOXVMM04wY21sdVoybG1lUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFeE5seHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjFoY0Z3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dFlYQXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4TVRkY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJbkpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1MGJ5MXpkSEpwYm1jbktUdGNibkpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTkzWldJdVpHOXRMbWwwWlhKaFlteGxKeWs3WEc1eVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyVnpOaTV0WVhBbktUdGNibkpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12WlhNM0xtMWhjQzUwYnkxcWMyOXVKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1TllYQTdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjFoY0M1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXhPRnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlITjBjbTl1WnlBOUlISmxjWFZwY21Vb0p5NHZYMk52Ykd4bFkzUnBiMjR0YzNSeWIyNW5KeWs3WEc1Y2JpOHZJREl6TGpFZ1RXRndJRTlpYW1WamRITmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5c2JHVmpkR2x2YmljcEtDZE5ZWEFuTENCbWRXNWpkR2x2YmloblpYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnVFdGd0tDbDdJSEpsZEhWeWJpQm5aWFFvZEdocGN5d2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREFnUHlCaGNtZDFiV1Z1ZEhOYk1GMGdPaUIxYm1SbFptbHVaV1FwT3lCOU8xeHVmU3dnZTF4dUlDQXZMeUF5TXk0eExqTXVOaUJOWVhBdWNISnZkRzkwZVhCbExtZGxkQ2hyWlhrcFhHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z1oyVjBLR3RsZVNsN1hHNGdJQ0FnZG1GeUlHVnVkSEo1SUQwZ2MzUnliMjVuTG1kbGRFVnVkSEo1S0hSb2FYTXNJR3RsZVNrN1hHNGdJQ0FnY21WMGRYSnVJR1Z1ZEhKNUlDWW1JR1Z1ZEhKNUxuWTdYRzRnSUgwc1hHNGdJQzh2SURJekxqRXVNeTQ1SUUxaGNDNXdjbTkwYjNSNWNHVXVjMlYwS0d0bGVTd2dkbUZzZFdVcFhHNGdJSE5sZERvZ1puVnVZM1JwYjI0Z2MyVjBLR3RsZVN3Z2RtRnNkV1VwZTF4dUlDQWdJSEpsZEhWeWJpQnpkSEp2Ym1jdVpHVm1LSFJvYVhNc0lHdGxlU0E5UFQwZ01DQS9JREFnT2lCclpYa3NJSFpoYkhWbEtUdGNiaUFnZlZ4dWZTd2djM1J5YjI1bkxDQjBjblZsS1R0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWJXRndMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTVRFNVhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlJHRjJhV1JDY25WaGJuUXZUV0Z3TFZObGRDNXdjbTkwYjNSNWNHVXVkRzlLVTA5T1hHNTJZWElnSkdWNGNHOXlkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGxJc0lDZE5ZWEFuTENCN2RHOUtVMDlPT2lCeVpYRjFhWEpsS0NjdUwxOWpiMnhzWldOMGFXOXVMWFJ2TFdwemIyNG5LU2duVFdGd0p5bDlLVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjemN1YldGd0xuUnZMV3B6YjI0dWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhNakJjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0lpOHZJRkpsYzJWeWRtVmtJSGR2Y21RZ2JHbHpkSE1nWm05eUlIWmhjbWx2ZFhNZ1pHbGhiR1ZqZEhNZ2IyWWdkR2hsSUd4aGJtZDFZV2RsWEhKY2JseHlYRzUyWVhJZ2NtVnpaWEoyWldSWGIzSmtjeUE5SUh0Y2NseHVJQ0F6T2lCY0ltRmljM1J5WVdOMElHSnZiMnhsWVc0Z1lubDBaU0JqYUdGeUlHTnNZWE56SUdSdmRXSnNaU0JsYm5WdElHVjRjRzl5ZENCbGVIUmxibVJ6SUdacGJtRnNJR1pzYjJGMElHZHZkRzhnYVcxd2JHVnRaVzUwY3lCcGJYQnZjblFnYVc1MElHbHVkR1Z5Wm1GalpTQnNiMjVuSUc1aGRHbDJaU0J3WVdOcllXZGxJSEJ5YVhaaGRHVWdjSEp2ZEdWamRHVmtJSEIxWW14cFl5QnphRzl5ZENCemRHRjBhV01nYzNWd1pYSWdjM2x1WTJoeWIyNXBlbVZrSUhSb2NtOTNjeUIwY21GdWMybGxiblFnZG05c1lYUnBiR1ZjSWl4Y2NseHVJQ0ExT2lCY0ltTnNZWE56SUdWdWRXMGdaWGgwWlc1a2N5QnpkWEJsY2lCamIyNXpkQ0JsZUhCdmNuUWdhVzF3YjNKMFhDSXNYSEpjYmlBZ05qb2dYQ0psYm5WdFhDSXNYSEpjYmlBZ056b2dYQ0psYm5WdFhDSXNYSEpjYmlBZ2MzUnlhV04wT2lCY0ltbHRjR3hsYldWdWRITWdhVzUwWlhKbVlXTmxJR3hsZENCd1lXTnJZV2RsSUhCeWFYWmhkR1VnY0hKdmRHVmpkR1ZrSUhCMVlteHBZeUJ6ZEdGMGFXTWdlV2xsYkdSY0lpeGNjbHh1SUNCemRISnBZM1JDYVc1a09pQmNJbVYyWVd3Z1lYSm5kVzFsYm5SelhDSmNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1FXNWtJSFJvWlNCclpYbDNiM0prYzF4eVhHNWNjbHh1ZG1GeUlHVmpiV0UxUVc1a1RHVnpjMHRsZVhkdmNtUnpJRDBnWENKaWNtVmhheUJqWVhObElHTmhkR05vSUdOdmJuUnBiblZsSUdSbFluVm5aMlZ5SUdSbFptRjFiSFFnWkc4Z1pXeHpaU0JtYVc1aGJHeDVJR1p2Y2lCbWRXNWpkR2x2YmlCcFppQnlaWFIxY200Z2MzZHBkR05vSUhSb2NtOTNJSFJ5ZVNCMllYSWdkMmhwYkdVZ2QybDBhQ0J1ZFd4c0lIUnlkV1VnWm1Gc2MyVWdhVzV6ZEdGdVkyVnZaaUIwZVhCbGIyWWdkbTlwWkNCa1pXeGxkR1VnYm1WM0lHbHVJSFJvYVhOY0lseHlYRzVjY2x4dWRtRnlJR3RsZVhkdmNtUnpJRDBnZTF4eVhHNGdJRFU2SUdWamJXRTFRVzVrVEdWemMwdGxlWGR2Y21SekxGeHlYRzRnSURZNklHVmpiV0UxUVc1a1RHVnpjMHRsZVhkdmNtUnpJQ3NnWENJZ1kyOXVjM1FnWTJ4aGMzTWdaWGgwWlc1a2N5QmxlSEJ2Y25RZ2FXMXdiM0owSUhOMWNHVnlYQ0pjY2x4dWZWeHlYRzVjY2x4dUx5OGdJeU1nUTJoaGNtRmpkR1Z5SUdOaGRHVm5iM0pwWlhOY2NseHVYSEpjYmk4dklFSnBaeUIxWjJ4NUlISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJuTWdkR2hoZENCdFlYUmphQ0JqYUdGeVlXTjBaWEp6SUdsdUlIUm9aVnh5WEc0dkx5QjNhR2wwWlhOd1lXTmxMQ0JwWkdWdWRHbG1hV1Z5TENCaGJtUWdhV1JsYm5ScFptbGxjaTF6ZEdGeWRDQmpZWFJsWjI5eWFXVnpMaUJVYUdWelpWeHlYRzR2THlCaGNtVWdiMjVzZVNCaGNIQnNhV1ZrSUhkb1pXNGdZU0JqYUdGeVlXTjBaWElnYVhNZ1ptOTFibVFnZEc4Z1lXTjBkV0ZzYkhrZ2FHRjJaU0JoWEhKY2JpOHZJR052WkdVZ2NHOXBiblFnWVdKdmRtVWdNVEk0TGx4eVhHNHZMeUJIWlc1bGNtRjBaV1FnWW5rZ1lHSnBiaTluWlc1bGNtRjBaUzFwWkdWdWRHbG1hV1Z5TFhKbFoyVjRMbXB6WUM1Y2NseHVYSEpjYm5aaGNpQnViMjVCVTBOSlNXbGtaVzUwYVdacFpYSlRkR0Z5ZEVOb1lYSnpJRDBnWENKY1hIaGhZVnhjZUdJMVhGeDRZbUZjWEhoak1DMWNYSGhrTmx4Y2VHUTRMVnhjZUdZMlhGeDRaamd0WEZ4MU1ESmpNVnhjZFRBeVl6WXRYRngxTURKa01WeGNkVEF5WlRBdFhGeDFNREpsTkZ4Y2RUQXlaV05jWEhVd01tVmxYRngxTURNM01DMWNYSFV3TXpjMFhGeDFNRE0zTmx4Y2RUQXpOemRjWEhVd016ZGhMVnhjZFRBek4yUmNYSFV3TXpkbVhGeDFNRE00Tmx4Y2RUQXpPRGd0WEZ4MU1ETTRZVnhjZFRBek9HTmNYSFV3TXpobExWeGNkVEF6WVRGY1hIVXdNMkV6TFZ4Y2RUQXpaalZjWEhVd00yWTNMVnhjZFRBME9ERmNYSFV3TkRoaExWeGNkVEExTW1aY1hIVXdOVE14TFZ4Y2RUQTFOVFpjWEhVd05UVTVYRngxTURVMk1TMWNYSFV3TlRnM1hGeDFNRFZrTUMxY1hIVXdOV1ZoWEZ4MU1EVm1NQzFjWEhVd05XWXlYRngxTURZeU1DMWNYSFV3TmpSaFhGeDFNRFkyWlZ4Y2RUQTJObVpjWEhVd05qY3hMVnhjZFRBMlpETmNYSFV3Tm1RMVhGeDFNRFpsTlZ4Y2RUQTJaVFpjWEhVd05tVmxYRngxTURabFpseGNkVEEyWm1FdFhGeDFNRFptWTF4Y2RUQTJabVpjWEhVd056RXdYRngxTURjeE1pMWNYSFV3TnpKbVhGeDFNRGMwWkMxY1hIVXdOMkUxWEZ4MU1EZGlNVnhjZFRBM1kyRXRYRngxTURkbFlWeGNkVEEzWmpSY1hIVXdOMlkxWEZ4MU1EZG1ZVnhjZFRBNE1EQXRYRngxTURneE5WeGNkVEE0TVdGY1hIVXdPREkwWEZ4MU1EZ3lPRnhjZFRBNE5EQXRYRngxTURnMU9GeGNkVEE0WVRBdFhGeDFNRGhpTkZ4Y2RUQTRZall0WEZ4MU1EaGlaRnhjZFRBNU1EUXRYRngxTURrek9WeGNkVEE1TTJSY1hIVXdPVFV3WEZ4MU1EazFPQzFjWEhVd09UWXhYRngxTURrM01TMWNYSFV3T1Rnd1hGeDFNRGs0TlMxY1hIVXdPVGhqWEZ4MU1EazRabHhjZFRBNU9UQmNYSFV3T1RrekxWeGNkVEE1WVRoY1hIVXdPV0ZoTFZ4Y2RUQTVZakJjWEhVd09XSXlYRngxTURsaU5pMWNYSFV3T1dJNVhGeDFNRGxpWkZ4Y2RUQTVZMlZjWEhVd09XUmpYRngxTURsa1pGeGNkVEE1WkdZdFhGeDFNRGxsTVZ4Y2RUQTVaakJjWEhVd09XWXhYRngxTUdFd05TMWNYSFV3WVRCaFhGeDFNR0V3Wmx4Y2RUQmhNVEJjWEhVd1lURXpMVnhjZFRCaE1qaGNYSFV3WVRKaExWeGNkVEJoTXpCY1hIVXdZVE15WEZ4MU1HRXpNMXhjZFRCaE16VmNYSFV3WVRNMlhGeDFNR0V6T0Z4Y2RUQmhNemxjWEhVd1lUVTVMVnhjZFRCaE5XTmNYSFV3WVRWbFhGeDFNR0UzTWkxY1hIVXdZVGMwWEZ4MU1HRTROUzFjWEhVd1lUaGtYRngxTUdFNFppMWNYSFV3WVRreFhGeDFNR0U1TXkxY1hIVXdZV0U0WEZ4MU1HRmhZUzFjWEhVd1lXSXdYRngxTUdGaU1seGNkVEJoWWpOY1hIVXdZV0kxTFZ4Y2RUQmhZamxjWEhVd1lXSmtYRngxTUdGa01GeGNkVEJoWlRCY1hIVXdZV1V4WEZ4MU1HRm1PVnhjZFRCaU1EVXRYRngxTUdJd1kxeGNkVEJpTUdaY1hIVXdZakV3WEZ4MU1HSXhNeTFjWEhVd1lqSTRYRngxTUdJeVlTMWNYSFV3WWpNd1hGeDFNR0l6TWx4Y2RUQmlNek5jWEhVd1lqTTFMVnhjZFRCaU16bGNYSFV3WWpOa1hGeDFNR0kxWTF4Y2RUQmlOV1JjWEhVd1lqVm1MVnhjZFRCaU5qRmNYSFV3WWpjeFhGeDFNR0k0TTF4Y2RUQmlPRFV0WEZ4MU1HSTRZVnhjZFRCaU9HVXRYRngxTUdJNU1GeGNkVEJpT1RJdFhGeDFNR0k1TlZ4Y2RUQmlPVGxjWEhVd1lqbGhYRngxTUdJNVkxeGNkVEJpT1dWY1hIVXdZamxtWEZ4MU1HSmhNMXhjZFRCaVlUUmNYSFV3WW1FNExWeGNkVEJpWVdGY1hIVXdZbUZsTFZ4Y2RUQmlZamxjWEhVd1ltUXdYRngxTUdNd05TMWNYSFV3WXpCalhGeDFNR013WlMxY1hIVXdZekV3WEZ4MU1HTXhNaTFjWEhVd1l6STRYRngxTUdNeVlTMWNYSFV3WXpNNVhGeDFNR016WkZ4Y2RUQmpOVGd0WEZ4MU1HTTFZVnhjZFRCak5qQmNYSFV3WXpZeFhGeDFNR000TUZ4Y2RUQmpPRFV0WEZ4MU1HTTRZMXhjZFRCak9HVXRYRngxTUdNNU1GeGNkVEJqT1RJdFhGeDFNR05oT0Z4Y2RUQmpZV0V0WEZ4MU1HTmlNMXhjZFRCallqVXRYRngxTUdOaU9WeGNkVEJqWW1SY1hIVXdZMlJsWEZ4MU1HTmxNRnhjZFRCalpURmNYSFV3WTJZeFhGeDFNR05tTWx4Y2RUQmtNRFV0WEZ4MU1HUXdZMXhjZFRCa01HVXRYRngxTUdReE1GeGNkVEJrTVRJdFhGeDFNR1F6WVZ4Y2RUQmtNMlJjWEhVd1pEUmxYRngxTUdRMU5DMWNYSFV3WkRVMlhGeDFNR1ExWmkxY1hIVXdaRFl4WEZ4MU1HUTNZUzFjWEhVd1pEZG1YRngxTUdRNE5TMWNYSFV3WkRrMlhGeDFNR1E1WVMxY1hIVXdaR0l4WEZ4MU1HUmlNeTFjWEhVd1pHSmlYRngxTUdSaVpGeGNkVEJrWXpBdFhGeDFNR1JqTmx4Y2RUQmxNREV0WEZ4MU1HVXpNRnhjZFRCbE16SmNYSFV3WlRNelhGeDFNR1UwTUMxY1hIVXdaVFEyWEZ4MU1HVTRNVnhjZFRCbE9ESmNYSFV3WlRnMFhGeDFNR1U0TjF4Y2RUQmxPRGhjWEhVd1pUaGhYRngxTUdVNFpGeGNkVEJsT1RRdFhGeDFNR1U1TjF4Y2RUQmxPVGt0WEZ4MU1HVTVabHhjZFRCbFlURXRYRngxTUdWaE0xeGNkVEJsWVRWY1hIVXdaV0UzWEZ4MU1HVmhZVnhjZFRCbFlXSmNYSFV3WldGa0xWeGNkVEJsWWpCY1hIVXdaV0l5WEZ4MU1HVmlNMXhjZFRCbFltUmNYSFV3WldNd0xWeGNkVEJsWXpSY1hIVXdaV00yWEZ4MU1HVmtZeTFjWEhVd1pXUm1YRngxTUdZd01GeGNkVEJtTkRBdFhGeDFNR1kwTjF4Y2RUQm1ORGt0WEZ4MU1HWTJZMXhjZFRCbU9EZ3RYRngxTUdZNFkxeGNkVEV3TURBdFhGeDFNVEF5WVZ4Y2RURXdNMlpjWEhVeE1EVXdMVnhjZFRFd05UVmNYSFV4TURWaExWeGNkVEV3TldSY1hIVXhNRFl4WEZ4MU1UQTJOVnhjZFRFd05qWmNYSFV4TURabExWeGNkVEV3TnpCY1hIVXhNRGMxTFZ4Y2RURXdPREZjWEhVeE1EaGxYRngxTVRCaE1DMWNYSFV4TUdNMVhGeDFNVEJqTjF4Y2RURXdZMlJjWEhVeE1HUXdMVnhjZFRFd1ptRmNYSFV4TUdaakxWeGNkVEV5TkRoY1hIVXhNalJoTFZ4Y2RURXlOR1JjWEhVeE1qVXdMVnhjZFRFeU5UWmNYSFV4TWpVNFhGeDFNVEkxWVMxY1hIVXhNalZrWEZ4MU1USTJNQzFjWEhVeE1qZzRYRngxTVRJNFlTMWNYSFV4TWpoa1hGeDFNVEk1TUMxY1hIVXhNbUl3WEZ4MU1USmlNaTFjWEhVeE1tSTFYRngxTVRKaU9DMWNYSFV4TW1KbFhGeDFNVEpqTUZ4Y2RURXlZekl0WEZ4MU1USmpOVnhjZFRFeVl6Z3RYRngxTVRKa05seGNkVEV5WkRndFhGeDFNVE14TUZ4Y2RURXpNVEl0WEZ4MU1UTXhOVnhjZFRFek1UZ3RYRngxTVRNMVlWeGNkVEV6T0RBdFhGeDFNVE00Wmx4Y2RURXpZVEF0WEZ4MU1UTm1OVnhjZFRFelpqZ3RYRngxTVRObVpGeGNkVEUwTURFdFhGeDFNVFkyWTF4Y2RURTJObVl0WEZ4MU1UWTNabHhjZFRFMk9ERXRYRngxTVRZNVlWeGNkVEUyWVRBdFhGeDFNVFpsWVZ4Y2RURTJaV1V0WEZ4MU1UWm1PRnhjZFRFM01EQXRYRngxTVRjd1kxeGNkVEUzTUdVdFhGeDFNVGN4TVZ4Y2RURTNNakF0WEZ4MU1UY3pNVnhjZFRFM05EQXRYRngxTVRjMU1WeGNkVEUzTmpBdFhGeDFNVGMyWTF4Y2RURTNObVV0WEZ4MU1UYzNNRnhjZFRFM09EQXRYRngxTVRkaU0xeGNkVEUzWkRkY1hIVXhOMlJqWEZ4MU1UZ3lNQzFjWEhVeE9EYzNYRngxTVRnNE1DMWNYSFV4T0dFNFhGeDFNVGhoWVZ4Y2RURTRZakF0WEZ4MU1UaG1OVnhjZFRFNU1EQXRYRngxTVRreFpWeGNkVEU1TlRBdFhGeDFNVGsyWkZ4Y2RURTVOekF0WEZ4MU1UazNORnhjZFRFNU9EQXRYRngxTVRsaFlseGNkVEU1WWpBdFhGeDFNVGxqT1Z4Y2RURmhNREF0WEZ4MU1XRXhObHhjZFRGaE1qQXRYRngxTVdFMU5GeGNkVEZoWVRkY1hIVXhZakExTFZ4Y2RURmlNek5jWEhVeFlqUTFMVnhjZFRGaU5HSmNYSFV4WWpnekxWeGNkVEZpWVRCY1hIVXhZbUZsWEZ4MU1XSmhabHhjZFRGaVltRXRYRngxTVdKbE5WeGNkVEZqTURBdFhGeDFNV015TTF4Y2RURmpOR1F0WEZ4MU1XTTBabHhjZFRGak5XRXRYRngxTVdNM1pGeGNkVEZqT0RBdFhGeDFNV000T0Z4Y2RURmpaVGt0WEZ4MU1XTmxZMXhjZFRGalpXVXRYRngxTVdObU1WeGNkVEZqWmpWY1hIVXhZMlkyWEZ4MU1XUXdNQzFjWEhVeFpHSm1YRngxTVdVd01DMWNYSFV4WmpFMVhGeDFNV1l4T0MxY1hIVXhaakZrWEZ4MU1XWXlNQzFjWEhVeFpqUTFYRngxTVdZME9DMWNYSFV4WmpSa1hGeDFNV1kxTUMxY1hIVXhaalUzWEZ4MU1XWTFPVnhjZFRGbU5XSmNYSFV4WmpWa1hGeDFNV1kxWmkxY1hIVXhaamRrWEZ4MU1XWTRNQzFjWEhVeFptSTBYRngxTVdaaU5pMWNYSFV4Wm1KalhGeDFNV1ppWlZ4Y2RURm1Zekl0WEZ4MU1XWmpORnhjZFRGbVl6WXRYRngxTVdaalkxeGNkVEZtWkRBdFhGeDFNV1prTTF4Y2RURm1aRFl0WEZ4MU1XWmtZbHhjZFRGbVpUQXRYRngxTVdabFkxeGNkVEZtWmpJdFhGeDFNV1ptTkZ4Y2RURm1aall0WEZ4MU1XWm1ZMXhjZFRJd056RmNYSFV5TURkbVhGeDFNakE1TUMxY1hIVXlNRGxqWEZ4MU1qRXdNbHhjZFRJeE1EZGNYSFV5TVRCaExWeGNkVEl4TVROY1hIVXlNVEUxWEZ4MU1qRXhPQzFjWEhVeU1URmtYRngxTWpFeU5GeGNkVEl4TWpaY1hIVXlNVEk0WEZ4MU1qRXlZUzFjWEhVeU1UTTVYRngxTWpFell5MWNYSFV5TVRObVhGeDFNakUwTlMxY1hIVXlNVFE1WEZ4MU1qRTBaVnhjZFRJeE5qQXRYRngxTWpFNE9GeGNkVEpqTURBdFhGeDFNbU15WlZ4Y2RUSmpNekF0WEZ4MU1tTTFaVnhjZFRKak5qQXRYRngxTW1ObE5GeGNkVEpqWldJdFhGeDFNbU5sWlZ4Y2RUSmpaakpjWEhVeVkyWXpYRngxTW1Rd01DMWNYSFV5WkRJMVhGeDFNbVF5TjF4Y2RUSmtNbVJjWEhVeVpETXdMVnhjZFRKa05qZGNYSFV5WkRabVhGeDFNbVE0TUMxY1hIVXlaRGsyWEZ4MU1tUmhNQzFjWEhVeVpHRTJYRngxTW1SaE9DMWNYSFV5WkdGbFhGeDFNbVJpTUMxY1hIVXlaR0kyWEZ4MU1tUmlPQzFjWEhVeVpHSmxYRngxTW1Sak1DMWNYSFV5WkdNMlhGeDFNbVJqT0MxY1hIVXlaR05sWEZ4MU1tUmtNQzFjWEhVeVpHUTJYRngxTW1Sa09DMWNYSFV5WkdSbFhGeDFNekF3TlMxY1hIVXpNREEzWEZ4MU16QXlNUzFjWEhVek1ESTVYRngxTXpBek1TMWNYSFV6TURNMVhGeDFNekF6T0MxY1hIVXpNRE5qWEZ4MU16QTBNUzFjWEhVek1EazJYRngxTXpBNVlpMWNYSFV6TURsbVhGeDFNekJoTVMxY1hIVXpNR1poWEZ4MU16Qm1ZeTFjWEhVek1HWm1YRngxTXpFd05TMWNYSFV6TVRKa1hGeDFNekV6TVMxY1hIVXpNVGhsWEZ4MU16RmhNQzFjWEhVek1XSmhYRngxTXpGbU1DMWNYSFV6TVdabVhGeDFNelF3TUMxY1hIVTBaR0kxWEZ4MU5HVXdNQzFjWEhVNVptUTFYRngxWVRBd01DMWNYSFZoTkRoalhGeDFZVFJrTUMxY1hIVmhOR1prWEZ4MVlUVXdNQzFjWEhWaE5qQmpYRngxWVRZeE1DMWNYSFZoTmpGbVhGeDFZVFl5WVZ4Y2RXRTJNbUpjWEhWaE5qUXdMVnhjZFdFMk5tVmNYSFZoTmpkbUxWeGNkV0UyT1dSY1hIVmhObUV3TFZ4Y2RXRTJaV1pjWEhWaE56RTNMVnhjZFdFM01XWmNYSFZoTnpJeUxWeGNkV0UzT0RoY1hIVmhOemhpTFZ4Y2RXRTNZV1ZjWEhWaE4ySXdMVnhjZFdFM1lqZGNYSFZoTjJZM0xWeGNkV0U0TURGY1hIVmhPREF6TFZ4Y2RXRTRNRFZjWEhWaE9EQTNMVnhjZFdFNE1HRmNYSFZoT0RCakxWeGNkV0U0TWpKY1hIVmhPRFF3TFZ4Y2RXRTROek5jWEhWaE9EZ3lMVnhjZFdFNFlqTmNYSFZoT0dZeUxWeGNkV0U0WmpkY1hIVmhPR1ppWEZ4MVlUaG1aRnhjZFdFNU1HRXRYRngxWVRreU5WeGNkV0U1TXpBdFhGeDFZVGswTmx4Y2RXRTVOakF0WEZ4MVlUazNZMXhjZFdFNU9EUXRYRngxWVRsaU1seGNkV0U1WTJaY1hIVmhPV1V3TFZ4Y2RXRTVaVFJjWEhWaE9XVTJMVnhjZFdFNVpXWmNYSFZoT1daaExWeGNkV0U1Wm1WY1hIVmhZVEF3TFZ4Y2RXRmhNamhjWEhWaFlUUXdMVnhjZFdGaE5ESmNYSFZoWVRRMExWeGNkV0ZoTkdKY1hIVmhZVFl3TFZ4Y2RXRmhOelpjWEhWaFlUZGhYRngxWVdFM1pTMWNYSFZoWVdGbVhGeDFZV0ZpTVZ4Y2RXRmhZalZjWEhWaFlXSTJYRngxWVdGaU9TMWNYSFZoWVdKa1hGeDFZV0ZqTUZ4Y2RXRmhZekpjWEhWaFlXUmlMVnhjZFdGaFpHUmNYSFZoWVdVd0xWeGNkV0ZoWldGY1hIVmhZV1l5TFZ4Y2RXRmhaalJjWEhWaFlqQXhMVnhjZFdGaU1EWmNYSFZoWWpBNUxWeGNkV0ZpTUdWY1hIVmhZakV4TFZ4Y2RXRmlNVFpjWEhWaFlqSXdMVnhjZFdGaU1qWmNYSFZoWWpJNExWeGNkV0ZpTW1WY1hIVmhZak13TFZ4Y2RXRmlOV0ZjWEhWaFlqVmpMVnhjZFdGaU5qVmNYSFZoWWpjd0xWeGNkV0ZpWlRKY1hIVmhZekF3TFZ4Y2RXUTNZVE5jWEhWa04ySXdMVnhjZFdRM1l6WmNYSFZrTjJOaUxWeGNkV1EzWm1KY1hIVm1PVEF3TFZ4Y2RXWmhObVJjWEhWbVlUY3dMVnhjZFdaaFpEbGNYSFZtWWpBd0xWeGNkV1ppTURaY1hIVm1ZakV6TFZ4Y2RXWmlNVGRjWEhWbVlqRmtYRngxWm1JeFppMWNYSFZtWWpJNFhGeDFabUl5WVMxY1hIVm1Zak0yWEZ4MVptSXpPQzFjWEhWbVlqTmpYRngxWm1JelpWeGNkV1ppTkRCY1hIVm1ZalF4WEZ4MVptSTBNMXhjZFdaaU5EUmNYSFZtWWpRMkxWeGNkV1ppWWpGY1hIVm1ZbVF6TFZ4Y2RXWmtNMlJjWEhWbVpEVXdMVnhjZFdaa09HWmNYSFZtWkRreUxWeGNkV1prWXpkY1hIVm1aR1l3TFZ4Y2RXWmtabUpjWEhWbVpUY3dMVnhjZFdabE56UmNYSFZtWlRjMkxWeGNkV1psWm1OY1hIVm1aakl4TFZ4Y2RXWm1NMkZjWEhWbVpqUXhMVnhjZFdabU5XRmNYSFZtWmpZMkxWeGNkV1ptWW1WY1hIVm1abU15TFZ4Y2RXWm1ZemRjWEhWbVptTmhMVnhjZFdabVkyWmNYSFZtWm1ReUxWeGNkV1ptWkRkY1hIVm1abVJoTFZ4Y2RXWm1aR05jSWx4eVhHNTJZWElnYm05dVFWTkRTVWxwWkdWdWRHbG1hV1Z5UTJoaGNuTWdQU0JjSWx4Y2RUSXdNR05jWEhVeU1EQmtYRng0WWpkY1hIVXdNekF3TFZ4Y2RUQXpObVpjWEhVd016ZzNYRngxTURRNE15MWNYSFV3TkRnM1hGeDFNRFU1TVMxY1hIVXdOV0prWEZ4MU1EVmlabHhjZFRBMVl6RmNYSFV3TldNeVhGeDFNRFZqTkZ4Y2RUQTFZelZjWEhVd05XTTNYRngxTURZeE1DMWNYSFV3TmpGaFhGeDFNRFkwWWkxY1hIVXdOalk1WEZ4MU1EWTNNRnhjZFRBMlpEWXRYRngxTURaa1kxeGNkVEEyWkdZdFhGeDFNRFpsTkZ4Y2RUQTJaVGRjWEhVd05tVTRYRngxTURabFlTMWNYSFV3Tm1Wa1hGeDFNRFptTUMxY1hIVXdObVk1WEZ4MU1EY3hNVnhjZFRBM016QXRYRngxTURjMFlWeGNkVEEzWVRZdFhGeDFNRGRpTUZ4Y2RUQTNZekF0WEZ4MU1EZGpPVnhjZFRBM1pXSXRYRngxTURkbU0xeGNkVEE0TVRZdFhGeDFNRGd4T1Z4Y2RUQTRNV0l0WEZ4MU1EZ3lNMXhjZFRBNE1qVXRYRngxTURneU4xeGNkVEE0TWprdFhGeDFNRGd5WkZ4Y2RUQTROVGt0WEZ4MU1EZzFZbHhjZFRBNFpEUXRYRngxTURobE1WeGNkVEE0WlRNdFhGeDFNRGt3TTF4Y2RUQTVNMkV0WEZ4MU1Ea3pZMXhjZFRBNU0yVXRYRngxTURrMFpseGNkVEE1TlRFdFhGeDFNRGsxTjF4Y2RUQTVOakpjWEhVd09UWXpYRngxTURrMk5pMWNYSFV3T1RabVhGeDFNRGs0TVMxY1hIVXdPVGd6WEZ4MU1EbGlZMXhjZFRBNVltVXRYRngxTURsak5GeGNkVEE1WXpkY1hIVXdPV000WEZ4MU1EbGpZaTFjWEhVd09XTmtYRngxTURsa04xeGNkVEE1WlRKY1hIVXdPV1V6WEZ4MU1EbGxOaTFjWEhVd09XVm1YRngxTUdFd01TMWNYSFV3WVRBelhGeDFNR0V6WTF4Y2RUQmhNMlV0WEZ4MU1HRTBNbHhjZFRCaE5EZGNYSFV3WVRRNFhGeDFNR0UwWWkxY1hIVXdZVFJrWEZ4MU1HRTFNVnhjZFRCaE5qWXRYRngxTUdFM01WeGNkVEJoTnpWY1hIVXdZVGd4TFZ4Y2RUQmhPRE5jWEhVd1lXSmpYRngxTUdGaVpTMWNYSFV3WVdNMVhGeDFNR0ZqTnkxY1hIVXdZV001WEZ4MU1HRmpZaTFjWEhVd1lXTmtYRngxTUdGbE1seGNkVEJoWlROY1hIVXdZV1UyTFZ4Y2RUQmhaV1pjWEhVd1lqQXhMVnhjZFRCaU1ETmNYSFV3WWpOalhGeDFNR0l6WlMxY1hIVXdZalEwWEZ4MU1HSTBOMXhjZFRCaU5EaGNYSFV3WWpSaUxWeGNkVEJpTkdSY1hIVXdZalUyWEZ4MU1HSTFOMXhjZFRCaU5qSmNYSFV3WWpZelhGeDFNR0kyTmkxY1hIVXdZalptWEZ4MU1HSTRNbHhjZFRCaVltVXRYRngxTUdKak1seGNkVEJpWXpZdFhGeDFNR0pqT0Z4Y2RUQmlZMkV0WEZ4MU1HSmpaRnhjZFRCaVpEZGNYSFV3WW1VMkxWeGNkVEJpWldaY1hIVXdZekF3TFZ4Y2RUQmpNRE5jWEhVd1l6TmxMVnhjZFRCak5EUmNYSFV3WXpRMkxWeGNkVEJqTkRoY1hIVXdZelJoTFZ4Y2RUQmpOR1JjWEhVd1l6VTFYRngxTUdNMU5seGNkVEJqTmpKY1hIVXdZell6WEZ4MU1HTTJOaTFjWEhVd1l6Wm1YRngxTUdNNE1TMWNYSFV3WXpnelhGeDFNR05pWTF4Y2RUQmpZbVV0WEZ4MU1HTmpORnhjZFRCall6WXRYRngxTUdOak9GeGNkVEJqWTJFdFhGeDFNR05qWkZ4Y2RUQmpaRFZjWEhVd1kyUTJYRngxTUdObE1seGNkVEJqWlROY1hIVXdZMlUyTFZ4Y2RUQmpaV1pjWEhVd1pEQXhMVnhjZFRCa01ETmNYSFV3WkRObExWeGNkVEJrTkRSY1hIVXdaRFEyTFZ4Y2RUQmtORGhjWEhVd1pEUmhMVnhjZFRCa05HUmNYSFV3WkRVM1hGeDFNR1EyTWx4Y2RUQmtOak5jWEhVd1pEWTJMVnhjZFRCa05tWmNYSFV3WkRneVhGeDFNR1E0TTF4Y2RUQmtZMkZjWEhVd1pHTm1MVnhjZFRCa1pEUmNYSFV3WkdRMlhGeDFNR1JrT0MxY1hIVXdaR1JtWEZ4MU1HUmxOaTFjWEhVd1pHVm1YRngxTUdSbU1seGNkVEJrWmpOY1hIVXdaVE14WEZ4MU1HVXpOQzFjWEhVd1pUTmhYRngxTUdVME55MWNYSFV3WlRSbFhGeDFNR1UxTUMxY1hIVXdaVFU1WEZ4MU1HVmlNVnhjZFRCbFlqUXRYRngxTUdWaU9WeGNkVEJsWW1KY1hIVXdaV0pqWEZ4MU1HVmpPQzFjWEhVd1pXTmtYRngxTUdWa01DMWNYSFV3WldRNVhGeDFNR1l4T0Z4Y2RUQm1NVGxjWEhVd1pqSXdMVnhjZFRCbU1qbGNYSFV3WmpNMVhGeDFNR1l6TjF4Y2RUQm1NemxjWEhVd1pqTmxYRngxTUdZelpseGNkVEJtTnpFdFhGeDFNR1k0TkZ4Y2RUQm1PRFpjWEhVd1pqZzNYRngxTUdZNFpDMWNYSFV3WmprM1hGeDFNR1k1T1MxY1hIVXdabUpqWEZ4MU1HWmpObHhjZFRFd01tSXRYRngxTVRBelpWeGNkVEV3TkRBdFhGeDFNVEEwT1Z4Y2RURXdOVFl0WEZ4MU1UQTFPVnhjZFRFd05XVXRYRngxTVRBMk1GeGNkVEV3TmpJdFhGeDFNVEEyTkZ4Y2RURXdOamN0WEZ4MU1UQTJaRnhjZFRFd056RXRYRngxTVRBM05GeGNkVEV3T0RJdFhGeDFNVEE0WkZ4Y2RURXdPR1l0WEZ4MU1UQTVaRnhjZFRFek5XUXRYRngxTVRNMVpseGNkVEV6TmprdFhGeDFNVE0zTVZ4Y2RURTNNVEl0WEZ4MU1UY3hORnhjZFRFM016SXRYRngxTVRjek5GeGNkVEUzTlRKY1hIVXhOelV6WEZ4MU1UYzNNbHhjZFRFM056TmNYSFV4TjJJMExWeGNkVEUzWkROY1hIVXhOMlJrWEZ4MU1UZGxNQzFjWEhVeE4yVTVYRngxTVRnd1lpMWNYSFV4T0RCa1hGeDFNVGd4TUMxY1hIVXhPREU1WEZ4MU1UaGhPVnhjZFRFNU1qQXRYRngxTVRreVlseGNkVEU1TXpBdFhGeDFNVGt6WWx4Y2RURTVORFl0WEZ4MU1UazBabHhjZFRFNVpEQXRYRngxTVRsa1lWeGNkVEZoTVRjdFhGeDFNV0V4WWx4Y2RURmhOVFV0WEZ4MU1XRTFaVnhjZFRGaE5qQXRYRngxTVdFM1kxeGNkVEZoTjJZdFhGeDFNV0U0T1Z4Y2RURmhPVEF0WEZ4MU1XRTVPVnhjZFRGaFlqQXRYRngxTVdGaVpGeGNkVEZpTURBdFhGeDFNV0l3TkZ4Y2RURmlNelF0WEZ4MU1XSTBORnhjZFRGaU5UQXRYRngxTVdJMU9WeGNkVEZpTm1JdFhGeDFNV0kzTTF4Y2RURmlPREF0WEZ4MU1XSTRNbHhjZFRGaVlURXRYRngxTVdKaFpGeGNkVEZpWWpBdFhGeDFNV0ppT1Z4Y2RURmlaVFl0WEZ4MU1XSm1NMXhjZFRGak1qUXRYRngxTVdNek4xeGNkVEZqTkRBdFhGeDFNV00wT1Z4Y2RURmpOVEF0WEZ4MU1XTTFPVnhjZFRGalpEQXRYRngxTVdOa01seGNkVEZqWkRRdFhGeDFNV05sT0Z4Y2RURmpaV1JjWEhVeFkyWXlMVnhjZFRGalpqUmNYSFV4WTJZNFhGeDFNV05tT1Z4Y2RURmtZekF0WEZ4MU1XUm1OVnhjZFRGa1ptSXRYRngxTVdSbVpseGNkVEl3TTJaY1hIVXlNRFF3WEZ4MU1qQTFORnhjZFRJd1pEQXRYRngxTWpCa1kxeGNkVEl3WlRGY1hIVXlNR1UxTFZ4Y2RUSXdaakJjWEhVeVkyVm1MVnhjZFRKalpqRmNYSFV5WkRkbVhGeDFNbVJsTUMxY1hIVXlaR1ptWEZ4MU16QXlZUzFjWEhVek1ESm1YRngxTXpBNU9WeGNkVE13T1dGY1hIVmhOakl3TFZ4Y2RXRTJNamxjWEhWaE5qWm1YRngxWVRZM05DMWNYSFZoTmpka1hGeDFZVFk1WlZ4Y2RXRTJPV1pjWEhWaE5tWXdYRngxWVRabU1WeGNkV0U0TURKY1hIVmhPREEyWEZ4MVlUZ3dZbHhjZFdFNE1qTXRYRngxWVRneU4xeGNkV0U0T0RCY1hIVmhPRGd4WEZ4MVlUaGlOQzFjWEhWaE9HTTFYRngxWVRoa01DMWNYSFZoT0dRNVhGeDFZVGhsTUMxY1hIVmhPR1l4WEZ4MVlUa3dNQzFjWEhWaE9UQTVYRngxWVRreU5pMWNYSFZoT1RKa1hGeDFZVGswTnkxY1hIVmhPVFV6WEZ4MVlUazRNQzFjWEhWaE9UZ3pYRngxWVRsaU15MWNYSFZoT1dNd1hGeDFZVGxrTUMxY1hIVmhPV1E1WEZ4MVlUbGxOVnhjZFdFNVpqQXRYRngxWVRsbU9WeGNkV0ZoTWprdFhGeDFZV0V6Tmx4Y2RXRmhORE5jWEhWaFlUUmpYRngxWVdFMFpGeGNkV0ZoTlRBdFhGeDFZV0UxT1Z4Y2RXRmhOMkl0WEZ4MVlXRTNaRnhjZFdGaFlqQmNYSFZoWVdJeUxWeGNkV0ZoWWpSY1hIVmhZV0kzWEZ4MVlXRmlPRnhjZFdGaFltVmNYSFZoWVdKbVhGeDFZV0ZqTVZ4Y2RXRmhaV0l0WEZ4MVlXRmxabHhjZFdGaFpqVmNYSFZoWVdZMlhGeDFZV0psTXkxY1hIVmhZbVZoWEZ4MVlXSmxZMXhjZFdGaVpXUmNYSFZoWW1Zd0xWeGNkV0ZpWmpsY1hIVm1ZakZsWEZ4MVptVXdNQzFjWEhWbVpUQm1YRngxWm1VeU1DMWNYSFZtWlRKbVhGeDFabVV6TTF4Y2RXWmxNelJjWEhWbVpUUmtMVnhjZFdabE5HWmNYSFZtWmpFd0xWeGNkV1ptTVRsY1hIVm1aak5tWENKY2NseHVYSEpjYm5aaGNpQnViMjVCVTBOSlNXbGtaVzUwYVdacFpYSlRkR0Z5ZENBOUlHNWxkeUJTWldkRmVIQW9YQ0piWENJZ0t5QnViMjVCVTBOSlNXbGtaVzUwYVdacFpYSlRkR0Z5ZEVOb1lYSnpJQ3NnWENKZFhDSXBYSEpjYm5aaGNpQnViMjVCVTBOSlNXbGtaVzUwYVdacFpYSWdQU0J1WlhjZ1VtVm5SWGh3S0Z3aVcxd2lJQ3NnYm05dVFWTkRTVWxwWkdWdWRHbG1hV1Z5VTNSaGNuUkRhR0Z5Y3lBcklHNXZia0ZUUTBsSmFXUmxiblJwWm1sbGNrTm9ZWEp6SUNzZ1hDSmRYQ0lwWEhKY2JseHlYRzV1YjI1QlUwTkpTV2xrWlc1MGFXWnBaWEpUZEdGeWRFTm9ZWEp6SUQwZ2JtOXVRVk5EU1VscFpHVnVkR2xtYVdWeVEyaGhjbk1nUFNCdWRXeHNYSEpjYmx4eVhHNHZMeUJVYUdWelpTQmhjbVVnWVNCeWRXNHRiR1Z1WjNSb0lHRnVaQ0J2Wm1aelpYUWdaVzVqYjJSbFpDQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQjBhR1ZjY2x4dUx5OGdQakI0Wm1abVppQmpiMlJsSUhCdmFXNTBjeUIwYUdGMElHRnlaU0JoSUhaaGJHbGtJSEJoY25RZ2IyWWdhV1JsYm5ScFptbGxjbk11SUZSb1pWeHlYRzR2THlCdlptWnpaWFFnYzNSaGNuUnpJR0YwSURCNE1UQXdNREFzSUdGdVpDQmxZV05vSUhCaGFYSWdiMllnYm5WdFltVnljeUJ5WlhCeVpYTmxiblJ6SUdGdVhISmNiaTh2SUc5bVpuTmxkQ0IwYnlCMGFHVWdibVY0ZENCeVlXNW5aU3dnWVc1a0lIUm9aVzRnWVNCemFYcGxJRzltSUhSb1pTQnlZVzVuWlM0Z1ZHaGxlU0IzWlhKbFhISmNiaTh2SUdkbGJtVnlZWFJsWkNCaWVTQmlhVzR2WjJWdVpYSmhkR1V0YVdSbGJuUnBabWxsY2kxeVpXZGxlQzVxYzF4eVhHNTJZWElnWVhOMGNtRnNTV1JsYm5ScFptbGxjbE4wWVhKMFEyOWtaWE1nUFNCYk1Dd3hNU3d5TERJMUxESXNNVGdzTWl3eExESXNNVFFzTXl3eE15d3pOU3d4TWpJc056QXNOVElzTWpZNExESTRMRFFzTkRnc05EZ3NNekVzTVRjc01qWXNOaXd6Tnl3eE1Td3lPU3d6TERNMUxEVXNOeXd5TERRc05ETXNNVFUzTERFNUxETTFMRFVzTXpVc05Td3pPU3c1TERVeExERTFOeXd6TVRBc01UQXNNakVzTVRFc055d3hOVE1zTlN3ekxEQXNNaXcwTXl3eUxERXNOQ3d3TERNc01qSXNNVEVzTWpJc01UQXNNekFzTmpZc01UZ3NNaXd4TERFeExESXhMREV4TERJMUxEY3hMRFUxTERjc01TdzJOU3d3TERFMkxETXNNaXd5TERJc01qWXNORFVzTWpnc05Dd3lPQ3d6Tml3M0xESXNNamNzTWpnc05UTXNNVEVzTWpFc01URXNNVGdzTVRRc01UY3NNVEV4TERjeUxEVTJMRFV3TERFMExEVXdMRGM0TlN3MU1pdzNOaXcwTkN3ek15d3lOQ3d5Tnl3ek5TdzBNaXd6TkN3MExEQXNNVE1zTkRjc01UVXNNeXd5TWl3d0xESXNNQ3d6Tml3eE55d3lMREkwTERnMUxEWXNNaXd3TERJc015d3lMREUwTERJc09TdzRMRFEyTERNNUxEY3NNeXd4TERNc01qRXNNaXcyTERJc01Td3lMRFFzTkN3d0xERTVMREFzTVRNc05Dd3hOVGtzTlRJc01Ua3NNeXcxTkN3ME55d3lNU3d4TERJc01Dd3hPRFVzTkRZc05ESXNNeXd6Tnl3ME55d3lNU3d3TERZd0xEUXlMRGcyTERJMUxETTVNU3cyTXl3ek1pd3dMRFEwT1N3MU5pd3lOalFzT0N3eUxETTJMREU0TERBc05UQXNNamtzT0RneExEa3lNU3d4TURNc01URXdMREU0TERFNU5Td3lOelE1TERFd056QXNOREExTUN3MU9ESXNPRFl6TkN3MU5qZ3NPQ3d6TUN3eE1UUXNNamtzTVRrc05EY3NNVGNzTXl3ek1pd3lNQ3cyTERFNExEZzRNU3cyT0N3eE1pd3dMRFkzTERFeUxEWTFMREFzTXpJc05qRXlOQ3d5TUN3M05UUXNPVFE0Tml3eExETXdOekVzTVRBMkxEWXNNVElzTkN3NExEZ3NPU3cxT1RreExEZzBMRElzTnpBc01pd3hMRE1zTUN3ekxERXNNeXd6TERJc01URXNNaXd3TERJc05pd3lMRFkwTERJc015d3pMRGNzTWl3MkxESXNNamNzTWl3ekxESXNOQ3d5TERBc05DdzJMRElzTXpNNUxETXNNalFzTWl3eU5Dd3lMRE13TERJc01qUXNNaXd6TUN3eUxESTBMRElzTXpBc01pd3lOQ3d5TERNd0xESXNNalFzTWl3M0xEUXhORGtzTVRrMkxEWXdMRFkzTERFeU1UTXNNeXd5TERJMkxESXNNU3d5TERBc015d3dMRElzT1N3eUxETXNNaXd3TERJc01DdzNMREFzTlN3d0xESXNNQ3d5TERBc01pd3lMRElzTVN3eUxEQXNNeXd3TERJc01Dd3lMREFzTWl3d0xESXNNQ3d5TERFc01pd3dMRE1zTXl3eUxEWXNNaXd6TERJc015d3lMREFzTWl3NUxESXNNVFlzTml3eUxESXNOQ3d5TERFMkxEUTBNakVzTkRJM01UQXNORElzTkRFME9Dd3hNaXd5TWpFc015dzFOell4TERFd05Ua3hMRFUwTVYxY2NseHVkbUZ5SUdGemRISmhiRWxrWlc1MGFXWnBaWEpEYjJSbGN5QTlJRnMxTURrc01Dd3lNamNzTUN3eE5UQXNOQ3d5T1RRc09Td3hNelk0TERJc01pd3hMRFlzTXl3ME1Td3lMRFVzTUN3eE5qWXNNU3d4TXpBMkxESXNOVFFzTVRRc016SXNPU3d4Tml3ekxEUTJMREV3TERVMExEa3NOeXd5TERNM0xERXpMRElzT1N3MU1pd3dMREV6TERJc05Ea3NNVE1zTVRBc01pdzBMRGtzT0RNc01URXNOeXd3TERFMk1Td3hNU3cyTERrc055d3pMRFUzTERBc01pdzJMRE1zTVN3ekxESXNNVEFzTUN3eE1Td3hMRE1zTml3MExEUXNNVGt6TERFM0xERXdMRGtzT0Rjc01Ua3NNVE1zT1N3eU1UUXNOaXd6TERnc01qZ3NNU3c0TXl3eE5pd3hOaXc1TERneUxERXlMRGtzT1N3NE5Dd3hOQ3cxTERrc05ESXpMRGtzT0RNNExEY3NNaXczTERFM0xEa3NOVGNzTWpFc01pd3hNeXd4T1RnNE1pdzVMREV6TlN3MExEWXdMRFlzTWpZc09Td3hNREUyTERRMUxERTNMRE1zTVRrM01qTXNNU3cxTXpFNUxEUXNOQ3cxTERrc055d3pMRFlzTXpFc015d3hORGtzTWl3eE5ERTRMRFE1TERVeE15dzFOQ3cxTERRNUxEa3NNQ3d4TlN3d0xESXpMRFFzTWl3eE5Dd3hNell4TERZc01pd3hOaXd6TERZc01pd3hMRElzTkN3eU1qRTBMRFlzTVRFd0xEWXNOaXc1TERjNU1qUTROeXd5TXpsZFhISmNibHh5WEc0dkx5QlVhR2x6SUdoaGN5QmhJR052YlhCc1pYaHBkSGtnYkdsdVpXRnlJSFJ2SUhSb1pTQjJZV3gxWlNCdlppQjBhR1VnWTI5a1pTNGdWR2hsWEhKY2JpOHZJR0Z6YzNWdGNIUnBiMjRnYVhNZ2RHaGhkQ0JzYjI5cmFXNW5JSFZ3SUdGemRISmhiQ0JwWkdWdWRHbG1hV1Z5SUdOb1lYSmhZM1JsY25NZ2FYTmNjbHh1THk4Z2NtRnlaUzVjY2x4dVpuVnVZM1JwYjI0Z2FYTkpia0Z6ZEhKaGJGTmxkQ2hqYjJSbExDQnpaWFFwSUh0Y2NseHVJQ0IyWVhJZ2NHOXpJRDBnTUhneE1EQXdNRnh5WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djMlYwTG14bGJtZDBhRHNnYVNBclBTQXlLU0I3WEhKY2JpQWdJQ0J3YjNNZ0t6MGdjMlYwVzJsZFhISmNiaUFnSUNCcFppQW9jRzl6SUQ0Z1kyOWtaU2tnY21WMGRYSnVJR1poYkhObFhISmNiaUFnSUNCd2IzTWdLejBnYzJWMFcya2dLeUF4WFZ4eVhHNGdJQ0FnYVdZZ0tIQnZjeUErUFNCamIyUmxLU0J5WlhSMWNtNGdkSEoxWlZ4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dUx5OGdWR1Z6ZENCM2FHVjBhR1Z5SUdFZ1oybDJaVzRnWTJoaGNtRmpkR1Z5SUdOdlpHVWdjM1JoY25SeklHRnVJR2xrWlc1MGFXWnBaWEl1WEhKY2JseHlYRzVtZFc1amRHbHZiaUJwYzBsa1pXNTBhV1pwWlhKVGRHRnlkQ2hqYjJSbExDQmhjM1J5WVd3cElIdGNjbHh1SUNCcFppQW9ZMjlrWlNBOElEWTFLU0J5WlhSMWNtNGdZMjlrWlNBOVBUMGdNelpjY2x4dUlDQnBaaUFvWTI5a1pTQThJRGt4S1NCeVpYUjFjbTRnZEhKMVpWeHlYRzRnSUdsbUlDaGpiMlJsSUR3Z09UY3BJSEpsZEhWeWJpQmpiMlJsSUQwOVBTQTVOVnh5WEc0Z0lHbG1JQ2hqYjJSbElEd2dNVEl6S1NCeVpYUjFjbTRnZEhKMVpWeHlYRzRnSUdsbUlDaGpiMlJsSUR3OUlEQjRabVptWmlrZ2NtVjBkWEp1SUdOdlpHVWdQajBnTUhoaFlTQW1KaUJ1YjI1QlUwTkpTV2xrWlc1MGFXWnBaWEpUZEdGeWRDNTBaWE4wS0ZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1kyOWtaU2twWEhKY2JpQWdhV1lnS0dGemRISmhiQ0E5UFQwZ1ptRnNjMlVwSUhKbGRIVnliaUJtWVd4elpWeHlYRzRnSUhKbGRIVnliaUJwYzBsdVFYTjBjbUZzVTJWMEtHTnZaR1VzSUdGemRISmhiRWxrWlc1MGFXWnBaWEpUZEdGeWRFTnZaR1Z6S1Z4eVhHNTlYSEpjYmx4eVhHNHZMeUJVWlhOMElIZG9aWFJvWlhJZ1lTQm5hWFpsYmlCamFHRnlZV04wWlhJZ2FYTWdjR0Z5ZENCdlppQmhiaUJwWkdWdWRHbG1hV1Z5TGx4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnYVhOSlpHVnVkR2xtYVdWeVEyaGhjaWhqYjJSbExDQmhjM1J5WVd3cElIdGNjbHh1SUNCcFppQW9ZMjlrWlNBOElEUTRLU0J5WlhSMWNtNGdZMjlrWlNBOVBUMGdNelpjY2x4dUlDQnBaaUFvWTI5a1pTQThJRFU0S1NCeVpYUjFjbTRnZEhKMVpWeHlYRzRnSUdsbUlDaGpiMlJsSUR3Z05qVXBJSEpsZEhWeWJpQm1ZV3h6WlZ4eVhHNGdJR2xtSUNoamIyUmxJRHdnT1RFcElISmxkSFZ5YmlCMGNuVmxYSEpjYmlBZ2FXWWdLR052WkdVZ1BDQTVOeWtnY21WMGRYSnVJR052WkdVZ1BUMDlJRGsxWEhKY2JpQWdhV1lnS0dOdlpHVWdQQ0F4TWpNcElISmxkSFZ5YmlCMGNuVmxYSEpjYmlBZ2FXWWdLR052WkdVZ1BEMGdNSGhtWm1abUtTQnlaWFIxY200Z1kyOWtaU0ErUFNBd2VHRmhJQ1ltSUc1dmJrRlRRMGxKYVdSbGJuUnBabWxsY2k1MFpYTjBLRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWTI5a1pTa3BYSEpjYmlBZ2FXWWdLR0Z6ZEhKaGJDQTlQVDBnWm1Gc2MyVXBJSEpsZEhWeWJpQm1ZV3h6WlZ4eVhHNGdJSEpsZEhWeWJpQnBjMGx1UVhOMGNtRnNVMlYwS0dOdlpHVXNJR0Z6ZEhKaGJFbGtaVzUwYVdacFpYSlRkR0Z5ZEVOdlpHVnpLU0I4ZkNCcGMwbHVRWE4wY21Gc1UyVjBLR052WkdVc0lHRnpkSEpoYkVsa1pXNTBhV1pwWlhKRGIyUmxjeWxjY2x4dWZWeHlYRzVjY2x4dUx5OGdJeU1nVkc5clpXNGdkSGx3WlhOY2NseHVYSEpjYmk4dklGUm9aU0JoYzNOcFoyNXRaVzUwSUc5bUlHWnBibVV0WjNKaGFXNWxaQ3dnYVc1bWIzSnRZWFJwYjI0dFkyRnljbmxwYm1jZ2RIbHdaU0J2WW1wbFkzUnpYSEpjYmk4dklHRnNiRzkzY3lCMGFHVWdkRzlyWlc1cGVtVnlJSFJ2SUhOMGIzSmxJSFJvWlNCcGJtWnZjbTFoZEdsdmJpQnBkQ0JvWVhNZ1lXSnZkWFFnWVZ4eVhHNHZMeUIwYjJ0bGJpQnBiaUJoSUhkaGVTQjBhR0YwSUdseklIWmxjbmtnWTJobFlYQWdabTl5SUhSb1pTQndZWEp6WlhJZ2RHOGdiRzl2YXlCMWNDNWNjbHh1WEhKY2JpOHZJRUZzYkNCMGIydGxiaUIwZVhCbElIWmhjbWxoWW14bGN5QnpkR0Z5ZENCM2FYUm9JR0Z1SUhWdVpHVnljMk52Y21Vc0lIUnZJRzFoYTJVZ2RHaGxiVnh5WEc0dkx5QmxZWE41SUhSdklISmxZMjluYm1sNlpTNWNjbHh1WEhKY2JpOHZJRlJvWlNCZ1ltVm1iM0psUlhod2NtQWdjSEp2Y0dWeWRIa2dhWE1nZFhObFpDQjBieUJrYVhOaGJXSnBaM1ZoZEdVZ1ltVjBkMlZsYmlCeVpXZDFiR0Z5WEhKY2JpOHZJR1Y0Y0hKbGMzTnBiMjV6SUdGdVpDQmthWFpwYzJsdmJuTXVJRWwwSUdseklITmxkQ0J2YmlCaGJHd2dkRzlyWlc0Z2RIbHdaWE1nZEdoaGRDQmpZVzVjY2x4dUx5OGdZbVVnWm05c2JHOTNaV1FnWW5rZ1lXNGdaWGh3Y21WemMybHZiaUFvZEdoMWN5d2dZU0J6YkdGemFDQmhablJsY2lCMGFHVnRJSGR2ZFd4a0lHSmxJR0ZjY2x4dUx5OGdjbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVLUzVjY2x4dUx5OWNjbHh1THk4Z1ZHaGxJR0J6ZEdGeWRITkZlSEJ5WUNCd2NtOXdaWEowZVNCcGN5QjFjMlZrSUhSdklHTm9aV05ySUdsbUlIUm9aU0IwYjJ0bGJpQmxibVJ6SUdGY2NseHVMeThnWUhscFpXeGtZQ0JsZUhCeVpYTnphVzl1TGlCSmRDQnBjeUJ6WlhRZ2IyNGdZV3hzSUhSdmEyVnVJSFI1Y0dWeklIUm9ZWFFnWldsMGFHVnlJR05oYmx4eVhHNHZMeUJrYVhKbFkzUnNlU0J6ZEdGeWRDQmhiaUJsZUhCeVpYTnphVzl1SUNoc2FXdGxJR0VnY1hWdmRHRjBhVzl1SUcxaGNtc3BJRzl5SUdOaGJseHlYRzR2THlCamIyNTBhVzUxWlNCaGJpQmxlSEJ5WlhOemFXOXVJQ2hzYVd0bElIUm9aU0JpYjJSNUlHOW1JR0VnYzNSeWFXNW5LUzVjY2x4dUx5OWNjbHh1THk4Z1lHbHpURzl2Y0dBZ2JXRnlhM01nWVNCclpYbDNiM0prSUdGeklITjBZWEowYVc1bklHRWdiRzl2Y0N3Z2QyaHBZMmdnYVhNZ2FXMXdiM0owWVc1MFhISmNiaTh2SUhSdklHdHViM2NnZDJobGJpQndZWEp6YVc1bklHRWdiR0ZpWld3c0lHbHVJRzl5WkdWeUlIUnZJR0ZzYkc5M0lHOXlJR1JwYzJGc2JHOTNYSEpjYmk4dklHTnZiblJwYm5WbElHcDFiWEJ6SUhSdklIUm9ZWFFnYkdGaVpXd3VYSEpjYmx4eVhHNTJZWElnVkc5clpXNVVlWEJsSUQwZ1puVnVZM1JwYjI0Z1ZHOXJaVzVVZVhCbEtHeGhZbVZzTENCamIyNW1LU0I3WEhKY2JpQWdhV1lnS0NCamIyNW1JRDA5UFNCMmIybGtJREFnS1NCamIyNW1JRDBnZTMwN1hISmNibHh5WEc0Z0lIUm9hWE11YkdGaVpXd2dQU0JzWVdKbGJGeHlYRzRnSUhSb2FYTXVhMlY1ZDI5eVpDQTlJR052Ym1ZdWEyVjVkMjl5WkZ4eVhHNGdJSFJvYVhNdVltVm1iM0psUlhod2NpQTlJQ0VoWTI5dVppNWlaV1p2Y21WRmVIQnlYSEpjYmlBZ2RHaHBjeTV6ZEdGeWRITkZlSEJ5SUQwZ0lTRmpiMjVtTG5OMFlYSjBjMFY0Y0hKY2NseHVJQ0IwYUdsekxtbHpURzl2Y0NBOUlDRWhZMjl1Wmk1cGMweHZiM0JjY2x4dUlDQjBhR2x6TG1selFYTnphV2R1SUQwZ0lTRmpiMjVtTG1selFYTnphV2R1WEhKY2JpQWdkR2hwY3k1d2NtVm1hWGdnUFNBaElXTnZibVl1Y0hKbFptbDRYSEpjYmlBZ2RHaHBjeTV3YjNOMFptbDRJRDBnSVNGamIyNW1MbkJ2YzNSbWFYaGNjbHh1SUNCMGFHbHpMbUpwYm05d0lEMGdZMjl1Wmk1aWFXNXZjQ0I4ZkNCdWRXeHNYSEpjYmlBZ2RHaHBjeTUxY0dSaGRHVkRiMjUwWlhoMElEMGdiblZzYkZ4eVhHNTlPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdZbWx1YjNBb2JtRnRaU3dnY0hKbFl5a2dlMXh5WEc0Z0lISmxkSFZ5YmlCdVpYY2dWRzlyWlc1VWVYQmxLRzVoYldVc0lIdGlaV1p2Y21WRmVIQnlPaUIwY25WbExDQmlhVzV2Y0RvZ2NISmxZMzBwWEhKY2JuMWNjbHh1ZG1GeUlHSmxabTl5WlVWNGNISWdQU0I3WW1WbWIzSmxSWGh3Y2pvZ2RISjFaWDA3WEhKY2JuWmhjaUJ6ZEdGeWRITkZlSEJ5SUQwZ2UzTjBZWEowYzBWNGNISTZJSFJ5ZFdWOU8xeHlYRzR2THlCTllYQWdhMlY1ZDI5eVpDQnVZVzFsY3lCMGJ5QjBiMnRsYmlCMGVYQmxjeTVjY2x4dVhISmNiblpoY2lCclpYbDNiM0prVkhsd1pYTWdQU0I3ZlZ4eVhHNWNjbHh1THk4Z1UzVmpZMmx1WTNRZ1pHVm1hVzVwZEdsdmJuTWdiMllnYTJWNWQyOXlaQ0IwYjJ0bGJpQjBlWEJsYzF4eVhHNW1kVzVqZEdsdmJpQnJkeWh1WVcxbExDQnZjSFJwYjI1ektTQjdYSEpjYmlBZ2FXWWdLQ0J2Y0hScGIyNXpJRDA5UFNCMmIybGtJREFnS1NCdmNIUnBiMjV6SUQwZ2UzMDdYSEpjYmx4eVhHNGdJRzl3ZEdsdmJuTXVhMlY1ZDI5eVpDQTlJRzVoYldWY2NseHVJQ0J5WlhSMWNtNGdhMlY1ZDI5eVpGUjVjR1Z6VzI1aGJXVmRJRDBnYm1WM0lGUnZhMlZ1Vkhsd1pTaHVZVzFsTENCdmNIUnBiMjV6S1Z4eVhHNTlYSEpjYmx4eVhHNTJZWElnZEhRZ1BTQjdYSEpjYmlBZ2JuVnRPaUJ1WlhjZ1ZHOXJaVzVVZVhCbEtGd2liblZ0WENJc0lITjBZWEowYzBWNGNISXBMRnh5WEc0Z0lISmxaMlY0Y0RvZ2JtVjNJRlJ2YTJWdVZIbHdaU2hjSW5KbFoyVjRjRndpTENCemRHRnlkSE5GZUhCeUtTeGNjbHh1SUNCemRISnBibWM2SUc1bGR5QlViMnRsYmxSNWNHVW9YQ0p6ZEhKcGJtZGNJaXdnYzNSaGNuUnpSWGh3Y2lrc1hISmNiaUFnYm1GdFpUb2dibVYzSUZSdmEyVnVWSGx3WlNoY0ltNWhiV1ZjSWl3Z2MzUmhjblJ6Ulhod2Npa3NYSEpjYmlBZ1pXOW1PaUJ1WlhjZ1ZHOXJaVzVVZVhCbEtGd2laVzltWENJcExGeHlYRzVjY2x4dUlDQXZMeUJRZFc1amRIVmhkR2x2YmlCMGIydGxiaUIwZVhCbGN5NWNjbHh1SUNCaWNtRmphMlYwVERvZ2JtVjNJRlJ2YTJWdVZIbHdaU2hjSWx0Y0lpd2dlMkpsWm05eVpVVjRjSEk2SUhSeWRXVXNJSE4wWVhKMGMwVjRjSEk2SUhSeWRXVjlLU3hjY2x4dUlDQmljbUZqYTJWMFVqb2dibVYzSUZSdmEyVnVWSGx3WlNoY0lsMWNJaWtzWEhKY2JpQWdZbkpoWTJWTU9pQnVaWGNnVkc5clpXNVVlWEJsS0Z3aWUxd2lMQ0I3WW1WbWIzSmxSWGh3Y2pvZ2RISjFaU3dnYzNSaGNuUnpSWGh3Y2pvZ2RISjFaWDBwTEZ4eVhHNGdJR0p5WVdObFVqb2dibVYzSUZSdmEyVnVWSGx3WlNoY0luMWNJaWtzWEhKY2JpQWdjR0Z5Wlc1TU9pQnVaWGNnVkc5clpXNVVlWEJsS0Z3aUtGd2lMQ0I3WW1WbWIzSmxSWGh3Y2pvZ2RISjFaU3dnYzNSaGNuUnpSWGh3Y2pvZ2RISjFaWDBwTEZ4eVhHNGdJSEJoY21WdVVqb2dibVYzSUZSdmEyVnVWSGx3WlNoY0lpbGNJaWtzWEhKY2JpQWdZMjl0YldFNklHNWxkeUJVYjJ0bGJsUjVjR1VvWENJc1hDSXNJR0psWm05eVpVVjRjSElwTEZ4eVhHNGdJSE5sYldrNklHNWxkeUJVYjJ0bGJsUjVjR1VvWENJN1hDSXNJR0psWm05eVpVVjRjSElwTEZ4eVhHNGdJR052Ykc5dU9pQnVaWGNnVkc5clpXNVVlWEJsS0Z3aU9sd2lMQ0JpWldadmNtVkZlSEJ5S1N4Y2NseHVJQ0JrYjNRNklHNWxkeUJVYjJ0bGJsUjVjR1VvWENJdVhDSXBMRnh5WEc0Z0lIRjFaWE4wYVc5dU9pQnVaWGNnVkc5clpXNVVlWEJsS0Z3aVAxd2lMQ0JpWldadmNtVkZlSEJ5S1N4Y2NseHVJQ0JoY25KdmR6b2dibVYzSUZSdmEyVnVWSGx3WlNoY0lqMCtYQ0lzSUdKbFptOXlaVVY0Y0hJcExGeHlYRzRnSUhSbGJYQnNZWFJsT2lCdVpYY2dWRzlyWlc1VWVYQmxLRndpZEdWdGNHeGhkR1ZjSWlrc1hISmNiaUFnWld4c2FYQnphWE02SUc1bGR5QlViMnRsYmxSNWNHVW9YQ0l1TGk1Y0lpd2dZbVZtYjNKbFJYaHdjaWtzWEhKY2JpQWdZbUZqYTFGMWIzUmxPaUJ1WlhjZ1ZHOXJaVzVVZVhCbEtGd2lZRndpTENCemRHRnlkSE5GZUhCeUtTeGNjbHh1SUNCa2IyeHNZWEpDY21GalpVdzZJRzVsZHlCVWIydGxibFI1Y0dVb1hDSWtlMXdpTENCN1ltVm1iM0psUlhod2Nqb2dkSEoxWlN3Z2MzUmhjblJ6Ulhod2Nqb2dkSEoxWlgwcExGeHlYRzVjY2x4dUlDQXZMeUJQY0dWeVlYUnZjbk11SUZSb1pYTmxJR05oY25KNUlITmxkbVZ5WVd3Z2EybHVaSE1nYjJZZ2NISnZjR1Z5ZEdsbGN5QjBieUJvWld4d0lIUm9aVnh5WEc0Z0lDOHZJSEJoY25ObGNpQjFjMlVnZEdobGJTQndjbTl3WlhKc2VTQW9kR2hsSUhCeVpYTmxibU5sSUc5bUlIUm9aWE5sSUhCeWIzQmxjblJwWlhNZ2FYTmNjbHh1SUNBdkx5QjNhR0YwSUdOaGRHVm5iM0pwZW1WeklIUm9aVzBnWVhNZ2IzQmxjbUYwYjNKektTNWNjbHh1SUNBdkwxeHlYRzRnSUM4dklHQmlhVzV2Y0dBc0lIZG9aVzRnY0hKbGMyVnVkQ3dnYzNCbFkybG1hV1Z6SUhSb1lYUWdkR2hwY3lCdmNHVnlZWFJ2Y2lCcGN5QmhJR0pwYm1GeWVWeHlYRzRnSUM4dklHOXdaWEpoZEc5eUxDQmhibVFnZDJsc2JDQnlaV1psY2lCMGJ5QnBkSE1nY0hKbFkyVmtaVzVqWlM1Y2NseHVJQ0F2TDF4eVhHNGdJQzh2SUdCd2NtVm1hWGhnSUdGdVpDQmdjRzl6ZEdacGVHQWdiV0Z5YXlCMGFHVWdiM0JsY21GMGIzSWdZWE1nWVNCd2NtVm1hWGdnYjNJZ2NHOXpkR1pwZUZ4eVhHNGdJQzh2SUhWdVlYSjVJRzl3WlhKaGRHOXlMbHh5WEc0Z0lDOHZYSEpjYmlBZ0x5OGdZR2x6UVhOemFXZHVZQ0J0WVhKcmN5QmhiR3dnYjJZZ1lEMWdMQ0JnS3oxZ0xDQmdMVDFnSUdWMFkyVjBaWEpoTENCM2FHbGphQ0JoWTNRZ1lYTmNjbHh1SUNBdkx5QmlhVzVoY25rZ2IzQmxjbUYwYjNKeklIZHBkR2dnWVNCMlpYSjVJR3h2ZHlCd2NtVmpaV1JsYm1ObExDQjBhR0YwSUhOb2IzVnNaQ0J5WlhOMWJIUmNjbHh1SUNBdkx5QnBiaUJCYzNOcFoyNXRaVzUwUlhod2NtVnpjMmx2YmlCdWIyUmxjeTVjY2x4dVhISmNiaUFnWlhFNklHNWxkeUJVYjJ0bGJsUjVjR1VvWENJOVhDSXNJSHRpWldadmNtVkZlSEJ5T2lCMGNuVmxMQ0JwYzBGemMybG5iam9nZEhKMVpYMHBMRnh5WEc0Z0lHRnpjMmxuYmpvZ2JtVjNJRlJ2YTJWdVZIbHdaU2hjSWw4OVhDSXNJSHRpWldadmNtVkZlSEJ5T2lCMGNuVmxMQ0JwYzBGemMybG5iam9nZEhKMVpYMHBMRnh5WEc0Z0lHbHVZMFJsWXpvZ2JtVjNJRlJ2YTJWdVZIbHdaU2hjSWlzckx5MHRYQ0lzSUh0d2NtVm1hWGc2SUhSeWRXVXNJSEJ2YzNSbWFYZzZJSFJ5ZFdVc0lITjBZWEowYzBWNGNISTZJSFJ5ZFdWOUtTeGNjbHh1SUNCd2NtVm1hWGc2SUc1bGR5QlViMnRsYmxSNWNHVW9YQ0p3Y21WbWFYaGNJaXdnZTJKbFptOXlaVVY0Y0hJNklIUnlkV1VzSUhCeVpXWnBlRG9nZEhKMVpTd2djM1JoY25SelJYaHdjam9nZEhKMVpYMHBMRnh5WEc0Z0lHeHZaMmxqWVd4UFVqb2dZbWx1YjNBb1hDSjhmRndpTENBeEtTeGNjbHh1SUNCc2IyZHBZMkZzUVU1RU9pQmlhVzV2Y0NoY0lpWW1YQ0lzSURJcExGeHlYRzRnSUdKcGRIZHBjMlZQVWpvZ1ltbHViM0FvWENKOFhDSXNJRE1wTEZ4eVhHNGdJR0pwZEhkcGMyVllUMUk2SUdKcGJtOXdLRndpWGx3aUxDQTBLU3hjY2x4dUlDQmlhWFIzYVhObFFVNUVPaUJpYVc1dmNDaGNJaVpjSWl3Z05Ta3NYSEpjYmlBZ1pYRjFZV3hwZEhrNklHSnBibTl3S0Z3aVBUMHZJVDFjSWl3Z05pa3NYSEpjYmlBZ2NtVnNZWFJwYjI1aGJEb2dZbWx1YjNBb1hDSThMejVjSWl3Z055a3NYSEpjYmlBZ1ltbDBVMmhwWm5RNklHSnBibTl3S0Z3aVBEd3ZQajVjSWl3Z09Da3NYSEpjYmlBZ2NHeDFjMDFwYmpvZ2JtVjNJRlJ2YTJWdVZIbHdaU2hjSWlzdkxWd2lMQ0I3WW1WbWIzSmxSWGh3Y2pvZ2RISjFaU3dnWW1sdWIzQTZJRGtzSUhCeVpXWnBlRG9nZEhKMVpTd2djM1JoY25SelJYaHdjam9nZEhKMVpYMHBMRnh5WEc0Z0lHMXZaSFZzYnpvZ1ltbHViM0FvWENJbFhDSXNJREV3S1N4Y2NseHVJQ0J6ZEdGeU9pQmlhVzV2Y0NoY0lpcGNJaXdnTVRBcExGeHlYRzRnSUhOc1lYTm9PaUJpYVc1dmNDaGNJaTljSWl3Z01UQXBMRnh5WEc0Z0lITjBZWEp6ZEdGeU9pQnVaWGNnVkc5clpXNVVlWEJsS0Z3aUtpcGNJaXdnZTJKbFptOXlaVVY0Y0hJNklIUnlkV1Y5S1N4Y2NseHVYSEpjYmlBZ0x5OGdTMlY1ZDI5eVpDQjBiMnRsYmlCMGVYQmxjeTVjY2x4dUlDQmZZbkpsWVdzNklHdDNLRndpWW5KbFlXdGNJaWtzWEhKY2JpQWdYMk5oYzJVNklHdDNLRndpWTJGelpWd2lMQ0JpWldadmNtVkZlSEJ5S1N4Y2NseHVJQ0JmWTJGMFkyZzZJR3QzS0Z3aVkyRjBZMmhjSWlrc1hISmNiaUFnWDJOdmJuUnBiblZsT2lCcmR5aGNJbU52Ym5ScGJuVmxYQ0lwTEZ4eVhHNGdJRjlrWldKMVoyZGxjam9nYTNjb1hDSmtaV0oxWjJkbGNsd2lLU3hjY2x4dUlDQmZaR1ZtWVhWc2REb2dhM2NvWENKa1pXWmhkV3gwWENJc0lHSmxabTl5WlVWNGNISXBMRnh5WEc0Z0lGOWtiem9nYTNjb1hDSmtiMXdpTENCN2FYTk1iMjl3T2lCMGNuVmxMQ0JpWldadmNtVkZlSEJ5T2lCMGNuVmxmU2tzWEhKY2JpQWdYMlZzYzJVNklHdDNLRndpWld4elpWd2lMQ0JpWldadmNtVkZlSEJ5S1N4Y2NseHVJQ0JmWm1sdVlXeHNlVG9nYTNjb1hDSm1hVzVoYkd4NVhDSXBMRnh5WEc0Z0lGOW1iM0k2SUd0M0tGd2labTl5WENJc0lIdHBjMHh2YjNBNklIUnlkV1Y5S1N4Y2NseHVJQ0JmWm5WdVkzUnBiMjQ2SUd0M0tGd2lablZ1WTNScGIyNWNJaXdnYzNSaGNuUnpSWGh3Y2lrc1hISmNiaUFnWDJsbU9pQnJkeWhjSW1sbVhDSXBMRnh5WEc0Z0lGOXlaWFIxY200NklHdDNLRndpY21WMGRYSnVYQ0lzSUdKbFptOXlaVVY0Y0hJcExGeHlYRzRnSUY5emQybDBZMmc2SUd0M0tGd2ljM2RwZEdOb1hDSXBMRnh5WEc0Z0lGOTBhSEp2ZHpvZ2EzY29YQ0owYUhKdmQxd2lMQ0JpWldadmNtVkZlSEJ5S1N4Y2NseHVJQ0JmZEhKNU9pQnJkeWhjSW5SeWVWd2lLU3hjY2x4dUlDQmZkbUZ5T2lCcmR5aGNJblpoY2x3aUtTeGNjbHh1SUNCZlkyOXVjM1E2SUd0M0tGd2lZMjl1YzNSY0lpa3NYSEpjYmlBZ1gzZG9hV3hsT2lCcmR5aGNJbmRvYVd4bFhDSXNJSHRwYzB4dmIzQTZJSFJ5ZFdWOUtTeGNjbHh1SUNCZmQybDBhRG9nYTNjb1hDSjNhWFJvWENJcExGeHlYRzRnSUY5dVpYYzZJR3QzS0Z3aWJtVjNYQ0lzSUh0aVpXWnZjbVZGZUhCeU9pQjBjblZsTENCemRHRnlkSE5GZUhCeU9pQjBjblZsZlNrc1hISmNiaUFnWDNSb2FYTTZJR3QzS0Z3aWRHaHBjMXdpTENCemRHRnlkSE5GZUhCeUtTeGNjbHh1SUNCZmMzVndaWEk2SUd0M0tGd2ljM1Z3WlhKY0lpd2djM1JoY25SelJYaHdjaWtzWEhKY2JpQWdYMk5zWVhOek9pQnJkeWhjSW1Oc1lYTnpYQ0lwTEZ4eVhHNGdJRjlsZUhSbGJtUnpPaUJyZHloY0ltVjRkR1Z1WkhOY0lpd2dZbVZtYjNKbFJYaHdjaWtzWEhKY2JpQWdYMlY0Y0c5eWREb2dhM2NvWENKbGVIQnZjblJjSWlrc1hISmNiaUFnWDJsdGNHOXlkRG9nYTNjb1hDSnBiWEJ2Y25SY0lpa3NYSEpjYmlBZ1gyNTFiR3c2SUd0M0tGd2liblZzYkZ3aUxDQnpkR0Z5ZEhORmVIQnlLU3hjY2x4dUlDQmZkSEoxWlRvZ2EzY29YQ0owY25WbFhDSXNJSE4wWVhKMGMwVjRjSElwTEZ4eVhHNGdJRjltWVd4elpUb2dhM2NvWENKbVlXeHpaVndpTENCemRHRnlkSE5GZUhCeUtTeGNjbHh1SUNCZmFXNDZJR3QzS0Z3aWFXNWNJaXdnZTJKbFptOXlaVVY0Y0hJNklIUnlkV1VzSUdKcGJtOXdPaUEzZlNrc1hISmNiaUFnWDJsdWMzUmhibU5sYjJZNklHdDNLRndpYVc1emRHRnVZMlZ2Wmx3aUxDQjdZbVZtYjNKbFJYaHdjam9nZEhKMVpTd2dZbWx1YjNBNklEZDlLU3hjY2x4dUlDQmZkSGx3Wlc5bU9pQnJkeWhjSW5SNWNHVnZabHdpTENCN1ltVm1iM0psUlhod2Nqb2dkSEoxWlN3Z2NISmxabWw0T2lCMGNuVmxMQ0J6ZEdGeWRITkZlSEJ5T2lCMGNuVmxmU2tzWEhKY2JpQWdYM1p2YVdRNklHdDNLRndpZG05cFpGd2lMQ0I3WW1WbWIzSmxSWGh3Y2pvZ2RISjFaU3dnY0hKbFptbDRPaUIwY25WbExDQnpkR0Z5ZEhORmVIQnlPaUIwY25WbGZTa3NYSEpjYmlBZ1gyUmxiR1YwWlRvZ2EzY29YQ0prWld4bGRHVmNJaXdnZTJKbFptOXlaVVY0Y0hJNklIUnlkV1VzSUhCeVpXWnBlRG9nZEhKMVpTd2djM1JoY25SelJYaHdjam9nZEhKMVpYMHBYSEpjYm4xY2NseHVYSEpjYmk4dklFMWhkR05vWlhNZ1lTQjNhRzlzWlNCc2FXNWxJR0p5WldGcklDaDNhR1Z5WlNCRFVreEdJR2x6SUdOdmJuTnBaR1Z5WldRZ1lTQnphVzVuYkdWY2NseHVMeThnYkdsdVpTQmljbVZoYXlrdUlGVnpaV1FnZEc4Z1kyOTFiblFnYkdsdVpYTXVYSEpjYmx4eVhHNTJZWElnYkdsdVpVSnlaV0ZySUQwZ0wxeGNjbHhjYmo5OFhGeHVmRnhjZFRJd01qaDhYRngxTWpBeU9TOWNjbHh1ZG1GeUlHeHBibVZDY21WaGEwY2dQU0J1WlhjZ1VtVm5SWGh3S0d4cGJtVkNjbVZoYXk1emIzVnlZMlVzSUZ3aVoxd2lLVnh5WEc1Y2NseHVablZ1WTNScGIyNGdhWE5PWlhkTWFXNWxLR052WkdVcElIdGNjbHh1SUNCeVpYUjFjbTRnWTI5a1pTQTlQVDBnTVRBZ2ZId2dZMjlrWlNBOVBUMGdNVE1nZkh3Z1kyOWtaU0E5UFQwZ01IZ3lNREk0SUh4OElHTnZaR1VnUFQwZ01IZ3lNREk1WEhKY2JuMWNjbHh1WEhKY2JuWmhjaUJ1YjI1QlUwTkpTWGRvYVhSbGMzQmhZMlVnUFNBdlcxeGNkVEUyT0RCY1hIVXhPREJsWEZ4MU1qQXdNQzFjWEhVeU1EQmhYRngxTWpBeVpseGNkVEl3TldaY1hIVXpNREF3WEZ4MVptVm1abDB2WEhKY2JseHlYRzUyWVhJZ2MydHBjRmRvYVhSbFUzQmhZMlVnUFNBdktEODZYRnh6ZkZ4Y0wxeGNMeTRxZkZ4Y0wxeGNLbHRlWFNvL1hGd3FYRnd2S1NvdloxeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVNodlltb3BJSHRjY2x4dUlDQnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRzlpYWlrZ1BUMDlJRndpVzI5aWFtVmpkQ0JCY25KaGVWMWNJbHh5WEc1OVhISmNibHh5WEc0dkx5QkRhR1ZqYTNNZ2FXWWdZVzRnYjJKcVpXTjBJR2hoY3lCaElIQnliM0JsY25SNUxseHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2FHRnpLRzlpYWl3Z2NISnZjRTVoYldVcElIdGNjbHh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2djSEp2Y0U1aGJXVXBYSEpjYm4xY2NseHVYSEpjYmk4dklGUm9aWE5sSUdGeVpTQjFjMlZrSUhkb1pXNGdZRzl3ZEdsdmJuTXViRzlqWVhScGIyNXpZQ0JwY3lCdmJpd2dabTl5SUhSb1pWeHlYRzR2THlCZ2MzUmhjblJNYjJOZ0lHRnVaQ0JnWlc1a1RHOWpZQ0J3Y205d1pYSjBhV1Z6TGx4eVhHNWNjbHh1ZG1GeUlGQnZjMmwwYVc5dUlEMGdablZ1WTNScGIyNGdVRzl6YVhScGIyNG9iR2x1WlN3Z1kyOXNLU0I3WEhKY2JpQWdkR2hwY3k1c2FXNWxJRDBnYkdsdVpWeHlYRzRnSUhSb2FYTXVZMjlzZFcxdUlEMGdZMjlzWEhKY2JuMDdYSEpjYmx4eVhHNVFiM05wZEdsdmJpNXdjbTkwYjNSNWNHVXViMlptYzJWMElEMGdablZ1WTNScGIyNGdiMlptYzJWMElDaHVLU0I3WEhKY2JpQWdjbVYwZFhKdUlHNWxkeUJRYjNOcGRHbHZiaWgwYUdsekxteHBibVVzSUhSb2FYTXVZMjlzZFcxdUlDc2diaWxjY2x4dWZUdGNjbHh1WEhKY2JuWmhjaUJUYjNWeVkyVk1iMk5oZEdsdmJpQTlJR1oxYm1OMGFXOXVJRk52ZFhKalpVeHZZMkYwYVc5dUtIQXNJSE4wWVhKMExDQmxibVFwSUh0Y2NseHVJQ0IwYUdsekxuTjBZWEowSUQwZ2MzUmhjblJjY2x4dUlDQjBhR2x6TG1WdVpDQTlJR1Z1WkZ4eVhHNGdJR2xtSUNod0xuTnZkWEpqWlVacGJHVWdJVDA5SUc1MWJHd3BJSFJvYVhNdWMyOTFjbU5sSUQwZ2NDNXpiM1Z5WTJWR2FXeGxYSEpjYm4wN1hISmNibHh5WEc0dkx5QlVhR1VnWUdkbGRFeHBibVZKYm1adllDQm1kVzVqZEdsdmJpQnBjeUJ0YjNOMGJIa2dkWE5sWm5Wc0lIZG9aVzRnZEdobFhISmNiaTh2SUdCc2IyTmhkR2x2Ym5OZ0lHOXdkR2x2YmlCcGN5QnZabVlnS0dadmNpQndaWEptYjNKdFlXNWpaU0J5WldGemIyNXpLU0JoYm1RZ2VXOTFYSEpjYmk4dklIZGhiblFnZEc4Z1ptbHVaQ0IwYUdVZ2JHbHVaUzlqYjJ4MWJXNGdjRzl6YVhScGIyNGdabTl5SUdFZ1oybDJaVzRnWTJoaGNtRmpkR1Z5WEhKY2JpOHZJRzltWm5ObGRDNGdZR2x1Y0hWMFlDQnphRzkxYkdRZ1ltVWdkR2hsSUdOdlpHVWdjM1J5YVc1bklIUm9ZWFFnZEdobElHOW1abk5sZENCeVpXWmxjbk5jY2x4dUx5OGdhVzUwYnk1Y2NseHVYSEpjYm1aMWJtTjBhVzl1SUdkbGRFeHBibVZKYm1adktHbHVjSFYwTENCdlptWnpaWFFwSUh0Y2NseHVJQ0JtYjNJZ0tIWmhjaUJzYVc1bElEMGdNU3dnWTNWeUlEMGdNRHM3S1NCN1hISmNiaUFnSUNCc2FXNWxRbkpsWVd0SExteGhjM1JKYm1SbGVDQTlJR04xY2x4eVhHNGdJQ0FnZG1GeUlHMWhkR05vSUQwZ2JHbHVaVUp5WldGclJ5NWxlR1ZqS0dsdWNIVjBLVnh5WEc0Z0lDQWdhV1lnS0cxaGRHTm9JQ1ltSUcxaGRHTm9MbWx1WkdWNElEd2diMlptYzJWMEtTQjdYSEpjYmlBZ0lDQWdJQ3NyYkdsdVpWeHlYRzRnSUNBZ0lDQmpkWElnUFNCdFlYUmphQzVwYm1SbGVDQXJJRzFoZEdOb1d6QmRMbXhsYm1kMGFGeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFiM05wZEdsdmJpaHNhVzVsTENCdlptWnpaWFFnTFNCamRYSXBYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzR2THlCQklITmxZMjl1WkNCdmNIUnBiMjVoYkNCaGNtZDFiV1Z1ZENCallXNGdZbVVnWjJsMlpXNGdkRzhnWm5WeWRHaGxjaUJqYjI1bWFXZDFjbVZjY2x4dUx5OGdkR2hsSUhCaGNuTmxjaUJ3Y205alpYTnpMaUJVYUdWelpTQnZjSFJwYjI1eklHRnlaU0J5WldOdloyNXBlbVZrT2x4eVhHNWNjbHh1ZG1GeUlHUmxabUYxYkhSUGNIUnBiMjV6SUQwZ2UxeHlYRzRnSUM4dklHQmxZMjFoVm1WeWMybHZibUFnYVc1a2FXTmhkR1Z6SUhSb1pTQkZRMDFCVTJOeWFYQjBJSFpsY25OcGIyNGdkRzhnY0dGeWMyVXVJRTExYzNSY2NseHVJQ0F2THlCaVpTQmxhWFJvWlhJZ015d2diM0lnTlN3Z2IzSWdOaTRnVkdocGN5QnBibVpzZFdWdVkyVnpJSE4xY0hCdmNuUWdabTl5SUhOMGNtbGpkRnh5WEc0Z0lDOHZJRzF2WkdVc0lIUm9aU0J6WlhRZ2IyWWdjbVZ6WlhKMlpXUWdkMjl5WkhNc0lITjFjSEJ2Y25RZ1ptOXlJR2RsZEhSbGNuTWdZVzVrWEhKY2JpQWdMeThnYzJWMGRHVnljeUJoYm1RZ2IzUm9aWElnWm1WaGRIVnlaWE11SUZSb1pTQmtaV1poZFd4MElHbHpJRFl1WEhKY2JpQWdaV050WVZabGNuTnBiMjQ2SURZc1hISmNiaUFnTHk4Z1UyOTFjbU5sSUhSNWNHVWdLRndpYzJOeWFYQjBYQ0lnYjNJZ1hDSnRiMlIxYkdWY0lpa2dabTl5SUdScFptWmxjbVZ1ZENCelpXMWhiblJwWTNOY2NseHVJQ0J6YjNWeVkyVlVlWEJsT2lCY0luTmpjbWx3ZEZ3aUxGeHlYRzRnSUM4dklHQnZia2x1YzJWeWRHVmtVMlZ0YVdOdmJHOXVZQ0JqWVc0Z1ltVWdZU0JqWVd4c1ltRmpheUIwYUdGMElIZHBiR3dnWW1VZ1kyRnNiR1ZrWEhKY2JpQWdMeThnZDJobGJpQmhJSE5sYldsamIyeHZiaUJwY3lCaGRYUnZiV0YwYVdOaGJHeDVJR2x1YzJWeWRHVmtMaUJKZENCM2FXeHNJR0psSUhCaGMzTmxaRnh5WEc0Z0lDOHZJSFJvSUhCdmMybDBhVzl1SUc5bUlIUm9aU0JqYjIxdFlTQmhjeUJoYmlCdlptWnpaWFFzSUdGdVpDQnBaaUJnYkc5allYUnBiMjV6WUNCcGMxeHlYRzRnSUM4dklHVnVZV0pzWldRc0lHbDBJR2x6SUdkcGRtVnVJSFJvWlNCc2IyTmhkR2x2YmlCaGN5QmhJR0I3YkdsdVpTd2dZMjlzZFcxdWZXQWdiMkpxWldOMFhISmNiaUFnTHk4Z1lYTWdjMlZqYjI1a0lHRnlaM1Z0Wlc1MExseHlYRzRnSUc5dVNXNXpaWEowWldSVFpXMXBZMjlzYjI0NklHNTFiR3dzWEhKY2JpQWdMeThnWUc5dVZISmhhV3hwYm1kRGIyMXRZV0FnYVhNZ2MybHRhV3hoY2lCMGJ5QmdiMjVKYm5ObGNuUmxaRk5sYldsamIyeHZibUFzSUdKMWRDQm1iM0pjY2x4dUlDQXZMeUIwY21GcGJHbHVaeUJqYjIxdFlYTXVYSEpjYmlBZ2IyNVVjbUZwYkdsdVowTnZiVzFoT2lCdWRXeHNMRnh5WEc0Z0lDOHZJRUo1SUdSbFptRjFiSFFzSUhKbGMyVnlkbVZrSUhkdmNtUnpJR0Z5WlNCdmJteDVJR1Z1Wm05eVkyVmtJR2xtSUdWamJXRldaWEp6YVc5dUlENDlJRFV1WEhKY2JpQWdMeThnVTJWMElHQmhiR3h2ZDFKbGMyVnlkbVZrWUNCMGJ5QmhJR0p2YjJ4bFlXNGdkbUZzZFdVZ2RHOGdaWGh3YkdsamFYUnNlU0IwZFhKdUlIUm9hWE1nYjI1Y2NseHVJQ0F2THlCaGJpQnZabVl1SUZkb1pXNGdkR2hwY3lCdmNIUnBiMjRnYUdGeklIUm9aU0IyWVd4MVpTQmNJbTVsZG1WeVhDSXNJSEpsYzJWeWRtVmtJSGR2Y21SelhISmNiaUFnTHk4Z1lXNWtJR3RsZVhkdmNtUnpJR05oYmlCaGJITnZJRzV2ZENCaVpTQjFjMlZrSUdGeklIQnliM0JsY25SNUlHNWhiV1Z6TGx4eVhHNGdJR0ZzYkc5M1VtVnpaWEoyWldRNklHNTFiR3dzWEhKY2JpQWdMeThnVjJobGJpQmxibUZpYkdWa0xDQmhJSEpsZEhWeWJpQmhkQ0IwYUdVZ2RHOXdJR3hsZG1Wc0lHbHpJRzV2ZENCamIyNXphV1JsY21Wa0lHRnVYSEpjYmlBZ0x5OGdaWEp5YjNJdVhISmNiaUFnWVd4c2IzZFNaWFIxY201UGRYUnphV1JsUm5WdVkzUnBiMjQ2SUdaaGJITmxMRnh5WEc0Z0lDOHZJRmRvWlc0Z1pXNWhZbXhsWkN3Z2FXMXdiM0owTDJWNGNHOXlkQ0J6ZEdGMFpXMWxiblJ6SUdGeVpTQnViM1FnWTI5dWMzUnlZV2x1WldRZ2RHOWNjbHh1SUNBdkx5QmhjSEJsWVhKcGJtY2dZWFFnZEdobElIUnZjQ0J2WmlCMGFHVWdjSEp2WjNKaGJTNWNjbHh1SUNCaGJHeHZkMGx0Y0c5eWRFVjRjRzl5ZEVWMlpYSjVkMmhsY21VNklHWmhiSE5sTEZ4eVhHNGdJQzh2SUZkb1pXNGdaVzVoWW14bFpDd2dhR0Z6YUdKaGJtY2daR2x5WldOMGFYWmxJR2x1SUhSb1pTQmlaV2RwYm01cGJtY2diMllnWm1sc1pWeHlYRzRnSUM4dklHbHpJR0ZzYkc5M1pXUWdZVzVrSUhSeVpXRjBaV1FnWVhNZ1lTQnNhVzVsSUdOdmJXMWxiblF1WEhKY2JpQWdZV3hzYjNkSVlYTm9RbUZ1WnpvZ1ptRnNjMlVzWEhKY2JpQWdMeThnVjJobGJpQmdiRzlqWVhScGIyNXpZQ0JwY3lCdmJpd2dZR3h2WTJBZ2NISnZjR1Z5ZEdsbGN5Qm9iMnhrYVc1bklHOWlhbVZqZEhNZ2QybDBhRnh5WEc0Z0lDOHZJR0J6ZEdGeWRHQWdZVzVrSUdCbGJtUmdJSEJ5YjNCbGNuUnBaWE1nYVc0Z1lIdHNhVzVsTENCamIyeDFiVzU5WUNCbWIzSnRJQ2gzYVhSb1hISmNiaUFnTHk4Z2JHbHVaU0JpWldsdVp5QXhMV0poYzJWa0lHRnVaQ0JqYjJ4MWJXNGdNQzFpWVhObFpDa2dkMmxzYkNCaVpTQmhkSFJoWTJobFpDQjBieUIwYUdWY2NseHVJQ0F2THlCdWIyUmxjeTVjY2x4dUlDQnNiMk5oZEdsdmJuTTZJR1poYkhObExGeHlYRzRnSUM4dklFRWdablZ1WTNScGIyNGdZMkZ1SUdKbElIQmhjM05sWkNCaGN5QmdiMjVVYjJ0bGJtQWdiM0IwYVc5dUxDQjNhR2xqYUNCM2FXeHNYSEpjYmlBZ0x5OGdZMkYxYzJVZ1FXTnZjbTRnZEc4Z1kyRnNiQ0IwYUdGMElHWjFibU4wYVc5dUlIZHBkR2dnYjJKcVpXTjBJR2x1SUhSb1pTQnpZVzFsWEhKY2JpQWdMeThnWm05eWJXRjBJR0Z6SUhSdmEyVnVjeUJ5WlhSMWNtNWxaQ0JtY205dElHQjBiMnRsYm1sNlpYSW9LUzVuWlhSVWIydGxiaWdwWUM0Z1RtOTBaVnh5WEc0Z0lDOHZJSFJvWVhRZ2VXOTFJR0Z5WlNCdWIzUWdZV3hzYjNkbFpDQjBieUJqWVd4c0lIUm9aU0J3WVhKelpYSWdabkp2YlNCMGFHVmNjbHh1SUNBdkx5QmpZV3hzWW1GamErS0FsSFJvWVhRZ2QybHNiQ0JqYjNKeWRYQjBJR2wwY3lCcGJuUmxjbTVoYkNCemRHRjBaUzVjY2x4dUlDQnZibFJ2YTJWdU9pQnVkV3hzTEZ4eVhHNGdJQzh2SUVFZ1puVnVZM1JwYjI0Z1kyRnVJR0psSUhCaGMzTmxaQ0JoY3lCZ2IyNURiMjF0Wlc1MFlDQnZjSFJwYjI0c0lIZG9hV05vSUhkcGJHeGNjbHh1SUNBdkx5QmpZWFZ6WlNCQlkyOXliaUIwYnlCallXeHNJSFJvWVhRZ1puVnVZM1JwYjI0Z2QybDBhQ0JnS0dKc2IyTnJMQ0IwWlhoMExDQnpkR0Z5ZEN4Y2NseHVJQ0F2THlCbGJtUXBZQ0J3WVhKaGJXVjBaWEp6SUhkb1pXNWxkbVZ5SUdFZ1kyOXRiV1Z1ZENCcGN5QnphMmx3Y0dWa0xpQmdZbXh2WTJ0Z0lHbHpJR0ZjY2x4dUlDQXZMeUJpYjI5c1pXRnVJR2x1WkdsallYUnBibWNnZDJobGRHaGxjaUIwYUdseklHbHpJR0VnWW14dlkyc2dLR0F2S2lBcUwyQXBJR052YlcxbGJuUXNYSEpjYmlBZ0x5OGdZSFJsZUhSZ0lHbHpJSFJvWlNCamIyNTBaVzUwSUc5bUlIUm9aU0JqYjIxdFpXNTBMQ0JoYm1RZ1lITjBZWEowWUNCaGJtUWdZR1Z1WkdBZ1lYSmxYSEpjYmlBZ0x5OGdZMmhoY21GamRHVnlJRzltWm5ObGRITWdkR2hoZENCa1pXNXZkR1VnZEdobElITjBZWEowSUdGdVpDQmxibVFnYjJZZ2RHaGxJR052YlcxbGJuUXVYSEpjYmlBZ0x5OGdWMmhsYmlCMGFHVWdZR3h2WTJGMGFXOXVjMkFnYjNCMGFXOXVJR2x6SUc5dUxDQjBkMjhnYlc5eVpTQndZWEpoYldWMFpYSnpJR0Z5WlZ4eVhHNGdJQzh2SUhCaGMzTmxaQ3dnZEdobElHWjFiR3dnWUh0c2FXNWxMQ0JqYjJ4MWJXNTlZQ0JzYjJOaGRHbHZibk1nYjJZZ2RHaGxJSE4wWVhKMElHRnVaRnh5WEc0Z0lDOHZJR1Z1WkNCdlppQjBhR1VnWTI5dGJXVnVkSE11SUU1dmRHVWdkR2hoZENCNWIzVWdZWEpsSUc1dmRDQmhiR3h2ZDJWa0lIUnZJR05oYkd3Z2RHaGxYSEpjYmlBZ0x5OGdjR0Z5YzJWeUlHWnliMjBnZEdobElHTmhiR3hpWVdOcjRvQ1VkR2hoZENCM2FXeHNJR052Y25KMWNIUWdhWFJ6SUdsdWRHVnlibUZzSUhOMFlYUmxMbHh5WEc0Z0lHOXVRMjl0YldWdWREb2diblZzYkN4Y2NseHVJQ0F2THlCT2IyUmxjeUJvWVhabElIUm9aV2x5SUhOMFlYSjBJR0Z1WkNCbGJtUWdZMmhoY21GamRHVnljeUJ2Wm1aelpYUnpJSEpsWTI5eVpHVmtJR2x1WEhKY2JpQWdMeThnWUhOMFlYSjBZQ0JoYm1RZ1lHVnVaR0FnY0hKdmNHVnlkR2xsY3lBb1pHbHlaV04wYkhrZ2IyNGdkR2hsSUc1dlpHVXNJSEpoZEdobGNpQjBhR0Z1WEhKY2JpQWdMeThnZEdobElHQnNiMk5nSUc5aWFtVmpkQ3dnZDJocFkyZ2dhRzlzWkhNZ2JHbHVaUzlqYjJ4MWJXNGdaR0YwWVM0Z1ZHOGdZV3h6YnlCaFpHUWdZVnh5WEc0Z0lDOHZJRnR6WlcxcExYTjBZVzVrWVhKa2FYcGxaRjFiY21GdVoyVmRJR0J5WVc1blpXQWdjSEp2Y0dWeWRIa2dhRzlzWkdsdVp5QmhJR0JiYzNSaGNuUXNYSEpjYmlBZ0x5OGdaVzVrWFdBZ1lYSnlZWGtnZDJsMGFDQjBhR1VnYzJGdFpTQnVkVzFpWlhKekxDQnpaWFFnZEdobElHQnlZVzVuWlhOZ0lHOXdkR2x2YmlCMGIxeHlYRzRnSUM4dklHQjBjblZsWUM1Y2NseHVJQ0F2TDF4eVhHNGdJQzh2SUZ0eVlXNW5aVjA2SUdoMGRIQnpPaTh2WW5WbmVtbHNiR0V1Ylc5NmFXeHNZUzV2Y21jdmMyaHZkMTlpZFdjdVkyZHBQMmxrUFRjME5UWTNPRnh5WEc0Z0lISmhibWRsY3pvZ1ptRnNjMlVzWEhKY2JpQWdMeThnU1hRZ2FYTWdjRzl6YzJsaWJHVWdkRzhnY0dGeWMyVWdiWFZzZEdsd2JHVWdabWxzWlhNZ2FXNTBieUJoSUhOcGJtZHNaU0JCVTFRZ1lubGNjbHh1SUNBdkx5QndZWE56YVc1bklIUm9aU0IwY21WbElIQnliMlIxWTJWa0lHSjVJSEJoY25OcGJtY2dkR2hsSUdacGNuTjBJR1pwYkdVZ1lYTmNjbHh1SUNBdkx5QmdjSEp2WjNKaGJXQWdiM0IwYVc5dUlHbHVJSE4xWW5ObGNYVmxiblFnY0dGeWMyVnpMaUJVYUdseklIZHBiR3dnWVdSa0lIUm9aVnh5WEc0Z0lDOHZJSFJ2Y0d4bGRtVnNJR1p2Y20xeklHOW1JSFJvWlNCd1lYSnpaV1FnWm1sc1pTQjBieUIwYUdVZ1lGQnliMmR5WVcxZ0lDaDBiM0FwSUc1dlpHVmNjbHh1SUNBdkx5QnZaaUJoYmlCbGVHbHpkR2x1WnlCd1lYSnpaU0IwY21WbExseHlYRzRnSUhCeWIyZHlZVzA2SUc1MWJHd3NYSEpjYmlBZ0x5OGdWMmhsYmlCZ2JHOWpZWFJwYjI1ellDQnBjeUJ2Yml3Z2VXOTFJR05oYmlCd1lYTnpJSFJvYVhNZ2RHOGdjbVZqYjNKa0lIUm9aU0J6YjNWeVkyVmNjbHh1SUNBdkx5Qm1hV3hsSUdsdUlHVjJaWEo1SUc1dlpHVW5jeUJnYkc5allDQnZZbXBsWTNRdVhISmNiaUFnYzI5MWNtTmxSbWxzWlRvZ2JuVnNiQ3hjY2x4dUlDQXZMeUJVYUdseklIWmhiSFZsTENCcFppQm5hWFpsYml3Z2FYTWdjM1J2Y21Wa0lHbHVJR1YyWlhKNUlHNXZaR1VzSUhkb1pYUm9aWEpjY2x4dUlDQXZMeUJnYkc5allYUnBiMjV6WUNCcGN5QnZiaUJ2Y2lCdlptWXVYSEpjYmlBZ1pHbHlaV04wVTI5MWNtTmxSbWxzWlRvZ2JuVnNiQ3hjY2x4dUlDQXZMeUJYYUdWdUlHVnVZV0pzWldRc0lIQmhjbVZ1ZEdobGMybDZaV1FnWlhod2NtVnpjMmx2Ym5NZ1lYSmxJSEpsY0hKbGMyVnVkR1ZrSUdKNVhISmNiaUFnTHk4Z0tHNXZiaTF6ZEdGdVpHRnlaQ2tnVUdGeVpXNTBhR1Z6YVhwbFpFVjRjSEpsYzNOcGIyNGdibTlrWlhOY2NseHVJQ0J3Y21WelpYSjJaVkJoY21WdWN6b2dabUZzYzJVc1hISmNiaUFnY0d4MVoybHVjem9nZTMxY2NseHVmVnh5WEc1Y2NseHVMeThnU1c1MFpYSndjbVYwSUdGdVpDQmtaV1poZFd4MElHRnVJRzl3ZEdsdmJuTWdiMkpxWldOMFhISmNibHh5WEc1bWRXNWpkR2x2YmlCblpYUlBjSFJwYjI1ektHOXdkSE1wSUh0Y2NseHVJQ0IyWVhJZ2IzQjBhVzl1Y3lBOUlIdDlYSEpjYmlBZ1ptOXlJQ2gyWVhJZ2IzQjBJR2x1SUdSbFptRjFiSFJQY0hScGIyNXpLVnh5WEc0Z0lDQWdiM0IwYVc5dWMxdHZjSFJkSUQwZ2IzQjBjeUFtSmlCb1lYTW9iM0IwY3l3Z2IzQjBLU0EvSUc5d2RITmJiM0IwWFNBNklHUmxabUYxYkhSUGNIUnBiMjV6VzI5d2RGMWNjbHh1SUNCcFppQW9iM0IwYVc5dWN5NWhiR3h2ZDFKbGMyVnlkbVZrSUQwOUlHNTFiR3dwWEhKY2JpQWdJQ0J2Y0hScGIyNXpMbUZzYkc5M1VtVnpaWEoyWldRZ1BTQnZjSFJwYjI1ekxtVmpiV0ZXWlhKemFXOXVJRHdnTlZ4eVhHNWNjbHh1SUNCcFppQW9hWE5CY25KaGVTaHZjSFJwYjI1ekxtOXVWRzlyWlc0cEtTQjdYSEpjYmlBZ0lDQjJZWElnZEc5clpXNXpJRDBnYjNCMGFXOXVjeTV2YmxSdmEyVnVYSEpjYmlBZ0lDQnZjSFJwYjI1ekxtOXVWRzlyWlc0Z1BTQm1kVzVqZEdsdmJpQW9kRzlyWlc0cElIc2djbVYwZFhKdUlIUnZhMlZ1Y3k1d2RYTm9LSFJ2YTJWdUtUc2dmVnh5WEc0Z0lIMWNjbHh1SUNCcFppQW9hWE5CY25KaGVTaHZjSFJwYjI1ekxtOXVRMjl0YldWdWRDa3BYSEpjYmlBZ0lDQnZjSFJwYjI1ekxtOXVRMjl0YldWdWRDQTlJSEIxYzJoRGIyMXRaVzUwS0c5d2RHbHZibk1zSUc5d2RHbHZibk11YjI1RGIyMXRaVzUwS1Z4eVhHNWNjbHh1SUNCeVpYUjFjbTRnYjNCMGFXOXVjMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCd2RYTm9RMjl0YldWdWRDaHZjSFJwYjI1ekxDQmhjbkpoZVNrZ2UxeHlYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvWW14dlkyc3NJSFJsZUhRc0lITjBZWEowTENCbGJtUXNJSE4wWVhKMFRHOWpMQ0JsYm1STWIyTXBJSHRjY2x4dUlDQWdJSFpoY2lCamIyMXRaVzUwSUQwZ2UxeHlYRzRnSUNBZ0lDQjBlWEJsT2lCaWJHOWpheUEvSUNkQ2JHOWpheWNnT2lBblRHbHVaU2NzWEhKY2JpQWdJQ0FnSUhaaGJIVmxPaUIwWlhoMExGeHlYRzRnSUNBZ0lDQnpkR0Z5ZERvZ2MzUmhjblFzWEhKY2JpQWdJQ0FnSUdWdVpEb2daVzVrWEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1c2IyTmhkR2x2Ym5NcFhISmNiaUFnSUNBZ0lHTnZiVzFsYm5RdWJHOWpJRDBnYm1WM0lGTnZkWEpqWlV4dlkyRjBhVzl1S0hSb2FYTXNJSE4wWVhKMFRHOWpMQ0JsYm1STWIyTXBYSEpjYmlBZ0lDQnBaaUFvYjNCMGFXOXVjeTV5WVc1blpYTXBYSEpjYmlBZ0lDQWdJR052YlcxbGJuUXVjbUZ1WjJVZ1BTQmJjM1JoY25Rc0lHVnVaRjFjY2x4dUlDQWdJR0Z5Y21GNUxuQjFjMmdvWTI5dGJXVnVkQ2xjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYmk4dklGSmxaMmx6ZEdWeVpXUWdjR3gxWjJsdWMxeHlYRzUyWVhJZ2NHeDFaMmx1Y3lBOUlIdDlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnJaWGwzYjNKa1VtVm5aWGh3S0hkdmNtUnpLU0I3WEhKY2JpQWdjbVYwZFhKdUlHNWxkeUJTWldkRmVIQW9YQ0plS0Z3aUlDc2dkMjl5WkhNdWNtVndiR0ZqWlNndklDOW5MQ0JjSW54Y0lpa2dLeUJjSWlra1hDSXBYSEpjYm4xY2NseHVYSEpjYm5aaGNpQlFZWEp6WlhJZ1BTQm1kVzVqZEdsdmJpQlFZWEp6WlhJb2IzQjBhVzl1Y3l3Z2FXNXdkWFFzSUhOMFlYSjBVRzl6S1NCN1hISmNiaUFnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QTlJR2RsZEU5d2RHbHZibk1vYjNCMGFXOXVjeWxjY2x4dUlDQjBhR2x6TG5OdmRYSmpaVVpwYkdVZ1BTQnZjSFJwYjI1ekxuTnZkWEpqWlVacGJHVmNjbHh1SUNCMGFHbHpMbXRsZVhkdmNtUnpJRDBnYTJWNWQyOXlaRkpsWjJWNGNDaHJaWGwzYjNKa2MxdHZjSFJwYjI1ekxtVmpiV0ZXWlhKemFXOXVJRDQ5SURZZ1B5QTJJRG9nTlYwcFhISmNiaUFnZG1GeUlISmxjMlZ5ZG1Wa0lEMGdiM0IwYVc5dWN5NWhiR3h2ZDFKbGMyVnlkbVZrSUQ4Z1hDSmNJaUE2WEhKY2JpQWdJQ0FnSUhKbGMyVnlkbVZrVjI5eVpITmJiM0IwYVc5dWN5NWxZMjFoVm1WeWMybHZibDBnS3lBb2IzQjBhVzl1Y3k1emIzVnlZMlZVZVhCbElEMDlJRndpYlc5a2RXeGxYQ0lnUHlCY0lpQmhkMkZwZEZ3aUlEb2dYQ0pjSWlsY2NseHVJQ0IwYUdsekxuSmxjMlZ5ZG1Wa1YyOXlaSE1nUFNCclpYbDNiM0prVW1WblpYaHdLSEpsYzJWeWRtVmtLVnh5WEc0Z0lIWmhjaUJ5WlhObGNuWmxaRk4wY21samRDQTlJQ2h5WlhObGNuWmxaQ0EvSUhKbGMyVnlkbVZrSUNzZ1hDSWdYQ0lnT2lCY0lsd2lLU0FySUhKbGMyVnlkbVZrVjI5eVpITXVjM1J5YVdOMFhISmNiaUFnZEdocGN5NXlaWE5sY25abFpGZHZjbVJ6VTNSeWFXTjBJRDBnYTJWNWQyOXlaRkpsWjJWNGNDaHlaWE5sY25abFpGTjBjbWxqZENsY2NseHVJQ0IwYUdsekxuSmxjMlZ5ZG1Wa1YyOXlaSE5UZEhKcFkzUkNhVzVrSUQwZ2EyVjVkMjl5WkZKbFoyVjRjQ2h5WlhObGNuWmxaRk4wY21samRDQXJJRndpSUZ3aUlDc2djbVZ6WlhKMlpXUlhiM0prY3k1emRISnBZM1JDYVc1a0tWeHlYRzRnSUhSb2FYTXVhVzV3ZFhRZ1BTQlRkSEpwYm1jb2FXNXdkWFFwWEhKY2JseHlYRzRnSUM4dklGVnpaV1FnZEc4Z2MybG5ibUZzSUhSdklHTmhiR3hsY25NZ2IyWWdZSEpsWVdSWGIzSmtNV0FnZDJobGRHaGxjaUIwYUdVZ2QyOXlaRnh5WEc0Z0lDOHZJR052Ym5SaGFXNWxaQ0JoYm5rZ1pYTmpZWEJsSUhObGNYVmxibU5sY3k0Z1ZHaHBjeUJwY3lCdVpXVmtaV1FnWW1WallYVnpaU0IzYjNKa2N5QjNhWFJvWEhKY2JpQWdMeThnWlhOallYQmxJSE5sY1hWbGJtTmxjeUJ0ZFhOMElHNXZkQ0JpWlNCcGJuUmxjbkJ5WlhSbFpDQmhjeUJyWlhsM2IzSmtjeTVjY2x4dUlDQjBhR2x6TG1OdmJuUmhhVzV6UlhOaklEMGdabUZzYzJWY2NseHVYSEpjYmlBZ0x5OGdURzloWkNCd2JIVm5hVzV6WEhKY2JpQWdkR2hwY3k1c2IyRmtVR3gxWjJsdWN5aHZjSFJwYjI1ekxuQnNkV2RwYm5NcFhISmNibHh5WEc0Z0lDOHZJRk5sZENCMWNDQjBiMnRsYmlCemRHRjBaVnh5WEc1Y2NseHVJQ0F2THlCVWFHVWdZM1Z5Y21WdWRDQndiM05wZEdsdmJpQnZaaUIwYUdVZ2RHOXJaVzVwZW1WeUlHbHVJSFJvWlNCcGJuQjFkQzVjY2x4dUlDQnBaaUFvYzNSaGNuUlFiM01wSUh0Y2NseHVJQ0FnSUhSb2FYTXVjRzl6SUQwZ2MzUmhjblJRYjNOY2NseHVJQ0FnSUhSb2FYTXViR2x1WlZOMFlYSjBJRDBnVFdGMGFDNXRZWGdvTUN3Z2RHaHBjeTVwYm5CMWRDNXNZWE4wU1c1a1pYaFBaaWhjSWx4Y2Jsd2lMQ0J6ZEdGeWRGQnZjeWtwWEhKY2JpQWdJQ0IwYUdsekxtTjFja3hwYm1VZ1BTQjBhR2x6TG1sdWNIVjBMbk5zYVdObEtEQXNJSFJvYVhNdWJHbHVaVk4wWVhKMEtTNXpjR3hwZENoc2FXNWxRbkpsWVdzcExteGxibWQwYUZ4eVhHNGdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQjBhR2x6TG5CdmN5QTlJSFJvYVhNdWJHbHVaVk4wWVhKMElEMGdNRnh5WEc0Z0lDQWdkR2hwY3k1amRYSk1hVzVsSUQwZ01WeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5OGdVSEp2Y0dWeWRHbGxjeUJ2WmlCMGFHVWdZM1Z5Y21WdWRDQjBiMnRsYmpwY2NseHVJQ0F2THlCSmRITWdkSGx3WlZ4eVhHNGdJSFJvYVhNdWRIbHdaU0E5SUhSMExtVnZabHh5WEc0Z0lDOHZJRVp2Y2lCMGIydGxibk1nZEdoaGRDQnBibU5zZFdSbElHMXZjbVVnYVc1bWIzSnRZWFJwYjI0Z2RHaGhiaUIwYUdWcGNpQjBlWEJsTENCMGFHVWdkbUZzZFdWY2NseHVJQ0IwYUdsekxuWmhiSFZsSUQwZ2JuVnNiRnh5WEc0Z0lDOHZJRWwwY3lCemRHRnlkQ0JoYm1RZ1pXNWtJRzltWm5ObGRGeHlYRzRnSUhSb2FYTXVjM1JoY25RZ1BTQjBhR2x6TG1WdVpDQTlJSFJvYVhNdWNHOXpYSEpjYmlBZ0x5OGdRVzVrTENCcFppQnNiMk5oZEdsdmJuTWdZWEpsSUhWelpXUXNJSFJvWlNCN2JHbHVaU3dnWTI5c2RXMXVmU0J2WW1wbFkzUmNjbHh1SUNBdkx5QmpiM0p5WlhOd2IyNWthVzVuSUhSdklIUm9iM05sSUc5bVpuTmxkSE5jY2x4dUlDQjBhR2x6TG5OMFlYSjBURzlqSUQwZ2RHaHBjeTVsYm1STWIyTWdQU0IwYUdsekxtTjFjbEJ2YzJsMGFXOXVLQ2xjY2x4dVhISmNiaUFnTHk4Z1VHOXphWFJwYjI0Z2FXNW1iM0p0WVhScGIyNGdabTl5SUhSb1pTQndjbVYyYVc5MWN5QjBiMnRsYmx4eVhHNGdJSFJvYVhNdWJHRnpkRlJ2YTBWdVpFeHZZeUE5SUhSb2FYTXViR0Z6ZEZSdmExTjBZWEowVEc5aklEMGdiblZzYkZ4eVhHNGdJSFJvYVhNdWJHRnpkRlJ2YTFOMFlYSjBJRDBnZEdocGN5NXNZWE4wVkc5clJXNWtJRDBnZEdocGN5NXdiM05jY2x4dVhISmNiaUFnTHk4Z1ZHaGxJR052Ym5SbGVIUWdjM1JoWTJzZ2FYTWdkWE5sWkNCMGJ5QnpkWEJsY21acFkybGhiR3g1SUhSeVlXTnJJSE41Ym5SaFkzUnBZMXh5WEc0Z0lDOHZJR052Ym5SbGVIUWdkRzhnY0hKbFpHbGpkQ0IzYUdWMGFHVnlJR0VnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1SUdseklHRnNiRzkzWldRZ2FXNGdZVnh5WEc0Z0lDOHZJR2RwZG1WdUlIQnZjMmwwYVc5dUxseHlYRzRnSUhSb2FYTXVZMjl1ZEdWNGRDQTlJSFJvYVhNdWFXNXBkR2xoYkVOdmJuUmxlSFFvS1Z4eVhHNGdJSFJvYVhNdVpYaHdja0ZzYkc5M1pXUWdQU0IwY25WbFhISmNibHh5WEc0Z0lDOHZJRVpwWjNWeVpTQnZkWFFnYVdZZ2FYUW5jeUJoSUcxdlpIVnNaU0JqYjJSbExseHlYRzRnSUhSb2FYTXVjM1J5YVdOMElEMGdkR2hwY3k1cGJrMXZaSFZzWlNBOUlHOXdkR2x2Ym5NdWMyOTFjbU5sVkhsd1pTQTlQVDBnWENKdGIyUjFiR1ZjSWx4eVhHNWNjbHh1SUNBdkx5QlZjMlZrSUhSdklITnBaMjVwWm5rZ2RHaGxJSE4wWVhKMElHOW1JR0VnY0c5MFpXNTBhV0ZzSUdGeWNtOTNJR1oxYm1OMGFXOXVYSEpjYmlBZ2RHaHBjeTV3YjNSbGJuUnBZV3hCY25KdmQwRjBJRDBnTFRGY2NseHVYSEpjYmlBZ0x5OGdSbXhoWjNNZ2RHOGdkSEpoWTJzZ2QyaGxkR2hsY2lCM1pTQmhjbVVnYVc0Z1lTQm1kVzVqZEdsdmJpd2dZU0JuWlc1bGNtRjBiM0l1WEhKY2JpQWdkR2hwY3k1cGJrWjFibU4wYVc5dUlEMGdkR2hwY3k1cGJrZGxibVZ5WVhSdmNpQTlJR1poYkhObFhISmNiaUFnTHk4Z1RHRmlaV3h6SUdsdUlITmpiM0JsTGx4eVhHNGdJSFJvYVhNdWJHRmlaV3h6SUQwZ1cxMWNjbHh1WEhKY2JpQWdMeThnU1dZZ1pXNWhZbXhsWkN3Z2MydHBjQ0JzWldGa2FXNW5JR2hoYzJoaVlXNW5JR3hwYm1VdVhISmNiaUFnYVdZZ0tIUm9hWE11Y0c5eklEMDlQU0F3SUNZbUlHOXdkR2x2Ym5NdVlXeHNiM2RJWVhOb1FtRnVaeUFtSmlCMGFHbHpMbWx1Y0hWMExuTnNhV05sS0RBc0lESXBJRDA5UFNBbkl5RW5LVnh5WEc0Z0lDQWdkR2hwY3k1emEybHdUR2x1WlVOdmJXMWxiblFvTWlsY2NseHVmVHRjY2x4dVhISmNiaTh2SUVSRlVGSkZRMEZVUlVRZ1MyVndkQ0JtYjNJZ1ltRmphM2RoY21SeklHTnZiWEJoZEdsaWFXeHBkSGtnZFc1MGFXd2dNeTR3SUdsdUlHTmhjMlVnWVNCd2JIVm5hVzRnZFhObGN5QjBhR1Z0WEhKY2JsQmhjbk5sY2k1d2NtOTBiM1I1Y0dVdWFYTkxaWGwzYjNKa0lEMGdablZ1WTNScGIyNGdhWE5MWlhsM2IzSmtJQ2gzYjNKa0tTQjdJSEpsZEhWeWJpQjBhR2x6TG10bGVYZHZjbVJ6TG5SbGMzUW9kMjl5WkNrZ2ZUdGNjbHh1VUdGeWMyVnlMbkJ5YjNSdmRIbHdaUzVwYzFKbGMyVnlkbVZrVjI5eVpDQTlJR1oxYm1OMGFXOXVJR2x6VW1WelpYSjJaV1JYYjNKa0lDaDNiM0prS1NCN0lISmxkSFZ5YmlCMGFHbHpMbkpsYzJWeWRtVmtWMjl5WkhNdWRHVnpkQ2gzYjNKa0tTQjlPMXh5WEc1Y2NseHVVR0Z5YzJWeUxuQnliM1J2ZEhsd1pTNWxlSFJsYm1RZ1BTQm1kVzVqZEdsdmJpQmxlSFJsYm1RZ0tHNWhiV1VzSUdZcElIdGNjbHh1SUNCMGFHbHpXMjVoYldWZElEMGdaaWgwYUdselcyNWhiV1ZkS1Z4eVhHNTlPMXh5WEc1Y2NseHVVR0Z5YzJWeUxuQnliM1J2ZEhsd1pTNXNiMkZrVUd4MVoybHVjeUE5SUdaMWJtTjBhVzl1SUd4dllXUlFiSFZuYVc1eklDaHdiSFZuYVc1RGIyNW1hV2R6S1NCN1hISmNiaUFnSUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ1ptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCd2JIVm5hVzVEYjI1bWFXZHpLU0I3WEhKY2JpQWdJQ0IyWVhJZ2NHeDFaMmx1SUQwZ2NHeDFaMmx1YzF0dVlXMWxYVnh5WEc0Z0lDQWdhV1lnS0NGd2JIVm5hVzRwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxCc2RXZHBiaUFuWENJZ0t5QnVZVzFsSUNzZ1hDSW5JRzV2ZENCbWIzVnVaRndpS1Z4eVhHNGdJQ0FnY0d4MVoybHVLSFJvYVhNa01Td2djR3gxWjJsdVEyOXVabWxuYzF0dVlXMWxYU2xjY2x4dUlDQjlYSEpjYm4wN1hISmNibHh5WEc1UVlYSnpaWEl1Y0hKdmRHOTBlWEJsTG5CaGNuTmxJRDBnWm5WdVkzUnBiMjRnY0dGeWMyVWdLQ2tnZTF4eVhHNGdJSFpoY2lCdWIyUmxJRDBnZEdocGN5NXZjSFJwYjI1ekxuQnliMmR5WVcwZ2ZId2dkR2hwY3k1emRHRnlkRTV2WkdVb0tWeHlYRzRnSUhSb2FYTXVibVY0ZEZSdmEyVnVLQ2xjY2x4dUlDQnlaWFIxY200Z2RHaHBjeTV3WVhKelpWUnZjRXhsZG1Wc0tHNXZaR1VwWEhKY2JuMDdYSEpjYmx4eVhHNTJZWElnY0hBZ1BTQlFZWEp6WlhJdWNISnZkRzkwZVhCbFhISmNibHh5WEc0dkx5QWpJeUJRWVhKelpYSWdkWFJwYkdsMGFXVnpYSEpjYmx4eVhHNHZMeUJVWlhOMElIZG9aWFJvWlhJZ1lTQnpkR0YwWlcxbGJuUWdibTlrWlNCcGN5QjBhR1VnYzNSeWFXNW5JR3hwZEdWeVlXd2dZRndpZFhObElITjBjbWxqZEZ3aVlDNWNjbHh1WEhKY2JuQndMbWx6VlhObFUzUnlhV04wSUQwZ1puVnVZM1JwYjI0b2MzUnRkQ2tnZTF4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG05d2RHbHZibk11WldOdFlWWmxjbk5wYjI0Z1BqMGdOU0FtSmlCemRHMTBMblI1Y0dVZ1BUMDlJRndpUlhod2NtVnpjMmx2YmxOMFlYUmxiV1Z1ZEZ3aUlDWW1YSEpjYmlBZ0lDQnpkRzEwTG1WNGNISmxjM05wYjI0dWRIbHdaU0E5UFQwZ1hDSk1hWFJsY21Gc1hDSWdKaVpjY2x4dUlDQWdJSE4wYlhRdVpYaHdjbVZ6YzJsdmJpNXlZWGN1YzJ4cFkyVW9NU3dnTFRFcElEMDlQU0JjSW5WelpTQnpkSEpwWTNSY0lseHlYRzU5WEhKY2JseHlYRzR2THlCUWNtVmthV05oZEdVZ2RHaGhkQ0IwWlhOMGN5QjNhR1YwYUdWeUlIUm9aU0J1WlhoMElIUnZhMlZ1SUdseklHOW1JSFJvWlNCbmFYWmxibHh5WEc0dkx5QjBlWEJsTENCaGJtUWdhV1lnZVdWekxDQmpiMjV6ZFcxbGN5QnBkQ0JoY3lCaElITnBaR1VnWldabVpXTjBMbHh5WEc1Y2NseHVjSEF1WldGMElEMGdablZ1WTNScGIyNG9kSGx3WlNrZ2UxeHlYRzRnSUdsbUlDaDBhR2x6TG5SNWNHVWdQVDA5SUhSNWNHVXBJSHRjY2x4dUlDQWdJSFJvYVhNdWJtVjRkQ2dwWEhKY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlZ4eVhHNGdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlZjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYmk4dklGUmxjM1J6SUhkb1pYUm9aWElnY0dGeWMyVmtJSFJ2YTJWdUlHbHpJR0VnWTI5dWRHVjRkSFZoYkNCclpYbDNiM0prTGx4eVhHNWNjbHh1Y0hBdWFYTkRiMjUwWlhoMGRXRnNJRDBnWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMblI1Y0dVZ1BUMDlJSFIwTG01aGJXVWdKaVlnZEdocGN5NTJZV3gxWlNBOVBUMGdibUZ0WlZ4eVhHNTlYSEpjYmx4eVhHNHZMeUJEYjI1emRXMWxjeUJqYjI1MFpYaDBkV0ZzSUd0bGVYZHZjbVFnYVdZZ2NHOXpjMmxpYkdVdVhISmNibHh5WEc1d2NDNWxZWFJEYjI1MFpYaDBkV0ZzSUQwZ1puVnVZM1JwYjI0b2JtRnRaU2tnZTF4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG5aaGJIVmxJRDA5UFNCdVlXMWxJQ1ltSUhSb2FYTXVaV0YwS0hSMExtNWhiV1VwWEhKY2JuMWNjbHh1WEhKY2JpOHZJRUZ6YzJWeWRITWdkR2hoZENCbWIyeHNiM2RwYm1jZ2RHOXJaVzRnYVhNZ1oybDJaVzRnWTI5dWRHVjRkSFZoYkNCclpYbDNiM0prTGx4eVhHNWNjbHh1Y0hBdVpYaHdaV04wUTI5dWRHVjRkSFZoYkNBOUlHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2NseHVJQ0JwWmlBb0lYUm9hWE11WldGMFEyOXVkR1Y0ZEhWaGJDaHVZVzFsS1NrZ2RHaHBjeTUxYm1WNGNHVmpkR1ZrS0NsY2NseHVmVnh5WEc1Y2NseHVMeThnVkdWemRDQjNhR1YwYUdWeUlHRWdjMlZ0YVdOdmJHOXVJR05oYmlCaVpTQnBibk5sY25SbFpDQmhkQ0IwYUdVZ1kzVnljbVZ1ZENCd2IzTnBkR2x2Ymk1Y2NseHVYSEpjYm5Cd0xtTmhia2x1YzJWeWRGTmxiV2xqYjJ4dmJpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG5SNWNHVWdQVDA5SUhSMExtVnZaaUI4ZkZ4eVhHNGdJQ0FnZEdocGN5NTBlWEJsSUQwOVBTQjBkQzVpY21GalpWSWdmSHhjY2x4dUlDQWdJR3hwYm1WQ2NtVmhheTUwWlhOMEtIUm9hWE11YVc1d2RYUXVjMnhwWTJVb2RHaHBjeTVzWVhOMFZHOXJSVzVrTENCMGFHbHpMbk4wWVhKMEtTbGNjbHh1ZlZ4eVhHNWNjbHh1Y0hBdWFXNXpaWEowVTJWdGFXTnZiRzl1SUQwZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ2FXWWdLSFJvYVhNdVkyRnVTVzV6WlhKMFUyVnRhV052Ykc5dUtDa3BJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXViMjVKYm5ObGNuUmxaRk5sYldsamIyeHZiaWxjY2x4dUlDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxtOXVTVzV6WlhKMFpXUlRaVzFwWTI5c2IyNG9kR2hwY3k1c1lYTjBWRzlyUlc1a0xDQjBhR2x6TG14aGMzUlViMnRGYm1STWIyTXBYSEpjYmlBZ0lDQnlaWFIxY200Z2RISjFaVnh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1EyOXVjM1Z0WlNCaElITmxiV2xqYjJ4dmJpd2diM0lzSUdaaGFXeHBibWNnZEdoaGRDd2djMlZsSUdsbUlIZGxJR0Z5WlNCaGJHeHZkMlZrSUhSdlhISmNiaTh2SUhCeVpYUmxibVFnZEdoaGRDQjBhR1Z5WlNCcGN5QmhJSE5sYldsamIyeHZiaUJoZENCMGFHbHpJSEJ2YzJsMGFXOXVMbHh5WEc1Y2NseHVjSEF1YzJWdGFXTnZiRzl1SUQwZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ2FXWWdLQ0YwYUdsekxtVmhkQ2gwZEM1elpXMXBLU0FtSmlBaGRHaHBjeTVwYm5ObGNuUlRaVzFwWTI5c2IyNG9LU2tnZEdocGN5NTFibVY0Y0dWamRHVmtLQ2xjY2x4dWZWeHlYRzVjY2x4dWNIQXVZV1owWlhKVWNtRnBiR2x1WjBOdmJXMWhJRDBnWm5WdVkzUnBiMjRvZEc5clZIbHdaU2tnZTF4eVhHNGdJR2xtSUNoMGFHbHpMblI1Y0dVZ1BUMGdkRzlyVkhsd1pTa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXZibFJ5WVdsc2FXNW5RMjl0YldFcFhISmNiaUFnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeTV2YmxSeVlXbHNhVzVuUTI5dGJXRW9kR2hwY3k1c1lYTjBWRzlyVTNSaGNuUXNJSFJvYVhNdWJHRnpkRlJ2YTFOMFlYSjBURzlqS1Z4eVhHNGdJQ0FnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0FnSUhKbGRIVnliaUIwY25WbFhISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNHZMeUJGZUhCbFkzUWdZU0IwYjJ0bGJpQnZaaUJoSUdkcGRtVnVJSFI1Y0dVdUlFbG1JR1p2ZFc1a0xDQmpiMjV6ZFcxbElHbDBMQ0J2ZEdobGNuZHBjMlVzWEhKY2JpOHZJSEpoYVhObElHRnVJSFZ1Wlhod1pXTjBaV1FnZEc5clpXNGdaWEp5YjNJdVhISmNibHh5WEc1d2NDNWxlSEJsWTNRZ1BTQm1kVzVqZEdsdmJpaDBlWEJsS1NCN1hISmNiaUFnZEdocGN5NWxZWFFvZEhsd1pTa2dmSHdnZEdocGN5NTFibVY0Y0dWamRHVmtLQ2xjY2x4dWZWeHlYRzVjY2x4dUx5OGdVbUZwYzJVZ1lXNGdkVzVsZUhCbFkzUmxaQ0IwYjJ0bGJpQmxjbkp2Y2k1Y2NseHVYSEpjYm5Cd0xuVnVaWGh3WldOMFpXUWdQU0JtZFc1amRHbHZiaWh3YjNNcElIdGNjbHh1SUNCMGFHbHpMbkpoYVhObEtIQnZjeUFoUFNCdWRXeHNJRDhnY0c5eklEb2dkR2hwY3k1emRHRnlkQ3dnWENKVmJtVjRjR1ZqZEdWa0lIUnZhMlZ1WENJcFhISmNibjFjY2x4dVhISmNiblpoY2lCRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKeklEMGdablZ1WTNScGIyNGdSR1Z6ZEhKMVkzUjFjbWx1WjBWeWNtOXljeWdwSUh0Y2NseHVJQ0IwYUdsekxuTm9iM0owYUdGdVpFRnpjMmxuYmlBOUlEQmNjbHh1SUNCMGFHbHpMblJ5WVdsc2FXNW5RMjl0YldFZ1BTQXdYSEpjYm4wN1hISmNibHh5WEc1d2NDNWphR1ZqYTFCaGRIUmxjbTVGY25KdmNuTWdQU0JtZFc1amRHbHZiaWh5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKekxDQmhibVJVYUhKdmR5a2dlMXh5WEc0Z0lIWmhjaUIwY21GcGJHbHVaeUE5SUhKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTWdKaVlnY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5NTBjbUZwYkdsdVowTnZiVzFoWEhKY2JpQWdhV1lnS0NGaGJtUlVhSEp2ZHlrZ2NtVjBkWEp1SUNFaGRISmhhV3hwYm1kY2NseHVJQ0JwWmlBb2RISmhhV3hwYm1jcElIUm9hWE11Y21GcGMyVW9kSEpoYVd4cGJtY3NJRndpUTI5dGJXRWdhWE1nYm05MElIQmxjbTFwZEhSbFpDQmhablJsY2lCMGFHVWdjbVZ6ZENCbGJHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNibkJ3TG1Ob1pXTnJSWGh3Y21WemMybHZia1Z5Y205eWN5QTlJR1oxYm1OMGFXOXVLSEpsWmtSbGMzUnlkV04wZFhKcGJtZEZjbkp2Y25Nc0lHRnVaRlJvY205M0tTQjdYSEpjYmlBZ2RtRnlJSEJ2Y3lBOUlISmxaa1JsYzNSeWRXTjBkWEpwYm1kRmNuSnZjbk1nSmlZZ2NtVm1SR1Z6ZEhKMVkzUjFjbWx1WjBWeWNtOXljeTV6YUc5eWRHaGhibVJCYzNOcFoyNWNjbHh1SUNCcFppQW9JV0Z1WkZSb2NtOTNLU0J5WlhSMWNtNGdJU0Z3YjNOY2NseHVJQ0JwWmlBb2NHOXpLU0IwYUdsekxuSmhhWE5sS0hCdmN5d2dYQ0pUYUc5eWRHaGhibVFnY0hKdmNHVnlkSGtnWVhOemFXZHViV1Z1ZEhNZ1lYSmxJSFpoYkdsa0lHOXViSGtnYVc0Z1pHVnpkSEoxWTNSMWNtbHVaeUJ3WVhSMFpYSnVjMXdpS1Z4eVhHNTlYSEpjYmx4eVhHNTJZWElnY0hBa01TQTlJRkJoY25ObGNpNXdjbTkwYjNSNWNHVmNjbHh1WEhKY2JpOHZJQ01qSXlCVGRHRjBaVzFsYm5RZ2NHRnljMmx1WjF4eVhHNWNjbHh1THk4Z1VHRnljMlVnWVNCd2NtOW5jbUZ0TGlCSmJtbDBhV0ZzYVhwbGN5QjBhR1VnY0dGeWMyVnlMQ0J5WldGa2N5QmhibmtnYm5WdFltVnlJRzltWEhKY2JpOHZJSE4wWVhSbGJXVnVkSE1zSUdGdVpDQjNjbUZ3Y3lCMGFHVnRJR2x1SUdFZ1VISnZaM0poYlNCdWIyUmxMaUFnVDNCMGFXOXVZV3hzZVNCMFlXdGxjeUJoWEhKY2JpOHZJR0J3Y205bmNtRnRZQ0JoY21kMWJXVnVkQzRnSUVsbUlIQnlaWE5sYm5Rc0lIUm9aU0J6ZEdGMFpXMWxiblJ6SUhkcGJHd2dZbVVnWVhCd1pXNWtaV1JjY2x4dUx5OGdkRzhnYVhSeklHSnZaSGtnYVc1emRHVmhaQ0J2WmlCamNtVmhkR2x1WnlCaElHNWxkeUJ1YjJSbExseHlYRzVjY2x4dWNIQWtNUzV3WVhKelpWUnZjRXhsZG1Wc0lEMGdablZ1WTNScGIyNG9ibTlrWlNrZ2UxeHlYRzRnSUhaaGNpQjBhR2x6SkRFZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNCMllYSWdabWx5YzNRZ1BTQjBjblZsWEhKY2JpQWdhV1lnS0NGdWIyUmxMbUp2WkhrcElHNXZaR1V1WW05a2VTQTlJRnRkWEhKY2JpQWdkMmhwYkdVZ0tIUm9hWE11ZEhsd1pTQWhQVDBnZEhRdVpXOW1LU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUnRkQ0E5SUhSb2FYTWtNUzV3WVhKelpWTjBZWFJsYldWdWRDaDBjblZsTENCMGNuVmxLVnh5WEc0Z0lDQWdibTlrWlM1aWIyUjVMbkIxYzJnb2MzUnRkQ2xjY2x4dUlDQWdJR2xtSUNobWFYSnpkQ2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9kR2hwY3lReExtbHpWWE5sVTNSeWFXTjBLSE4wYlhRcEtTQjBhR2x6SkRFdWMyVjBVM1J5YVdOMEtIUnlkV1VwWEhKY2JpQWdJQ0FnSUdacGNuTjBJRDBnWm1Gc2MyVmNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNiaUFnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbVZqYldGV1pYSnphVzl1SUQ0OUlEWXBJSHRjY2x4dUlDQWdJRzV2WkdVdWMyOTFjbU5sVkhsd1pTQTlJSFJvYVhNdWIzQjBhVzl1Y3k1emIzVnlZMlZVZVhCbFhISmNiaUFnZlZ4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTV2WkdVb2JtOWtaU3dnWENKUWNtOW5jbUZ0WENJcFhISmNibjFjY2x4dVhISmNiblpoY2lCc2IyOXdUR0ZpWld3Z1BTQjdhMmx1WkRvZ1hDSnNiMjl3WENKOU8xeHlYRzUyWVhJZ2MzZHBkR05vVEdGaVpXd2dQU0I3YTJsdVpEb2dYQ0p6ZDJsMFkyaGNJbjA3WEhKY2JuQndKREV1YVhOTVpYUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0JwWmlBb2RHaHBjeTUwZVhCbElDRTlQU0IwZEM1dVlXMWxJSHg4SUhSb2FYTXViM0IwYVc5dWN5NWxZMjFoVm1WeWMybHZiaUE4SURZZ2ZId2dkR2hwY3k1MllXeDFaU0FoUFNCY0lteGxkRndpS1NCeVpYUjFjbTRnWm1Gc2MyVmNjbHh1SUNCemEybHdWMmhwZEdWVGNHRmpaUzVzWVhOMFNXNWtaWGdnUFNCMGFHbHpMbkJ2YzF4eVhHNGdJSFpoY2lCemEybHdJRDBnYzJ0cGNGZG9hWFJsVTNCaFkyVXVaWGhsWXloMGFHbHpMbWx1Y0hWMEtWeHlYRzRnSUhaaGNpQnVaWGgwSUQwZ2RHaHBjeTV3YjNNZ0t5QnphMmx3V3pCZExteGxibWQwYUN3Z2JtVjRkRU5vSUQwZ2RHaHBjeTVwYm5CMWRDNWphR0Z5UTI5a1pVRjBLRzVsZUhRcFhISmNiaUFnYVdZZ0tHNWxlSFJEYUNBOVBUMGdPVEVnZkh3Z2JtVjRkRU5vSUQwOUlERXlNeWtnY21WMGRYSnVJSFJ5ZFdVZ0x5OGdKM3NuSUdGdVpDQW5XeWRjY2x4dUlDQnBaaUFvYVhOSlpHVnVkR2xtYVdWeVUzUmhjblFvYm1WNGRFTm9MQ0IwY25WbEtTa2dlMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdjRzl6SUQwZ2JtVjRkQ0FySURFN0lHbHpTV1JsYm5ScFptbGxja05vWVhJb2RHaHBjeTVwYm5CMWRDNWphR0Z5UTI5a1pVRjBLSEJ2Y3lrc0lIUnlkV1VwT3lBckszQnZjeWtnZTMxY2NseHVJQ0FnSUhaaGNpQnBaR1Z1ZENBOUlIUm9hWE11YVc1d2RYUXVjMnhwWTJVb2JtVjRkQ3dnY0c5ektWeHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtbHpTMlY1ZDI5eVpDaHBaR1Z1ZENrcElISmxkSFZ5YmlCMGNuVmxYSEpjYmlBZ2ZWeHlYRzRnSUhKbGRIVnliaUJtWVd4elpWeHlYRzU5WEhKY2JseHlYRzR2THlCUVlYSnpaU0JoSUhOcGJtZHNaU0J6ZEdGMFpXMWxiblF1WEhKY2JpOHZYSEpjYmk4dklFbG1JR1Y0Y0dWamRHbHVaeUJoSUhOMFlYUmxiV1Z1ZENCaGJtUWdabWx1WkdsdVp5QmhJSE5zWVhOb0lHOXdaWEpoZEc5eUxDQndZWEp6WlNCaFhISmNiaTh2SUhKbFozVnNZWElnWlhod2NtVnpjMmx2YmlCc2FYUmxjbUZzTGlCVWFHbHpJR2x6SUhSdklHaGhibVJzWlNCallYTmxjeUJzYVd0bFhISmNiaTh2SUdCcFppQW9abTl2S1NBdllteGhhQzh1WlhobFl5aG1iMjhwWUN3Z2QyaGxjbVVnYkc5dmEybHVaeUJoZENCMGFHVWdjSEpsZG1sdmRYTWdkRzlyWlc1Y2NseHVMeThnWkc5bGN5QnViM1FnYUdWc2NDNWNjbHh1WEhKY2JuQndKREV1Y0dGeWMyVlRkR0YwWlcxbGJuUWdQU0JtZFc1amRHbHZiaWhrWldOc1lYSmhkR2x2Yml3Z2RHOXdUR1YyWld3cElIdGNjbHh1SUNCMllYSWdjM1JoY25SMGVYQmxJRDBnZEdocGN5NTBlWEJsTENCdWIyUmxJRDBnZEdocGN5NXpkR0Z5ZEU1dlpHVW9LU3dnYTJsdVpGeHlYRzVjY2x4dUlDQnBaaUFvZEdocGN5NXBjMHhsZENncEtTQjdYSEpjYmlBZ0lDQnpkR0Z5ZEhSNWNHVWdQU0IwZEM1ZmRtRnlYSEpjYmlBZ0lDQnJhVzVrSUQwZ1hDSnNaWFJjSWx4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHk4Z1RXOXpkQ0IwZVhCbGN5QnZaaUJ6ZEdGMFpXMWxiblJ6SUdGeVpTQnlaV052WjI1cGVtVmtJR0o1SUhSb1pTQnJaWGwzYjNKa0lIUm9aWGxjY2x4dUlDQXZMeUJ6ZEdGeWRDQjNhWFJvTGlCTllXNTVJR0Z5WlNCMGNtbDJhV0ZzSUhSdklIQmhjbk5sTENCemIyMWxJSEpsY1hWcGNtVWdZU0JpYVhRZ2IyWmNjbHh1SUNBdkx5QmpiMjF3YkdWNGFYUjVMbHh5WEc1Y2NseHVJQ0J6ZDJsMFkyZ2dLSE4wWVhKMGRIbHdaU2tnZTF4eVhHNGdJR05oYzJVZ2RIUXVYMkp5WldGck9pQmpZWE5sSUhSMExsOWpiMjUwYVc1MVpUb2djbVYwZFhKdUlIUm9hWE11Y0dGeWMyVkNjbVZoYTBOdmJuUnBiblZsVTNSaGRHVnRaVzUwS0c1dlpHVXNJSE4wWVhKMGRIbHdaUzVyWlhsM2IzSmtLVnh5WEc0Z0lHTmhjMlVnZEhRdVgyUmxZblZuWjJWeU9pQnlaWFIxY200Z2RHaHBjeTV3WVhKelpVUmxZblZuWjJWeVUzUmhkR1Z0Wlc1MEtHNXZaR1VwWEhKY2JpQWdZMkZ6WlNCMGRDNWZaRzg2SUhKbGRIVnliaUIwYUdsekxuQmhjbk5sUkc5VGRHRjBaVzFsYm5Rb2JtOWtaU2xjY2x4dUlDQmpZWE5sSUhSMExsOW1iM0k2SUhKbGRIVnliaUIwYUdsekxuQmhjbk5sUm05eVUzUmhkR1Z0Wlc1MEtHNXZaR1VwWEhKY2JpQWdZMkZ6WlNCMGRDNWZablZ1WTNScGIyNDZYSEpjYmlBZ0lDQnBaaUFvSVdSbFkyeGhjbUYwYVc5dUlDWW1JSFJvYVhNdWIzQjBhVzl1Y3k1bFkyMWhWbVZ5YzJsdmJpQStQU0EyS1NCMGFHbHpMblZ1Wlhod1pXTjBaV1FvS1Z4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRnljMlZHZFc1amRHbHZibE4wWVhSbGJXVnVkQ2h1YjJSbEtWeHlYRzRnSUdOaGMyVWdkSFF1WDJOc1lYTnpPbHh5WEc0Z0lDQWdhV1lnS0NGa1pXTnNZWEpoZEdsdmJpa2dkR2hwY3k1MWJtVjRjR1ZqZEdWa0tDbGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFEyeGhjM01vYm05a1pTd2dkSEoxWlNsY2NseHVJQ0JqWVhObElIUjBMbDlwWmpvZ2NtVjBkWEp1SUhSb2FYTXVjR0Z5YzJWSlpsTjBZWFJsYldWdWRDaHViMlJsS1Z4eVhHNGdJR05oYzJVZ2RIUXVYM0psZEhWeWJqb2djbVYwZFhKdUlIUm9hWE11Y0dGeWMyVlNaWFIxY201VGRHRjBaVzFsYm5Rb2JtOWtaU2xjY2x4dUlDQmpZWE5sSUhSMExsOXpkMmwwWTJnNklISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFUzZHBkR05vVTNSaGRHVnRaVzUwS0c1dlpHVXBYSEpjYmlBZ1kyRnpaU0IwZEM1ZmRHaHliM2M2SUhKbGRIVnliaUIwYUdsekxuQmhjbk5sVkdoeWIzZFRkR0YwWlcxbGJuUW9ibTlrWlNsY2NseHVJQ0JqWVhObElIUjBMbDkwY25rNklISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFZISjVVM1JoZEdWdFpXNTBLRzV2WkdVcFhISmNiaUFnWTJGelpTQjBkQzVmWTI5dWMzUTZJR05oYzJVZ2RIUXVYM1poY2pwY2NseHVJQ0FnSUd0cGJtUWdQU0JyYVc1a0lIeDhJSFJvYVhNdWRtRnNkV1ZjY2x4dUlDQWdJR2xtSUNnaFpHVmpiR0Z5WVhScGIyNGdKaVlnYTJsdVpDQWhQU0JjSW5aaGNsd2lLU0IwYUdsekxuVnVaWGh3WldOMFpXUW9LVnh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVldZWEpUZEdGMFpXMWxiblFvYm05a1pTd2dhMmx1WkNsY2NseHVJQ0JqWVhObElIUjBMbDkzYUdsc1pUb2djbVYwZFhKdUlIUm9hWE11Y0dGeWMyVlhhR2xzWlZOMFlYUmxiV1Z1ZENodWIyUmxLVnh5WEc0Z0lHTmhjMlVnZEhRdVgzZHBkR2c2SUhKbGRIVnliaUIwYUdsekxuQmhjbk5sVjJsMGFGTjBZWFJsYldWdWRDaHViMlJsS1Z4eVhHNGdJR05oYzJVZ2RIUXVZbkpoWTJWTU9pQnlaWFIxY200Z2RHaHBjeTV3WVhKelpVSnNiMk5yS0NsY2NseHVJQ0JqWVhObElIUjBMbk5sYldrNklISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFJXMXdkSGxUZEdGMFpXMWxiblFvYm05a1pTbGNjbHh1SUNCallYTmxJSFIwTGw5bGVIQnZjblE2WEhKY2JpQWdZMkZ6WlNCMGRDNWZhVzF3YjNKME9seHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtOXdkR2x2Ym5NdVlXeHNiM2RKYlhCdmNuUkZlSEJ2Y25SRmRtVnllWGRvWlhKbEtTQjdYSEpjYmlBZ0lDQWdJR2xtSUNnaGRHOXdUR1YyWld3cFhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVlXbHpaU2gwYUdsekxuTjBZWEowTENCY0lpZHBiWEJ2Y25RbklHRnVaQ0FuWlhod2IzSjBKeUJ0WVhrZ2IyNXNlU0JoY0hCbFlYSWdZWFFnZEdobElIUnZjQ0JzWlhabGJGd2lLVnh5WEc0Z0lDQWdJQ0JwWmlBb0lYUm9hWE11YVc1TmIyUjFiR1VwWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WVdselpTaDBhR2x6TG5OMFlYSjBMQ0JjSWlkcGJYQnZjblFuSUdGdVpDQW5aWGh3YjNKMEp5QnRZWGtnWVhCd1pXRnlJRzl1YkhrZ2QybDBhQ0FuYzI5MWNtTmxWSGx3WlRvZ2JXOWtkV3hsSjF3aUtWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhOMFlYSjBkSGx3WlNBOVBUMGdkSFF1WDJsdGNHOXlkQ0EvSUhSb2FYTXVjR0Z5YzJWSmJYQnZjblFvYm05a1pTa2dPaUIwYUdsekxuQmhjbk5sUlhod2IzSjBLRzV2WkdVcFhISmNibHh5WEc0Z0lDQWdMeThnU1dZZ2RHaGxJSE4wWVhSbGJXVnVkQ0JrYjJWeklHNXZkQ0J6ZEdGeWRDQjNhWFJvSUdFZ2MzUmhkR1Z0Wlc1MElHdGxlWGR2Y21RZ2IzSWdZVnh5WEc0Z0lDQWdMeThnWW5KaFkyVXNJR2wwSjNNZ1lXNGdSWGh3Y21WemMybHZibE4wWVhSbGJXVnVkQ0J2Y2lCTVlXSmxiR1ZrVTNSaGRHVnRaVzUwTGlCWFpWeHlYRzRnSUNBZ0x5OGdjMmx0Y0d4NUlITjBZWEowSUhCaGNuTnBibWNnWVc0Z1pYaHdjbVZ6YzJsdmJpd2dZVzVrSUdGbWRHVnlkMkZ5WkhNc0lHbG1JSFJvWlZ4eVhHNGdJQ0FnTHk4Z2JtVjRkQ0IwYjJ0bGJpQnBjeUJoSUdOdmJHOXVJR0Z1WkNCMGFHVWdaWGh3Y21WemMybHZiaUIzWVhNZ1lTQnphVzF3YkdWY2NseHVJQ0FnSUM4dklFbGtaVzUwYVdacFpYSWdibTlrWlN3Z2QyVWdjM2RwZEdOb0lIUnZJR2x1ZEdWeWNISmxkR2x1WnlCcGRDQmhjeUJoSUd4aFltVnNMbHh5WEc0Z0lHUmxabUYxYkhRNlhISmNiaUFnSUNCMllYSWdiV0Y1WW1WT1lXMWxJRDBnZEdocGN5NTJZV3gxWlN3Z1pYaHdjaUE5SUhSb2FYTXVjR0Z5YzJWRmVIQnlaWE56YVc5dUtDbGNjbHh1SUNBZ0lHbG1JQ2h6ZEdGeWRIUjVjR1VnUFQwOUlIUjBMbTVoYldVZ0ppWWdaWGh3Y2k1MGVYQmxJRDA5UFNCY0lrbGtaVzUwYVdacFpYSmNJaUFtSmlCMGFHbHpMbVZoZENoMGRDNWpiMnh2YmlrcFhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFRHRmlaV3hsWkZOMFlYUmxiV1Z1ZENodWIyUmxMQ0J0WVhsaVpVNWhiV1VzSUdWNGNISXBYSEpjYmlBZ0lDQmxiSE5sSUhKbGRIVnliaUIwYUdsekxuQmhjbk5sUlhod2NtVnpjMmx2YmxOMFlYUmxiV1Z1ZENodWIyUmxMQ0JsZUhCeUtWeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVjSEFrTVM1d1lYSnpaVUp5WldGclEyOXVkR2x1ZFdWVGRHRjBaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpaHViMlJsTENCclpYbDNiM0prS1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUhaaGNpQnBjMEp5WldGcklEMGdhMlY1ZDI5eVpDQTlQU0JjSW1KeVpXRnJYQ0pjY2x4dUlDQjBhR2x6TG01bGVIUW9LVnh5WEc0Z0lHbG1JQ2gwYUdsekxtVmhkQ2gwZEM1elpXMXBLU0I4ZkNCMGFHbHpMbWx1YzJWeWRGTmxiV2xqYjJ4dmJpZ3BLU0J1YjJSbExteGhZbVZzSUQwZ2JuVnNiRnh5WEc0Z0lHVnNjMlVnYVdZZ0tIUm9hWE11ZEhsd1pTQWhQVDBnZEhRdWJtRnRaU2tnZEdocGN5NTFibVY0Y0dWamRHVmtLQ2xjY2x4dUlDQmxiSE5sSUh0Y2NseHVJQ0FnSUc1dlpHVXViR0ZpWld3Z1BTQjBhR2x6TG5CaGNuTmxTV1JsYm5Rb0tWeHlYRzRnSUNBZ2RHaHBjeTV6WlcxcFkyOXNiMjRvS1Z4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHk4Z1ZtVnlhV1o1SUhSb1lYUWdkR2hsY21VZ2FYTWdZVzRnWVdOMGRXRnNJR1JsYzNScGJtRjBhVzl1SUhSdklHSnlaV0ZySUc5eVhISmNiaUFnTHk4Z1kyOXVkR2x1ZFdVZ2RHOHVYSEpjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14aFltVnNjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHlYRzRnSUNBZ2RtRnlJR3hoWWlBOUlIUm9hWE1rTVM1c1lXSmxiSE5iYVYxY2NseHVJQ0FnSUdsbUlDaHViMlJsTG14aFltVnNJRDA5SUc1MWJHd2dmSHdnYkdGaUxtNWhiV1VnUFQwOUlHNXZaR1V1YkdGaVpXd3VibUZ0WlNrZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvYkdGaUxtdHBibVFnSVQwZ2JuVnNiQ0FtSmlBb2FYTkNjbVZoYXlCOGZDQnNZV0l1YTJsdVpDQTlQVDBnWENKc2IyOXdYQ0lwS1NCaWNtVmhhMXh5WEc0Z0lDQWdJQ0JwWmlBb2JtOWtaUzVzWVdKbGJDQW1KaUJwYzBKeVpXRnJLU0JpY21WaGExeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVJQ0JwWmlBb2FTQTlQVDBnZEdocGN5NXNZV0psYkhNdWJHVnVaM1JvS1NCMGFHbHpMbkpoYVhObEtHNXZaR1V1YzNSaGNuUXNJRndpVlc1emVXNTBZV04wYVdNZ1hDSWdLeUJyWlhsM2IzSmtLVnh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFNXZaR1VvYm05a1pTd2dhWE5DY21WaGF5QS9JRndpUW5KbFlXdFRkR0YwWlcxbGJuUmNJaUE2SUZ3aVEyOXVkR2x1ZFdWVGRHRjBaVzFsYm5SY0lpbGNjbHh1ZlZ4eVhHNWNjbHh1Y0hBa01TNXdZWEp6WlVSbFluVm5aMlZ5VTNSaGRHVnRaVzUwSUQwZ1puVnVZM1JwYjI0b2JtOWtaU2tnZTF4eVhHNGdJSFJvYVhNdWJtVjRkQ2dwWEhKY2JpQWdkR2hwY3k1elpXMXBZMjlzYjI0b0tWeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z1hDSkVaV0oxWjJkbGNsTjBZWFJsYldWdWRGd2lLVnh5WEc1OVhISmNibHh5WEc1d2NDUXhMbkJoY25ObFJHOVRkR0YwWlcxbGJuUWdQU0JtZFc1amRHbHZiaWh1YjJSbEtTQjdYSEpjYmlBZ2RHaHBjeTV1WlhoMEtDbGNjbHh1SUNCMGFHbHpMbXhoWW1Wc2N5NXdkWE5vS0d4dmIzQk1ZV0psYkNsY2NseHVJQ0J1YjJSbExtSnZaSGtnUFNCMGFHbHpMbkJoY25ObFUzUmhkR1Z0Wlc1MEtHWmhiSE5sS1Z4eVhHNGdJSFJvYVhNdWJHRmlaV3h6TG5CdmNDZ3BYSEpjYmlBZ2RHaHBjeTVsZUhCbFkzUW9kSFF1WDNkb2FXeGxLVnh5WEc0Z0lHNXZaR1V1ZEdWemRDQTlJSFJvYVhNdWNHRnljMlZRWVhKbGJrVjRjSEpsYzNOcGIyNG9LVnh5WEc0Z0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVpXTnRZVlpsY25OcGIyNGdQajBnTmlsY2NseHVJQ0FnSUhSb2FYTXVaV0YwS0hSMExuTmxiV2twWEhKY2JpQWdaV3h6WlZ4eVhHNGdJQ0FnZEdocGN5NXpaVzFwWTI5c2IyNG9LVnh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFNXZaR1VvYm05a1pTd2dYQ0pFYjFkb2FXeGxVM1JoZEdWdFpXNTBYQ0lwWEhKY2JuMWNjbHh1WEhKY2JpOHZJRVJwYzJGdFltbG5kV0YwYVc1bklHSmxkSGRsWlc0Z1lTQmdabTl5WUNCaGJtUWdZU0JnWm05eVlDOWdhVzVnSUc5eUlHQm1iM0pnTDJCdlptQmNjbHh1THk4Z2JHOXZjQ0JwY3lCdWIyNHRkSEpwZG1saGJDNGdRbUZ6YVdOaGJHeDVMQ0IzWlNCb1lYWmxJSFJ2SUhCaGNuTmxJSFJvWlNCcGJtbDBJR0IyWVhKZ1hISmNiaTh2SUhOMFlYUmxiV1Z1ZENCdmNpQmxlSEJ5WlhOemFXOXVMQ0JrYVhOaGJHeHZkMmx1WnlCMGFHVWdZR2x1WUNCdmNHVnlZWFJ2Y2lBb2MyVmxYSEpjYmk4dklIUm9aU0J6WldOdmJtUWdjR0Z5WVcxbGRHVnlJSFJ2SUdCd1lYSnpaVVY0Y0hKbGMzTnBiMjVnS1N3Z1lXNWtJSFJvWlc0Z1kyaGxZMnRjY2x4dUx5OGdkMmhsZEdobGNpQjBhR1VnYm1WNGRDQjBiMnRsYmlCcGN5QmdhVzVnSUc5eUlHQnZabUF1SUZkb1pXNGdkR2hsY21VZ2FYTWdibThnYVc1cGRGeHlYRzR2THlCd1lYSjBJQ2h6WlcxcFkyOXNiMjRnYVcxdFpXUnBZWFJsYkhrZ1lXWjBaWElnZEdobElHOXdaVzVwYm1jZ2NHRnlaVzUwYUdWemFYTXBMQ0JwZEZ4eVhHNHZMeUJwY3lCaElISmxaM1ZzWVhJZ1lHWnZjbUFnYkc5dmNDNWNjbHh1WEhKY2JuQndKREV1Y0dGeWMyVkdiM0pUZEdGMFpXMWxiblFnUFNCbWRXNWpkR2x2YmlodWIyUmxLU0I3WEhKY2JpQWdkR2hwY3k1dVpYaDBLQ2xjY2x4dUlDQjBhR2x6TG14aFltVnNjeTV3ZFhOb0tHeHZiM0JNWVdKbGJDbGNjbHh1SUNCMGFHbHpMbVY0Y0dWamRDaDBkQzV3WVhKbGJrd3BYSEpjYmlBZ2FXWWdLSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXVjMlZ0YVNrZ2NtVjBkWEp1SUhSb2FYTXVjR0Z5YzJWR2IzSW9ibTlrWlN3Z2JuVnNiQ2xjY2x4dUlDQjJZWElnYVhOTVpYUWdQU0IwYUdsekxtbHpUR1YwS0NsY2NseHVJQ0JwWmlBb2RHaHBjeTUwZVhCbElEMDlQU0IwZEM1ZmRtRnlJSHg4SUhSb2FYTXVkSGx3WlNBOVBUMGdkSFF1WDJOdmJuTjBJSHg4SUdselRHVjBLU0I3WEhKY2JpQWdJQ0IyWVhJZ2FXNXBkQ1F4SUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1N3Z2EybHVaQ0E5SUdselRHVjBJRDhnWENKc1pYUmNJaUE2SUhSb2FYTXVkbUZzZFdWY2NseHVJQ0FnSUhSb2FYTXVibVY0ZENncFhISmNiaUFnSUNCMGFHbHpMbkJoY25ObFZtRnlLR2x1YVhRa01Td2dkSEoxWlN3Z2EybHVaQ2xjY2x4dUlDQWdJSFJvYVhNdVptbHVhWE5vVG05a1pTaHBibWwwSkRFc0lGd2lWbUZ5YVdGaWJHVkVaV05zWVhKaGRHbHZibHdpS1Z4eVhHNGdJQ0FnYVdZZ0tDaDBhR2x6TG5SNWNHVWdQVDA5SUhSMExsOXBiaUI4ZkNBb2RHaHBjeTV2Y0hScGIyNXpMbVZqYldGV1pYSnphVzl1SUQ0OUlEWWdKaVlnZEdocGN5NXBjME52Ym5SbGVIUjFZV3dvWENKdlpsd2lLU2twSUNZbUlHbHVhWFFrTVM1a1pXTnNZWEpoZEdsdmJuTXViR1Z1WjNSb0lEMDlQU0F4SUNZbVhISmNiaUFnSUNBZ0lDQWdJU2hyYVc1a0lDRTlQU0JjSW5aaGNsd2lJQ1ltSUdsdWFYUWtNUzVrWldOc1lYSmhkR2x2Ym5OYk1GMHVhVzVwZENrcFhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFJtOXlTVzRvYm05a1pTd2dhVzVwZENReEtWeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z5YzJWR2IzSW9ibTlrWlN3Z2FXNXBkQ1F4S1Z4eVhHNGdJSDFjY2x4dUlDQjJZWElnY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5QTlJRzVsZHlCRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKelhISmNiaUFnZG1GeUlHbHVhWFFnUFNCMGFHbHpMbkJoY25ObFJYaHdjbVZ6YzJsdmJpaDBjblZsTENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLVnh5WEc0Z0lHbG1JQ2gwYUdsekxuUjVjR1VnUFQwOUlIUjBMbDlwYmlCOGZDQW9kR2hwY3k1dmNIUnBiMjV6TG1WamJXRldaWEp6YVc5dUlENDlJRFlnSmlZZ2RHaHBjeTVwYzBOdmJuUmxlSFIxWVd3b1hDSnZabHdpS1NrcElIdGNjbHh1SUNBZ0lIUm9hWE11WTJobFkydFFZWFIwWlhKdVJYSnliM0p6S0hKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXNJSFJ5ZFdVcFhISmNiaUFnSUNCMGFHbHpMblJ2UVhOemFXZHVZV0pzWlNocGJtbDBLVnh5WEc0Z0lDQWdkR2hwY3k1amFHVmphMHhXWVd3b2FXNXBkQ2xjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGNuTmxSbTl5U1c0b2JtOWtaU3dnYVc1cGRDbGNjbHh1SUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnZEdocGN5NWphR1ZqYTBWNGNISmxjM05wYjI1RmNuSnZjbk1vY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5d2dkSEoxWlNsY2NseHVJQ0I5WEhKY2JpQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVkdiM0lvYm05a1pTd2dhVzVwZENsY2NseHVmVnh5WEc1Y2NseHVjSEFrTVM1d1lYSnpaVVoxYm1OMGFXOXVVM1JoZEdWdFpXNTBJRDBnWm5WdVkzUnBiMjRvYm05a1pTa2dlMXh5WEc0Z0lIUm9hWE11Ym1WNGRDZ3BYSEpjYmlBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z5YzJWR2RXNWpkR2x2YmlodWIyUmxMQ0IwY25WbEtWeHlYRzU5WEhKY2JseHlYRzV3Y0NReExuQmhjbk5sU1daVGRHRjBaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hISmNiaUFnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0J1YjJSbExuUmxjM1FnUFNCMGFHbHpMbkJoY25ObFVHRnlaVzVGZUhCeVpYTnphVzl1S0NsY2NseHVJQ0J1YjJSbExtTnZibk5sY1hWbGJuUWdQU0IwYUdsekxuQmhjbk5sVTNSaGRHVnRaVzUwS0daaGJITmxLVnh5WEc0Z0lHNXZaR1V1WVd4MFpYSnVZWFJsSUQwZ2RHaHBjeTVsWVhRb2RIUXVYMlZzYzJVcElEOGdkR2hwY3k1d1lYSnpaVk4wWVhSbGJXVnVkQ2htWVd4elpTa2dPaUJ1ZFd4c1hISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHViMlJsTENCY0lrbG1VM1JoZEdWdFpXNTBYQ0lwWEhKY2JuMWNjbHh1WEhKY2JuQndKREV1Y0dGeWMyVlNaWFIxY201VGRHRjBaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hISmNiaUFnYVdZZ0tDRjBhR2x6TG1sdVJuVnVZM1JwYjI0Z0ppWWdJWFJvYVhNdWIzQjBhVzl1Y3k1aGJHeHZkMUpsZEhWeWJrOTFkSE5wWkdWR2RXNWpkR2x2YmlsY2NseHVJQ0FnSUhSb2FYTXVjbUZwYzJVb2RHaHBjeTV6ZEdGeWRDd2dYQ0luY21WMGRYSnVKeUJ2ZFhSemFXUmxJRzltSUdaMWJtTjBhVzl1WENJcFhISmNiaUFnZEdocGN5NXVaWGgwS0NsY2NseHVYSEpjYmlBZ0x5OGdTVzRnWUhKbGRIVnlibUFnS0dGdVpDQmdZbkpsWVd0Z0wyQmpiMjUwYVc1MVpXQXBMQ0IwYUdVZ2EyVjVkMjl5WkhNZ2QybDBhRnh5WEc0Z0lDOHZJRzl3ZEdsdmJtRnNJR0Z5WjNWdFpXNTBjeXdnZDJVZ1pXRm5aWEpzZVNCc2IyOXJJR1p2Y2lCaElITmxiV2xqYjJ4dmJpQnZjaUIwYUdWY2NseHVJQ0F2THlCd2IzTnphV0pwYkdsMGVTQjBieUJwYm5ObGNuUWdiMjVsTGx4eVhHNWNjbHh1SUNCcFppQW9kR2hwY3k1bFlYUW9kSFF1YzJWdGFTa2dmSHdnZEdocGN5NXBibk5sY25SVFpXMXBZMjlzYjI0b0tTa2dibTlrWlM1aGNtZDFiV1Z1ZENBOUlHNTFiR3hjY2x4dUlDQmxiSE5sSUhzZ2JtOWtaUzVoY21kMWJXVnVkQ0E5SUhSb2FYTXVjR0Z5YzJWRmVIQnlaWE56YVc5dUtDazdJSFJvYVhNdWMyVnRhV052Ykc5dUtDa2dmVnh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFNXZaR1VvYm05a1pTd2dYQ0pTWlhSMWNtNVRkR0YwWlcxbGJuUmNJaWxjY2x4dWZWeHlYRzVjY2x4dWNIQWtNUzV3WVhKelpWTjNhWFJqYUZOMFlYUmxiV1Z1ZENBOUlHWjFibU4wYVc5dUtHNXZaR1VwSUh0Y2NseHVJQ0IyWVhJZ2RHaHBjeVF4SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0J1YjJSbExtUnBjMk55YVcxcGJtRnVkQ0E5SUhSb2FYTXVjR0Z5YzJWUVlYSmxia1Y0Y0hKbGMzTnBiMjRvS1Z4eVhHNGdJRzV2WkdVdVkyRnpaWE1nUFNCYlhWeHlYRzRnSUhSb2FYTXVaWGh3WldOMEtIUjBMbUp5WVdObFRDbGNjbHh1SUNCMGFHbHpMbXhoWW1Wc2N5NXdkWE5vS0hOM2FYUmphRXhoWW1Wc0tWeHlYRzVjY2x4dUlDQXZMeUJUZEdGMFpXMWxiblJ6SUhWdVpHVnlJRzExYzNRZ1ltVWdaM0p2ZFhCbFpDQW9ZbmtnYkdGaVpXd3BJR2x1SUZOM2FYUmphRU5oYzJWY2NseHVJQ0F2THlCdWIyUmxjeTRnWUdOMWNtQWdhWE1nZFhObFpDQjBieUJyWldWd0lIUm9aU0J1YjJSbElIUm9ZWFFnZDJVZ1lYSmxJR04xY25KbGJuUnNlVnh5WEc0Z0lDOHZJR0ZrWkdsdVp5QnpkR0YwWlcxbGJuUnpJSFJ2TGx4eVhHNWNjbHh1SUNCbWIzSWdLSFpoY2lCamRYSXNJSE5oZDBSbFptRjFiSFFnUFNCbVlXeHpaVHNnZEdocGN5NTBlWEJsSUNFOUlIUjBMbUp5WVdObFVqc3BJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpKREV1ZEhsd1pTQTlQVDBnZEhRdVgyTmhjMlVnZkh3Z2RHaHBjeVF4TG5SNWNHVWdQVDA5SUhSMExsOWtaV1poZFd4MEtTQjdYSEpjYmlBZ0lDQWdJSFpoY2lCcGMwTmhjMlVnUFNCMGFHbHpKREV1ZEhsd1pTQTlQVDBnZEhRdVgyTmhjMlZjY2x4dUlDQWdJQ0FnYVdZZ0tHTjFjaWtnZEdocGN5UXhMbVpwYm1semFFNXZaR1VvWTNWeUxDQmNJbE4zYVhSamFFTmhjMlZjSWlsY2NseHVJQ0FnSUNBZ2JtOWtaUzVqWVhObGN5NXdkWE5vS0dOMWNpQTlJSFJvYVhNa01TNXpkR0Z5ZEU1dlpHVW9LU2xjY2x4dUlDQWdJQ0FnWTNWeUxtTnZibk5sY1hWbGJuUWdQU0JiWFZ4eVhHNGdJQ0FnSUNCMGFHbHpKREV1Ym1WNGRDZ3BYSEpjYmlBZ0lDQWdJR2xtSUNocGMwTmhjMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQmpkWEl1ZEdWemRDQTlJSFJvYVhNa01TNXdZWEp6WlVWNGNISmxjM05wYjI0b0tWeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoellYZEVaV1poZFd4MEtTQjBhR2x6SkRFdWNtRnBjMlZTWldOdmRtVnlZV0pzWlNoMGFHbHpKREV1YkdGemRGUnZhMU4wWVhKMExDQmNJazExYkhScGNHeGxJR1JsWm1GMWJIUWdZMnhoZFhObGMxd2lLVnh5WEc0Z0lDQWdJQ0FnSUhOaGQwUmxabUYxYkhRZ1BTQjBjblZsWEhKY2JpQWdJQ0FnSUNBZ1kzVnlMblJsYzNRZ1BTQnVkV3hzWEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2RHaHBjeVF4TG1WNGNHVmpkQ2gwZEM1amIyeHZiaWxjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJR2xtSUNnaFkzVnlLU0IwYUdsekpERXVkVzVsZUhCbFkzUmxaQ2dwWEhKY2JpQWdJQ0FnSUdOMWNpNWpiMjV6WlhGMVpXNTBMbkIxYzJnb2RHaHBjeVF4TG5CaGNuTmxVM1JoZEdWdFpXNTBLSFJ5ZFdVcEtWeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVJQ0JwWmlBb1kzVnlLU0IwYUdsekxtWnBibWx6YUU1dlpHVW9ZM1Z5TENCY0lsTjNhWFJqYUVOaGMyVmNJaWxjY2x4dUlDQjBhR2x6TG01bGVIUW9LU0F2THlCRGJHOXphVzVuSUdKeVlXTmxYSEpjYmlBZ2RHaHBjeTVzWVdKbGJITXVjRzl3S0NsY2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhPYjJSbEtHNXZaR1VzSUZ3aVUzZHBkR05vVTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZVYUhKdmQxTjBZWFJsYldWdWRDQTlJR1oxYm1OMGFXOXVLRzV2WkdVcElIdGNjbHh1SUNCMGFHbHpMbTVsZUhRb0tWeHlYRzRnSUdsbUlDaHNhVzVsUW5KbFlXc3VkR1Z6ZENoMGFHbHpMbWx1Y0hWMExuTnNhV05sS0hSb2FYTXViR0Z6ZEZSdmEwVnVaQ3dnZEdocGN5NXpkR0Z5ZENrcEtWeHlYRzRnSUNBZ2RHaHBjeTV5WVdselpTaDBhR2x6TG14aGMzUlViMnRGYm1Rc0lGd2lTV3hzWldkaGJDQnVaWGRzYVc1bElHRm1kR1Z5SUhSb2NtOTNYQ0lwWEhKY2JpQWdibTlrWlM1aGNtZDFiV1Z1ZENBOUlIUm9hWE11Y0dGeWMyVkZlSEJ5WlhOemFXOXVLQ2xjY2x4dUlDQjBhR2x6TG5ObGJXbGpiMnh2YmlncFhISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHViMlJsTENCY0lsUm9jbTkzVTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNiaTh2SUZKbGRYTmxaQ0JsYlhCMGVTQmhjbkpoZVNCaFpHUmxaQ0JtYjNJZ2JtOWtaU0JtYVdWc1pITWdkR2hoZENCaGNtVWdZV3gzWVhseklHVnRjSFI1TGx4eVhHNWNjbHh1ZG1GeUlHVnRjSFI1SUQwZ1cxMWNjbHh1WEhKY2JuQndKREV1Y0dGeWMyVlVjbmxUZEdGMFpXMWxiblFnUFNCbWRXNWpkR2x2YmlodWIyUmxLU0I3WEhKY2JpQWdkR2hwY3k1dVpYaDBLQ2xjY2x4dUlDQnViMlJsTG1Kc2IyTnJJRDBnZEdocGN5NXdZWEp6WlVKc2IyTnJLQ2xjY2x4dUlDQnViMlJsTG1oaGJtUnNaWElnUFNCdWRXeHNYSEpjYmlBZ2FXWWdLSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXVYMk5oZEdOb0tTQjdYSEpjYmlBZ0lDQjJZWElnWTJ4aGRYTmxJRDBnZEdocGN5NXpkR0Z5ZEU1dlpHVW9LVnh5WEc0Z0lDQWdkR2hwY3k1dVpYaDBLQ2xjY2x4dUlDQWdJSFJvYVhNdVpYaHdaV04wS0hSMExuQmhjbVZ1VENsY2NseHVJQ0FnSUdOc1lYVnpaUzV3WVhKaGJTQTlJSFJvYVhNdWNHRnljMlZDYVc1a2FXNW5RWFJ2YlNncFhISmNiaUFnSUNCMGFHbHpMbU5vWldOclRGWmhiQ2hqYkdGMWMyVXVjR0Z5WVcwc0lIUnlkV1VwWEhKY2JpQWdJQ0IwYUdsekxtVjRjR1ZqZENoMGRDNXdZWEpsYmxJcFhISmNiaUFnSUNCamJHRjFjMlV1WW05a2VTQTlJSFJvYVhNdWNHRnljMlZDYkc5amF5Z3BYSEpjYmlBZ0lDQnViMlJsTG1oaGJtUnNaWElnUFNCMGFHbHpMbVpwYm1semFFNXZaR1VvWTJ4aGRYTmxMQ0JjSWtOaGRHTm9RMnhoZFhObFhDSXBYSEpjYmlBZ2ZWeHlYRzRnSUc1dlpHVXVabWx1WVd4cGVtVnlJRDBnZEdocGN5NWxZWFFvZEhRdVgyWnBibUZzYkhrcElEOGdkR2hwY3k1d1lYSnpaVUpzYjJOcktDa2dPaUJ1ZFd4c1hISmNiaUFnYVdZZ0tDRnViMlJsTG1oaGJtUnNaWElnSmlZZ0lXNXZaR1V1Wm1sdVlXeHBlbVZ5S1Z4eVhHNGdJQ0FnZEdocGN5NXlZV2x6WlNodWIyUmxMbk4wWVhKMExDQmNJazFwYzNOcGJtY2dZMkYwWTJnZ2IzSWdabWx1WVd4c2VTQmpiR0YxYzJWY0lpbGNjbHh1SUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lGd2lWSEo1VTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZXWVhKVGRHRjBaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpaHViMlJsTENCcmFXNWtLU0I3WEhKY2JpQWdkR2hwY3k1dVpYaDBLQ2xjY2x4dUlDQjBhR2x6TG5CaGNuTmxWbUZ5S0c1dlpHVXNJR1poYkhObExDQnJhVzVrS1Z4eVhHNGdJSFJvYVhNdWMyVnRhV052Ykc5dUtDbGNjbHh1SUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lGd2lWbUZ5YVdGaWJHVkVaV05zWVhKaGRHbHZibHdpS1Z4eVhHNTlYSEpjYmx4eVhHNXdjQ1F4TG5CaGNuTmxWMmhwYkdWVGRHRjBaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hISmNiaUFnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0J1YjJSbExuUmxjM1FnUFNCMGFHbHpMbkJoY25ObFVHRnlaVzVGZUhCeVpYTnphVzl1S0NsY2NseHVJQ0IwYUdsekxteGhZbVZzY3k1d2RYTm9LR3h2YjNCTVlXSmxiQ2xjY2x4dUlDQnViMlJsTG1KdlpIa2dQU0IwYUdsekxuQmhjbk5sVTNSaGRHVnRaVzUwS0daaGJITmxLVnh5WEc0Z0lIUm9hWE11YkdGaVpXeHpMbkJ2Y0NncFhISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHViMlJsTENCY0lsZG9hV3hsVTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZYYVhSb1UzUmhkR1Z0Wlc1MElEMGdablZ1WTNScGIyNG9ibTlrWlNrZ2UxeHlYRzRnSUdsbUlDaDBhR2x6TG5OMGNtbGpkQ2tnZEdocGN5NXlZV2x6WlNoMGFHbHpMbk4wWVhKMExDQmNJaWQzYVhSb0p5QnBiaUJ6ZEhKcFkzUWdiVzlrWlZ3aUtWeHlYRzRnSUhSb2FYTXVibVY0ZENncFhISmNiaUFnYm05a1pTNXZZbXBsWTNRZ1BTQjBhR2x6TG5CaGNuTmxVR0Z5Wlc1RmVIQnlaWE56YVc5dUtDbGNjbHh1SUNCdWIyUmxMbUp2WkhrZ1BTQjBhR2x6TG5CaGNuTmxVM1JoZEdWdFpXNTBLR1poYkhObEtWeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z1hDSlhhWFJvVTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZGYlhCMGVWTjBZWFJsYldWdWRDQTlJR1oxYm1OMGFXOXVLRzV2WkdVcElIdGNjbHh1SUNCMGFHbHpMbTVsZUhRb0tWeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z1hDSkZiWEIwZVZOMFlYUmxiV1Z1ZEZ3aUtWeHlYRzU5WEhKY2JseHlYRzV3Y0NReExuQmhjbk5sVEdGaVpXeGxaRk4wWVhSbGJXVnVkQ0E5SUdaMWJtTjBhVzl1S0c1dlpHVXNJRzFoZVdKbFRtRnRaU3dnWlhod2Npa2dlMXh5WEc0Z0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFJvYVhNdWJHRmlaV3h6TG14bGJtZDBhRHNnS3l0cEtWeHlYRzRnSUNBZ2FXWWdLSFJvYVhNa01TNXNZV0psYkhOYmFWMHVibUZ0WlNBOVBUMGdiV0Y1WW1WT1lXMWxLU0IwYUdsekpERXVjbUZwYzJVb1pYaHdjaTV6ZEdGeWRDd2dYQ0pNWVdKbGJDQW5YQ0lnS3lCdFlYbGlaVTVoYldVZ0t5QmNJaWNnYVhNZ1lXeHlaV0ZrZVNCa1pXTnNZWEpsWkZ3aUtWeHlYRzRnSUhaaGNpQnJhVzVrSUQwZ2RHaHBjeTUwZVhCbExtbHpURzl2Y0NBL0lGd2liRzl2Y0Z3aUlEb2dkR2hwY3k1MGVYQmxJRDA5UFNCMGRDNWZjM2RwZEdOb0lEOGdYQ0p6ZDJsMFkyaGNJaUE2SUc1MWJHeGNjbHh1SUNCbWIzSWdLSFpoY2lCcEpERWdQU0IwYUdsekxteGhZbVZzY3k1c1pXNW5kR2dnTFNBeE95QnBKREVnUGowZ01Ec2dhU1F4TFMwcElIdGNjbHh1SUNBZ0lIWmhjaUJzWVdKbGJDQTlJSFJvYVhNa01TNXNZV0psYkhOYmFTUXhYVnh5WEc0Z0lDQWdhV1lnS0d4aFltVnNMbk4wWVhSbGJXVnVkRk4wWVhKMElEMDlJRzV2WkdVdWMzUmhjblFwSUh0Y2NseHVJQ0FnSUNBZ2JHRmlaV3d1YzNSaGRHVnRaVzUwVTNSaGNuUWdQU0IwYUdsekpERXVjM1JoY25SY2NseHVJQ0FnSUNBZ2JHRmlaV3d1YTJsdVpDQTlJR3RwYm1SY2NseHVJQ0FnSUgwZ1pXeHpaU0JpY21WaGExeHlYRzRnSUgxY2NseHVJQ0IwYUdsekxteGhZbVZzY3k1d2RYTm9LSHR1WVcxbE9pQnRZWGxpWlU1aGJXVXNJR3RwYm1RNklHdHBibVFzSUhOMFlYUmxiV1Z1ZEZOMFlYSjBPaUIwYUdsekxuTjBZWEowZlNsY2NseHVJQ0J1YjJSbExtSnZaSGtnUFNCMGFHbHpMbkJoY25ObFUzUmhkR1Z0Wlc1MEtIUnlkV1VwWEhKY2JpQWdkR2hwY3k1c1lXSmxiSE11Y0c5d0tDbGNjbHh1SUNCdWIyUmxMbXhoWW1Wc0lEMGdaWGh3Y2x4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTV2WkdVb2JtOWtaU3dnWENKTVlXSmxiR1ZrVTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZGZUhCeVpYTnphVzl1VTNSaGRHVnRaVzUwSUQwZ1puVnVZM1JwYjI0b2JtOWtaU3dnWlhod2Npa2dlMXh5WEc0Z0lHNXZaR1V1Wlhod2NtVnpjMmx2YmlBOUlHVjRjSEpjY2x4dUlDQjBhR2x6TG5ObGJXbGpiMnh2YmlncFhISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHViMlJsTENCY0lrVjRjSEpsYzNOcGIyNVRkR0YwWlcxbGJuUmNJaWxjY2x4dWZWeHlYRzVjY2x4dUx5OGdVR0Z5YzJVZ1lTQnpaVzFwWTI5c2IyNHRaVzVqYkc5elpXUWdZbXh2WTJzZ2IyWWdjM1JoZEdWdFpXNTBjeXdnYUdGdVpHeHBibWNnWUZ3aWRYTmxYSEpjYmk4dklITjBjbWxqZEZ3aVlDQmtaV05zWVhKaGRHbHZibk1nZDJobGJpQmdZV3hzYjNkVGRISnBZM1JnSUdseklIUnlkV1VnS0hWelpXUWdabTl5WEhKY2JpOHZJR1oxYm1OMGFXOXVJR0p2WkdsbGN5a3VYSEpjYmx4eVhHNXdjQ1F4TG5CaGNuTmxRbXh2WTJzZ1BTQm1kVzVqZEdsdmJpaGhiR3h2ZDFOMGNtbGpkQ2tnZTF4eVhHNGdJSFpoY2lCMGFHbHpKREVnUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0IyWVhJZ2JtOWtaU0E5SUhSb2FYTXVjM1JoY25ST2IyUmxLQ2tzSUdacGNuTjBJRDBnZEhKMVpTd2diMnhrVTNSeWFXTjBYSEpjYmlBZ2JtOWtaUzVpYjJSNUlEMGdXMTFjY2x4dUlDQjBhR2x6TG1WNGNHVmpkQ2gwZEM1aWNtRmpaVXdwWEhKY2JpQWdkMmhwYkdVZ0tDRjBhR2x6TG1WaGRDaDBkQzVpY21GalpWSXBLU0I3WEhKY2JpQWdJQ0IyWVhJZ2MzUnRkQ0E5SUhSb2FYTWtNUzV3WVhKelpWTjBZWFJsYldWdWRDaDBjblZsS1Z4eVhHNGdJQ0FnYm05a1pTNWliMlI1TG5CMWMyZ29jM1J0ZENsY2NseHVJQ0FnSUdsbUlDaG1hWEp6ZENBbUppQmhiR3h2ZDFOMGNtbGpkQ0FtSmlCMGFHbHpKREV1YVhOVmMyVlRkSEpwWTNRb2MzUnRkQ2twSUh0Y2NseHVJQ0FnSUNBZ2IyeGtVM1J5YVdOMElEMGdkR2hwY3lReExuTjBjbWxqZEZ4eVhHNGdJQ0FnSUNCMGFHbHpKREV1YzJWMFUzUnlhV04wS0hSb2FYTWtNUzV6ZEhKcFkzUWdQU0IwY25WbEtWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1ptbHljM1FnUFNCbVlXeHpaVnh5WEc0Z0lIMWNjbHh1SUNCcFppQW9iMnhrVTNSeWFXTjBJRDA5UFNCbVlXeHpaU2tnZEdocGN5NXpaWFJUZEhKcFkzUW9abUZzYzJVcFhISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHViMlJsTENCY0lrSnNiMk5yVTNSaGRHVnRaVzUwWENJcFhISmNibjFjY2x4dVhISmNiaTh2SUZCaGNuTmxJR0VnY21WbmRXeGhjaUJnWm05eVlDQnNiMjl3TGlCVWFHVWdaR2x6WVcxaWFXZDFZWFJwYjI0Z1kyOWtaU0JwYmx4eVhHNHZMeUJnY0dGeWMyVlRkR0YwWlcxbGJuUmdJSGRwYkd3Z1lXeHlaV0ZrZVNCb1lYWmxJSEJoY25ObFpDQjBhR1VnYVc1cGRDQnpkR0YwWlcxbGJuUWdiM0pjY2x4dUx5OGdaWGh3Y21WemMybHZiaTVjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZHYjNJZ1BTQm1kVzVqZEdsdmJpaHViMlJsTENCcGJtbDBLU0I3WEhKY2JpQWdibTlrWlM1cGJtbDBJRDBnYVc1cGRGeHlYRzRnSUhSb2FYTXVaWGh3WldOMEtIUjBMbk5sYldrcFhISmNiaUFnYm05a1pTNTBaWE4wSUQwZ2RHaHBjeTUwZVhCbElEMDlQU0IwZEM1elpXMXBJRDhnYm5Wc2JDQTZJSFJvYVhNdWNHRnljMlZGZUhCeVpYTnphVzl1S0NsY2NseHVJQ0IwYUdsekxtVjRjR1ZqZENoMGRDNXpaVzFwS1Z4eVhHNGdJRzV2WkdVdWRYQmtZWFJsSUQwZ2RHaHBjeTUwZVhCbElEMDlQU0IwZEM1d1lYSmxibElnUHlCdWRXeHNJRG9nZEdocGN5NXdZWEp6WlVWNGNISmxjM05wYjI0b0tWeHlYRzRnSUhSb2FYTXVaWGh3WldOMEtIUjBMbkJoY21WdVVpbGNjbHh1SUNCdWIyUmxMbUp2WkhrZ1BTQjBhR2x6TG5CaGNuTmxVM1JoZEdWdFpXNTBLR1poYkhObEtWeHlYRzRnSUhSb2FYTXViR0ZpWld4ekxuQnZjQ2dwWEhKY2JpQWdjbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9UbTlrWlNodWIyUmxMQ0JjSWtadmNsTjBZWFJsYldWdWRGd2lLVnh5WEc1OVhISmNibHh5WEc0dkx5QlFZWEp6WlNCaElHQm1iM0pnTDJCcGJtQWdZVzVrSUdCbWIzSmdMMkJ2Wm1BZ2JHOXZjQ3dnZDJocFkyZ2dZWEpsSUdGc2JXOXpkRnh5WEc0dkx5QnpZVzFsSUdaeWIyMGdjR0Z5YzJWeUozTWdjR1Z5YzNCbFkzUnBkbVV1WEhKY2JseHlYRzV3Y0NReExuQmhjbk5sUm05eVNXNGdQU0JtZFc1amRHbHZiaWh1YjJSbExDQnBibWwwS1NCN1hISmNiaUFnZG1GeUlIUjVjR1VnUFNCMGFHbHpMblI1Y0dVZ1BUMDlJSFIwTGw5cGJpQS9JRndpUm05eVNXNVRkR0YwWlcxbGJuUmNJaUE2SUZ3aVJtOXlUMlpUZEdGMFpXMWxiblJjSWx4eVhHNGdJSFJvYVhNdWJtVjRkQ2dwWEhKY2JpQWdibTlrWlM1c1pXWjBJRDBnYVc1cGRGeHlYRzRnSUc1dlpHVXVjbWxuYUhRZ1BTQjBhR2x6TG5CaGNuTmxSWGh3Y21WemMybHZiaWdwWEhKY2JpQWdkR2hwY3k1bGVIQmxZM1FvZEhRdWNHRnlaVzVTS1Z4eVhHNGdJRzV2WkdVdVltOWtlU0E5SUhSb2FYTXVjR0Z5YzJWVGRHRjBaVzFsYm5Rb1ptRnNjMlVwWEhKY2JpQWdkR2hwY3k1c1lXSmxiSE11Y0c5d0tDbGNjbHh1SUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lIUjVjR1VwWEhKY2JuMWNjbHh1WEhKY2JpOHZJRkJoY25ObElHRWdiR2x6ZENCdlppQjJZWEpwWVdKc1pTQmtaV05zWVhKaGRHbHZibk11WEhKY2JseHlYRzV3Y0NReExuQmhjbk5sVm1GeUlEMGdablZ1WTNScGIyNG9ibTlrWlN3Z2FYTkdiM0lzSUd0cGJtUXBJSHRjY2x4dUlDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdibTlrWlM1a1pXTnNZWEpoZEdsdmJuTWdQU0JiWFZ4eVhHNGdJRzV2WkdVdWEybHVaQ0E5SUd0cGJtUmNjbHh1SUNCbWIzSWdLRHM3S1NCN1hISmNiaUFnSUNCMllYSWdaR1ZqYkNBOUlIUm9hWE1rTVM1emRHRnlkRTV2WkdVb0tWeHlYRzRnSUNBZ2RHaHBjeVF4TG5CaGNuTmxWbUZ5U1dRb1pHVmpiQ2xjY2x4dUlDQWdJR2xtSUNoMGFHbHpKREV1WldGMEtIUjBMbVZ4S1NrZ2UxeHlYRzRnSUNBZ0lDQmtaV05zTG1sdWFYUWdQU0IwYUdsekpERXVjR0Z5YzJWTllYbGlaVUZ6YzJsbmJpaHBjMFp2Y2lsY2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2EybHVaQ0E5UFQwZ1hDSmpiMjV6ZEZ3aUlDWW1JQ0VvZEdocGN5UXhMblI1Y0dVZ1BUMDlJSFIwTGw5cGJpQjhmQ0FvZEdocGN5UXhMbTl3ZEdsdmJuTXVaV050WVZabGNuTnBiMjRnUGowZ05pQW1KaUIwYUdsekpERXVhWE5EYjI1MFpYaDBkV0ZzS0Z3aWIyWmNJaWtwS1NrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6SkRFdWRXNWxlSEJsWTNSbFpDZ3BYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1JsWTJ3dWFXUXVkSGx3WlNBaFBTQmNJa2xrWlc1MGFXWnBaWEpjSWlBbUppQWhLR2x6Um05eUlDWW1JQ2gwYUdsekpERXVkSGx3WlNBOVBUMGdkSFF1WDJsdUlIeDhJSFJvYVhNa01TNXBjME52Ym5SbGVIUjFZV3dvWENKdlpsd2lLU2twS1NCN1hISmNiaUFnSUNBZ0lIUm9hWE1rTVM1eVlXbHpaU2gwYUdsekpERXViR0Z6ZEZSdmEwVnVaQ3dnWENKRGIyMXdiR1Y0SUdKcGJtUnBibWNnY0dGMGRHVnlibk1nY21WeGRXbHlaU0JoYmlCcGJtbDBhV0ZzYVhwaGRHbHZiaUIyWVd4MVpWd2lLVnh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdaR1ZqYkM1cGJtbDBJRDBnYm5Wc2JGeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2JtOWtaUzVrWldOc1lYSmhkR2x2Ym5NdWNIVnphQ2gwYUdsekpERXVabWx1YVhOb1RtOWtaU2hrWldOc0xDQmNJbFpoY21saFlteGxSR1ZqYkdGeVlYUnZjbHdpS1NsY2NseHVJQ0FnSUdsbUlDZ2hkR2hwY3lReExtVmhkQ2gwZEM1amIyMXRZU2twSUdKeVpXRnJYSEpjYmlBZ2ZWeHlYRzRnSUhKbGRIVnliaUJ1YjJSbFhISmNibjFjY2x4dVhISmNibkJ3SkRFdWNHRnljMlZXWVhKSlpDQTlJR1oxYm1OMGFXOXVLR1JsWTJ3cElIdGNjbHh1SUNCa1pXTnNMbWxrSUQwZ2RHaHBjeTV3WVhKelpVSnBibVJwYm1kQmRHOXRLQ2xjY2x4dUlDQjBhR2x6TG1Ob1pXTnJURlpoYkNoa1pXTnNMbWxrTENCMGNuVmxLVnh5WEc1OVhISmNibHh5WEc0dkx5QlFZWEp6WlNCaElHWjFibU4wYVc5dUlHUmxZMnhoY21GMGFXOXVJRzl5SUd4cGRHVnlZV3dnS0dSbGNHVnVaR2x1WnlCdmJpQjBhR1ZjY2x4dUx5OGdZR2x6VTNSaGRHVnRaVzUwWUNCd1lYSmhiV1YwWlhJcExseHlYRzVjY2x4dWNIQWtNUzV3WVhKelpVWjFibU4wYVc5dUlEMGdablZ1WTNScGIyNG9ibTlrWlN3Z2FYTlRkR0YwWlcxbGJuUXNJR0ZzYkc5M1JYaHdjbVZ6YzJsdmJrSnZaSGtwSUh0Y2NseHVJQ0IwYUdsekxtbHVhWFJHZFc1amRHbHZiaWh1YjJSbEtWeHlYRzRnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WldOdFlWWmxjbk5wYjI0Z1BqMGdOaWxjY2x4dUlDQWdJRzV2WkdVdVoyVnVaWEpoZEc5eUlEMGdkR2hwY3k1bFlYUW9kSFF1YzNSaGNpbGNjbHh1SUNCMllYSWdiMnhrU1c1SFpXNGdQU0IwYUdsekxtbHVSMlZ1WlhKaGRHOXlYSEpjYmlBZ2RHaHBjeTVwYmtkbGJtVnlZWFJ2Y2lBOUlHNXZaR1V1WjJWdVpYSmhkRzl5WEhKY2JpQWdhV1lnS0dselUzUmhkR1Z0Wlc1MElIeDhJSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXVibUZ0WlNsY2NseHVJQ0FnSUc1dlpHVXVhV1FnUFNCMGFHbHpMbkJoY25ObFNXUmxiblFvS1Z4eVhHNGdJSFJvYVhNdWNHRnljMlZHZFc1amRHbHZibEJoY21GdGN5aHViMlJsS1Z4eVhHNGdJSFJvYVhNdWNHRnljMlZHZFc1amRHbHZia0p2Wkhrb2JtOWtaU3dnWVd4c2IzZEZlSEJ5WlhOemFXOXVRbTlrZVNsY2NseHVJQ0IwYUdsekxtbHVSMlZ1WlhKaGRHOXlJRDBnYjJ4a1NXNUhaVzVjY2x4dUlDQnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaE9iMlJsS0c1dlpHVXNJR2x6VTNSaGRHVnRaVzUwSUQ4Z1hDSkdkVzVqZEdsdmJrUmxZMnhoY21GMGFXOXVYQ0lnT2lCY0lrWjFibU4wYVc5dVJYaHdjbVZ6YzJsdmJsd2lLVnh5WEc1OVhISmNibHh5WEc1d2NDUXhMbkJoY25ObFJuVnVZM1JwYjI1UVlYSmhiWE1nUFNCbWRXNWpkR2x2YmlodWIyUmxLU0I3WEhKY2JpQWdkR2hwY3k1bGVIQmxZM1FvZEhRdWNHRnlaVzVNS1Z4eVhHNGdJRzV2WkdVdWNHRnlZVzF6SUQwZ2RHaHBjeTV3WVhKelpVSnBibVJwYm1kTWFYTjBLSFIwTG5CaGNtVnVVaXdnWm1Gc2MyVXNJR1poYkhObExDQjBjblZsS1Z4eVhHNTlYSEpjYmx4eVhHNHZMeUJRWVhKelpTQmhJR05zWVhOeklHUmxZMnhoY21GMGFXOXVJRzl5SUd4cGRHVnlZV3dnS0dSbGNHVnVaR2x1WnlCdmJpQjBhR1ZjY2x4dUx5OGdZR2x6VTNSaGRHVnRaVzUwWUNCd1lYSmhiV1YwWlhJcExseHlYRzVjY2x4dWNIQWtNUzV3WVhKelpVTnNZWE56SUQwZ1puVnVZM1JwYjI0b2JtOWtaU3dnYVhOVGRHRjBaVzFsYm5RcElIdGNjbHh1SUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ2RHaHBjeTV1WlhoMEtDbGNjbHh1SUNCMGFHbHpMbkJoY25ObFEyeGhjM05KWkNodWIyUmxMQ0JwYzFOMFlYUmxiV1Z1ZENsY2NseHVJQ0IwYUdsekxuQmhjbk5sUTJ4aGMzTlRkWEJsY2lodWIyUmxLVnh5WEc0Z0lIWmhjaUJqYkdGemMwSnZaSGtnUFNCMGFHbHpMbk4wWVhKMFRtOWtaU2dwWEhKY2JpQWdkbUZ5SUdoaFpFTnZibk4wY25WamRHOXlJRDBnWm1Gc2MyVmNjbHh1SUNCamJHRnpjMEp2WkhrdVltOWtlU0E5SUZ0ZFhISmNiaUFnZEdocGN5NWxlSEJsWTNRb2RIUXVZbkpoWTJWTUtWeHlYRzRnSUhkb2FXeGxJQ2doZEdocGN5NWxZWFFvZEhRdVluSmhZMlZTS1NrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNa01TNWxZWFFvZEhRdWMyVnRhU2twSUdOdmJuUnBiblZsWEhKY2JpQWdJQ0IyWVhJZ2JXVjBhRzlrSUQwZ2RHaHBjeVF4TG5OMFlYSjBUbTlrWlNncFhISmNiaUFnSUNCMllYSWdhWE5IWlc1bGNtRjBiM0lnUFNCMGFHbHpKREV1WldGMEtIUjBMbk4wWVhJcFhISmNiaUFnSUNCMllYSWdhWE5OWVhsaVpWTjBZWFJwWXlBOUlIUm9hWE1rTVM1MGVYQmxJRDA5UFNCMGRDNXVZVzFsSUNZbUlIUm9hWE1rTVM1MllXeDFaU0E5UFQwZ1hDSnpkR0YwYVdOY0lseHlYRzRnSUNBZ2RHaHBjeVF4TG5CaGNuTmxVSEp2Y0dWeWRIbE9ZVzFsS0cxbGRHaHZaQ2xjY2x4dUlDQWdJRzFsZEdodlpDNXpkR0YwYVdNZ1BTQnBjMDFoZVdKbFUzUmhkR2xqSUNZbUlIUm9hWE1rTVM1MGVYQmxJQ0U5UFNCMGRDNXdZWEpsYmt4Y2NseHVJQ0FnSUdsbUlDaHRaWFJvYjJRdWMzUmhkR2xqS1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2hwYzBkbGJtVnlZWFJ2Y2lrZ2RHaHBjeVF4TG5WdVpYaHdaV04wWldRb0tWeHlYRzRnSUNBZ0lDQnBjMGRsYm1WeVlYUnZjaUE5SUhSb2FYTWtNUzVsWVhRb2RIUXVjM1JoY2lsY2NseHVJQ0FnSUNBZ2RHaHBjeVF4TG5CaGNuTmxVSEp2Y0dWeWRIbE9ZVzFsS0cxbGRHaHZaQ2xjY2x4dUlDQWdJSDFjY2x4dUlDQWdJRzFsZEdodlpDNXJhVzVrSUQwZ1hDSnRaWFJvYjJSY0lseHlYRzRnSUNBZ2RtRnlJR2x6UjJWMFUyVjBJRDBnWm1Gc2MyVmNjbHh1SUNBZ0lHbG1JQ2doYldWMGFHOWtMbU52YlhCMWRHVmtLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnJaWGtnUFNCdFpYUm9iMlF1YTJWNU8xeHlYRzRnSUNBZ0lDQnBaaUFvSVdselIyVnVaWEpoZEc5eUlDWW1JR3RsZVM1MGVYQmxJRDA5UFNCY0lrbGtaVzUwYVdacFpYSmNJaUFtSmlCMGFHbHpKREV1ZEhsd1pTQWhQVDBnZEhRdWNHRnlaVzVNSUNZbUlDaHJaWGt1Ym1GdFpTQTlQVDBnWENKblpYUmNJaUI4ZkNCclpYa3VibUZ0WlNBOVBUMGdYQ0p6WlhSY0lpa3BJSHRjY2x4dUlDQWdJQ0FnSUNCcGMwZGxkRk5sZENBOUlIUnlkV1ZjY2x4dUlDQWdJQ0FnSUNCdFpYUm9iMlF1YTJsdVpDQTlJR3RsZVM1dVlXMWxYSEpjYmlBZ0lDQWdJQ0FnYTJWNUlEMGdkR2hwY3lReExuQmhjbk5sVUhKdmNHVnlkSGxPWVcxbEtHMWxkR2h2WkNsY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQnBaaUFvSVcxbGRHaHZaQzV6ZEdGMGFXTWdKaVlnS0d0bGVTNTBlWEJsSUQwOVBTQmNJa2xrWlc1MGFXWnBaWEpjSWlBbUppQnJaWGt1Ym1GdFpTQTlQVDBnWENKamIyNXpkSEoxWTNSdmNsd2lJSHg4WEhKY2JpQWdJQ0FnSUNBZ0lDQnJaWGt1ZEhsd1pTQTlQVDBnWENKTWFYUmxjbUZzWENJZ0ppWWdhMlY1TG5aaGJIVmxJRDA5UFNCY0ltTnZibk4wY25WamRHOXlYQ0lwS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0doaFpFTnZibk4wY25WamRHOXlLU0IwYUdsekpERXVjbUZwYzJVb2EyVjVMbk4wWVhKMExDQmNJa1IxY0d4cFkyRjBaU0JqYjI1emRISjFZM1J2Y2lCcGJpQjBhR1VnYzJGdFpTQmpiR0Z6YzF3aUtWeHlYRzRnSUNBZ0lDQWdJR2xtSUNocGMwZGxkRk5sZENrZ2RHaHBjeVF4TG5KaGFYTmxLR3RsZVM1emRHRnlkQ3dnWENKRGIyNXpkSEoxWTNSdmNpQmpZVzRuZENCb1lYWmxJR2RsZEM5elpYUWdiVzlrYVdacFpYSmNJaWxjY2x4dUlDQWdJQ0FnSUNCcFppQW9hWE5IWlc1bGNtRjBiM0lwSUhSb2FYTWtNUzV5WVdselpTaHJaWGt1YzNSaGNuUXNJRndpUTI5dWMzUnlkV04wYjNJZ1kyRnVKM1FnWW1VZ1lTQm5aVzVsY21GMGIzSmNJaWxjY2x4dUlDQWdJQ0FnSUNCdFpYUm9iMlF1YTJsdVpDQTlJRndpWTI5dWMzUnlkV04wYjNKY0lseHlYRzRnSUNBZ0lDQWdJR2hoWkVOdmJuTjBjblZqZEc5eUlEMGdkSEoxWlZ4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCMGFHbHpKREV1Y0dGeWMyVkRiR0Z6YzAxbGRHaHZaQ2hqYkdGemMwSnZaSGtzSUcxbGRHaHZaQ3dnYVhOSFpXNWxjbUYwYjNJcFhISmNiaUFnSUNCcFppQW9hWE5IWlhSVFpYUXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlIQmhjbUZ0UTI5MWJuUWdQU0J0WlhSb2IyUXVhMmx1WkNBOVBUMGdYQ0puWlhSY0lpQS9JREFnT2lBeFhISmNiaUFnSUNBZ0lHbG1JQ2h0WlhSb2IyUXVkbUZzZFdVdWNHRnlZVzF6TG14bGJtZDBhQ0FoUFQwZ2NHRnlZVzFEYjNWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpkR0Z5ZENBOUlHMWxkR2h2WkM1MllXeDFaUzV6ZEdGeWRGeHlYRzRnSUNBZ0lDQWdJR2xtSUNodFpYUm9iMlF1YTJsdVpDQTlQVDBnWENKblpYUmNJaWxjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE1rTVM1eVlXbHpaVkpsWTI5MlpYSmhZbXhsS0hOMFlYSjBMQ0JjSW1kbGRIUmxjaUJ6YUc5MWJHUWdhR0YyWlNCdWJ5QndZWEpoYlhOY0lpbGNjbHh1SUNBZ0lDQWdJQ0JsYkhObFhISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekpERXVjbUZwYzJWU1pXTnZkbVZ5WVdKc1pTaHpkR0Z5ZEN3Z1hDSnpaWFIwWlhJZ2MyaHZkV3hrSUdoaGRtVWdaWGhoWTNSc2VTQnZibVVnY0dGeVlXMWNJaWxjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCcFppQW9iV1YwYUc5a0xtdHBibVFnUFQwOUlGd2ljMlYwWENJZ0ppWWdiV1YwYUc5a0xuWmhiSFZsTG5CaGNtRnRjMXN3WFM1MGVYQmxJRDA5UFNCY0lsSmxjM1JGYkdWdFpXNTBYQ0lwWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeVF4TG5KaGFYTmxLRzFsZEdodlpDNTJZV3gxWlM1d1lYSmhiWE5iTUYwdWMzUmhjblFzSUZ3aVUyVjBkR1Z5SUdOaGJtNXZkQ0IxYzJVZ2NtVnpkQ0J3WVhKaGJYTmNJaWxjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmlBZ2JtOWtaUzVpYjJSNUlEMGdkR2hwY3k1bWFXNXBjMmhPYjJSbEtHTnNZWE56UW05a2VTd2dYQ0pEYkdGemMwSnZaSGxjSWlsY2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhPYjJSbEtHNXZaR1VzSUdselUzUmhkR1Z0Wlc1MElEOGdYQ0pEYkdGemMwUmxZMnhoY21GMGFXOXVYQ0lnT2lCY0lrTnNZWE56Ulhod2NtVnpjMmx2Ymx3aUtWeHlYRzU5WEhKY2JseHlYRzV3Y0NReExuQmhjbk5sUTJ4aGMzTk5aWFJvYjJRZ1BTQm1kVzVqZEdsdmJpaGpiR0Z6YzBKdlpIa3NJRzFsZEdodlpDd2dhWE5IWlc1bGNtRjBiM0lwSUh0Y2NseHVJQ0J0WlhSb2IyUXVkbUZzZFdVZ1BTQjBhR2x6TG5CaGNuTmxUV1YwYUc5a0tHbHpSMlZ1WlhKaGRHOXlLVnh5WEc0Z0lHTnNZWE56UW05a2VTNWliMlI1TG5CMWMyZ29kR2hwY3k1bWFXNXBjMmhPYjJSbEtHMWxkR2h2WkN3Z1hDSk5aWFJvYjJSRVpXWnBibWwwYVc5dVhDSXBLVnh5WEc1OVhISmNibHh5WEc1d2NDUXhMbkJoY25ObFEyeGhjM05KWkNBOUlHWjFibU4wYVc5dUtHNXZaR1VzSUdselUzUmhkR1Z0Wlc1MEtTQjdYSEpjYmlBZ2JtOWtaUzVwWkNBOUlIUm9hWE11ZEhsd1pTQTlQVDBnZEhRdWJtRnRaU0EvSUhSb2FYTXVjR0Z5YzJWSlpHVnVkQ2dwSURvZ2FYTlRkR0YwWlcxbGJuUWdQeUIwYUdsekxuVnVaWGh3WldOMFpXUW9LU0E2SUc1MWJHeGNjbHh1ZlZ4eVhHNWNjbHh1Y0hBa01TNXdZWEp6WlVOc1lYTnpVM1Z3WlhJZ1BTQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hISmNiaUFnYm05a1pTNXpkWEJsY2tOc1lYTnpJRDBnZEdocGN5NWxZWFFvZEhRdVgyVjRkR1Z1WkhNcElEOGdkR2hwY3k1d1lYSnpaVVY0Y0hKVGRXSnpZM0pwY0hSektDa2dPaUJ1ZFd4c1hISmNibjFjY2x4dVhISmNiaTh2SUZCaGNuTmxjeUJ0YjJSMWJHVWdaWGh3YjNKMElHUmxZMnhoY21GMGFXOXVMbHh5WEc1Y2NseHVjSEFrTVM1d1lYSnpaVVY0Y0c5eWRDQTlJR1oxYm1OMGFXOXVLRzV2WkdVcElIdGNjbHh1SUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ2RHaHBjeTV1WlhoMEtDbGNjbHh1SUNBdkx5QmxlSEJ2Y25RZ0tpQm1jbTl0SUNjdUxpNG5YSEpjYmlBZ2FXWWdLSFJvYVhNdVpXRjBLSFIwTG5OMFlYSXBLU0I3WEhKY2JpQWdJQ0IwYUdsekxtVjRjR1ZqZEVOdmJuUmxlSFIxWVd3b1hDSm1jbTl0WENJcFhISmNiaUFnSUNCdWIyUmxMbk52ZFhKalpTQTlJSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXVjM1J5YVc1bklEOGdkR2hwY3k1d1lYSnpaVVY0Y0hKQmRHOXRLQ2tnT2lCMGFHbHpMblZ1Wlhod1pXTjBaV1FvS1Z4eVhHNGdJQ0FnZEdocGN5NXpaVzFwWTI5c2IyNG9LVnh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9UbTlrWlNodWIyUmxMQ0JjSWtWNGNHOXlkRUZzYkVSbFkyeGhjbUYwYVc5dVhDSXBYSEpjYmlBZ2ZWeHlYRzRnSUdsbUlDaDBhR2x6TG1WaGRDaDBkQzVmWkdWbVlYVnNkQ2twSUhzZ0x5OGdaWGh3YjNKMElHUmxabUYxYkhRZ0xpNHVYSEpjYmlBZ0lDQjJZWElnY0dGeVpXNXpJRDBnZEdocGN5NTBlWEJsSUQwOUlIUjBMbkJoY21WdVRGeHlYRzRnSUNBZ2RtRnlJR1Y0Y0hJZ1BTQjBhR2x6TG5CaGNuTmxUV0Y1WW1WQmMzTnBaMjRvS1Z4eVhHNGdJQ0FnZG1GeUlHNWxaV1J6VTJWdGFTQTlJSFJ5ZFdWY2NseHVJQ0FnSUdsbUlDZ2hjR0Z5Wlc1eklDWW1JQ2hsZUhCeUxuUjVjR1VnUFQwZ1hDSkdkVzVqZEdsdmJrVjRjSEpsYzNOcGIyNWNJaUI4ZkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0hJdWRIbHdaU0E5UFNCY0lrTnNZWE56Ulhod2NtVnpjMmx2Ymx3aUtTa2dlMXh5WEc0Z0lDQWdJQ0J1WldWa2MxTmxiV2tnUFNCbVlXeHpaVnh5WEc0Z0lDQWdJQ0JwWmlBb1pYaHdjaTVwWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR1Y0Y0hJdWRIbHdaU0E5SUdWNGNISXVkSGx3WlNBOVBTQmNJa1oxYm1OMGFXOXVSWGh3Y21WemMybHZibHdpWEhKY2JpQWdJQ0FnSUNBZ0lDQS9JRndpUm5WdVkzUnBiMjVFWldOc1lYSmhkR2x2Ymx3aVhISmNiaUFnSUNBZ0lDQWdJQ0E2SUZ3aVEyeGhjM05FWldOc1lYSmhkR2x2Ymx3aVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHNXZaR1V1WkdWamJHRnlZWFJwYjI0Z1BTQmxlSEJ5WEhKY2JpQWdJQ0JwWmlBb2JtVmxaSE5UWlcxcEtTQjBhR2x6TG5ObGJXbGpiMnh2YmlncFhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lGd2lSWGh3YjNKMFJHVm1ZWFZzZEVSbFkyeGhjbUYwYVc5dVhDSXBYSEpjYmlBZ2ZWeHlYRzRnSUM4dklHVjRjRzl5ZENCMllYSjhZMjl1YzNSOGJHVjBmR1oxYm1OMGFXOXVmR05zWVhOeklDNHVMbHh5WEc0Z0lHbG1JQ2gwYUdsekxuTm9iM1ZzWkZCaGNuTmxSWGh3YjNKMFUzUmhkR1Z0Wlc1MEtDa3BJSHRjY2x4dUlDQWdJRzV2WkdVdVpHVmpiR0Z5WVhScGIyNGdQU0IwYUdsekxuQmhjbk5sVTNSaGRHVnRaVzUwS0hSeWRXVXBYSEpjYmlBZ0lDQnViMlJsTG5Od1pXTnBabWxsY25NZ1BTQmJYVnh5WEc0Z0lDQWdibTlrWlM1emIzVnlZMlVnUFNCdWRXeHNYSEpjYmlBZ2ZTQmxiSE5sSUhzZ0x5OGdaWGh3YjNKMElIc2dlQ3dnZVNCaGN5QjZJSDBnVzJaeWIyMGdKeTR1TGlkZFhISmNiaUFnSUNCdWIyUmxMbVJsWTJ4aGNtRjBhVzl1SUQwZ2JuVnNiRnh5WEc0Z0lDQWdibTlrWlM1emNHVmphV1pwWlhKeklEMGdkR2hwY3k1d1lYSnpaVVY0Y0c5eWRGTndaV05wWm1sbGNuTW9LVnh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVaV0YwUTI5dWRHVjRkSFZoYkNoY0ltWnliMjFjSWlrcElIdGNjbHh1SUNBZ0lDQWdibTlrWlM1emIzVnlZMlVnUFNCMGFHbHpMblI1Y0dVZ1BUMDlJSFIwTG5OMGNtbHVaeUEvSUhSb2FYTXVjR0Z5YzJWRmVIQnlRWFJ2YlNncElEb2dkR2hwY3k1MWJtVjRjR1ZqZEdWa0tDbGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDOHZJR05vWldOcklHWnZjaUJyWlhsM2IzSmtjeUIxYzJWa0lHRnpJR3h2WTJGc0lHNWhiV1Z6WEhKY2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JtOWtaUzV6Y0dWamFXWnBaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE1rTVM1clpYbDNiM0prY3k1MFpYTjBLRzV2WkdVdWMzQmxZMmxtYVdWeWMxdHBYUzVzYjJOaGJDNXVZVzFsS1NCOGZDQjBhR2x6SkRFdWNtVnpaWEoyWldSWGIzSmtjeTUwWlhOMEtHNXZaR1V1YzNCbFkybG1hV1Z5YzF0cFhTNXNiMk5oYkM1dVlXMWxLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3lReExuVnVaWGh3WldOMFpXUW9ibTlrWlM1emNHVmphV1pwWlhKelcybGRMbXh2WTJGc0xuTjBZWEowS1Z4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2JtOWtaUzV6YjNWeVkyVWdQU0J1ZFd4c1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMGFHbHpMbk5sYldsamIyeHZiaWdwWEhKY2JpQWdmVnh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFNXZaR1VvYm05a1pTd2dYQ0pGZUhCdmNuUk9ZVzFsWkVSbFkyeGhjbUYwYVc5dVhDSXBYSEpjYm4xY2NseHVYSEpjYm5Cd0pERXVjMmh2ZFd4a1VHRnljMlZGZUhCdmNuUlRkR0YwWlcxbGJuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1MGVYQmxMbXRsZVhkdmNtUWdmSHdnZEdocGN5NXBjMHhsZENncFhISmNibjFjY2x4dVhISmNiaTh2SUZCaGNuTmxjeUJoSUdOdmJXMWhMWE5sY0dGeVlYUmxaQ0JzYVhOMElHOW1JRzF2WkhWc1pTQmxlSEJ2Y25SekxseHlYRzVjY2x4dWNIQWtNUzV3WVhKelpVVjRjRzl5ZEZOd1pXTnBabWxsY25NZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdkbUZ5SUc1dlpHVnpJRDBnVzEwc0lHWnBjbk4wSUQwZ2RISjFaVnh5WEc0Z0lDOHZJR1Y0Y0c5eWRDQjdJSGdzSUhrZ1lYTWdlaUI5SUZ0bWNtOXRJQ2N1TGk0blhWeHlYRzRnSUhSb2FYTXVaWGh3WldOMEtIUjBMbUp5WVdObFRDbGNjbHh1SUNCM2FHbHNaU0FvSVhSb2FYTXVaV0YwS0hSMExtSnlZV05sVWlrcElIdGNjbHh1SUNBZ0lHbG1JQ2doWm1seWMzUXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5UXhMbVY0Y0dWamRDaDBkQzVqYjIxdFlTbGNjbHh1SUNBZ0lDQWdhV1lnS0hSb2FYTWtNUzVoWm5SbGNsUnlZV2xzYVc1blEyOXRiV0VvZEhRdVluSmhZMlZTS1NrZ1luSmxZV3RjY2x4dUlDQWdJSDBnWld4elpTQm1hWEp6ZENBOUlHWmhiSE5sWEhKY2JseHlYRzRnSUNBZ2RtRnlJRzV2WkdVZ1BTQjBhR2x6SkRFdWMzUmhjblJPYjJSbEtDbGNjbHh1SUNBZ0lHNXZaR1V1Ykc5allXd2dQU0IwYUdsekpERXVjR0Z5YzJWSlpHVnVkQ2gwYUdsekpERXVkSGx3WlNBOVBUMGdkSFF1WDJSbFptRjFiSFFwWEhKY2JpQWdJQ0J1YjJSbExtVjRjRzl5ZEdWa0lEMGdkR2hwY3lReExtVmhkRU52Ym5SbGVIUjFZV3dvWENKaGMxd2lLU0EvSUhSb2FYTWtNUzV3WVhKelpVbGtaVzUwS0hSeWRXVXBJRG9nYm05a1pTNXNiMk5oYkZ4eVhHNGdJQ0FnYm05a1pYTXVjSFZ6YUNoMGFHbHpKREV1Wm1sdWFYTm9UbTlrWlNodWIyUmxMQ0JjSWtWNGNHOXlkRk53WldOcFptbGxjbHdpS1NsY2NseHVJQ0I5WEhKY2JpQWdjbVYwZFhKdUlHNXZaR1Z6WEhKY2JuMWNjbHh1WEhKY2JpOHZJRkJoY25ObGN5QnBiWEJ2Y25RZ1pHVmpiR0Z5WVhScGIyNHVYSEpjYmx4eVhHNXdjQ1F4TG5CaGNuTmxTVzF3YjNKMElEMGdablZ1WTNScGIyNG9ibTlrWlNrZ2UxeHlYRzRnSUhSb2FYTXVibVY0ZENncFhISmNiaUFnTHk4Z2FXMXdiM0owSUNjdUxpNG5YSEpjYmlBZ2FXWWdLSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXVjM1J5YVc1bktTQjdYSEpjYmlBZ0lDQnViMlJsTG5Od1pXTnBabWxsY25NZ1BTQmxiWEIwZVZ4eVhHNGdJQ0FnYm05a1pTNXpiM1Z5WTJVZ1BTQjBhR2x6TG5CaGNuTmxSWGh3Y2tGMGIyMG9LVnh5WEc0Z0lIMGdaV3h6WlNCN1hISmNiaUFnSUNCdWIyUmxMbk53WldOcFptbGxjbk1nUFNCMGFHbHpMbkJoY25ObFNXMXdiM0owVTNCbFkybG1hV1Z5Y3lncFhISmNiaUFnSUNCMGFHbHpMbVY0Y0dWamRFTnZiblJsZUhSMVlXd29YQ0ptY205dFhDSXBYSEpjYmlBZ0lDQnViMlJsTG5OdmRYSmpaU0E5SUhSb2FYTXVkSGx3WlNBOVBUMGdkSFF1YzNSeWFXNW5JRDhnZEdocGN5NXdZWEp6WlVWNGNISkJkRzl0S0NrZ09pQjBhR2x6TG5WdVpYaHdaV04wWldRb0tWeHlYRzRnSUgxY2NseHVJQ0IwYUdsekxuTmxiV2xqYjJ4dmJpZ3BYSEpjYmlBZ2NtVjBkWEp1SUhSb2FYTXVabWx1YVhOb1RtOWtaU2h1YjJSbExDQmNJa2x0Y0c5eWRFUmxZMnhoY21GMGFXOXVYQ0lwWEhKY2JuMWNjbHh1WEhKY2JpOHZJRkJoY25ObGN5QmhJR052YlcxaExYTmxjR0Z5WVhSbFpDQnNhWE4wSUc5bUlHMXZaSFZzWlNCcGJYQnZjblJ6TGx4eVhHNWNjbHh1Y0hBa01TNXdZWEp6WlVsdGNHOXlkRk53WldOcFptbGxjbk1nUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ2RtRnlJRzV2WkdWeklEMGdXMTBzSUdacGNuTjBJRDBnZEhKMVpWeHlYRzRnSUdsbUlDaDBhR2x6TG5SNWNHVWdQVDA5SUhSMExtNWhiV1VwSUh0Y2NseHVJQ0FnSUM4dklHbHRjRzl5ZENCa1pXWmhkV3gwVDJKcUxDQjdJSGdzSUhrZ1lYTWdlaUI5SUdaeWIyMGdKeTR1TGlkY2NseHVJQ0FnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1Z4eVhHNGdJQ0FnYm05a1pTNXNiMk5oYkNBOUlIUm9hWE11Y0dGeWMyVkpaR1Z1ZENncFhISmNiaUFnSUNCMGFHbHpMbU5vWldOclRGWmhiQ2h1YjJSbExteHZZMkZzTENCMGNuVmxLVnh5WEc0Z0lDQWdibTlrWlhNdWNIVnphQ2gwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z1hDSkpiWEJ2Y25SRVpXWmhkV3gwVTNCbFkybG1hV1Z5WENJcEtWeHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtVmhkQ2gwZEM1amIyMXRZU2twSUhKbGRIVnliaUJ1YjJSbGMxeHlYRzRnSUgxY2NseHVJQ0JwWmlBb2RHaHBjeTUwZVhCbElEMDlQU0IwZEM1emRHRnlLU0I3WEhKY2JpQWdJQ0IyWVhJZ2JtOWtaU1F4SUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1Z4eVhHNGdJQ0FnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0FnSUhSb2FYTXVaWGh3WldOMFEyOXVkR1Y0ZEhWaGJDaGNJbUZ6WENJcFhISmNiaUFnSUNCdWIyUmxKREV1Ykc5allXd2dQU0IwYUdsekxuQmhjbk5sU1dSbGJuUW9LVnh5WEc0Z0lDQWdkR2hwY3k1amFHVmphMHhXWVd3b2JtOWtaU1F4TG14dlkyRnNMQ0IwY25WbEtWeHlYRzRnSUNBZ2JtOWtaWE11Y0hWemFDaDBhR2x6TG1acGJtbHphRTV2WkdVb2JtOWtaU1F4TENCY0lrbHRjRzl5ZEU1aGJXVnpjR0ZqWlZOd1pXTnBabWxsY2x3aUtTbGNjbHh1SUNBZ0lISmxkSFZ5YmlCdWIyUmxjMXh5WEc0Z0lIMWNjbHh1SUNCMGFHbHpMbVY0Y0dWamRDaDBkQzVpY21GalpVd3BYSEpjYmlBZ2QyaHBiR1VnS0NGMGFHbHpMbVZoZENoMGRDNWljbUZqWlZJcEtTQjdYSEpjYmlBZ0lDQnBaaUFvSVdacGNuTjBLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTWtNUzVsZUhCbFkzUW9kSFF1WTI5dGJXRXBYSEpjYmlBZ0lDQWdJR2xtSUNoMGFHbHpKREV1WVdaMFpYSlVjbUZwYkdsdVowTnZiVzFoS0hSMExtSnlZV05sVWlrcElHSnlaV0ZyWEhKY2JpQWdJQ0I5SUdWc2MyVWdabWx5YzNRZ1BTQm1ZV3h6WlZ4eVhHNWNjbHh1SUNBZ0lIWmhjaUJ1YjJSbEpESWdQU0IwYUdsekpERXVjM1JoY25ST2IyUmxLQ2xjY2x4dUlDQWdJRzV2WkdVa01pNXBiWEJ2Y25SbFpDQTlJSFJvYVhNa01TNXdZWEp6WlVsa1pXNTBLSFJ5ZFdVcFhISmNiaUFnSUNCcFppQW9kR2hwY3lReExtVmhkRU52Ym5SbGVIUjFZV3dvWENKaGMxd2lLU2tnZTF4eVhHNGdJQ0FnSUNCdWIyUmxKREl1Ykc5allXd2dQU0IwYUdsekpERXVjR0Z5YzJWSlpHVnVkQ2dwWEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0J1YjJSbEpESXViRzlqWVd3Z1BTQnViMlJsSkRJdWFXMXdiM0owWldSY2NseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNa01TNXBjMHRsZVhkdmNtUW9ibTlrWlNReUxteHZZMkZzTG01aGJXVXBLU0IwYUdsekpERXVkVzVsZUhCbFkzUmxaQ2h1YjJSbEpESXViRzlqWVd3dWMzUmhjblFwWEhKY2JpQWdJQ0FnSUdsbUlDaDBhR2x6SkRFdWNtVnpaWEoyWldSWGIzSmtjMU4wY21samRDNTBaWE4wS0c1dlpHVWtNaTVzYjJOaGJDNXVZVzFsS1NrZ2RHaHBjeVF4TG5KaGFYTmxLRzV2WkdVa01pNXNiMk5oYkM1emRHRnlkQ3dnWENKVWFHVWdhMlY1ZDI5eVpDQW5YQ0lnS3lCdWIyUmxKREl1Ykc5allXd3VibUZ0WlNBcklGd2lKeUJwY3lCeVpYTmxjblpsWkZ3aUtWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2RHaHBjeVF4TG1Ob1pXTnJURlpoYkNodWIyUmxKREl1Ykc5allXd3NJSFJ5ZFdVcFhISmNiaUFnSUNCdWIyUmxjeTV3ZFhOb0tIUm9hWE1rTVM1bWFXNXBjMmhPYjJSbEtHNXZaR1VrTWl3Z1hDSkpiWEJ2Y25SVGNHVmphV1pwWlhKY0lpa3BYSEpjYmlBZ2ZWeHlYRzRnSUhKbGRIVnliaUJ1YjJSbGMxeHlYRzU5WEhKY2JseHlYRzUyWVhJZ2NIQWtNaUE5SUZCaGNuTmxjaTV3Y205MGIzUjVjR1ZjY2x4dVhISmNiaTh2SUVOdmJuWmxjblFnWlhocGMzUnBibWNnWlhod2NtVnpjMmx2YmlCaGRHOXRJSFJ2SUdGemMybG5ibUZpYkdVZ2NHRjBkR1Z5Ymx4eVhHNHZMeUJwWmlCd2IzTnphV0pzWlM1Y2NseHVYSEpjYm5Cd0pESXVkRzlCYzNOcFoyNWhZbXhsSUQwZ1puVnVZM1JwYjI0b2JtOWtaU3dnYVhOQ2FXNWthVzVuS1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WldOdFlWWmxjbk5wYjI0Z1BqMGdOaUFtSmlCdWIyUmxLU0I3WEhKY2JpQWdJQ0J6ZDJsMFkyZ2dLRzV2WkdVdWRIbHdaU2tnZTF4eVhHNGdJQ0FnWTJGelpTQmNJa2xrWlc1MGFXWnBaWEpjSWpwY2NseHVJQ0FnSUdOaGMyVWdYQ0pQWW1wbFkzUlFZWFIwWlhKdVhDSTZYSEpjYmlBZ0lDQmpZWE5sSUZ3aVFYSnlZWGxRWVhSMFpYSnVYQ0k2WEhKY2JpQWdJQ0FnSUdKeVpXRnJYSEpjYmx4eVhHNGdJQ0FnWTJGelpTQmNJazlpYW1WamRFVjRjSEpsYzNOcGIyNWNJanBjY2x4dUlDQWdJQ0FnYm05a1pTNTBlWEJsSUQwZ1hDSlBZbXBsWTNSUVlYUjBaWEp1WENKY2NseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnViMlJsTG5CeWIzQmxjblJwWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjSEp2Y0NBOUlHNXZaR1V1Y0hKdmNHVnlkR2xsYzF0cFhWeHlYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOXdMbXRwYm1RZ0lUMDlJRndpYVc1cGRGd2lLU0IwYUdsekpERXVjbUZwYzJVb2NISnZjQzVyWlhrdWMzUmhjblFzSUZ3aVQySnFaV04wSUhCaGRIUmxjbTRnWTJGdUozUWdZMjl1ZEdGcGJpQm5aWFIwWlhJZ2IzSWdjMlYwZEdWeVhDSXBYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5UXhMblJ2UVhOemFXZHVZV0pzWlNod2NtOXdMblpoYkhWbExDQnBjMEpwYm1ScGJtY3BYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnWW5KbFlXdGNjbHh1WEhKY2JpQWdJQ0JqWVhObElGd2lRWEp5WVhsRmVIQnlaWE56YVc5dVhDSTZYSEpjYmlBZ0lDQWdJRzV2WkdVdWRIbHdaU0E5SUZ3aVFYSnlZWGxRWVhSMFpYSnVYQ0pjY2x4dUlDQWdJQ0FnZEdocGN5NTBiMEZ6YzJsbmJtRmliR1ZNYVhOMEtHNXZaR1V1Wld4bGJXVnVkSE1zSUdselFtbHVaR2x1WnlsY2NseHVJQ0FnSUNBZ1luSmxZV3RjY2x4dVhISmNiaUFnSUNCallYTmxJRndpUVhOemFXZHViV1Z1ZEVWNGNISmxjM05wYjI1Y0lqcGNjbHh1SUNBZ0lDQWdhV1lnS0c1dlpHVXViM0JsY21GMGIzSWdQVDA5SUZ3aVBWd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JtOWtaUzUwZVhCbElEMGdYQ0pCYzNOcFoyNXRaVzUwVUdGMGRHVnlibHdpWEhKY2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUc1dlpHVXViM0JsY21GMGIzSmNjbHh1SUNBZ0lDQWdJQ0F2THlCbVlXeHNjeUIwYUhKdmRXZG9JSFJ2SUVGemMybG5ibTFsYm5SUVlYUjBaWEp1WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WVdselpTaHViMlJsTG14bFpuUXVaVzVrTENCY0lrOXViSGtnSnowbklHOXdaWEpoZEc5eUlHTmhiaUJpWlNCMWMyVmtJR1p2Y2lCemNHVmphV1o1YVc1bklHUmxabUYxYkhRZ2RtRnNkV1V1WENJcFhISmNiaUFnSUNBZ0lDQWdZbkpsWVd0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR05oYzJVZ1hDSkJjM05wWjI1dFpXNTBVR0YwZEdWeWJsd2lPbHh5WEc0Z0lDQWdJQ0JwWmlBb2JtOWtaUzV5YVdkb2RDNTBlWEJsSUQwOVBTQmNJbGxwWld4a1JYaHdjbVZ6YzJsdmJsd2lLVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbUZwYzJVb2JtOWtaUzV5YVdkb2RDNXpkR0Z5ZEN3Z1hDSlphV1ZzWkNCbGVIQnlaWE56YVc5dUlHTmhibTV2ZENCaVpTQmhJR1JsWm1GMWJIUWdkbUZzZFdWY0lpbGNjbHh1SUNBZ0lDQWdZbkpsWVd0Y2NseHVYSEpjYmlBZ0lDQmpZWE5sSUZ3aVVHRnlaVzUwYUdWemFYcGxaRVY0Y0hKbGMzTnBiMjVjSWpwY2NseHVJQ0FnSUNBZ2JtOWtaUzVsZUhCeVpYTnphVzl1SUQwZ2RHaHBjeTUwYjBGemMybG5ibUZpYkdVb2JtOWtaUzVsZUhCeVpYTnphVzl1TENCcGMwSnBibVJwYm1jcFhISmNiaUFnSUNBZ0lHSnlaV0ZyWEhKY2JseHlYRzRnSUNBZ1kyRnpaU0JjSWsxbGJXSmxja1Y0Y0hKbGMzTnBiMjVjSWpwY2NseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzBKcGJtUnBibWNwSUdKeVpXRnJYSEpjYmx4eVhHNGdJQ0FnWkdWbVlYVnNkRHBjY2x4dUlDQWdJQ0FnZEdocGN5NXlZV2x6WlNodWIyUmxMbk4wWVhKMExDQmNJa0Z6YzJsbmJtbHVaeUIwYnlCeWRtRnNkV1ZjSWlsY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JpQWdjbVYwZFhKdUlHNXZaR1ZjY2x4dWZWeHlYRzVjY2x4dUx5OGdRMjl1ZG1WeWRDQnNhWE4wSUc5bUlHVjRjSEpsYzNOcGIyNGdZWFJ2YlhNZ2RHOGdZbWx1WkdsdVp5QnNhWE4wTGx4eVhHNWNjbHh1Y0hBa01pNTBiMEZ6YzJsbmJtRmliR1ZNYVhOMElEMGdablZ1WTNScGIyNG9aWGh3Y2t4cGMzUXNJR2x6UW1sdVpHbHVaeWtnZTF4eVhHNGdJSFpoY2lCMGFHbHpKREVnUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0IyWVhJZ1pXNWtJRDBnWlhod2NreHBjM1F1YkdWdVozUm9YSEpjYmlBZ2FXWWdLR1Z1WkNrZ2UxeHlYRzRnSUNBZ2RtRnlJR3hoYzNRZ1BTQmxlSEJ5VEdsemRGdGxibVFnTFNBeFhWeHlYRzRnSUNBZ2FXWWdLR3hoYzNRZ0ppWWdiR0Z6ZEM1MGVYQmxJRDA5SUZ3aVVtVnpkRVZzWlcxbGJuUmNJaWtnZTF4eVhHNGdJQ0FnSUNBdExXVnVaRnh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hzWVhOMElDWW1JR3hoYzNRdWRIbHdaU0E5UFNCY0lsTndjbVZoWkVWc1pXMWxiblJjSWlrZ2UxeHlYRzRnSUNBZ0lDQnNZWE4wTG5SNWNHVWdQU0JjSWxKbGMzUkZiR1Z0Wlc1MFhDSmNjbHh1SUNBZ0lDQWdkbUZ5SUdGeVp5QTlJR3hoYzNRdVlYSm5kVzFsYm5SY2NseHVJQ0FnSUNBZ2RHaHBjeTUwYjBGemMybG5ibUZpYkdVb1lYSm5MQ0JwYzBKcGJtUnBibWNwWEhKY2JpQWdJQ0FnSUdsbUlDaGhjbWN1ZEhsd1pTQWhQVDBnWENKSlpHVnVkR2xtYVdWeVhDSWdKaVlnWVhKbkxuUjVjR1VnSVQwOUlGd2lUV1Z0WW1WeVJYaHdjbVZ6YzJsdmJsd2lJQ1ltSUdGeVp5NTBlWEJsSUNFOVBTQmNJa0Z5Y21GNVVHRjBkR1Z5Ymx3aUtWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNWxlSEJsWTNSbFpDaGhjbWN1YzNSaGNuUXBYSEpjYmlBZ0lDQWdJQzB0Wlc1a1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhV1lnS0dselFtbHVaR2x1WnlBbUppQnNZWE4wSUNZbUlHeGhjM1F1ZEhsd1pTQTlQVDBnWENKU1pYTjBSV3hsYldWdWRGd2lJQ1ltSUd4aGMzUXVZWEpuZFcxbGJuUXVkSGx3WlNBaFBUMGdYQ0pKWkdWdWRHbG1hV1Z5WENJcFhISmNiaUFnSUNBZ0lIUm9hWE11ZFc1bGVIQmxZM1JsWkNoc1lYTjBMbUZ5WjNWdFpXNTBMbk4wWVhKMEtWeHlYRzRnSUgxY2NseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdWdVpEc2dhU3NyS1NCN1hISmNiaUFnSUNCMllYSWdaV3gwSUQwZ1pYaHdja3hwYzNSYmFWMWNjbHh1SUNBZ0lHbG1JQ2hsYkhRcElIUm9hWE1rTVM1MGIwRnpjMmxuYm1GaWJHVW9aV3gwTENCcGMwSnBibVJwYm1jcFhISmNiaUFnZlZ4eVhHNGdJSEpsZEhWeWJpQmxlSEJ5VEdsemRGeHlYRzU5WEhKY2JseHlYRzR2THlCUVlYSnpaWE1nYzNCeVpXRmtJR1ZzWlcxbGJuUXVYSEpjYmx4eVhHNXdjQ1F5TG5CaGNuTmxVM0J5WldGa0lEMGdablZ1WTNScGIyNG9jbVZtUkdWemRISjFZM1IxY21sdVowVnljbTl5Y3lrZ2UxeHlYRzRnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1Z4eVhHNGdJSFJvYVhNdWJtVjRkQ2dwWEhKY2JpQWdibTlrWlM1aGNtZDFiV1Z1ZENBOUlIUm9hWE11Y0dGeWMyVk5ZWGxpWlVGemMybG5iaWhtWVd4elpTd2djbVZtUkdWemRISjFZM1IxY21sdVowVnljbTl5Y3lsY2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhPYjJSbEtHNXZaR1VzSUZ3aVUzQnlaV0ZrUld4bGJXVnVkRndpS1Z4eVhHNTlYSEpjYmx4eVhHNXdjQ1F5TG5CaGNuTmxVbVZ6ZENBOUlHWjFibU4wYVc5dUtHRnNiRzkzVG05dVNXUmxiblFwSUh0Y2NseHVJQ0IyWVhJZ2JtOWtaU0E5SUhSb2FYTXVjM1JoY25ST2IyUmxLQ2xjY2x4dUlDQjBhR2x6TG01bGVIUW9LVnh5WEc1Y2NseHVJQ0F2THlCU1pYTjBSV3hsYldWdWRDQnBibk5wWkdVZ2IyWWdZU0JtZFc1amRHbHZiaUJ3WVhKaGJXVjBaWElnYlhWemRDQmlaU0JoYmlCcFpHVnVkR2xtYVdWeVhISmNiaUFnYVdZZ0tHRnNiRzkzVG05dVNXUmxiblFwSUc1dlpHVXVZWEpuZFcxbGJuUWdQU0IwYUdsekxuUjVjR1VnUFQwOUlIUjBMbTVoYldVZ1B5QjBhR2x6TG5CaGNuTmxTV1JsYm5Rb0tTQTZJSFJvYVhNdWRXNWxlSEJsWTNSbFpDZ3BYSEpjYmlBZ1pXeHpaU0J1YjJSbExtRnlaM1Z0Wlc1MElEMGdkR2hwY3k1MGVYQmxJRDA5UFNCMGRDNXVZVzFsSUh4OElIUm9hWE11ZEhsd1pTQTlQVDBnZEhRdVluSmhZMnRsZEV3Z1B5QjBhR2x6TG5CaGNuTmxRbWx1WkdsdVowRjBiMjBvS1NBNklIUm9hWE11ZFc1bGVIQmxZM1JsWkNncFhISmNibHh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFNXZaR1VvYm05a1pTd2dYQ0pTWlhOMFJXeGxiV1Z1ZEZ3aUtWeHlYRzU5WEhKY2JseHlYRzR2THlCUVlYSnpaWE1nYkhaaGJIVmxJQ2hoYzNOcFoyNWhZbXhsS1NCaGRHOXRMbHh5WEc1Y2NseHVjSEFrTWk1d1lYSnpaVUpwYm1ScGJtZEJkRzl0SUQwZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1bFkyMWhWbVZ5YzJsdmJpQThJRFlwSUhKbGRIVnliaUIwYUdsekxuQmhjbk5sU1dSbGJuUW9LVnh5WEc0Z0lITjNhWFJqYUNBb2RHaHBjeTUwZVhCbEtTQjdYSEpjYmlBZ1kyRnpaU0IwZEM1dVlXMWxPbHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVkpaR1Z1ZENncFhISmNibHh5WEc0Z0lHTmhjMlVnZEhRdVluSmhZMnRsZEV3NlhISmNiaUFnSUNCMllYSWdibTlrWlNBOUlIUm9hWE11YzNSaGNuUk9iMlJsS0NsY2NseHVJQ0FnSUhSb2FYTXVibVY0ZENncFhISmNiaUFnSUNCdWIyUmxMbVZzWlcxbGJuUnpJRDBnZEdocGN5NXdZWEp6WlVKcGJtUnBibWRNYVhOMEtIUjBMbUp5WVdOclpYUlNMQ0IwY25WbExDQjBjblZsS1Z4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHViMlJsTENCY0lrRnljbUY1VUdGMGRHVnlibHdpS1Z4eVhHNWNjbHh1SUNCallYTmxJSFIwTG1KeVlXTmxURHBjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGNuTmxUMkpxS0hSeWRXVXBYSEpjYmx4eVhHNGdJR1JsWm1GMWJIUTZYSEpjYmlBZ0lDQjBhR2x6TG5WdVpYaHdaV04wWldRb0tWeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVjSEFrTWk1d1lYSnpaVUpwYm1ScGJtZE1hWE4wSUQwZ1puVnVZM1JwYjI0b1kyeHZjMlVzSUdGc2JHOTNSVzF3ZEhrc0lHRnNiRzkzVkhKaGFXeHBibWREYjIxdFlTd2dZV3hzYjNkT2IyNUpaR1Z1ZENrZ2UxeHlYRzRnSUhaaGNpQjBhR2x6SkRFZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNCMllYSWdaV3gwY3lBOUlGdGRMQ0JtYVhKemRDQTlJSFJ5ZFdWY2NseHVJQ0IzYUdsc1pTQW9JWFJvYVhNdVpXRjBLR05zYjNObEtTa2dlMXh5WEc0Z0lDQWdhV1lnS0dacGNuTjBLU0JtYVhKemRDQTlJR1poYkhObFhISmNiaUFnSUNCbGJITmxJSFJvYVhNa01TNWxlSEJsWTNRb2RIUXVZMjl0YldFcFhISmNiaUFnSUNCcFppQW9ZV3hzYjNkRmJYQjBlU0FtSmlCMGFHbHpKREV1ZEhsd1pTQTlQVDBnZEhRdVkyOXRiV0VwSUh0Y2NseHVJQ0FnSUNBZ1pXeDBjeTV3ZFhOb0tHNTFiR3dwWEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dGc2JHOTNWSEpoYVd4cGJtZERiMjF0WVNBbUppQjBhR2x6SkRFdVlXWjBaWEpVY21GcGJHbHVaME52YlcxaEtHTnNiM05sS1NrZ2UxeHlYRzRnSUNBZ0lDQmljbVZoYTF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpKREV1ZEhsd1pTQTlQVDBnZEhRdVpXeHNhWEJ6YVhNcElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUhKbGMzUWdQU0IwYUdsekpERXVjR0Z5YzJWU1pYTjBLR0ZzYkc5M1RtOXVTV1JsYm5RcFhISmNiaUFnSUNBZ0lIUm9hWE1rTVM1d1lYSnpaVUpwYm1ScGJtZE1hWE4wU1hSbGJTaHlaWE4wS1Z4eVhHNGdJQ0FnSUNCbGJIUnpMbkIxYzJnb2NtVnpkQ2xjY2x4dUlDQWdJQ0FnYVdZZ0tIUm9hWE1rTVM1MGVYQmxJRDA5UFNCMGRDNWpiMjF0WVNrZ2RHaHBjeVF4TG5KaGFYTmxLSFJvYVhNa01TNXpkR0Z5ZEN3Z1hDSkRiMjF0WVNCcGN5QnViM1FnY0dWeWJXbDBkR1ZrSUdGbWRHVnlJSFJvWlNCeVpYTjBJR1ZzWlcxbGJuUmNJaWxjY2x4dUlDQWdJQ0FnZEdocGN5UXhMbVY0Y0dWamRDaGpiRzl6WlNsY2NseHVJQ0FnSUNBZ1luSmxZV3RjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJSFpoY2lCbGJHVnRJRDBnZEdocGN5UXhMbkJoY25ObFRXRjVZbVZFWldaaGRXeDBLSFJvYVhNa01TNXpkR0Z5ZEN3Z2RHaHBjeVF4TG5OMFlYSjBURzlqS1Z4eVhHNGdJQ0FnSUNCMGFHbHpKREV1Y0dGeWMyVkNhVzVrYVc1blRHbHpkRWwwWlcwb1pXeGxiU2xjY2x4dUlDQWdJQ0FnWld4MGN5NXdkWE5vS0dWc1pXMHBYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzRnSUhKbGRIVnliaUJsYkhSelhISmNibjFjY2x4dVhISmNibkJ3SkRJdWNHRnljMlZDYVc1a2FXNW5UR2x6ZEVsMFpXMGdQU0JtZFc1amRHbHZiaWh3WVhKaGJTa2dlMXh5WEc0Z0lISmxkSFZ5YmlCd1lYSmhiVnh5WEc1OVhISmNibHh5WEc0dkx5QlFZWEp6WlhNZ1lYTnphV2R1YldWdWRDQndZWFIwWlhKdUlHRnliM1Z1WkNCbmFYWmxiaUJoZEc5dElHbG1JSEJ2YzNOcFlteGxMbHh5WEc1Y2NseHVjSEFrTWk1d1lYSnpaVTFoZVdKbFJHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUtITjBZWEowVUc5ekxDQnpkR0Z5ZEV4dll5d2diR1ZtZENrZ2UxeHlYRzRnSUd4bFpuUWdQU0JzWldaMElIeDhJSFJvYVhNdWNHRnljMlZDYVc1a2FXNW5RWFJ2YlNncFhISmNiaUFnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVsWTIxaFZtVnljMmx2YmlBOElEWWdmSHdnSVhSb2FYTXVaV0YwS0hSMExtVnhLU2tnY21WMGRYSnVJR3hsWm5SY2NseHVJQ0IyWVhJZ2JtOWtaU0E5SUhSb2FYTXVjM1JoY25ST2IyUmxRWFFvYzNSaGNuUlFiM01zSUhOMFlYSjBURzlqS1Z4eVhHNGdJRzV2WkdVdWJHVm1kQ0E5SUd4bFpuUmNjbHh1SUNCdWIyUmxMbkpwWjJoMElEMGdkR2hwY3k1d1lYSnpaVTFoZVdKbFFYTnphV2R1S0NsY2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhPYjJSbEtHNXZaR1VzSUZ3aVFYTnphV2R1YldWdWRGQmhkSFJsY201Y0lpbGNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1ZtVnlhV1o1SUhSb1lYUWdZU0J1YjJSbElHbHpJR0Z1SUd4MllXd2c0b0NVSUhOdmJXVjBhR2x1WnlCMGFHRjBJR05oYmlCaVpTQmhjM05wWjI1bFpGeHlYRzR2THlCMGJ5NWNjbHh1WEhKY2JuQndKREl1WTJobFkydE1WbUZzSUQwZ1puVnVZM1JwYjI0b1pYaHdjaXdnYVhOQ2FXNWthVzVuTENCamFHVmphME5zWVhOb1pYTXBJSHRjY2x4dUlDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdjM2RwZEdOb0lDaGxlSEJ5TG5SNWNHVXBJSHRjY2x4dUlDQmpZWE5sSUZ3aVNXUmxiblJwWm1sbGNsd2lPbHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVjM1J5YVdOMElDWW1JSFJvYVhNdWNtVnpaWEoyWldSWGIzSmtjMU4wY21samRFSnBibVF1ZEdWemRDaGxlSEJ5TG01aGJXVXBLVnh5WEc0Z0lDQWdJQ0IwYUdsekxuSmhhWE5sVW1WamIzWmxjbUZpYkdVb1pYaHdjaTV6ZEdGeWRDd2dLR2x6UW1sdVpHbHVaeUEvSUZ3aVFtbHVaR2x1WnlCY0lpQTZJRndpUVhOemFXZHVhVzVuSUhSdklGd2lLU0FySUdWNGNISXVibUZ0WlNBcklGd2lJR2x1SUhOMGNtbGpkQ0J0YjJSbFhDSXBYSEpjYmlBZ0lDQnBaaUFvWTJobFkydERiR0Z6YUdWektTQjdYSEpjYmlBZ0lDQWdJR2xtSUNob1lYTW9ZMmhsWTJ0RGJHRnphR1Z6TENCbGVIQnlMbTVoYldVcEtWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtRnBjMlZTWldOdmRtVnlZV0pzWlNobGVIQnlMbk4wWVhKMExDQmNJa0Z5WjNWdFpXNTBJRzVoYldVZ1kyeGhjMmhjSWlsY2NseHVJQ0FnSUNBZ1kyaGxZMnREYkdGemFHVnpXMlY0Y0hJdWJtRnRaVjBnUFNCMGNuVmxYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQmljbVZoYTF4eVhHNWNjbHh1SUNCallYTmxJRndpVFdWdFltVnlSWGh3Y21WemMybHZibHdpT2x4eVhHNGdJQ0FnYVdZZ0tHbHpRbWx1WkdsdVp5a2dkR2hwY3k1eVlXbHpaVkpsWTI5MlpYSmhZbXhsS0dWNGNISXVjM1JoY25Rc0lDaHBjMEpwYm1ScGJtY2dQeUJjSWtKcGJtUnBibWRjSWlBNklGd2lRWE56YVdkdWFXNW5JSFJ2WENJcElDc2dYQ0lnYldWdFltVnlJR1Y0Y0hKbGMzTnBiMjVjSWlsY2NseHVJQ0FnSUdKeVpXRnJYSEpjYmx4eVhHNGdJR05oYzJVZ1hDSlBZbXBsWTNSUVlYUjBaWEp1WENJNlhISmNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHVjRjSEl1Y0hKdmNHVnlkR2xsY3k1c1pXNW5kR2c3SUdrckt5bGNjbHh1SUNBZ0lDQWdkR2hwY3lReExtTm9aV05yVEZaaGJDaGxlSEJ5TG5CeWIzQmxjblJwWlhOYmFWMHVkbUZzZFdVc0lHbHpRbWx1WkdsdVp5d2dZMmhsWTJ0RGJHRnphR1Z6S1Z4eVhHNGdJQ0FnWW5KbFlXdGNjbHh1WEhKY2JpQWdZMkZ6WlNCY0lrRnljbUY1VUdGMGRHVnlibHdpT2x4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNReElEMGdNRHNnYVNReElEd2daWGh3Y2k1bGJHVnRaVzUwY3k1c1pXNW5kR2c3SUdra01Tc3JLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQmxiR1Z0SUQwZ1pYaHdjaTVsYkdWdFpXNTBjMXRwSkRGZFhISmNiaUFnSUNBZ0lHbG1JQ2hsYkdWdEtTQjBhR2x6SkRFdVkyaGxZMnRNVm1Gc0tHVnNaVzBzSUdselFtbHVaR2x1Wnl3Z1kyaGxZMnREYkdGemFHVnpLVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdZbkpsWVd0Y2NseHVYSEpjYmlBZ1kyRnpaU0JjSWtGemMybG5ibTFsYm5SUVlYUjBaWEp1WENJNlhISmNiaUFnSUNCMGFHbHpMbU5vWldOclRGWmhiQ2hsZUhCeUxteGxablFzSUdselFtbHVaR2x1Wnl3Z1kyaGxZMnREYkdGemFHVnpLVnh5WEc0Z0lDQWdZbkpsWVd0Y2NseHVYSEpjYmlBZ1kyRnpaU0JjSWxKbGMzUkZiR1Z0Wlc1MFhDSTZYSEpjYmlBZ0lDQjBhR2x6TG1Ob1pXTnJURlpoYkNobGVIQnlMbUZ5WjNWdFpXNTBMQ0JwYzBKcGJtUnBibWNzSUdOb1pXTnJRMnhoYzJobGN5bGNjbHh1SUNBZ0lHSnlaV0ZyWEhKY2JseHlYRzRnSUdOaGMyVWdYQ0pRWVhKbGJuUm9aWE5wZW1Wa1JYaHdjbVZ6YzJsdmJsd2lPbHh5WEc0Z0lDQWdkR2hwY3k1amFHVmphMHhXWVd3b1pYaHdjaTVsZUhCeVpYTnphVzl1TENCcGMwSnBibVJwYm1jc0lHTm9aV05yUTJ4aGMyaGxjeWxjY2x4dUlDQWdJR0p5WldGclhISmNibHh5WEc0Z0lHUmxabUYxYkhRNlhISmNiaUFnSUNCMGFHbHpMbkpoYVhObEtHVjRjSEl1YzNSaGNuUXNJQ2hwYzBKcGJtUnBibWNnUHlCY0lrSnBibVJwYm1kY0lpQTZJRndpUVhOemFXZHVhVzVuSUhSdlhDSXBJQ3NnWENJZ2NuWmhiSFZsWENJcFhISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNTJZWElnY0hBa015QTlJRkJoY25ObGNpNXdjbTkwYjNSNWNHVmNjbHh1WEhKY2JpOHZJRU5vWldOcklHbG1JSEJ5YjNCbGNuUjVJRzVoYldVZ1kyeGhjMmhsY3lCM2FYUm9JR0ZzY21WaFpIa2dZV1JrWldRdVhISmNiaTh2SUU5aWFtVmpkQzlqYkdGemN5Qm5aWFIwWlhKeklHRnVaQ0J6WlhSMFpYSnpJR0Z5WlNCdWIzUWdZV3hzYjNkbFpDQjBieUJqYkdGemFDRGlnSlJjY2x4dUx5OGdaV2wwYUdWeUlIZHBkR2dnWldGamFDQnZkR2hsY2lCdmNpQjNhWFJvSUdGdUlHbHVhWFFnY0hKdmNHVnlkSGtnNG9DVUlHRnVaQ0JwYmx4eVhHNHZMeUJ6ZEhKcFkzUWdiVzlrWlN3Z2FXNXBkQ0J3Y205d1pYSjBhV1Z6SUdGeVpTQmhiSE52SUc1dmRDQmhiR3h2ZDJWa0lIUnZJR0psSUhKbGNHVmhkR1ZrTGx4eVhHNWNjbHh1Y0hBa015NWphR1ZqYTFCeWIzQkRiR0Z6YUNBOUlHWjFibU4wYVc5dUtIQnliM0FzSUhCeWIzQklZWE5vS1NCN1hISmNiaUFnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVsWTIxaFZtVnljMmx2YmlBK1BTQTJJQ1ltSUNod2NtOXdMbU52YlhCMWRHVmtJSHg4SUhCeWIzQXViV1YwYUc5a0lIeDhJSEJ5YjNBdWMyaHZjblJvWVc1a0tTbGNjbHh1SUNBZ0lISmxkSFZ5Ymx4eVhHNGdJSFpoY2lCclpYa2dQU0J3Y205d0xtdGxlVHRjY2x4dUlDQjJZWElnYm1GdFpWeHlYRzRnSUhOM2FYUmphQ0FvYTJWNUxuUjVjR1VwSUh0Y2NseHVJQ0JqWVhObElGd2lTV1JsYm5ScFptbGxjbHdpT2lCdVlXMWxJRDBnYTJWNUxtNWhiV1U3SUdKeVpXRnJYSEpjYmlBZ1kyRnpaU0JjSWt4cGRHVnlZV3hjSWpvZ2JtRnRaU0E5SUZOMGNtbHVaeWhyWlhrdWRtRnNkV1VwT3lCaWNtVmhhMXh5WEc0Z0lHUmxabUYxYkhRNklISmxkSFZ5Ymx4eVhHNGdJSDFjY2x4dUlDQjJZWElnYTJsdVpDQTlJSEJ5YjNBdWEybHVaRHRjY2x4dUlDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtVmpiV0ZXWlhKemFXOXVJRDQ5SURZcElIdGNjbHh1SUNBZ0lHbG1JQ2h1WVcxbElEMDlQU0JjSWw5ZmNISnZkRzlmWDF3aUlDWW1JR3RwYm1RZ1BUMDlJRndpYVc1cGRGd2lLU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaHdjbTl3U0dGemFDNXdjbTkwYnlrZ2RHaHBjeTV5WVdselpWSmxZMjkyWlhKaFlteGxLR3RsZVM1emRHRnlkQ3dnWENKU1pXUmxabWx1YVhScGIyNGdiMllnWDE5d2NtOTBiMTlmSUhCeWIzQmxjblI1WENJcFhISmNiaUFnSUNBZ0lIQnliM0JJWVhOb0xuQnliM1J2SUQwZ2RISjFaVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdVhISmNiaUFnZlZ4eVhHNGdJRzVoYldVZ1BTQmNJaVJjSWlBcklHNWhiV1ZjY2x4dUlDQjJZWElnYjNSb1pYSWdQU0J3Y205d1NHRnphRnR1WVcxbFhWeHlYRzRnSUdsbUlDaHZkR2hsY2lrZ2UxeHlYRzRnSUNBZ2RtRnlJR2x6UjJWMFUyVjBJRDBnYTJsdVpDQWhQVDBnWENKcGJtbDBYQ0pjY2x4dUlDQWdJR2xtSUNnb2RHaHBjeTV6ZEhKcFkzUWdmSHdnYVhOSFpYUlRaWFFwSUNZbUlHOTBhR1Z5VzJ0cGJtUmRJSHg4SUNFb2FYTkhaWFJUWlhRZ1hpQnZkR2hsY2k1cGJtbDBLU2xjY2x4dUlDQWdJQ0FnZEdocGN5NXlZV2x6WlZKbFkyOTJaWEpoWW14bEtHdGxlUzV6ZEdGeWRDd2dYQ0pTWldSbFptbHVhWFJwYjI0Z2IyWWdjSEp2Y0dWeWRIbGNJaWxjY2x4dUlDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ2IzUm9aWElnUFNCd2NtOXdTR0Z6YUZ0dVlXMWxYU0E5SUh0Y2NseHVJQ0FnSUNBZ2FXNXBkRG9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJR2RsZERvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUhObGREb2dabUZzYzJWY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JpQWdiM1JvWlhKYmEybHVaRjBnUFNCMGNuVmxYSEpjYm4xY2NseHVYSEpjYmk4dklDTWpJeUJGZUhCeVpYTnphVzl1SUhCaGNuTnBibWRjY2x4dVhISmNiaTh2SUZSb1pYTmxJRzVsYzNRc0lHWnliMjBnZEdobElHMXZjM1FnWjJWdVpYSmhiQ0JsZUhCeVpYTnphVzl1SUhSNWNHVWdZWFFnZEdobElIUnZjQ0IwYjF4eVhHNHZMeUFuWVhSdmJXbGpKeXdnYm05dVpHbDJhWE5wWW14bElHVjRjSEpsYzNOcGIyNGdkSGx3WlhNZ1lYUWdkR2hsSUdKdmRIUnZiUzRnVFc5emRDQnZabHh5WEc0dkx5QjBhR1VnWm5WdVkzUnBiMjV6SUhkcGJHd2djMmx0Y0d4NUlHeGxkQ0IwYUdVZ1puVnVZM1JwYjI0b2N5a2dZbVZzYjNjZ2RHaGxiU0J3WVhKelpTeGNjbHh1THk4Z1lXNWtMQ0FxYVdZcUlIUm9aU0J6ZVc1MFlXTjBhV01nWTI5dWMzUnlkV04wSUhSb1pYa2dhR0Z1Wkd4bElHbHpJSEJ5WlhObGJuUXNJSGR5WVhCY2NseHVMeThnZEdobElFRlRWQ0J1YjJSbElIUm9ZWFFnZEdobElHbHVibVZ5SUhCaGNuTmxjaUJuWVhabElIUm9aVzBnYVc0Z1lXNXZkR2hsY2lCdWIyUmxMbHh5WEc1Y2NseHVMeThnVUdGeWMyVWdZU0JtZFd4c0lHVjRjSEpsYzNOcGIyNHVJRlJvWlNCdmNIUnBiMjVoYkNCaGNtZDFiV1Z1ZEhNZ1lYSmxJSFZ6WldRZ2RHOWNjbHh1THk4Z1ptOXlZbWxrSUhSb1pTQmdhVzVnSUc5d1pYSmhkRzl5SUNocGJpQm1iM0lnYkc5dmNITWdhVzVwZEdGc2FYcGhkR2x2YmlCbGVIQnlaWE56YVc5dWN5bGNjbHh1THk4Z1lXNWtJSEJ5YjNacFpHVWdjbVZtWlhKbGJtTmxJR1p2Y2lCemRHOXlhVzVuSUNjOUp5QnZjR1Z5WVhSdmNpQnBibk5wWkdVZ2MyaHZjblJvWVc1a1hISmNiaTh2SUhCeWIzQmxjblI1SUdGemMybG5ibTFsYm5RZ2FXNGdZMjl1ZEdWNGRITWdkMmhsY21VZ1ltOTBhQ0J2WW1wbFkzUWdaWGh3Y21WemMybHZibHh5WEc0dkx5QmhibVFnYjJKcVpXTjBJSEJoZEhSbGNtNGdiV2xuYUhRZ1lYQndaV0Z5SUNoemJ5QnBkQ2R6SUhCdmMzTnBZbXhsSUhSdklISmhhWE5sWEhKY2JpOHZJR1JsYkdGNVpXUWdjM2x1ZEdGNElHVnljbTl5SUdGMElHTnZjbkpsWTNRZ2NHOXphWFJwYjI0cExseHlYRzVjY2x4dWNIQWtNeTV3WVhKelpVVjRjSEpsYzNOcGIyNGdQU0JtZFc1amRHbHZiaWh1YjBsdUxDQnlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6S1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUhaaGNpQnpkR0Z5ZEZCdmN5QTlJSFJvYVhNdWMzUmhjblFzSUhOMFlYSjBURzlqSUQwZ2RHaHBjeTV6ZEdGeWRFeHZZMXh5WEc0Z0lIWmhjaUJsZUhCeUlEMGdkR2hwY3k1d1lYSnpaVTFoZVdKbFFYTnphV2R1S0c1dlNXNHNJSEpsWmtSbGMzUnlkV04wZFhKcGJtZEZjbkp2Y25NcFhISmNiaUFnYVdZZ0tIUm9hWE11ZEhsd1pTQTlQVDBnZEhRdVkyOXRiV0VwSUh0Y2NseHVJQ0FnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1ZCZENoemRHRnlkRkJ2Y3l3Z2MzUmhjblJNYjJNcFhISmNiaUFnSUNCdWIyUmxMbVY0Y0hKbGMzTnBiMjV6SUQwZ1cyVjRjSEpkWEhKY2JpQWdJQ0IzYUdsc1pTQW9kR2hwY3k1bFlYUW9kSFF1WTI5dGJXRXBLU0J1YjJSbExtVjRjSEpsYzNOcGIyNXpMbkIxYzJnb2RHaHBjeVF4TG5CaGNuTmxUV0Y1WW1WQmMzTnBaMjRvYm05SmJpd2djbVZtUkdWemRISjFZM1IxY21sdVowVnljbTl5Y3lrcFhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lGd2lVMlZ4ZFdWdVkyVkZlSEJ5WlhOemFXOXVYQ0lwWEhKY2JpQWdmVnh5WEc0Z0lISmxkSFZ5YmlCbGVIQnlYSEpjYm4xY2NseHVYSEpjYmk4dklGQmhjbk5sSUdGdUlHRnpjMmxuYm0xbGJuUWdaWGh3Y21WemMybHZiaTRnVkdocGN5QnBibU5zZFdSbGN5QmhjSEJzYVdOaGRHbHZibk1nYjJaY2NseHVMeThnYjNCbGNtRjBiM0p6SUd4cGEyVWdZQ3M5WUM1Y2NseHVYSEpjYm5Cd0pETXVjR0Z5YzJWTllYbGlaVUZ6YzJsbmJpQTlJR1oxYm1OMGFXOXVLRzV2U1c0c0lISmxaa1JsYzNSeWRXTjBkWEpwYm1kRmNuSnZjbk1zSUdGbWRHVnlUR1ZtZEZCaGNuTmxLU0I3WEhKY2JpQWdhV1lnS0hSb2FYTXVhVzVIWlc1bGNtRjBiM0lnSmlZZ2RHaHBjeTVwYzBOdmJuUmxlSFIxWVd3b1hDSjVhV1ZzWkZ3aUtTa2djbVYwZFhKdUlIUm9hWE11Y0dGeWMyVlphV1ZzWkNncFhISmNibHh5WEc0Z0lIWmhjaUJ2ZDI1RVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKeklEMGdabUZzYzJWY2NseHVJQ0JwWmlBb0lYSmxaa1JsYzNSeWRXTjBkWEpwYm1kRmNuSnZjbk1wSUh0Y2NseHVJQ0FnSUhKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTWdQU0J1WlhjZ1JHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWMxeHlYRzRnSUNBZ2IzZHVSR1Z6ZEhKMVkzUjFjbWx1WjBWeWNtOXljeUE5SUhSeWRXVmNjbHh1SUNCOVhISmNiaUFnZG1GeUlITjBZWEowVUc5eklEMGdkR2hwY3k1emRHRnlkQ3dnYzNSaGNuUk1iMk1nUFNCMGFHbHpMbk4wWVhKMFRHOWpYSEpjYmlBZ2FXWWdLSFJvYVhNdWRIbHdaU0E5UFNCMGRDNXdZWEpsYmt3Z2ZId2dkR2hwY3k1MGVYQmxJRDA5SUhSMExtNWhiV1VwWEhKY2JpQWdJQ0IwYUdsekxuQnZkR1Z1ZEdsaGJFRnljbTkzUVhRZ1BTQjBhR2x6TG5OMFlYSjBYSEpjYmlBZ2RtRnlJR3hsWm5RZ1BTQjBhR2x6TG5CaGNuTmxUV0Y1WW1WRGIyNWthWFJwYjI1aGJDaHViMGx1TENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLVnh5WEc0Z0lHbG1JQ2hoWm5SbGNreGxablJRWVhKelpTa2diR1ZtZENBOUlHRm1kR1Z5VEdWbWRGQmhjbk5sTG1OaGJHd29kR2hwY3l3Z2JHVm1kQ3dnYzNSaGNuUlFiM01zSUhOMFlYSjBURzlqS1Z4eVhHNGdJR2xtSUNoMGFHbHpMblI1Y0dVdWFYTkJjM05wWjI0cElIdGNjbHh1SUNBZ0lIUm9hWE11WTJobFkydFFZWFIwWlhKdVJYSnliM0p6S0hKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXNJSFJ5ZFdVcFhISmNiaUFnSUNCcFppQW9JVzkzYmtSbGMzUnlkV04wZFhKcGJtZEZjbkp2Y25NcElFUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXVZMkZzYkNoeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLVnh5WEc0Z0lDQWdkbUZ5SUc1dlpHVWdQU0IwYUdsekxuTjBZWEowVG05a1pVRjBLSE4wWVhKMFVHOXpMQ0J6ZEdGeWRFeHZZeWxjY2x4dUlDQWdJRzV2WkdVdWIzQmxjbUYwYjNJZ1BTQjBhR2x6TG5aaGJIVmxYSEpjYmlBZ0lDQnViMlJsTG14bFpuUWdQU0IwYUdsekxuUjVjR1VnUFQwOUlIUjBMbVZ4SUQ4Z2RHaHBjeTUwYjBGemMybG5ibUZpYkdVb2JHVm1kQ2tnT2lCc1pXWjBYSEpjYmlBZ0lDQnlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6TG5Ob2IzSjBhR0Z1WkVGemMybG5iaUE5SURBZ0x5OGdjbVZ6WlhRZ1ltVmpZWFZ6WlNCemFHOXlkR2hoYm1RZ1pHVm1ZWFZzZENCM1lYTWdkWE5sWkNCamIzSnlaV04wYkhsY2NseHVJQ0FnSUhSb2FYTXVZMmhsWTJ0TVZtRnNLR3hsWm5RcFhISmNiaUFnSUNCMGFHbHpMbTVsZUhRb0tWeHlYRzRnSUNBZ2JtOWtaUzV5YVdkb2RDQTlJSFJvYVhNdWNHRnljMlZOWVhsaVpVRnpjMmxuYmlodWIwbHVLVnh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9UbTlrWlNodWIyUmxMQ0JjSWtGemMybG5ibTFsYm5SRmVIQnlaWE56YVc5dVhDSXBYSEpjYmlBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUdsbUlDaHZkMjVFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6S1NCMGFHbHpMbU5vWldOclJYaHdjbVZ6YzJsdmJrVnljbTl5Y3loeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpMQ0IwY25WbEtWeHlYRzRnSUgxY2NseHVJQ0J5WlhSMWNtNGdiR1ZtZEZ4eVhHNTlYSEpjYmx4eVhHNHZMeUJRWVhKelpTQmhJSFJsY201aGNua2dZMjl1WkdsMGFXOXVZV3dnS0dBL09tQXBJRzl3WlhKaGRHOXlMbHh5WEc1Y2NseHVjSEFrTXk1d1lYSnpaVTFoZVdKbFEyOXVaR2wwYVc5dVlXd2dQU0JtZFc1amRHbHZiaWh1YjBsdUxDQnlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6S1NCN1hISmNiaUFnZG1GeUlITjBZWEowVUc5eklEMGdkR2hwY3k1emRHRnlkQ3dnYzNSaGNuUk1iMk1nUFNCMGFHbHpMbk4wWVhKMFRHOWpYSEpjYmlBZ2RtRnlJR1Y0Y0hJZ1BTQjBhR2x6TG5CaGNuTmxSWGh3Y2s5d2N5aHViMGx1TENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLVnh5WEc0Z0lHbG1JQ2gwYUdsekxtTm9aV05yUlhod2NtVnpjMmx2YmtWeWNtOXljeWh5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKektTa2djbVYwZFhKdUlHVjRjSEpjY2x4dUlDQnBaaUFvZEdocGN5NWxZWFFvZEhRdWNYVmxjM1JwYjI0cEtTQjdYSEpjYmlBZ0lDQjJZWElnYm05a1pTQTlJSFJvYVhNdWMzUmhjblJPYjJSbFFYUW9jM1JoY25SUWIzTXNJSE4wWVhKMFRHOWpLVnh5WEc0Z0lDQWdibTlrWlM1MFpYTjBJRDBnWlhod2NseHlYRzRnSUNBZ2JtOWtaUzVqYjI1elpYRjFaVzUwSUQwZ2RHaHBjeTV3WVhKelpVMWhlV0psUVhOemFXZHVLQ2xjY2x4dUlDQWdJSFJvYVhNdVpYaHdaV04wS0hSMExtTnZiRzl1S1Z4eVhHNGdJQ0FnYm05a1pTNWhiSFJsY201aGRHVWdQU0IwYUdsekxuQmhjbk5sVFdGNVltVkJjM05wWjI0b2JtOUpiaWxjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTV2WkdVb2JtOWtaU3dnWENKRGIyNWthWFJwYjI1aGJFVjRjSEpsYzNOcGIyNWNJaWxjY2x4dUlDQjlYSEpjYmlBZ2NtVjBkWEp1SUdWNGNISmNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1UzUmhjblFnZEdobElIQnlaV05sWkdWdVkyVWdjR0Z5YzJWeUxseHlYRzVjY2x4dWNIQWtNeTV3WVhKelpVVjRjSEpQY0hNZ1BTQm1kVzVqZEdsdmJpaHViMGx1TENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLU0I3WEhKY2JpQWdkbUZ5SUhOMFlYSjBVRzl6SUQwZ2RHaHBjeTV6ZEdGeWRDd2djM1JoY25STWIyTWdQU0IwYUdsekxuTjBZWEowVEc5alhISmNiaUFnZG1GeUlHVjRjSElnUFNCMGFHbHpMbkJoY25ObFRXRjVZbVZWYm1GeWVTaHlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6TENCbVlXeHpaU2xjY2x4dUlDQnBaaUFvZEdocGN5NWphR1ZqYTBWNGNISmxjM05wYjI1RmNuSnZjbk1vY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5a3BJSEpsZEhWeWJpQmxlSEJ5WEhKY2JpQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVkZlSEJ5VDNBb1pYaHdjaXdnYzNSaGNuUlFiM01zSUhOMFlYSjBURzlqTENBdE1Td2dibTlKYmlsY2NseHVmVnh5WEc1Y2NseHVMeThnVUdGeWMyVWdZbWx1WVhKNUlHOXdaWEpoZEc5eWN5QjNhWFJvSUhSb1pTQnZjR1Z5WVhSdmNpQndjbVZqWldSbGJtTmxJSEJoY25OcGJtZGNjbHh1THk4Z1lXeG5iM0pwZEdodExpQmdiR1ZtZEdBZ2FYTWdkR2hsSUd4bFpuUXRhR0Z1WkNCemFXUmxJRzltSUhSb1pTQnZjR1Z5WVhSdmNpNWNjbHh1THk4Z1lHMXBibEJ5WldOZ0lIQnliM1pwWkdWeklHTnZiblJsZUhRZ2RHaGhkQ0JoYkd4dmQzTWdkR2hsSUdaMWJtTjBhVzl1SUhSdklITjBiM0FnWVc1a1hISmNiaTh2SUdSbFptVnlJR1oxY25Sb1pYSWdjR0Z5YzJWeUlIUnZJRzl1WlNCdlppQnBkSE1nWTJGc2JHVnljeUIzYUdWdUlHbDBJR1Z1WTI5MWJuUmxjbk1nWVc1Y2NseHVMeThnYjNCbGNtRjBiM0lnZEdoaGRDQm9ZWE1nWVNCc2IzZGxjaUJ3Y21WalpXUmxibU5sSUhSb1lXNGdkR2hsSUhObGRDQnBkQ0JwY3lCd1lYSnphVzVuTGx4eVhHNWNjbHh1Y0hBa015NXdZWEp6WlVWNGNISlBjQ0E5SUdaMWJtTjBhVzl1S0d4bFpuUXNJR3hsWm5SVGRHRnlkRkJ2Y3l3Z2JHVm1kRk4wWVhKMFRHOWpMQ0J0YVc1UWNtVmpMQ0J1YjBsdUtTQjdYSEpjYmlBZ2RtRnlJSEJ5WldNZ1BTQjBhR2x6TG5SNWNHVXVZbWx1YjNCY2NseHVJQ0JwWmlBb2NISmxZeUFoUFNCdWRXeHNJQ1ltSUNnaGJtOUpiaUI4ZkNCMGFHbHpMblI1Y0dVZ0lUMDlJSFIwTGw5cGJpa3BJSHRjY2x4dUlDQWdJR2xtSUNod2NtVmpJRDRnYldsdVVISmxZeWtnZTF4eVhHNGdJQ0FnSUNCMllYSWdiRzluYVdOaGJDQTlJSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXViRzluYVdOaGJFOVNJSHg4SUhSb2FYTXVkSGx3WlNBOVBUMGdkSFF1Ykc5bmFXTmhiRUZPUkZ4eVhHNGdJQ0FnSUNCMllYSWdiM0FnUFNCMGFHbHpMblpoYkhWbFhISmNiaUFnSUNBZ0lIUm9hWE11Ym1WNGRDZ3BYSEpjYmlBZ0lDQWdJSFpoY2lCemRHRnlkRkJ2Y3lBOUlIUm9hWE11YzNSaGNuUXNJSE4wWVhKMFRHOWpJRDBnZEdocGN5NXpkR0Z5ZEV4dlkxeHlYRzRnSUNBZ0lDQjJZWElnY21sbmFIUWdQU0IwYUdsekxuQmhjbk5sUlhod2NrOXdLSFJvYVhNdWNHRnljMlZOWVhsaVpWVnVZWEo1S0c1MWJHd3NJR1poYkhObEtTd2djM1JoY25SUWIzTXNJSE4wWVhKMFRHOWpMQ0J3Y21WakxDQnViMGx1S1Z4eVhHNGdJQ0FnSUNCMllYSWdibTlrWlNBOUlIUm9hWE11WW5WcGJHUkNhVzVoY25rb2JHVm1kRk4wWVhKMFVHOXpMQ0JzWldaMFUzUmhjblJNYjJNc0lHeGxablFzSUhKcFoyaDBMQ0J2Y0N3Z2JHOW5hV05oYkNsY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z5YzJWRmVIQnlUM0FvYm05a1pTd2diR1ZtZEZOMFlYSjBVRzl6TENCc1pXWjBVM1JoY25STWIyTXNJRzFwYmxCeVpXTXNJRzV2U1c0cFhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNGdJSEpsZEhWeWJpQnNaV1owWEhKY2JuMWNjbHh1WEhKY2JuQndKRE11WW5WcGJHUkNhVzVoY25rZ1BTQm1kVzVqZEdsdmJpaHpkR0Z5ZEZCdmN5d2djM1JoY25STWIyTXNJR3hsWm5Rc0lISnBaMmgwTENCdmNDd2diRzluYVdOaGJDa2dlMXh5WEc0Z0lIWmhjaUJ1YjJSbElEMGdkR2hwY3k1emRHRnlkRTV2WkdWQmRDaHpkR0Z5ZEZCdmN5d2djM1JoY25STWIyTXBYSEpjYmlBZ2JtOWtaUzVzWldaMElEMGdiR1ZtZEZ4eVhHNGdJRzV2WkdVdWIzQmxjbUYwYjNJZ1BTQnZjRnh5WEc0Z0lHNXZaR1V1Y21sbmFIUWdQU0J5YVdkb2RGeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z2JHOW5hV05oYkNBL0lGd2lURzluYVdOaGJFVjRjSEpsYzNOcGIyNWNJaUE2SUZ3aVFtbHVZWEo1Ulhod2NtVnpjMmx2Ymx3aUtWeHlYRzU5WEhKY2JseHlYRzR2THlCUVlYSnpaU0IxYm1GeWVTQnZjR1Z5WVhSdmNuTXNJR0p2ZEdnZ2NISmxabWw0SUdGdVpDQndiM04wWm1sNExseHlYRzVjY2x4dWNIQWtNeTV3WVhKelpVMWhlV0psVlc1aGNua2dQU0JtZFc1amRHbHZiaWh5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKekxDQnpZWGRWYm1GeWVTa2dlMXh5WEc0Z0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQjJZWElnYzNSaGNuUlFiM01nUFNCMGFHbHpMbk4wWVhKMExDQnpkR0Z5ZEV4dll5QTlJSFJvYVhNdWMzUmhjblJNYjJNc0lHVjRjSEpjY2x4dUlDQnBaaUFvZEdocGN5NTBlWEJsTG5CeVpXWnBlQ2tnZTF4eVhHNGdJQ0FnZG1GeUlHNXZaR1VnUFNCMGFHbHpMbk4wWVhKMFRtOWtaU2dwTENCMWNHUmhkR1VnUFNCMGFHbHpMblI1Y0dVZ1BUMDlJSFIwTG1sdVkwUmxZMXh5WEc0Z0lDQWdibTlrWlM1dmNHVnlZWFJ2Y2lBOUlIUm9hWE11ZG1Gc2RXVmNjbHh1SUNBZ0lHNXZaR1V1Y0hKbFptbDRJRDBnZEhKMVpWeHlYRzRnSUNBZ2RHaHBjeTV1WlhoMEtDbGNjbHh1SUNBZ0lHNXZaR1V1WVhKbmRXMWxiblFnUFNCMGFHbHpMbkJoY25ObFRXRjVZbVZWYm1GeWVTaHVkV3hzTENCMGNuVmxLVnh5WEc0Z0lDQWdkR2hwY3k1amFHVmphMFY0Y0hKbGMzTnBiMjVGY25KdmNuTW9jbVZtUkdWemRISjFZM1IxY21sdVowVnljbTl5Y3l3Z2RISjFaU2xjY2x4dUlDQWdJR2xtSUNoMWNHUmhkR1VwSUhSb2FYTXVZMmhsWTJ0TVZtRnNLRzV2WkdVdVlYSm5kVzFsYm5RcFhISmNiaUFnSUNCbGJITmxJR2xtSUNoMGFHbHpMbk4wY21samRDQW1KaUJ1YjJSbExtOXdaWEpoZEc5eUlEMDlQU0JjSW1SbGJHVjBaVndpSUNZbVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbUZ5WjNWdFpXNTBMblI1Y0dVZ1BUMDlJRndpU1dSbGJuUnBabWxsY2x3aUtWeHlYRzRnSUNBZ0lDQjBhR2x6TG5KaGFYTmxVbVZqYjNabGNtRmliR1VvYm05a1pTNXpkR0Z5ZEN3Z1hDSkVaV3hsZEdsdVp5QnNiMk5oYkNCMllYSnBZV0pzWlNCcGJpQnpkSEpwWTNRZ2JXOWtaVndpS1Z4eVhHNGdJQ0FnWld4elpTQnpZWGRWYm1GeWVTQTlJSFJ5ZFdWY2NseHVJQ0FnSUdWNGNISWdQU0IwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z2RYQmtZWFJsSUQ4Z1hDSlZjR1JoZEdWRmVIQnlaWE56YVc5dVhDSWdPaUJjSWxWdVlYSjVSWGh3Y21WemMybHZibHdpS1Z4eVhHNGdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQmxlSEJ5SUQwZ2RHaHBjeTV3WVhKelpVVjRjSEpUZFdKelkzSnBjSFJ6S0hKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXBYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWphR1ZqYTBWNGNISmxjM05wYjI1RmNuSnZjbk1vY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5a3BJSEpsZEhWeWJpQmxlSEJ5WEhKY2JpQWdJQ0IzYUdsc1pTQW9kR2hwY3k1MGVYQmxMbkJ2YzNSbWFYZ2dKaVlnSVhSb2FYTXVZMkZ1U1c1elpYSjBVMlZ0YVdOdmJHOXVLQ2twSUh0Y2NseHVJQ0FnSUNBZ2RtRnlJRzV2WkdVa01TQTlJSFJvYVhNa01TNXpkR0Z5ZEU1dlpHVkJkQ2h6ZEdGeWRGQnZjeXdnYzNSaGNuUk1iMk1wWEhKY2JpQWdJQ0FnSUc1dlpHVWtNUzV2Y0dWeVlYUnZjaUE5SUhSb2FYTWtNUzUyWVd4MVpWeHlYRzRnSUNBZ0lDQnViMlJsSkRFdWNISmxabWw0SUQwZ1ptRnNjMlZjY2x4dUlDQWdJQ0FnYm05a1pTUXhMbUZ5WjNWdFpXNTBJRDBnWlhod2NseHlYRzRnSUNBZ0lDQjBhR2x6SkRFdVkyaGxZMnRNVm1Gc0tHVjRjSElwWEhKY2JpQWdJQ0FnSUhSb2FYTWtNUzV1WlhoMEtDbGNjbHh1SUNBZ0lDQWdaWGh3Y2lBOUlIUm9hWE1rTVM1bWFXNXBjMmhPYjJSbEtHNXZaR1VrTVN3Z1hDSlZjR1JoZEdWRmVIQnlaWE56YVc5dVhDSXBYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnBaaUFvSVhOaGQxVnVZWEo1SUNZbUlIUm9hWE11WldGMEtIUjBMbk4wWVhKemRHRnlLU2xjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1KMWFXeGtRbWx1WVhKNUtITjBZWEowVUc5ekxDQnpkR0Z5ZEV4dll5d2daWGh3Y2l3Z2RHaHBjeTV3WVhKelpVMWhlV0psVlc1aGNua29iblZzYkN3Z1ptRnNjMlVwTENCY0lpb3FYQ0lzSUdaaGJITmxLVnh5WEc0Z0lHVnNjMlZjY2x4dUlDQWdJSEpsZEhWeWJpQmxlSEJ5WEhKY2JuMWNjbHh1WEhKY2JpOHZJRkJoY25ObElHTmhiR3dzSUdSdmRDd2dZVzVrSUdCYlhXQXRjM1ZpYzJOeWFYQjBJR1Y0Y0hKbGMzTnBiMjV6TGx4eVhHNWNjbHh1Y0hBa015NXdZWEp6WlVWNGNISlRkV0p6WTNKcGNIUnpJRDBnWm5WdVkzUnBiMjRvY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5a2dlMXh5WEc0Z0lIWmhjaUJ6ZEdGeWRGQnZjeUE5SUhSb2FYTXVjM1JoY25Rc0lITjBZWEowVEc5aklEMGdkR2hwY3k1emRHRnlkRXh2WTF4eVhHNGdJSFpoY2lCbGVIQnlJRDBnZEdocGN5NXdZWEp6WlVWNGNISkJkRzl0S0hKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXBYSEpjYmlBZ2RtRnlJSE5yYVhCQmNuSnZkMU4xWW5OamNtbHdkSE1nUFNCbGVIQnlMblI1Y0dVZ1BUMDlJRndpUVhKeWIzZEdkVzVqZEdsdmJrVjRjSEpsYzNOcGIyNWNJaUFtSmlCMGFHbHpMbWx1Y0hWMExuTnNhV05sS0hSb2FYTXViR0Z6ZEZSdmExTjBZWEowTENCMGFHbHpMbXhoYzNSVWIydEZibVFwSUNFOVBTQmNJaWxjSWx4eVhHNGdJR2xtSUNoMGFHbHpMbU5vWldOclJYaHdjbVZ6YzJsdmJrVnljbTl5Y3loeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLU0I4ZkNCemEybHdRWEp5YjNkVGRXSnpZM0pwY0hSektTQnlaWFIxY200Z1pYaHdjbHh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbkJoY25ObFUzVmljMk55YVhCMGN5aGxlSEJ5TENCemRHRnlkRkJ2Y3l3Z2MzUmhjblJNYjJNcFhISmNibjFjY2x4dVhISmNibkJ3SkRNdWNHRnljMlZUZFdKelkzSnBjSFJ6SUQwZ1puVnVZM1JwYjI0b1ltRnpaU3dnYzNSaGNuUlFiM01zSUhOMFlYSjBURzlqTENCdWIwTmhiR3h6S1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUdadmNpQW9PenNwSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6SkRFdVpXRjBLSFIwTG1SdmRDa3BJSHRjY2x4dUlDQWdJQ0FnZG1GeUlHNXZaR1VnUFNCMGFHbHpKREV1YzNSaGNuUk9iMlJsUVhRb2MzUmhjblJRYjNNc0lITjBZWEowVEc5aktWeHlYRzRnSUNBZ0lDQnViMlJsTG05aWFtVmpkQ0E5SUdKaGMyVmNjbHh1SUNBZ0lDQWdibTlrWlM1d2NtOXdaWEowZVNBOUlIUm9hWE1rTVM1d1lYSnpaVWxrWlc1MEtIUnlkV1VwWEhKY2JpQWdJQ0FnSUc1dlpHVXVZMjl0Y0hWMFpXUWdQU0JtWVd4elpWeHlYRzRnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeVF4TG1acGJtbHphRTV2WkdVb2JtOWtaU3dnWENKTlpXMWlaWEpGZUhCeVpYTnphVzl1WENJcFhISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE1rTVM1bFlYUW9kSFF1WW5KaFkydGxkRXdwS1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ1YjJSbEpERWdQU0IwYUdsekpERXVjM1JoY25ST2IyUmxRWFFvYzNSaGNuUlFiM01zSUhOMFlYSjBURzlqS1Z4eVhHNGdJQ0FnSUNCdWIyUmxKREV1YjJKcVpXTjBJRDBnWW1GelpWeHlYRzRnSUNBZ0lDQnViMlJsSkRFdWNISnZjR1Z5ZEhrZ1BTQjBhR2x6SkRFdWNHRnljMlZGZUhCeVpYTnphVzl1S0NsY2NseHVJQ0FnSUNBZ2JtOWtaU1F4TG1OdmJYQjFkR1ZrSUQwZ2RISjFaVnh5WEc0Z0lDQWdJQ0IwYUdsekpERXVaWGh3WldOMEtIUjBMbUp5WVdOclpYUlNLVnh5WEc0Z0lDQWdJQ0JpWVhObElEMGdkR2hwY3lReExtWnBibWx6YUU1dlpHVW9ibTlrWlNReExDQmNJazFsYldKbGNrVjRjSEpsYzNOcGIyNWNJaWxjY2x4dUlDQWdJSDBnWld4elpTQnBaaUFvSVc1dlEyRnNiSE1nSmlZZ2RHaHBjeVF4TG1WaGRDaDBkQzV3WVhKbGJrd3BLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnViMlJsSkRJZ1BTQjBhR2x6SkRFdWMzUmhjblJPYjJSbFFYUW9jM1JoY25SUWIzTXNJSE4wWVhKMFRHOWpLVnh5WEc0Z0lDQWdJQ0J1YjJSbEpESXVZMkZzYkdWbElEMGdZbUZ6WlZ4eVhHNGdJQ0FnSUNCdWIyUmxKREl1WVhKbmRXMWxiblJ6SUQwZ2RHaHBjeVF4TG5CaGNuTmxSWGh3Y2t4cGMzUW9kSFF1Y0dGeVpXNVNMQ0JtWVd4elpTbGNjbHh1SUNBZ0lDQWdZbUZ6WlNBOUlIUm9hWE1rTVM1bWFXNXBjMmhPYjJSbEtHNXZaR1VrTWl3Z1hDSkRZV3hzUlhod2NtVnpjMmx2Ymx3aUtWeHlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6SkRFdWRIbHdaU0E5UFQwZ2RIUXVZbUZqYTFGMWIzUmxLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQnViMlJsSkRNZ1BTQjBhR2x6SkRFdWMzUmhjblJPYjJSbFFYUW9jM1JoY25SUWIzTXNJSE4wWVhKMFRHOWpLVnh5WEc0Z0lDQWdJQ0J1YjJSbEpETXVkR0ZuSUQwZ1ltRnpaVnh5WEc0Z0lDQWdJQ0J1YjJSbEpETXVjWFZoYzJrZ1BTQjBhR2x6SkRFdWNHRnljMlZVWlcxd2JHRjBaU2dwWEhKY2JpQWdJQ0FnSUdKaGMyVWdQU0IwYUdsekpERXVabWx1YVhOb1RtOWtaU2h1YjJSbEpETXNJRndpVkdGbloyVmtWR1Z0Y0d4aGRHVkZlSEJ5WlhOemFXOXVYQ0lwWEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZbUZ6WlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dUx5OGdVR0Z5YzJVZ1lXNGdZWFJ2YldsaklHVjRjSEpsYzNOcGIyNGc0b0NVSUdWcGRHaGxjaUJoSUhOcGJtZHNaU0IwYjJ0bGJpQjBhR0YwSUdseklHRnVYSEpjYmk4dklHVjRjSEpsYzNOcGIyNHNJR0Z1SUdWNGNISmxjM05wYjI0Z2MzUmhjblJsWkNCaWVTQmhJR3RsZVhkdmNtUWdiR2xyWlNCZ1puVnVZM1JwYjI1Z0lHOXlYSEpjYmk4dklHQnVaWGRnTENCdmNpQmhiaUJsZUhCeVpYTnphVzl1SUhkeVlYQndaV1FnYVc0Z2NIVnVZM1IxWVhScGIyNGdiR2xyWlNCZ0tDbGdMQ0JnVzExZ0xGeHlYRzR2THlCdmNpQmdlMzFnTGx4eVhHNWNjbHh1Y0hBa015NXdZWEp6WlVWNGNISkJkRzl0SUQwZ1puVnVZM1JwYjI0b2NtVm1SR1Z6ZEhKMVkzUjFjbWx1WjBWeWNtOXljeWtnZTF4eVhHNGdJSFpoY2lCdWIyUmxMQ0JqWVc1Q1pVRnljbTkzSUQwZ2RHaHBjeTV3YjNSbGJuUnBZV3hCY25KdmQwRjBJRDA5SUhSb2FYTXVjM1JoY25SY2NseHVJQ0J6ZDJsMFkyZ2dLSFJvYVhNdWRIbHdaU2tnZTF4eVhHNGdJR05oYzJVZ2RIUXVYM04xY0dWeU9seHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtbHVSblZ1WTNScGIyNHBYSEpjYmlBZ0lDQWdJSFJvYVhNdWNtRnBjMlVvZEdocGN5NXpkR0Z5ZEN3Z1hDSW5jM1Z3WlhJbklHOTFkSE5wWkdVZ2IyWWdablZ1WTNScGIyNGdiM0lnWTJ4aGMzTmNJaWxjY2x4dVhISmNiaUFnWTJGelpTQjBkQzVmZEdocGN6cGNjbHh1SUNBZ0lIWmhjaUIwZVhCbElEMGdkR2hwY3k1MGVYQmxJRDA5UFNCMGRDNWZkR2hwY3lBL0lGd2lWR2hwYzBWNGNISmxjM05wYjI1Y0lpQTZJRndpVTNWd1pYSmNJbHh5WEc0Z0lDQWdibTlrWlNBOUlIUm9hWE11YzNSaGNuUk9iMlJsS0NsY2NseHVJQ0FnSUhSb2FYTXVibVY0ZENncFhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lIUjVjR1VwWEhKY2JseHlYRzRnSUdOaGMyVWdkSFF1Ym1GdFpUcGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGeWRGQnZjeUE5SUhSb2FYTXVjM1JoY25Rc0lITjBZWEowVEc5aklEMGdkR2hwY3k1emRHRnlkRXh2WTF4eVhHNGdJQ0FnZG1GeUlHbGtJRDBnZEdocGN5NXdZWEp6WlVsa1pXNTBLSFJvYVhNdWRIbHdaU0FoUFQwZ2RIUXVibUZ0WlNsY2NseHVJQ0FnSUdsbUlDaGpZVzVDWlVGeWNtOTNJQ1ltSUNGMGFHbHpMbU5oYmtsdWMyVnlkRk5sYldsamIyeHZiaWdwSUNZbUlIUm9hWE11WldGMEtIUjBMbUZ5Y205M0tTbGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVkJjbkp2ZDBWNGNISmxjM05wYjI0b2RHaHBjeTV6ZEdGeWRFNXZaR1ZCZENoemRHRnlkRkJ2Y3l3Z2MzUmhjblJNYjJNcExDQmJhV1JkS1Z4eVhHNGdJQ0FnY21WMGRYSnVJR2xrWEhKY2JseHlYRzRnSUdOaGMyVWdkSFF1Y21WblpYaHdPbHh5WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnZEdocGN5NTJZV3gxWlZ4eVhHNGdJQ0FnYm05a1pTQTlJSFJvYVhNdWNHRnljMlZNYVhSbGNtRnNLSFpoYkhWbExuWmhiSFZsS1Z4eVhHNGdJQ0FnYm05a1pTNXlaV2RsZUNBOUlIdHdZWFIwWlhKdU9pQjJZV3gxWlM1d1lYUjBaWEp1TENCbWJHRm5jem9nZG1Gc2RXVXVabXhoWjNOOVhISmNiaUFnSUNCeVpYUjFjbTRnYm05a1pWeHlYRzVjY2x4dUlDQmpZWE5sSUhSMExtNTFiVG9nWTJGelpTQjBkQzV6ZEhKcGJtYzZYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVhKelpVeHBkR1Z5WVd3b2RHaHBjeTUyWVd4MVpTbGNjbHh1WEhKY2JpQWdZMkZ6WlNCMGRDNWZiblZzYkRvZ1kyRnpaU0IwZEM1ZmRISjFaVG9nWTJGelpTQjBkQzVmWm1Gc2MyVTZYSEpjYmlBZ0lDQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1Z4eVhHNGdJQ0FnYm05a1pTNTJZV3gxWlNBOUlIUm9hWE11ZEhsd1pTQTlQVDBnZEhRdVgyNTFiR3dnUHlCdWRXeHNJRG9nZEdocGN5NTBlWEJsSUQwOVBTQjBkQzVmZEhKMVpWeHlYRzRnSUNBZ2JtOWtaUzV5WVhjZ1BTQjBhR2x6TG5SNWNHVXVhMlY1ZDI5eVpGeHlYRzRnSUNBZ2RHaHBjeTV1WlhoMEtDbGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFNXZaR1VvYm05a1pTd2dYQ0pNYVhSbGNtRnNYQ0lwWEhKY2JseHlYRzRnSUdOaGMyVWdkSFF1Y0dGeVpXNU1PbHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVlFZWEpsYmtGdVpFUnBjM1JwYm1kMWFYTm9SWGh3Y21WemMybHZiaWhqWVc1Q1pVRnljbTkzS1Z4eVhHNWNjbHh1SUNCallYTmxJSFIwTG1KeVlXTnJaWFJNT2x4eVhHNGdJQ0FnYm05a1pTQTlJSFJvYVhNdWMzUmhjblJPYjJSbEtDbGNjbHh1SUNBZ0lIUm9hWE11Ym1WNGRDZ3BYSEpjYmlBZ0lDQnViMlJsTG1Wc1pXMWxiblJ6SUQwZ2RHaHBjeTV3WVhKelpVVjRjSEpNYVhOMEtIUjBMbUp5WVdOclpYUlNMQ0IwY25WbExDQjBjblZsTENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLVnh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9UbTlrWlNodWIyUmxMQ0JjSWtGeWNtRjVSWGh3Y21WemMybHZibHdpS1Z4eVhHNWNjbHh1SUNCallYTmxJSFIwTG1KeVlXTmxURHBjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGNuTmxUMkpxS0daaGJITmxMQ0J5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKektWeHlYRzVjY2x4dUlDQmpZWE5sSUhSMExsOW1kVzVqZEdsdmJqcGNjbHh1SUNBZ0lHNXZaR1VnUFNCMGFHbHpMbk4wWVhKMFRtOWtaU2dwWEhKY2JpQWdJQ0IwYUdsekxtNWxlSFFvS1Z4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRnljMlZHZFc1amRHbHZiaWh1YjJSbExDQm1ZV3h6WlNsY2NseHVYSEpjYmlBZ1kyRnpaU0IwZEM1ZlkyeGhjM002WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lYSnpaVU5zWVhOektIUm9hWE11YzNSaGNuUk9iMlJsS0Nrc0lHWmhiSE5sS1Z4eVhHNWNjbHh1SUNCallYTmxJSFIwTGw5dVpYYzZYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVhKelpVNWxkeWdwWEhKY2JseHlYRzRnSUdOaGMyVWdkSFF1WW1GamExRjFiM1JsT2x4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRnljMlZVWlcxd2JHRjBaU2dwWEhKY2JseHlYRzRnSUdSbFptRjFiSFE2WEhKY2JpQWdJQ0IwYUdsekxuVnVaWGh3WldOMFpXUW9LVnh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Y0hBa015NXdZWEp6WlV4cGRHVnlZV3dnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4eVhHNGdJSFpoY2lCdWIyUmxJRDBnZEdocGN5NXpkR0Z5ZEU1dlpHVW9LVnh5WEc0Z0lHNXZaR1V1ZG1Gc2RXVWdQU0IyWVd4MVpWeHlYRzRnSUc1dlpHVXVjbUYzSUQwZ2RHaHBjeTVwYm5CMWRDNXpiR2xqWlNoMGFHbHpMbk4wWVhKMExDQjBhR2x6TG1WdVpDbGNjbHh1SUNCMGFHbHpMbTVsZUhRb0tWeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z1hDSk1hWFJsY21Gc1hDSXBYSEpjYm4xY2NseHVYSEpjYm5Cd0pETXVjR0Z5YzJWUVlYSmxia1Y0Y0hKbGMzTnBiMjRnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNCMGFHbHpMbVY0Y0dWamRDaDBkQzV3WVhKbGJrd3BYSEpjYmlBZ2RtRnlJSFpoYkNBOUlIUm9hWE11Y0dGeWMyVkZlSEJ5WlhOemFXOXVLQ2xjY2x4dUlDQjBhR2x6TG1WNGNHVmpkQ2gwZEM1d1lYSmxibElwWEhKY2JpQWdjbVYwZFhKdUlIWmhiRnh5WEc1OVhISmNibHh5WEc1d2NDUXpMbkJoY25ObFVHRnlaVzVCYm1SRWFYTjBhVzVuZFdsemFFVjRjSEpsYzNOcGIyNGdQU0JtZFc1amRHbHZiaWhqWVc1Q1pVRnljbTkzS1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUhaaGNpQnpkR0Z5ZEZCdmN5QTlJSFJvYVhNdWMzUmhjblFzSUhOMFlYSjBURzlqSUQwZ2RHaHBjeTV6ZEdGeWRFeHZZeXdnZG1Gc1hISmNiaUFnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVsWTIxaFZtVnljMmx2YmlBK1BTQTJLU0I3WEhKY2JpQWdJQ0IwYUdsekxtNWxlSFFvS1Z4eVhHNWNjbHh1SUNBZ0lIWmhjaUJwYm01bGNsTjBZWEowVUc5eklEMGdkR2hwY3k1emRHRnlkQ3dnYVc1dVpYSlRkR0Z5ZEV4dll5QTlJSFJvYVhNdWMzUmhjblJNYjJOY2NseHVJQ0FnSUhaaGNpQmxlSEJ5VEdsemRDQTlJRnRkTENCbWFYSnpkQ0E5SUhSeWRXVmNjbHh1SUNBZ0lIWmhjaUJ5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKeklEMGdibVYzSUVSbGMzUnlkV04wZFhKcGJtZEZjbkp2Y25Nc0lITndjbVZoWkZOMFlYSjBMQ0JwYm01bGNsQmhjbVZ1VTNSaGNuUmNjbHh1SUNBZ0lIZG9hV3hsSUNoMGFHbHpMblI1Y0dVZ0lUMDlJSFIwTG5CaGNtVnVVaWtnZTF4eVhHNGdJQ0FnSUNCbWFYSnpkQ0EvSUdacGNuTjBJRDBnWm1Gc2MyVWdPaUIwYUdsekpERXVaWGh3WldOMEtIUjBMbU52YlcxaEtWeHlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5UXhMblI1Y0dVZ1BUMDlJSFIwTG1Wc2JHbHdjMmx6S1NCN1hISmNiaUFnSUNBZ0lDQWdjM0J5WldGa1UzUmhjblFnUFNCMGFHbHpKREV1YzNSaGNuUmNjbHh1SUNBZ0lDQWdJQ0JsZUhCeVRHbHpkQzV3ZFhOb0tIUm9hWE1rTVM1d1lYSnpaVkJoY21WdVNYUmxiU2gwYUdsekpERXVjR0Z5YzJWU1pYTjBLQ2twS1Z4eVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyWEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNa01TNTBlWEJsSUQwOVBTQjBkQzV3WVhKbGJrd2dKaVlnSVdsdWJtVnlVR0Z5Wlc1VGRHRnlkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhVzV1WlhKUVlYSmxibE4wWVhKMElEMGdkR2hwY3lReExuTjBZWEowWEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1Y0Y0hKTWFYTjBMbkIxYzJnb2RHaHBjeVF4TG5CaGNuTmxUV0Y1WW1WQmMzTnBaMjRvWm1Gc2MyVXNJSEpsWmtSbGMzUnlkV04wZFhKcGJtZEZjbkp2Y25Nc0lIUm9hWE1rTVM1d1lYSnpaVkJoY21WdVNYUmxiU2twWEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhaaGNpQnBibTVsY2tWdVpGQnZjeUE5SUhSb2FYTXVjM1JoY25Rc0lHbHVibVZ5Ulc1a1RHOWpJRDBnZEdocGN5NXpkR0Z5ZEV4dlkxeHlYRzRnSUNBZ2RHaHBjeTVsZUhCbFkzUW9kSFF1Y0dGeVpXNVNLVnh5WEc1Y2NseHVJQ0FnSUdsbUlDaGpZVzVDWlVGeWNtOTNJQ1ltSUNGMGFHbHpMbU5oYmtsdWMyVnlkRk5sYldsamIyeHZiaWdwSUNZbUlIUm9hWE11WldGMEtIUjBMbUZ5Y205M0tTa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxtTm9aV05yVUdGMGRHVnlia1Z5Y205eWN5aHlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6TENCMGNuVmxLVnh5WEc0Z0lDQWdJQ0JwWmlBb2FXNXVaWEpRWVhKbGJsTjBZWEowS1NCMGFHbHpMblZ1Wlhod1pXTjBaV1FvYVc1dVpYSlFZWEpsYmxOMFlYSjBLVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lYSnpaVkJoY21WdVFYSnliM2RNYVhOMEtITjBZWEowVUc5ekxDQnpkR0Z5ZEV4dll5d2daWGh3Y2t4cGMzUXBYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmxlSEJ5VEdsemRDNXNaVzVuZEdncElIUm9hWE11ZFc1bGVIQmxZM1JsWkNoMGFHbHpMbXhoYzNSVWIydFRkR0Z5ZENsY2NseHVJQ0FnSUdsbUlDaHpjSEpsWVdSVGRHRnlkQ2tnZEdocGN5NTFibVY0Y0dWamRHVmtLSE53Y21WaFpGTjBZWEowS1Z4eVhHNGdJQ0FnZEdocGN5NWphR1ZqYTBWNGNISmxjM05wYjI1RmNuSnZjbk1vY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5d2dkSEoxWlNsY2NseHVYSEpjYmlBZ0lDQnBaaUFvWlhod2NreHBjM1F1YkdWdVozUm9JRDRnTVNrZ2UxeHlYRzRnSUNBZ0lDQjJZV3dnUFNCMGFHbHpMbk4wWVhKMFRtOWtaVUYwS0dsdWJtVnlVM1JoY25SUWIzTXNJR2x1Ym1WeVUzUmhjblJNYjJNcFhISmNiaUFnSUNBZ0lIWmhiQzVsZUhCeVpYTnphVzl1Y3lBOUlHVjRjSEpNYVhOMFhISmNiaUFnSUNBZ0lIUm9hWE11Wm1sdWFYTm9UbTlrWlVGMEtIWmhiQ3dnWENKVFpYRjFaVzVqWlVWNGNISmxjM05wYjI1Y0lpd2dhVzV1WlhKRmJtUlFiM01zSUdsdWJtVnlSVzVrVEc5aktWeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2RtRnNJRDBnWlhod2NreHBjM1JiTUYxY2NseHVJQ0FnSUgxY2NseHVJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdkbUZzSUQwZ2RHaHBjeTV3WVhKelpWQmhjbVZ1Ulhod2NtVnpjMmx2YmlncFhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG5CeVpYTmxjblpsVUdGeVpXNXpLU0I3WEhKY2JpQWdJQ0IyWVhJZ2NHRnlJRDBnZEdocGN5NXpkR0Z5ZEU1dlpHVkJkQ2h6ZEdGeWRGQnZjeXdnYzNSaGNuUk1iMk1wWEhKY2JpQWdJQ0J3WVhJdVpYaHdjbVZ6YzJsdmJpQTlJSFpoYkZ4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVG05a1pTaHdZWElzSUZ3aVVHRnlaVzUwYUdWemFYcGxaRVY0Y0hKbGMzTnBiMjVjSWlsY2NseHVJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIWmhiRnh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Y0hBa015NXdZWEp6WlZCaGNtVnVTWFJsYlNBOUlHWjFibU4wYVc5dUtHbDBaVzBwSUh0Y2NseHVJQ0J5WlhSMWNtNGdhWFJsYlZ4eVhHNTlYSEpjYmx4eVhHNXdjQ1F6TG5CaGNuTmxVR0Z5Wlc1QmNuSnZkMHhwYzNRZ1BTQm1kVzVqZEdsdmJpaHpkR0Z5ZEZCdmN5d2djM1JoY25STWIyTXNJR1Y0Y0hKTWFYTjBLU0I3WEhKY2JpQWdjbVYwZFhKdUlIUm9hWE11Y0dGeWMyVkJjbkp2ZDBWNGNISmxjM05wYjI0b2RHaHBjeTV6ZEdGeWRFNXZaR1ZCZENoemRHRnlkRkJ2Y3l3Z2MzUmhjblJNYjJNcExDQmxlSEJ5VEdsemRDbGNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1RtVjNKM01nY0hKbFkyVmtaVzVqWlNCcGN5QnpiR2xuYUhSc2VTQjBjbWxqYTNrdUlFbDBJRzExYzNRZ1lXeHNiM2NnYVhSeklHRnlaM1Z0Wlc1MElIUnZYSEpjYmk4dklHSmxJR0VnWUZ0ZFlDQnZjaUJrYjNRZ2MzVmljMk55YVhCMElHVjRjSEpsYzNOcGIyNHNJR0oxZENCdWIzUWdZU0JqWVd4c0lPS0FsQ0JoZENCc1pXRnpkQ3hjY2x4dUx5OGdibTkwSUhkcGRHaHZkWFFnZDNKaGNIQnBibWNnYVhRZ2FXNGdjR0Z5Wlc1MGFHVnpaWE11SUZSb2RYTXNJR2wwSUhWelpYTWdkR2hsSUc1dlEyRnNiSE5jY2x4dUx5OGdZWEpuZFcxbGJuUWdkRzhnY0dGeWMyVlRkV0p6WTNKcGNIUnpJSFJ2SUhCeVpYWmxiblFnYVhRZ1puSnZiU0JqYjI1emRXMXBibWNnZEdobFhISmNiaTh2SUdGeVozVnRaVzUwSUd4cGMzUXVYSEpjYmx4eVhHNTJZWElnWlcxd2RIa2tNU0E5SUZ0ZFhISmNibHh5WEc1d2NDUXpMbkJoY25ObFRtVjNJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnZG1GeUlHNXZaR1VnUFNCMGFHbHpMbk4wWVhKMFRtOWtaU2dwWEhKY2JpQWdkbUZ5SUcxbGRHRWdQU0IwYUdsekxuQmhjbk5sU1dSbGJuUW9kSEoxWlNsY2NseHVJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbVZqYldGV1pYSnphVzl1SUQ0OUlEWWdKaVlnZEdocGN5NWxZWFFvZEhRdVpHOTBLU2tnZTF4eVhHNGdJQ0FnYm05a1pTNXRaWFJoSUQwZ2JXVjBZVnh5WEc0Z0lDQWdibTlrWlM1d2NtOXdaWEowZVNBOUlIUm9hWE11Y0dGeWMyVkpaR1Z1ZENoMGNuVmxLVnh5WEc0Z0lDQWdhV1lnS0c1dlpHVXVjSEp2Y0dWeWRIa3VibUZ0WlNBaFBUMGdYQ0owWVhKblpYUmNJaWxjY2x4dUlDQWdJQ0FnZEdocGN5NXlZV2x6WlZKbFkyOTJaWEpoWW14bEtHNXZaR1V1Y0hKdmNHVnlkSGt1YzNSaGNuUXNJRndpVkdobElHOXViSGtnZG1Gc2FXUWdiV1YwWVNCd2NtOXdaWEowZVNCbWIzSWdibVYzSUdseklHNWxkeTUwWVhKblpYUmNJaWxjY2x4dUlDQWdJR2xtSUNnaGRHaHBjeTVwYmtaMWJtTjBhVzl1S1Z4eVhHNGdJQ0FnSUNCMGFHbHpMbkpoYVhObFVtVmpiM1psY21GaWJHVW9ibTlrWlM1emRHRnlkQ3dnWENKdVpYY3VkR0Z5WjJWMElHTmhiaUJ2Ym14NUlHSmxJSFZ6WldRZ2FXNGdablZ1WTNScGIyNXpYQ0lwWEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhPYjJSbEtHNXZaR1VzSUZ3aVRXVjBZVkJ5YjNCbGNuUjVYQ0lwWEhKY2JpQWdmVnh5WEc0Z0lIWmhjaUJ6ZEdGeWRGQnZjeUE5SUhSb2FYTXVjM1JoY25Rc0lITjBZWEowVEc5aklEMGdkR2hwY3k1emRHRnlkRXh2WTF4eVhHNGdJRzV2WkdVdVkyRnNiR1ZsSUQwZ2RHaHBjeTV3WVhKelpWTjFZbk5qY21sd2RITW9kR2hwY3k1d1lYSnpaVVY0Y0hKQmRHOXRLQ2tzSUhOMFlYSjBVRzl6TENCemRHRnlkRXh2WXl3Z2RISjFaU2xjY2x4dUlDQnBaaUFvZEdocGN5NWxZWFFvZEhRdWNHRnlaVzVNS1NrZ2JtOWtaUzVoY21kMWJXVnVkSE1nUFNCMGFHbHpMbkJoY25ObFJYaHdja3hwYzNRb2RIUXVjR0Z5Wlc1U0xDQm1ZV3h6WlNsY2NseHVJQ0JsYkhObElHNXZaR1V1WVhKbmRXMWxiblJ6SUQwZ1pXMXdkSGtrTVZ4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTV2WkdVb2JtOWtaU3dnWENKT1pYZEZlSEJ5WlhOemFXOXVYQ0lwWEhKY2JuMWNjbHh1WEhKY2JpOHZJRkJoY25ObElIUmxiWEJzWVhSbElHVjRjSEpsYzNOcGIyNHVYSEpjYmx4eVhHNXdjQ1F6TG5CaGNuTmxWR1Z0Y0d4aGRHVkZiR1Z0Wlc1MElEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdkbUZ5SUdWc1pXMGdQU0IwYUdsekxuTjBZWEowVG05a1pTZ3BYSEpjYmlBZ1pXeGxiUzUyWVd4MVpTQTlJSHRjY2x4dUlDQWdJSEpoZHpvZ2RHaHBjeTVwYm5CMWRDNXpiR2xqWlNoMGFHbHpMbk4wWVhKMExDQjBhR2x6TG1WdVpDa3VjbVZ3YkdGalpTZ3ZYRnh5WEZ4dVB5OW5MQ0FuWEZ4dUp5a3NYSEpjYmlBZ0lDQmpiMjlyWldRNklIUm9hWE11ZG1Gc2RXVmNjbHh1SUNCOVhISmNiaUFnZEdocGN5NXVaWGgwS0NsY2NseHVJQ0JsYkdWdExuUmhhV3dnUFNCMGFHbHpMblI1Y0dVZ1BUMDlJSFIwTG1KaFkydFJkVzkwWlZ4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTV2WkdVb1pXeGxiU3dnWENKVVpXMXdiR0YwWlVWc1pXMWxiblJjSWlsY2NseHVmVnh5WEc1Y2NseHVjSEFrTXk1d1lYSnpaVlJsYlhCc1lYUmxJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1Z4eVhHNGdJSFJvYVhNdWJtVjRkQ2dwWEhKY2JpQWdibTlrWlM1bGVIQnlaWE56YVc5dWN5QTlJRnRkWEhKY2JpQWdkbUZ5SUdOMWNrVnNkQ0E5SUhSb2FYTXVjR0Z5YzJWVVpXMXdiR0YwWlVWc1pXMWxiblFvS1Z4eVhHNGdJRzV2WkdVdWNYVmhjMmx6SUQwZ1cyTjFja1ZzZEYxY2NseHVJQ0IzYUdsc1pTQW9JV04xY2tWc2RDNTBZV2xzS1NCN1hISmNiaUFnSUNCMGFHbHpKREV1Wlhod1pXTjBLSFIwTG1SdmJHeGhja0p5WVdObFRDbGNjbHh1SUNBZ0lHNXZaR1V1Wlhod2NtVnpjMmx2Ym5NdWNIVnphQ2gwYUdsekpERXVjR0Z5YzJWRmVIQnlaWE56YVc5dUtDa3BYSEpjYmlBZ0lDQjBhR2x6SkRFdVpYaHdaV04wS0hSMExtSnlZV05sVWlsY2NseHVJQ0FnSUc1dlpHVXVjWFZoYzJsekxuQjFjMmdvWTNWeVJXeDBJRDBnZEdocGN5UXhMbkJoY25ObFZHVnRjR3hoZEdWRmJHVnRaVzUwS0NrcFhISmNiaUFnZlZ4eVhHNGdJSFJvYVhNdWJtVjRkQ2dwWEhKY2JpQWdjbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9UbTlrWlNodWIyUmxMQ0JjSWxSbGJYQnNZWFJsVEdsMFpYSmhiRndpS1Z4eVhHNTlYSEpjYmx4eVhHNHZMeUJRWVhKelpTQmhiaUJ2WW1wbFkzUWdiR2wwWlhKaGJDQnZjaUJpYVc1a2FXNW5JSEJoZEhSbGNtNHVYSEpjYmx4eVhHNXdjQ1F6TG5CaGNuTmxUMkpxSUQwZ1puVnVZM1JwYjI0b2FYTlFZWFIwWlhKdUxDQnlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6S1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1N3Z1ptbHljM1FnUFNCMGNuVmxMQ0J3Y205d1NHRnphQ0E5SUh0OVhISmNiaUFnYm05a1pTNXdjbTl3WlhKMGFXVnpJRDBnVzExY2NseHVJQ0IwYUdsekxtNWxlSFFvS1Z4eVhHNGdJSGRvYVd4bElDZ2hkR2hwY3k1bFlYUW9kSFF1WW5KaFkyVlNLU2tnZTF4eVhHNGdJQ0FnYVdZZ0tDRm1hWEp6ZENrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6SkRFdVpYaHdaV04wS0hSMExtTnZiVzFoS1Z4eVhHNGdJQ0FnSUNCcFppQW9kR2hwY3lReExtRm1kR1Z5VkhKaGFXeHBibWREYjIxdFlTaDBkQzVpY21GalpWSXBLU0JpY21WaGExeHlYRzRnSUNBZ2ZTQmxiSE5sSUdacGNuTjBJRDBnWm1Gc2MyVmNjbHh1WEhKY2JpQWdJQ0IyWVhJZ2NISnZjQ0E5SUhSb2FYTWtNUzV6ZEdGeWRFNXZaR1VvS1N3Z2FYTkhaVzVsY21GMGIzSXNJSE4wWVhKMFVHOXpMQ0J6ZEdGeWRFeHZZMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTWtNUzV2Y0hScGIyNXpMbVZqYldGV1pYSnphVzl1SUQ0OUlEWXBJSHRjY2x4dUlDQWdJQ0FnY0hKdmNDNXRaWFJvYjJRZ1BTQm1ZV3h6WlZ4eVhHNGdJQ0FnSUNCd2NtOXdMbk5vYjNKMGFHRnVaQ0E5SUdaaGJITmxYSEpjYmlBZ0lDQWdJR2xtSUNocGMxQmhkSFJsY200Z2ZId2djbVZtUkdWemRISjFZM1IxY21sdVowVnljbTl5Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4wWVhKMFVHOXpJRDBnZEdocGN5UXhMbk4wWVhKMFhISmNiaUFnSUNBZ0lDQWdjM1JoY25STWIyTWdQU0IwYUdsekpERXVjM1JoY25STWIyTmNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0JwWmlBb0lXbHpVR0YwZEdWeWJpbGNjbHh1SUNBZ0lDQWdJQ0JwYzBkbGJtVnlZWFJ2Y2lBOUlIUm9hWE1rTVM1bFlYUW9kSFF1YzNSaGNpbGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE1rTVM1d1lYSnpaVkJ5YjNCbGNuUjVUbUZ0WlNod2NtOXdLVnh5WEc0Z0lDQWdkR2hwY3lReExuQmhjbk5sVUhKdmNHVnlkSGxXWVd4MVpTaHdjbTl3TENCcGMxQmhkSFJsY200c0lHbHpSMlZ1WlhKaGRHOXlMQ0J6ZEdGeWRGQnZjeXdnYzNSaGNuUk1iMk1zSUhKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXBYSEpjYmlBZ0lDQjBhR2x6SkRFdVkyaGxZMnRRY205d1EyeGhjMmdvY0hKdmNDd2djSEp2Y0VoaGMyZ3BYSEpjYmlBZ0lDQnViMlJsTG5CeWIzQmxjblJwWlhNdWNIVnphQ2gwYUdsekpERXVabWx1YVhOb1RtOWtaU2h3Y205d0xDQmNJbEJ5YjNCbGNuUjVYQ0lwS1Z4eVhHNGdJSDFjY2x4dUlDQnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaE9iMlJsS0c1dlpHVXNJR2x6VUdGMGRHVnliaUEvSUZ3aVQySnFaV04wVUdGMGRHVnlibHdpSURvZ1hDSlBZbXBsWTNSRmVIQnlaWE56YVc5dVhDSXBYSEpjYm4xY2NseHVYSEpjYm5Cd0pETXVjR0Z5YzJWUWNtOXdaWEowZVZaaGJIVmxJRDBnWm5WdVkzUnBiMjRvY0hKdmNDd2dhWE5RWVhSMFpYSnVMQ0JwYzBkbGJtVnlZWFJ2Y2l3Z2MzUmhjblJRYjNNc0lITjBZWEowVEc5akxDQnlaV1pFWlhOMGNuVmpkSFZ5YVc1blJYSnliM0p6S1NCN1hISmNiaUFnYVdZZ0tIUm9hWE11WldGMEtIUjBMbU52Ykc5dUtTa2dlMXh5WEc0Z0lDQWdjSEp2Y0M1MllXeDFaU0E5SUdselVHRjBkR1Z5YmlBL0lIUm9hWE11Y0dGeWMyVk5ZWGxpWlVSbFptRjFiSFFvZEdocGN5NXpkR0Z5ZEN3Z2RHaHBjeTV6ZEdGeWRFeHZZeWtnT2lCMGFHbHpMbkJoY25ObFRXRjVZbVZCYzNOcFoyNG9abUZzYzJVc0lISmxaa1JsYzNSeWRXTjBkWEpwYm1kRmNuSnZjbk1wWEhKY2JpQWdJQ0J3Y205d0xtdHBibVFnUFNCY0ltbHVhWFJjSWx4eVhHNGdJSDBnWld4elpTQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtVmpiV0ZXWlhKemFXOXVJRDQ5SURZZ0ppWWdkR2hwY3k1MGVYQmxJRDA5UFNCMGRDNXdZWEpsYmt3cElIdGNjbHh1SUNBZ0lHbG1JQ2hwYzFCaGRIUmxjbTRwSUhSb2FYTXVkVzVsZUhCbFkzUmxaQ2dwWEhKY2JpQWdJQ0J3Y205d0xtdHBibVFnUFNCY0ltbHVhWFJjSWx4eVhHNGdJQ0FnY0hKdmNDNXRaWFJvYjJRZ1BTQjBjblZsWEhKY2JpQWdJQ0J3Y205d0xuWmhiSFZsSUQwZ2RHaHBjeTV3WVhKelpVMWxkR2h2WkNocGMwZGxibVZ5WVhSdmNpbGNjbHh1SUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVsWTIxaFZtVnljMmx2YmlBK1BTQTFJQ1ltSUNGd2NtOXdMbU52YlhCMWRHVmtJQ1ltSUhCeWIzQXVhMlY1TG5SNWNHVWdQVDA5SUZ3aVNXUmxiblJwWm1sbGNsd2lJQ1ltWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FvY0hKdmNDNXJaWGt1Ym1GdFpTQTlQVDBnWENKblpYUmNJaUI4ZkNCd2NtOXdMbXRsZVM1dVlXMWxJRDA5UFNCY0luTmxkRndpS1NBbUpseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11ZEhsd1pTQWhQU0IwZEM1amIyMXRZU0FtSmlCMGFHbHpMblI1Y0dVZ0lUMGdkSFF1WW5KaFkyVlNLU2tnZTF4eVhHNGdJQ0FnYVdZZ0tHbHpSMlZ1WlhKaGRHOXlJSHg4SUdselVHRjBkR1Z5YmlrZ2RHaHBjeTUxYm1WNGNHVmpkR1ZrS0NsY2NseHVJQ0FnSUhCeWIzQXVhMmx1WkNBOUlIQnliM0F1YTJWNUxtNWhiV1ZjY2x4dUlDQWdJSFJvYVhNdWNHRnljMlZRY205d1pYSjBlVTVoYldVb2NISnZjQ2xjY2x4dUlDQWdJSEJ5YjNBdWRtRnNkV1VnUFNCMGFHbHpMbkJoY25ObFRXVjBhRzlrS0daaGJITmxLVnh5WEc0Z0lDQWdkbUZ5SUhCaGNtRnRRMjkxYm5RZ1BTQndjbTl3TG10cGJtUWdQVDA5SUZ3aVoyVjBYQ0lnUHlBd0lEb2dNVnh5WEc0Z0lDQWdhV1lnS0hCeWIzQXVkbUZzZFdVdWNHRnlZVzF6TG14bGJtZDBhQ0FoUFQwZ2NHRnlZVzFEYjNWdWRDa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2MzUmhjblFnUFNCd2NtOXdMblpoYkhWbExuTjBZWEowWEhKY2JpQWdJQ0FnSUdsbUlDaHdjbTl3TG10cGJtUWdQVDA5SUZ3aVoyVjBYQ0lwWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WVdselpWSmxZMjkyWlhKaFlteGxLSE4wWVhKMExDQmNJbWRsZEhSbGNpQnphRzkxYkdRZ2FHRjJaU0J1YnlCd1lYSmhiWE5jSWlsY2NseHVJQ0FnSUNBZ1pXeHpaVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbUZwYzJWU1pXTnZkbVZ5WVdKc1pTaHpkR0Z5ZEN3Z1hDSnpaWFIwWlhJZ2MyaHZkV3hrSUdoaGRtVWdaWGhoWTNSc2VTQnZibVVnY0dGeVlXMWNJaWxjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNod2NtOXdMbXRwYm1RZ1BUMDlJRndpYzJWMFhDSWdKaVlnY0hKdmNDNTJZV3gxWlM1d1lYSmhiWE5iTUYwdWRIbHdaU0E5UFQwZ1hDSlNaWE4wUld4bGJXVnVkRndpS1Z4eVhHNGdJQ0FnSUNCMGFHbHpMbkpoYVhObFVtVmpiM1psY21GaWJHVW9jSEp2Y0M1MllXeDFaUzV3WVhKaGJYTmJNRjB1YzNSaGNuUXNJRndpVTJWMGRHVnlJR05oYm01dmRDQjFjMlVnY21WemRDQndZWEpoYlhOY0lpbGNjbHh1SUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVsWTIxaFZtVnljMmx2YmlBK1BTQTJJQ1ltSUNGd2NtOXdMbU52YlhCMWRHVmtJQ1ltSUhCeWIzQXVhMlY1TG5SNWNHVWdQVDA5SUZ3aVNXUmxiblJwWm1sbGNsd2lLU0I3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVyWlhsM2IzSmtjeTUwWlhOMEtIQnliM0F1YTJWNUxtNWhiV1VwSUh4OFhISmNiaUFnSUNBZ0lDQWdLSFJvYVhNdWMzUnlhV04wSUQ4Z2RHaHBjeTV5WlhObGNuWmxaRmR2Y21SelUzUnlhV04wUW1sdVpDQTZJSFJvYVhNdWNtVnpaWEoyWldSWGIzSmtjeWt1ZEdWemRDaHdjbTl3TG10bGVTNXVZVzFsS1NCOGZGeHlYRzRnSUNBZ0lDQWdJQ2gwYUdsekxtbHVSMlZ1WlhKaGRHOXlJQ1ltSUhCeWIzQXVhMlY1TG01aGJXVWdQVDBnWENKNWFXVnNaRndpS1NsY2NseHVJQ0FnSUNBZ2RHaHBjeTV5WVdselpWSmxZMjkyWlhKaFlteGxLSEJ5YjNBdWEyVjVMbk4wWVhKMExDQmNJaWRjSWlBcklIQnliM0F1YTJWNUxtNWhiV1VnS3lCY0lpY2dZMkZ1SUc1dmRDQmlaU0IxYzJWa0lHRnpJSE5vYjNKMGFHRnVaQ0J3Y205d1pYSjBlVndpS1Z4eVhHNGdJQ0FnY0hKdmNDNXJhVzVrSUQwZ1hDSnBibWwwWENKY2NseHVJQ0FnSUdsbUlDaHBjMUJoZEhSbGNtNHBJSHRjY2x4dUlDQWdJQ0FnY0hKdmNDNTJZV3gxWlNBOUlIUm9hWE11Y0dGeWMyVk5ZWGxpWlVSbFptRjFiSFFvYzNSaGNuUlFiM01zSUhOMFlYSjBURzlqTENCd2NtOXdMbXRsZVNsY2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTUwZVhCbElEMDlQU0IwZEM1bGNTQW1KaUJ5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKektTQjdYSEpjYmlBZ0lDQWdJR2xtSUNnaGNtVm1SR1Z6ZEhKMVkzUjFjbWx1WjBWeWNtOXljeTV6YUc5eWRHaGhibVJCYzNOcFoyNHBYSEpjYmlBZ0lDQWdJQ0FnY21WbVJHVnpkSEoxWTNSMWNtbHVaMFZ5Y205eWN5NXphRzl5ZEdoaGJtUkJjM05wWjI0Z1BTQjBhR2x6TG5OMFlYSjBYSEpjYmlBZ0lDQWdJSEJ5YjNBdWRtRnNkV1VnUFNCMGFHbHpMbkJoY25ObFRXRjVZbVZFWldaaGRXeDBLSE4wWVhKMFVHOXpMQ0J6ZEdGeWRFeHZZeXdnY0hKdmNDNXJaWGtwWEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0J3Y205d0xuWmhiSFZsSUQwZ2NISnZjQzVyWlhsY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhCeWIzQXVjMmh2Y25Sb1lXNWtJRDBnZEhKMVpWeHlYRzRnSUgwZ1pXeHpaU0IwYUdsekxuVnVaWGh3WldOMFpXUW9LVnh5WEc1OVhISmNibHh5WEc1d2NDUXpMbkJoY25ObFVISnZjR1Z5ZEhsT1lXMWxJRDBnWm5WdVkzUnBiMjRvY0hKdmNDa2dlMXh5WEc0Z0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVpXTnRZVlpsY25OcGIyNGdQajBnTmlrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVpXRjBLSFIwTG1KeVlXTnJaWFJNS1NrZ2UxeHlYRzRnSUNBZ0lDQndjbTl3TG1OdmJYQjFkR1ZrSUQwZ2RISjFaVnh5WEc0Z0lDQWdJQ0J3Y205d0xtdGxlU0E5SUhSb2FYTXVjR0Z5YzJWTllYbGlaVUZ6YzJsbmJpZ3BYSEpjYmlBZ0lDQWdJSFJvYVhNdVpYaHdaV04wS0hSMExtSnlZV05yWlhSU0tWeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZjQzVyWlhsY2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUhCeWIzQXVZMjl0Y0hWMFpXUWdQU0JtWVd4elpWeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVJQ0J5WlhSMWNtNGdjSEp2Y0M1clpYa2dQU0IwYUdsekxuUjVjR1VnUFQwOUlIUjBMbTUxYlNCOGZDQjBhR2x6TG5SNWNHVWdQVDA5SUhSMExuTjBjbWx1WnlBL0lIUm9hWE11Y0dGeWMyVkZlSEJ5UVhSdmJTZ3BJRG9nZEdocGN5NXdZWEp6WlVsa1pXNTBLSFJ5ZFdVcFhISmNibjFjY2x4dVhISmNiaTh2SUVsdWFYUnBZV3hwZW1VZ1pXMXdkSGtnWm5WdVkzUnBiMjRnYm05a1pTNWNjbHh1WEhKY2JuQndKRE11YVc1cGRFWjFibU4wYVc5dUlEMGdablZ1WTNScGIyNG9ibTlrWlNrZ2UxeHlYRzRnSUc1dlpHVXVhV1FnUFNCdWRXeHNYSEpjYmlBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1bFkyMWhWbVZ5YzJsdmJpQStQU0EyS1NCN1hISmNiaUFnSUNCdWIyUmxMbWRsYm1WeVlYUnZjaUE5SUdaaGJITmxYSEpjYmlBZ0lDQnViMlJsTG1WNGNISmxjM05wYjI0Z1BTQm1ZV3h6WlZ4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dUx5OGdVR0Z5YzJVZ2IySnFaV04wSUc5eUlHTnNZWE56SUcxbGRHaHZaQzVjY2x4dVhISmNibkJ3SkRNdWNHRnljMlZOWlhSb2IyUWdQU0JtZFc1amRHbHZiaWhwYzBkbGJtVnlZWFJ2Y2lrZ2UxeHlYRzRnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1N3Z2IyeGtTVzVIWlc0Z1BTQjBhR2x6TG1sdVIyVnVaWEpoZEc5eVhISmNiaUFnZEdocGN5NXBia2RsYm1WeVlYUnZjaUE5SUdselIyVnVaWEpoZEc5eVhISmNiaUFnZEdocGN5NXBibWwwUm5WdVkzUnBiMjRvYm05a1pTbGNjbHh1SUNCMGFHbHpMbVY0Y0dWamRDaDBkQzV3WVhKbGJrd3BYSEpjYmlBZ2JtOWtaUzV3WVhKaGJYTWdQU0IwYUdsekxuQmhjbk5sUW1sdVpHbHVaMHhwYzNRb2RIUXVjR0Z5Wlc1U0xDQm1ZV3h6WlN3Z1ptRnNjMlVwWEhKY2JpQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWxZMjFoVm1WeWMybHZiaUErUFNBMktWeHlYRzRnSUNBZ2JtOWtaUzVuWlc1bGNtRjBiM0lnUFNCcGMwZGxibVZ5WVhSdmNseHlYRzRnSUhSb2FYTXVjR0Z5YzJWR2RXNWpkR2x2YmtKdlpIa29ibTlrWlN3Z1ptRnNjMlVwWEhKY2JpQWdkR2hwY3k1cGJrZGxibVZ5WVhSdmNpQTlJRzlzWkVsdVIyVnVYSEpjYmlBZ2NtVjBkWEp1SUhSb2FYTXVabWx1YVhOb1RtOWtaU2h1YjJSbExDQmNJa1oxYm1OMGFXOXVSWGh3Y21WemMybHZibHdpS1Z4eVhHNTlYSEpjYmx4eVhHNHZMeUJRWVhKelpTQmhjbkp2ZHlCbWRXNWpkR2x2YmlCbGVIQnlaWE56YVc5dUlIZHBkR2dnWjJsMlpXNGdjR0Z5WVcxbGRHVnljeTVjY2x4dVhISmNibkJ3SkRNdWNHRnljMlZCY25KdmQwVjRjSEpsYzNOcGIyNGdQU0JtZFc1amRHbHZiaWh1YjJSbExDQndZWEpoYlhNcElIdGNjbHh1SUNCMllYSWdiMnhrU1c1SFpXNGdQU0IwYUdsekxtbHVSMlZ1WlhKaGRHOXlYSEpjYmlBZ2RHaHBjeTVwYmtkbGJtVnlZWFJ2Y2lBOUlHWmhiSE5sWEhKY2JpQWdkR2hwY3k1cGJtbDBSblZ1WTNScGIyNG9ibTlrWlNsY2NseHVJQ0J1YjJSbExuQmhjbUZ0Y3lBOUlIUm9hWE11ZEc5QmMzTnBaMjVoWW14bFRHbHpkQ2h3WVhKaGJYTXNJSFJ5ZFdVcFhISmNiaUFnZEdocGN5NXdZWEp6WlVaMWJtTjBhVzl1UW05a2VTaHViMlJsTENCMGNuVmxLVnh5WEc0Z0lIUm9hWE11YVc1SFpXNWxjbUYwYjNJZ1BTQnZiR1JKYmtkbGJseHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU1dlpHVW9ibTlrWlN3Z1hDSkJjbkp2ZDBaMWJtTjBhVzl1Ulhod2NtVnpjMmx2Ymx3aUtWeHlYRzU5WEhKY2JseHlYRzR2THlCUVlYSnpaU0JtZFc1amRHbHZiaUJpYjJSNUlHRnVaQ0JqYUdWamF5QndZWEpoYldWMFpYSnpMbHh5WEc1Y2NseHVjSEFrTXk1d1lYSnpaVVoxYm1OMGFXOXVRbTlrZVNBOUlHWjFibU4wYVc5dUtHNXZaR1VzSUdselFYSnliM2RHZFc1amRHbHZiaWtnZTF4eVhHNGdJSFpoY2lCcGMwVjRjSEpsYzNOcGIyNGdQU0JwYzBGeWNtOTNSblZ1WTNScGIyNGdKaVlnZEdocGN5NTBlWEJsSUNFOVBTQjBkQzVpY21GalpVeGNjbHh1WEhKY2JpQWdhV1lnS0dselJYaHdjbVZ6YzJsdmJpa2dlMXh5WEc0Z0lDQWdibTlrWlM1aWIyUjVJRDBnZEdocGN5NXdZWEp6WlUxaGVXSmxRWE56YVdkdUtDbGNjbHh1SUNBZ0lHNXZaR1V1Wlhod2NtVnpjMmx2YmlBOUlIUnlkV1ZjY2x4dUlDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0x5OGdVM1JoY25RZ1lTQnVaWGNnYzJOdmNHVWdkMmwwYUNCeVpXZGhjbVFnZEc4Z2JHRmlaV3h6SUdGdVpDQjBhR1VnWUdsdVJuVnVZM1JwYjI1Z1hISmNiaUFnSUNBdkx5Qm1iR0ZuSUNoeVpYTjBiM0psSUhSb1pXMGdkRzhnZEdobGFYSWdiMnhrSUhaaGJIVmxJR0ZtZEdWeWQyRnlaSE1wTGx4eVhHNGdJQ0FnZG1GeUlHOXNaRWx1Um5WdVl5QTlJSFJvYVhNdWFXNUdkVzVqZEdsdmJpd2diMnhrVEdGaVpXeHpJRDBnZEdocGN5NXNZV0psYkhOY2NseHVJQ0FnSUhSb2FYTXVhVzVHZFc1amRHbHZiaUE5SUhSeWRXVTdJSFJvYVhNdWJHRmlaV3h6SUQwZ1cxMWNjbHh1SUNBZ0lHNXZaR1V1WW05a2VTQTlJSFJvYVhNdWNHRnljMlZDYkc5amF5aDBjblZsS1Z4eVhHNGdJQ0FnYm05a1pTNWxlSEJ5WlhOemFXOXVJRDBnWm1Gc2MyVmNjbHh1SUNBZ0lIUm9hWE11YVc1R2RXNWpkR2x2YmlBOUlHOXNaRWx1Um5WdVl6c2dkR2hwY3k1c1lXSmxiSE1nUFNCdmJHUk1ZV0psYkhOY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4dklFbG1JSFJvYVhNZ2FYTWdZU0J6ZEhKcFkzUWdiVzlrWlNCbWRXNWpkR2x2Yml3Z2RtVnlhV1o1SUhSb1lYUWdZWEpuZFcxbGJuUWdibUZ0WlhOY2NseHVJQ0F2THlCaGNtVWdibTkwSUhKbGNHVmhkR1ZrTENCaGJtUWdhWFFnWkc5bGN5QnViM1FnZEhKNUlIUnZJR0pwYm1RZ2RHaGxJSGR2Y21SeklHQmxkbUZzWUZ4eVhHNGdJQzh2SUc5eUlHQmhjbWQxYldWdWRITmdMbHh5WEc0Z0lIWmhjaUIxYzJWVGRISnBZM1FnUFNBb0lXbHpSWGh3Y21WemMybHZiaUFtSmlCdWIyUmxMbUp2WkhrdVltOWtlUzVzWlc1bmRHZ2dKaVlnZEdocGN5NXBjMVZ6WlZOMGNtbGpkQ2h1YjJSbExtSnZaSGt1WW05a2VWc3dYU2twSUQ4Z2JtOWtaUzVpYjJSNUxtSnZaSGxiTUYwZ09pQnVkV3hzTzF4eVhHNGdJR2xtSUNoMGFHbHpMbk4wY21samRDQjhmQ0IxYzJWVGRISnBZM1FwSUh0Y2NseHVJQ0FnSUhaaGNpQnZiR1JUZEhKcFkzUWdQU0IwYUdsekxuTjBjbWxqZEZ4eVhHNGdJQ0FnZEdocGN5NXpkSEpwWTNRZ1BTQjBjblZsWEhKY2JpQWdJQ0JwWmlBb2JtOWtaUzVwWkNsY2NseHVJQ0FnSUNBZ2RHaHBjeTVqYUdWamEweFdZV3dvYm05a1pTNXBaQ3dnZEhKMVpTbGNjbHh1SUNBZ0lIUm9hWE11WTJobFkydFFZWEpoYlhNb2JtOWtaU3dnZFhObFUzUnlhV04wS1Z4eVhHNGdJQ0FnZEdocGN5NXpkSEpwWTNRZ1BTQnZiR1JUZEhKcFkzUmNjbHh1SUNCOUlHVnNjMlVnYVdZZ0tHbHpRWEp5YjNkR2RXNWpkR2x2YmlrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVqYUdWamExQmhjbUZ0Y3lodWIyUmxMQ0IxYzJWVGRISnBZM1FwWEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc0dkx5QkRhR1ZqYTNNZ1puVnVZM1JwYjI0Z2NHRnlZVzF6SUdadmNpQjJZWEpwYjNWeklHUnBjMkZzYkc5M1pXUWdjR0YwZEdWeWJuTWdjM1ZqYUNCaGN5QjFjMmx1WnlCY0ltVjJZV3hjSWx4eVhHNHZMeUJ2Y2lCY0ltRnlaM1Z0Wlc1MGMxd2lJR0Z1WkNCa2RYQnNhV05oZEdVZ2NHRnlZVzFsZEdWeWN5NWNjbHh1WEhKY2JuQndKRE11WTJobFkydFFZWEpoYlhNZ1BTQm1kVzVqZEdsdmJpaHViMlJsTENCMWMyVlRkSEpwWTNRcElIdGNjbHh1SUNBZ0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJSFpoY2lCdVlXMWxTR0Z6YUNBOUlIdDlYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzV2WkdVdWNHRnlZVzF6TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJR2xtSUNoMWMyVlRkSEpwWTNRZ0ppWWdkR2hwY3lReExtOXdkR2x2Ym5NdVpXTnRZVlpsY25OcGIyNGdQajBnTnlBbUppQnViMlJsTG5CaGNtRnRjMXRwWFM1MGVYQmxJQ0U5UFNCY0lrbGtaVzUwYVdacFpYSmNJaWxjY2x4dUlDQWdJQ0FnSUNCMGFHbHpKREV1Y21GcGMyVlNaV052ZG1WeVlXSnNaU2gxYzJWVGRISnBZM1F1YzNSaGNuUXNJRndpU1d4c1pXZGhiQ0FuZFhObElITjBjbWxqZENjZ1pHbHlaV04wYVhabElHbHVJR1oxYm1OMGFXOXVJSGRwZEdnZ2JtOXVMWE5wYlhCc1pTQndZWEpoYldWMFpYSWdiR2x6ZEZ3aUtUdGNjbHh1SUNBZ0lDQWdkR2hwY3lReExtTm9aV05yVEZaaGJDaHViMlJsTG5CaGNtRnRjMXRwWFN3Z2RISjFaU3dnYm1GdFpVaGhjMmdwWEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1WEhKY2JpOHZJRkJoY25ObGN5QmhJR052YlcxaExYTmxjR0Z5WVhSbFpDQnNhWE4wSUc5bUlHVjRjSEpsYzNOcGIyNXpMQ0JoYm1RZ2NtVjBkWEp1Y3lCMGFHVnRJR0Z6WEhKY2JpOHZJR0Z1SUdGeWNtRjVMaUJnWTJ4dmMyVmdJR2x6SUhSb1pTQjBiMnRsYmlCMGVYQmxJSFJvWVhRZ1pXNWtjeUIwYUdVZ2JHbHpkQ3dnWVc1a1hISmNiaTh2SUdCaGJHeHZkMFZ0Y0hSNVlDQmpZVzRnWW1VZ2RIVnlibVZrSUc5dUlIUnZJR0ZzYkc5M0lITjFZbk5sY1hWbGJuUWdZMjl0YldGeklIZHBkR2hjY2x4dUx5OGdibTkwYUdsdVp5QnBiaUJpWlhSM1pXVnVJSFJvWlcwZ2RHOGdZbVVnY0dGeWMyVmtJR0Z6SUdCdWRXeHNZQ0FvZDJocFkyZ2dhWE1nYm1WbFpHVmtYSEpjYmk4dklHWnZjaUJoY25KaGVTQnNhWFJsY21Gc2N5a3VYSEpjYmx4eVhHNXdjQ1F6TG5CaGNuTmxSWGh3Y2t4cGMzUWdQU0JtZFc1amRHbHZiaWhqYkc5elpTd2dZV3hzYjNkVWNtRnBiR2x1WjBOdmJXMWhMQ0JoYkd4dmQwVnRjSFI1TENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLU0I3WEhKY2JpQWdkbUZ5SUhSb2FYTWtNU0E5SUhSb2FYTTdYSEpjYmx4eVhHNGdJSFpoY2lCbGJIUnpJRDBnVzEwc0lHWnBjbk4wSUQwZ2RISjFaVnh5WEc0Z0lIZG9hV3hsSUNnaGRHaHBjeTVsWVhRb1kyeHZjMlVwS1NCN1hISmNiaUFnSUNCcFppQW9JV1pwY25OMEtTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNa01TNWxlSEJsWTNRb2RIUXVZMjl0YldFcFhISmNiaUFnSUNBZ0lHbG1JQ2hoYkd4dmQxUnlZV2xzYVc1blEyOXRiV0VnSmlZZ2RHaHBjeVF4TG1GbWRHVnlWSEpoYVd4cGJtZERiMjF0WVNoamJHOXpaU2twSUdKeVpXRnJYSEpjYmlBZ0lDQjlJR1ZzYzJVZ1ptbHljM1FnUFNCbVlXeHpaVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQmxiSFJjY2x4dUlDQWdJR2xtSUNoaGJHeHZkMFZ0Y0hSNUlDWW1JSFJvYVhNa01TNTBlWEJsSUQwOVBTQjBkQzVqYjIxdFlTbGNjbHh1SUNBZ0lDQWdaV3gwSUQwZ2JuVnNiRnh5WEc0Z0lDQWdaV3h6WlNCcFppQW9kR2hwY3lReExuUjVjR1VnUFQwOUlIUjBMbVZzYkdsd2MybHpLU0I3WEhKY2JpQWdJQ0FnSUdWc2RDQTlJSFJvYVhNa01TNXdZWEp6WlZOd2NtVmhaQ2h5WldaRVpYTjBjblZqZEhWeWFXNW5SWEp5YjNKektWeHlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5UXhMblI1Y0dVZ1BUMDlJSFIwTG1OdmJXMWhJQ1ltSUhKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTWdKaVlnSVhKbFprUmxjM1J5ZFdOMGRYSnBibWRGY25KdmNuTXVkSEpoYVd4cGJtZERiMjF0WVNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsWmtSbGMzUnlkV04wZFhKcGJtZEZjbkp2Y25NdWRISmhhV3hwYm1kRGIyMXRZU0E5SUhSb2FYTWtNUzVzWVhOMFZHOXJVM1JoY25SY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTQmxiSE5sWEhKY2JpQWdJQ0FnSUdWc2RDQTlJSFJvYVhNa01TNXdZWEp6WlUxaGVXSmxRWE56YVdkdUtHWmhiSE5sTENCeVpXWkVaWE4wY25WamRIVnlhVzVuUlhKeWIzSnpLVnh5WEc0Z0lDQWdaV3gwY3k1d2RYTm9LR1ZzZENsY2NseHVJQ0I5WEhKY2JpQWdjbVYwZFhKdUlHVnNkSE5jY2x4dWZWeHlYRzVjY2x4dUx5OGdVR0Z5YzJVZ2RHaGxJRzVsZUhRZ2RHOXJaVzRnWVhNZ1lXNGdhV1JsYm5ScFptbGxjaTRnU1dZZ1lHeHBZbVZ5WVd4Z0lHbHpJSFJ5ZFdVZ0tIVnpaV1JjY2x4dUx5OGdkMmhsYmlCd1lYSnphVzVuSUhCeWIzQmxjblJwWlhNcExDQnBkQ0IzYVd4c0lHRnNjMjhnWTI5dWRtVnlkQ0JyWlhsM2IzSmtjeUJwYm5SdlhISmNiaTh2SUdsa1pXNTBhV1pwWlhKekxseHlYRzVjY2x4dWNIQWtNeTV3WVhKelpVbGtaVzUwSUQwZ1puVnVZM1JwYjI0b2JHbGlaWEpoYkNrZ2UxeHlYRzRnSUhaaGNpQnViMlJsSUQwZ2RHaHBjeTV6ZEdGeWRFNXZaR1VvS1Z4eVhHNGdJR2xtSUNoc2FXSmxjbUZzSUNZbUlIUm9hWE11YjNCMGFXOXVjeTVoYkd4dmQxSmxjMlZ5ZG1Wa0lEMDlJRndpYm1WMlpYSmNJaWtnYkdsaVpYSmhiQ0E5SUdaaGJITmxYSEpjYmlBZ2FXWWdLSFJvYVhNdWRIbHdaU0E5UFQwZ2RIUXVibUZ0WlNrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0ZzYVdKbGNtRnNJQ1ltSUNoMGFHbHpMbk4wY21samRDQS9JSFJvYVhNdWNtVnpaWEoyWldSWGIzSmtjMU4wY21samRDQTZJSFJvYVhNdWNtVnpaWEoyWldSWGIzSmtjeWt1ZEdWemRDaDBhR2x6TG5aaGJIVmxLU0FtSmx4eVhHNGdJQ0FnSUNBZ0lDaDBhR2x6TG05d2RHbHZibk11WldOdFlWWmxjbk5wYjI0Z1BqMGdOaUI4ZkZ4eVhHNGdJQ0FnSUNBZ0lDQjBhR2x6TG1sdWNIVjBMbk5zYVdObEtIUm9hWE11YzNSaGNuUXNJSFJvYVhNdVpXNWtLUzVwYm1SbGVFOW1LRndpWEZ4Y1hGd2lLU0E5UFNBdE1Ta3BYSEpjYmlBZ0lDQWdJSFJvYVhNdWNtRnBjMlZTWldOdmRtVnlZV0pzWlNoMGFHbHpMbk4wWVhKMExDQmNJbFJvWlNCclpYbDNiM0prSUNkY0lpQXJJSFJvYVhNdWRtRnNkV1VnS3lCY0lpY2dhWE1nY21WelpYSjJaV1JjSWlsY2NseHVJQ0FnSUdsbUlDZ2hiR2xpWlhKaGJDQW1KaUIwYUdsekxtbHVSMlZ1WlhKaGRHOXlJQ1ltSUhSb2FYTXVkbUZzZFdVZ1BUMDlJRndpZVdsbGJHUmNJaWxjY2x4dUlDQWdJQ0FnZEdocGN5NXlZV2x6WlZKbFkyOTJaWEpoWW14bEtIUm9hWE11YzNSaGNuUXNJRndpUTJGdUlHNXZkQ0IxYzJVZ0ozbHBaV3hrSnlCaGN5QnBaR1Z1ZEdsbWFXVnlJR2x1YzJsa1pTQmhJR2RsYm1WeVlYUnZjbHdpS1Z4eVhHNGdJQ0FnYm05a1pTNXVZVzFsSUQwZ2RHaHBjeTUyWVd4MVpWeHlYRzRnSUgwZ1pXeHpaU0JwWmlBb2JHbGlaWEpoYkNBbUppQjBhR2x6TG5SNWNHVXVhMlY1ZDI5eVpDa2dlMXh5WEc0Z0lDQWdibTlrWlM1dVlXMWxJRDBnZEdocGN5NTBlWEJsTG10bGVYZHZjbVJjY2x4dUlDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ2RHaHBjeTUxYm1WNGNHVmpkR1ZrS0NsY2NseHVJQ0I5WEhKY2JpQWdkR2hwY3k1dVpYaDBLQ2xjY2x4dUlDQnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaE9iMlJsS0c1dlpHVXNJRndpU1dSbGJuUnBabWxsY2x3aUtWeHlYRzU5WEhKY2JseHlYRzR2THlCUVlYSnpaWE1nZVdsbGJHUWdaWGh3Y21WemMybHZiaUJwYm5OcFpHVWdaMlZ1WlhKaGRHOXlMbHh5WEc1Y2NseHVjSEFrTXk1d1lYSnpaVmxwWld4a0lEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdkbUZ5SUc1dlpHVWdQU0IwYUdsekxuTjBZWEowVG05a1pTZ3BYSEpjYmlBZ2RHaHBjeTV1WlhoMEtDbGNjbHh1SUNCcFppQW9kR2hwY3k1MGVYQmxJRDA5SUhSMExuTmxiV2tnZkh3Z2RHaHBjeTVqWVc1SmJuTmxjblJUWlcxcFkyOXNiMjRvS1NCOGZDQW9kR2hwY3k1MGVYQmxJQ0U5SUhSMExuTjBZWElnSmlZZ0lYUm9hWE11ZEhsd1pTNXpkR0Z5ZEhORmVIQnlLU2tnZTF4eVhHNGdJQ0FnYm05a1pTNWtaV3hsWjJGMFpTQTlJR1poYkhObFhISmNiaUFnSUNCdWIyUmxMbUZ5WjNWdFpXNTBJRDBnYm5Wc2JGeHlYRzRnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0J1YjJSbExtUmxiR1ZuWVhSbElEMGdkR2hwY3k1bFlYUW9kSFF1YzNSaGNpbGNjbHh1SUNBZ0lHNXZaR1V1WVhKbmRXMWxiblFnUFNCMGFHbHpMbkJoY25ObFRXRjVZbVZCYzNOcFoyNG9LVnh5WEc0Z0lIMWNjbHh1SUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoT2IyUmxLRzV2WkdVc0lGd2lXV2xsYkdSRmVIQnlaWE56YVc5dVhDSXBYSEpjYm4xY2NseHVYSEpjYm5aaGNpQndjQ1EwSUQwZ1VHRnljMlZ5TG5CeWIzUnZkSGx3WlZ4eVhHNWNjbHh1THk4Z1ZHaHBjeUJtZFc1amRHbHZiaUJwY3lCMWMyVmtJSFJ2SUhKaGFYTmxJR1Y0WTJWd2RHbHZibk1nYjI0Z2NHRnljMlVnWlhKeWIzSnpMaUJKZEZ4eVhHNHZMeUIwWVd0bGN5QmhiaUJ2Wm1aelpYUWdhVzUwWldkbGNpQW9hVzUwYnlCMGFHVWdZM1Z5Y21WdWRDQmdhVzV3ZFhSZ0tTQjBieUJwYm1ScFkyRjBaVnh5WEc0dkx5QjBhR1VnYkc5allYUnBiMjRnYjJZZ2RHaGxJR1Z5Y205eUxDQmhkSFJoWTJobGN5QjBhR1VnY0c5emFYUnBiMjRnZEc4Z2RHaGxJR1Z1WkZ4eVhHNHZMeUJ2WmlCMGFHVWdaWEp5YjNJZ2JXVnpjMkZuWlN3Z1lXNWtJSFJvWlc0Z2NtRnBjMlZ6SUdFZ1lGTjViblJoZUVWeWNtOXlZQ0IzYVhSb0lIUm9ZWFJjY2x4dUx5OGdiV1Z6YzJGblpTNWNjbHh1WEhKY2JuQndKRFF1Y21GcGMyVWdQU0JtZFc1amRHbHZiaWh3YjNNc0lHMWxjM05oWjJVcElIdGNjbHh1SUNCMllYSWdiRzlqSUQwZ1oyVjBUR2x1WlVsdVptOG9kR2hwY3k1cGJuQjFkQ3dnY0c5ektWeHlYRzRnSUcxbGMzTmhaMlVnS3owZ1hDSWdLRndpSUNzZ2JHOWpMbXhwYm1VZ0t5QmNJanBjSWlBcklHeHZZeTVqYjJ4MWJXNGdLeUJjSWlsY0lseHlYRzRnSUhaaGNpQmxjbklnUFNCdVpYY2dVM2x1ZEdGNFJYSnliM0lvYldWemMyRm5aU2xjY2x4dUlDQmxjbkl1Y0c5eklEMGdjRzl6T3lCbGNuSXViRzlqSUQwZ2JHOWpPeUJsY25JdWNtRnBjMlZrUVhRZ1BTQjBhR2x6TG5CdmMxeHlYRzRnSUhSb2NtOTNJR1Z5Y2x4eVhHNTlYSEpjYmx4eVhHNXdjQ1EwTG5KaGFYTmxVbVZqYjNabGNtRmliR1VnUFNCd2NDUTBMbkpoYVhObFhISmNibHh5WEc1d2NDUTBMbU4xY2xCdmMybDBhVzl1SUQwZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1c2IyTmhkR2x2Ym5NcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVRzl6YVhScGIyNG9kR2hwY3k1amRYSk1hVzVsTENCMGFHbHpMbkJ2Y3lBdElIUm9hWE11YkdsdVpWTjBZWEowS1Z4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dWRtRnlJRTV2WkdVZ1BTQm1kVzVqZEdsdmJpQk9iMlJsS0hCaGNuTmxjaXdnY0c5ekxDQnNiMk1wSUh0Y2NseHVJQ0IwYUdsekxuUjVjR1VnUFNCY0lsd2lYSEpjYmlBZ2RHaHBjeTV6ZEdGeWRDQTlJSEJ2YzF4eVhHNGdJSFJvYVhNdVpXNWtJRDBnTUZ4eVhHNGdJR2xtSUNod1lYSnpaWEl1YjNCMGFXOXVjeTVzYjJOaGRHbHZibk1wWEhKY2JpQWdJQ0IwYUdsekxteHZZeUE5SUc1bGR5QlRiM1Z5WTJWTWIyTmhkR2x2Ymlod1lYSnpaWElzSUd4dll5bGNjbHh1SUNCcFppQW9jR0Z5YzJWeUxtOXdkR2x2Ym5NdVpHbHlaV04wVTI5MWNtTmxSbWxzWlNsY2NseHVJQ0FnSUhSb2FYTXVjMjkxY21ObFJtbHNaU0E5SUhCaGNuTmxjaTV2Y0hScGIyNXpMbVJwY21WamRGTnZkWEpqWlVacGJHVmNjbHh1SUNCcFppQW9jR0Z5YzJWeUxtOXdkR2x2Ym5NdWNtRnVaMlZ6S1Z4eVhHNGdJQ0FnZEdocGN5NXlZVzVuWlNBOUlGdHdiM01zSURCZFhISmNibjA3WEhKY2JseHlYRzR2THlCVGRHRnlkQ0JoYmlCQlUxUWdibTlrWlN3Z1lYUjBZV05vYVc1bklHRWdjM1JoY25RZ2IyWm1jMlYwTGx4eVhHNWNjbHh1ZG1GeUlIQndKRFVnUFNCUVlYSnpaWEl1Y0hKdmRHOTBlWEJsWEhKY2JseHlYRzV3Y0NRMUxuTjBZWEowVG05a1pTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJSEpsZEhWeWJpQnVaWGNnVG05a1pTaDBhR2x6TENCMGFHbHpMbk4wWVhKMExDQjBhR2x6TG5OMFlYSjBURzlqS1Z4eVhHNTlYSEpjYmx4eVhHNXdjQ1ExTG5OMFlYSjBUbTlrWlVGMElEMGdablZ1WTNScGIyNG9jRzl6TENCc2IyTXBJSHRjY2x4dUlDQnlaWFIxY200Z2JtVjNJRTV2WkdVb2RHaHBjeXdnY0c5ekxDQnNiMk1wWEhKY2JuMWNjbHh1WEhKY2JpOHZJRVpwYm1semFDQmhiaUJCVTFRZ2JtOWtaU3dnWVdSa2FXNW5JR0IwZVhCbFlDQmhibVFnWUdWdVpHQWdjSEp2Y0dWeWRHbGxjeTVjY2x4dVhISmNibVoxYm1OMGFXOXVJR1pwYm1semFFNXZaR1ZCZENodWIyUmxMQ0IwZVhCbExDQndiM01zSUd4dll5a2dlMXh5WEc0Z0lHNXZaR1V1ZEhsd1pTQTlJSFI1Y0dWY2NseHVJQ0J1YjJSbExtVnVaQ0E5SUhCdmMxeHlYRzRnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11Ykc5allYUnBiMjV6S1Z4eVhHNGdJQ0FnYm05a1pTNXNiMk11Wlc1a0lEMGdiRzlqWEhKY2JpQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXlZVzVuWlhNcFhISmNiaUFnSUNCdWIyUmxMbkpoYm1kbFd6RmRJRDBnY0c5elhISmNiaUFnY21WMGRYSnVJRzV2WkdWY2NseHVmVnh5WEc1Y2NseHVjSEFrTlM1bWFXNXBjMmhPYjJSbElEMGdablZ1WTNScGIyNG9ibTlrWlN3Z2RIbHdaU2tnZTF4eVhHNGdJSEpsZEhWeWJpQm1hVzVwYzJoT2IyUmxRWFF1WTJGc2JDaDBhR2x6TENCdWIyUmxMQ0IwZVhCbExDQjBhR2x6TG14aGMzUlViMnRGYm1Rc0lIUm9hWE11YkdGemRGUnZhMFZ1WkV4dll5bGNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1JtbHVhWE5vSUc1dlpHVWdZWFFnWjJsMlpXNGdjRzl6YVhScGIyNWNjbHh1WEhKY2JuQndKRFV1Wm1sdWFYTm9UbTlrWlVGMElEMGdablZ1WTNScGIyNG9ibTlrWlN3Z2RIbHdaU3dnY0c5ekxDQnNiMk1wSUh0Y2NseHVJQ0J5WlhSMWNtNGdabWx1YVhOb1RtOWtaVUYwTG1OaGJHd29kR2hwY3l3Z2JtOWtaU3dnZEhsd1pTd2djRzl6TENCc2IyTXBYSEpjYm4xY2NseHVYSEpjYm5aaGNpQlViMnREYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRnVkc5clEyOXVkR1Y0ZENoMGIydGxiaXdnYVhORmVIQnlMQ0J3Y21WelpYSjJaVk53WVdObExDQnZkbVZ5Y21sa1pTa2dlMXh5WEc0Z0lIUm9hWE11ZEc5clpXNGdQU0IwYjJ0bGJseHlYRzRnSUhSb2FYTXVhWE5GZUhCeUlEMGdJU0ZwYzBWNGNISmNjbHh1SUNCMGFHbHpMbkJ5WlhObGNuWmxVM0JoWTJVZ1BTQWhJWEJ5WlhObGNuWmxVM0JoWTJWY2NseHVJQ0IwYUdsekxtOTJaWEp5YVdSbElEMGdiM1psY25KcFpHVmNjbHh1ZlR0Y2NseHVYSEpjYm5aaGNpQjBlWEJsY3lBOUlIdGNjbHh1SUNCaVgzTjBZWFE2SUc1bGR5QlViMnREYjI1MFpYaDBLRndpZTF3aUxDQm1ZV3h6WlNrc1hISmNiaUFnWWw5bGVIQnlPaUJ1WlhjZ1ZHOXJRMjl1ZEdWNGRDaGNJbnRjSWl3Z2RISjFaU2tzWEhKY2JpQWdZbDkwYlhCc09pQnVaWGNnVkc5clEyOXVkR1Y0ZENoY0lpUjdYQ0lzSUhSeWRXVXBMRnh5WEc0Z0lIQmZjM1JoZERvZ2JtVjNJRlJ2YTBOdmJuUmxlSFFvWENJb1hDSXNJR1poYkhObEtTeGNjbHh1SUNCd1gyVjRjSEk2SUc1bGR5QlViMnREYjI1MFpYaDBLRndpS0Z3aUxDQjBjblZsS1N4Y2NseHVJQ0J4WDNSdGNHdzZJRzVsZHlCVWIydERiMjUwWlhoMEtGd2lZRndpTENCMGNuVmxMQ0IwY25WbExDQm1kVzVqZEdsdmJpQW9jQ2tnZXlCeVpYUjFjbTRnY0M1eVpXRmtWRzF3YkZSdmEyVnVLQ2s3SUgwcExGeHlYRzRnSUdaZlpYaHdjam9nYm1WM0lGUnZhME52Ym5SbGVIUW9YQ0ptZFc1amRHbHZibHdpTENCMGNuVmxLVnh5WEc1OVhISmNibHh5WEc1MllYSWdjSEFrTmlBOUlGQmhjbk5sY2k1d2NtOTBiM1I1Y0dWY2NseHVYSEpjYm5Cd0pEWXVhVzVwZEdsaGJFTnZiblJsZUhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQnlaWFIxY200Z1czUjVjR1Z6TG1KZmMzUmhkRjFjY2x4dWZWeHlYRzVjY2x4dWNIQWtOaTVpY21GalpVbHpRbXh2WTJzZ1BTQm1kVzVqZEdsdmJpaHdjbVYyVkhsd1pTa2dlMXh5WEc0Z0lHbG1JQ2h3Y21WMlZIbHdaU0E5UFQwZ2RIUXVZMjlzYjI0cElIdGNjbHh1SUNBZ0lIWmhjaUJ3WVhKbGJuUWdQU0IwYUdsekxtTjFja052Ym5SbGVIUW9LVnh5WEc0Z0lDQWdhV1lnS0hCaGNtVnVkQ0E5UFQwZ2RIbHdaWE11WWw5emRHRjBJSHg4SUhCaGNtVnVkQ0E5UFQwZ2RIbHdaWE11WWw5bGVIQnlLVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdJWEJoY21WdWRDNXBjMFY0Y0hKY2NseHVJQ0I5WEhKY2JpQWdhV1lnS0hCeVpYWlVlWEJsSUQwOVBTQjBkQzVmY21WMGRYSnVLVnh5WEc0Z0lDQWdjbVYwZFhKdUlHeHBibVZDY21WaGF5NTBaWE4wS0hSb2FYTXVhVzV3ZFhRdWMyeHBZMlVvZEdocGN5NXNZWE4wVkc5clJXNWtMQ0IwYUdsekxuTjBZWEowS1NsY2NseHVJQ0JwWmlBb2NISmxkbFI1Y0dVZ1BUMDlJSFIwTGw5bGJITmxJSHg4SUhCeVpYWlVlWEJsSUQwOVBTQjBkQzV6WlcxcElIeDhJSEJ5WlhaVWVYQmxJRDA5UFNCMGRDNWxiMllnZkh3Z2NISmxkbFI1Y0dVZ1BUMDlJSFIwTG5CaGNtVnVVaWxjY2x4dUlDQWdJSEpsZEhWeWJpQjBjblZsWEhKY2JpQWdhV1lnS0hCeVpYWlVlWEJsSUQwOUlIUjBMbUp5WVdObFRDbGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY2tOdmJuUmxlSFFvS1NBOVBUMGdkSGx3WlhNdVlsOXpkR0YwWEhKY2JpQWdjbVYwZFhKdUlDRjBhR2x6TG1WNGNISkJiR3h2ZDJWa1hISmNibjFjY2x4dVhISmNibkJ3SkRZdWRYQmtZWFJsUTI5dWRHVjRkQ0E5SUdaMWJtTjBhVzl1S0hCeVpYWlVlWEJsS1NCN1hISmNiaUFnZG1GeUlIVndaR0YwWlN3Z2RIbHdaU0E5SUhSb2FYTXVkSGx3WlZ4eVhHNGdJR2xtSUNoMGVYQmxMbXRsZVhkdmNtUWdKaVlnY0hKbGRsUjVjR1VnUFQwZ2RIUXVaRzkwS1Z4eVhHNGdJQ0FnZEdocGN5NWxlSEJ5UVd4c2IzZGxaQ0E5SUdaaGJITmxYSEpjYmlBZ1pXeHpaU0JwWmlBb2RYQmtZWFJsSUQwZ2RIbHdaUzUxY0dSaGRHVkRiMjUwWlhoMEtWeHlYRzRnSUNBZ2RYQmtZWFJsTG1OaGJHd29kR2hwY3l3Z2NISmxkbFI1Y0dVcFhISmNiaUFnWld4elpWeHlYRzRnSUNBZ2RHaHBjeTVsZUhCeVFXeHNiM2RsWkNBOUlIUjVjR1V1WW1WbWIzSmxSWGh3Y2x4eVhHNTlYSEpjYmx4eVhHNHZMeUJVYjJ0bGJpMXpjR1ZqYVdacFl5QmpiMjUwWlhoMElIVndaR0YwWlNCamIyUmxYSEpjYmx4eVhHNTBkQzV3WVhKbGJsSXVkWEJrWVhSbFEyOXVkR1Y0ZENBOUlIUjBMbUp5WVdObFVpNTFjR1JoZEdWRGIyNTBaWGgwSUQwZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ2FXWWdLSFJvYVhNdVkyOXVkR1Y0ZEM1c1pXNW5kR2dnUFQwZ01Ta2dlMXh5WEc0Z0lDQWdkR2hwY3k1bGVIQnlRV3hzYjNkbFpDQTlJSFJ5ZFdWY2NseHVJQ0FnSUhKbGRIVnlibHh5WEc0Z0lIMWNjbHh1SUNCMllYSWdiM1YwSUQwZ2RHaHBjeTVqYjI1MFpYaDBMbkJ2Y0NncFhISmNiaUFnYVdZZ0tHOTFkQ0E5UFQwZ2RIbHdaWE11WWw5emRHRjBJQ1ltSUhSb2FYTXVZM1Z5UTI5dWRHVjRkQ2dwSUQwOVBTQjBlWEJsY3k1bVgyVjRjSElwSUh0Y2NseHVJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDNXdiM0FvS1Z4eVhHNGdJQ0FnZEdocGN5NWxlSEJ5UVd4c2IzZGxaQ0E5SUdaaGJITmxYSEpjYmlBZ2ZTQmxiSE5sSUdsbUlDaHZkWFFnUFQwOUlIUjVjR1Z6TG1KZmRHMXdiQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NWxlSEJ5UVd4c2IzZGxaQ0E5SUhSeWRXVmNjbHh1SUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnZEdocGN5NWxlSEJ5UVd4c2IzZGxaQ0E5SUNGdmRYUXVhWE5GZUhCeVhISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNTBkQzVpY21GalpVd3VkWEJrWVhSbFEyOXVkR1Y0ZENBOUlHWjFibU4wYVc5dUtIQnlaWFpVZVhCbEtTQjdYSEpjYmlBZ2RHaHBjeTVqYjI1MFpYaDBMbkIxYzJnb2RHaHBjeTVpY21GalpVbHpRbXh2WTJzb2NISmxkbFI1Y0dVcElEOGdkSGx3WlhNdVlsOXpkR0YwSURvZ2RIbHdaWE11WWw5bGVIQnlLVnh5WEc0Z0lIUm9hWE11Wlhod2NrRnNiRzkzWldRZ1BTQjBjblZsWEhKY2JuMWNjbHh1WEhKY2JuUjBMbVJ2Ykd4aGNrSnlZV05sVEM1MWNHUmhkR1ZEYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnZEdocGN5NWpiMjUwWlhoMExuQjFjMmdvZEhsd1pYTXVZbDkwYlhCc0tWeHlYRzRnSUhSb2FYTXVaWGh3Y2tGc2JHOTNaV1FnUFNCMGNuVmxYSEpjYm4xY2NseHVYSEpjYm5SMExuQmhjbVZ1VEM1MWNHUmhkR1ZEYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRvY0hKbGRsUjVjR1VwSUh0Y2NseHVJQ0IyWVhJZ2MzUmhkR1Z0Wlc1MFVHRnlaVzV6SUQwZ2NISmxkbFI1Y0dVZ1BUMDlJSFIwTGw5cFppQjhmQ0J3Y21WMlZIbHdaU0E5UFQwZ2RIUXVYMlp2Y2lCOGZDQndjbVYyVkhsd1pTQTlQVDBnZEhRdVgzZHBkR2dnZkh3Z2NISmxkbFI1Y0dVZ1BUMDlJSFIwTGw5M2FHbHNaVnh5WEc0Z0lIUm9hWE11WTI5dWRHVjRkQzV3ZFhOb0tITjBZWFJsYldWdWRGQmhjbVZ1Y3lBL0lIUjVjR1Z6TG5CZmMzUmhkQ0E2SUhSNWNHVnpMbkJmWlhod2NpbGNjbHh1SUNCMGFHbHpMbVY0Y0hKQmJHeHZkMlZrSUQwZ2RISjFaVnh5WEc1OVhISmNibHh5WEc1MGRDNXBibU5FWldNdWRYQmtZWFJsUTI5dWRHVjRkQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUM4dklIUnZhMFY0Y0hKQmJHeHZkMlZrSUhOMFlYbHpJSFZ1WTJoaGJtZGxaRnh5WEc1OVhISmNibHh5WEc1MGRDNWZablZ1WTNScGIyNHVkWEJrWVhSbFEyOXVkR1Y0ZENBOUlHWjFibU4wYVc5dUtIQnlaWFpVZVhCbEtTQjdYSEpjYmlBZ2FXWWdLSEJ5WlhaVWVYQmxMbUpsWm05eVpVVjRjSElnSmlZZ2NISmxkbFI1Y0dVZ0lUMDlJSFIwTG5ObGJXa2dKaVlnY0hKbGRsUjVjR1VnSVQwOUlIUjBMbDlsYkhObElDWW1YSEpjYmlBZ0lDQWdJQ0VvS0hCeVpYWlVlWEJsSUQwOVBTQjBkQzVqYjJ4dmJpQjhmQ0J3Y21WMlZIbHdaU0E5UFQwZ2RIUXVZbkpoWTJWTUtTQW1KaUIwYUdsekxtTjFja052Ym5SbGVIUW9LU0E5UFQwZ2RIbHdaWE11WWw5emRHRjBLU2xjY2x4dUlDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1d2RYTm9LSFI1Y0dWekxtWmZaWGh3Y2lsY2NseHVJQ0IwYUdsekxtVjRjSEpCYkd4dmQyVmtJRDBnWm1Gc2MyVmNjbHh1ZlZ4eVhHNWNjbHh1ZEhRdVltRmphMUYxYjNSbExuVndaR0YwWlVOdmJuUmxlSFFnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNCcFppQW9kR2hwY3k1amRYSkRiMjUwWlhoMEtDa2dQVDA5SUhSNWNHVnpMbkZmZEcxd2JDbGNjbHh1SUNBZ0lIUm9hWE11WTI5dWRHVjRkQzV3YjNBb0tWeHlYRzRnSUdWc2MyVmNjbHh1SUNBZ0lIUm9hWE11WTI5dWRHVjRkQzV3ZFhOb0tIUjVjR1Z6TG5GZmRHMXdiQ2xjY2x4dUlDQjBhR2x6TG1WNGNISkJiR3h2ZDJWa0lEMGdabUZzYzJWY2NseHVmVnh5WEc1Y2NseHVMeThnVDJKcVpXTjBJSFI1Y0dVZ2RYTmxaQ0IwYnlCeVpYQnlaWE5sYm5RZ2RHOXJaVzV6TGlCT2IzUmxJSFJvWVhRZ2JtOXliV0ZzYkhrc0lIUnZhMlZ1YzF4eVhHNHZMeUJ6YVcxd2JIa2daWGhwYzNRZ1lYTWdjSEp2Y0dWeWRHbGxjeUJ2YmlCMGFHVWdjR0Z5YzJWeUlHOWlhbVZqZEM0Z1ZHaHBjeUJwY3lCdmJteDVYSEpjYmk4dklIVnpaV1FnWm05eUlIUm9aU0J2YmxSdmEyVnVJR05oYkd4aVlXTnJJR0Z1WkNCMGFHVWdaWGgwWlhKdVlXd2dkRzlyWlc1cGVtVnlMbHh5WEc1Y2NseHVkbUZ5SUZSdmEyVnVJRDBnWm5WdVkzUnBiMjRnVkc5clpXNG9jQ2tnZTF4eVhHNGdJSFJvYVhNdWRIbHdaU0E5SUhBdWRIbHdaVnh5WEc0Z0lIUm9hWE11ZG1Gc2RXVWdQU0J3TG5aaGJIVmxYSEpjYmlBZ2RHaHBjeTV6ZEdGeWRDQTlJSEF1YzNSaGNuUmNjbHh1SUNCMGFHbHpMbVZ1WkNBOUlIQXVaVzVrWEhKY2JpQWdhV1lnS0hBdWIzQjBhVzl1Y3k1c2IyTmhkR2x2Ym5NcFhISmNiaUFnSUNCMGFHbHpMbXh2WXlBOUlHNWxkeUJUYjNWeVkyVk1iMk5oZEdsdmJpaHdMQ0J3TG5OMFlYSjBURzlqTENCd0xtVnVaRXh2WXlsY2NseHVJQ0JwWmlBb2NDNXZjSFJwYjI1ekxuSmhibWRsY3lsY2NseHVJQ0FnSUhSb2FYTXVjbUZ1WjJVZ1BTQmJjQzV6ZEdGeWRDd2djQzVsYm1SZFhISmNibjA3WEhKY2JseHlYRzR2THlBakl5QlViMnRsYm1sNlpYSmNjbHh1WEhKY2JuWmhjaUJ3Y0NRM0lEMGdVR0Z5YzJWeUxuQnliM1J2ZEhsd1pWeHlYRzVjY2x4dUx5OGdRWEpsSUhkbElISjFibTVwYm1jZ2RXNWtaWElnVW1ocGJtOC9YSEpjYm5aaGNpQnBjMUpvYVc1dklEMGdkSGx3Wlc5bUlGQmhZMnRoWjJWeklEMDlJRndpYjJKcVpXTjBYQ0lnSmlZZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRkJoWTJ0aFoyVnpLU0E5UFNCY0lsdHZZbXBsWTNRZ1NtRjJZVkJoWTJ0aFoyVmRYQ0pjY2x4dVhISmNiaTh2SUUxdmRtVWdkRzhnZEdobElHNWxlSFFnZEc5clpXNWNjbHh1WEhKY2JuQndKRGN1Ym1WNGRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXViMjVVYjJ0bGJpbGNjbHh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeTV2YmxSdmEyVnVLRzVsZHlCVWIydGxiaWgwYUdsektTbGNjbHh1WEhKY2JpQWdkR2hwY3k1c1lYTjBWRzlyUlc1a0lEMGdkR2hwY3k1bGJtUmNjbHh1SUNCMGFHbHpMbXhoYzNSVWIydFRkR0Z5ZENBOUlIUm9hWE11YzNSaGNuUmNjbHh1SUNCMGFHbHpMbXhoYzNSVWIydEZibVJNYjJNZ1BTQjBhR2x6TG1WdVpFeHZZMXh5WEc0Z0lIUm9hWE11YkdGemRGUnZhMU4wWVhKMFRHOWpJRDBnZEdocGN5NXpkR0Z5ZEV4dlkxeHlYRzRnSUhSb2FYTXVibVY0ZEZSdmEyVnVLQ2xjY2x4dWZWeHlYRzVjY2x4dWNIQWtOeTVuWlhSVWIydGxiaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUhSb2FYTXVibVY0ZENncFhISmNiaUFnY21WMGRYSnVJRzVsZHlCVWIydGxiaWgwYUdsektWeHlYRzU5WEhKY2JseHlYRzR2THlCSlppQjNaU2R5WlNCcGJpQmhiaUJGVXpZZ1pXNTJhWEp2Ym0xbGJuUXNJRzFoYTJVZ2NHRnljMlZ5Y3lCcGRHVnlZV0pzWlZ4eVhHNXBaaUFvZEhsd1pXOW1JRk41YldKdmJDQWhQVDBnWENKMWJtUmxabWx1WldSY0lpbGNjbHh1SUNCd2NDUTNXMU41YldKdmJDNXBkR1Z5WVhSdmNsMGdQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE5jY2x4dUlDQWdJSEpsZEhWeWJpQjdibVY0ZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ2RHOXJaVzRnUFNCelpXeG1MbWRsZEZSdmEyVnVLQ2xjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSHRjY2x4dUlDQWdJQ0FnSUNCa2IyNWxPaUIwYjJ0bGJpNTBlWEJsSUQwOVBTQjBkQzVsYjJZc1hISmNiaUFnSUNBZ0lDQWdkbUZzZFdVNklIUnZhMlZ1WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxOVhISmNiaUFnZlZ4eVhHNWNjbHh1THk4Z1ZHOW5aMnhsSUhOMGNtbGpkQ0J0YjJSbExpQlNaUzF5WldGa2N5QjBhR1VnYm1WNGRDQnVkVzFpWlhJZ2IzSWdjM1J5YVc1bklIUnZJSEJzWldGelpWeHlYRzR2THlCd1pXUmhiblJwWXlCMFpYTjBjeUFvWUZ3aWRYTmxJSE4wY21samRGd2lPeUF3TVRBN1lDQnphRzkxYkdRZ1ptRnBiQ2t1WEhKY2JseHlYRzV3Y0NRM0xuTmxkRk4wY21samRDQTlJR1oxYm1OMGFXOXVLSE4wY21samRDa2dlMXh5WEc0Z0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQjBhR2x6TG5OMGNtbGpkQ0E5SUhOMGNtbGpkRnh5WEc0Z0lHbG1JQ2gwYUdsekxuUjVjR1VnSVQwOUlIUjBMbTUxYlNBbUppQjBhR2x6TG5SNWNHVWdJVDA5SUhSMExuTjBjbWx1WnlrZ2NtVjBkWEp1WEhKY2JpQWdkR2hwY3k1d2IzTWdQU0IwYUdsekxuTjBZWEowWEhKY2JpQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXNiMk5oZEdsdmJuTXBJSHRjY2x4dUlDQWdJSGRvYVd4bElDaDBhR2x6TG5CdmN5QThJSFJvYVhNdWJHbHVaVk4wWVhKMEtTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNa01TNXNhVzVsVTNSaGNuUWdQU0IwYUdsekpERXVhVzV3ZFhRdWJHRnpkRWx1WkdWNFQyWW9YQ0pjWEc1Y0lpd2dkR2hwY3lReExteHBibVZUZEdGeWRDQXRJRElwSUNzZ01WeHlYRzRnSUNBZ0lDQXRMWFJvYVhNa01TNWpkWEpNYVc1bFhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNGdJSFJvYVhNdWJtVjRkRlJ2YTJWdUtDbGNjbHh1ZlZ4eVhHNWNjbHh1Y0hBa055NWpkWEpEYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnY21WMGRYSnVJSFJvYVhNdVkyOXVkR1Y0ZEZ0MGFHbHpMbU52Ym5SbGVIUXViR1Z1WjNSb0lDMGdNVjFjY2x4dWZWeHlYRzVjY2x4dUx5OGdVbVZoWkNCaElITnBibWRzWlNCMGIydGxiaXdnZFhCa1lYUnBibWNnZEdobElIQmhjbk5sY2lCdlltcGxZM1FuY3lCMGIydGxiaTF5Wld4aGRHVmtYSEpjYmk4dklIQnliM0JsY25ScFpYTXVYSEpjYmx4eVhHNXdjQ1EzTG01bGVIUlViMnRsYmlBOUlHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lIWmhjaUJqZFhKRGIyNTBaWGgwSUQwZ2RHaHBjeTVqZFhKRGIyNTBaWGgwS0NsY2NseHVJQ0JwWmlBb0lXTjFja052Ym5SbGVIUWdmSHdnSVdOMWNrTnZiblJsZUhRdWNISmxjMlZ5ZG1WVGNHRmpaU2tnZEdocGN5NXphMmx3VTNCaFkyVW9LVnh5WEc1Y2NseHVJQ0IwYUdsekxuTjBZWEowSUQwZ2RHaHBjeTV3YjNOY2NseHVJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbXh2WTJGMGFXOXVjeWtnZEdocGN5NXpkR0Z5ZEV4dll5QTlJSFJvYVhNdVkzVnlVRzl6YVhScGIyNG9LVnh5WEc0Z0lHbG1JQ2gwYUdsekxuQnZjeUErUFNCMGFHbHpMbWx1Y0hWMExteGxibWQwYUNrZ2NtVjBkWEp1SUhSb2FYTXVabWx1YVhOb1ZHOXJaVzRvZEhRdVpXOW1LVnh5WEc1Y2NseHVJQ0JwWmlBb1kzVnlRMjl1ZEdWNGRDNXZkbVZ5Y21sa1pTa2djbVYwZFhKdUlHTjFja052Ym5SbGVIUXViM1psY25KcFpHVW9kR2hwY3lsY2NseHVJQ0JsYkhObElIUm9hWE11Y21WaFpGUnZhMlZ1S0hSb2FYTXVablZzYkVOb1lYSkRiMlJsUVhSUWIzTW9LU2xjY2x4dWZWeHlYRzVjY2x4dWNIQWtOeTV5WldGa1ZHOXJaVzRnUFNCbWRXNWpkR2x2YmloamIyUmxLU0I3WEhKY2JpQWdMeThnU1dSbGJuUnBabWxsY2lCdmNpQnJaWGwzYjNKa0xpQW5YRngxV0ZoWVdDY2djMlZ4ZFdWdVkyVnpJR0Z5WlNCaGJHeHZkMlZrSUdsdVhISmNiaUFnTHk4Z2FXUmxiblJwWm1sbGNuTXNJSE52SUNkY1hDY2dZV3h6YnlCa2FYTndZWFJqYUdWeklIUnZJSFJvWVhRdVhISmNiaUFnYVdZZ0tHbHpTV1JsYm5ScFptbGxjbE4wWVhKMEtHTnZaR1VzSUhSb2FYTXViM0IwYVc5dWN5NWxZMjFoVm1WeWMybHZiaUErUFNBMktTQjhmQ0JqYjJSbElEMDlQU0E1TWlBdktpQW5YRnduSUNvdktWeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZoWkZkdmNtUW9LVnh5WEc1Y2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlViMnRsYmtaeWIyMURiMlJsS0dOdlpHVXBYSEpjYm4xY2NseHVYSEpjYm5Cd0pEY3VablZzYkVOb1lYSkRiMlJsUVhSUWIzTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0IyWVhJZ1kyOWtaU0E5SUhSb2FYTXVhVzV3ZFhRdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5bGNjbHh1SUNCcFppQW9ZMjlrWlNBOFBTQXdlR1EzWm1ZZ2ZId2dZMjlrWlNBK1BTQXdlR1V3TURBcElISmxkSFZ5YmlCamIyUmxYSEpjYmlBZ2RtRnlJRzVsZUhRZ1BTQjBhR2x6TG1sdWNIVjBMbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01nS3lBeEtWeHlYRzRnSUhKbGRIVnliaUFvWTI5a1pTQThQQ0F4TUNrZ0t5QnVaWGgwSUMwZ01IZ3pOV1prWXpBd1hISmNibjFjY2x4dVhISmNibkJ3SkRjdWMydHBjRUpzYjJOclEyOXRiV1Z1ZENBOUlHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQjJZWElnYzNSaGNuUk1iMk1nUFNCMGFHbHpMbTl3ZEdsdmJuTXViMjVEYjIxdFpXNTBJQ1ltSUhSb2FYTXVZM1Z5VUc5emFYUnBiMjRvS1Z4eVhHNGdJSFpoY2lCemRHRnlkQ0E5SUhSb2FYTXVjRzl6TENCbGJtUWdQU0IwYUdsekxtbHVjSFYwTG1sdVpHVjRUMllvWENJcUwxd2lMQ0IwYUdsekxuQnZjeUFyUFNBeUtWeHlYRzRnSUdsbUlDaGxibVFnUFQwOUlDMHhLU0IwYUdsekxuSmhhWE5sS0hSb2FYTXVjRzl6SUMwZ01pd2dYQ0pWYm5SbGNtMXBibUYwWldRZ1kyOXRiV1Z1ZEZ3aUtWeHlYRzRnSUhSb2FYTXVjRzl6SUQwZ1pXNWtJQ3NnTWx4eVhHNGdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXViRzlqWVhScGIyNXpLU0I3WEhKY2JpQWdJQ0JzYVc1bFFuSmxZV3RITG14aGMzUkpibVJsZUNBOUlITjBZWEowWEhKY2JpQWdJQ0IyWVhJZ2JXRjBZMmhjY2x4dUlDQWdJSGRvYVd4bElDZ29iV0YwWTJnZ1BTQnNhVzVsUW5KbFlXdEhMbVY0WldNb2RHaHBjeTVwYm5CMWRDa3BJQ1ltSUcxaGRHTm9MbWx1WkdWNElEd2dkR2hwY3k1d2IzTXBJSHRjY2x4dUlDQWdJQ0FnS3l0MGFHbHpKREV1WTNWeVRHbHVaVnh5WEc0Z0lDQWdJQ0IwYUdsekpERXViR2x1WlZOMFlYSjBJRDBnYldGMFkyZ3VhVzVrWlhnZ0t5QnRZWFJqYUZzd1hTNXNaVzVuZEdoY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JpQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXZia052YlcxbGJuUXBYSEpjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk11YjI1RGIyMXRaVzUwS0hSeWRXVXNJSFJvYVhNdWFXNXdkWFF1YzJ4cFkyVW9jM1JoY25RZ0t5QXlMQ0JsYm1RcExDQnpkR0Z5ZEN3Z2RHaHBjeTV3YjNNc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhKMFRHOWpMQ0IwYUdsekxtTjFjbEJ2YzJsMGFXOXVLQ2twWEhKY2JuMWNjbHh1WEhKY2JuQndKRGN1YzJ0cGNFeHBibVZEYjIxdFpXNTBJRDBnWm5WdVkzUnBiMjRvYzNSaGNuUlRhMmx3S1NCN1hISmNiaUFnZG1GeUlIUm9hWE1rTVNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUhaaGNpQnpkR0Z5ZENBOUlIUm9hWE11Y0c5elhISmNiaUFnZG1GeUlITjBZWEowVEc5aklEMGdkR2hwY3k1dmNIUnBiMjV6TG05dVEyOXRiV1Z1ZENBbUppQjBhR2x6TG1OMWNsQnZjMmwwYVc5dUtDbGNjbHh1SUNCMllYSWdZMmdnUFNCMGFHbHpMbWx1Y0hWMExtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXJQWE4wWVhKMFUydHBjQ2xjY2x4dUlDQjNhR2xzWlNBb2RHaHBjeTV3YjNNZ1BDQjBhR2x6TG1sdWNIVjBMbXhsYm1kMGFDQW1KaUJqYUNBaFBUMGdNVEFnSmlZZ1kyZ2dJVDA5SURFeklDWW1JR05vSUNFOVBTQTRNak15SUNZbUlHTm9JQ0U5UFNBNE1qTXpLU0I3WEhKY2JpQWdJQ0FySzNSb2FYTWtNUzV3YjNOY2NseHVJQ0FnSUdOb0lEMGdkR2hwY3lReExtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeVF4TG5CdmN5bGNjbHh1SUNCOVhISmNiaUFnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV2YmtOdmJXMWxiblFwWEhKY2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWIyNURiMjF0Wlc1MEtHWmhiSE5sTENCMGFHbHpMbWx1Y0hWMExuTnNhV05sS0hOMFlYSjBJQ3NnYzNSaGNuUlRhMmx3TENCMGFHbHpMbkJ2Y3lrc0lITjBZWEowTENCMGFHbHpMbkJ2Y3l4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25STWIyTXNJSFJvYVhNdVkzVnlVRzl6YVhScGIyNG9LU2xjY2x4dWZWeHlYRzVjY2x4dUx5OGdRMkZzYkdWa0lHRjBJSFJvWlNCemRHRnlkQ0J2WmlCMGFHVWdjR0Z5YzJVZ1lXNWtJR0ZtZEdWeUlHVjJaWEo1SUhSdmEyVnVMaUJUYTJsd2MxeHlYRzR2THlCM2FHbDBaWE53WVdObElHRnVaQ0JqYjIxdFpXNTBjeXdnWVc1a0xseHlYRzVjY2x4dWNIQWtOeTV6YTJsd1UzQmhZMlVnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ2JHOXZjRG9nZDJocGJHVWdLSFJvYVhNdWNHOXpJRHdnZEdocGN5NXBibkIxZEM1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUhaaGNpQmphQ0E5SUhSb2FYTWtNUzVwYm5CMWRDNWphR0Z5UTI5a1pVRjBLSFJvYVhNa01TNXdiM01wWEhKY2JpQWdJQ0J6ZDJsMFkyZ2dLR05vS1NCN1hISmNiaUFnSUNBZ0lHTmhjMlVnTXpJNklHTmhjMlVnTVRZd09pQXZMeUFuSUNkY2NseHVJQ0FnSUNBZ0lDQXJLM1JvYVhNa01TNXdiM05jY2x4dUlDQWdJQ0FnSUNCaWNtVmhhMXh5WEc0Z0lDQWdJQ0JqWVhObElERXpPbHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6SkRFdWFXNXdkWFF1WTJoaGNrTnZaR1ZCZENoMGFHbHpKREV1Y0c5eklDc2dNU2tnUFQwOUlERXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXJLM1JvYVhNa01TNXdiM05jY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lHTmhjMlVnTVRBNklHTmhjMlVnT0RJek1qb2dZMkZ6WlNBNE1qTXpPbHh5WEc0Z0lDQWdJQ0FnSUNzcmRHaHBjeVF4TG5CdmMxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpKREV1YjNCMGFXOXVjeTVzYjJOaGRHbHZibk1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ3NyZEdocGN5UXhMbU4xY2t4cGJtVmNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTWtNUzVzYVc1bFUzUmhjblFnUFNCMGFHbHpKREV1Y0c5elhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdKeVpXRnJYSEpjYmlBZ0lDQWdJR05oYzJVZ05EYzZJQzh2SUNjdkoxeHlYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kR2hwY3lReExtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeVF4TG5CdmN5QXJJREVwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JqWVhObElEUXlPaUF2THlBbktpZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeVF4TG5OcmFYQkNiRzlqYTBOdmJXMWxiblFvS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHlYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQTBOenBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3lReExuTnJhWEJNYVc1bFEyOXRiV1Z1ZENneUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh5WEc0Z0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXc2diRzl2Y0Z4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JpY21WaGExeHlYRzRnSUNBZ0lDQmtaV1poZFd4ME9seHlYRzRnSUNBZ0lDQWdJR2xtSUNoamFDQStJRGdnSmlZZ1kyZ2dQQ0F4TkNCOGZDQmphQ0ErUFNBMU56WXdJQ1ltSUc1dmJrRlRRMGxKZDJocGRHVnpjR0ZqWlM1MFpYTjBLRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWTJncEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0t5dDBhR2x6SkRFdWNHOXpYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZySUd4dmIzQmNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc0dkx5QkRZV3hzWldRZ1lYUWdkR2hsSUdWdVpDQnZaaUJsZG1WeWVTQjBiMnRsYmk0Z1UyVjBjeUJnWlc1a1lDd2dZSFpoYkdBc0lHRnVaRnh5WEc0dkx5QnRZV2x1ZEdGcGJuTWdZR052Ym5SbGVIUmdJR0Z1WkNCZ1pYaHdja0ZzYkc5M1pXUmdMQ0JoYm1RZ2MydHBjSE1nZEdobElITndZV05sSUdGbWRHVnlYSEpjYmk4dklIUm9aU0IwYjJ0bGJpd2djMjhnZEdoaGRDQjBhR1VnYm1WNGRDQnZibVVuY3lCZ2MzUmhjblJnSUhkcGJHd2djRzlwYm5RZ1lYUWdkR2hsWEhKY2JpOHZJSEpwWjJoMElIQnZjMmwwYVc5dUxseHlYRzVjY2x4dWNIQWtOeTVtYVc1cGMyaFViMnRsYmlBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUhaaGJDa2dlMXh5WEc0Z0lIUm9hWE11Wlc1a0lEMGdkR2hwY3k1d2IzTmNjbHh1SUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG14dlkyRjBhVzl1Y3lrZ2RHaHBjeTVsYm1STWIyTWdQU0IwYUdsekxtTjFjbEJ2YzJsMGFXOXVLQ2xjY2x4dUlDQjJZWElnY0hKbGRsUjVjR1VnUFNCMGFHbHpMblI1Y0dWY2NseHVJQ0IwYUdsekxuUjVjR1VnUFNCMGVYQmxYSEpjYmlBZ2RHaHBjeTUyWVd4MVpTQTlJSFpoYkZ4eVhHNWNjbHh1SUNCMGFHbHpMblZ3WkdGMFpVTnZiblJsZUhRb2NISmxkbFI1Y0dVcFhISmNibjFjY2x4dVhISmNiaTh2SUNNakl5QlViMnRsYmlCeVpXRmthVzVuWEhKY2JseHlYRzR2THlCVWFHbHpJR2x6SUhSb1pTQm1kVzVqZEdsdmJpQjBhR0YwSUdseklHTmhiR3hsWkNCMGJ5Qm1aWFJqYUNCMGFHVWdibVY0ZENCMGIydGxiaTRnU1hSY2NseHVMeThnYVhNZ2MyOXRaWGRvWVhRZ2IySnpZM1Z5WlN3Z1ltVmpZWFZ6WlNCcGRDQjNiM0pyY3lCcGJpQmphR0Z5WVdOMFpYSWdZMjlrWlhNZ2NtRjBhR1Z5WEhKY2JpOHZJSFJvWVc0Z1kyaGhjbUZqZEdWeWN5d2dZVzVrSUdKbFkyRjFjMlVnYjNCbGNtRjBiM0lnY0dGeWMybHVaeUJvWVhNZ1ltVmxiaUJwYm14cGJtVmtYSEpjYmk4dklHbHVkRzhnYVhRdVhISmNiaTh2WEhKY2JpOHZJRUZzYkNCcGJpQjBhR1VnYm1GdFpTQnZaaUJ6Y0dWbFpDNWNjbHh1THk5Y2NseHVjSEFrTnk1eVpXRmtWRzlyWlc1ZlpHOTBJRDBnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnZG1GeUlHNWxlSFFnUFNCMGFHbHpMbWx1Y0hWMExtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTWdLeUF4S1Z4eVhHNGdJR2xtSUNodVpYaDBJRDQ5SURRNElDWW1JRzVsZUhRZ1BEMGdOVGNwSUhKbGRIVnliaUIwYUdsekxuSmxZV1JPZFcxaVpYSW9kSEoxWlNsY2NseHVJQ0IyWVhJZ2JtVjRkRElnUFNCMGFHbHpMbWx1Y0hWMExtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTWdLeUF5S1Z4eVhHNGdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVaV050WVZabGNuTnBiMjRnUGowZ05pQW1KaUJ1WlhoMElEMDlQU0EwTmlBbUppQnVaWGgwTWlBOVBUMGdORFlwSUhzZ0x5OGdORFlnUFNCa2IzUWdKeTRuWEhKY2JpQWdJQ0IwYUdsekxuQnZjeUFyUFNBelhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoVWIydGxiaWgwZEM1bGJHeHBjSE5wY3lsY2NseHVJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdLeXQwYUdsekxuQnZjMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9WRzlyWlc0b2RIUXVaRzkwS1Z4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dWNIQWtOeTV5WldGa1ZHOXJaVzVmYzJ4aGMyZ2dQU0JtZFc1amRHbHZiaWdwSUhzZ0x5OGdKeThuWEhKY2JpQWdkbUZ5SUc1bGVIUWdQU0IwYUdsekxtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QXhLVnh5WEc0Z0lHbG1JQ2gwYUdsekxtVjRjSEpCYkd4dmQyVmtLU0I3S3l0MGFHbHpMbkJ2Y3pzZ2NtVjBkWEp1SUhSb2FYTXVjbVZoWkZKbFoyVjRjQ2dwZlZ4eVhHNGdJR2xtSUNodVpYaDBJRDA5UFNBMk1Ta2djbVYwZFhKdUlIUm9hWE11Wm1sdWFYTm9UM0FvZEhRdVlYTnphV2R1TENBeUtWeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU5d0tIUjBMbk5zWVhOb0xDQXhLVnh5WEc1OVhISmNibHh5WEc1d2NDUTNMbkpsWVdSVWIydGxibDl0ZFd4MFgyMXZaSFZzYjE5bGVIQWdQU0JtZFc1amRHbHZiaWhqYjJSbEtTQjdJQzh2SUNjbEtpZGNjbHh1SUNCMllYSWdibVY0ZENBOUlIUm9hWE11YVc1d2RYUXVZMmhoY2tOdlpHVkJkQ2gwYUdsekxuQnZjeUFySURFcFhISmNiaUFnZG1GeUlITnBlbVVnUFNBeFhISmNiaUFnZG1GeUlIUnZhMlZ1ZEhsd1pTQTlJR052WkdVZ1BUMDlJRFF5SUQ4Z2RIUXVjM1JoY2lBNklIUjBMbTF2WkhWc2IxeHlYRzVjY2x4dUlDQXZMeUJsZUhCdmJtVnVkR2xoZEdsdmJpQnZjR1Z5WVhSdmNpQXFLaUJoYm1RZ0tpbzlYSEpjYmlBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1bFkyMWhWbVZ5YzJsdmJpQStQU0EzSUNZbUlHNWxlSFFnUFQwOUlEUXlLU0I3WEhKY2JpQWdJQ0FySzNOcGVtVmNjbHh1SUNBZ0lIUnZhMlZ1ZEhsd1pTQTlJSFIwTG5OMFlYSnpkR0Z5WEhKY2JpQWdJQ0J1WlhoMElEMGdkR2hwY3k1cGJuQjFkQzVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6SUNzZ01pbGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHbG1JQ2h1WlhoMElEMDlQU0EyTVNrZ2NtVjBkWEp1SUhSb2FYTXVabWx1YVhOb1QzQW9kSFF1WVhOemFXZHVMQ0J6YVhwbElDc2dNU2xjY2x4dUlDQnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaFBjQ2gwYjJ0bGJuUjVjR1VzSUhOcGVtVXBYSEpjYm4xY2NseHVYSEpjYm5Cd0pEY3VjbVZoWkZSdmEyVnVYM0JwY0dWZllXMXdJRDBnWm5WdVkzUnBiMjRvWTI5a1pTa2dleUF2THlBbmZDWW5YSEpjYmlBZ2RtRnlJRzVsZUhRZ1BTQjBhR2x6TG1sdWNIVjBMbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01nS3lBeEtWeHlYRzRnSUdsbUlDaHVaWGgwSUQwOVBTQmpiMlJsS1NCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoUGNDaGpiMlJsSUQwOVBTQXhNalFnUHlCMGRDNXNiMmRwWTJGc1QxSWdPaUIwZEM1c2IyZHBZMkZzUVU1RUxDQXlLVnh5WEc0Z0lHbG1JQ2h1WlhoMElEMDlQU0EyTVNrZ2NtVjBkWEp1SUhSb2FYTXVabWx1YVhOb1QzQW9kSFF1WVhOemFXZHVMQ0F5S1Z4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTl3S0dOdlpHVWdQVDA5SURFeU5DQS9JSFIwTG1KcGRIZHBjMlZQVWlBNklIUjBMbUpwZEhkcGMyVkJUa1FzSURFcFhISmNibjFjY2x4dVhISmNibkJ3SkRjdWNtVmhaRlJ2YTJWdVgyTmhjbVYwSUQwZ1puVnVZM1JwYjI0b0tTQjdJQzh2SUNkZUoxeHlYRzRnSUhaaGNpQnVaWGgwSUQwZ2RHaHBjeTVwYm5CMWRDNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpJQ3NnTVNsY2NseHVJQ0JwWmlBb2JtVjRkQ0E5UFQwZ05qRXBJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRTl3S0hSMExtRnpjMmxuYml3Z01pbGNjbHh1SUNCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoUGNDaDBkQzVpYVhSM2FYTmxXRTlTTENBeEtWeHlYRzU5WEhKY2JseHlYRzV3Y0NRM0xuSmxZV1JVYjJ0bGJsOXdiSFZ6WDIxcGJpQTlJR1oxYm1OMGFXOXVLR052WkdVcElIc2dMeThnSnlzdEoxeHlYRzRnSUhaaGNpQnVaWGgwSUQwZ2RHaHBjeTVwYm5CMWRDNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpJQ3NnTVNsY2NseHVJQ0JwWmlBb2JtVjRkQ0E5UFQwZ1kyOWtaU2tnZTF4eVhHNGdJQ0FnYVdZZ0tHNWxlSFFnUFQwZ05EVWdKaVlnZEdocGN5NXBibkIxZEM1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5eklDc2dNaWtnUFQwZ05qSWdKaVpjY2x4dUlDQWdJQ0FnSUNCc2FXNWxRbkpsWVdzdWRHVnpkQ2gwYUdsekxtbHVjSFYwTG5Oc2FXTmxLSFJvYVhNdWJHRnpkRlJ2YTBWdVpDd2dkR2hwY3k1d2IzTXBLU2tnZTF4eVhHNGdJQ0FnSUNBdkx5QkJJR0F0TFQ1Z0lHeHBibVVnWTI5dGJXVnVkRnh5WEc0Z0lDQWdJQ0IwYUdsekxuTnJhWEJNYVc1bFEyOXRiV1Z1ZENnektWeHlYRzRnSUNBZ0lDQjBhR2x6TG5OcmFYQlRjR0ZqWlNncFhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTVsZUhSVWIydGxiaWdwWEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhQY0NoMGRDNXBibU5FWldNc0lESXBYSEpjYmlBZ2ZWeHlYRzRnSUdsbUlDaHVaWGgwSUQwOVBTQTJNU2tnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVDNBb2RIUXVZWE56YVdkdUxDQXlLVnh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFOXdLSFIwTG5Cc2RYTk5hVzRzSURFcFhISmNibjFjY2x4dVhISmNibkJ3SkRjdWNtVmhaRlJ2YTJWdVgyeDBYMmQwSUQwZ1puVnVZM1JwYjI0b1kyOWtaU2tnZXlBdkx5QW5QRDRuWEhKY2JpQWdkbUZ5SUc1bGVIUWdQU0IwYUdsekxtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QXhLVnh5WEc0Z0lIWmhjaUJ6YVhwbElEMGdNVnh5WEc0Z0lHbG1JQ2h1WlhoMElEMDlQU0JqYjJSbEtTQjdYSEpjYmlBZ0lDQnphWHBsSUQwZ1kyOWtaU0E5UFQwZ05qSWdKaVlnZEdocGN5NXBibkIxZEM1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5eklDc2dNaWtnUFQwOUlEWXlJRDhnTXlBNklESmNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QnphWHBsS1NBOVBUMGdOakVwSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUU5d0tIUjBMbUZ6YzJsbmJpd2djMmw2WlNBcklERXBYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaFBjQ2gwZEM1aWFYUlRhR2xtZEN3Z2MybDZaU2xjY2x4dUlDQjlYSEpjYmlBZ2FXWWdLRzVsZUhRZ1BUMGdNek1nSmlZZ1kyOWtaU0E5UFNBMk1DQW1KaUIwYUdsekxtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QXlLU0E5UFNBME5TQW1KbHh5WEc0Z0lDQWdJQ0IwYUdsekxtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QXpLU0E5UFNBME5Ta2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVhVzVOYjJSMWJHVXBJSFJvYVhNdWRXNWxlSEJsWTNSbFpDZ3BYSEpjYmlBZ0lDQXZMeUJnUENFdExXQXNJR0Z1SUZoTlRDMXpkSGxzWlNCamIyMXRaVzUwSUhSb1lYUWdjMmh2ZFd4a0lHSmxJR2x1ZEdWeWNISmxkR1ZrSUdGeklHRWdiR2x1WlNCamIyMXRaVzUwWEhKY2JpQWdJQ0IwYUdsekxuTnJhWEJNYVc1bFEyOXRiV1Z1ZENnMEtWeHlYRzRnSUNBZ2RHaHBjeTV6YTJsd1UzQmhZMlVvS1Z4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtVjRkRlJ2YTJWdUtDbGNjbHh1SUNCOVhISmNiaUFnYVdZZ0tHNWxlSFFnUFQwOUlEWXhLU0J6YVhwbElEMGdNbHh5WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbVpwYm1semFFOXdLSFIwTG5KbGJHRjBhVzl1WVd3c0lITnBlbVVwWEhKY2JuMWNjbHh1WEhKY2JuQndKRGN1Y21WaFpGUnZhMlZ1WDJWeFgyVjRZMndnUFNCbWRXNWpkR2x2YmloamIyUmxLU0I3SUM4dklDYzlJU2RjY2x4dUlDQjJZWElnYm1WNGRDQTlJSFJvYVhNdWFXNXdkWFF1WTJoaGNrTnZaR1ZCZENoMGFHbHpMbkJ2Y3lBcklERXBYSEpjYmlBZ2FXWWdLRzVsZUhRZ1BUMDlJRFl4S1NCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoUGNDaDBkQzVsY1hWaGJHbDBlU3dnZEdocGN5NXBibkIxZEM1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5eklDc2dNaWtnUFQwOUlEWXhJRDhnTXlBNklESXBYSEpjYmlBZ2FXWWdLR052WkdVZ1BUMDlJRFl4SUNZbUlHNWxlSFFnUFQwOUlEWXlJQ1ltSUhSb2FYTXViM0IwYVc5dWN5NWxZMjFoVm1WeWMybHZiaUErUFNBMktTQjdJQzh2SUNjOVBpZGNjbHh1SUNBZ0lIUm9hWE11Y0c5eklDczlJREpjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRlJ2YTJWdUtIUjBMbUZ5Y205M0tWeHlYRzRnSUgxY2NseHVJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhQY0NoamIyUmxJRDA5UFNBMk1TQS9JSFIwTG1WeElEb2dkSFF1Y0hKbFptbDRMQ0F4S1Z4eVhHNTlYSEpjYmx4eVhHNXdjQ1EzTG1kbGRGUnZhMlZ1Um5KdmJVTnZaR1VnUFNCbWRXNWpkR2x2YmloamIyUmxLU0I3WEhKY2JpQWdjM2RwZEdOb0lDaGpiMlJsS1NCN1hISmNiaUFnSUNBdkx5QlVhR1VnYVc1MFpYSndjbVYwWVhScGIyNGdiMllnWVNCa2IzUWdaR1Z3Wlc1a2N5QnZiaUIzYUdWMGFHVnlJR2wwSUdseklHWnZiR3h2ZDJWa1hISmNiaUFnSUNBdkx5QmllU0JoSUdScFoybDBJRzl5SUdGdWIzUm9aWElnZEhkdklHUnZkSE11WEhKY2JpQWdZMkZ6WlNBME5qb2dMeThnSnk0blhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV0ZrVkc5clpXNWZaRzkwS0NsY2NseHVYSEpjYmlBZ0lDQXZMeUJRZFc1amRIVmhkR2x2YmlCMGIydGxibk11WEhKY2JpQWdZMkZ6WlNBME1Eb2dLeXQwYUdsekxuQnZjenNnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVkc5clpXNG9kSFF1Y0dGeVpXNU1LVnh5WEc0Z0lHTmhjMlVnTkRFNklDc3JkR2hwY3k1d2IzTTdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRlJ2YTJWdUtIUjBMbkJoY21WdVVpbGNjbHh1SUNCallYTmxJRFU1T2lBckszUm9hWE11Y0c5ek95QnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaFViMnRsYmloMGRDNXpaVzFwS1Z4eVhHNGdJR05oYzJVZ05EUTZJQ3NyZEdocGN5NXdiM003SUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUZSdmEyVnVLSFIwTG1OdmJXMWhLVnh5WEc0Z0lHTmhjMlVnT1RFNklDc3JkR2hwY3k1d2IzTTdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRlJ2YTJWdUtIUjBMbUp5WVdOclpYUk1LVnh5WEc0Z0lHTmhjMlVnT1RNNklDc3JkR2hwY3k1d2IzTTdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRlJ2YTJWdUtIUjBMbUp5WVdOclpYUlNLVnh5WEc0Z0lHTmhjMlVnTVRJek9pQXJLM1JvYVhNdWNHOXpPeUJ5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhVYjJ0bGJpaDBkQzVpY21GalpVd3BYSEpjYmlBZ1kyRnpaU0F4TWpVNklDc3JkR2hwY3k1d2IzTTdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRlJ2YTJWdUtIUjBMbUp5WVdObFVpbGNjbHh1SUNCallYTmxJRFU0T2lBckszUm9hWE11Y0c5ek95QnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaFViMnRsYmloMGRDNWpiMnh2YmlsY2NseHVJQ0JqWVhObElEWXpPaUFySzNSb2FYTXVjRzl6T3lCeVpYUjFjbTRnZEdocGN5NW1hVzVwYzJoVWIydGxiaWgwZEM1eGRXVnpkR2x2YmlsY2NseHVYSEpjYmlBZ1kyRnpaU0E1TmpvZ0x5OGdKMkFuWEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbVZqYldGV1pYSnphVzl1SUR3Z05pa2dZbkpsWVd0Y2NseHVJQ0FnSUNzcmRHaHBjeTV3YjNOY2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUZSdmEyVnVLSFIwTG1KaFkydFJkVzkwWlNsY2NseHVYSEpjYmlBZ1kyRnpaU0EwT0RvZ0x5OGdKekFuWEhKY2JpQWdJQ0IyWVhJZ2JtVjRkQ0E5SUhSb2FYTXVhVzV3ZFhRdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5QXJJREVwWEhKY2JpQWdJQ0JwWmlBb2JtVjRkQ0E5UFQwZ01USXdJSHg4SUc1bGVIUWdQVDA5SURnNEtTQnlaWFIxY200Z2RHaHBjeTV5WldGa1VtRmthWGhPZFcxaVpYSW9NVFlwSUM4dklDY3dlQ2NzSUNjd1dDY2dMU0JvWlhnZ2JuVnRZbVZ5WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbVZqYldGV1pYSnphVzl1SUQ0OUlEWXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tHNWxlSFFnUFQwOUlERXhNU0I4ZkNCdVpYaDBJRDA5UFNBM09Ta2djbVYwZFhKdUlIUm9hWE11Y21WaFpGSmhaR2w0VG5WdFltVnlLRGdwSUM4dklDY3dieWNzSUNjd1R5Y2dMU0J2WTNSaGJDQnVkVzFpWlhKY2NseHVJQ0FnSUNBZ2FXWWdLRzVsZUhRZ1BUMDlJRGs0SUh4OElHNWxlSFFnUFQwOUlEWTJLU0J5WlhSMWNtNGdkR2hwY3k1eVpXRmtVbUZrYVhoT2RXMWlaWElvTWlrZ0x5OGdKekJpSnl3Z0p6QkNKeUF0SUdKcGJtRnllU0J1ZFcxaVpYSmNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lDOHZJRUZ1ZVhSb2FXNW5JR1ZzYzJVZ1ltVm5hVzV1YVc1bklIZHBkR2dnWVNCa2FXZHBkQ0JwY3lCaGJpQnBiblJsWjJWeUxDQnZZM1JoYkZ4eVhHNGdJQ0FnTHk4Z2JuVnRZbVZ5TENCdmNpQm1iRzloZEM1Y2NseHVJQ0JqWVhObElEUTVPaUJqWVhObElEVXdPaUJqWVhObElEVXhPaUJqWVhObElEVXlPaUJqWVhObElEVXpPaUJqWVhObElEVTBPaUJqWVhObElEVTFPaUJqWVhObElEVTJPaUJqWVhObElEVTNPaUF2THlBeExUbGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsWVdST2RXMWlaWElvWm1Gc2MyVXBYSEpjYmx4eVhHNGdJQ0FnTHk4Z1VYVnZkR1Z6SUhCeWIyUjFZMlVnYzNSeWFXNW5jeTVjY2x4dUlDQmpZWE5sSURNME9pQmpZWE5sSURNNU9pQXZMeUFuWENJbkxDQmNJaWRjSWx4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVmhaRk4wY21sdVp5aGpiMlJsS1Z4eVhHNWNjbHh1SUNBZ0lDOHZJRTl3WlhKaGRHOXljeUJoY21VZ2NHRnljMlZrSUdsdWJHbHVaU0JwYmlCMGFXNTVJSE4wWVhSbElHMWhZMmhwYm1WekxpQW5QU2NnS0RZeEtTQnBjMXh5WEc0Z0lDQWdMeThnYjJaMFpXNGdjbVZtWlhKeVpXUWdkRzh1SUdCbWFXNXBjMmhQY0dBZ2MybHRjR3g1SUhOcmFYQnpJSFJvWlNCaGJXOTFiblFnYjJaY2NseHVJQ0FnSUM4dklHTm9ZWEpoWTNSbGNuTWdhWFFnYVhNZ1oybDJaVzRnWVhNZ2MyVmpiMjVrSUdGeVozVnRaVzUwTENCaGJtUWdjbVYwZFhKdWN5QmhJSFJ2YTJWdVhISmNiaUFnSUNBdkx5QnZaaUIwYUdVZ2RIbHdaU0JuYVhabGJpQmllU0JwZEhNZ1ptbHljM1FnWVhKbmRXMWxiblF1WEhKY2JseHlYRzRnSUdOaGMyVWdORGM2SUM4dklDY3ZKMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WaFpGUnZhMlZ1WDNOc1lYTm9LQ2xjY2x4dVhISmNiaUFnWTJGelpTQXpOem9nWTJGelpTQTBNam9nTHk4Z0p5VXFKMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WaFpGUnZhMlZ1WDIxMWJIUmZiVzlrZFd4dlgyVjRjQ2hqYjJSbEtWeHlYRzVjY2x4dUlDQmpZWE5sSURFeU5Eb2dZMkZ6WlNBek9Eb2dMeThnSjN3bUoxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZoWkZSdmEyVnVYM0JwY0dWZllXMXdLR052WkdVcFhISmNibHh5WEc0Z0lHTmhjMlVnT1RRNklDOHZJQ2RlSjF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVmhaRlJ2YTJWdVgyTmhjbVYwS0NsY2NseHVYSEpjYmlBZ1kyRnpaU0EwTXpvZ1kyRnpaU0EwTlRvZ0x5OGdKeXN0SjF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVmhaRlJ2YTJWdVgzQnNkWE5mYldsdUtHTnZaR1VwWEhKY2JseHlYRzRnSUdOaGMyVWdOakE2SUdOaGMyVWdOakk2SUM4dklDYzhQaWRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFlXUlViMnRsYmw5c2RGOW5kQ2hqYjJSbEtWeHlYRzVjY2x4dUlDQmpZWE5sSURZeE9pQmpZWE5sSURNek9pQXZMeUFuUFNFblhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV0ZrVkc5clpXNWZaWEZmWlhoamJDaGpiMlJsS1Z4eVhHNWNjbHh1SUNCallYTmxJREV5TmpvZ0x5OGdKMzRuWEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXNXBjMmhQY0NoMGRDNXdjbVZtYVhnc0lERXBYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQjBhR2x6TG5KaGFYTmxLSFJvYVhNdWNHOXpMQ0JjSWxWdVpYaHdaV04wWldRZ1kyaGhjbUZqZEdWeUlDZGNJaUFySUdOdlpHVlFiMmx1ZEZSdlUzUnlhVzVuS0dOdlpHVXBJQ3NnWENJblhDSXBYSEpjYm4xY2NseHVYSEpjYm5Cd0pEY3VabWx1YVhOb1QzQWdQU0JtZFc1amRHbHZiaWgwZVhCbExDQnphWHBsS1NCN1hISmNiaUFnZG1GeUlITjBjaUE5SUhSb2FYTXVhVzV3ZFhRdWMyeHBZMlVvZEdocGN5NXdiM01zSUhSb2FYTXVjRzl6SUNzZ2MybDZaU2xjY2x4dUlDQjBhR2x6TG5CdmN5QXJQU0J6YVhwbFhISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVkc5clpXNG9kSGx3WlN3Z2MzUnlLVnh5WEc1OVhISmNibHh5WEc0dkx5QlFZWEp6WlNCaElISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJpNGdVMjl0WlNCamIyNTBaWGgwTFdGM1lYSmxibVZ6Y3lCcGN5QnVaV05sYzNOaGNua3NYSEpjYmk4dklITnBibU5sSUdFZ0p5OG5JR2x1YzJsa1pTQmhJQ2RiWFNjZ2MyVjBJR1J2WlhNZ2JtOTBJR1Z1WkNCMGFHVWdaWGh3Y21WemMybHZiaTVjY2x4dVhISmNibVoxYm1OMGFXOXVJSFJ5ZVVOeVpXRjBaVkpsWjJWNGNDaHpjbU1zSUdac1lXZHpMQ0IwYUhKdmQwVnljbTl5UVhRc0lIQmhjbk5sY2lrZ2UxeHlYRzRnSUhSeWVTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkpsWjBWNGNDaHpjbU1zSUdac1lXZHpLVnh5WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjY2x4dUlDQWdJR2xtSUNoMGFISnZkMFZ5Y205eVFYUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvWlNCcGJuTjBZVzVqWlc5bUlGTjViblJoZUVWeWNtOXlLU0J3WVhKelpYSXVjbUZwYzJVb2RHaHliM2RGY25KdmNrRjBMQ0JjSWtWeWNtOXlJSEJoY25OcGJtY2djbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVPaUJjSWlBcklHVXViV1Z6YzJGblpTbGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ1pWeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVkbUZ5SUhKbFoyVjRjRlZ1YVdOdlpHVlRkWEJ3YjNKMElEMGdJU0YwY25sRGNtVmhkR1ZTWldkbGVIQW9YQ0pjWEhWbVptWm1YQ0lzSUZ3aWRWd2lLVnh5WEc1Y2NseHVjSEFrTnk1eVpXRmtVbVZuWlhod0lEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdkbUZ5SUhSb2FYTWtNU0E5SUhSb2FYTTdYSEpjYmx4eVhHNGdJSFpoY2lCbGMyTmhjR1ZrTENCcGJrTnNZWE56TENCemRHRnlkQ0E5SUhSb2FYTXVjRzl6WEhKY2JpQWdabTl5SUNnN095a2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTWtNUzV3YjNNZ1BqMGdkR2hwY3lReExtbHVjSFYwTG14bGJtZDBhQ2tnZEdocGN5UXhMbkpoYVhObEtITjBZWEowTENCY0lsVnVkR1Z5YldsdVlYUmxaQ0J5WldkMWJHRnlJR1Y0Y0hKbGMzTnBiMjVjSWlsY2NseHVJQ0FnSUhaaGNpQmphQ0E5SUhSb2FYTWtNUzVwYm5CMWRDNWphR0Z5UVhRb2RHaHBjeVF4TG5CdmN5bGNjbHh1SUNBZ0lHbG1JQ2hzYVc1bFFuSmxZV3N1ZEdWemRDaGphQ2twSUhSb2FYTWtNUzV5WVdselpTaHpkR0Z5ZEN3Z1hDSlZiblJsY20xcGJtRjBaV1FnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1WENJcFhISmNiaUFnSUNCcFppQW9JV1Z6WTJGd1pXUXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tHTm9JRDA5UFNCY0lsdGNJaWtnYVc1RGJHRnpjeUE5SUhSeWRXVmNjbHh1SUNBZ0lDQWdaV3h6WlNCcFppQW9ZMmdnUFQwOUlGd2lYVndpSUNZbUlHbHVRMnhoYzNNcElHbHVRMnhoYzNNZ1BTQm1ZV3h6WlZ4eVhHNGdJQ0FnSUNCbGJITmxJR2xtSUNoamFDQTlQVDBnWENJdlhDSWdKaVlnSVdsdVEyeGhjM01wSUdKeVpXRnJYSEpjYmlBZ0lDQWdJR1Z6WTJGd1pXUWdQU0JqYUNBOVBUMGdYQ0pjWEZ4Y1hDSmNjbHh1SUNBZ0lIMGdaV3h6WlNCbGMyTmhjR1ZrSUQwZ1ptRnNjMlZjY2x4dUlDQWdJQ3NyZEdocGN5UXhMbkJ2YzF4eVhHNGdJSDFjY2x4dUlDQjJZWElnWTI5dWRHVnVkQ0E5SUhSb2FYTXVhVzV3ZFhRdWMyeHBZMlVvYzNSaGNuUXNJSFJvYVhNdWNHOXpLVnh5WEc0Z0lDc3JkR2hwY3k1d2IzTmNjbHh1SUNBdkx5Qk9aV1ZrSUhSdklIVnpaU0JnY21WaFpGZHZjbVF4WUNCaVpXTmhkWE5sSUNkY1hIVllXRmhZSnlCelpYRjFaVzVqWlhNZ1lYSmxJR0ZzYkc5M1pXUmNjbHh1SUNBdkx5Qm9aWEpsSUNoa2IyNG5kQ0JoYzJzcExseHlYRzRnSUhaaGNpQnRiMlJ6SUQwZ2RHaHBjeTV5WldGa1YyOXlaREVvS1Z4eVhHNGdJSFpoY2lCMGJYQWdQU0JqYjI1MFpXNTBMQ0IwYlhCR2JHRm5jeUE5SUZ3aVhDSmNjbHh1SUNCcFppQW9iVzlrY3lrZ2UxeHlYRzRnSUNBZ2RtRnlJSFpoYkdsa1JteGhaM01nUFNBdlhsdG5hVzFkS2lRdlhISmNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1WamJXRldaWEp6YVc5dUlENDlJRFlwSUhaaGJHbGtSbXhoWjNNZ1BTQXZYbHRuYVcxMWVWMHFKQzljY2x4dUlDQWdJR2xtSUNnaGRtRnNhV1JHYkdGbmN5NTBaWE4wS0cxdlpITXBLU0IwYUdsekxuSmhhWE5sS0hOMFlYSjBMQ0JjSWtsdWRtRnNhV1FnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1SUdac1lXZGNJaWxjY2x4dUlDQWdJR2xtSUNodGIyUnpMbWx1WkdWNFQyWW9YQ0oxWENJcElENDlJREFwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLSEpsWjJWNGNGVnVhV052WkdWVGRYQndiM0owS1NCN1hISmNiaUFnSUNBZ0lDQWdkRzF3Um14aFozTWdQU0JjSW5WY0lseHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUZKbGNHeGhZMlVnWldGamFDQmhjM1J5WVd3Z2MzbHRZbTlzSUdGdVpDQmxkbVZ5ZVNCVmJtbGpiMlJsSUdWelkyRndaU0J6WlhGMVpXNWpaU0IwYUdGMFhISmNiaUFnSUNBZ0lDQWdMeThnY0c5emMybGliSGtnY21Wd2NtVnpaVzUwY3lCaGJpQmhjM1J5WVd3Z2MzbHRZbTlzSUc5eUlHRWdjR0ZwY21Wa0lITjFjbkp2WjJGMFpTQjNhWFJvSUdGY2NseHVJQ0FnSUNBZ0lDQXZMeUJ6YVc1bmJHVWdRVk5EU1VrZ2MzbHRZbTlzSUhSdklHRjJiMmxrSUhSb2NtOTNhVzVuSUc5dUlISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJuTWdkR2hoZEZ4eVhHNGdJQ0FnSUNBZ0lDOHZJR0Z5WlNCdmJteDVJSFpoYkdsa0lHbHVJR052YldKcGJtRjBhVzl1SUhkcGRHZ2dkR2hsSUdBdmRXQWdabXhoWnk1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJPYjNSbE9pQnlaWEJzWVdOcGJtY2dkMmwwYUNCMGFHVWdRVk5EU1VrZ2MzbHRZbTlzSUdCNFlDQnRhV2RvZENCallYVnpaU0JtWVd4elpWeHlYRzRnSUNBZ0lDQWdJQzh2SUc1bFoyRjBhWFpsY3lCcGJpQjFibXhwYTJWc2VTQnpZMlZ1WVhKcGIzTXVJRVp2Y2lCbGVHRnRjR3hsTENCZ1cxeGNkWHMyTVgwdFlsMWdJR2x6SUdGY2NseHVJQ0FnSUNBZ0lDQXZMeUJ3WlhKbVpXTjBiSGtnZG1Gc2FXUWdjR0YwZEdWeWJpQjBhR0YwSUdseklHVnhkV2wyWVd4bGJuUWdkRzhnWUZ0aExXSmRZQ3dnWW5WMElHbDBJSGR2ZFd4a1hISmNiaUFnSUNBZ0lDQWdMeThnWW1VZ2NtVndiR0ZqWldRZ1lua2dZRnQ0TFdKZFlDQjNhR2xqYUNCMGFISnZkM01nWVc0Z1pYSnliM0l1WEhKY2JpQWdJQ0FnSUNBZ2RHMXdJRDBnZEcxd0xuSmxjR3hoWTJVb0wxeGNYRngxWEZ4N0tGc3dMVGxoTFdaQkxVWmRLeWxjWEgwdlp5d2dablZ1WTNScGIyNGdLRjl0WVhSamFDd2dZMjlrWlN3Z2IyWm1jMlYwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYjJSbElEMGdUblZ0WW1WeUtGd2lNSGhjSWlBcklHTnZaR1VwWEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5a1pTQStJREI0TVRCR1JrWkdLU0IwYUdsekpERXVjbUZwYzJVb2MzUmhjblFnS3lCdlptWnpaWFFnS3lBekxDQmNJa052WkdVZ2NHOXBiblFnYjNWMElHOW1JR0p2ZFc1a2Mxd2lLVnh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aWVGd2lYSEpjYmlBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQjBiWEFnUFNCMGJYQXVjbVZ3YkdGalpTZ3ZYRnhjWEhVb1cyRXRaa0V0UmpBdE9WMTdOSDBwZkZ0Y1hIVkVPREF3TFZ4Y2RVUkNSa1pkVzF4Y2RVUkRNREF0WEZ4MVJFWkdSbDB2Wnl3Z1hDSjRYQ0lwWEhKY2JpQWdJQ0FnSUNBZ2RHMXdSbXhoWjNNZ1BTQjBiWEJHYkdGbmN5NXlaWEJzWVdObEtGd2lkVndpTENCY0lsd2lLVnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc0Z0lDOHZJRVJsZEdWamRDQnBiblpoYkdsa0lISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJuTXVYSEpjYmlBZ2RtRnlJSFpoYkhWbElEMGdiblZzYkZ4eVhHNGdJQzh2SUZKb2FXNXZKM01nY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1SUhCaGNuTmxjaUJwY3lCbWJHRnJlU0JoYm1RZ2RHaHliM2R6SUhWdVkyRjBZMmhoWW14bElHVjRZMlZ3ZEdsdmJuTXNYSEpjYmlBZ0x5OGdjMjhnWkc5dUozUWdaRzhnWkdWMFpXTjBhVzl1SUdsbUlIZGxJR0Z5WlNCeWRXNXVhVzVuSUhWdVpHVnlJRkpvYVc1dlhISmNiaUFnYVdZZ0tDRnBjMUpvYVc1dktTQjdYSEpjYmlBZ0lDQjBjbmxEY21WaGRHVlNaV2RsZUhBb2RHMXdMQ0IwYlhCR2JHRm5jeXdnYzNSaGNuUXNJSFJvYVhNcFhISmNiaUFnSUNBdkx5QkhaWFFnWVNCeVpXZDFiR0Z5SUdWNGNISmxjM05wYjI0Z2IySnFaV04wSUdadmNpQjBhR2x6SUhCaGRIUmxjbTR0Wm14aFp5QndZV2x5TENCdmNpQmdiblZzYkdBZ2FXNWNjbHh1SUNBZ0lDOHZJR05oYzJVZ2RHaGxJR04xY25KbGJuUWdaVzUyYVhKdmJtMWxiblFnWkc5bGMyNG5kQ0J6ZFhCd2IzSjBJSFJvWlNCbWJHRm5jeUJwZENCMWMyVnpMbHh5WEc0Z0lDQWdkbUZzZFdVZ1BTQjBjbmxEY21WaGRHVlNaV2RsZUhBb1kyOXVkR1Z1ZEN3Z2JXOWtjeWxjY2x4dUlDQjlYSEpjYmlBZ2NtVjBkWEp1SUhSb2FYTXVabWx1YVhOb1ZHOXJaVzRvZEhRdWNtVm5aWGh3TENCN2NHRjBkR1Z5YmpvZ1kyOXVkR1Z1ZEN3Z1pteGhaM002SUcxdlpITXNJSFpoYkhWbE9pQjJZV3gxWlgwcFhISmNibjFjY2x4dVhISmNiaTh2SUZKbFlXUWdZVzRnYVc1MFpXZGxjaUJwYmlCMGFHVWdaMmwyWlc0Z2NtRmthWGd1SUZKbGRIVnliaUJ1ZFd4c0lHbG1JSHBsY204Z1pHbG5hWFJ6WEhKY2JpOHZJSGRsY21VZ2NtVmhaQ3dnZEdobElHbHVkR1ZuWlhJZ2RtRnNkV1VnYjNSb1pYSjNhWE5sTGlCWGFHVnVJR0JzWlc1Z0lHbHpJR2RwZG1WdUxDQjBhR2x6WEhKY2JpOHZJSGRwYkd3Z2NtVjBkWEp1SUdCdWRXeHNZQ0IxYm14bGMzTWdkR2hsSUdsdWRHVm5aWElnYUdGeklHVjRZV04wYkhrZ1lHeGxibUFnWkdsbmFYUnpMbHh5WEc1Y2NseHVjSEFrTnk1eVpXRmtTVzUwSUQwZ1puVnVZM1JwYjI0b2NtRmthWGdzSUd4bGJpa2dlMXh5WEc0Z0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQjJZWElnYzNSaGNuUWdQU0IwYUdsekxuQnZjeXdnZEc5MFlXd2dQU0F3WEhKY2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHVWdQU0JzWlc0Z1BUMGdiblZzYkNBL0lFbHVabWx1YVhSNUlEb2diR1Z1T3lCcElEd2daVHNnS3l0cEtTQjdYSEpjYmlBZ0lDQjJZWElnWTI5a1pTQTlJSFJvYVhNa01TNXBibkIxZEM1amFHRnlRMjlrWlVGMEtIUm9hWE1rTVM1d2IzTXBMQ0IyWVd4Y2NseHVJQ0FnSUdsbUlDaGpiMlJsSUQ0OUlEazNLU0IyWVd3Z1BTQmpiMlJsSUMwZ09UY2dLeUF4TUNBdkx5QmhYSEpjYmlBZ0lDQmxiSE5sSUdsbUlDaGpiMlJsSUQ0OUlEWTFLU0IyWVd3Z1BTQmpiMlJsSUMwZ05qVWdLeUF4TUNBdkx5QkJYSEpjYmlBZ0lDQmxiSE5sSUdsbUlDaGpiMlJsSUQ0OUlEUTRJQ1ltSUdOdlpHVWdQRDBnTlRjcElIWmhiQ0E5SUdOdlpHVWdMU0EwT0NBdkx5QXdMVGxjY2x4dUlDQWdJR1ZzYzJVZ2RtRnNJRDBnU1c1bWFXNXBkSGxjY2x4dUlDQWdJR2xtSUNoMllXd2dQajBnY21Ga2FYZ3BJR0p5WldGclhISmNiaUFnSUNBckszUm9hWE1rTVM1d2IzTmNjbHh1SUNBZ0lIUnZkR0ZzSUQwZ2RHOTBZV3dnS2lCeVlXUnBlQ0FySUhaaGJGeHlYRzRnSUgxY2NseHVJQ0JwWmlBb2RHaHBjeTV3YjNNZ1BUMDlJSE4wWVhKMElIeDhJR3hsYmlBaFBTQnVkV3hzSUNZbUlIUm9hWE11Y0c5eklDMGdjM1JoY25RZ0lUMDlJR3hsYmlrZ2NtVjBkWEp1SUc1MWJHeGNjbHh1WEhKY2JpQWdjbVYwZFhKdUlIUnZkR0ZzWEhKY2JuMWNjbHh1WEhKY2JuQndKRGN1Y21WaFpGSmhaR2w0VG5WdFltVnlJRDBnWm5WdVkzUnBiMjRvY21Ga2FYZ3BJSHRjY2x4dUlDQjBhR2x6TG5CdmN5QXJQU0F5SUM4dklEQjRYSEpjYmlBZ2RtRnlJSFpoYkNBOUlIUm9hWE11Y21WaFpFbHVkQ2h5WVdScGVDbGNjbHh1SUNCcFppQW9kbUZzSUQwOUlHNTFiR3dwSUhSb2FYTXVjbUZwYzJVb2RHaHBjeTV6ZEdGeWRDQXJJRElzSUZ3aVJYaHdaV04wWldRZ2JuVnRZbVZ5SUdsdUlISmhaR2w0SUZ3aUlDc2djbUZrYVhncFhISmNiaUFnYVdZZ0tHbHpTV1JsYm5ScFptbGxjbE4wWVhKMEtIUm9hWE11Wm5Wc2JFTm9ZWEpEYjJSbFFYUlFiM01vS1NrcElIUm9hWE11Y21GcGMyVW9kR2hwY3k1d2IzTXNJRndpU1dSbGJuUnBabWxsY2lCa2FYSmxZM1JzZVNCaFpuUmxjaUJ1ZFcxaVpYSmNJaWxjY2x4dUlDQnlaWFIxY200Z2RHaHBjeTVtYVc1cGMyaFViMnRsYmloMGRDNXVkVzBzSUhaaGJDbGNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1VtVmhaQ0JoYmlCcGJuUmxaMlZ5TENCdlkzUmhiQ0JwYm5SbFoyVnlMQ0J2Y2lCbWJHOWhkR2x1Wnkxd2IybHVkQ0J1ZFcxaVpYSXVYSEpjYmx4eVhHNXdjQ1EzTG5KbFlXUk9kVzFpWlhJZ1BTQm1kVzVqZEdsdmJpaHpkR0Z5ZEhOWGFYUm9SRzkwS1NCN1hISmNiaUFnZG1GeUlITjBZWEowSUQwZ2RHaHBjeTV3YjNNc0lHbHpSbXh2WVhRZ1BTQm1ZV3h6WlN3Z2IyTjBZV3dnUFNCMGFHbHpMbWx1Y0hWMExtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBJRDA5UFNBME9GeHlYRzRnSUdsbUlDZ2hjM1JoY25SelYybDBhRVJ2ZENBbUppQjBhR2x6TG5KbFlXUkpiblFvTVRBcElEMDlQU0J1ZFd4c0tTQjBhR2x6TG5KaGFYTmxLSE4wWVhKMExDQmNJa2x1ZG1Gc2FXUWdiblZ0WW1WeVhDSXBYSEpjYmlBZ2RtRnlJRzVsZUhRZ1BTQjBhR2x6TG1sdWNIVjBMbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01wWEhKY2JpQWdhV1lnS0c1bGVIUWdQVDA5SURRMktTQjdJQzh2SUNjdUoxeHlYRzRnSUNBZ0t5dDBhR2x6TG5CdmMxeHlYRzRnSUNBZ2RHaHBjeTV5WldGa1NXNTBLREV3S1Z4eVhHNGdJQ0FnYVhOR2JHOWhkQ0E5SUhSeWRXVmNjbHh1SUNBZ0lHNWxlSFFnUFNCMGFHbHpMbWx1Y0hWMExtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBYSEpjYmlBZ2ZWeHlYRzRnSUdsbUlDaHVaWGgwSUQwOVBTQTJPU0I4ZkNCdVpYaDBJRDA5UFNBeE1ERXBJSHNnTHk4Z0oyVkZKMXh5WEc0Z0lDQWdibVY0ZENBOUlIUm9hWE11YVc1d2RYUXVZMmhoY2tOdlpHVkJkQ2dySzNSb2FYTXVjRzl6S1Z4eVhHNGdJQ0FnYVdZZ0tHNWxlSFFnUFQwOUlEUXpJSHg4SUc1bGVIUWdQVDA5SURRMUtTQXJLM1JvYVhNdWNHOXpJQzh2SUNjckxTZGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxuSmxZV1JKYm5Rb01UQXBJRDA5UFNCdWRXeHNLU0IwYUdsekxuSmhhWE5sS0hOMFlYSjBMQ0JjSWtsdWRtRnNhV1FnYm5WdFltVnlYQ0lwWEhKY2JpQWdJQ0JwYzBac2IyRjBJRDBnZEhKMVpWeHlYRzRnSUgxY2NseHVJQ0JwWmlBb2FYTkpaR1Z1ZEdsbWFXVnlVM1JoY25Rb2RHaHBjeTVtZFd4c1EyaGhja052WkdWQmRGQnZjeWdwS1NrZ2RHaHBjeTV5WVdselpTaDBhR2x6TG5CdmN5d2dYQ0pKWkdWdWRHbG1hV1Z5SUdScGNtVmpkR3g1SUdGbWRHVnlJRzUxYldKbGNsd2lLVnh5WEc1Y2NseHVJQ0IyWVhJZ2MzUnlJRDBnZEdocGN5NXBibkIxZEM1emJHbGpaU2h6ZEdGeWRDd2dkR2hwY3k1d2IzTXBMQ0IyWVd4Y2NseHVJQ0JwWmlBb2FYTkdiRzloZENrZ2RtRnNJRDBnY0dGeWMyVkdiRzloZENoemRISXBYSEpjYmlBZ1pXeHpaU0JwWmlBb0lXOWpkR0ZzSUh4OElITjBjaTVzWlc1bmRHZ2dQVDA5SURFcElIWmhiQ0E5SUhCaGNuTmxTVzUwS0hOMGNpd2dNVEFwWEhKY2JpQWdaV3h6WlNCcFppQW9MMXM0T1YwdkxuUmxjM1FvYzNSeUtTQjhmQ0IwYUdsekxuTjBjbWxqZENrZ2RHaHBjeTV5WVdselpTaHpkR0Z5ZEN3Z1hDSkpiblpoYkdsa0lHNTFiV0psY2x3aUtWeHlYRzRnSUdWc2MyVWdkbUZzSUQwZ2NHRnljMlZKYm5Rb2MzUnlMQ0E0S1Z4eVhHNGdJSEpsZEhWeWJpQjBhR2x6TG1acGJtbHphRlJ2YTJWdUtIUjBMbTUxYlN3Z2RtRnNLVnh5WEc1OVhISmNibHh5WEc0dkx5QlNaV0ZrSUdFZ2MzUnlhVzVuSUhaaGJIVmxMQ0JwYm5SbGNuQnlaWFJwYm1jZ1ltRmphM05zWVhOb0xXVnpZMkZ3WlhNdVhISmNibHh5WEc1d2NDUTNMbkpsWVdSRGIyUmxVRzlwYm5RZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQjJZWElnWTJnZ1BTQjBhR2x6TG1sdWNIVjBMbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01wTENCamIyUmxYSEpjYmx4eVhHNGdJR2xtSUNoamFDQTlQVDBnTVRJektTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtVmpiV0ZXWlhKemFXOXVJRHdnTmlrZ2RHaHBjeTUxYm1WNGNHVmpkR1ZrS0NsY2NseHVJQ0FnSUhaaGNpQmpiMlJsVUc5eklEMGdLeXQwYUdsekxuQnZjMXh5WEc0Z0lDQWdZMjlrWlNBOUlIUm9hWE11Y21WaFpFaGxlRU5vWVhJb2RHaHBjeTVwYm5CMWRDNXBibVJsZUU5bUtDZDlKeXdnZEdocGN5NXdiM01wSUMwZ2RHaHBjeTV3YjNNcFhISmNiaUFnSUNBckszUm9hWE11Y0c5elhISmNiaUFnSUNCcFppQW9ZMjlrWlNBK0lEQjRNVEJHUmtaR0tTQjBhR2x6TG5KaGFYTmxLR052WkdWUWIzTXNJRndpUTI5a1pTQndiMmx1ZENCdmRYUWdiMllnWW05MWJtUnpYQ0lwWEhKY2JpQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lHTnZaR1VnUFNCMGFHbHpMbkpsWVdSSVpYaERhR0Z5S0RRcFhISmNiaUFnZlZ4eVhHNGdJSEpsZEhWeWJpQmpiMlJsWEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHTnZaR1ZRYjJsdWRGUnZVM1J5YVc1bktHTnZaR1VwSUh0Y2NseHVJQ0F2THlCVlZFWXRNVFlnUkdWamIyUnBibWRjY2x4dUlDQnBaaUFvWTI5a1pTQThQU0F3ZUVaR1JrWXBJSEpsZEhWeWJpQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR052WkdVcFhISmNiaUFnWTI5a1pTQXRQU0F3ZURFd01EQXdYSEpjYmlBZ2NtVjBkWEp1SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb0tHTnZaR1VnUGo0Z01UQXBJQ3NnTUhoRU9EQXdMQ0FvWTI5a1pTQW1JREV3TWpNcElDc2dNSGhFUXpBd0tWeHlYRzU5WEhKY2JseHlYRzV3Y0NRM0xuSmxZV1JUZEhKcGJtY2dQU0JtZFc1amRHbHZiaWh4ZFc5MFpTa2dlMXh5WEc0Z0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQjJZWElnYjNWMElEMGdYQ0pjSWl3Z1kyaDFibXRUZEdGeWRDQTlJQ3NyZEdocGN5NXdiM05jY2x4dUlDQm1iM0lnS0RzN0tTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5UXhMbkJ2Y3lBK1BTQjBhR2x6SkRFdWFXNXdkWFF1YkdWdVozUm9LU0IwYUdsekpERXVjbUZwYzJVb2RHaHBjeVF4TG5OMFlYSjBMQ0JjSWxWdWRHVnliV2x1WVhSbFpDQnpkSEpwYm1jZ1kyOXVjM1JoYm5SY0lpbGNjbHh1SUNBZ0lIWmhjaUJqYUNBOUlIUm9hWE1rTVM1cGJuQjFkQzVqYUdGeVEyOWtaVUYwS0hSb2FYTWtNUzV3YjNNcFhISmNiaUFnSUNCcFppQW9ZMmdnUFQwOUlIRjFiM1JsS1NCaWNtVmhhMXh5WEc0Z0lDQWdhV1lnS0dOb0lEMDlQU0E1TWlrZ2V5QXZMeUFuWEZ3blhISmNiaUFnSUNBZ0lHOTFkQ0FyUFNCMGFHbHpKREV1YVc1d2RYUXVjMnhwWTJVb1kyaDFibXRUZEdGeWRDd2dkR2hwY3lReExuQnZjeWxjY2x4dUlDQWdJQ0FnYjNWMElDczlJSFJvYVhNa01TNXlaV0ZrUlhOallYQmxaRU5vWVhJb1ptRnNjMlVwWEhKY2JpQWdJQ0FnSUdOb2RXNXJVM1JoY25RZ1BTQjBhR2x6SkRFdWNHOXpYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvYVhOT1pYZE1hVzVsS0dOb0tTa2dkR2hwY3lReExuSmhhWE5sS0hSb2FYTWtNUzV6ZEdGeWRDd2dYQ0pWYm5SbGNtMXBibUYwWldRZ2MzUnlhVzVuSUdOdmJuTjBZVzUwWENJcFhISmNiaUFnSUNBZ0lDc3JkR2hwY3lReExuQnZjMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1SUNCdmRYUWdLejBnZEdocGN5NXBibkIxZEM1emJHbGpaU2hqYUhWdWExTjBZWEowTENCMGFHbHpMbkJ2Y3lzcktWeHlYRzRnSUhKbGRIVnliaUIwYUdsekxtWnBibWx6YUZSdmEyVnVLSFIwTG5OMGNtbHVaeXdnYjNWMEtWeHlYRzU5WEhKY2JseHlYRzR2THlCU1pXRmtjeUIwWlcxd2JHRjBaU0J6ZEhKcGJtY2dkRzlyWlc1ekxseHlYRzVjY2x4dWNIQWtOeTV5WldGa1ZHMXdiRlJ2YTJWdUlEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdkbUZ5SUhSb2FYTWtNU0E5SUhSb2FYTTdYSEpjYmx4eVhHNGdJSFpoY2lCdmRYUWdQU0JjSWx3aUxDQmphSFZ1YTFOMFlYSjBJRDBnZEdocGN5NXdiM05jY2x4dUlDQm1iM0lnS0RzN0tTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5UXhMbkJ2Y3lBK1BTQjBhR2x6SkRFdWFXNXdkWFF1YkdWdVozUm9LU0IwYUdsekpERXVjbUZwYzJVb2RHaHBjeVF4TG5OMFlYSjBMQ0JjSWxWdWRHVnliV2x1WVhSbFpDQjBaVzF3YkdGMFpWd2lLVnh5WEc0Z0lDQWdkbUZ5SUdOb0lEMGdkR2hwY3lReExtbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeVF4TG5CdmN5bGNjbHh1SUNBZ0lHbG1JQ2hqYUNBOVBUMGdPVFlnZkh3Z1kyZ2dQVDA5SURNMklDWW1JSFJvYVhNa01TNXBibkIxZEM1amFHRnlRMjlrWlVGMEtIUm9hWE1rTVM1d2IzTWdLeUF4S1NBOVBUMGdNVEl6S1NCN0lDOHZJQ2RnSnl3Z0p5UjdKMXh5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeVF4TG5CdmN5QTlQVDBnZEdocGN5UXhMbk4wWVhKMElDWW1JSFJvYVhNa01TNTBlWEJsSUQwOVBTQjBkQzUwWlcxd2JHRjBaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqYUNBOVBUMGdNellwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNa01TNXdiM01nS3owZ01seHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNa01TNW1hVzVwYzJoVWIydGxiaWgwZEM1a2IyeHNZWEpDY21GalpVd3BYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDc3JkR2hwY3lReExuQnZjMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTWtNUzVtYVc1cGMyaFViMnRsYmloMGRDNWlZV05yVVhWdmRHVXBYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lHOTFkQ0FyUFNCMGFHbHpKREV1YVc1d2RYUXVjMnhwWTJVb1kyaDFibXRUZEdGeWRDd2dkR2hwY3lReExuQnZjeWxjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNa01TNW1hVzVwYzJoVWIydGxiaWgwZEM1MFpXMXdiR0YwWlN3Z2IzVjBLVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0dOb0lEMDlQU0E1TWlrZ2V5QXZMeUFuWEZ3blhISmNiaUFnSUNBZ0lHOTFkQ0FyUFNCMGFHbHpKREV1YVc1d2RYUXVjMnhwWTJVb1kyaDFibXRUZEdGeWRDd2dkR2hwY3lReExuQnZjeWxjY2x4dUlDQWdJQ0FnYjNWMElDczlJSFJvYVhNa01TNXlaV0ZrUlhOallYQmxaRU5vWVhJb2RISjFaU2xjY2x4dUlDQWdJQ0FnWTJoMWJtdFRkR0Z5ZENBOUlIUm9hWE1rTVM1d2IzTmNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5PWlhkTWFXNWxLR05vS1NrZ2UxeHlYRzRnSUNBZ0lDQnZkWFFnS3owZ2RHaHBjeVF4TG1sdWNIVjBMbk5zYVdObEtHTm9kVzVyVTNSaGNuUXNJSFJvYVhNa01TNXdiM01wWEhKY2JpQWdJQ0FnSUNzcmRHaHBjeVF4TG5CdmMxeHlYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHTm9LU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyRnpaU0F4TXpwY2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpKREV1YVc1d2RYUXVZMmhoY2tOdlpHVkJkQ2gwYUdsekpERXVjRzl6S1NBOVBUMGdNVEFwSUNzcmRHaHBjeVF4TG5CdmMxeHlYRzRnSUNBZ0lDQWdJR05oYzJVZ01UQTZYSEpjYmlBZ0lDQWdJQ0FnSUNCdmRYUWdLejBnWENKY1hHNWNJbHh5WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3RjY2x4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdiM1YwSUNzOUlGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9ZMmdwWEhKY2JpQWdJQ0FnSUNBZ0lDQmljbVZoYTF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lHbG1JQ2gwYUdsekpERXViM0IwYVc5dWN5NXNiMk5oZEdsdmJuTXBJSHRjY2x4dUlDQWdJQ0FnSUNBckszUm9hWE1rTVM1amRYSk1hVzVsWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeVF4TG14cGJtVlRkR0Z5ZENBOUlIUm9hWE1rTVM1d2IzTmNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0JqYUhWdWExTjBZWEowSUQwZ2RHaHBjeVF4TG5CdmMxeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0t5dDBhR2x6SkRFdWNHOXpYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzR2THlCVmMyVmtJSFJ2SUhKbFlXUWdaWE5qWVhCbFpDQmphR0Z5WVdOMFpYSnpYSEpjYmx4eVhHNXdjQ1EzTG5KbFlXUkZjMk5oY0dWa1EyaGhjaUE5SUdaMWJtTjBhVzl1S0dsdVZHVnRjR3hoZEdVcElIdGNjbHh1SUNCMllYSWdZMmdnUFNCMGFHbHpMbWx1Y0hWMExtTm9ZWEpEYjJSbFFYUW9LeXQwYUdsekxuQnZjeWxjY2x4dUlDQXJLM1JvYVhNdWNHOXpYSEpjYmlBZ2MzZHBkR05vSUNoamFDa2dlMXh5WEc0Z0lHTmhjMlVnTVRFd09pQnlaWFIxY200Z1hDSmNYRzVjSWlBdkx5QW5iaWNnTFQ0Z0oxeGNiaWRjY2x4dUlDQmpZWE5sSURFeE5Eb2djbVYwZFhKdUlGd2lYRnh5WENJZ0x5OGdKM0luSUMwK0lDZGNYSEluWEhKY2JpQWdZMkZ6WlNBeE1qQTZJSEpsZEhWeWJpQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLSFJvYVhNdWNtVmhaRWhsZUVOb1lYSW9NaWtwSUM4dklDZDRKMXh5WEc0Z0lHTmhjMlVnTVRFM09pQnlaWFIxY200Z1kyOWtaVkJ2YVc1MFZHOVRkSEpwYm1jb2RHaHBjeTV5WldGa1EyOWtaVkJ2YVc1MEtDa3BJQzh2SUNkMUoxeHlYRzRnSUdOaGMyVWdNVEUyT2lCeVpYUjFjbTRnWENKY1hIUmNJaUF2THlBbmRDY2dMVDRnSjF4Y2RDZGNjbHh1SUNCallYTmxJRGs0T2lCeVpYUjFjbTRnWENKY1hHSmNJaUF2THlBbllpY2dMVDRnSjF4Y1lpZGNjbHh1SUNCallYTmxJREV4T0RvZ2NtVjBkWEp1SUZ3aVhGeDFNREF3WWx3aUlDOHZJQ2QySnlBdFBpQW5YRngxTURBd1lpZGNjbHh1SUNCallYTmxJREV3TWpvZ2NtVjBkWEp1SUZ3aVhGeG1YQ0lnTHk4Z0oyWW5JQzArSUNkY1hHWW5YSEpjYmlBZ1kyRnpaU0F4TXpvZ2FXWWdLSFJvYVhNdWFXNXdkWFF1WTJoaGNrTnZaR1ZCZENoMGFHbHpMbkJ2Y3lrZ1BUMDlJREV3S1NBckszUm9hWE11Y0c5eklDOHZJQ2RjWEhKY1hHNG5YSEpjYmlBZ1kyRnpaU0F4TURvZ0x5OGdKeUJjWEc0blhISmNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG14dlkyRjBhVzl1Y3lrZ2V5QjBhR2x6TG14cGJtVlRkR0Z5ZENBOUlIUm9hWE11Y0c5ek95QXJLM1JvYVhNdVkzVnlUR2x1WlNCOVhISmNiaUFnSUNCeVpYUjFjbTRnWENKY0lseHlYRzRnSUdSbFptRjFiSFE2WEhKY2JpQWdJQ0JwWmlBb1kyZ2dQajBnTkRnZ0ppWWdZMmdnUEQwZ05UVXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlHOWpkR0ZzVTNSeUlEMGdkR2hwY3k1cGJuQjFkQzV6ZFdKemRISW9kR2hwY3k1d2IzTWdMU0F4TENBektTNXRZWFJqYUNndlhsc3dMVGRkS3k4cFd6QmRYSEpjYmlBZ0lDQWdJSFpoY2lCdlkzUmhiQ0E5SUhCaGNuTmxTVzUwS0c5amRHRnNVM1J5TENBNEtWeHlYRzRnSUNBZ0lDQnBaaUFvYjJOMFlXd2dQaUF5TlRVcElIdGNjbHh1SUNBZ0lDQWdJQ0J2WTNSaGJGTjBjaUE5SUc5amRHRnNVM1J5TG5Oc2FXTmxLREFzSUMweEtWeHlYRzRnSUNBZ0lDQWdJRzlqZEdGc0lEMGdjR0Z5YzJWSmJuUW9iMk4wWVd4VGRISXNJRGdwWEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2FXWWdLRzlqZEdGc1UzUnlJQ0U5UFNCY0lqQmNJaUFtSmlBb2RHaHBjeTV6ZEhKcFkzUWdmSHdnYVc1VVpXMXdiR0YwWlNrcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuSmhhWE5sS0hSb2FYTXVjRzl6SUMwZ01pd2dYQ0pQWTNSaGJDQnNhWFJsY21Gc0lHbHVJSE4wY21samRDQnRiMlJsWENJcFhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdkR2hwY3k1d2IzTWdLejBnYjJOMFlXeFRkSEl1YkdWdVozUm9JQzBnTVZ4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNodlkzUmhiQ2xjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR05vS1Z4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dUx5OGdWWE5sWkNCMGJ5QnlaV0ZrSUdOb1lYSmhZM1JsY2lCbGMyTmhjR1VnYzJWeGRXVnVZMlZ6SUNnblhGeDRKeXdnSjF4Y2RTY3NJQ2RjWEZVbktTNWNjbHh1WEhKY2JuQndKRGN1Y21WaFpFaGxlRU5vWVhJZ1BTQm1kVzVqZEdsdmJpaHNaVzRwSUh0Y2NseHVJQ0IyWVhJZ1kyOWtaVkJ2Y3lBOUlIUm9hWE11Y0c5elhISmNiaUFnZG1GeUlHNGdQU0IwYUdsekxuSmxZV1JKYm5Rb01UWXNJR3hsYmlsY2NseHVJQ0JwWmlBb2JpQTlQVDBnYm5Wc2JDa2dkR2hwY3k1eVlXbHpaU2hqYjJSbFVHOXpMQ0JjSWtKaFpDQmphR0Z5WVdOMFpYSWdaWE5qWVhCbElITmxjWFZsYm1ObFhDSXBYSEpjYmlBZ2NtVjBkWEp1SUc1Y2NseHVmVnh5WEc1Y2NseHVMeThnVW1WaFpDQmhiaUJwWkdWdWRHbG1hV1Z5TENCaGJtUWdjbVYwZFhKdUlHbDBJR0Z6SUdFZ2MzUnlhVzVuTGlCVFpYUnpJR0IwYUdsekxtTnZiblJoYVc1elJYTmpZRnh5WEc0dkx5QjBieUIzYUdWMGFHVnlJSFJvWlNCM2IzSmtJR052Ym5SaGFXNWxaQ0JoSUNkY1hIVW5JR1Z6WTJGd1pTNWNjbHh1THk5Y2NseHVMeThnU1c1amNtVnRaVzUwWVd4c2VTQmhaR1J6SUc5dWJIa2daWE5qWVhCbFpDQmphR0Z5Y3l3Z1lXUmthVzVuSUc5MGFHVnlJR05vZFc1cmN5QmhjeTFwYzF4eVhHNHZMeUJoY3lCaElHMXBZM0p2TFc5d2RHbHRhWHBoZEdsdmJpNWNjbHh1WEhKY2JuQndKRGN1Y21WaFpGZHZjbVF4SUQwZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ2RtRnlJSFJvYVhNa01TQTlJSFJvYVhNN1hISmNibHh5WEc0Z0lIUm9hWE11WTI5dWRHRnBibk5GYzJNZ1BTQm1ZV3h6WlZ4eVhHNGdJSFpoY2lCM2IzSmtJRDBnWENKY0lpd2dabWx5YzNRZ1BTQjBjblZsTENCamFIVnVhMU4wWVhKMElEMGdkR2hwY3k1d2IzTmNjbHh1SUNCMllYSWdZWE4wY21Gc0lEMGdkR2hwY3k1dmNIUnBiMjV6TG1WamJXRldaWEp6YVc5dUlENDlJRFpjY2x4dUlDQjNhR2xzWlNBb2RHaHBjeTV3YjNNZ1BDQjBhR2x6TG1sdWNIVjBMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdkbUZ5SUdOb0lEMGdkR2hwY3lReExtWjFiR3hEYUdGeVEyOWtaVUYwVUc5ektDbGNjbHh1SUNBZ0lHbG1JQ2hwYzBsa1pXNTBhV1pwWlhKRGFHRnlLR05vTENCaGMzUnlZV3dwS1NCN1hISmNiaUFnSUNBZ0lIUm9hWE1rTVM1d2IzTWdLejBnWTJnZ1BEMGdNSGhtWm1abUlEOGdNU0E2SURKY2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyZ2dQVDA5SURreUtTQjdJQzh2SUZ3aVhGeGNJbHh5WEc0Z0lDQWdJQ0IwYUdsekpERXVZMjl1ZEdGcGJuTkZjMk1nUFNCMGNuVmxYSEpjYmlBZ0lDQWdJSGR2Y21RZ0t6MGdkR2hwY3lReExtbHVjSFYwTG5Oc2FXTmxLR05vZFc1clUzUmhjblFzSUhSb2FYTWtNUzV3YjNNcFhISmNiaUFnSUNBZ0lIWmhjaUJsYzJOVGRHRnlkQ0E5SUhSb2FYTWtNUzV3YjNOY2NseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNa01TNXBibkIxZEM1amFHRnlRMjlrWlVGMEtDc3JkR2hwY3lReExuQnZjeWtnSVQwZ01URTNLU0F2THlCY0luVmNJbHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTWtNUzV5WVdselpTaDBhR2x6SkRFdWNHOXpMQ0JjSWtWNGNHVmpkR2x1WnlCVmJtbGpiMlJsSUdWelkyRndaU0J6WlhGMVpXNWpaU0JjWEZ4Y2RWaFlXRmhjSWlsY2NseHVJQ0FnSUNBZ0t5dDBhR2x6SkRFdWNHOXpYSEpjYmlBZ0lDQWdJSFpoY2lCbGMyTWdQU0IwYUdsekpERXVjbVZoWkVOdlpHVlFiMmx1ZENncFhISmNiaUFnSUNBZ0lHbG1JQ2doS0dacGNuTjBJRDhnYVhOSlpHVnVkR2xtYVdWeVUzUmhjblFnT2lCcGMwbGtaVzUwYVdacFpYSkRhR0Z5S1NobGMyTXNJR0Z6ZEhKaGJDa3BYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5UXhMbkpoYVhObEtHVnpZMU4wWVhKMExDQmNJa2x1ZG1Gc2FXUWdWVzVwWTI5a1pTQmxjMk5oY0dWY0lpbGNjbHh1SUNBZ0lDQWdkMjl5WkNBclBTQmpiMlJsVUc5cGJuUlViMU4wY21sdVp5aGxjMk1wWEhKY2JpQWdJQ0FnSUdOb2RXNXJVM1JoY25RZ1BTQjBhR2x6SkRFdWNHOXpYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQmljbVZoYTF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWm1seWMzUWdQU0JtWVd4elpWeHlYRzRnSUgxY2NseHVJQ0J5WlhSMWNtNGdkMjl5WkNBcklIUm9hWE11YVc1d2RYUXVjMnhwWTJVb1kyaDFibXRUZEdGeWRDd2dkR2hwY3k1d2IzTXBYSEpjYm4xY2NseHVYSEpjYmk4dklGSmxZV1FnWVc0Z2FXUmxiblJwWm1sbGNpQnZjaUJyWlhsM2IzSmtJSFJ2YTJWdUxpQlhhV3hzSUdOb1pXTnJJR1p2Y2lCeVpYTmxjblpsWkZ4eVhHNHZMeUIzYjNKa2N5QjNhR1Z1SUc1bFkyVnpjMkZ5ZVM1Y2NseHVYSEpjYm5Cd0pEY3VjbVZoWkZkdmNtUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0IyWVhJZ2QyOXlaQ0E5SUhSb2FYTXVjbVZoWkZkdmNtUXhLQ2xjY2x4dUlDQjJZWElnZEhsd1pTQTlJSFIwTG01aGJXVmNjbHh1SUNCcFppQW9LSFJvYVhNdWIzQjBhVzl1Y3k1bFkyMWhWbVZ5YzJsdmJpQStQU0EySUh4OElDRjBhR2x6TG1OdmJuUmhhVzV6UlhOaktTQW1KaUIwYUdsekxtdGxlWGR2Y21SekxuUmxjM1FvZDI5eVpDa3BYSEpjYmlBZ0lDQjBlWEJsSUQwZ2EyVjVkMjl5WkZSNWNHVnpXM2R2Y21SZFhISmNiaUFnY21WMGRYSnVJSFJvYVhNdVptbHVhWE5vVkc5clpXNG9kSGx3WlN3Z2QyOXlaQ2xjY2x4dWZWeHlYRzVjY2x4dWRtRnlJSFpsY25OcGIyNGdQU0JjSWpNdU15NHdYQ0pjY2x4dVhISmNiaTh2SUZSb1pTQnRZV2x1SUdWNGNHOXlkR1ZrSUdsdWRHVnlabUZqWlNBb2RXNWtaWElnWUhObGJHWXVZV052Y201Z0lIZG9aVzRnYVc0Z2RHaGxYSEpjYmk4dklHSnliM2R6WlhJcElHbHpJR0VnWUhCaGNuTmxZQ0JtZFc1amRHbHZiaUIwYUdGMElIUmhhMlZ6SUdFZ1kyOWtaU0J6ZEhKcGJtY2dZVzVrWEhKY2JpOHZJSEpsZEhWeWJuTWdZVzRnWVdKemRISmhZM1FnYzNsdWRHRjRJSFJ5WldVZ1lYTWdjM0JsWTJsbWFXVmtJR0o1SUZ0TmIzcHBiR3hoSUhCaGNuTmxjbHh5WEc0dkx5QkJVRWxkVzJGd2FWMHVYSEpjYmk4dlhISmNiaTh2SUZ0aGNHbGRPaUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxTndhV1JsY2sxdmJtdGxlUzlRWVhKelpYSmZRVkJKWEhKY2JseHlYRzVtZFc1amRHbHZiaUJ3WVhKelpTaHBibkIxZEN3Z2IzQjBhVzl1Y3lrZ2UxeHlYRzRnSUhKbGRIVnliaUJ1WlhjZ1VHRnljMlZ5S0c5d2RHbHZibk1zSUdsdWNIVjBLUzV3WVhKelpTZ3BYSEpjYm4xY2NseHVYSEpjYmk4dklGUm9hWE1nWm5WdVkzUnBiMjRnZEhKcFpYTWdkRzhnY0dGeWMyVWdZU0J6YVc1bmJHVWdaWGh3Y21WemMybHZiaUJoZENCaElHZHBkbVZ1WEhKY2JpOHZJRzltWm5ObGRDQnBiaUJoSUhOMGNtbHVaeTRnVlhObFpuVnNJR1p2Y2lCd1lYSnphVzVuSUcxcGVHVmtMV3hoYm1kMVlXZGxJR1p2Y20xaGRITmNjbHh1THk4Z2RHaGhkQ0JsYldKbFpDQktZWFpoVTJOeWFYQjBJR1Y0Y0hKbGMzTnBiMjV6TGx4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnY0dGeWMyVkZlSEJ5WlhOemFXOXVRWFFvYVc1d2RYUXNJSEJ2Y3l3Z2IzQjBhVzl1Y3lrZ2UxeHlYRzRnSUhaaGNpQndJRDBnYm1WM0lGQmhjbk5sY2lodmNIUnBiMjV6TENCcGJuQjFkQ3dnY0c5ektWeHlYRzRnSUhBdWJtVjRkRlJ2YTJWdUtDbGNjbHh1SUNCeVpYUjFjbTRnY0M1d1lYSnpaVVY0Y0hKbGMzTnBiMjRvS1Z4eVhHNTlYSEpjYmx4eVhHNHZMeUJCWTI5eWJpQnBjeUJ2Y21kaGJtbDZaV1FnWVhNZ1lTQjBiMnRsYm1sNlpYSWdZVzVrSUdFZ2NtVmpkWEp6YVhabExXUmxjMk5sYm5RZ2NHRnljMlZ5TGx4eVhHNHZMeUJVYUdVZ1lIUnZhMlZ1YVhwbGNtQWdaWGh3YjNKMElIQnliM1pwWkdWeklHRnVJR2x1ZEdWeVptRmpaU0IwYnlCMGFHVWdkRzlyWlc1cGVtVnlMbHh5WEc1Y2NseHVablZ1WTNScGIyNGdkRzlyWlc1cGVtVnlLR2x1Y0hWMExDQnZjSFJwYjI1ektTQjdYSEpjYmlBZ2NtVjBkWEp1SUc1bGR5QlFZWEp6WlhJb2IzQjBhVzl1Y3l3Z2FXNXdkWFFwWEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCN0lIWmxjbk5wYjI0c0lIQmhjbk5sTENCd1lYSnpaVVY0Y0hKbGMzTnBiMjVCZEN3Z2RHOXJaVzVwZW1WeUxDQlFZWEp6WlhJc0lIQnNkV2RwYm5Nc0lHUmxabUYxYkhSUGNIUnBiMjV6TENCUWIzTnBkR2x2Yml3Z1UyOTFjbU5sVEc5allYUnBiMjRzSUdkbGRFeHBibVZKYm1adkxDQk9iMlJsTENCVWIydGxibFI1Y0dVc0lIUjBJR0Z6SUhSdmExUjVjR1Z6TENCVWIydERiMjUwWlhoMExDQjBlWEJsY3lCaGN5QjBiMnREYjI1MFpYaDBjeXdnYVhOSlpHVnVkR2xtYVdWeVEyaGhjaXdnYVhOSlpHVnVkR2xtYVdWeVUzUmhjblFzSUZSdmEyVnVMQ0JwYzA1bGQweHBibVVzSUd4cGJtVkNjbVZoYXl3Z2JHbHVaVUp5WldGclJ5QjlPMXh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDJKaFltVnNjMkpsY21jdmFuTnBiblJsY25CeVpYUmxjaTloWTI5eWJpNWxjeTVxYzF4dUlDb3FMeUlzSWlobWRXNWpkR2x2YmlCM1pXSndZV05yVlc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaWh5YjI5MExDQm1ZV04wYjNKNUtTQjdYRzVjZEdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWmhZM1J2Y25rb0tUdGNibHgwWld4elpTQnBaaWgwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlM1aGJXUXBYRzVjZEZ4MFpHVm1hVzVsS0Z3aWMzUmhZMnN0WlhNeU1ERTFMVzF2WkhWc1pYTmNJaXdnVzEwc0lHWmhZM1J2Y25rcE8xeHVYSFJsYkhObElHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUmxlSEJ2Y25Selcxd2ljM1JoWTJzdFpYTXlNREUxTFcxdlpIVnNaWE5jSWwwZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVmNibHgwWEhSeWIyOTBXMXdpYzNSaFkyc3RaWE15TURFMUxXMXZaSFZzWlhOY0lsMGdQU0JtWVdOMGIzSjVLQ2s3WEc1OUtTaDBhR2x6TENCbWRXNWpkR2x2YmlncElIdGNibkpsZEhWeWJpQXZLaW9xS2lvcUx5QW9ablZ1WTNScGIyNG9iVzlrZFd4bGN5a2dleUF2THlCM1pXSndZV05yUW05dmRITjBjbUZ3WEc0dktpb3FLaW9xTHlCY2RDOHZJRlJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaThxS2lvcUtpb3ZJRngwZG1GeUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNZ1BTQjdmVHRjYmk4cUtpb3FLaW92WEc0dktpb3FLaW9xTHlCY2RDOHZJRlJvWlNCeVpYRjFhWEpsSUdaMWJtTjBhVzl1WEc0dktpb3FLaW9xTHlCY2RHWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmk4cUtpb3FLaW92WEc0dktpb3FLaW9xTHlCY2RGeDBMeThnUTJobFkyc2dhV1lnYlc5a2RXeGxJR2x6SUdsdUlHTmhZMmhsWEc0dktpb3FLaW9xTHlCY2RGeDBhV1lvYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBwWEc0dktpb3FLaW9xTHlCY2RGeDBYSFJ5WlhSMWNtNGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHVaWGh3YjNKMGN6dGNiaThxS2lvcUtpb3ZYRzR2S2lvcUtpb3FMeUJjZEZ4MEx5OGdRM0psWVhSbElHRWdibVYzSUcxdlpIVnNaU0FvWVc1a0lIQjFkQ0JwZENCcGJuUnZJSFJvWlNCallXTm9aU2xjYmk4cUtpb3FLaW92SUZ4MFhIUjJZWElnYlc5a2RXeGxJRDBnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBnUFNCN1hHNHZLaW9xS2lvcUx5QmNkRngwWEhSbGVIQnZjblJ6T2lCN2ZTeGNiaThxS2lvcUtpb3ZJRngwWEhSY2RHbGtPaUJ0YjJSMWJHVkpaQ3hjYmk4cUtpb3FLaW92SUZ4MFhIUmNkR3h2WVdSbFpEb2dabUZzYzJWY2JpOHFLaW9xS2lvdklGeDBYSFI5TzF4dUx5b3FLaW9xS2k5Y2JpOHFLaW9xS2lvdklGeDBYSFF2THlCRmVHVmpkWFJsSUhSb1pTQnRiMlIxYkdVZ1puVnVZM1JwYjI1Y2JpOHFLaW9xS2lvdklGeDBYSFJ0YjJSMWJHVnpXMjF2WkhWc1pVbGtYUzVqWVd4c0tHMXZaSFZzWlM1bGVIQnZjblJ6TENCdGIyUjFiR1VzSUcxdlpIVnNaUzVsZUhCdmNuUnpMQ0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1R0Y2JpOHFLaW9xS2lvdlhHNHZLaW9xS2lvcUx5QmNkRngwTHk4Z1JteGhaeUIwYUdVZ2JXOWtkV3hsSUdGeklHeHZZV1JsWkZ4dUx5b3FLaW9xS2k4Z1hIUmNkRzF2WkhWc1pTNXNiMkZrWldRZ1BTQjBjblZsTzF4dUx5b3FLaW9xS2k5Y2JpOHFLaW9xS2lvdklGeDBYSFF2THlCU1pYUjFjbTRnZEdobElHVjRjRzl5ZEhNZ2IyWWdkR2hsSUcxdlpIVnNaVnh1THlvcUtpb3FLaThnWEhSY2RISmxkSFZ5YmlCdGIyUjFiR1V1Wlhod2IzSjBjenRjYmk4cUtpb3FLaW92SUZ4MGZWeHVMeW9xS2lvcUtpOWNiaThxS2lvcUtpb3ZYRzR2S2lvcUtpb3FMeUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzR2S2lvcUtpb3FMeUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJTQTlJRzF2WkhWc1pYTTdYRzR2S2lvcUtpb3FMMXh1THlvcUtpb3FLaThnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUx5b3FLaW9xS2k4Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbU1nUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6TzF4dUx5b3FLaW9xS2k5Y2JpOHFLaW9xS2lvdklGeDBMeThnWDE5M1pXSndZV05yWDNCMVlteHBZMTl3WVhSb1gxOWNiaThxS2lvcUtpb3ZJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1d0lEMGdYQ0pjSWp0Y2JpOHFLaW9xS2lvdlhHNHZLaW9xS2lvcUx5QmNkQzh2SUV4dllXUWdaVzUwY25rZ2JXOWtkV3hsSUdGdVpDQnlaWFIxY200Z1pYaHdiM0owYzF4dUx5b3FLaW9xS2k4Z1hIUnlaWFIxY200Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3dLVHRjYmk4cUtpb3FLaW92SUgwcFhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1THlvcUtpb3FLaThnS0Z0Y2JpOHFJREFnS2k5Y2JpOHFLaW92SUdaMWJtTjBhVzl1S0cxdlpIVnNaU3dnWlhod2IzSjBjeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ2UxeHVYRzVjZEM4cWFYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUXFMMXdpZFhObElITjBjbWxqZEZ3aU8xeHVYSFJjYmx4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzVjZENBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1WEhSOUtUdGNibHgwWEc1Y2RIWmhjaUJmWTJ4aGMzTkRZV3hzUTJobFkyc3lJRDBnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlneEtUdGNibHgwWEc1Y2RIWmhjaUJmWTJ4aGMzTkRZV3hzUTJobFkyc3pJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZZMnhoYzNORFlXeHNRMmhsWTJzeUtUdGNibHgwWEc1Y2RIWmhjaUJmWTNKbFlYUmxRMnhoYzNNeUlEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd5S1R0Y2JseDBYRzVjZEhaaGNpQmZZM0psWVhSbFEyeGhjM016SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmWTNKbFlYUmxRMnhoYzNNeUtUdGNibHgwWEc1Y2RHWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUdSbFptRjFiSFE2SUc5aWFpQjlPeUI5WEc1Y2RGeHVYSFIyWVhJZ1UzUmhZMnNnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQm1kVzVqZEdsdmJpQXZLbWx6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwS2k5VGRHRmpheWdwSUh0Y2JseDBJQ0FnSUNBZ0lDQXZLbWx6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwS2k4b01Dd2dYMk5zWVhOelEyRnNiRU5vWldOck15NWtaV1poZFd4MEtTaDBhR2x6TENCVGRHRmpheWs3WEc1Y2RGeHVYSFFnSUNBZ0lDQWdJSFJvYVhNdVlYSnlJRDBnVzEwN1hHNWNkQ0FnSUNCOVhHNWNkRnh1WEhRZ0lDQWdLREFzSUY5amNtVmhkR1ZEYkdGemN6TXVaR1ZtWVhWc2RDa29VM1JoWTJzc0lGdDdYRzVjZENBZ0lDQWdJQ0FnYTJWNU9pQmNJbkIxYzJoY0lpeGNibHgwSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdjSFZ6YUNobGJDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GeWNpNXdkWE5vS0dWc0tUdGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5TENCN1hHNWNkQ0FnSUNBZ0lDQWdhMlY1T2lCY0luQnZjRndpTEZ4dVhIUWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCd2IzQW9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYSnlMbXhsYm1kMGFDMHRPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUgwc0lIdGNibHgwSUNBZ0lDQWdJQ0JyWlhrNklGd2lkRzl3WENJc1hHNWNkQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlIUnZjQ2dwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nTG14aGMzUW9LU0J1YjNRZ1pHVm1hVzVsWkNCcGJpQnZiR1JsY2lCdWIyUmxJSFpsY25OcGIyNXpYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsZEhWeWJpQjBhR2x6TG1GeWNpNXNZWE4wS0NrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnljbHQwYUdsekxtRnljaTVzWlc1bmRHZ2dMU0F4WFR0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQjlMQ0I3WEc1Y2RDQWdJQ0FnSUNBZ2EyVjVPaUJjSW5kcGRHaEZiR1Z0Wlc1MFhDSXNYRzVjZENBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSGRwZEdoRmJHVnRaVzUwS0dWc0xDQmpZV3hzWW1GamF5d2dZMjl1ZEdWNGRDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CMWMyZ29aV3dwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc3VZMkZzYkNoamIyNTBaWGgwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0c5d0tDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5WFNrN1hHNWNkQ0FnSUNCeVpYUjFjbTRnVTNSaFkyczdYRzVjZEgwb0tUdGNibHgwWEc1Y2RDOHFhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFxTDJWNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUZOMFlXTnJPMXh1WEc0dktpb3FMeUI5TEZ4dUx5b2dNU0FxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpLU0I3WEc1Y2JseDBYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNkRnh1WEhSbGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhIUmNibHgwWlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnS0dsdWMzUmhibU5sTENCRGIyNXpkSEoxWTNSdmNpa2dlMXh1WEhRZ0lHbG1JQ2doS0dsdWMzUmhibU5sSUdsdWMzUmhibU5sYjJZZ1EyOXVjM1J5ZFdOMGIzSXBLU0I3WEc1Y2RDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVEyRnVibTkwSUdOaGJHd2dZU0JqYkdGemN5QmhjeUJoSUdaMWJtTjBhVzl1WENJcE8xeHVYSFFnSUgxY2JseDBmVHRjYmx4dUx5b3FLaThnZlN4Y2JpOHFJRElnS2k5Y2JpOHFLaW92SUdaMWJtTjBhVzl1S0cxdlpIVnNaU3dnWlhod2IzSjBjeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ2UxeHVYRzVjZEZ3aWRYTmxJSE4wY21samRGd2lPMXh1WEhSY2JseDBaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHgwWEc1Y2RIWmhjaUJmWkdWbWFXNWxVSEp2Y0dWeWRIa2dQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0RNcE8xeHVYSFJjYmx4MGRtRnlJRjlrWldacGJtVlFjbTl3WlhKMGVUSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOWtaV1pwYm1WUWNtOXdaWEowZVNrN1hHNWNkRnh1WEhSbWRXNWpkR2x2YmlCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRzlpYWlrZ2V5QnlaWFIxY200Z2IySnFJQ1ltSUc5aWFpNWZYMlZ6VFc5a2RXeGxJRDhnYjJKcUlEb2dleUJrWldaaGRXeDBPaUJ2WW1vZ2ZUc2dmVnh1WEhSY2JseDBaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dVhIUWdJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9kR0Z5WjJWMExDQndjbTl3Y3lrZ2UxeHVYSFFnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndjbTl3Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhRZ0lDQWdJQ0IyWVhJZ1pHVnpZM0pwY0hSdmNpQTlJSEJ5YjNCelcybGRPMXh1WEhRZ0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3WEc1Y2RDQWdJQ0FnSUdSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaFlteGxJRDBnZEhKMVpUdGNibHgwSUNBZ0lDQWdhV1lnS0Z3aWRtRnNkV1ZjSWlCcGJpQmtaWE5qY21sd2RHOXlLU0JrWlhOamNtbHdkRzl5TG5keWFYUmhZbXhsSUQwZ2RISjFaVHRjYmx4MElDQWdJQ0FnS0RBc0lGOWtaV1pwYm1WUWNtOXdaWEowZVRJdVpHVm1ZWFZzZENrb2RHRnlaMlYwTENCa1pYTmpjbWx3ZEc5eUxtdGxlU3dnWkdWelkzSnBjSFJ2Y2lrN1hHNWNkQ0FnSUNCOVhHNWNkQ0FnZlZ4dVhIUmNibHgwSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0VOdmJuTjBjblZqZEc5eUxDQndjbTkwYjFCeWIzQnpMQ0J6ZEdGMGFXTlFjbTl3Y3lrZ2UxeHVYSFFnSUNBZ2FXWWdLSEJ5YjNSdlVISnZjSE1wSUdSbFptbHVaVkJ5YjNCbGNuUnBaWE1vUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExDQndjbTkwYjFCeWIzQnpLVHRjYmx4MElDQWdJR2xtSUNoemRHRjBhV05RY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE8xeHVYSFFnSUNBZ2NtVjBkWEp1SUVOdmJuTjBjblZqZEc5eU8xeHVYSFFnSUgwN1hHNWNkSDBvS1R0Y2JseHVMeW9xS2k4Z2ZTeGNiaThxSURNZ0tpOWNiaThxS2lvdklHWjFibU4wYVc5dUtHMXZaSFZzWlN3Z1pYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5a2dlMXh1WEc1Y2RHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlnMEtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc0dktpb3FMeUI5TEZ4dUx5b2dOQ0FxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpMQ0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1NCN1hHNWNibHgwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlnMUtUdGNibHgwZG1GeUlDUlBZbXBsWTNRZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRGdwTGs5aWFtVmpkRHRjYmx4MGJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBlU2hwZEN3Z2EyVjVMQ0JrWlhOaktYdGNibHgwSUNCeVpYUjFjbTRnSkU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUxDQmtaWE5qS1R0Y2JseDBmVHRjYmx4dUx5b3FLaThnZlN4Y2JpOHFJRFVnS2k5Y2JpOHFLaW92SUdaMWJtTjBhVzl1S0cxdlpIVnNaU3dnWlhod2IzSjBjeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ2UxeHVYRzVjZEhaaGNpQWtaWGh3YjNKMElEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWcyS1R0Y2JseDBMeThnTVRrdU1TNHlMalFnTHlBeE5TNHlMak11TmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29UeXdnVUN3Z1FYUjBjbWxpZFhSbGN5bGNibHgwSkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd4Tmlrc0lDZFBZbXBsWTNRbkxDQjdaR1ZtYVc1bFVISnZjR1Z5ZEhrNklGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9NVElwTG1aOUtUdGNibHh1THlvcUtpOGdmU3hjYmk4cUlEWWdLaTljYmk4cUtpb3ZJR1oxYm1OMGFXOXVLRzF2WkhWc1pTd2daWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnZTF4dVhHNWNkSFpoY2lCbmJHOWlZV3dnSUNBZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRGNwWEc1Y2RDQWdMQ0JqYjNKbElDQWdJQ0FnUFNCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktEZ3BYRzVjZENBZ0xDQmpkSGdnSUNBZ0lDQWdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0RrcFhHNWNkQ0FnTENCb2FXUmxJQ0FnSUNBZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLREV4S1Z4dVhIUWdJQ3dnVUZKUFZFOVVXVkJGSUQwZ0ozQnliM1J2ZEhsd1pTYzdYRzVjZEZ4dVhIUjJZWElnSkdWNGNHOXlkQ0E5SUdaMWJtTjBhVzl1S0hSNWNHVXNJRzVoYldVc0lITnZkWEpqWlNsN1hHNWNkQ0FnZG1GeUlFbFRYMFpQVWtORlJDQTlJSFI1Y0dVZ0ppQWtaWGh3YjNKMExrWmNibHgwSUNBZ0lDd2dTVk5mUjB4UFFrRk1JRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVSMXh1WEhRZ0lDQWdMQ0JKVTE5VFZFRlVTVU1nUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVUWEc1Y2RDQWdJQ0FzSUVsVFgxQlNUMVJQSUNBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGxCY2JseDBJQ0FnSUN3Z1NWTmZRa2xPUkNBZ0lEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVFseHVYSFFnSUNBZ0xDQkpVMTlYVWtGUUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVhYRzVjZENBZ0lDQXNJR1Y0Y0c5eWRITWdJQ0E5SUVsVFgwZE1UMEpCVENBL0lHTnZjbVVnT2lCamIzSmxXMjVoYldWZElIeDhJQ2hqYjNKbFcyNWhiV1ZkSUQwZ2UzMHBYRzVjZENBZ0lDQXNJR1Y0Y0ZCeWIzUnZJQ0E5SUdWNGNHOXlkSE5iVUZKUFZFOVVXVkJGWFZ4dVhIUWdJQ0FnTENCMFlYSm5aWFFnSUNBZ1BTQkpVMTlIVEU5Q1FVd2dQeUJuYkc5aVlXd2dPaUJKVTE5VFZFRlVTVU1nUHlCbmJHOWlZV3hiYm1GdFpWMGdPaUFvWjJ4dlltRnNXMjVoYldWZElIeDhJSHQ5S1Z0UVVrOVVUMVJaVUVWZFhHNWNkQ0FnSUNBc0lHdGxlU3dnYjNkdUxDQnZkWFE3WEc1Y2RDQWdhV1lvU1ZOZlIweFBRa0ZNS1hOdmRYSmpaU0E5SUc1aGJXVTdYRzVjZENBZ1ptOXlLR3RsZVNCcGJpQnpiM1Z5WTJVcGUxeHVYSFFnSUNBZ0x5OGdZMjl1ZEdGcGJuTWdhVzRnYm1GMGFYWmxYRzVjZENBZ0lDQnZkMjRnUFNBaFNWTmZSazlTUTBWRUlDWW1JSFJoY21kbGRDQW1KaUIwWVhKblpYUmJhMlY1WFNBaFBUMGdkVzVrWldacGJtVmtPMXh1WEhRZ0lDQWdhV1lvYjNkdUlDWW1JR3RsZVNCcGJpQmxlSEJ2Y25SektXTnZiblJwYm5WbE8xeHVYSFFnSUNBZ0x5OGdaWGh3YjNKMElHNWhkR2wyWlNCdmNpQndZWE56WldSY2JseDBJQ0FnSUc5MWRDQTlJRzkzYmlBL0lIUmhjbWRsZEZ0clpYbGRJRG9nYzI5MWNtTmxXMnRsZVYwN1hHNWNkQ0FnSUNBdkx5QndjbVYyWlc1MElHZHNiMkpoYkNCd2IyeHNkWFJwYjI0Z1ptOXlJRzVoYldWemNHRmpaWE5jYmx4MElDQWdJR1Y0Y0c5eWRITmJhMlY1WFNBOUlFbFRYMGRNVDBKQlRDQW1KaUIwZVhCbGIyWWdkR0Z5WjJWMFcydGxlVjBnSVQwZ0oyWjFibU4wYVc5dUp5QS9JSE52ZFhKalpWdHJaWGxkWEc1Y2RDQWdJQ0F2THlCaWFXNWtJSFJwYldWeWN5QjBieUJuYkc5aVlXd2dabTl5SUdOaGJHd2dabkp2YlNCbGVIQnZjblFnWTI5dWRHVjRkRnh1WEhRZ0lDQWdPaUJKVTE5Q1NVNUVJQ1ltSUc5M2JpQS9JR04wZUNodmRYUXNJR2RzYjJKaGJDbGNibHgwSUNBZ0lDOHZJSGR5WVhBZ1oyeHZZbUZzSUdOdmJuTjBjblZqZEc5eWN5Qm1iM0lnY0hKbGRtVnVkQ0JqYUdGdVoyVWdkR2hsYlNCcGJpQnNhV0p5WVhKNVhHNWNkQ0FnSUNBNklFbFRYMWRTUVZBZ0ppWWdkR0Z5WjJWMFcydGxlVjBnUFQwZ2IzVjBJRDhnS0daMWJtTjBhVzl1S0VNcGUxeHVYSFFnSUNBZ0lDQjJZWElnUmlBOUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVYSFFnSUNBZ0lDQWdJR2xtS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJES1h0Y2JseDBJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaGhjbWQxYldWdWRITXViR1Z1WjNSb0tYdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F3T2lCeVpYUjFjbTRnYm1WM0lFTTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTVRvZ2NtVjBkWEp1SUc1bGR5QkRLR0VwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQnVaWGNnUXloaExDQmlLVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMGdjbVYwZFhKdUlHNWxkeUJES0dFc0lHSXNJR01wTzF4dVhIUWdJQ0FnSUNBZ0lIMGdjbVYwZFhKdUlFTXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JseDBJQ0FnSUNBZ2ZUdGNibHgwSUNBZ0lDQWdSbHRRVWs5VVQxUlpVRVZkSUQwZ1ExdFFVazlVVDFSWlVFVmRPMXh1WEhRZ0lDQWdJQ0J5WlhSMWNtNGdSanRjYmx4MElDQWdJQzh2SUcxaGEyVWdjM1JoZEdsaklIWmxjbk5wYjI1eklHWnZjaUJ3Y205MGIzUjVjR1VnYldWMGFHOWtjMXh1WEhRZ0lDQWdmU2tvYjNWMEtTQTZJRWxUWDFCU1QxUlBJQ1ltSUhSNWNHVnZaaUJ2ZFhRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUdOMGVDaEdkVzVqZEdsdmJpNWpZV3hzTENCdmRYUXBJRG9nYjNWME8xeHVYSFFnSUNBZ0x5OGdaWGh3YjNKMElIQnliM1J2SUcxbGRHaHZaSE1nZEc4Z1kyOXlaUzRsUTA5T1UxUlNWVU5VVDFJbExtMWxkR2h2WkhNdUpVNUJUVVVsWEc1Y2RDQWdJQ0JwWmloSlUxOVFVazlVVHlsN1hHNWNkQ0FnSUNBZ0lDaGxlSEJ2Y25SekxuWnBjblIxWVd3Z2ZId2dLR1Y0Y0c5eWRITXVkbWx5ZEhWaGJDQTlJSHQ5S1NsYmEyVjVYU0E5SUc5MWREdGNibHgwSUNBZ0lDQWdMeThnWlhod2IzSjBJSEJ5YjNSdklHMWxkR2h2WkhNZ2RHOGdZMjl5WlM0bFEwOU9VMVJTVlVOVVQxSWxMbkJ5YjNSdmRIbHdaUzRsVGtGTlJTVmNibHgwSUNBZ0lDQWdhV1lvZEhsd1pTQW1JQ1JsZUhCdmNuUXVVaUFtSmlCbGVIQlFjbTkwYnlBbUppQWhaWGh3VUhKdmRHOWJhMlY1WFNsb2FXUmxLR1Y0Y0ZCeWIzUnZMQ0JyWlhrc0lHOTFkQ2s3WEc1Y2RDQWdJQ0I5WEc1Y2RDQWdmVnh1WEhSOU8xeHVYSFF2THlCMGVYQmxJR0pwZEcxaGNGeHVYSFFrWlhod2IzSjBMa1lnUFNBeE95QWdJQzh2SUdadmNtTmxaRnh1WEhRa1pYaHdiM0owTGtjZ1BTQXlPeUFnSUM4dklHZHNiMkpoYkZ4dVhIUWtaWGh3YjNKMExsTWdQU0EwT3lBZ0lDOHZJSE4wWVhScFkxeHVYSFFrWlhod2IzSjBMbEFnUFNBNE95QWdJQzh2SUhCeWIzUnZYRzVjZENSbGVIQnZjblF1UWlBOUlERTJPeUFnTHk4Z1ltbHVaRnh1WEhRa1pYaHdiM0owTGxjZ1BTQXpNanNnSUM4dklIZHlZWEJjYmx4MEpHVjRjRzl5ZEM1VklEMGdOalE3SUNBdkx5QnpZV1psWEc1Y2RDUmxlSEJ2Y25RdVVpQTlJREV5T0RzZ0x5OGdjbVZoYkNCd2NtOTBieUJ0WlhSb2IyUWdabTl5SUdCc2FXSnlZWEo1WUNCY2JseDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWtaWGh3YjNKME8xeHVYRzR2S2lvcUx5QjlMRnh1THlvZ055QXFMMXh1THlvcUtpOGdablZ1WTNScGIyNG9iVzlrZFd4bExDQmxlSEJ2Y25SektTQjdYRzVjYmx4MEx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM3BzYjJseWIyTnJMMk52Y21VdGFuTXZhWE56ZFdWekx6ZzJJMmx6YzNWbFkyOXRiV1Z1ZEMweE1UVTNOVGt3TWpoY2JseDBkbUZ5SUdkc2IySmhiQ0E5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQjNhVzVrYjNjdVRXRjBhQ0E5UFNCTllYUm9YRzVjZENBZ1B5QjNhVzVrYjNjZ09pQjBlWEJsYjJZZ2MyVnNaaUFoUFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJ6Wld4bUxrMWhkR2dnUFQwZ1RXRjBhQ0EvSUhObGJHWWdPaUJHZFc1amRHbHZiaWduY21WMGRYSnVJSFJvYVhNbktTZ3BPMXh1WEhScFppaDBlWEJsYjJZZ1gxOW5JRDA5SUNkdWRXMWlaWEluS1Y5Zlp5QTlJR2RzYjJKaGJEc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFibVJsWmx4dVhHNHZLaW9xTHlCOUxGeHVMeW9nT0NBcUwxeHVMeW9xS2k4Z1puVnVZM1JwYjI0b2JXOWtkV3hsTENCbGVIQnZjblJ6S1NCN1hHNWNibHgwZG1GeUlHTnZjbVVnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0MlpYSnphVzl1T2lBbk1pNDBMakFuZlR0Y2JseDBhV1lvZEhsd1pXOW1JRjlmWlNBOVBTQW5iblZ0WW1WeUp5bGZYMlVnUFNCamIzSmxPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNiaThxS2lvdklIMHNYRzR2S2lBNUlDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJSHRjYmx4dVhIUXZMeUJ2Y0hScGIyNWhiQ0F2SUhOcGJYQnNaU0JqYjI1MFpYaDBJR0pwYm1ScGJtZGNibHgwZG1GeUlHRkdkVzVqZEdsdmJpQTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTVRBcE8xeHVYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR1p1TENCMGFHRjBMQ0JzWlc1bmRHZ3BlMXh1WEhRZ0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc1Y2RDQWdhV1lvZEdoaGRDQTlQVDBnZFc1a1pXWnBibVZrS1hKbGRIVnliaUJtYmp0Y2JseDBJQ0J6ZDJsMFkyZ29iR1Z1WjNSb0tYdGNibHgwSUNBZ0lHTmhjMlVnTVRvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dFcGUxeHVYSFFnSUNBZ0lDQnlaWFIxY200Z1ptNHVZMkZzYkNoMGFHRjBMQ0JoS1R0Y2JseDBJQ0FnSUgwN1hHNWNkQ0FnSUNCallYTmxJREk2SUhKbGRIVnliaUJtZFc1amRHbHZiaWhoTENCaUtYdGNibHgwSUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVN3Z1lpazdYRzVjZENBZ0lDQjlPMXh1WEhRZ0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNWNkQ0FnSUNBZ0lISmxkSFZ5YmlCbWJpNWpZV3hzS0hSb1lYUXNJR0VzSUdJc0lHTXBPMXh1WEhRZ0lDQWdmVHRjYmx4MElDQjlYRzVjZENBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0M4cUlDNHVMbUZ5WjNNZ0tpOHBlMXh1WEhRZ0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9ZWFFzSUdGeVozVnRaVzUwY3lrN1hHNWNkQ0FnZlR0Y2JseDBmVHRjYmx4dUx5b3FLaThnZlN4Y2JpOHFJREV3SUNvdlhHNHZLaW9xTHlCbWRXNWpkR2x2YmlodGIyUjFiR1VzSUdWNGNHOXlkSE1wSUh0Y2JseHVYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JseDBJQ0JwWmloMGVYQmxiMllnYVhRZ0lUMGdKMloxYm1OMGFXOXVKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9hWFFnS3lBbklHbHpJRzV2ZENCaElHWjFibU4wYVc5dUlTY3BPMXh1WEhRZ0lISmxkSFZ5YmlCcGREdGNibHgwZlR0Y2JseHVMeW9xS2k4Z2ZTeGNiaThxSURFeElDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJSHRjYmx4dVhIUjJZWElnWkZBZ0lDQWdJQ0FnSUNBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9NVElwWEc1Y2RDQWdMQ0JqY21WaGRHVkVaWE5qSUQwZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3lNQ2s3WEc1Y2RHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3hOaWtnUHlCbWRXNWpkR2x2YmlodlltcGxZM1FzSUd0bGVTd2dkbUZzZFdVcGUxeHVYSFFnSUhKbGRIVnliaUJrVUM1bUtHOWlhbVZqZEN3Z2EyVjVMQ0JqY21WaGRHVkVaWE5qS0RFc0lIWmhiSFZsS1NrN1hHNWNkSDBnT2lCbWRXNWpkR2x2YmlodlltcGxZM1FzSUd0bGVTd2dkbUZzZFdVcGUxeHVYSFFnSUc5aWFtVmpkRnRyWlhsZElEMGdkbUZzZFdVN1hHNWNkQ0FnY21WMGRYSnVJRzlpYW1WamREdGNibHgwZlR0Y2JseHVMeW9xS2k4Z2ZTeGNiaThxSURFeUlDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJSHRjYmx4dVhIUjJZWElnWVc1UFltcGxZM1FnSUNBZ0lDQWdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0RFektWeHVYSFFnSUN3Z1NVVTRYMFJQVFY5RVJVWkpUa1VnUFNCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktERTFLVnh1WEhRZ0lDd2dkRzlRY21sdGFYUnBkbVVnSUNBZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLREU1S1Z4dVhIUWdJQ3dnWkZBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrN1hHNWNkRnh1WEhSbGVIQnZjblJ6TG1ZZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLREUyS1NBL0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU0E2SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBlMXh1WEhRZ0lHRnVUMkpxWldOMEtFOHBPMXh1WEhRZ0lGQWdQU0IwYjFCeWFXMXBkR2wyWlNoUUxDQjBjblZsS1R0Y2JseDBJQ0JoYms5aWFtVmpkQ2hCZEhSeWFXSjFkR1Z6S1R0Y2JseDBJQ0JwWmloSlJUaGZSRTlOWDBSRlJrbE9SU2wwY25rZ2UxeHVYSFFnSUNBZ2NtVjBkWEp1SUdSUUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcE8xeHVYSFFnSUgwZ1kyRjBZMmdvWlNsN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYmx4MElDQnBaaWduWjJWMEp5QnBiaUJCZEhSeWFXSjFkR1Z6SUh4OElDZHpaWFFuSUdsdUlFRjBkSEpwWW5WMFpYTXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZEJZMk5sYzNOdmNuTWdibTkwSUhOMWNIQnZjblJsWkNFbktUdGNibHgwSUNCcFppZ25kbUZzZFdVbklHbHVJRUYwZEhKcFluVjBaWE1wVDF0UVhTQTlJRUYwZEhKcFluVjBaWE11ZG1Gc2RXVTdYRzVjZENBZ2NtVjBkWEp1SUU4N1hHNWNkSDA3WEc1Y2JpOHFLaW92SUgwc1hHNHZLaUF4TXlBcUwxeHVMeW9xS2k4Z1puVnVZM1JwYjI0b2JXOWtkV3hsTENCbGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktTQjdYRzVjYmx4MGRtRnlJR2x6VDJKcVpXTjBJRDBnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlneE5DazdYRzVjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVYSFFnSUdsbUtDRnBjMDlpYW1WamRDaHBkQ2twZEdoeWIzY2dWSGx3WlVWeWNtOXlLR2wwSUNzZ0p5QnBjeUJ1YjNRZ1lXNGdiMkpxWldOMElTY3BPMXh1WEhRZ0lISmxkSFZ5YmlCcGREdGNibHgwZlR0Y2JseHVMeW9xS2k4Z2ZTeGNiaThxSURFMElDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNcElIdGNibHh1WEhSdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNibHgwSUNCeVpYUjFjbTRnZEhsd1pXOW1JR2wwSUQwOVBTQW5iMkpxWldOMEp5QS9JR2wwSUNFOVBTQnVkV3hzSURvZ2RIbHdaVzltSUdsMElEMDlQU0FuWm5WdVkzUnBiMjRuTzF4dVhIUjlPMXh1WEc0dktpb3FMeUI5TEZ4dUx5b2dNVFVnS2k5Y2JpOHFLaW92SUdaMWJtTjBhVzl1S0cxdlpIVnNaU3dnWlhod2IzSjBjeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ2UxeHVYRzVjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnSVY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b01UWXBJQ1ltSUNGZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktERTNLU2htZFc1amRHbHZiaWdwZTF4dVhIUWdJSEpsZEhWeWJpQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlneE9Da29KMlJwZGljcExDQW5ZU2NzSUh0blpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUEzT3lCOWZTa3VZU0FoUFNBM08xeHVYSFI5S1R0Y2JseHVMeW9xS2k4Z2ZTeGNiaThxSURFMklDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJSHRjYmx4dVhIUXZMeUJVYUdGdWF5ZHpJRWxGT0NCbWIzSWdhR2x6SUdaMWJtNTVJR1JsWm1sdVpWQnliM0JsY25SNVhHNWNkRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdJVjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTVRjcEtHWjFibU4wYVc5dUtDbDdYRzVjZENBZ2NtVjBkWEp1SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDdmU3dnSjJFbkxDQjdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z056c2dmWDBwTG1FZ0lUMGdOenRjYmx4MGZTazdYRzVjYmk4cUtpb3ZJSDBzWEc0dktpQXhOeUFxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpLU0I3WEc1Y2JseDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaGxlR1ZqS1h0Y2JseDBJQ0IwY25rZ2UxeHVYSFFnSUNBZ2NtVjBkWEp1SUNFaFpYaGxZeWdwTzF4dVhIUWdJSDBnWTJGMFkyZ29aU2w3WEc1Y2RDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseDBJQ0I5WEc1Y2RIMDdYRzVjYmk4cUtpb3ZJSDBzWEc0dktpQXhPQ0FxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpMQ0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1NCN1hHNWNibHgwZG1GeUlHbHpUMkpxWldOMElEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd4TkNsY2JseDBJQ0FzSUdSdlkzVnRaVzUwSUQwZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5ZzNLUzVrYjJOMWJXVnVkRnh1WEhRZ0lDOHZJR2x1SUc5c1pDQkpSU0IwZVhCbGIyWWdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENCcGN5QW5iMkpxWldOMEoxeHVYSFFnSUN3Z2FYTWdQU0JwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQ2tnSmlZZ2FYTlBZbXBsWTNRb1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2s3WEc1Y2RHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1WEhRZ0lISmxkSFZ5YmlCcGN5QS9JR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb2FYUXBJRG9nZTMwN1hHNWNkSDA3WEc1Y2JpOHFLaW92SUgwc1hHNHZLaUF4T1NBcUwxeHVMeW9xS2k4Z1puVnVZM1JwYjI0b2JXOWtkV3hsTENCbGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktTQjdYRzVjYmx4MEx5OGdOeTR4TGpFZ1ZHOVFjbWx0YVhScGRtVW9hVzV3ZFhRZ1d5d2dVSEpsWm1WeWNtVmtWSGx3WlYwcFhHNWNkSFpoY2lCcGMwOWlhbVZqZENBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9NVFFwTzF4dVhIUXZMeUJwYm5OMFpXRmtJRzltSUhSb1pTQkZVellnYzNCbFl5QjJaWEp6YVc5dUxDQjNaU0JrYVdSdUozUWdhVzF3YkdWdFpXNTBJRUJBZEc5UWNtbHRhWFJwZG1VZ1kyRnpaVnh1WEhRdkx5QmhibVFnZEdobElITmxZMjl1WkNCaGNtZDFiV1Z1ZENBdElHWnNZV2NnTFNCd2NtVm1aWEp5WldRZ2RIbHdaU0JwY3lCaElITjBjbWx1WjF4dVhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBMQ0JUS1h0Y2JseDBJQ0JwWmlnaGFYTlBZbXBsWTNRb2FYUXBLWEpsZEhWeWJpQnBkRHRjYmx4MElDQjJZWElnWm00c0lIWmhiRHRjYmx4MElDQnBaaWhUSUNZbUlIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MGIxTjBjbWx1WnlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzVjZENBZ2FXWW9kSGx3Wlc5bUlDaG1iaUE5SUdsMExuWmhiSFZsVDJZcElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtIWmhiQ0E5SUdadUxtTmhiR3dvYVhRcEtTbHlaWFIxY200Z2RtRnNPMXh1WEhRZ0lHbG1LQ0ZUSUNZbUlIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MGIxTjBjbWx1WnlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzVjZENBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTI5dWRtVnlkQ0J2WW1wbFkzUWdkRzhnY0hKcGJXbDBhWFpsSUhaaGJIVmxYQ0lwTzF4dVhIUjlPMXh1WEc0dktpb3FMeUI5TEZ4dUx5b2dNakFnS2k5Y2JpOHFLaW92SUdaMWJtTjBhVzl1S0cxdlpIVnNaU3dnWlhod2IzSjBjeWtnZTF4dVhHNWNkRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9ZbWwwYldGd0xDQjJZV3gxWlNsN1hHNWNkQ0FnY21WMGRYSnVJSHRjYmx4MElDQWdJR1Z1ZFcxbGNtRmliR1VnSURvZ0lTaGlhWFJ0WVhBZ0ppQXhLU3hjYmx4MElDQWdJR052Ym1acFozVnlZV0pzWlRvZ0lTaGlhWFJ0WVhBZ0ppQXlLU3hjYmx4MElDQWdJSGR5YVhSaFlteGxJQ0FnSURvZ0lTaGlhWFJ0WVhBZ0ppQTBLU3hjYmx4MElDQWdJSFpoYkhWbElDQWdJQ0FnSURvZ2RtRnNkV1ZjYmx4MElDQjlPMXh1WEhSOU8xeHVYRzR2S2lvcUx5QjlYRzR2S2lvcUtpb3FMeUJkS1Z4dWZTazdYRzQ3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WTJoaGNuTmxkRDExZEdZdE9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNucGlNMVo1V1RKV2VrbHFjR0pKYm1Sc1dXNUNhRmt5Y3paTWVUaDJaREpXYVdOSFJtcGhlVGt4WW0xc01scFlTbnBaVjNoT1lqSlNNV0pIVmtWYVYxcHdZbTFzTUdGWE9YVkphWGRwWkRKV2FXTkhSbXBoZW05MlRIazVNMXBYU25kWlYwNXlUREpLZG1JelVucGtTRXBvWTBOQmVVNXRUbXhQVkUwMVRucHJNMDFFWjNoTlYwVTBUV3BOTWs1cFNYTkpibVJzV1c1Q2FGa3ljelpNZVRoMlRHazVlbU50VFhaak0xSm9XVEp6ZFdGdVRXbE1RMG96V2xkS2QxbFhUbkpQYVRoMlRIazBkbVpwT1dsWlYwcHNZa014ZVdSWE5UQmhWekZzVERKb2JHSklRbXhqYmsxMldUSjRhR016VGtSWlYzaHpVVEpvYkZreWMzVmhiazFwVEVOS00xcFhTbmRaVjA1eVQyazRka3g1TkhabWFUbHBXVmRLYkdKRE1YbGtWelV3WVZjeGJFd3lhR3hpU0VKc1kyNU5kbGt6U214WldGSnNVVEo0YUdNelRYVmhiazFwVEVOS00xcFhTbmRaVjA1eVQyazRka3g1TkhabWFUbHBXVmRLYkdKRE1YbGtWelV3WVZjeGJFd3lUblpqYlZWMFlXNU5kbUl5U25GYVYwNHdUREpTYkZwdGJIVmFVekYzWTIwNWQxcFlTakJsVXpWeFkzbEpjMGx1Wkd4WmJrSm9XVEp6Tmt4NU9IWk1hVGtyVERKT2RtTnRWWFJoYmsxMllrZHNhV050Um5sbFV6bHRZbWs1ZGxsdGNHeFpNMUYyV2tkV2JXRlhOV3hNV0VKNVlqTkNiR051VWpWTWJYQjZTV2wzYVdReVZtbGpSMFpxWVhwdmRreDVPSFZNTXpSMldUSTVlVnBUTVhGamVUbHpZVmRLZVZsWVNqVk1NakYyV2toV2MxcFlUWFphV0UweVRHMDVhV0Z0Vm1wa1F6VnJXbGRhY0dKdFZYUmpTRXAyWTBkV2VXUklhM1ZoYmsxcFRFTktNMXBYU25kWlYwNXlUMms0ZGt4NU5IWm1hVGxxWWpOS2JFeFhjSHBNTW5od1dXNUthR051YTNaaVZ6bHJaRmQ0YkdONU9XWmFXR2gzWWpOS01FeHRjSHBKYVhkcFpESldhV05IUm1waGVtOTJUSGs0ZFV3ek5IWlpNamw1V2xNeGNXTjVPWE5oVjBwNVdWaEtOVXd5TVhaYVNGWnpXbGhOZGxneVpITmlNa3BvWWtNMWNXTjVTWE5KYm1Sc1dXNUNhRmt5Y3paTWVUaDJUR2s1SzB3eVRuWmpiVlYwWVc1TmRtSkhiR2xqYlVaNVpWTTVkR0l5VWpGaVIxWjZUREU1YW1JelNteE1iWEI2U1dsM2FXUXlWbWxqUjBacVlYcHZka3g1T0hWTU16UjJXVEk1ZVZwVE1YRmplVGx6WVZkS2VWbFlTalZNTWpGMldraFdjMXBZVFhaWU1rNHdaVU0xY1dONVNYTkpibVJzV1c1Q2FGa3ljelpNZVRoMlRHazVLMHd5VG5aamJWVjBZVzVOZG1KSGJHbGpiVVo1WlZNNWRHSXlVakZpUjFaNlRERTVhRXhYV2pGaWJVNHdZVmM1ZFV4dGNIcEphWGRwWkRKV2FXTkhSbXBoZW05MlRIazRkVXd6TkhaWk1qbDVXbE14Y1dONU9YTmhWMHA1V1ZoS05Vd3lNWFphU0ZaeldsaE5kbGd5YUhCYVIxVjFZVzVOYVV4RFNqTmFWMHAzV1ZkT2NrOXBPSFpNZVRSMlptazVhbUl6U214TVYzQjZUREo0Y0ZsdVNtaGpibXQyWWxjNWEyUlhlR3hqZVRsbVlqSktjVnBYVGpCTVYxSjNURzF3ZWtscGQybGtNbFpwWTBkR2FtRjZiM1pNZVRoMVRETTBkbGt5T1hsYVV6RnhZM2s1YzJGWFNubFpXRW8xVERJeGRscElWbk5hV0UxMldESkdkVXhYT1dsaGJWWnFaRU0xY1dONVNYTkpibVJzV1c1Q2FGa3ljelpNZVRoMlRHazVLMHd5VG5aamJWVjBZVzVOZG1KSGJHbGpiVVo1WlZNNWRHSXlVakZpUjFaNlRERTVjR041TVhaWmJYQnNXVE5SZFdGdVRXbE1RMG96V2xkS2QxbFhUbkpQYVRoMlRIazBkbVpwT1dwaU0wcHNURmR3ZWt3eWVIQlpia3BvWTI1cmRtSlhPV3RrVjNoc1kzazVabUZYVlRSTVYxSjJZbE14YTFwWFduQmliVlYxWVc1TmFVeERTak5hVjBwM1dWZE9jazlwT0haTWVUUjJabWs1YW1JelNteE1WM0I2VERKNGNGbHVTbWhqYm10MllsYzVhMlJYZUd4amVUbG1Xa2RXZWxrelNuQmpTRkoyWTI1TmRXRnVUV2xNUTBveldsZEtkMWxYVG5KUGFUaDJUSGswZG1acE9XcGlNMHBzVEZkd2Vrd3llSEJaYmtwb1kyNXJkbUpYT1d0a1YzaHNZM2s1WmxwdFJuQmlTRTExWVc1TmFVeERTak5hVjBwM1dWZE9jazlwT0haTWVUUjJabWs1YW1JelNteE1WM0I2VERKNGNGbHVTbWhqYm10MllsYzVhMlJYZUd4amVUbG1Xa2M1ZEV4WFRubGFWMFl3V2xNMWNXTjVTWE5KYm1Sc1dXNUNhRmt5Y3paTWVUaDJUR2s1SzB3eVRuWmpiVlYwWVc1TmRtSkhiR2xqYlVaNVpWTTVkR0l5VWpGaVIxWjZUREU1TUdKNU1YZGpiV3gwWVZoU2NHUnRWWFZoYmsxcFRFTktNMXBYU25kWlYwNXlUMms0ZGt4NU5IWm1hVGxxWWpOS2JFeFhjSHBNTW5od1dXNUthR051YTNaaVZ6bHJaRmQ0YkdONU9XWmpTRXAyWTBkV2VXUklhM1JhUjFaNldYazFjV041U21STVEwcDFXVmN4YkdONVNUWlhNVEJ6U1cweGFHTklRbkJpYldSNlNXcHZhVkZWUmtKUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVTNoRVVWVkdSRTh3UmtKUk1GRnpWSHAwUWxFeFdrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVZEVKUlZVNUNURWhXUTFGVlJteFBNRVpDVVRKWk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNUekJHUWxFd1JUZFBlblJDVVZWa1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOTZjemRQZW5NM1R6QjBSR1JGVG5oUmFYaE1UekJHUWxFeWNFTk1SR2hFVVZWR2FrOHdSa0pSVlVVM1R6QkdRbEV4V1hOWk1FWkNVM2w0U0ZGVlJrMU1SV1JDVVZaamMxSlZSa0pYUkhSQ1VWVk9TVTk2Y3pkUGVtaERVVlZXU2t4RlZYTlNWVVpDVTFSMFFsRlZUazFNUjNSRFVWVkdURXhGWkVKUlZYZHpVVEJHUWxWNWVFcFJWVVpWVEVWT1FsRlhUWE5TVlVaQ1drUjBRbEZWVGtsUGVuTTNTekJLUWxKVmN6ZFJWVVpFVW1sNGNsRnJSa0pUZVhoSVVWVkdUVXhGVGtKUlZrMXpWRlZHUWxaRWRFSlJWVTVKVDNwek4wc3dTa0pTVlhNM1VWVkdSRkpxZEVKUlZVNUNUekJHUWxFd1JYTmlNRXBDVVZVNGMxTXdSa0pUZVhoSVVWVkdUVXhGVGtKUlZrMXpVekJHUWxONWVFaFJWVVpOVEVWT1FsRldUWE5VVlVaQ1ZrTjRTRkZWUm5KUmFYaEVVVlZGZWxGcGVFUlJWVVpSVHpCR1FsRXdaemRQZW5SNFVUQkdSbFo1ZUVaTVJWWkNVVlZyYzFWVGVFWlJWVVpXVEVVNGMxSlZSa0pWZW5SQ1VWVk5kbEZwZUhKUmEwWkNVM2w0U2xGVlJrMU1SVTVDVVZaVmMxSlZSa0pXYW5SQ1VWVk9Ra3hIYkVOUlZVWktUekJHUWxFd1JYTk5SVXBDVVZaTmMxTlZSa0pXUTNoRVVWVkdha3hGT1VKUlYxRTNVVlZHUkZORGVHcFJWVnBGVEVaT1FsSldWVGRSVlVaRVZHbDRlbEZyUmtKVGVYaElVVlZHVFU4d1JrSlJNR2MzVVZWR1JGTnFjemRQZW5NM1RXdE9RazFWU201UmFYaE1UM3B6TjA5NmN6ZFJWVTVDWTJ0Sk4wOHdSa0pTVlVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVTNoSVQzcHpOMDk2Y3pkUlZVNVRVVlJ6TjFGVlJrWlJWSE0zVVZWR1JsRlVjemRSVlVaR1VWUnpOMUZWUmtaUlUzZ3hVVEJHUW1Nd1RYTmtWVTVDVVZoV1JFeEhaRU5SVlVadVVXcHpOMUZWUmtaT01GazNVVlZHUkZGVWRFSlJWVTVDVEVjNVExRlZSblJSYVhoeVVXdEdRbUV3U1RkUlZVWkVZMnROTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVEVWV1FsRlZUWE5TZW5NM1QzcHpOMDh3UmtSTlZVcEZURWN4UTFGVlJuSlJhWGd4VWtSek4wOTZjemRQTUVaRVVWZDRRMDh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSWE5TZW5NM1QzcHpOMDh3UmtSVGEwVTNVVlZHUkZGVWRFSlJWVTVDVEVoT1JsRlZSakZTVTNkM1VUQkdRazFGVFhOU1ZITTNUM3B6TjA4d1JrUlNiWEJKVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVTNoMlVsVkdRbUpWVlRkUlZVWkVZbXRWTjFGVlJrUlJVM2g2VW10R1FtTlZXVGRSVlVaRVkydFpOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FreEdiRUpSVm1NM1VWVkdSRmREZUZaUlZVWlVUekJHUWxFeFVUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlUzaE9VVlZHVEU4d1JrSlJNSGMzVVZWR1JGRlVkRUpSVlU1Q1RFZGtSVkZWUlhKUmVuUkNVVlZOZGxGNmRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJVM2hzVVZWR2FrOHdSa0pSTWxGeldsVkdRbGw2ZEVKUlZVNXJURWRXUWxGWFRUZFJWVVpFV2tONGJGRlZSbXBQTUVaQ1VUSlJjMW93U2tKUlYxVTNVVlZHUkZwcGVHNVJhMFpDV2xSMFFsRlZUbTFNUjJSRFVWVkdiRTh3UmtKUk1sbHpZVlZLUWxGWFpFTlBNRVpDVVRKb1EweEVRa05QZW5NM1QzcHpOMUZWVFRGU1JVVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSWE5rTUU1Q1VWaFdSRXhIWkVSUGVuTTNUM3B6TjFGVlRrbGthMDF6VDBWS1FsRlVXa05QTUVaQ1VYcGtRMHhJVGtSUlZVWjRVWGw0YmxGNmN6ZFBlbk0zVHpCR1JGSklTa1JQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGYzFKNmN6ZFBlbk0zVHpCR1JHSnJTa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWt4Rll6ZFBlbk0zVDNwMFFsRXdhRUpQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVZ6VWxWR1FsRjZkRUpSVlU1RlR6QkdRbEV3UlRkUlZVWkVVVk40U0U5NmN6ZFBlbk0zVVZWT1VWRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZONFNsRlZSa2hNUmxaQ1VWWlZOMUZWUmtSWmFuUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRWhQZW5NM1QzcHpOMUZWVG0xUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1RFVmpOMDk2Y3pkUGVuUkNVVEJ3UWs4d1JrSlJNRVUzVVZWR1JGRlRlRWhQZW5NM1QzcHpOMUZWVGtkUlZIUkNVVlZPUWt4SVRrWlJWVVo2VWxONGJsRnJSa0phTUVselZsVkdRbFpUZUVoUlZVWklUekJHUWxFeU5VaE1SVlpDVVZWTmMxSlVjemRQZW5NM1R6QkdSRkpyVVRkUlZVWkVVVlIwUWxGVlRrSk1SM1JFVVZWR2NGRjVlRkpSVlVaU1RFZGtRMUZWUm01UmFYaFdVVlZHVmt4RlpFSlJWV00zVVZWR1JHUkZWWE5TVlVaQ1VYbDRSazk2Y3pkUGVuTTNVVlZPU1ZKRWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWTjRTbEZWUmtoUE1FWkNVVEJuTjFGVlJrUlJWSFJDVVZWT1FreEZZemRQZW5NM1QzcDBRbEV3TlVKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNURVZqTjA5NmN6ZFBlblJDVVRBMVFrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRWhQZW5NM1QzcHpOMUZWVGxsUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSk1SV05wVEVOS2JXRlhlR3hKYW05cFl6TlNhRmt5YzNSYVdFMTVUVVJGTVV4WE1YWmFTRlp6V2xoTmRXRnVUV2xNUTBwNllqTldlVmt5Vm5wUk1qbDFaRWRXZFdSRFNUWlhlVWx2V201V2RWa3pVbkJpTWpSblpESldhV05IUm1waE1WWjFZVmhhYkdOdVRtaGlSVEYyV2toV2MxcFZVbXhhYld4MVlWaFNjR0l5Tkc5amJUbDJaRU4zWjFwdFJtcGtSemw1WlZOcloyVXhlSFZZU0ZKd1dtbG9NR1ZZUW14aU1sbG5XbGhvZDJJelNqQmplVUU1VUZRd1owb3lPV2xoYlZacVpFTmpaMHBwV1dka1NHeDNXbGM1YlVsSE1YWmFTRlp6V2xOQk9WQlVNR2RLTWpscFlXMVdhbVJEWTNCWVJ6VmpaRVo0TUdKWE9XdGtWM2hzVEcxV05HTkhPWGxrU0UxblVGTkNiVmxYVGpCaU0wbzFTME5yTjFoSE5XTmtSMVp6WXpKVloyRlhXVzlrU0d4M1dsYzViVWxIVW14YWJXeDFXbE5CT1ZCVU1HZEtNbG94WW0xT01HRlhPWFZLZVVGdFNtbENhMXBYV25CaWJWVjFXVmN4YTB0V2VIVllTRkpqWkVkU2JGcHRiSFZhVTJoalNXNU9NRmxYVG5KTVYxWjZUV3BCZUU1VE1YUmlNbEl4WWtkV2VsaERTWE5KUm5Sa1RFTkNiVmxYVGpCaU0wbzFTMVIwWTJKc2VEQmFWM2g2V2xOQ2NGcHBhREJsV0VKc1lqSlpaMXBZYUhkaU0wb3dZM2xCT1ZCVU1HZEtNamxwWVcxV2FtUkRZM0JZUnpWalpFWjRNRnBZYUhkaU0wb3dZekYwWTBsdVRqQlpWMDV5VEZkV2VrMXFRWGhPVXpGMFlqSlNNV0pIVm5wWVEwcGtTVVF3WjFwdFJtcGtSemw1WlZObmNFOHhlSFZZU0ZKc1lraE9iRmhITldOa1JuZ3dZMjA1ZG1SR2RHTkpiazR3V1ZkT2NreFhWbnBOYWtGNFRsTXhkR0l5VWpGaVIxWjZXRU5LWkVsRU1HZGFiVVpxWkVjNWVXVlRaM0JQTVhoMVpsTnJiMlJIYUhCamVYZG5XbTVXZFZrelVuQmlNalJ2UzFOQ04xaEhOWGxhV0ZJeFkyMDBaMWhITldOaWJIaDFUSGx2Y1VsR1pFWlJiRUpDVVRCeloxSnJPVkJXUlZaVFNVTnZjVmhITkdkTGFXOW5aREpXYVdOSFJtcGhlVGt4WW0xc01scFlTbnBaVjNoT1lqSlNNV0pIVmtWYVYxcHdZbTFzTUdGWE9YVllSelJuUzJsdmRrbHBkMmxKUm5nd1RIazRaMVpIYUd4SlJ6RjJXa2hXYzFwVFFtcFpWMDV2V2xaNGRVbEdlREJrYlVaNVNVZHNkV016VW1oaVIzaHNXa1V4ZGxwSVZuTmFXRTFuVUZOQ04yWlVkR05pYkhoMVNVWjRNRXg1T0dkV1IyaHNTVWhLYkdOWVZuQmpiVlZuV201V2RWa3pVbkJpTWpWalltbENZMlJIV2pGaWJVNHdZVmM1ZFVsR09XWmtNbFpwWTBkR2FtRXhPWGxhV0VZeFlWaEtiRmd4T0c5aVZ6bHJaRmQ0YkZOWFVYQkpTSFJqWW14NGRVbEdlREJZU0ZGMlRIbENSR0ZIVm1waGVVSndXbWxDZEdJeVVqRmlSMVZuWVZoTloyRlhOR2RaTWtacVlVZFdZMkpwUW1Oa1JuZ3dZVmRaYjJGWE5YcGtSMFp6WWtkV2ExUlhPV3RrVjNoc1l6RjBkR0l5VWpGaVIxWktXa1l3Y0ZoSE5HZFlTRkpqWkVaNE1HTnRWakJrV0VwMVNVZHNkV016VW1oaVIzaHNXa1V4ZGxwSVZuTmFXRTVpWWxjNWEyUlhlR3hUVjFKa1RHMVdOR05IT1hsa1NFMDNXRWMxWTJKcFFtTmtSbmd3VEhrNFoxRXpTbXhaV0ZKc1NVZEZaMkp0VmpOSlJ6RjJXa2hXYzFwVFFXOVpWelZyU1VoQ01XUkRRbkJrUTBKd1ltNVNka2xJVW05YVUwSnFXVmRPYjFwVGJHTmlhVUpqWkVaNE1HUnRSbmxKUnpGMldraFdjMXBUUVRsSlIyeDFZek5TYUdKSGVHeGFSVEYyV2toV2MxcFlUbUppVnpsclpGZDRiRk5YVW1SSlJEQm5aVEY0ZFVsR2VEQllTRkpqWkVkV05HTkhPWGxrU0UwMlNVaDBPVXhHZUhWSlJuZ3dXRWhTWTJSSGJHdFBhVUowWWpKU01XSkhWa3BhUTNoalltbENZMlJHZURCWVNGSnpZakpHYTFwWFVUWkpSMXBvWWtoT2JGaEhOR2RZU0ZKalpFZ3dOMWhITldOaWFVSmpaRVo0TUV4NU9HZFNXR2hzV1ROV01GcFRRakJoUjFWbllsYzVhMlJYZUd4SlIxb3hZbTFPTUdGWE9YVllSelJuV0VoU1kyUkhNWFphU0ZaeldsaE9ZbUpYT1d0a1YzaHNVMWRTWkV4dFRtaGlSM2R2WWxjNWEyUlhlR3hNYlZZMFkwYzVlV1JJVFhOSlJ6RjJXa2hXYzFwVGQyZGlWemxyWkZkNGJFeHRWalJqUnpsNVpFaE5jMGxHT1daa01sWnBZMGRHYW1FeE9YbGFXRVl4WVZoS2JGZ3hPSEJQTVhoMVdFYzBaMWhJVW1Oa1F6aDJTVVZhYzFsWFkyZGtSMmhzU1VjeGRscElWbk5hVTBKb1kzbENjMkl5Um10YVYxSmpZbWxDWTJSR2VEQmlWemxyWkZkNGJFeHRlSFpaVjFKc1drTkJPVWxJVW5sa1YxVTNXRWMxWTJKcFFtTmtSbmd3VEhrNFoxVnRWakJrV0VwMVNVaFNiMXBUUW14bFNFSjJZMjVTZWtsSE9XMUpTRkp2V2xOQ2RHSXlVakZpUjFaalltbENZMlJHZURCamJWWXdaRmhLZFVsSE1YWmFTRlp6V2xNMWJHVklRblpqYmxKNlR6RjRkVWxHZURCbVZuaDFXRWMxWTJKcFFtTmtRemgyU1VkV05HTkhPWHBhVTBJd1lVZFZaMkpYT1d0a1YzaHNZM2xDZGxsdGNHeFpNMUZuUzBZNVptUXlWbWxqUjBacVlURTVkR0l5VWpGaVIxWjZXREU0Y0ZoSE5HZFlTRkptV0ROa2JGbHVRbWhaTW5SbVkyMVdlR1JYYkhsYVZqbG1URzB3WjFCVFFuUmlNbEl4WWtkV2VrOHhlSFZZUnpSbldFaFJka3g1UW14bFNFSjJZekpWWjJSSGFHeEpSekYyV2toV2MxcFRRbXBaVjA1dldsWjRkVWxHZURCWU1Ua3pXbGRLZDFsWFRuSllNMHBzWTFoV2NHTnRWbVpZZVRWcVNVUXdaMkZYTlhwa1IwWnpZa2RXYTFSWE9XdGtWM2hzWTNwMFkySnNlSFZKUm5nd1RIazRaMWd4T1ROYVYwcDNXVmRPY2xnelFqRlpiWGh3V1RFNWQxbFlVbTlZTVRsalltbENZMlJHT1daa01sWnBZMGRHYW1FeE9YbGFXRVl4WVZoS2JGZ3hPSFZqUTBFNVNVWjNhVmhEU1RkWVJ6VmpZbWxDWTJSRE9IWkpSWGgyV1ZkUloxcFhOVEJqYm10bllsYzVhMlJYZUd4SlIwWjFXa05DZVZwWVVqRmpiVFJuV2xob2QySXpTakJqTVhoMVNVWjRNR050VmpCa1dFcDFTVVk1Wm1ReVZtbGpSMFpxWVRFNWVWcFlSakZoV0Vwc1dERTRiMDFEYXpkWVJ6VmpZbXg0ZFZoSE5IWkxhVzluVmpCV1ExVkZSa1JUZVVKSFZEQTVWVkpXU1dkTGFYQmpZbWxCY1V0cFFqTmFWMHAzV1ZkT2Nrd3lTblppTTFKNlpFaEthR05EUVhsT2JVNXNUMVJOTlU1NmF6Tk5SR2Q0VFZkRk5FMXFUVEpPYkhoMVNVTnZjVXg1U1hOSmJWWTBZMGM1ZVdSRFFtdGFWMXBvWkZkNE1FbEhUbk5aV0U1NlNVWk9NRmxYVG5KSlNIUmpZMng0ZFVsRFFXZEpSMDUyWW01T01HTnVWbXBrUnpsNVMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWbFlTbmxKUkRCblZ6RXdOMWhJU21OaWFVRm5TVU5DT1U4eGVIbFlSelZqWTJ4NGRVbERRV2RKU0VJeFl6Sm5iMXBYZDNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYlVaNVkyazFkMlJZVG05TFIxWnpTMVIwWTJOc2VIVkpRMEZuU1VneFkyTnNlSFZZU0VwalltbEJaMGxEUW5kaU0wRnZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RrUjJod1kzazFhR051U1hWaVIxWjFXak5TYjB4VE1EZFlTRXBqWW1sQlowbERRamxZU0VwallteDRlVmhITkdkSlEwRm5aRWM1ZDB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTTRka2xHVWxCU1JUZzJTVU0xYzFsWVRqQkxRMnRuWW0wNU1FbEhVbXhhYld4MVdsZFJaMkZYTkdkaU1uaHJXbGhKWjJKdE9XdGFVMEl5V2xoS2VtRlhPWFZqTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU00ZGtsSVNteGtTRlo1WW1sQ01HRkhiSHBNYlVaNVkyazFjMWxZVGpCTFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVaFNiMkZZVFhWWldFcDVWek5TYjJGWVRYVlpXRXA1VEcxNGJHSnRaREJoUTBGMFNVUkdaRTh4ZUhsWVJ6Um5TVU5CWjJaV2VIbFlSelZqWTJ4NGRVbERRV2RKU0dSd1pFZG9SbUpIVm5SYVZ6VXdTMGRXYzB4RFFtcFpWM2h6V1cxR2FtRjVkMmRaTWpsMVpFZFdOR1JEYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZqU0ZaNllVTm9iR0pEYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWkVoS05VbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjFreVJuTmlSMHBvV1RKemRWa3lSbk5pUTJocVlqSTFNRnBZYURCTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ09VbEhXbkJpYlVaellraHJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYmtKMlkwTm5jRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTREZqWTJ4NGRVbERRV2RKU0RGalkyeDRkV1pXZUhsWVJ6VmpZbXg0ZFZoSE5IWkxhVzluVmpCV1ExVkZSa1JUZVVKSFZEQTVWVkpXU1dkTGFYQmpZbWxCY1V0cFFYVk1NMDU1V1hrNWVtUkhSbXBoZVRWeFl6RjRkVWxEYjNGTWVVbHpTV3gzYVdSWVRteEpTRTR3WTIxc2FtUkdkMmxQTVhoMVdFYzFiR1ZJUW5aamJsSjZUR3c1WmxwWVRrNWlNbEl4WWtkVloxQlRRakJqYmxac1R6RjRkVmhITld4bFNFSjJZMjVTZWt4dFVteGFiVVl4WWtoUloxQlRRbTFrVnpWcVpFZHNkbUpwUVc5aFZ6VjZaRWRHZFZreVZYTkpSVTUyWW01T01HTnVWbXBrUnpsNVMxTkNOMWhITkdkSlIyeHRTVU5uYUV0SGJIVmpNMUpvWW0xT2JFbEhiSFZqTTFKb1ltMU9iR0l5V1dkUk1qbDFZek5TZVdSWFRqQmlNMGx3UzFOQ04xaEhOR2RKUTBGblpFZG9lV0l6WTJkaWJWWXpTVVpTTldOSFZrWmpia3AyWTJsb1kwbHJUbWhpYlRWMlpFTkNhbGxYZUhOSlIwVm5XVEo0YUdNelRXZFpXRTFuV1ZOQ2JXUlhOV3BrUjJ4MllteDNhVXRVZEdOaWFVRm5abFo0ZFdaVWRHTmliSGgxV0VjMGRrdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx3WTJKcFFYRkxhVUpZVWxWS1VWRlZUa3hKUlZwUVZERlNSbFZzZUhWSlEyOXhTVU0wZG1acE9XbFpWMHBzWWtNeGVXUlhOVEJoVnpGc1RESm9iR0pJUW14amJrMTJXVEo0YUdNelRrUlpWM2h6VVRKb2JGa3ljM1ZoYms1alltbEJjVXRwUW5SaU1sSXhZa2RWWjJGWFVXZFFVMEY0V0VjMFowdHBiMmRpVnpsclpGZDRiRWxIVG05a1Z6VnlZM2xCT1VsRVFtTmlhVUZ4UzJrNGFVeERTbU5KYmxaNldsTkNlbVJJU25CWk0xSmpTV3AwWTJKc2VIVmFXR2gzWWpOS01HTjVOV1pZTWxaNlZGYzVhMlJYZUd4SlJEQm5aRWhLTVZwVWRHTmliSGgxWkcxR2VVbEdPV3RhVjFwd1ltMVdVV050T1hkYVdFb3daVk5CT1VsSVNteGpXRlp3WTIxVmIxaERTWFZNYVRscVlqTktiRXhYY0hwTU1qbHBZVzFXYW1SRE9XdGFWMXB3WW0xVmRHTklTblpqUjFaNVpFaHNZMGxwYXpkWVJ6VmpZbTVhYUdOcFFtWmFSMVp0WVZjMWJGVklTblpqUjFaNVpFaHJlVWxFTUdkWU1teDFaRWRXZVdJelFsTmFXRVl4WVZoS2JGSkhWbTFaV0ZaelpFTm9abHBIVm0xaFZ6VnNWVWhLZG1OSFZubGtTR3R3VHpGNGRWaEhOVzFrVnpWcVpFZHNkbUpwUW1aaFZ6VXdXbGhLZG1OR1NteGpXRlp3WTIxV1JWcFhXbWhrVjNnd1MwYzVhV0ZwYTJkbGVVSjVXbGhTTVdOdE5HZGlNa3B4U1VOWmJVbEhPV2xoYVRWbVdESldlbFJYT1d0a1YzaHNTVVE0WjJJeVNuRkpSRzluWlhsQ2ExcFhXbWhrVjNnd1QybENkbGx0YjJkbVZITm5abFo0ZFZoSE5XeGxTRUoyWTI1U2VreHRVbXhhYlVZeFlraFJaMUJUUW0xa1Z6VnFaRWRzZG1KcFFXOUxVMEkzV0VjMFowbEhXakZpYlU0d1lWYzVkVWxIVW14YWJXeDFXbFpDZVdJelFteGpibEp3V2xoTmIyUkhSbmxhTWxZd1RFTkNkMk50T1hkamVXdG5aVEY0ZFVsRFFXZEpSMXAyWTJsQmIyUnRSbmxKUjJ0blVGTkJkMDk1UW5CSlJIZG5ZMGhLZG1OSVRYVmlSMVoxV2pOU2IwOTVRbkJMZVhOd1NVaDBZMkpwUVdkSlEwRm5TVWhhYUdOcFFtdGFXRTVxWTIxc2QyUkhPWGxKUkRCblkwaEtkbU5JVG1KaFZqQTNXRWMwWjBsRFFXZEpRMEpyV2xoT2FtTnRiSGRrUnpsNVRHMVdkV1JYTVd4amJVWnBZa2RWWjFCVFFtdGFXRTVxWTIxc2QyUkhPWGxNYlZaMVpGY3hiR050Um1saVIxVm5aa2gzWjFwdFJuTmpNbFUzV0VjMFowbERRV2RKUTBKcldsaE9hbU50Ykhka1J6bDVURzFPZG1KdFduQmFNMVo1V1ZkS2MxcFRRVGxKU0ZKNVpGZFZOMWhITkdkSlEwRm5TVU5DY0ZwcFFXOVlRMG95V1ZkNE1WcFdkMmxKUjJ4MVNVZFNiR015VG5saFdFSXdZak5KY0VsSFVteGpNazU1WVZoQ01HSXpTWFZrTTBwd1pFZEdhV0pIVldkUVUwSXdZMjVXYkU4eGVIVkpRMEZuU1VOQlowdEVRWE5KUmpscldsZGFjR0p0VmxGamJUbDNXbGhLTUdWVVNYVmFSMVp0V1ZoV2MyUkRhMjlrUjBaNVdqSldNRXhEUW10YVdFNXFZMjFzZDJSSE9YbE1iWFJzWlZOM1oxcEhWbnBaTTBwd1kwaFNkbU5wYXpkWVJ6Um5TVU5CWjJaV2VIVkpRMEk1V0VjMVkySnBRV2RqYlZZd1pGaEtkVWxIV2pGaWJVNHdZVmM1ZFVsRGFFUmlNalY2WkVoS01Wa3pVblpqYVhkblkwaEtkbVJIT1ZGamJUbDNZM2wzWjJNelVtaGtSMnhxVlVoS2RtTklUWEJKU0hSalltbEJaMGxEUW5CYWFVRnZZMGhLZG1SSE9WRmpiVGwzWTNscloxcEhWbTFoVnpWc1ZVaEtkbU5IVm5sa1IyeHNZM2xvUkdJeU5YcGtTRW94V1ROU2RtTnBOWGRqYlRrd1lqTlNOV05IVlhOSlNFSjVZak5TZGxWSVNuWmpTRTF3VHpGNGRVbERRV2RKUjJ4dFNVTm9lbVJIUmpCaFYwNVJZMjA1ZDJONWEyZGFSMVp0WVZjMWJGVklTblpqUjFaNVpFZHNiR041YUVSaU1qVjZaRWhLTVZrelVuWmphWGRuWXpOU2FHUkhiR3BWU0VwMlkwaE5jRTh4ZUhWSlEwRm5TVWhLYkdSSVZubGlhVUpFWWpJMWVtUklTakZaTTFKMlkycDBZMkpwUVdkbVZIUmpZbTR3YjB0VWRHTmliSGgxV0VjMGRrdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx3WTJKcFFYRkxhVUpZVWxWS1VWRlZUa3hKUlZwUVZERlNSbFZzZUhWSlEyOXhTVU0wZG1acE9XbFpWMHBzWWtNeGVXUlhOVEJoVnpGc1RESm9iR0pJUW14amJrMTJXVE5LYkZsWVVteFJNbmhvWXpOTmRXRnVUbU5pYVVGeFMybENkR0l5VWpGaVIxVm5ZVmRSWjFCVFFYbFlSelJuUzJsdloySlhPV3RrVjNoc1NVZE9iMlJYTlhKamVVRTVTVVJDWTJKcFFYRkxhVGhwVEVOS2RHSXlVakZpUjFWMVdsaG9kMkl6U2pCamVVRTVTVWh6WjFoRFNtdGFWMXBvWkZkNE1GaERTVFpKU0Vwc1kxaFdjR050Vlc5WVEwcHFZak5LYkV4WGNIcE1Nbmh3V1c1S2FHTnVhM1phYlRSMllqSktjVnBYVGpCTU1sSnNXbTFzZFZwVE1YZGpiVGwzV2xoS01HVldkMmxMVTNkbldERTViR013TVhaYVNGWnpXbFJ2WjJSSVNqRmFVMEk1VHpGNGRWaEhOV05pYVRoeFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxiSGgxU1VOdmNVbEdaRVpSYkVKQ1VUQnpaMUpyT1ZCV1JWWlRXRWMwWjB0cGIyZE1hVGtyVERKS2FGbHRWbk5NV0VveFltNVNjR0pYVlhaWk1qbDVXbE14Y1dONU9YWlpiWEJzV1ROUmRscEhWbTFoVnpWc1RGaENlV0l6UW14amJsSTFURzF3ZWxoSE5HZExhVzluWWxjNWEyUlhlR3hKUjJ4clNVUXdaMDB4ZUhWSlEyOXhTVWN4ZGxwSVZuTmFVMEpxWVVoV2RXRXpUV2RRVTBGM1dFYzBaMHRwYjNaSmFYZHBZMjFXZUdSWGJIbGFVMmR1VEdrMGRreHBOSFppVnpsclpGZDRiR041T1d4amVsbDFZakpLY1ZwWFRqQk1iVkpzV20xc2RWcFRNWGRqYlRsM1dsaEtNR1ZUWTNCUE1YaDFaRzFHZVVsRFVsQlpiWEJzV1ROUloxQlRRbmxhV0VZeFlWaEtiRXREWTNWTWFUaDFUR2s1ZEdJeVVqRmlSMVo2VERFNWFtSXpTbXhLZVd0MVZESktjVnBYVGpCUE1YaDFZbGM1YTJSWGVHeE1iVlkwWTBjNWVXUklUV2RRVTBKdFpGYzFhbVJIYkhaaWFVSnJXbGRhY0dKdFZsRmpiVGwzV2xoS01HVlRhSEJrUTNkbllUSldOVXhEUW10YVdFNXFTMWgwWTJKcFFXZGpiVll3WkZoS2RVbERVbEJaYlhCc1dUTlJkVnBIVm0xaFZ6VnNWVWhLZG1OSFZubGtTR3R2WVZoUmMwbEhkR3hsVTNkbldrZFdlbGw1YXpkWVJ6VTVUekY0ZFZoSE5XTmlhVGh4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGJIaDFTVU52Y1VsR1pFWlJiRUpDVVRCeloxSnJPVkJXUlZaVFdFYzBaMHRwYjJkTWFUa3JUREpPZG1OdFZYUmhiazEyWWtkc2FXTnRSbmxsVXpsdFltazVkbGx0Y0d4Wk0xRjJXa2RXYldGWE5XeE1XRUo1WWpOQ2JHTnVValZNYlhCNldFYzBaMHRwYjJkaVZ6bHJaRmQ0YkVsSGJHdEpSREJuVGtaNGRVbERiM0ZKUnpGMldraFdjMXBUUW1waFNGWjFZVE5OWjFCVFFYZFlSelJuUzJsdmRrbHBkMmxrYlVaNVNVTlNiR1ZJUW5aamJsRm5VRk5DZVZwWVJqRmhXRXBzUzBOamRVd3hPV3hsU0VKMlkyNVJia3RVZEdOaWFUaDJTVVJGTlV4cVJYVk5hVFF3U1VNNFowMVVWWFZOYVRSNlRHcFpaMVF5U25GYVYwNHdURzFTYkZwdGJIVmFWa0o1WWpOQ2JHTnVValZMUlRoelNVWkJjMGxGUmpCa1NFcHdXVzVXTUZwWVRYQllSelJyV2xob2QySXpTakJMUTFKc1pVaENkbU51VVhWVmVVRnlTVU5TYkdWSVFuWmpibEYxVW1sQmNVbERSbmxhV0VZeFlWaEtiRXREWTNWTU1UbHJXbGhPYW1OdGJIZGtSemw1WTNsamNFeERRVzVVTWtweFdsZE9NRXA1ZDJkbE1sSnNXbTFzZFZwV1FubGlNMEpzWTI1U05VOXBRbmxhV0VZeFlWaEtiRXREWTNWTU1UbDJXVzF3YkZrelVYUmFTRUZ1UzFNMWJXWlRhemRZUnpWallteDRkVXg1YjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNWaEhOR2RMYVc5blZqQldRMVZGUmtSVGVVSkhWREE1VlZKV1NtTmlhVUZ4UzJsQmRVd3pOSFpaTWpsNVdsTXhjV041T1hOaFYwcDVXVmhLTlV3eU1YWmFTRlp6V2xoTmRscFlUVEpNYlRscFlXMVdhbVJETld0YVYxcHdZbTFWZEdOSVNuWmpSMVo1WkVocmRXRnVUbU5pYVVGeFMybENkR0l5VWpGaVIxVm5ZVmRSWjFCVFFURllSelJuUzJsdloySlhPV3RrVjNoc1NVZE9iMlJYTlhKamVVRTVTVVJDWTJKcFFYRkxhVGhwVEVOS01sbFlTV2RhTW5oMldXMUdjMGxEUVdkSlJEQm5ZMjFXZUdSWGJIbGFVMmR1VEdrNVpsb3llSFpaYlVaelNubHNZMkpwUVdkTVEwSnFZak5LYkVsRFFXZEpRMEZuVUZOQ2VWcFlSakZoV0Vwc1MwTmpkVXd4T1dwaU0wcHNTbmxzWTJKcFFXZE1RMEpxWkVoblowbERRV2RKUTBGblVGTkNlVnBZUmpGaFdFcHNTME5qZFV3eE9XcGtTR2R1UzFaNGRVbERRWE5KUjJod1drZFZaMGxEUVdkSlEwRTVTVWhLYkdOWVZuQmpiVlZ2U25rMGRsZ3lhSEJhUjFWdVMxWjRkVWxEUVhOSlJrSlRWREZTVUZaR2JGRlNVMEU1U1VOa2QyTnRPVEJpTTFJMVkwZFZiazh4ZUhWWVJ6VXlXVmhKWjBwSFZqUmpSemw1WkVOQk9VbEhXakZpYlU0d1lWYzVkVXRJVWpWalIxVnpTVWMxYUdKWFZYTkpTRTUyWkZoS2FscFRiRGRZUnpSblNVaGFhR05wUWtwVk1UbEhWREZLUkZKVlVXZFFVMEl3WlZoQ2JFbERXV2RLUjFZMFkwYzVlV1JETlVkWVJ6Um5TVU5CWjB4RFFrcFZNVGxJVkVVNVExRlZkMmRRVTBJd1pWaENiRWxEV1dkS1IxWTBZMGM1ZVdSRE5VaFlSelJuU1VOQloweERRa3BWTVRsVVZrVkdWVk5WVFdkUVUwSXdaVmhDYkVsRFdXZEtSMVkwWTBjNWVXUkROVlJZUnpSblNVTkJaMHhEUWtwVk1UbFJWV3M1VlZSNVFXZFFVMEl3WlZoQ2JFbERXV2RLUjFZMFkwYzVlV1JETlZGWVJ6Um5TVU5CWjB4RFFrcFZNVGxEVTFVMVJVbERRV2RRVTBJd1pWaENiRWxEV1dkS1IxWTBZMGM1ZVdSRE5VTllSelJuU1VOQloweERRa3BWTVRsWVZXdEdVVWxEUVdkUVUwSXdaVmhDYkVsRFdXZEtSMVkwWTBjNWVXUkROVmhZUnpSblNVTkJaMHhEUW14bFNFSjJZMjVTZWtsRFFXZFFVMEpLVlRFNVNGUkZPVU5SVlhkblVIbENhbUl6U214SlJHOW5XVEk1ZVZwV2RIVlpWekZzV0ZOQ09HWkRRVzlaTWpsNVdsWjBkVmxYTVd4WVUwRTVTVWgwT1V0V2VIVkpRMEZuU1VOM1oxcFlhSGRWU0VwMlpFYzRaMGxFTUdkYVdHaDNZak5LTUdNeGRGRlZhemxWVkRGU1dsVkZWbVJZUnpSblNVTkJaMHhEUWpCWldFcHVXbGhSWjBsRFFXZFFVMEpLVlRFNVNGUkZPVU5SVlhkblVIbENibUpIT1dsWlYzZG5UMmxDU2xVeE9WUldSVVpWVTFWTloxQjVRbTVpUnpscFdWZDRZbUp0Um5SYVZqQm5UMmxCYjFveWVIWlpiVVp6VnpJMWFHSlhWbVJKU0hnNFNVaDBPVXRXZEZGVmF6bFZWREZTV2xWRlZtUllSelJuU1VOQloweERRbkphV0d0elNVYzVNMkpwZDJkaU0xWXdUekY0ZFVsRFFuQmFhV2hLVlRFNVNGUkZPVU5SVlhkd1l6STVNV050VG14SlJEQm5ZbTFHZEZwVWRHTmlhVUZuV20wNWVVdEhkR3hsVTBKd1ltbENlbUl6Vm5sWk1sVndaVEY0ZFVsRFFXZEpRemgyU1VkT2RtSnVVbWhoVnpWNlNVZHNkVWxITldoa1Iyd3lXbFo0ZFVsRFFXZEpSemt6WW1sQk9VbERSa3BWTVRsSFZERktSRkpWVVdkS2FWbG5aRWRHZVZveVZqQkpRMWx0U1VoU2FHTnRaR3hrUm5SeVdsaHNaRWxEUlRsUVUwSXhZbTFTYkZwdGJIVmFWMUUzV0VjMFowbERRV2RoVjFsdllqTmtkVWxEV1cxSlIzUnNaVk5DY0dKcFFteGxTRUoyWTI1U2VrdFhUblppYmxKd1ltNVdiRTh4ZUhWSlEwRm5TVU00ZGtsSFZqUmpSemw1WkVOQ2RWbFlVbkJrYlZWbllqTkpaMk5IUm5wak1sWnJXRWMwWjBsRFFXZGlNMVl3U1VRd1oySXpaSFZKUkRoblpFZEdlVm95VmpCWE1uUnNaVll3WjA5cFFucGlNMVo1V1RKV1ltRXlWalZZVkhSalltbEJaMGxEUVhaTWVVSjNZMjFXTWxwWE5UQkpSMlJ6WWpKS2FHSkRRbmRpTW5oelpGaFNjR0l5TkdkYWJUbDVTVWMxYUdKWFZucGpSMFpxV2xoT1kySnBRV2RKUTBKc1pVaENkbU51VW5wWE1uUnNaVll3WjFCVFFrcFZNVGxJVkVVNVExRlZkMmRLYVZsblpFaHNkMXBYT1cxSlNGSm9ZMjFrYkdSR2RISmFXR3hrU1VORk9VbERaRzFrVnpWcVpFZHNkbUpwWTJkUWVVSjZZak5XZVZreVZtSmhNbFkxV0ZaNGRVbERRV2RKUXpoMlNVZEtjR0p0VVdka1IyeDBXbGhLZWtsSVVuWkpSMlJ6WWpKS2FHSkRRbTFpTTBsbldUSkdjMkpEUW0xamJUbDBTVWRXTkdOSE9YbGtRMEpxWWpJMU1GcFlhREJZUnpSblNVTkJaMDlwUWtwVk1UbERVMVUxUlVsRFdXMUpSemt6WW1sQkwwbEhUakJsUTJoMlpGaFJjMGxIWkhOaU1rcG9Za05zWTJKcFFXZEpRMEYyVEhsQ00yTnRSbmRKUjJSellqSkthR0pEUW1waU1qVjZaRWhLTVZrelVuWmpiazFuV20wNWVVbElRbmxhV0Zwc1ltNVJaMWt5YUdoaWJXUnNTVWhTYjFwWE1HZGhWelJuWWtkc2FXTnRSbmxsVm5oMVNVTkJaMGxFYjJkVFZrNW1WakZLUWxWRFFXMUthVUl3V1ZoS2JscFlVbUpoTWxZMVdGTkJPVkJUUW5aa1dGRm5VSGxCYjFwdVZuVlpNMUp3WWpJMGIxRjViRGRZUnpSblNVTkJaMGxEUWpKWldFbG5VbWxCT1VsSFdqRmliVTR3WVZjNWRVdEhSWE5KUjBselNVZE5jR1V4ZUhWSlEwRm5TVU5CWjBsRFFuQmFhV2d3WVVkc2VrbEhiSFZqTTFKb1ltMU9iR0l5V1dkUmVXdzNXRWMwWjBsRFFXZEpRMEZuU1VOQloyTXpaSEJrUjA1dlMwZEdlVm96Vm5SYVZ6VXdZM2sxYzFwWE5XNWtSMmR3WlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkWk1rWjZXbE5CZDA5cFFubGFXRkl4WTIwMFoySnRWak5KUlUwM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcFpXRTVzU1VSRk5rbElTbXhrU0ZaNVltbENkVnBZWTJkUmVXaG9TMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjA1b1l6SlZaMDFxYjJkamJWWXdaRmhLZFVsSE5XeGtlVUpFUzBkRmMwbEhTWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVWd3WjJOdFZqQmtXRXAxU1VjMWJHUjVRa1JMUjBWelNVZEpjMGxIVFhCUE1YaDFTVU5CWjBsRFFXZEpRMEk1U1VoS2JHUklWbmxpYVVKRVRHMUdkMk5IZURWTFNGSnZZVmhOYzBsSFJubGFNMVowV2xjMU1HTjVhemRZUnpSblNVTkJaMGxEUWpsUE1YaDFTVU5CWjBsRFFXZFNiSFJSVldzNVZWUXhVbHBWUlZaa1NVUXdaMUV4ZEZGVmF6bFZWREZTV2xWRlZtUlBNWGgxU1VOQlowbERRV2RqYlZZd1pGaEtkVWxGV1RkWVJ6Um5TVU5CWjB4NU9HZGlWMFp5V2xOQ2VtUkhSakJoVjAxblpHMVdlV015YkhaaWJrMW5XbTA1ZVVsSVFubGlNMUoyWkVoc2QxcFRRblJhV0ZKdllqSlNlbGhITkdkSlEwRm5abE5yYjJJelZqQkxVMEUyU1VWc1ZGZ3hRbE5VTVZKUVNVTlpiVWxJVWpWalIxWjJXbWxDZG1SWVVXZFFWREJuU2pKYU1XSnRUakJoVnpsMVNubEJMMGxIVGpCbFEyaEhaRmMxYW1SSGJIWmlhVFZxV1ZkNGMweERRblprV0ZGd1NVUnZaMkl6VmpCUE1YaDFTVU5CWjBsRE9IWkpSMVkwWTBjNWVXUkRRbmRqYlRrd1lubENkRnBZVW05aU1sSjZTVWhTZGtsSFRuWmpiVlYxU2xWT1VGUnNUbFZWYkZaRVZrVTVVMHBUTlhSYVdGSnZZakpTZWt4cFZrOVJWVEZHU2xaNGRVbERRV2RKUjJ4dFMwVnNWRmd4UWxOVU1WSlFTMWgwWTJKcFFXZEpRMEZuU1VOb2JHVklRblpqYmxKNlRHNWFjR051VWpGWlYzZG5aa2gzWjB0SFZqUmpSemw1WkVoTmRXUnRiSGxrU0Zab1lrTkJPVWxJZERsTFUyeGlZVEpXTlZoVFFUbEpSemt4WkVSMFkySnBRV2RKUTBGblNVTTRka2xIVmpSalJ6bDVaRU5DZDJOdE9UQmllVUowV2xoU2IySXlVbnBKU0ZKMlNVZE9kbU50VlhWS1ZVNVFWR3hPVlZWc1ZrUldSVGxUU2xNMWQyTnRPVEJpTTFJMVkwZFZkVXBWTlVKVVZWVnNXRWMwWjBsRFFXZEpRMEp3V21sb01HVllRbXhKUTFsblNrZFdOR05IT1hsa1F6VlRTVU5aYlVsSFZqUmpSa0o1WWpOU2RrbERXVzFKUTBac1pVaENVV050T1RCaU1YUnlXbGhzWkV0WGFIQmFSMVZ2V2xob2QxVklTblprUnpoelNVZDBiR1ZUZDJkaU0xWXdTMVIwWTJKcFFXZEpRMEk1V0VjMFowbElNV05pYmpBM1dFYzBka3g1UWpCbFdFSnNTVWRLY0dSSE1XaGpSbmgxU2tkV05HTkhPWGxrUXpWSFNVUXdaMDFVYzJkSlEwRjJUSGxDYldJelNtcGFWMUpqWW1sU2JHVklRblpqYmxGMVVubEJPVWxFU1RkSlEwRm5USGs0WjFveWVIWlpiVVp6V0VjMGExcFlhSGRpTTBvd1RHeE5aMUJUUVRCUGVVRm5TVU00ZGtsSVRqQlpXRkp3V1RGNGRVcEhWalJqUnpsNVpFTTFVVWxFTUdkUFJITm5TVU5CZGt4NVFuZGpiVGt3WWpGNGRVcEhWalJqUnpsNVpFTTFRMGxFTUdkTlZGazNTVU5CZGt4NVFtbGhWelZyV0VjMGExcFlhSGRpTTBvd1RHeGpaMUJUUVhwTmFuTm5TVU00ZGtsSVpIbFpXRUpqWW1sU2JHVklRblpqYmxGMVZsTkJPVWxFV1RCUGVVRm5USGs0WjJNeVJtMWFWbmgxU2tkV05HTkhPWGxrUXpWVFNVUXdaMDFVU1RSUGVVRjJUSGxDZVZwWFJuTkpTRUo1WWpOU2RrbEhNV3hrUjJoMldrTkNiV0l6U1dkWlIzaHdXVzVLYUdOdWJHZEpSbmgxWWxjNWEyUlhlR3hNYlZZMFkwYzVlV1JJVFdkUVUwRnJXbGhvZDJJelNqQlBNWGgxV0VjMVkySnBPSEZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0c2VIVkpRMjl4U1Vaa1JsRnNRa0pSTUhOblVtczVVRlpGVmxOWVJ6Um5TMmx2WjB4cE9TdE1NazUyWTIxVmRHRnVUWFppUjJ4cFkyMUdlV1ZUT1hSaU1sSXhZa2RXZWt3eE9XeGxTRUoyWTI1UmRXRnVUbU5pYVVGeFMybENkR0l5VWpGaVIxVm5ZVmRSWjFCVFFUSllSelJuUzJsdloySlhPV3RrVjNoc1NVZE9iMlJYTlhKamVVRTVTVVJDWTJKcFFYRkxhVGhwVEVOSmRreDVRbTlrU0ZKM1kzcHZka3d5WkhCa1IyZ3hXV2sxYW1JeU1IWmxiWGgyWVZoS2Rsa3ljM1paTWpsNVdsTXhjV041T1hCak0wNHhXbGhOZGs5RVdXcGhXRTU2WkZkV2FtSXlNWFJhVnpVd1RGUkZlRTVVWXpGUFZFRjVUMFo0ZFdSdFJubEpSMlJ6WWpKS2FHSkRRVGxKUnpGMldraFdjMXBUTld4bFNFSjJZMjVTZWtsRU1HZGtTR3gzV2xjNWJVbElaSEJpYlZKMlpIbEJhRkJUUVc1a1Z6VnJXbGRhY0dKdFZtdEtlVUZ0U21sQ00yRlhOV3RpTTJOMVZGZEdNR0ZEUVRsUVUwSk9XVmhTYjFoSE5HZEpSRGhuWkRKc2RWcEhPVE5KUkc5blpFaHNkMXBYT1cxSlNFNXNZa2RaWjBsVU1HZEtNMVoxV2tkV2JXRlhOV3hhUTJOblNtbFpaMk15Vm5OYWFUVk9XVmhTYjBsRU1EbEpSVEZvWkVkbloxQjVRbnBhVjNodFNVUnZaMUp1Vm5WWk0xSndZakkwYjBvelNteGtTRlo1WW1sQ01HRkhiSHBLZVd0dlMxUjBZMkp0YkcxTFNGSTFZMGRXZGxwcFFtWllNbU5uVUZRd1owb3lOVEZpVjBwc1kybGpjRmd4T1c1SlJEQm5Xako0ZGxsdFJuTlBlVUYyVEhsQ2JHTXllSEJpYmxGMFdrZHNlbGxYU25OYVV6RnpZVmMxYkVsSE5YWk1XRloxV2tkV2JWaEhOV05pYkhoMVRIbHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4V0VjMFowdHBiMmRXTUZaRFZVVkdSRk41UWtkVU1EbFZVbFpLWTJKcFFYRkxhVUYxVERNMGRsa3lPWGxhVXpGeFkzazVjMkZYU25sWldFbzFUREl4ZGxwSVZuTmFXRTEyV0RKa2MySXlTbWhpUXpWeFl6RjRkVWxEYjNGSlJ6RjJXa2hXYzFwVFFuQmFRMEU1U1VSa1kySnBRWEZMYVVKMFlqSlNNV0pIVldkWk1tZ3hZbTEwZWtsRU1HZE5SbmgxU1VOdmNVeDVTWE5KYmxwb1kybENhbUl6U214SlJEQm5ZbGM1YTJSWGVHeE1iVlkwWTBjNWVXUklUV2RRVTBJM1pHMVdlV015YkhaaWFtOW5TbnBKZFU1RE5IZEtNekEzV0VjMWNGcHBhREJsV0VKc1lqSlpaMWd4T1d4SlJEQTVTVU5rZFdSWE1XbGFXRWx1UzFZNVpscFRRVGxKUjA1MlkyMVZOMGxET0haSlIxWjZZa2RzZFdSRE1XdGhXRTVvV1cxNGJFeFhlSEJpYlZWblltMDRkR1JYTld0YVYxcGpZbXg0ZFZoSE5IWkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwY0dOaWFVRnhTMmxDV0ZKVlNsRlJWVTVNU1VWYVVGUXhVa1pWYkhoMVNVTnZjVWxETkhabWFUbHFZak5LYkV4WGNIcE1Nbmh3V1c1S2FHTnVhM1ppVnpsclpGZDRiR041T1daWk1qbDVXbE0xY1dNeGVIVkpRMjl4U1VjeGRscElWbk5hVTBKd1drTkJPVWxFYUdOaWFVRnhTMmxDZEdJeVVqRmlSMVZuV1RKb01XSnRkSHBKUkRCblRVWjRkVWxEYjNGTWVVbHpTV2s0ZGtsSE9YZGtSMngyWW0xR2MwbERPR2RqTW14MFkwZDRiRWxIVG5aaWJsSnNaVWhSWjFsdGJIVmFSMngxV2pGNGRXUnRSbmxKUjBaSFpGYzFhbVJIYkhaaWFVRTVTVWhLYkdOWVZuQmpiVlZ2U25rMGRsZ3lSWFJhYmxaMVdUTlNjR0l5Tkc1TFZIUmpZbTB4ZGxwSVZuTmFVelZzWlVoQ2RtTnVVbnBKUkRCbldtNVdkVmt6VW5CaU1qUnZXbTAwYzBsSVVtOVpXRkZ6U1VkNGJHSnRaREJoUTJ3M1dFYzBaMGxIUmtka1Z6VnFaRWRzZG1KcGFHMWlhV3MzV0VjMFowbEhiRzFMU0ZKdldWaFJaMUJVTURsSlNGWjFXa2RXYldGWE5XeGFRMng1V2xoU01XTnROR2RhYlRRM1dFYzBaMGxJVGpOaFdGSnFZVU5vYzFwWE5XNWtSMmR3WlRGNGRVbERRV2RKUjA1b1l6SlZaMDFVYjJkamJWWXdaRmhLZFVsSFdqRmliVTR3WVZjNWRVdEhSWEJsTVhoMVNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSFduVk1iVTVvWWtkM2IyUkhhR2hrUTNkbldWTnJOMWhITkdkSlEwRm5abFIwWTJKcFFXZEpRMEpxV1ZoT2JFbEVTVFpKU0Vwc1pFaFdlV0pwUW0xa1Z6VnFaRWRzZG1KcGFHaE1RMEpwUzFoMFkySnBRV2RKUTBGblNVaEtiR1JJVm5saWFVSnRZbWsxYWxsWGVITkxTRkp2V1ZoUmMwbEhSWE5KUjBsd1R6RjRkVWxEUVdkSlNEQTNXRWMwWjBsRFFXZFpNa1o2V2xOQmVrOXBRbmxhV0ZJeFkyMDBaMXB1Vm5WWk0xSndZakkwYjFsVGQyZFphWGRuV1hsc04xaEhOR2RKUTBGblNVTkNlVnBZVWpGamJUUm5XbTAwZFZreVJuTmlRMmd3WVVkR01FeERRbWhNUTBKcFRFTkNha3RVZEdOaWFVRm5TVU5DT1U4eGVIVkpRMEk1V0VjMFowbElTbXhrU0ZaNVltbENiV1JYTldwa1IyeDJZbWxuZGt0cFFYVk1hVFZvWTIxa2VrbERiM1pMV0hSalltbEJaMGxEUW5sYVdGSXhZMjAwWjFwdE5IVlpXRUozWWtocmIyUkhhR2hrUTNkbldWaEtibVJYTVd4aWJsSjZTMVIwWTJKcFFXZG1WSFJqWW00d04xaEhOV05pYkhoMVRIbHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4V0VjMFowdHBiMmRXTUZaRFZVVkdSRk41UWtkVU1EbFZVbFpLWTJKcFFYRkxhVUYxVERNMGRsa3lPWGxhVXpGeFkzazVjMkZYU25sWldFbzFUREl4ZGxwSVZuTmFXRTEyV0RKT01HVkROWEZqTVhoMVNVTnZjVWxITVhaYVNGWnpXbE5DY0ZwRFFUbEpSR3hqWW1sQmNVdHBRblJpTWxJeFlrZFZaMWt5YURGaWJYUjZTVVF3WjAxR2VIVkpRMjl4VEhsSmMwbHRNWFphU0ZaeldsTTFiR1ZJUW5aamJsSjZTVVF3WjFwdVZuVlpNMUp3WWpJMGIyRllVWEJsTVhoMVNVTkNjRnBwYURCbFdFSnNZakpaWjJGWVVXZEpWREJuU2pKYU1XSnRUakJoVnpsMVNubHNNR0ZJU25aa2VVSlZaVmhDYkZKWVNubGlNMGx2WVZoUlowdDVRVzVKUjJ4NlNVYzFkbVJEUW1oSlIxb3hZbTFPTUdGWE9YVkpVMk53VHpGNGRVbERRbmxhV0ZJeFkyMDBaMkZZVVRkWVJ6VTVUekY0ZFZoSE5XTmlhVGh4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGJIaDFTVU52Y1VsR1pFWlJiRUpDVVRCeloxSnJPVkJXUlZaVFdFYzBaMHRwYjJkTWFUa3JUREpPZG1OdFZYUmhiazEyWWtkc2FXTnRSbmxsVXpsMFlqSlNNV0pIVm5wTU1UbG9URmRhTVdKdFRqQmhWemwxVEcxd2VsaEhOR2RMYVc5bllsYzVhMlJYZUd4SlIyeHJTVVF3WjAxVVFtTmlhVUZ4UzJsQ2RHSXlVakZpUjFWbldUSm9NV0p0ZEhwSlJEQm5UVVo0ZFVsRGIzRk1lVWx6U1c1YWFHTnBRbXRWUTBGblNVTkJaMGxEUVdkSlJEQm5ZMjFXZUdSWGJIbGFVMmR1VEdrNVptSXlTbkZhVjA0d1RGZFNkMHA1YkdOaWFVRm5URU5DYW1OdFZtaGtSMVpGV2xoT2FrbEVNR2RqYlZaNFpGZHNlVnBUWjI1TWFUbG1ZMGhLZG1OSFZubGtTR3QwV2tkV2VsbDVZM0JQTVhoMVlsYzVhMlJYZUd4TWJWWTBZMGM1ZVdSSVRXZFFVMEo1V2xoR01XRllTbXhMUTJOMVRERTVhMXBZVG1wamJXeDNaRWM1ZVdONVkzQkpSRGhuV201V2RWa3pVbkJpTWpSdllqSktjVnBYVGpCTVEwSnlXbGhyYzBsSVdtaGlTRlpzUzFoMFkySnBRV2RqYlZZd1pGaEtkVWxIVWxGTWJWbHZZakpLY1ZwWFRqQk1RMEp5V2xocmMwbEhUbmxhVjBZd1dsVlNiR015VFc5TlUzZG5aRzFHYzJSWFZYQkxWSFJqWW00d1owOXBRbTFrVnpWcVpFZHNkbUpwYUhaWmJYQnNXVE5SYzBsSGRHeGxVM2RuWkcxR2MyUlhWWEJsTVhoMVNVTkNkbGx0Y0d4Wk0xSmlZVEpXTlZoVFFUbEpTRnBvWWtoV2JFOHhlSFZKUTBKNVdsaFNNV050TkdkaU1rcHhXbGRPTUU4eGVIVm1WSFJqWW14NGRWaEhOSFpMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGNHTmlhVUZ4UzJsQ1dGSlZTbEZSVlU1TVNVVmFVRlF4VWtaVmJIaDFTVU52Y1VsRE5IWm1hVGxxWWpOS2JFeFhjSHBNTW5od1dXNUthR051YTNaaVZ6bHJaRmQ0YkdONU9XWmhSMnhyV2xNMWNXTXhlSFZKUTI5eFNVY3hkbHBJVm5OYVUwSndXa05CT1VsRVJYaFlSelJuUzJsdloySlhPV3RrVjNoc1NVZE9iMlJYTlhKamVVRTVTVVJDWTJKcFFYRkxhVGhwVEVOS01sbFlTV2RaVnpWUVdXMXdiRmt6VVdkSlEwRm5TVU5CWjFCVFFubGFXRVl4WVZoS2JFdERZM1ZNTVRsb1lta3hkbGx0Y0d4Wk0xRnVTMVo0ZFVsRFFYTkpSV3hHVDBZNVJWUXdNV1pTUlZaSFUxVTFSa2xFTUdkamJWWjRaRmRzZVZwVFoyNU1hVGxtWVZkVk5FeFhVblppVXpGcldsZGFjR0p0Vlc1TFZuaDFTVU5CYzBsSVVuWlZTRXB3WWxkc01HRllXbXhKUTBGblNVUXdaMk50Vm5oa1YyeDVXbE5uYmt4cE9XWmtSemgwWTBoS2NHSlhiREJoV0Zwc1NubHNZMkpwUVdkTVEwSnJWVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRVGxKUlRscFlXMVdhbVJETld0YVYxcHdZbTFXVVdOdE9YZGFXRW93WlZSMFkySnNlSFZhV0doM1lqTktNR041TlcxSlJEQm5ZMjFXZUdSWGJIbGFVMmR1VEdrNVpscEhWbnBaTTBwd1kwaFNkbU51VFc1TFUwRXZTVVU1YVdGdFZtcGtRelZyV2xkYWNHSnRWbEZqYlRsM1dsaEtNR1ZUUVRaSlIxb3hZbTFPTUdGWE9YVkpSMUpzV20xc2RWcFdRbmxpTTBKc1kyNVNOVXRGT0hOSlJrRnpTVVZHTUdSSVNuQlpibFl3V2xoTmNHVXhlSFZKUTBKb1ltczVhV0Z0Vm1wa1EyaFFTMVIwWTJKcFFXZFZRMEU1U1VoU2RsVklTbkJpVjJ3d1lWaGFiRXRHUVhOSlNGSjVaRmRWY0U4eGVIVkpRMEpvWW1zNWFXRnRWbXBrUTJoQ1pFaFNlV0ZYU2pGa1IxWjZTMVIwWTJKcFFXZGhWMWx2VTFWVk5GZ3dVbEJVVmpsRlVsVmFTbFJyVlhCa1NFbzFTVWgwWTJKcFFXZEpRMEo1V2xoU01XTnROR2RhUmtGdlZIbDNaMVZEZDJkUldGSXdZMjFzYVdSWVVteGplV3MzV0VjMFowbElNR2RaTWtZd1dUSm5iMXBUYkRkSlF6aHhTVWRXZEdOSVVqVkpRMjkyU1VneFkySnBRV2RoVjFsdlNqSmtiR1JEWTJkaFZ6Um5VVmhTTUdOdGJHbGtXRkpzWTNsQ09HWkRRVzVqTWxZd1NubENjR0pwUWtKa1NGSjVZVmRLTVdSSFZucExXRkp2WTIwNU0wbEdValZqUjFaR1kyNUtkbU5wWjI1UlYwNXFXbGhPZW1JelNucEpSelYyWkVOQ2VtUllRbmRpTTBvd1dsZFJhRXA1YXpkWVJ6Um5TVWRzYlV0RFpESlpWM2d4V2xOaloyRlhOR2RSV0ZJd1kyMXNhV1JZVW14amVXeFFWekZDWkVsRU1HZFJXRkl3WTIxc2FXUllVbXhqZVRVeVdWZDRNVnBVZEdOaWFVRm5ZMjFXTUdSWVNuVkpSVGczV0VjMU9VOHhlSFZZUnpWalltazRjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJ4NGRVbERiM0ZKUm1SR1VXeENRbEV3YzJkU2F6bFFWa1ZXVTFoSE5HZExhVzluVEdrNUswd3lUblpqYlZWMFlXNU5kbUpIYkdsamJVWjVaVk01ZEdJeVVqRmlSMVo2VERFNWRsbHRjR3haTTFGMFdraEJkV0Z1VG1OaWFVRnhTMmxDZEdJeVVqRmlSMVZuWVZkUloxQlRRWGhOYkhoMVNVTnZjVWxITVhaYVNGWnpXbE5DYW1GSVZuVmhNMDFuVUZOQmQxaEhOR2RMYVc5MlNXbDNhV1J0Um5sSlIyeDZWREpLY1ZwWFRqQkpSREJuWTIxV2VHUlhiSGxhVTJkdVRHazVabUZZVFhSaU1rcHhXbGRPTUVwNWF6ZFlSelYwWWpKU01XSkhWWFZhV0doM1lqTktNR041UVRsSlIxb3hZbTFPTUdGWE9YVkxSMnd3UzFoMFkySnBRV2RoVjFsdlNWZHNlbFF5U25GYVYwNHdTMGRzTUV0VGJEQmhTRXAyWkhsQ1ZXVllRbXhTV0VwNVlqTkpiMkZZVVdkTGVVRnVTVWRzZWtsSE5YWmtRMEpvWW1sQ2RsbHRjR3haTTFGb1NubHJOMWhITkdkSlNFcHNaRWhXZVdKcFFuQmtSSFJqWW00d04xaEhOV05pYkhoMVRIbHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4V0VjMFowdHBiMmRXTUZaRFZVVkdSRk41UWtkVU1EbFZVbFpLWTJKcFFYRkxhVUYxVERNMGRsa3lPWGxhVXpGeFkzazVjMkZYU25sWldFbzFUREl4ZGxwSVZuTmFXRTEyV0RKR2RVeFhPV2xoYlZacVpFTTFjV014ZUhWSlEyOXhTVWN4ZGxwSVZuTmFVMEp3V2tOQk9VbEVSWHBZUnpSblMybHZaMkpYT1d0a1YzaHNTVWRPYjJSWE5YSmplVUU1U1VSQ1kySnBRWEZMYVRocFRFTktkR0l5VWpGaVIxVjFXbGhvZDJJelNqQmplVUU1U1VkYU1XSnRUakJoVnpsMVMwZHNNRXRZZEdOaWFVRm5ZMjFXTUdSWVNuVkpTRkkxWTBkV2RscHBRbkJrUTBFNVVGUXdaMG95T1dsaGJWWnFaRU5qWjFCNVFuQmtRMEZvVUZRd1oySnVWbk5pUTBFMlNVaFNOV05IVm5aYWFVSndaRU5CT1ZCVU1HZEtNbG94WW0xT01HRlhPWFZLZW5SalltNHdOMWhITldOaWJIaDFUSGx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFdFYzBaMHRwYjJkV01GWkRWVVZHUkZONVFrZFVNRGxWVWxaS1kySnBRWEZMYVVGMVRETTBkbGt5T1hsYVV6RnhZM2s1YzJGWFNubFpXRW8xVERJeGRscElWbk5hV0UxMldESnNla3hYT1dsaGJWWnFaRU0xY1dNeGVIVkpRMjl4U1VjeGRscElWbk5hVTBKd1drTkJPVWxFUlRCWVJ6Um5TMmx2WjJKWE9XdGtWM2hzU1VkT2IyUlhOWEpqZVVFNVNVUkNZMkpwUVhGTGFUaHBURU5LZEdJeVVqRmlSMVYxV2xob2QySXpTakJqZVVFNVNVTkdlVnBZUmpGaFdFcHNTME5qZFV3eE9XdGFXRTVxWTIxc2QyUkhPWGxqZVdOd1NVTlpiVWxEUm5sYVdFWXhZVmhLYkV0RFkzVk1NVGx0V1Zkc2MyTjVZM0JMUjFveFltMU9NR0ZYT1hWTFEydzNXRWMwWjBsSVNteGtTRlo1WW1sQ1VGbHRjR3haTTFGMVdrZFdiV0ZYTld4VlNFcDJZMGRXZVdSSWEyOWpiVlo0WkZkc2VWcFRaMjVNYVRsbVdrYzVkRXhYVG5sYVYwWXdXbE5qY0V0RFpHdGhXRmx1UzFOM1owb3lSVzVNUTBJM1dqSldNRTlwUW0xa1Z6VnFaRWRzZG1KcFozQmxlVUo1V2xoU01XTnROR2RPZW5OblpsZ3djRXh0UldkSlZEQm5UbnAwWTJKdU1IQlBNWGgxV0VjMVkySnBPSEZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0c2VIVkpRMjl4U1Vaa1JsRnNRa0pSTUhOblVtczVVRlpGVmxOWVJ6Um5TMmx2WjB4cE9TdE1NazUyWTIxVmRHRnVUWFppUjJ4cFkyMUdlV1ZUT1hSaU1sSXhZa2RXZWt3eE9YQmFWR2QwV2tjNWRFeFhVbXhhYld4MVdsTTFjV014ZUhWSlEyOXhTVWN4ZGxwSVZuTmFVMEp3V2tOQk9VbEVSVEZZUnpSblMybHZaMkpYT1d0a1YzaHNTVWRPYjJSWE5YSmplVUU1U1VSQ1kySnBRWEZMYVRocFRFTkpka3g1UWxWaFIwWjFZWGxrZWtsRmJFWlBRMEp0WWpOSloyRkhiSHBKUjFveFltMDFOVWxIVW14YWJXeDFXbFpDZVdJelFteGpibEkxV0VjMWRHSXlVakZpUjFWMVdsaG9kMkl6U2pCamVVRTVTVU5HZVZwWVJqRmhXRXBzUzBOamRVd3hPVzFaVjJ4elkzbGpjRXRIV2pGaWJVNHdZVmM1ZFV0RGJEZFlSelJuU1VoS2JHUklWbmxpYVVKUVdXMXdiRmt6VVhWYVIxWnRZVmMxYkZWSVNuWmpSMVo1WkVocmIyVXpNSE5KUTJSb1NubDNaMlV5Wkd4a1JHOW5XbTVXZFZrelVuQmlNalJ2UzFoeloyTnRWakJrV0VwMVNVUmpOMGxJTVRsTFV6Vm9TVU5GT1VsRVl6ZFlSelU1UzFSMFkySnNlSFZZUnpSMlMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhWEJqWW1sQmNVdHBRbGhTVlVwUlVWVk9URWxGV2xCVU1WSkdWV3g0ZFVsRGIzRkpRelIyWm1rNWFtSXpTbXhNVjNCNlRESjRjRmx1U21oamJtdDJZbGM1YTJSWGVHeGplVGxtV2tkV2Vsa3pTbkJqU0ZKMlkyNU5kV0Z1VG1OaWFVRnhTMmxDZEdJeVVqRmlSMVZuWVZkUloxQlRRWGhPYkhoMVNVTnZjVWxITVhaYVNGWnpXbE5DYW1GSVZuVmhNMDFuVUZOQmQxaEhOR2RMYVc5MlNXbDNhV0pYT1d0a1YzaHNURzFXTkdOSE9YbGtTRTFuVUZOQ2JXUlhOV3BrUjJ4MlltbG9iR1ZIVm1wTFdIUmpZbWxCWjJSSVNqVkpTSFJqWW1sQlowbERRbmxhV0ZJeFkyMDBaMGxUUm14bFIxWnFTME5yTjFoSE5HZEpTREJuV1RKR01Ga3laMjlhVTJ3M1dFYzBaMGxEUVdkamJWWXdaRmhLZFVsSVVubGtWMVUzV0VjMFowbElNV05pYmpBM1dFYzFZMkpzZUhWTWVXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZZUnpSblMybHZaMVl3VmtOVlJVWkVVM2xDUjFRd09WVlNWa3BqWW1sQmNVdHBRWFZNTXpSMldUSTVlVnBUTVhGamVUbHpZVmRLZVZsWVNqVk1NakYyV2toV2MxcFlUWFpZTWxwb1lWZDRla3h0Y0hwWVJ6Um5TMmx2WjJKWE9XdGtWM2hzU1Vkc2EwbEVNR2ROVkdSalltbEJjVXRwUW5SaU1sSXhZa2RWWjFreWFERmliWFI2U1VRd1owMUdlSFZKUTI5eFRIbEpjMGx1V21oamFVSndZekE1YVdGdFZtcGtRMEU1U1VoS2JHTllWbkJqYlZWdlNuazBkbGd5YkhwTVZ6bHBZVzFXYW1SRFkzQllSelJuU1VOM1oxcEhPV3BrVnpGc1ltNVJaMUJUUW5sYVdFWXhZVmhLYkV0RFkzVk1NVGx1WWtjNWFWbFhkMjVMVXpWcllqSk9NV0pYVm5Wa1JuaDFTVU5CZGt4NVFuQmlhVUoyWWtkUloxTlZWV2RrU0d4M1dsYzViVWxIVW5aWk0xWjBXbGMxTUV4dFRubGFWMFl3V2xWV2MxcFhNV3hpYmxGbllWaE5aMG95T1dsaGJWWnFaRU5rWTJKcFFXZE1RMEp3WTNsQk9VbEhiSHBVTWtweFdsZE9NRXRIVW5aWk0xWjBXbGMxTUV0VFFXMUthVUp3WXpBNWFXRnRWbXBrUTJocllqSk9NV0pYVm5Wa1F6VnFZMjFXYUdSSFZrWmlSMVowV2xjMU1FdFVkR05pYlRGMldraFdjMXBUTld4bFNFSjJZMjVTZWtsRU1HZGFibFoxV1ROU2NHSXlORzloV0ZGd1pURjRkVWxEUW5sYVdGSXhZMjAwWjJGWVRXZFFlVUpyWWpKT01XSlhWblZrUXpWcVkyMVdhR1JIVmtaaVIxWjBXbGMxTUV0SGJEQkxVMEUyU1VoME9VOHhlSFZtVkhSallteDRkVmhITkhaTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBjR05pYVVGeFMybENXRkpWU2xGUlZVNU1TVVZhVUZReFVrWlZiSGgxU1VOdmNVbEROSFptYVRscVlqTktiRXhYY0hwTU1uaHdXVzVLYUdOdWEzWmlWemxyWkZkNGJHTjVPV1phUnpsMFRGZE9lVnBYUmpCYVV6VnhZekY0ZFVsRGIzRkpSekYyV2toV2MxcFRRbkJhUTBFNVNVUkZORmhITkdkTGFXOW5ZbGM1YTJSWGVHeEpSMDV2WkZjMWNtTjVRVGxKUkVKalltbEJjVXRwT0dsTVEwbDJUSGxCTTB4cVJYVk5VMEpWWWpGQ2VXRlhNWEJrUjJ3eVdsTm9jR0p1UWpGa1EwSmlURU5DVVdOdFZtMWFXRXA1V2xkU1ZXVllRbXhZVTJ4alltNWFhR05wUW5Cak1EbHBZVzFXYW1SRFFUbEpTRXBzWTFoV2NHTnRWVzlLZVRSMldESnNla3hYT1dsaGJWWnFaRU5qY0U4eGVIVk1lVGhuWVZjMWVtUkhWbWhhUTBKMldtbENNR0ZIVldkU1ZrMHlTVWhPZDFwWFRXZGtiVlo1WXpKc2RtSnBkMmRrTWxWbldrZHNhMkpwWkRCSlIyeDBZMGQ0YkdKWFZuVmtRMEpCVVVoU2RsVklTbkJpVjJ3d1lWaGFiRWxIVG1oak1sWmpZbWs0ZGtsSFJuVmFRMEl3WVVkVloyTXlWbXBpTWpWclNVZEdlVm96Vm5SYVZ6VXdTVU13WjFwdGVHaGFlVUYwU1VoQ2VWcFhXbXhqYmtwc1drTkNNR1ZZUW14SlIyeDZTVWRGWjJNelVubGhWelZ1V0VjMWRHSXlVakZpUjFWMVdsaG9kMkl6U2pCamVVRTVTVWRhTVdKdFRqQmhWemwxUzBkc01FeERRbFJMV0hSalltbEJaMkZYV1c5SlYyeDZWREpLY1ZwWFRqQkxSMnd3UzFOc2VWcFlVakZqYlRSbllWaFJOMWhITkdkSlNGcG9ZMmxDYldKcGQyZGtiVVp6VHpGNGRVbERRbkJhYVdoVVNVTlpiVWxJVWpWalIxWjJXbWxCYjFwdE5HZFFVMEp3WkVNMU1HSXhUakJqYld4MVdubHJaMUJVTUdkS01sb3hZbTFPTUdGWE9YVktlVUZ0U21sQmFHRllUbEJaYlhCc1dUTlJiMlJ0Um5OSlJEQm5XbTAwZFZreVJuTmlRMmh3WkVOcmNFdFlTbXhrU0ZaNVltbENNbGxYZHpkWVJ6Um5TVWRzYlV0SVVqVmpSMVoyV21sQmIxcHROR2RRVTBKd1pFTTFNbGxYZURGYVZUbHRTMU5CT1ZCVFFXNWFibFoxV1ROU2NHSXlORzVKUTFsdFNVTkdjR013T1dsaGJWWnFaRU5vTWxsWGQyZFFVMEp0WW1rMWFsbFhlSE5MUjJ3d1MxTnJjR050VmpCa1dFcDFTVWhhYUdKRWRHTmlhVUZuWVZkWmIwbFdUV2RLYVZsblpFaHNkMXBYT1cxSlEyaHRZbWxCT1VsSGJEQk1ibEoyVlROU2VXRlhOVzVMVTBFNVVGTkJibHB1Vm5WWk0xSndZakkwYmtsRFdXMUpRMFp3WXpBNWFXRnRWbXBrUTJneVdWZDNaMUJUUW0xaWFUVnFXVmQ0YzB0SGJEQkxVMnR3WTIxV01HUllTblZKU0Zwb1lrUjBZMkpwUVdka1IyaDVZak5qWjFaSWJIZGFWVlo1WTIwNWVVdEdkMmxSTWtaMVNqTlJaMWt5T1hWa2JWWjVaRU5DZGxsdGNHeFpNMUZuWkVjNFoyTklTbkJpVjJ3d1lWaGFiRWxJV21oaVNGWnNXRU5KY0U4eGVIVm1WSFJqWW14NGRWaEhOSFpMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGNHTmlhVUZ4UzJsQ1dGSlZTbEZSVlU1TVNVVmFVRlF4VWtaVmJIaDFTVU52Y1VsRE5IWm1hVGxxWWpOS2JFeFhjSHBNTW5od1dXNUthR051YTNaaVZ6bHJaRmQ0YkdONU9XWmtSemgwWTBoS2NHSlhiREJoV0Zwc1RHMXdlbGhITkdkTGFXOW5ZbGM1YTJSWGVHeEpSMnhyU1VRd1owMVViR05pYVVGeFMybENkR0l5VWpGaVIxVm5XVEpvTVdKdGRIcEpSREJuVFVaNGRVbERiM0ZNZVVselNXMHhkbHBJVm5OYVV6VnNaVWhDZG1OdVVucEpSREJuV201V2RWa3pVbkJpTWpSdldXMXNNR0pYUm5kTVEwSXlXVmQ0TVZwVGJEZFlSelJuU1VoS2JHUklWbmxpYVVJM1dFYzBaMGxEUVdkYVZ6VXhZbGRXZVZsWFNuTmFVMEZuVDJsQmFFdEhTbkJrUnpGb1kwTkJiVWxFUlhCTVJuaDFTVU5CWjBsSFRuWmliVnB3V2pOV2VWbFhTbk5hVkc5blNWTm9hV0ZZVW5SWldFRm5TbWxCZVV0VGVHTmlhVUZuU1VOQ00yTnRiREJaVjBweldsTkJaMGxEUVRaSlEwVnZXVzFzTUdKWFJuZEpRMWxuVGtOcmMxaEhOR2RKUTBGblpHMUdjMlJYVldkSlEwRm5TVU5CWjA5cFFqSlpWM2d4V2xaNGRVbERRamxQTVhoMVpsUjBZMkpzZUhWWVJ6UjJTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVhCalltbEJjVXRwUWxoU1ZVcFJVVlZPVEVsRldsQlVNVkpHVld4NGRVbERiM0ZKUXpSMlptazVhbUl6U214TVYzQjZUREo0Y0ZsdVNtaGpibXQyWWxjNWEyUlhlR3hqZVRsbVkwaEtkbU5IVm5sa1NHdDBXa2RXZWxsNU5YRmpNWGgxU1VOdmNVbEhNWFphU0ZaeldsTkNjRnBEUVRsSlJFbDNXRWMwWjB0cGIyZGlWemxyWkZkNGJFbEhUbTlrVnpWeVkzbEJPVWxFUW1OaWFVRnhTMms0YVZoVGQybGpNamt4WTIxT2JGVnRPWFprUTBrMlNXbEtPVnh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMM04wWVdOckxXVnpNakF4TlMxdGIyUjFiR1Z6TDJScGMzUXZjM1JoWTJzdFpYTXlNREUxTFcxdlpIVnNaWE11YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeE1qSmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW1sdGNHOXlkQ0I3SUZCeWIzQmxjblI1UVdOalpYTnpiM0lnZlNCbWNtOXRJQ2N1TDNCeWIzQmxjblI1TFdGalkyVnpjMjl5TG1wekp6dGNjbHh1YVcxd2IzSjBJSHNnYVhOUWNtbHRhWFJwZG1VZ2ZTQm1jbTl0SUNjdUxpOTFkR2xzY3k1cWN5YzdYSEpjYmx4eVhHNWpiMjV6ZENCTVNWTlVSVTVGVWxOZlFsbGZRVU5EUlZOVFQxSWdQU0J1WlhjZ1RXRndLQ2s3WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHpkR1Z1WlhJZ2UxeHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iMkpxTENCd2NtOXdUbUZ0WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnNaV04wYVc5dVNYUmxiWE1nUFNCdVpYY2dVMlYwS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0dWeWRIbEJZMk5sYzNOdmNpQTlJRzVsZHlCUWNtOXdaWEowZVVGalkyVnpjMjl5S0c5aWFpd2djSEp2Y0U1aGJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0dWeWRIbEJZMk5sYzNOdmNpNXpaWFIwWlhKRFlXeHNZbUZqYXlodVpYZFdZV3gxWlNBOVBpQjBhR2x6TG01bGQxWmhiSFZsVTJWMEtHNWxkMVpoYkhWbEtTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYzNSaGRHbGpJSGRoZEdOb1VISnZjR1Z5ZEhrb2IySnFMQ0J3Y205d1RtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WVhCUFltbzdYSEpjYmlBZ0lDQWdJQ0FnYVdZb1RFbFRWRVZPUlZKVFgwSlpYMEZEUTBWVFUwOVNMbWhoY3lodlltb3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY0U5aWFpQTlJRXhKVTFSRlRrVlNVMTlDV1Y5QlEwTkZVMU5QVWk1blpYUW9iMkpxS1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYQlBZbW9nUFNCN2ZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1RFbFRWRVZPUlZKVFgwSlpYMEZEUTBWVFUwOVNMbk5sZENodlltb3NJRzFoY0U5aWFpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlnaGJXRndUMkpxTG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCT1lXMWxLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhCUFltcGJjSEp2Y0U1aGJXVmRJRDBnYm1WM0lFeHBjM1JsYm1WeUtHOWlhaXdnY0hKdmNFNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxaGNFOWlhbHR3Y205d1RtRnRaVjA3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lHRmtaRWhoYm1Sc1pYSW9jMlZzWldOMGFXOXVTWFJsYlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnNaV04wYVc5dVNYUmxiWE11WVdSa0tITmxiR1ZqZEdsdmJrbDBaVzBwTzF4eVhHNGdJQ0FnSUNBZ0lITmxiR1ZqZEdsdmJrbDBaVzB1Y0hKdmNHVnlkSGxCWTJObGMzTnZjbk11WVdSa0tIUm9hWE1wTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHNWxkMVpoYkhWbFUyVjBLRzVsZDFaaGJIVmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWW9JV2x6VUhKcGJXbDBhWFpsS0c1bGQxWmhiSFZsS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsWTJGc1kzVnNZWFJsS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Gd2NHeDVRMkZzYkdKaFkydHpLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1lYQndiSGxEWVd4c1ltRmphM01vS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXeGxZM1JwYjI1SmRHVnRjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSE5sYkdWamRHbHZia2wwWlcwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wYVc5dVNYUmxiUzV3Y205d1pYSjBlVUZ6YzJsbmJtVmtLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WallXeGpkV3hoZEdVb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0ozTm9iM1ZzWkNCeVpXTmhiR04xYkdGMFpTY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYzJWc1pXTjBhVzl1U1hSbGJYTWdQU0JiWFR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkR2x2YmtsMFpXMXpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9jMlZzWldOMGFXOXVTWFJsYlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JwYjI1SmRHVnRjeTV3ZFhOb0tITmxiR1ZqZEdsdmJrbDBaVzBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnpaV3hsWTNScGIyNUpkR1Z0Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hObGJHVmpkR2x2YmtsMFpXMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWldOMGFXOXVTWFJsYlM1eVpXMXZkbVZNYVhOMFpXNWxjbk1vS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCelpXeGxZM1JwYjI1SmRHVnRjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSE5sYkdWamRHbHZia2wwWlcwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wYVc5dVNYUmxiUzVwYm5OMFlXeHNUR2x6ZEdWdVpYSnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12YVc1MFpYSndjbVYwWVhScGIyNHZiR2x6ZEdWdVpYSXVhbk5jYmlBcUtpOGlMQ0pqYjI1emRDQlFVazlRUlZKVVdWOUJRME5GVTFOUFVsOU9RVTFGSUQwZ0ozZHlZWEJ3WldSV1lXeDFaU2M3WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISnZjR1Z5ZEhsQlkyTmxjM052Y2lCN1hISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHZZbW9zSUhCeWIzQk9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ellXWmxUMnhrUVdOalpYTnpiM0p6S0c5aWFpd2djSEp2Y0U1aGJXVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2WW1vdVgxOWtaV1pwYm1WSFpYUjBaWEpmWHlod2NtOXdUbUZ0WlN3Z0tHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb2NISnZjRTVoYldVZ1BUMDlJQ2R3Y205d0p5a2daR1ZpZFdkblpYSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1vN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjMXRRVWs5UVJWSlVXVjlCUTBORlUxTlBVbDlPUVUxRlhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3VZbWx1WkNoMGFHbHpLU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dleUF2S2lCR2FYSmxabTk0SUhKaGFYTmxjeUJtYjNJZ1FYSnlZWGt1YkdWdVozUm9JQ292SUgxY2NseHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1IyVjBkR1Z5SUQwZ2IySnFMbDlmYkc5dmEzVndSMlYwZEdWeVgxOG9jSEp2Y0U1aGJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hibVYzUjJWMGRHVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOb2NtOXRaU0J6YVd4bGJuUnNlU0JwWjI1dmNtVnpJRjlmWkdWbWFXNWxSMlYwZEdWeVgxOGdabTl5SUVGeWNtRjVMbXhsYm1kMGFGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVY0ZEdWeWJtRnNWbUZ5YVdGaWJHVnpLSE52YkhabGNpd2diblZzYkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUc5aWFpNWZYMlJsWm1sdVpWTmxkSFJsY2w5ZktIQnliM0JPWVcxbExDQW9ablZ1WTNScGIyNG9ibVYzVm1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGRIVnlibFpoYkhWbElEMGdkR2hwYzF0UVVrOVFSVkpVV1Y5QlEwTkZVMU5QVWw5T1FVMUZYU0E5SUc1bGQxWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmJtVjNWbUZzZFdVZ1ptOXlKeXdnYjJKcUxDQndjbTl3VG1GdFpTd2dibVYzVm1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGQnliM0JsY25SNVYybDBhQ2h1WlhkV1lXeDFaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWFIxY201V1lXeDFaVHRjY2x4dUlDQWdJQ0FnSUNCOUtTNWlhVzVrS0hSb2FYTXBLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCellXWmxUMnhrUVdOalpYTnpiM0p6S0c5aWFpd2djSEp2Y0U1aGJXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QjBZV3RsSUdWNGFYTjBhVzVuSUdkbGRIUmxjaXdnYVdZZ1pYaHBjM1JsYm5Rc0lHRnVaQ0JoYzNOcFoyNGdkRzljY2x4dUlDQWdJQ0FnSUNCMllYSWdaWGhwYzNScGJtZFRaWFIwWlhJZ1BTQnZZbW91WDE5c2IyOXJkWEJUWlhSMFpYSmZYeWh3Y205d1RtRnRaU2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0YVhOMGFXNW5SMlYwZEdWeUlEMGdiMkpxTGw5ZmJHOXZhM1Z3UjJWMGRHVnlYMThvY0hKdmNFNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsZUdsemRHbHVaMGRsZEhSbGNpQW1KaUJsZUdsemRHbHVaMU5sZEhSbGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlpHVm1hVzVsUjJWMGRHVnlYMThvVUZKUFVFVlNWRmxmUVVORFJWTlRUMUpmVGtGTlJTd2daWGhwYzNScGJtZEhaWFIwWlhJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlmWkdWbWFXNWxVMlYwZEdWeVgxOG9VRkpQVUVWU1ZGbGZRVU5EUlZOVFQxSmZUa0ZOUlN3Z1pYaHBjM1JwYm1kVFpYUjBaWElwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdZWE56YVdkdUlHOXNaQ0IyWVd4MVpTQjBieUJ1WlhjZ2MyeHZkRnh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haWGhwYzNScGJtZEhaWFIwWlhJZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lXVjRhWE4wYVc1blUyVjBkR1Z5SUNZbVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5aWFpNW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdUbUZ0WlNsY2NseHVJQ0FnSUNBZ0lDQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwYzF0UVVrOVFSVkpVV1Y5QlEwTkZVMU5QVWw5T1FVMUZYU0E5SUc5aWFsdHdjbTl3VG1GdFpWMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lITmxkSFJsY2tOaGJHeGlZV05yS0dOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1allXeHNZbUZqYTBadmNsTmxkRkJ5YjNCbGNuUjVJRDBnWTJGc2JHSmhZMnM3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2MyVjBVSEp2Y0dWeWRIbFhhWFJvS0c1bGQxWmhiSFZsS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1allXeHNZbUZqYTBadmNsTmxkRkJ5YjNCbGNuUjVJQ1ltSUhSb2FYTXVZMkZzYkdKaFkydEdiM0pUWlhSUWNtOXdaWEowZVNodVpYZFdZV3gxWlNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZhVzUwWlhKd2NtVjBZWFJwYjI0dmNISnZjR1Z5ZEhrdFlXTmpaWE56YjNJdWFuTmNiaUFxS2k4aUxDSXZMeUJVVDBSUElIUm9hWE1nYVhNZ1lTQmpiM0I1SUdaeWIyMGdjbVZoWTNScGRtVWdiMkpxWldOMElIRjFaWEpwWlhNZ2NtVndiM05wZEc5eWVTQW9ibTkwSUdOdmJYQnNaWFJsYkhrZ1lXNTViVzl5WlNsY2NseHVMeThnVkU5RVR5QmxlSFJ5WVdOMElIUm9hWE1nYVc1MGJ5QnBkSE1nYjNkdUlHeHBZbkpoY25sY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ3ZFhOb1NXWk5hWE56YVc1bktHRnljbUY1TENCcGRHVnRLU0I3WEhKY2JpQWdJQ0F2THlCamFHVmpheUJtYjNJZ1lXeHlaV0ZrZVNCbGVHbHpkR2x1Wnk1Y2NseHVJQ0FnSUhaaGNpQmxlR2x6ZEhNZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUhaaGNpQnNaVzRnUFNCaGNuSmhlUzVzWlc1bmRHZzdYSEpjYmlBZ0lDQm1iM0lvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BYSEpjYmlBZ0lDQWdJQ0FnYVdZb1lYSnlZWGxiYVYwZ1BUMGdhWFJsYlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVHbHpkSE1nUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1pHOGdibTkwSUdGa1pDQmhiaUJoYkhKbFlXUjVJR1Y0YVhOMGFXNW5JR2wwWlcxY2NseHVJQ0FnSUdsbUlDZ2haWGhwYzNSektTQjdYSEpjYmlBZ0lDQWdJQ0FnWVhKeVlYa3VjSFZ6YUNocGRHVnRLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdkx5QnlaWFIxY200Z2RISjFaU0JwWmlCMGFHVWdaMmwyWlc0Z1pXeGxiV1Z1ZENCM1lYTWdjSFZ6YUdWa0xDQnZkR2hsY25kcGMyVWdabUZzYzJWY2NseHVJQ0FnSUhKbGRIVnliaUFoWlhocGMzUnpPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WdGIzWmxTV1pGZUdsemRHbHVaeWhoY25KaGVTd2dhWFJsYlNrZ2UxeHlYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdZWEp5WVhrdWFXNWtaWGhQWmlocGRHVnRLVHRjY2x4dUlDQWdJR2xtSUNocGJtUmxlQ0FoUFQwZ0xURXBJSHRjY2x4dUlDQWdJQ0FnSUNCaGNuSmhlUzV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPMXh5WEc0Z0lDQWdJQ0FnSUM4dklISmxkSFZ5YmlCMGNuVmxJR2xtSUhSb1pTQm5hWFpsYmlCbGJHVnRaVzUwSUhkaGN5QmhZM1IxWVd4c2VTQnlaVzF2ZG1Wa1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMUJ5YVcxcGRHbDJaU2hsYkdWdEtTQjdYSEpjYmlBZ0lDQjJZWElnWjJWMFZIbHdaU0E5SUdaMWJtTjBhVzl1S0dWc1pXMHBJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHVnNaVzBwTG5Oc2FXTmxLRGdzSUMweEtUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnZG1GeUlIUjVjR1VnUFNCblpYUlVlWEJsS0dWc1pXMHBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUIwZVhCbElEMDlQU0FuVTNSeWFXNW5KeUI4ZkZ4eVhHNGdJQ0FnSUNBZ0lIUjVjR1VnUFQwOUlDZFNaV2RGZUhBbklIeDhYSEpjYmlBZ0lDQWdJQ0FnZEhsd1pTQTlQVDBnSjBKdmIyeGxZVzRuSUh4OFhISmNiaUFnSUNBZ0lDQWdkSGx3WlNBOVBUMGdKMDUxYldKbGNpY2dmSHhjY2x4dUlDQWdJQ0FnSUNCMGVYQmxJRDA5UFNBblRuVnNiQ2NnZkh4Y2NseHVJQ0FnSUNBZ0lDQjBlWEJsSUQwOVBTQW5WVzVrWldacGJtVmtKenRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdsa1pXNTBhWFI1S0hncElIc2djbVYwZFhKdUlIZzdJSDFjY2x4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZkWFJwYkhNdWFuTmNiaUFxS2k4aUxDSmxlSEJ2Y25RZ1kyeGhjM01nUW1GelpVRmpkR2wyWlVWNGNISmxjM05wYjI0Z2UxeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNwY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCbWRXNWpJQ2hHZFc1amRHbHZiaWtnZEdobElHVjRjSEpsYzNOcGIyNGdkRzhnWW1VZ2IySnpaWEoyWldSY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ablZ1WXlrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktHWjFibU1wTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5WdVl5QTlJR1oxYm1NN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1c1lYTjBWbUZzZFdVZ1BTQjBhR2x6TG1kbGRFTjFjbkpsYm5SV1lXeDFaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTJGc2JHSmhZMnR6SUQwZ1cxMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQmhiR2xoYzJWeklIZHBkR2dnSjI1dmR5ZGNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHNxZlNCMGFHVWdZM1Z5Y21WdWRDQjJZV3gxWlNCdlppQjBhR1VnWlhod2NtVnpjMmx2Ymx4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCblpYUkRkWEp5Wlc1MFZtRnNkV1VvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm5WdVl5Z3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUc5dVEyaGhibWRsS0dOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1allXeHNZbUZqYTNNdWNIVnphQ2hqWVd4c1ltRmpheWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTm9aV05yUVc1a1RtOTBhV1o1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCamRYSnlaVzUwVm1Gc2RXVWdQU0IwYUdsekxtZGxkRU4xY25KbGJuUldZV3gxWlNncE8xeHlYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTXViR0Z6ZEZaaGJIVmxJRDA5UFNCamRYSnlaVzUwVm1Gc2RXVXBJSHNnY21WMGRYSnVPeUI5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCc1lYTjBWbUZzZFdVZ1BTQjBhR2x6TG14aGMzUldZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG14aGMzUldZV3gxWlNBOUlHTjFjbkpsYm5SV1lXeDFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dWIzUnBabmtvWTNWeWNtVnVkRlpoYkhWbExDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JXWVd4MVpWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHNXZkR2xtZVNndUxpNWhjbWR6S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1allXeHNZbUZqYTNNdVptOXlSV0ZqYUNoallXeHNZbUZqYXlBOVBpQmpZV3hzWW1GamF5Z3VMaTVoY21kektTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQlVUMFJQWEhKY2JpQWdJQ0FnS2lCc2FXdGxJR0VnWW1sdVpDQm1iM0lnUVVWNGNISmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBkR1Z0YzF4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCaGNIQnNlVTl1S0M0dUxtbDBaVzF6S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZE9iM1FnZVdWMElHbHRjR3hsYldWdWRHVmtKeWs3WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVKaGMyVkJZM1JwZG1WRmVIQnlaWE56YVc5dU8xeHlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5aVlYTmxMMkpoYzJVdFlXTjBhWFpsTFdWNGNISmxjM05wYjI1ekxtcHpYRzRnS2lvdklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9hY3RpdmUtZXhwcmVzc2lvbnMvZGlzdC9hY3RpdmUtZXhwcmVzc2lvbnMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwic3RhY2stZXMyMDE1LW1vZHVsZXNcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wic3RhY2stZXMyMDE1LW1vZHVsZXNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wic3RhY2stZXMyMDE1LW1vZHVsZXNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL1widXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgU3RhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9TdGFjaygpIHtcblx0ICAgICAgICAvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki8oMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTdGFjayk7XG5cdFxuXHQgICAgICAgIHRoaXMuYXJyID0gW107XG5cdCAgICB9XG5cdFxuXHQgICAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3RhY2ssIFt7XG5cdCAgICAgICAga2V5OiBcInB1c2hcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaChlbCkge1xuXHQgICAgICAgICAgICB0aGlzLmFyci5wdXNoKGVsKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInBvcFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3AoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYXJyLmxlbmd0aC0tO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwidG9wXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvcCgpIHtcblx0ICAgICAgICAgICAgLy8gVE9ETzogLmxhc3QoKSBub3QgZGVmaW5lZCBpbiBvbGRlciBub2RlIHZlcnNpb25zXG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLmFyci5sYXN0KCk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmFyclt0aGlzLmFyci5sZW5ndGggLSAxXTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcIndpdGhFbGVtZW50XCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdpdGhFbGVtZW50KGVsLCBjYWxsYmFjaywgY29udGV4dCkge1xuXHQgICAgICAgICAgICB0aGlzLnB1c2goZWwpO1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0KTtcblx0ICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgIHRoaXMucG9wKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdCAgICByZXR1cm4gU3RhY2s7XG5cdH0oKTtcblx0XG5cdC8qaXN0YW5idWwgaWdub3JlIG5leHQqL2V4cG9ydHMuZGVmYXVsdCA9IFN0YWNrO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuXHQgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdHZhciBfZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuXHQgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG5cdCAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcblx0ICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcblx0ICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuXHQgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcblx0ICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuXHQgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuXHQgIH07XG5cdH0oKTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg0KSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0dmFyICRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLk9iamVjdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXtcblx0ICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0Ly8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXygxNiksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IF9fd2VicGFja19yZXF1aXJlX18oMTIpLmZ9KTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBnbG9iYWwgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG5cdCAgLCBjb3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG5cdCAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdCAgLCBoaWRlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuXHQgICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cdFxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG5cdCAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcblx0ICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuXHQgICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG5cdCAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcblx0ICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuXHQgICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG5cdCAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG5cdCAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuXHQgICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG5cdCAgICAsIGtleSwgb3duLCBvdXQ7XG5cdCAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG5cdCAgZm9yKGtleSBpbiBzb3VyY2Upe1xuXHQgICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG5cdCAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuXHQgICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuXHQgICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcblx0ICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG5cdCAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcblx0ICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG5cdCAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuXHQgICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcblx0ICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG5cdCAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuXHQgICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuXHQgICAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBDKXtcblx0ICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcblx0ICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG5cdCAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuXHQgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcblx0ICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuXHQgICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgfTtcblx0ICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuXHQgICAgICByZXR1cm4gRjtcblx0ICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuXHQgICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuXHQgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG5cdCAgICBpZihJU19QUk9UTyl7XG5cdCAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcblx0ICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcblx0ICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHQvLyB0eXBlIGJpdG1hcFxuXHQkZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuXHQkZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuXHQkZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuXHQkZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG5cdCRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuXHQkZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcblx0JGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG5cdCRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcblx0bW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcblx0dmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG5cdCAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRpZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcblx0aWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcblx0dmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuXHQgIGFGdW5jdGlvbihmbik7XG5cdCAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcblx0ICBzd2l0Y2gobGVuZ3RoKXtcblx0ICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG5cdCAgICB9O1xuXHQgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuXHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG5cdCAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG5cdH0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKVxuXHQgICwgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHQgICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFxuXHRleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuXHQgIGFuT2JqZWN0KE8pO1xuXHQgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcblx0ICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuXHQgICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuXHQgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblx0ICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcblx0ICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG5cdCAgcmV0dXJuIE87XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMTYpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KShmdW5jdGlvbigpe1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX3JlcXVpcmVfXygxOCkoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5cdG1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMTcpKGZ1bmN0aW9uKCl7XG5cdCAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAxNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuICEhZXhlYygpO1xuXHQgIH0gY2F0Y2goZSl7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5kb2N1bWVudFxuXHQgIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuXHQgICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHQvLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuXHQvLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcblx0ICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcblx0ICB2YXIgZm4sIHZhbDtcblx0ICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdCAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuXHQgIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdCAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcblx0ICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcblx0ICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcblx0ICAgIHZhbHVlICAgICAgIDogdmFsdWVcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NBeU5tTmxPVE01TnprM01EZ3hNV0U0TWpNMk5pSXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM1JoWTJzdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyZHNiMkpoYkM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIzSmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMk4wZUM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aExXWjFibU4wYVc5dUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaHBaR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXVTRMV1J2YlMxa1pXWnBibVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptRnBiSE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkc5dExXTnlaV0YwWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXdjbWx0YVhScGRtVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjSEp2Y0dWeWRIa3RaR1Z6WXk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFFzVHp0QlExWkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWQ1FVRmxPMEZCUTJZN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzB0RGRFTnhRaXhMTzBGQlEycENMRGhEUVVGak8wRkJRVUU3TzBGQlExWXNZMEZCU3l4SFFVRk1MRWRCUVZjc1JVRkJXRHRCUVVOSU96czdPemhDUVVWSkxFVXNSVUZCU1R0QlFVTk1MR3RDUVVGTExFZEJRVXdzUTBGQlV5eEpRVUZVTEVOQlFXTXNSVUZCWkR0QlFVTklPenM3SzBKQlJVczdRVUZEUml4clFrRkJTeXhIUVVGTUxFTkJRVk1zVFVGQlZEdEJRVU5JT3pzN0swSkJSVXM3UVVGRFJqdEJRVU5CTzBGQlEwRXNiMEpCUVU4c1MwRkJTeXhIUVVGTUxFTkJRVk1zUzBGQlN5eEhRVUZNTEVOQlFWTXNUVUZCVkN4SFFVRnJRaXhEUVVFelFpeERRVUZRTzBGQlEwZzdPenR4UTBGRlZ5eEZMRVZCUVVrc1VTeEZRVUZWTEU4c1JVRkJVenRCUVVNdlFpeHJRa0ZCU3l4SlFVRk1MRU5CUVZVc1JVRkJWanRCUVVOQkxHbENRVUZKTzBGQlEwRXNNRUpCUVZNc1NVRkJWQ3hEUVVGakxFOUJRV1E3UVVGRFNDeGpRVVpFTEZOQlJWVTdRVUZEVGl4elFrRkJTeXhIUVVGTU8wRkJRMGc3UVVGRFNqczdPenM3TWtOQk1VSm5RaXhMT3pzN096czdRVU5CY2tJN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIT3pzN096czdRVU5TUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRU3gxUTBGQmMwTXNkVU5CUVhWRExHZENRVUZuUWpzN1FVRkZOMFk3UVVGRFFUdEJRVU5CTEc5Q1FVRnRRaXhyUWtGQmEwSTdRVUZEY2tNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVWQlFVTXNSenM3T3pzN08wRkRNVUpFTEcxQ1FVRnJRaXgxUkRzN096czdPMEZEUVd4Q08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSenM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTEhORlFVRjFSU3d3UTBGQk1FTXNSVHM3T3pzN08wRkRSbXBJTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h2UlVGQmJVVTdRVUZEYmtVN1FVRkRRU3h6UmtGQmNVWTdRVUZEY2tZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVmM3UVVGRFdDeFZRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEdkRVFVRXJRenRCUVVNdlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hsUVVGak8wRkJRMlFzWlVGQll6dEJRVU5rTEdWQlFXTTdRVUZEWkN4bFFVRmpPMEZCUTJRc1owSkJRV1U3UVVGRFppeG5Ra0ZCWlR0QlFVTm1MR2RDUVVGbE8wRkJRMllzYVVKQlFXZENPMEZCUTJoQ0xEQkNPenM3T3pzN1FVTTFSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkME5CUVhWRExHZERPenM3T3pzN1FVTklka01zT0VKQlFUWkNPMEZCUXpkQ0xITkRRVUZ4UXl4blF6czdPenM3TzBGRFJISkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1J6czdPenM3TzBGRGJrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVN4SE96czdPenM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhMRlZCUVZVN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTBwQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTkdRVHRCUVVOQkxITkZRVUZ6UlN4blFrRkJaMElzVlVGQlZTeEhRVUZITzBGQlEyNUhMRVZCUVVNc1JUczdPenM3TzBGRFJrUTdRVUZEUVR0QlFVTkJMR3REUVVGcFF5eFJRVUZSTEdkQ1FVRm5RaXhWUVVGVkxFZEJRVWM3UVVGRGRFVXNSVUZCUXl4Rk96czdPenM3UVVOSVJEdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVjN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWNpTENKbWFXeGxJam9pYzNSaFkyc3RaWE15TURFMUxXMXZaSFZzWlhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRnZDJWaWNHRmphMVZ1YVhabGNuTmhiRTF2WkhWc1pVUmxabWx1YVhScGIyNG9jbTl2ZEN3Z1ptRmpkRzl5ZVNrZ2UxeHVYSFJwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MGJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXTjBiM0o1S0NrN1hHNWNkR1ZzYzJVZ2FXWW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0tWeHVYSFJjZEdSbFptbHVaU2hjSW5OMFlXTnJMV1Z6TWpBeE5TMXRiMlIxYkdWelhDSXNJRnRkTENCbVlXTjBiM0o1S1R0Y2JseDBaV3h6WlNCcFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MFpYaHdiM0owYzF0Y0luTjBZV05yTFdWek1qQXhOUzF0YjJSMWJHVnpYQ0pkSUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJsYkhObFhHNWNkRngwY205dmRGdGNJbk4wWVdOckxXVnpNakF4TlMxdGIyUjFiR1Z6WENKZElEMGdabUZqZEc5eWVTZ3BPMXh1ZlNrb2RHaHBjeXdnWm5WdVkzUnBiMjRvS1NCN1hHNXlaWFIxY200Z1hHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVYRzRnS2lvdklpd2lJRngwTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBkbUZ5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE1nUFNCN2ZUdGNibHh1SUZ4MEx5OGdWR2hsSUhKbGNYVnBjbVVnWm5WdVkzUnBiMjVjYmlCY2RHWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4dUlGeDBYSFF2THlCRGFHVmpheUJwWmlCdGIyUjFiR1VnYVhNZ2FXNGdZMkZqYUdWY2JpQmNkRngwYVdZb2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwcFhHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc1Y2JpQmNkRngwTHk4Z1EzSmxZWFJsSUdFZ2JtVjNJRzF2WkhWc1pTQW9ZVzVrSUhCMWRDQnBkQ0JwYm5SdklIUm9aU0JqWVdOb1pTbGNiaUJjZEZ4MGRtRnlJRzF2WkhWc1pTQTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRJRDBnZTF4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OUxGeHVJRngwWEhSY2RHbGtPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzYjJGa1pXUTZJR1poYkhObFhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBPMXh1WEc0Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmlCY2RGeDBiVzlrZFd4bExteHZZV1JsWkNBOUlIUnlkV1U3WEc1Y2JpQmNkRngwTHk4Z1VtVjBkWEp1SUhSb1pTQmxlSEJ2Y25SeklHOW1JSFJvWlNCdGIyUjFiR1ZjYmlCY2RGeDBjbVYwZFhKdUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dUlGeDBmVnh1WEc1Y2JpQmNkQzh2SUdWNGNHOXpaU0IwYUdVZ2JXOWtkV3hsY3lCdlltcGxZM1FnS0Y5ZmQyVmljR0ZqYTE5dGIyUjFiR1Z6WDE4cFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG0wZ1BTQnRiMlIxYkdWek8xeHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVqSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3p0Y2JseHVJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0E5SUZ3aVhDSTdYRzVjYmlCY2RDOHZJRXh2WVdRZ1pXNTBjbmtnYlc5a2RXeGxJR0Z1WkNCeVpYUjFjbTRnWlhod2IzSjBjMXh1SUZ4MGNtVjBkWEp1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b01DazdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQjNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQXlObU5sT1RNNU56azNNRGd4TVdFNE1qTTJObHh1SUNvcUx5SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZOMFlXTnJJSHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYSnlJRDBnVzEwN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEIxYzJnb1pXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ5Y2k1d2RYTm9LR1ZzS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQndiM0FvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aGNuSXViR1Z1WjNSb0xTMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZEc5d0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUM1c1lYTjBLQ2tnYm05MElHUmxabWx1WldRZ2FXNGdiMnhrWlhJZ2JtOWtaU0IyWlhKemFXOXVjMXh5WEc0Z0lDQWdJQ0FnSUM4dklISmxkSFZ5YmlCMGFHbHpMbUZ5Y2k1c1lYTjBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5VzNSb2FYTXVZWEp5TG14bGJtZDBhQ0F0SURGZE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSGRwZEdoRmJHVnRaVzUwS0dWc0xDQmpZV3hzWW1GamF5d2dZMjl1ZEdWNGRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSFZ6YUNobGJDazdYSEpjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzdVkyRnNiQ2hqYjI1MFpYaDBLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHWnBibUZzYkhrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Y0NncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5emRHRmpheTVxYzF4dUlDb3FMeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9hVzV6ZEdGdVkyVXNJRU52Ym5OMGNuVmpkRzl5S1NCN1hHNGdJR2xtSUNnaEtHbHVjM1JoYm1ObElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtUdGNiaUFnZlZ4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F4WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHh1ZG1GeUlGOWtaV1pwYm1WUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhsY0lpazdYRzVjYm5aaGNpQmZaR1ZtYVc1bFVISnZjR1Z5ZEhreUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlpHVm1hVzVsVUhKdmNHVnlkSGtwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHRnlaMlYwTENCd2NtOXdjeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmtaWE5qY21sd2RHOXlJRDBnY0hKdmNITmJhVjA3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9YQ0oyWVd4MVpWd2lJR2x1SUdSbGMyTnlhWEIwYjNJcElHUmxjMk55YVhCMGIzSXVkM0pwZEdGaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0tEQXNJRjlrWldacGJtVlFjbTl3WlhKMGVUSXVaR1ZtWVhWc2RDa29kR0Z5WjJWMExDQmtaWE5qY21sd2RHOXlMbXRsZVN3Z1pHVnpZM0pwY0hSdmNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaERiMjV6ZEhKMVkzUnZjaXdnY0hKdmRHOVFjbTl3Y3l3Z2MzUmhkR2xqVUhKdmNITXBJSHRjYmlBZ0lDQnBaaUFvY0hKdmRHOVFjbTl3Y3lrZ1pHVm1hVzVsVUhKdmNHVnlkR2xsY3loRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXNJSEJ5YjNSdlVISnZjSE1wTzF4dUlDQWdJR2xtSUNoemRHRjBhV05RY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE8xeHVJQ0FnSUhKbGRIVnliaUJEYjI1emRISjFZM1J2Y2p0Y2JpQWdmVHRjYm4wb0tUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNNdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ00xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTY3BPMXh1ZG1GeUlDUlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUxDQmtaWE5qS1h0Y2JpQWdjbVYwZFhKdUlDUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU3dnWkdWell5azdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTkZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiaTh2SURFNUxqRXVNaTQwSUM4Z01UVXVNaTR6TGpZZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcExDQW5UMkpxWldOMEp5d2dlMlJsWm1sdVpWQnliM0JsY25SNU9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bWZTazdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJRkJTVDFSUFZGbFFSU0E5SUNkd2NtOTBiM1I1Y0dVbk8xeHVYRzUyWVhJZ0pHVjRjRzl5ZENBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUc1aGJXVXNJSE52ZFhKalpTbDdYRzRnSUhaaGNpQkpVMTlHVDFKRFJVUWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUdYRzRnSUNBZ0xDQkpVMTlIVEU5Q1FVd2dQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUhYRzRnSUNBZ0xDQkpVMTlUVkVGVVNVTWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVRYRzRnSUNBZ0xDQkpVMTlRVWs5VVR5QWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVFYRzRnSUNBZ0xDQkpVMTlDU1U1RUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNUNYRzRnSUNBZ0xDQkpVMTlYVWtGUUlDQWdQU0IwZVhCbElDWWdKR1Y0Y0c5eWRDNVhYRzRnSUNBZ0xDQmxlSEJ2Y25SeklDQWdQU0JKVTE5SFRFOUNRVXdnUHlCamIzSmxJRG9nWTI5eVpWdHVZVzFsWFNCOGZDQW9ZMjl5WlZ0dVlXMWxYU0E5SUh0OUtWeHVJQ0FnSUN3Z1pYaHdVSEp2ZEc4Z0lEMGdaWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQjBZWEpuWlhRZ0lDQWdQU0JKVTE5SFRFOUNRVXdnUHlCbmJHOWlZV3dnT2lCSlUxOVRWRUZVU1VNZ1B5Qm5iRzlpWVd4YmJtRnRaVjBnT2lBb1oyeHZZbUZzVzI1aGJXVmRJSHg4SUh0OUtWdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQnJaWGtzSUc5M2Jpd2diM1YwTzF4dUlDQnBaaWhKVTE5SFRFOUNRVXdwYzI5MWNtTmxJRDBnYm1GdFpUdGNiaUFnWm05eUtHdGxlU0JwYmlCemIzVnlZMlVwZTF4dUlDQWdJQzh2SUdOdmJuUmhhVzV6SUdsdUlHNWhkR2wyWlZ4dUlDQWdJRzkzYmlBOUlDRkpVMTlHVDFKRFJVUWdKaVlnZEdGeVoyVjBJQ1ltSUhSaGNtZGxkRnRyWlhsZElDRTlQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvYjNkdUlDWW1JR3RsZVNCcGJpQmxlSEJ2Y25SektXTnZiblJwYm5WbE8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCdVlYUnBkbVVnYjNJZ2NHRnpjMlZrWEc0Z0lDQWdiM1YwSUQwZ2IzZHVJRDhnZEdGeVoyVjBXMnRsZVYwZ09pQnpiM1Z5WTJWYmEyVjVYVHRjYmlBZ0lDQXZMeUJ3Y21WMlpXNTBJR2RzYjJKaGJDQndiMnhzZFhScGIyNGdabTl5SUc1aGJXVnpjR0ZqWlhOY2JpQWdJQ0JsZUhCdmNuUnpXMnRsZVYwZ1BTQkpVMTlIVEU5Q1FVd2dKaVlnZEhsd1pXOW1JSFJoY21kbGRGdHJaWGxkSUNFOUlDZG1kVzVqZEdsdmJpY2dQeUJ6YjNWeVkyVmJhMlY1WFZ4dUlDQWdJQzh2SUdKcGJtUWdkR2x0WlhKeklIUnZJR2RzYjJKaGJDQm1iM0lnWTJGc2JDQm1jbTl0SUdWNGNHOXlkQ0JqYjI1MFpYaDBYRzRnSUNBZ09pQkpVMTlDU1U1RUlDWW1JRzkzYmlBL0lHTjBlQ2h2ZFhRc0lHZHNiMkpoYkNsY2JpQWdJQ0F2THlCM2NtRndJR2RzYjJKaGJDQmpiMjV6ZEhKMVkzUnZjbk1nWm05eUlIQnlaWFpsYm5RZ1kyaGhibWRsSUhSb1pXMGdhVzRnYkdsaWNtRnllVnh1SUNBZ0lEb2dTVk5mVjFKQlVDQW1KaUIwWVhKblpYUmJhMlY1WFNBOVBTQnZkWFFnUHlBb1puVnVZM1JwYjI0b1F5bDdYRzRnSUNBZ0lDQjJZWElnUmlBOUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdseklHbHVjM1JoYm1ObGIyWWdReWw3WEc0Z0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBd09pQnlaWFIxY200Z2JtVjNJRU03WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCdVpYY2dReWhoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb2djbVYwZFhKdUlHNWxkeUJES0dFc0lHSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ2NtVjBkWEp1SUc1bGR5QkRLR0VzSUdJc0lHTXBPMXh1SUNBZ0lDQWdJQ0I5SUhKbGRIVnliaUJETG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdSbHRRVWs5VVQxUlpVRVZkSUQwZ1ExdFFVazlVVDFSWlVFVmRPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFWTdYRzRnSUNBZ0x5OGdiV0ZyWlNCemRHRjBhV01nZG1WeWMybHZibk1nWm05eUlIQnliM1J2ZEhsd1pTQnRaWFJvYjJSelhHNGdJQ0FnZlNrb2IzVjBLU0E2SUVsVFgxQlNUMVJQSUNZbUlIUjVjR1Z2WmlCdmRYUWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTjBlQ2hHZFc1amRHbHZiaTVqWVd4c0xDQnZkWFFwSURvZ2IzVjBPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQndjbTkwYnlCdFpYUm9iMlJ6SUhSdklHTnZjbVV1SlVOUFRsTlVVbFZEVkU5U0pTNXRaWFJvYjJSekxpVk9RVTFGSlZ4dUlDQWdJR2xtS0VsVFgxQlNUMVJQS1h0Y2JpQWdJQ0FnSUNobGVIQnZjblJ6TG5acGNuUjFZV3dnZkh3Z0tHVjRjRzl5ZEhNdWRtbHlkSFZoYkNBOUlIdDlLU2xiYTJWNVhTQTlJRzkxZER0Y2JpQWdJQ0FnSUM4dklHVjRjRzl5ZENCd2NtOTBieUJ0WlhSb2IyUnpJSFJ2SUdOdmNtVXVKVU5QVGxOVVVsVkRWRTlTSlM1d2NtOTBiM1I1Y0dVdUpVNUJUVVVsWEc0Z0lDQWdJQ0JwWmloMGVYQmxJQ1lnSkdWNGNHOXlkQzVTSUNZbUlHVjRjRkJ5YjNSdklDWW1JQ0ZsZUhCUWNtOTBiMXRyWlhsZEtXaHBaR1VvWlhod1VISnZkRzhzSUd0bGVTd2diM1YwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc0dkx5QjBlWEJsSUdKcGRHMWhjRnh1SkdWNGNHOXlkQzVHSUQwZ01Uc2dJQ0F2THlCbWIzSmpaV1JjYmlSbGVIQnZjblF1UnlBOUlESTdJQ0FnTHk4Z1oyeHZZbUZzWEc0a1pYaHdiM0owTGxNZ1BTQTBPeUFnSUM4dklITjBZWFJwWTF4dUpHVjRjRzl5ZEM1UUlEMGdPRHNnSUNBdkx5QndjbTkwYjF4dUpHVjRjRzl5ZEM1Q0lEMGdNVFk3SUNBdkx5QmlhVzVrWEc0a1pYaHdiM0owTGxjZ1BTQXpNanNnSUM4dklIZHlZWEJjYmlSbGVIQnZjblF1VlNBOUlEWTBPeUFnTHk4Z2MyRm1aVnh1SkdWNGNHOXlkQzVTSUQwZ01USTRPeUF2THlCeVpXRnNJSEJ5YjNSdklHMWxkR2h2WkNCbWIzSWdZR3hwWW5KaGNubGdJRnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FrWlhod2IzSjBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWxlSEJ2Y25RdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTJYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZlbXh2YVhKdlkyc3ZZMjl5WlMxcWN5OXBjM04xWlhNdk9EWWphWE56ZFdWamIyMXRaVzUwTFRFeE5UYzFPVEF5T0Z4dWRtRnlJR2RzYjJKaGJDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1VFdGMGFDQTlQU0JOWVhSb1hHNGdJRDhnZDJsdVpHOTNJRG9nZEhsd1pXOW1JSE5sYkdZZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2MyVnNaaTVOWVhSb0lEMDlJRTFoZEdnZ1B5QnpaV3htSURvZ1JuVnVZM1JwYjI0b0ozSmxkSFZ5YmlCMGFHbHpKeWtvS1R0Y2JtbG1LSFI1Y0dWdlppQmZYMmNnUFQwZ0oyNTFiV0psY2ljcFgxOW5JRDBnWjJ4dlltRnNPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJkc2IySmhiQzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURkY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJblpoY2lCamIzSmxJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZG1WeWMybHZiam9nSnpJdU5DNHdKMzA3WEc1cFppaDBlWEJsYjJZZ1gxOWxJRDA5SUNkdWRXMWlaWEluS1Y5ZlpTQTlJR052Y21VN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNWtaV1pjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMjl5WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlEaGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSWk4dklHOXdkR2x2Ym1Gc0lDOGdjMmx0Y0d4bElHTnZiblJsZUhRZ1ltbHVaR2x1WjF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOMGVDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGxjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaDBlWEJsYjJZZ2FYUWdJVDBnSjJaMWJtTjBhVzl1SnlsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhRZ0t5QW5JR2x6SUc1dmRDQmhJR1oxYm1OMGFXOXVJU2NwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloTFdaMWJtTjBhVzl1TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UQmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW5aaGNpQmtVQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5bGNiaUFnTENCamNtVmhkR1ZFWlhOaklEMGdjbVZ4ZFdseVpTZ25MaTlmY0hKdmNHVnlkSGt0WkdWell5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0JyWlhrc0lIWmhiSFZsS1h0Y2JpQWdjbVYwZFhKdUlHUlFMbVlvYjJKcVpXTjBMQ0JyWlhrc0lHTnlaV0YwWlVSbGMyTW9NU3dnZG1Gc2RXVXBLVHRjYm4wZ09pQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHdGxlU3dnZG1Gc2RXVXBlMXh1SUNCdlltcGxZM1JiYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0J5WlhSMWNtNGdiMkpxWldOME8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXhYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKMllYSWdZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJRWxGT0Y5RVQwMWZSRVZHU1U1RklEMGdjbVZ4ZFdseVpTZ25MaTlmYVdVNExXUnZiUzFrWldacGJtVW5LVnh1SUNBc0lIUnZVSEpwYldsMGFYWmxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVR0Y2JseHVaWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTQTZJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcGUxeHVJQ0JoYms5aWFtVmpkQ2hQS1R0Y2JpQWdVQ0E5SUhSdlVISnBiV2wwYVhabEtGQXNJSFJ5ZFdVcE8xeHVJQ0JoYms5aWFtVmpkQ2hCZEhSeWFXSjFkR1Z6S1R0Y2JpQWdhV1lvU1VVNFgwUlBUVjlFUlVaSlRrVXBkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdaRkFvVHl3Z1VDd2dRWFIwY21saWRYUmxjeWs3WEc0Z0lIMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdhV1lvSjJkbGRDY2dhVzRnUVhSMGNtbGlkWFJsY3lCOGZDQW5jMlYwSnlCcGJpQkJkSFJ5YVdKMWRHVnpLWFJvY205M0lGUjVjR1ZGY25KdmNpZ25RV05qWlhOemIzSnpJRzV2ZENCemRYQndiM0owWldRaEp5azdYRzRnSUdsbUtDZDJZV3gxWlNjZ2FXNGdRWFIwY21saWRYUmxjeWxQVzFCZElEMGdRWFIwY21saWRYUmxjeTUyWVd4MVpUdGNiaUFnY21WMGRYSnVJRTg3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WkhBdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhNbHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdhV1lvSVdselQySnFaV04wS0dsMEtTbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUWdLeUFuSUdseklHNXZkQ0JoYmlCdlltcGxZM1FoSnlrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERXpYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFQwZ0oyOWlhbVZqZENjZ1B5QnBkQ0FoUFQwZ2JuVnNiQ0E2SUhSNWNHVnZaaUJwZENBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsekxXOWlhbVZqZEM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTBYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUNZbUlDRnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29jbVZ4ZFdseVpTZ25MaTlmWkc5dExXTnlaV0YwWlNjcEtDZGthWFluS1N3Z0oyRW5MQ0I3WjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdOenNnZlgwcExtRWdJVDBnTnp0Y2JuMHBPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBaVGd0Wkc5dExXUmxabWx1WlM1cWMxeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERTFYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpTENJdkx5QlVhR0Z1YXlkeklFbEZPQ0JtYjNJZ2FHbHpJR1oxYm01NUlHUmxabWx1WlZCeWIzQmxjblI1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2UzMHNJQ2RoSnl3Z2UyZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SURjN0lIMTlLUzVoSUNFOUlEYzdYRzU5S1R0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXhObHh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGVHVmpLWHRjYmlBZ2RISjVJSHRjYmlBZ0lDQnlaWFIxY200Z0lTRmxlR1ZqS0NrN1hHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibjA3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlpoYVd4ekxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVGRjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1pHOWpkVzFsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVrYjJOMWJXVnVkRnh1SUNBdkx5QnBiaUJ2YkdRZ1NVVWdkSGx3Wlc5bUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFnYVhNZ0oyOWlhbVZqZENkY2JpQWdMQ0JwY3lBOUlHbHpUMkpxWldOMEtHUnZZM1Z0Wlc1MEtTQW1KaUJwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYTWdQeUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtHbDBLU0E2SUh0OU8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaRzl0TFdOeVpXRjBaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFNFhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlBM0xqRXVNU0JVYjFCeWFXMXBkR2wyWlNocGJuQjFkQ0JiTENCUWNtVm1aWEp5WldSVWVYQmxYU2xjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcE8xeHVMeThnYVc1emRHVmhaQ0J2WmlCMGFHVWdSVk0ySUhOd1pXTWdkbVZ5YzJsdmJpd2dkMlVnWkdsa2JpZDBJR2x0Y0d4bGJXVnVkQ0JBUUhSdlVISnBiV2wwYVhabElHTmhjMlZjYmk4dklHRnVaQ0IwYUdVZ2MyVmpiMjVrSUdGeVozVnRaVzUwSUMwZ1pteGhaeUF0SUhCeVpXWmxjbkpsWkNCMGVYQmxJR2x6SUdFZ2MzUnlhVzVuWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMExDQlRLWHRjYmlBZ2FXWW9JV2x6VDJKcVpXTjBLR2wwS1NseVpYUjFjbTRnYVhRN1hHNGdJSFpoY2lCbWJpd2dkbUZzTzF4dUlDQnBaaWhUSUNZbUlIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MGIxTjBjbWx1WnlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzRnSUdsbUtIUjVjR1Z2WmlBb1ptNGdQU0JwZEM1MllXeDFaVTltS1NBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNGcGMwOWlhbVZqZENoMllXd2dQU0JtYmk1allXeHNLR2wwS1NrcGNtVjBkWEp1SUhaaGJEdGNiaUFnYVdZb0lWTWdKaVlnZEhsd1pXOW1JQ2htYmlBOUlHbDBMblJ2VTNSeWFXNW5LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twY21WMGRYSnVJSFpoYkR0Y2JpQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1SjNRZ1kyOXVkbVZ5ZENCdlltcGxZM1FnZEc4Z2NISnBiV2wwYVhabElIWmhiSFZsWENJcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0Y0hKcGJXbDBhWFpsTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01UbGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWW1sMGJXRndMQ0IyWVd4MVpTbDdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdaVzUxYldWeVlXSnNaU0FnT2lBaEtHSnBkRzFoY0NBbUlERXBMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nSVNoaWFYUnRZWEFnSmlBeUtTeGNiaUFnSUNCM2NtbDBZV0pzWlNBZ0lDQTZJQ0VvWW1sMGJXRndJQ1lnTkNrc1hHNGdJQ0FnZG1Gc2RXVWdJQ0FnSUNBZ09pQjJZV3gxWlZ4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY0hKdmNHVnlkSGt0WkdWell5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREl3WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N0YWNrLWVzMjAxNS1tb2R1bGVzL2Rpc3Qvc3RhY2stZXMyMDE1LW1vZHVsZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=